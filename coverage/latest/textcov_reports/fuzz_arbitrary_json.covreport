_RNvXs1m_Csk7csMpgu7wb_9arbitraryTNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB1e_4JsonNtB6_9Arbitrary9arbitrary8RawValueEB1Y_9arbitraryB1e_:
  574|  80.8k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  575|  80.8k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  576|  80.8k|            }
_RNvXsf_Csk7csMpgu7wb_9arbitraryINtNtNtNtCs9kHBRjCA353_3std11collections4hash3map7HashMapNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB27_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB2R_9arbitraryB27_:
  760|  45.9k|        u.arbitrary_iter()?.collect()
  761|  45.9k|    }
_RNvYNtCsfl1mzxY9WoK_19fuzz_arbitrary_json4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  189|  2.65k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|  2.65k|        Self::arbitrary(&mut u)
  191|  2.65k|    }
_RNvXsa_Csk7csMpgu7wb_9arbitraryINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB17_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1R_9arbitraryB17_:
  679|  57.3k|        u.arbitrary_iter()?.collect()
  680|  57.3k|    }
_RNvYNtCsfl1mzxY9WoK_19fuzz_arbitrary_json4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.65k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.65k|        let _ = depth;
  279|  2.65k|        (0, None)
  280|  2.65k|    }
_RNvYNtNtCsiD8oTJhN8wu_8rsonpath5query13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hintCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  277|  2.65k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.65k|        let _ = depth;
  279|  2.65k|        (0, None)
  280|  2.65k|    }
_RNvXsl_Csk7csMpgu7wb_9arbitraryNtNtCsc6jWpmc7Dho_5alloc6string6StringNtB5_9Arbitrary9arbitrary:
  869|  94.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  870|  94.3k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
  871|  94.3k|    }
_RNvXsI_Csk7csMpgu7wb_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  11.2k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  11.2k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  11.2k|                    u.fill_buffer(&mut buf)?;
  312|  11.2k|                    let mut x: $unsigned = 0;
  313|  89.6k|                    for i in 0..mem::size_of::<$ty>() {
  314|  89.6k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  89.6k|                    }
  316|  11.2k|                    Ok(x as $ty)
  317|  11.2k|                }
_RNvXsH_Csk7csMpgu7wb_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   206k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   206k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   206k|                    u.fill_buffer(&mut buf)?;
  312|   206k|                    let mut x: $unsigned = 0;
  313|   824k|                    for i in 0..mem::size_of::<$ty>() {
  314|   824k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   824k|                    }
  316|   206k|                    Ok(x as $ty)
  317|   206k|                }
_RNvXsk_Csk7csMpgu7wb_9arbitraryReNtB5_9Arbitrary9arbitrary:
  838|  94.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  839|  94.3k|        let size = u.arbitrary_len::<u8>()?;
  840|  94.3k|        match str::from_utf8(u.peek_bytes(size).unwrap()) {
  841|  7.40k|            Ok(s) => {
  842|  7.40k|                u.bytes(size).unwrap();
  843|  7.40k|                Ok(s)
  844|       |            }
  845|  86.9k|            Err(e) => {
  846|  86.9k|                let i = e.valid_up_to();
  847|  86.9k|                let valid = u.bytes(i).unwrap();
  848|  86.9k|                let s = unsafe {
  849|  86.9k|                    debug_assert!(str::from_utf8(valid).is_ok());
  850|  86.9k|                    str::from_utf8_unchecked(valid)
  851|  86.9k|                };
  852|  86.9k|                Ok(s)
  853|       |            }
  854|       |        }
  855|  94.3k|    }
_RNvXs0_Csk7csMpgu7wb_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  10.8k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  10.8k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  10.8k|        if let Some(c) = char::from_u32(c) {
  376|  10.6k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    211|            c -= SURROGATES_START;
  380|    211|            Ok(char::from_u32(c)
  381|    211|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  10.8k|    }
_RNvXsF_Csk7csMpgu7wb_9arbitraryhNtB5_9Arbitrary9size_hintB5_:
  320|  94.3k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  94.3k|                    let n = mem::size_of::<$ty>();
  322|  94.3k|                    (n, Some(n))
  323|  94.3k|                }
_RNvXs_Csk7csMpgu7wb_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   336k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   336k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   336k|    }
_RNvXsO_Csk7csMpgu7wb_9arbitraryxNtB5_9Arbitrary9arbitrary:
  309|  8.78k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  8.78k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  8.78k|                    u.fill_buffer(&mut buf)?;
  312|  8.78k|                    let mut x: $unsigned = 0;
  313|  70.2k|                    for i in 0..mem::size_of::<$ty>() {
  314|  70.2k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  70.2k|                    }
  316|  8.78k|                    Ok(x as $ty)
  317|  8.78k|                }
_RNvXsF_Csk7csMpgu7wb_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   336k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   336k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   336k|                    u.fill_buffer(&mut buf)?;
  312|   336k|                    let mut x: $unsigned = 0;
  313|   336k|                    for i in 0..mem::size_of::<$ty>() {
  314|   336k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   336k|                    }
  316|   336k|                    Ok(x as $ty)
  317|   336k|                }
_RNvXsS_Csk7csMpgu7wb_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  11.2k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  11.2k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  11.2k|                }

_RNCNvNtCsk7csMpgu7wb_9arbitrary9size_hint3and0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   28|  2.65k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsk7csMpgu7wb_9arbitrary9size_hint3andCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   26|  5.30k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  5.30k|    let lower = lhs.0 + rhs.0;
   28|  5.30k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  5.30k|    (lower, upper)
   30|  5.30k|}
_RINvNtCsk7csMpgu7wb_9arbitrary9size_hint15recursion_guardNCNvXNvCsfl1mzxY9WoK_19fuzz_arbitrary_json1__NtB10_8FuzzDataNtB4_9Arbitrary9size_hint0EB10_:
   12|  2.65k|pub fn recursion_guard(
   13|  2.65k|    depth: usize,
   14|  2.65k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.65k|) -> (usize, Option<usize>) {
   16|  2.65k|    const MAX_DEPTH: usize = 20;
   17|  2.65k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.65k|        f(depth + 1)
   21|       |    }
   22|  2.65k|}
_RNvNtCsk7csMpgu7wb_9arbitrary9size_hint7and_allCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   37|  2.65k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  2.65k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  2.65k|}

_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB20_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB20_:
  606|  45.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  45.9k|        &'b mut self,
  608|  45.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  45.9k|        Ok(ArbitraryIter {
  610|  45.9k|            u: &mut *self,
  611|  45.9k|            _marker: PhantomData,
  612|  45.9k|        })
  613|  45.9k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  167|   298k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   298k|    where
  169|   298k|        A: Arbitrary<'a>,
  170|   298k|    {
  171|   298k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   298k|    }
_RNvXs_NtCsk7csMpgu7wb_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtB1b_13JsonPathQueryNtB6_9Arbitrary9arbitrary7RawNodeENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  726|  18.2k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  18.2k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  18.2k|        if keep_going {
  729|  15.5k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|  2.65k|            None
  732|       |        }
  733|  18.2k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB1h_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1h_:
  167|  2.65k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  2.65k|    where
  169|  2.65k|        A: Arbitrary<'a>,
  170|  2.65k|    {
  171|  2.65k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  2.65k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured3lenCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  108|   182k|    pub fn len(&self) -> usize {
  109|   182k|        self.data.len()
  110|   182k|    }
_RNvXs_NtCsk7csMpgu7wb_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB1N_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextB1N_:
  726|   126k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|   126k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|   126k|        if keep_going {
  729|  80.8k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|  45.9k|            None
  732|       |        }
  733|   126k|    }
_RNvXs_NtCsk7csMpgu7wb_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB1a_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextB1a_:
  726|   153k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|   153k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|   153k|        if keep_going {
  729|  96.3k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|  57.3k|            None
  732|       |        }
  733|   153k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB1n_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1n_:
  606|  57.3k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  57.3k|        &'b mut self,
  608|  57.3k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  57.3k|        Ok(ArbitraryIter {
  610|  57.3k|            u: &mut *self,
  611|  57.3k|            _marker: PhantomData,
  612|  57.3k|        })
  613|  57.3k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  132|   182k|    pub fn is_empty(&self) -> bool {
  133|   182k|        self.len() == 0
  134|   182k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtB1o_13JsonPathQueryNtB5_9Arbitrary9arbitrary7RawNodeECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  606|  2.65k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  2.65k|        &'b mut self,
  608|  2.65k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  2.65k|        Ok(ArbitraryIter {
  610|  2.65k|            u: &mut *self,
  611|  2.65k|            _marker: PhantomData,
  612|  2.65k|        })
  613|  2.65k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECsiD8oTJhN8wu_8rsonpath:
  293|  4.28k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  4.28k|    where
  295|  4.28k|        T: Int,
  296|  4.28k|    {
  297|  4.28k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  4.28k|        self.data = &self.data[bytes_consumed..];
  299|  4.28k|        Ok(result)
  300|  4.28k|    }
_RNvXs_NtCsk7csMpgu7wb_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextCsiD8oTJhN8wu_8rsonpath:
  726|  13.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  13.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  13.5k|        if keep_going {
  729|  10.8k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|  2.70k|            None
  732|       |        }
  733|  13.5k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECsiD8oTJhN8wu_8rsonpath:
  606|  2.70k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  2.70k|        &'b mut self,
  608|  2.70k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  2.70k|        Ok(ArbitraryIter {
  610|  2.70k|            u: &mut *self,
  611|  2.70k|            _marker: PhantomData,
  612|  2.70k|        })
  613|  2.70k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCs3NN8x5qF7TE_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsiD8oTJhN8wu_8rsonpath:
  302|  4.28k|    fn int_in_range_impl<T>(
  303|  4.28k|        range: ops::RangeInclusive<T>,
  304|  4.28k|        mut bytes: impl Iterator<Item = u8>,
  305|  4.28k|    ) -> Result<(T, usize)>
  306|  4.28k|    where
  307|  4.28k|        T: Int,
  308|  4.28k|    {
  309|  4.28k|        let start = *range.start();
  310|  4.28k|        let end = *range.end();
  311|  4.28k|        assert!(
  312|  4.28k|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  4.28k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  4.28k|        }
  321|  4.28k|
  322|  4.28k|        // From here on out we work with the unsigned representation. All of the
  323|  4.28k|        // operations performed below work out just as well whether or not `T`
  324|  4.28k|        // is a signed or unsigned integer.
  325|  4.28k|        let start = start.to_unsigned();
  326|  4.28k|        let end = end.to_unsigned();
  327|  4.28k|
  328|  4.28k|        let delta = end.wrapping_sub(start);
  329|  4.28k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  4.28k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  4.28k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  33.8k|        while (bytes_consumed < mem::size_of::<T>())
  339|  33.8k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  29.6k|            let byte = match bytes.next() {
  342|     88|                None => break,
  343|  29.5k|                Some(b) => b,
  344|  29.5k|            };
  345|  29.5k|            bytes_consumed += 1;
  346|  29.5k|
  347|  29.5k|            // Combine this byte into our arbitrary integer, but avoid
  348|  29.5k|            // overflowing the shift for `u8` and `i8`.
  349|  29.5k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  29.5k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  4.28k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  4.28k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  4.28k|        let result = start.wrapping_add(offset);
  365|  4.28k|
  366|  4.28k|        // And convert back to our maybe-signed representation.
  367|  4.28k|        let result = T::from_unsigned(result);
  368|  4.28k|        debug_assert!(*range.start() <= result);
  369|  4.28k|        debug_assert!(result <= *range.end());
  370|       |
  371|  4.28k|        Ok((result, bytes_consumed))
  372|  4.28k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsiD8oTJhN8wu_8rsonpath:
  167|  13.5k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  13.5k|    where
  169|  13.5k|        A: Arbitrary<'a>,
  170|  13.5k|    {
  171|  13.5k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  13.5k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsiD8oTJhN8wu_8rsonpath:
  132|  15.5k|    pub fn is_empty(&self) -> bool {
  133|  15.5k|        self.len() == 0
  134|  15.5k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured3lenCsiD8oTJhN8wu_8rsonpath:
  108|  15.5k|    pub fn len(&self) -> usize {
  109|  15.5k|        self.data.len()
  110|  15.5k|    }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs3NN8x5qF7TE_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  69.4k|    fn int_in_range_impl<T>(
  303|  69.4k|        range: ops::RangeInclusive<T>,
  304|  69.4k|        mut bytes: impl Iterator<Item = u8>,
  305|  69.4k|    ) -> Result<(T, usize)>
  306|  69.4k|    where
  307|  69.4k|        T: Int,
  308|  69.4k|    {
  309|  69.4k|        let start = *range.start();
  310|  69.4k|        let end = *range.end();
  311|  69.4k|        assert!(
  312|  69.4k|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  69.4k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  69.4k|        }
  321|  69.4k|
  322|  69.4k|        // From here on out we work with the unsigned representation. All of the
  323|  69.4k|        // operations performed below work out just as well whether or not `T`
  324|  69.4k|        // is a signed or unsigned integer.
  325|  69.4k|        let start = start.to_unsigned();
  326|  69.4k|        let end = end.to_unsigned();
  327|  69.4k|
  328|  69.4k|        let delta = end.wrapping_sub(start);
  329|  69.4k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  69.4k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  69.4k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   208k|        while (bytes_consumed < mem::size_of::<T>())
  339|   138k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   138k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|   138k|                Some(b) => b,
  344|   138k|            };
  345|   138k|            bytes_consumed += 1;
  346|   138k|
  347|   138k|            // Combine this byte into our arbitrary integer, but avoid
  348|   138k|            // overflowing the shift for `u8` and `i8`.
  349|   138k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   138k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  69.4k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  69.4k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  69.4k|        let result = start.wrapping_add(offset);
  365|  69.4k|
  366|  69.4k|        // And convert back to our maybe-signed representation.
  367|  69.4k|        let result = T::from_unsigned(result);
  368|  69.4k|        debug_assert!(*range.start() <= result);
  369|  69.4k|        debug_assert!(result <= *range.end());
  370|       |
  371|  69.4k|        Ok((result, bytes_consumed))
  372|  69.4k|    }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int12wrapping_add:
  848|  4.28k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  4.28k|                    <$ty>::wrapping_add(self, rhs)
  850|  4.28k|                }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  213|  94.3k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  94.3k|    where
  215|  94.3k|        ElementType: Arbitrary<'a>,
  216|  94.3k|    {
  217|  94.3k|        let byte_size = self.arbitrary_byte_size()?;
  218|  94.3k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  94.3k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  94.3k|        let elem_size = std::cmp::max(1, elem_size);
  221|  94.3k|        Ok(byte_size / elem_size)
  222|  94.3k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  94.3k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  94.3k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  94.3k|        }
  552|  94.3k|
  553|  94.3k|        let (for_buf, rest) = self.data.split_at(size);
  554|  94.3k|        self.data = rest;
  555|  94.3k|        Ok(for_buf)
  556|  94.3k|    }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int10from_usize:
  840|   138k|                fn from_usize(u: usize) -> Self {
  841|   138k|                    u as Self
  842|   138k|                }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int10from_usize:
  840|  33.8k|                fn from_usize(u: usize) -> Self {
  841|  33.8k|                    u as Self
  842|  33.8k|                }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int7from_u8:
  836|   138k|                fn from_u8(b: u8) -> Self {
  837|   138k|                    b as Self
  838|   138k|                }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  94.3k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  94.3k|        if self.data.is_empty() {
  226|    322|            Ok(0)
  227|  93.9k|        } else if self.data.len() == 1 {
  228|    154|            self.data = &[];
  229|    154|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|  93.8k|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|  24.3k|                let bytes = 1;
  242|  24.3k|                let max_size = self.data.len() - bytes;
  243|  24.3k|                let (rest, for_size) = self.data.split_at(max_size);
  244|  24.3k|                self.data = rest;
  245|  24.3k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|  69.4k|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|  69.4k|                let bytes = 2;
  248|  69.4k|                let max_size = self.data.len() - bytes;
  249|  69.4k|                let (rest, for_size) = self.data.split_at(max_size);
  250|  69.4k|                self.data = rest;
  251|  69.4k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|  93.8k|            Ok(len)
  267|       |        }
  268|  94.3k|    }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int13from_unsigned:
  860|  69.4k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  69.4k|                    unsigned as Self
  862|  69.4k|                }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int7from_u8:
  836|  29.5k|                fn from_u8(b: u8) -> Self {
  837|  29.5k|                    b as Self
  838|  29.5k|                }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int13from_unsigned:
  860|  4.28k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  4.28k|                    unsigned as Self
  862|  4.28k|                }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int11to_unsigned:
  856|   138k|                fn to_unsigned(self) -> Self::Unsigned {
  857|   138k|                    self as $unsigned_ty
  858|   138k|                }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  2.65k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.65k|        Unstructured { data }
   87|  2.65k|    }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  848|  24.3k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  24.3k|                    <$ty>::wrapping_add(self, rhs)
  850|  24.3k|                }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  844|  24.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  24.3k|                    <$ty>::checked_add(self, rhs)
  846|  24.3k|                }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  94.3k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  94.3k|        self.data.get(..size)
  581|  94.3k|    }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  840|  24.3k|                fn from_usize(u: usize) -> Self {
  841|  24.3k|                    u as Self
  842|  24.3k|                }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   563k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   563k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   563k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   563k|        for byte in buffer[n..].iter_mut() {
  525|  79.4k|            *byte = 0;
  526|  79.4k|        }
  527|   563k|        self.data = &self.data[n..];
  528|   563k|        Ok(())
  529|   563k|    }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  856|  48.7k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  48.7k|                    self as $unsigned_ty
  858|  48.7k|                }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  844|  4.28k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  4.28k|                    <$ty>::checked_add(self, rhs)
  846|  4.28k|                }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  852|  24.3k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  24.3k|                    <$ty>::wrapping_sub(self, rhs)
  854|  24.3k|                }
_RINvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs3NN8x5qF7TE_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  24.3k|    fn int_in_range_impl<T>(
  303|  24.3k|        range: ops::RangeInclusive<T>,
  304|  24.3k|        mut bytes: impl Iterator<Item = u8>,
  305|  24.3k|    ) -> Result<(T, usize)>
  306|  24.3k|    where
  307|  24.3k|        T: Int,
  308|  24.3k|    {
  309|  24.3k|        let start = *range.start();
  310|  24.3k|        let end = *range.end();
  311|  24.3k|        assert!(
  312|  24.3k|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  24.3k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  24.3k|        }
  321|  24.3k|
  322|  24.3k|        // From here on out we work with the unsigned representation. All of the
  323|  24.3k|        // operations performed below work out just as well whether or not `T`
  324|  24.3k|        // is a signed or unsigned integer.
  325|  24.3k|        let start = start.to_unsigned();
  326|  24.3k|        let end = end.to_unsigned();
  327|  24.3k|
  328|  24.3k|        let delta = end.wrapping_sub(start);
  329|  24.3k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  24.3k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  24.3k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  48.7k|        while (bytes_consumed < mem::size_of::<T>())
  339|  24.3k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  24.3k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  24.3k|                Some(b) => b,
  344|  24.3k|            };
  345|  24.3k|            bytes_consumed += 1;
  346|  24.3k|
  347|  24.3k|            // Combine this byte into our arbitrary integer, but avoid
  348|  24.3k|            // overflowing the shift for `u8` and `i8`.
  349|  24.3k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|  24.3k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  24.3k|        let offset = if delta == T::Unsigned::MAX {
  357|     51|            arbitrary_int
  358|       |        } else {
  359|  24.3k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  24.3k|        let result = start.wrapping_add(offset);
  365|  24.3k|
  366|  24.3k|        // And convert back to our maybe-signed representation.
  367|  24.3k|        let result = T::from_unsigned(result);
  368|  24.3k|        debug_assert!(*range.start() <= result);
  369|  24.3k|        debug_assert!(result <= *range.end());
  370|       |
  371|  24.3k|        Ok((result, bytes_consumed))
  372|  24.3k|    }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int11to_unsigned:
  856|  8.56k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  8.56k|                    self as $unsigned_ty
  858|  8.56k|                }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int12wrapping_sub:
  852|  69.4k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  69.4k|                    <$ty>::wrapping_sub(self, rhs)
  854|  69.4k|                }
_RNvXs4_NtCsk7csMpgu7wb_9arbitrary12unstructuredyNtB5_3Int12wrapping_sub:
  852|  4.28k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  4.28k|                    <$ty>::wrapping_sub(self, rhs)
  854|  4.28k|                }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  836|  24.3k|                fn from_u8(b: u8) -> Self {
  837|  24.3k|                    b as Self
  838|  24.3k|                }
_RNvXs1_NtCsk7csMpgu7wb_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  860|  24.3k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  24.3k|                    unsigned as Self
  862|  24.3k|                }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int12wrapping_add:
  848|  69.4k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  69.4k|                    <$ty>::wrapping_add(self, rhs)
  850|  69.4k|                }
_RNvXs2_NtCsk7csMpgu7wb_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  844|  69.4k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  69.4k|                    <$ty>::checked_add(self, rhs)
  846|  69.4k|                }

_RNvXsh_CsbKFH6ETq8mZ_4itoayNtNtB5_7private6Sealed5writeCs7SR71ZnNPS_10serde_json:
  134|  5.21k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  135|  5.21k|                let is_nonnegative = self >= 0;
  136|  5.21k|                let mut n = if is_nonnegative {
  137|  5.21k|                    self as $conv_fn
  138|       |                } else {
  139|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  140|      0|                    (!(self as $conv_fn)).wrapping_add(1)
  141|       |                };
  142|  5.21k|                let mut curr = buf.len() as isize;
  143|  5.21k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  144|  5.21k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  145|  5.21k|
  146|  5.21k|                unsafe {
  147|  5.21k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  148|  5.21k|                    if mem::size_of::<$t>() >= 2 {
  149|       |                        // eagerly decode 4 characters at a time
  150|  24.9k|                        while n >= 10000 {
  151|  19.7k|                            let rem = (n % 10000) as isize;
  152|  19.7k|                            n /= 10000;
  153|  19.7k|
  154|  19.7k|                            let d1 = (rem / 100) << 1;
  155|  19.7k|                            let d2 = (rem % 100) << 1;
  156|  19.7k|                            curr -= 4;
  157|  19.7k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  158|  19.7k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  159|  19.7k|                        }
  160|      0|                    }
  161|       |
  162|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  163|  5.21k|                    let mut n = n as isize; // possibly reduce 64bit math
  164|  5.21k|
  165|  5.21k|                    // decode 2 more chars, if > 2 chars
  166|  5.21k|                    if n >= 100 {
  167|  4.79k|                        let d1 = (n % 100) << 1;
  168|  4.79k|                        n /= 100;
  169|  4.79k|                        curr -= 2;
  170|  4.79k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  171|  4.79k|                    }
  172|       |
  173|       |                    // decode last 1 or 2 chars
  174|  5.21k|                    if n < 10 {
  175|  4.84k|                        curr -= 1;
  176|  4.84k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  177|  4.84k|                    } else {
  178|    366|                        let d1 = n << 1;
  179|    366|                        curr -= 2;
  180|    366|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  181|    366|                    }
  182|       |
  183|  5.21k|                    if !is_nonnegative {
  184|      0|                        curr -= 1;
  185|      0|                        *buf_ptr.offset(curr) = b'-';
  186|  5.21k|                    }
  187|       |                }
  188|       |
  189|  5.21k|                let len = buf.len() - curr as usize;
  190|  5.21k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  191|  5.21k|                unsafe { str::from_utf8_unchecked(bytes) }
  192|  5.21k|            }
_RINvMs1_CsbKFH6ETq8mZ_4itoaNtB6_6Buffer6formatyECs7SR71ZnNPS_10serde_json:
   94|  5.21k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   95|  5.21k|        i.write(unsafe {
   96|  5.21k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   97|  5.21k|                as *mut <I as private::Sealed>::Buffer)
   98|  5.21k|        })
   99|  5.21k|    }
_RINvMs1_CsbKFH6ETq8mZ_4itoaNtB6_6Buffer6formatxECs7SR71ZnNPS_10serde_json:
   94|  1.30k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   95|  1.30k|        i.write(unsafe {
   96|  1.30k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   97|  1.30k|                as *mut <I as private::Sealed>::Buffer)
   98|  1.30k|        })
   99|  1.30k|    }
_RNvXsf_CsbKFH6ETq8mZ_4itoaxNtNtB5_7private6Sealed5writeCs7SR71ZnNPS_10serde_json:
  134|  1.30k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  135|  1.30k|                let is_nonnegative = self >= 0;
  136|  1.30k|                let mut n = if is_nonnegative {
  137|      0|                    self as $conv_fn
  138|       |                } else {
  139|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  140|  1.30k|                    (!(self as $conv_fn)).wrapping_add(1)
  141|       |                };
  142|  1.30k|                let mut curr = buf.len() as isize;
  143|  1.30k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  144|  1.30k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  145|  1.30k|
  146|  1.30k|                unsafe {
  147|  1.30k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  148|  1.30k|                    if mem::size_of::<$t>() >= 2 {
  149|       |                        // eagerly decode 4 characters at a time
  150|  5.58k|                        while n >= 10000 {
  151|  4.27k|                            let rem = (n % 10000) as isize;
  152|  4.27k|                            n /= 10000;
  153|  4.27k|
  154|  4.27k|                            let d1 = (rem / 100) << 1;
  155|  4.27k|                            let d2 = (rem % 100) << 1;
  156|  4.27k|                            curr -= 4;
  157|  4.27k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  158|  4.27k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  159|  4.27k|                        }
  160|      0|                    }
  161|       |
  162|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  163|  1.30k|                    let mut n = n as isize; // possibly reduce 64bit math
  164|  1.30k|
  165|  1.30k|                    // decode 2 more chars, if > 2 chars
  166|  1.30k|                    if n >= 100 {
  167|    965|                        let d1 = (n % 100) << 1;
  168|    965|                        n /= 100;
  169|    965|                        curr -= 2;
  170|    965|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  171|    965|                    }
  172|       |
  173|       |                    // decode last 1 or 2 chars
  174|  1.30k|                    if n < 10 {
  175|  1.18k|                        curr -= 1;
  176|  1.18k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  177|  1.18k|                    } else {
  178|    126|                        let d1 = n << 1;
  179|    126|                        curr -= 2;
  180|    126|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  181|    126|                    }
  182|       |
  183|  1.30k|                    if !is_nonnegative {
  184|  1.30k|                        curr -= 1;
  185|  1.30k|                        *buf_ptr.offset(curr) = b'-';
  186|  1.30k|                    }
  187|       |                }
  188|       |
  189|  1.30k|                let len = buf.len() - curr as usize;
  190|  1.30k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  191|  1.30k|                unsafe { str::from_utf8_unchecked(bytes) }
  192|  1.30k|            }
_RNvMs1_CsbKFH6ETq8mZ_4itoaNtB5_6Buffer3newCs7SR71ZnNPS_10serde_json:
   86|  6.51k|    pub fn new() -> Buffer {
   87|  6.51k|        let bytes = [MaybeUninit::<u8>::uninit(); I128_MAX_LEN];
   88|  6.51k|        Buffer { bytes }
   89|  6.51k|    }

rust_fuzzer_test_input:
  259|  2.65k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.65k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.65k|
  262|  2.65k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.65k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.65k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.65k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.65k|                // get to longer inputs that actually lead to interesting executions
  267|  2.65k|                // quicker.
  268|  2.65k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.65k|                }
  271|  2.65k|
  272|  2.65k|                let mut u = Unstructured::new(bytes);
  273|  2.65k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.65k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.65k|                }
  291|       |
  292|  2.65k|                let data = match data {
  293|  2.65k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.65k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.65k|                result.to_libfuzzer_code()
  299|  2.65k|            }
_RNvNvCsfl1mzxY9WoK_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  303|  2.65k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.65k|                $body
  305|  2.65k|            }
LLVMFuzzerTestOneInput:
   58|  2.65k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.65k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.65k|    });
   63|  2.65k|
   64|  2.65k|    match test_input {
   65|  2.65k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.65k|}
_RNCNvCsaU9MXpF9IMB_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.65k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.65k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.65k|        rust_fuzzer_test_input(data_slice)
   62|  2.65k|    });
_RNvMs_CsaU9MXpF9IMB_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  2.65k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.65k|        match self {
   42|  2.54k|            Corpus::Keep => 0,
   43|    114|            Corpus::Reject => -1,
   44|       |        }
   45|  2.65k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvCs9QJjCmIOGVu_3log9max_level:
 1270|  2.09M|pub fn max_level() -> LevelFilter {
 1271|  2.09M|    // Since `LevelFilter` is `repr(usize)`,
 1272|  2.09M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1273|  2.09M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1274|  2.09M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1275|  2.09M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1276|  2.09M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1277|  2.09M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1278|  2.09M|}
_RNvXs_Cs9QJjCmIOGVu_3logNtB4_5LevelINtNtCs3NN8x5qF7TE_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  464|  3.28M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|  3.28M|        Some((*self as usize).cmp(&(*other as usize)))
  466|  3.28M|    }
_RNvXs_Cs9QJjCmIOGVu_3logNtB4_5LevelINtNtCs3NN8x5qF7TE_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsiD8oTJhN8wu_8rsonpath:
  464|   906k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|   906k|        Some((*self as usize).cmp(&(*other as usize)))
  466|   906k|    }

_RNvMs2_NtCs6qstwpSgkKS_9once_cell3impINtB5_8OnceCellNtNtCsc6jWpmc7Dho_5alloc6string6StringE14is_initializedCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   49|  2.65k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.65k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.65k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.65k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.65k|        // `SeqCst` operations on the slow path.
   54|  2.65k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.65k|    }

_RNvMs4_NtCs6qstwpSgkKS_9once_cell4syncINtB5_8OnceCellNtNtCsc6jWpmc7Dho_5alloc6string6StringE3getCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  965|  2.65k|        pub fn get(&self) -> Option<&T> {
  966|  2.65k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  2.65k|                None
  971|       |            }
  972|  2.65k|        }

_RNvXs5_NtCsOS2GyhLXfu_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCs7SR71ZnNPS_10serde_json:
  168|  7.48k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  7.48k|        raw::format64(self, result)
  170|  7.48k|    }
_RINvMNtCsOS2GyhLXfu_3ryu6bufferNtB3_6Buffer13format_finitedECs7SR71ZnNPS_10serde_json:
   72|  7.48k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  7.48k|        unsafe {
   74|  7.48k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  7.48k|            debug_assert!(n <= self.bytes.len());
   76|  7.48k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  7.48k|            str::from_utf8_unchecked(slice)
   78|  7.48k|        }
   79|  7.48k|    }
_RNvMNtCsOS2GyhLXfu_3ryu6bufferNtB2_6Buffer3newCs7SR71ZnNPS_10serde_json:
   29|  7.48k|    pub fn new() -> Self {
   30|  7.48k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  7.48k|        Buffer { bytes }
   32|  7.48k|    }

_RNvNtCsOS2GyhLXfu_3ryu6common8pow5bits:
   64|  7.42k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|       |    // This approximation works up to the point that the multiplication
   66|       |    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|       |    // would fail at 5^4004 which is just greater than 2^9297.
   68|  7.42k|    debug_assert!(e >= 0);
   69|  7.42k|    debug_assert!(e <= 3528);
   70|  7.42k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  7.42k|}
_RNvNtCsOS2GyhLXfu_3ryu6common10log10_pow5:
   90|  5.08k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|       |    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  5.08k|    debug_assert!(e >= 0);
   93|  5.08k|    debug_assert!(e <= 2620);
   94|  5.08k|    (e as u32 * 732923) >> 20
   95|  5.08k|}
_RNvNtCsOS2GyhLXfu_3ryu6common10log10_pow2:
   81|  2.33k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|       |    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  2.33k|    debug_assert!(e >= 0);
   84|  2.33k|    debug_assert!(e <= 1650);
   85|  2.33k|    (e as u32 * 78913) >> 18
   86|  2.33k|}

_RNvNtCsOS2GyhLXfu_3ryu3d2s16decimal_length17:
   36|  7.42k|pub fn decimal_length17(v: u64) -> u32 {
   37|       |    // This is slightly faster than a loop.
   38|       |    // The average output length is 16.38 digits, so we check high-to-low.
   39|       |    // Function precondition: v is not an 18, 19, or 20-digit number.
   40|       |    // (17 digits are sufficient for round-tripping.)
   41|  7.42k|    debug_assert!(v < 100000000000000000);
   42|       |
   43|  7.42k|    if v >= 10000000000000000 {
   44|  2.66k|        17
   45|  4.75k|    } else if v >= 1000000000000000 {
   46|  2.54k|        16
   47|  2.20k|    } else if v >= 100000000000000 {
   48|  1.01k|        15
   49|  1.19k|    } else if v >= 10000000000000 {
   50|     81|        14
   51|  1.11k|    } else if v >= 1000000000000 {
   52|    120|        13
   53|    994|    } else if v >= 100000000000 {
   54|     62|        12
   55|    932|    } else if v >= 10000000000 {
   56|     54|        11
   57|    878|    } else if v >= 1000000000 {
   58|    173|        10
   59|    705|    } else if v >= 100000000 {
   60|     47|        9
   61|    658|    } else if v >= 10000000 {
   62|     79|        8
   63|    579|    } else if v >= 1000000 {
   64|    158|        7
   65|    421|    } else if v >= 100000 {
   66|     97|        6
   67|    324|    } else if v >= 10000 {
   68|     48|        5
   69|    276|    } else if v >= 1000 {
   70|     52|        4
   71|    224|    } else if v >= 100 {
   72|    126|        3
   73|     98|    } else if v >= 10 {
   74|     14|        2
   75|       |    } else {
   76|     84|        1
   77|       |    }
   78|  7.42k|}
_RNvNtCsOS2GyhLXfu_3ryu3d2s3d2d:
   89|  7.42k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   90|  7.42k|    let (e2, m2) = if ieee_exponent == 0 {
   91|    926|        (
   92|    926|            // We subtract 2 so that the bounds computation has 2 additional bits.
   93|    926|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   94|    926|            ieee_mantissa,
   95|    926|        )
   96|       |    } else {
   97|  6.49k|        (
   98|  6.49k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   99|  6.49k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  100|  6.49k|        )
  101|       |    };
  102|  7.42k|    let even = (m2 & 1) == 0;
  103|  7.42k|    let accept_bounds = even;
  104|  7.42k|
  105|  7.42k|    // Step 2: Determine the interval of valid decimal representations.
  106|  7.42k|    let mv = 4 * m2;
  107|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  108|  7.42k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  109|       |    // We would compute mp and mm like this:
  110|       |    // uint64_t mp = 4 * m2 + 2;
  111|       |    // uint64_t mm = mv - 1 - mm_shift;
  112|       |
  113|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  114|       |    let mut vr: u64;
  115|       |    let mut vp: u64;
  116|       |    let mut vm: u64;
  117|  7.42k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  118|  7.42k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  119|  7.42k|    let e10: i32;
  120|  7.42k|    let mut vm_is_trailing_zeros = false;
  121|  7.42k|    let mut vr_is_trailing_zeros = false;
  122|  7.42k|    if e2 >= 0 {
  123|       |        // I tried special-casing q == 0, but there was no effect on performance.
  124|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  125|  2.33k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  126|  2.33k|        e10 = q as i32;
  127|  2.33k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  128|  2.33k|        let i = -e2 + q as i32 + k;
  129|  2.33k|        vr = unsafe {
  130|  2.33k|            mul_shift_all_64(
  131|  2.33k|                m2,
  132|       |                #[cfg(feature = "small")]
  133|       |                &compute_inv_pow5(q),
  134|       |                #[cfg(not(feature = "small"))]
  135|       |                {
  136|  2.33k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  137|  2.33k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  138|  2.33k|                },
  139|  2.33k|                i as u32,
  140|  2.33k|                vp_uninit.as_mut_ptr(),
  141|  2.33k|                vm_uninit.as_mut_ptr(),
  142|  2.33k|                mm_shift,
  143|  2.33k|            )
  144|  2.33k|        };
  145|  2.33k|        vp = unsafe { vp_uninit.assume_init() };
  146|  2.33k|        vm = unsafe { vm_uninit.assume_init() };
  147|  2.33k|        if q <= 21 {
  148|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  149|       |            // may still be safe, but it's more difficult to reason about them.
  150|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  151|    616|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  152|    616|            if mv_mod5 == 0 {
  153|    209|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  154|    407|            } else if accept_bounds {
  155|    335|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  156|    335|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  157|    335|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  158|    335|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  159|    335|            } else {
  160|     72|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  161|     72|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  162|     72|            }
  163|  1.71k|        }
  164|       |    } else {
  165|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  166|  5.08k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  167|  5.08k|        e10 = q as i32 + e2;
  168|  5.08k|        let i = -e2 - q as i32;
  169|  5.08k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  170|  5.08k|        let j = q as i32 - k;
  171|  5.08k|        vr = unsafe {
  172|  5.08k|            mul_shift_all_64(
  173|  5.08k|                m2,
  174|       |                #[cfg(feature = "small")]
  175|       |                &compute_pow5(i as u32),
  176|       |                #[cfg(not(feature = "small"))]
  177|       |                {
  178|  5.08k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  179|  5.08k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  180|  5.08k|                },
  181|  5.08k|                j as u32,
  182|  5.08k|                vp_uninit.as_mut_ptr(),
  183|  5.08k|                vm_uninit.as_mut_ptr(),
  184|  5.08k|                mm_shift,
  185|  5.08k|            )
  186|  5.08k|        };
  187|  5.08k|        vp = unsafe { vp_uninit.assume_init() };
  188|  5.08k|        vm = unsafe { vm_uninit.assume_init() };
  189|  5.08k|        if q <= 1 {
  190|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  191|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  192|    572|            vr_is_trailing_zeros = true;
  193|    572|            if accept_bounds {
  194|    417|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  195|    417|                vm_is_trailing_zeros = mm_shift == 1;
  196|    417|            } else {
  197|    155|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  198|    155|                vp -= 1;
  199|    155|            }
  200|  4.51k|        } else if q < 63 {
  201|  1.20k|            // TODO(ulfjack): Use a tighter bound here.
  202|  1.20k|            // We want to know if the full product has at least q trailing zeros.
  203|  1.20k|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  204|  1.20k|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  205|  1.20k|            // <=> p2(mv) >= q (because -e2 >= q)
  206|  1.20k|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  207|  3.31k|        }
  208|       |    }
  209|       |
  210|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  211|  7.42k|    let mut removed = 0i32;
  212|  7.42k|    let mut last_removed_digit = 0u8;
  213|       |    // On average, we remove ~2 digits.
  214|  7.42k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  215|       |        // General case, which happens rarely (~0.7%).
  216|       |        loop {
  217|  4.75k|            let vp_div10 = div10(vp);
  218|  4.75k|            let vm_div10 = div10(vm);
  219|  4.75k|            if vp_div10 <= vm_div10 {
  220|  1.14k|                break;
  221|  3.61k|            }
  222|  3.61k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  223|  3.61k|            let vr_div10 = div10(vr);
  224|  3.61k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  225|  3.61k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  226|  3.61k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  227|  3.61k|            last_removed_digit = vr_mod10 as u8;
  228|  3.61k|            vr = vr_div10;
  229|  3.61k|            vp = vp_div10;
  230|  3.61k|            vm = vm_div10;
  231|  3.61k|            removed += 1;
  232|       |        }
  233|  1.14k|        if vm_is_trailing_zeros {
  234|       |            loop {
  235|    730|                let vm_div10 = div10(vm);
  236|    730|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  237|    730|                if vm_mod10 != 0 {
  238|    371|                    break;
  239|    359|                }
  240|    359|                let vp_div10 = div10(vp);
  241|    359|                let vr_div10 = div10(vr);
  242|    359|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  243|    359|                vr_is_trailing_zeros &= last_removed_digit == 0;
  244|    359|                last_removed_digit = vr_mod10 as u8;
  245|    359|                vr = vr_div10;
  246|    359|                vp = vp_div10;
  247|    359|                vm = vm_div10;
  248|    359|                removed += 1;
  249|       |            }
  250|    773|        }
  251|  1.14k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  252|      0|            // Round even if the exact number is .....50..0.
  253|      0|            last_removed_digit = 4;
  254|  1.14k|        }
  255|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  256|  1.14k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  257|       |            as u64
  258|       |    } else {
  259|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  260|  6.27k|        let mut round_up = false;
  261|  6.27k|        let vp_div100 = div100(vp);
  262|  6.27k|        let vm_div100 = div100(vm);
  263|  6.27k|        // Optimization: remove two digits at a time (~86.2%).
  264|  6.27k|        if vp_div100 > vm_div100 {
  265|  4.52k|            let vr_div100 = div100(vr);
  266|  4.52k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  267|  4.52k|            round_up = vr_mod100 >= 50;
  268|  4.52k|            vr = vr_div100;
  269|  4.52k|            vp = vp_div100;
  270|  4.52k|            vm = vm_div100;
  271|  4.52k|            removed += 2;
  272|  4.52k|        }
  273|       |        // Loop iterations below (approximately), without optimization above:
  274|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  275|       |        // Loop iterations below (approximately), with optimization above:
  276|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  277|       |        loop {
  278|  9.11k|            let vp_div10 = div10(vp);
  279|  9.11k|            let vm_div10 = div10(vm);
  280|  9.11k|            if vp_div10 <= vm_div10 {
  281|  6.27k|                break;
  282|  2.83k|            }
  283|  2.83k|            let vr_div10 = div10(vr);
  284|  2.83k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  285|  2.83k|            round_up = vr_mod10 >= 5;
  286|  2.83k|            vr = vr_div10;
  287|  2.83k|            vp = vp_div10;
  288|  2.83k|            vm = vm_div10;
  289|  2.83k|            removed += 1;
  290|       |        }
  291|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  292|  6.27k|        vr + (vr == vm || round_up) as u64
  293|       |    };
  294|  7.42k|    let exp = e10 + removed;
  295|  7.42k|
  296|  7.42k|    FloatingDecimal64 {
  297|  7.42k|        exponent: exp,
  298|  7.42k|        mantissa: output,
  299|  7.42k|    }
  300|  7.42k|}

_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|    616|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|    616|    // I tried a case distinction on p, but there was no performance difference.
   58|    616|    pow5_factor(value) >= p
   59|    616|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics4div5:
   24|  2.36k|pub fn div5(x: u64) -> u64 {
   25|  2.36k|    x / 5
   26|  2.36k|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics12mul_shift_64:
   71|  22.2k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  22.2k|    let b0 = m as u128 * mul.0 as u128;
   73|  22.2k|    let b2 = m as u128 * mul.1 as u128;
   74|  22.2k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  22.2k|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics5div10:
   29|  35.6k|pub fn div10(x: u64) -> u64 {
   30|  35.6k|    x / 10
   31|  35.6k|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  7.42k|pub unsafe fn mul_shift_all_64(
   79|  7.42k|    m: u64,
   80|  7.42k|    mul: &(u64, u64),
   81|  7.42k|    j: u32,
   82|  7.42k|    vp: *mut u64,
   83|  7.42k|    vm: *mut u64,
   84|  7.42k|    mm_shift: u32,
   85|  7.42k|) -> u64 {
   86|  7.42k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  7.42k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  7.42k|    mul_shift_64(4 * m, mul, j)
   89|  7.42k|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics11pow5_factor:
   39|    616|fn pow5_factor(mut value: u64) -> u32 {
   40|    616|    let mut count = 0u32;
   41|       |    loop {
   42|  1.75k|        debug_assert!(value != 0);
   43|  1.75k|        let q = div5(value);
   44|  1.75k|        let r = (value as u32).wrapping_sub(5u32.wrapping_mul(q as u32));
   45|  1.75k|        if r != 0 {
   46|    616|            break;
   47|  1.13k|        }
   48|  1.13k|        value = q;
   49|  1.13k|        count += 1;
   50|       |    }
   51|    616|    count
   52|    616|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|  1.20k|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|  1.20k|    debug_assert!(value != 0);
   65|  1.20k|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|  1.20k|    (value & ((1u64 << p) - 1)) == 0
   68|  1.20k|}
_RNvNtCsOS2GyhLXfu_3ryu14d2s_intrinsics6div100:
   34|  17.0k|pub fn div100(x: u64) -> u64 {
   35|  17.0k|    x / 100
   36|  17.0k|}

_RNvNtNtCsOS2GyhLXfu_3ryu6pretty8exponent15write_exponent3:
    5|  6.06k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  6.06k|    let sign = k < 0;
    7|  6.06k|    if sign {
    8|  3.58k|        *result = b'-';
    9|  3.58k|        result = result.offset(1);
   10|  3.58k|        k = -k;
   11|  3.58k|    }
   12|       |
   13|  6.06k|    debug_assert!(k < 1000);
   14|  6.06k|    if k >= 100 {
   15|  4.50k|        *result = b'0' + (k / 100) as u8;
   16|  4.50k|        k %= 100;
   17|  4.50k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  4.50k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  4.50k|        sign as usize + 3
   20|  1.55k|    } else if k >= 10 {
   21|  1.29k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.29k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.29k|        sign as usize + 2
   24|       |    } else {
   25|    260|        *result = b'0' + k as u8;
   26|    260|        sign as usize + 1
   27|       |    }
   28|  6.06k|}

_RNvNtNtCsOS2GyhLXfu_3ryu6pretty8mantissa19write_mantissa_long:
    5|  7.35k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  7.35k|    if (output >> 32) != 0 {
    7|  6.56k|        // One expensive 64-bit division.
    8|  6.56k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  6.56k|        output /= 100_000_000;
   10|  6.56k|
   11|  6.56k|        let c = output2 % 10_000;
   12|  6.56k|        output2 /= 10_000;
   13|  6.56k|        let d = output2 % 10_000;
   14|  6.56k|        let c0 = (c % 100) << 1;
   15|  6.56k|        let c1 = (c / 100) << 1;
   16|  6.56k|        let d0 = (d % 100) << 1;
   17|  6.56k|        let d1 = (d / 100) << 1;
   18|  6.56k|        ptr::copy_nonoverlapping(
   19|  6.56k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  6.56k|            result.offset(-2),
   21|  6.56k|            2,
   22|  6.56k|        );
   23|  6.56k|        ptr::copy_nonoverlapping(
   24|  6.56k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  6.56k|            result.offset(-4),
   26|  6.56k|            2,
   27|  6.56k|        );
   28|  6.56k|        ptr::copy_nonoverlapping(
   29|  6.56k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  6.56k|            result.offset(-6),
   31|  6.56k|            2,
   32|  6.56k|        );
   33|  6.56k|        ptr::copy_nonoverlapping(
   34|  6.56k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  6.56k|            result.offset(-8),
   36|  6.56k|            2,
   37|  6.56k|        );
   38|  6.56k|        result = result.offset(-8);
   39|  6.56k|    }
   40|  7.35k|    write_mantissa(output as u32, result);
   41|  7.35k|}
_RNvNtNtCsOS2GyhLXfu_3ryu6pretty8mantissa14write_mantissa:
   44|  7.35k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  17.2k|    while output >= 10_000 {
   46|  9.86k|        let c = output - 10_000 * (output / 10_000);
   47|  9.86k|        output /= 10_000;
   48|  9.86k|        let c0 = (c % 100) << 1;
   49|  9.86k|        let c1 = (c / 100) << 1;
   50|  9.86k|        ptr::copy_nonoverlapping(
   51|  9.86k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  9.86k|            result.offset(-2),
   53|  9.86k|            2,
   54|  9.86k|        );
   55|  9.86k|        ptr::copy_nonoverlapping(
   56|  9.86k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  9.86k|            result.offset(-4),
   58|  9.86k|            2,
   59|  9.86k|        );
   60|  9.86k|        result = result.offset(-4);
   61|  9.86k|    }
   62|  7.35k|    if output >= 100 {
   63|  4.09k|        let c = (output % 100) << 1;
   64|  4.09k|        output /= 100;
   65|  4.09k|        ptr::copy_nonoverlapping(
   66|  4.09k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  4.09k|            result.offset(-2),
   68|  4.09k|            2,
   69|  4.09k|        );
   70|  4.09k|        result = result.offset(-2);
   71|  4.09k|    }
   72|  7.35k|    if output >= 10 {
   73|  3.10k|        let c = output << 1;
   74|  3.10k|        ptr::copy_nonoverlapping(
   75|  3.10k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  3.10k|            result.offset(-2),
   77|  3.10k|            2,
   78|  3.10k|        );
   79|  4.25k|    } else {
   80|  4.25k|        *result.offset(-1) = b'0' + output as u8;
   81|  4.25k|    }
   82|  7.35k|}

_RNvNtCsOS2GyhLXfu_3ryu6pretty8format64:
   52|  7.48k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  7.48k|    let bits = f.to_bits();
   54|  7.48k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  7.48k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  7.48k|    let ieee_exponent =
   57|  7.48k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  7.48k|
   59|  7.48k|    let mut index = 0isize;
   60|  7.48k|    if sign {
   61|  3.84k|        *result = b'-';
   62|  3.84k|        index += 1;
   63|  3.84k|    }
   64|       |
   65|  7.48k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|     61|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|     61|        return sign as usize + 3;
   68|  7.42k|    }
   69|  7.42k|
   70|  7.42k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  7.42k|
   72|  7.42k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  7.42k|    let k = v.exponent as isize;
   74|  7.42k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  7.42k|    debug_assert!(k >= -324);
   76|       |
   77|  7.42k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|    571|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|    572|        for i in length..kk {
   81|    572|            *result.offset(index + i) = b'0';
   82|    572|        }
   83|    571|        *result.offset(index + kk) = b'.';
   84|    571|        *result.offset(index + kk + 1) = b'0';
   85|    571|        index as usize + kk as usize + 2
   86|  6.85k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|     83|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|     83|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|     83|        *result.offset(index + kk) = b'.';
   91|     83|        index as usize + length as usize + 1
   92|  6.76k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    704|        *result.offset(index) = b'0';
   95|    704|        *result.offset(index + 1) = b'.';
   96|    704|        let offset = 2 - kk;
   97|  1.70k|        for i in 2..offset {
   98|  1.70k|            *result.offset(index + i) = b'0';
   99|  1.70k|        }
  100|    704|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    704|        index as usize + length as usize + offset as usize
  102|  6.06k|    } else if length == 1 {
  103|       |        // 1e30
  104|     62|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     62|        *result.offset(index + 1) = b'e';
  106|     62|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  6.00k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  6.00k|        *result.offset(index) = *result.offset(index + 1);
  111|  6.00k|        *result.offset(index + 1) = b'.';
  112|  6.00k|        *result.offset(index + length + 1) = b'e';
  113|  6.00k|        index as usize
  114|  6.00k|            + length as usize
  115|  6.00k|            + 2
  116|  6.00k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  7.48k|}

_RINvXs1G_NtNtCs7zU6kJgcrK9_5serde3ser5implsRNtNtCs7SR71ZnNPS_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  452|  83.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  83.4k|            where
  454|  83.4k|                S: Serializer,
  455|  83.4k|            {
  456|  83.4k|                (**self).serialize(serializer)
  457|  83.4k|            }
_RINvXs_NtNtCs7zU6kJgcrK9_5serde3ser5implsNtNtCsc6jWpmc7Dho_5alloc6string6StringNtB7_9Serialize9serializeINtNtCs7SR71ZnNPS_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2C_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   53|  58.5k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   54|  58.5k|    where
   55|  58.5k|        S: Serializer,
   56|  58.5k|    {
   57|  58.5k|        serializer.serialize_str(self)
   58|  58.5k|    }
_RINvXs1m_NtNtCs7zU6kJgcrK9_5serde3ser5implsINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtCs7SR71ZnNPS_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  190|  51.5k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  51.5k|            where
  192|  51.5k|                S: Serializer,
  193|  51.5k|            {
  194|  51.5k|                serializer.collect_seq(self)
  195|  51.5k|            }

_RINvYQINtNtCs7SR71ZnNPS_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBW_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer11collect_seqRINtNtCsc6jWpmc7Dho_5alloc3vec3VecB17_EEB9_:
 1271|  51.5k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  51.5k|    where
 1273|  51.5k|        I: IntoIterator,
 1274|  51.5k|        <I as IntoIterator>::Item: Serialize,
 1275|  51.5k|    {
 1276|  51.5k|        let mut iter = iter.into_iter();
 1277|  51.5k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  51.5k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  51.5k|        serializer.end()
 1280|  51.5k|    }
_RNCINvYQINtNtCs7SR71ZnNPS_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBY_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer11collect_seqRINtNtCsc6jWpmc7Dho_5alloc3vec3VecB19_EE0Bb_:
 1278|  83.4k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCs7zU6kJgcrK9_5serde3ser17iterator_len_hintINtNtNtCs3NN8x5qF7TE_4core5slice4iter4IterNtNtCs7SR71ZnNPS_10serde_json5value5ValueEEB1v_:
 1948|  51.5k|    match iter.size_hint() {
 1949|  51.5k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  51.5k|}
_RINvYINtNtCs7SR71ZnNPS_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBS_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeMap15serialize_entryNtNtCsc6jWpmc7Dho_5alloc6string6StringB13_EB8_:
 1801|  58.5k|    fn serialize_entry<K: ?Sized, V: ?Sized>(
 1802|  58.5k|        &mut self,
 1803|  58.5k|        key: &K,
 1804|  58.5k|        value: &V,
 1805|  58.5k|    ) -> Result<(), Self::Error>
 1806|  58.5k|    where
 1807|  58.5k|        K: Serialize,
 1808|  58.5k|        V: Serialize,
 1809|  58.5k|    {
 1810|  58.5k|        tri!(self.serialize_key(key));
 1811|  58.5k|        self.serialize_value(value)
 1812|  58.5k|    }

_RINvXs8_NtCs7SR71ZnNPS_10serde_json3mapINtB6_3MapNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorTBL_B1n_EE9from_iterINtNtNtB1O_8adapters3map3MapINtNtNtNtCs9kHBRjCA353_3std11collections4hash3map8IntoIterBL_NtNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB4z_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4u_B1n_INtNtB1Q_7convert4FromB4s_E4froms_0EEB4z_:
  399|  38.8k|    fn from_iter<T>(iter: T) -> Self
  400|  38.8k|    where
  401|  38.8k|        T: IntoIterator<Item = (String, Value)>,
  402|  38.8k|    {
  403|  38.8k|        Map {
  404|  38.8k|            map: FromIterator::from_iter(iter),
  405|  38.8k|        }
  406|  38.8k|    }
_RNvMNtCs7SR71ZnNPS_10serde_json3mapINtB2_3MapNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  187|  38.8k|    pub fn len(&self) -> usize {
  188|  38.8k|        self.map.len()
  189|  38.8k|    }
_RNvXsd_NtCs7SR71ZnNPS_10serde_json3mapRINtB5_3MapNtNtCsc6jWpmc7Dho_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  792|  38.8k|    fn into_iter(self) -> Self::IntoIter {
  793|  38.8k|        Iter {
  794|  38.8k|            iter: self.map.iter(),
  795|  38.8k|        }
  796|  38.8k|    }
_RNvXsg_NtCs7SR71ZnNPS_10serde_json3mapNtB5_4IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextB7_:
  423|  97.3k|            fn next(&mut self) -> Option<Self::Item> {
  424|  97.3k|                self.iter.next()
  425|  97.3k|            }

_RINvXs4_NtCs7SR71ZnNPS_10serde_json6numberNtB6_6NumberNtNtCs7zU6kJgcrK9_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB29_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  372|  13.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  373|  13.9k|    where
  374|  13.9k|        S: Serializer,
  375|  13.9k|    {
  376|  13.9k|        match self.n {
  377|  5.21k|            N::PosInt(u) => serializer.serialize_u64(u),
  378|  1.30k|            N::NegInt(i) => serializer.serialize_i64(i),
  379|  7.48k|            N::Float(f) => serializer.serialize_f64(f),
  380|       |        }
  381|  13.9k|    }
_RNvXsq_NtCs7SR71ZnNPS_10serde_json6numberNtB5_6NumberINtNtCs3NN8x5qF7TE_4core7convert4FromxE4fromB7_:
  755|  6.51k|                fn from(i: $ty) -> Self {
  756|  6.51k|                    let n = {
  757|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  758|       |                        {
  759|  6.51k|                            if i < 0 {
  760|  1.30k|                                N::NegInt(i as i64)
  761|       |                            } else {
  762|  5.21k|                                N::PosInt(i as u64)
  763|       |                            }
  764|       |                        }
  765|       |                        #[cfg(feature = "arbitrary_precision")]
  766|       |                        {
  767|       |                            itoa::Buffer::new().format(i).to_owned()
  768|       |                        }
  769|       |                    };
  770|  6.51k|                    Number { n }
  771|  6.51k|                }
_RNvMs1_NtCs7SR71ZnNPS_10serde_json6numberNtB5_6Number8from_f64B7_:
  264|  7.75k|    pub fn from_f64(f: f64) -> Option<Number> {
  265|  7.75k|        if f.is_finite() {
  266|  7.48k|            let n = {
  267|  7.48k|                #[cfg(not(feature = "arbitrary_precision"))]
  268|  7.48k|                {
  269|  7.48k|                    N::Float(f)
  270|  7.48k|                }
  271|  7.48k|                #[cfg(feature = "arbitrary_precision")]
  272|  7.48k|                {
  273|  7.48k|                    ryu::Buffer::new().format_finite(f).to_owned()
  274|  7.48k|                }
  275|  7.48k|            };
  276|  7.48k|            Some(Number { n })
  277|       |        } else {
  278|    276|            None
  279|       |        }
  280|  7.75k|    }

_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1p_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1701|  7.48k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1702|  7.48k|    where
 1703|  7.48k|        W: ?Sized + io::Write,
 1704|  7.48k|    {
 1705|  7.48k|        let mut buffer = ryu::Buffer::new();
 1706|  7.48k|        let s = buffer.format_finite(value);
 1707|  7.48k|        writer.write_all(s.as_bytes())
 1708|  7.48k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1r_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1857|  38.8k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1858|  38.8k|    where
 1859|  38.8k|        W: ?Sized + io::Write,
 1860|  38.8k|    {
 1861|  38.8k|        writer.write_all(b"}")
 1862|  38.8k|    }
_RINvXs6_NtCs7SR71ZnNPS_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBY_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeMap15serialize_valueB19_EB8_:
  642|  58.5k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  643|  58.5k|    where
  644|  58.5k|        T: ?Sized + Serialize,
  645|  58.5k|    {
  646|  58.5k|        match self {
  647|  58.5k|            Compound::Map { ser, .. } => {
  648|  58.5k|                tri!(ser
  649|  58.5k|                    .formatter
  650|  58.5k|                    .begin_object_value(&mut ser.writer)
  651|  58.5k|                    .map_err(Error::io));
  652|  58.5k|                tri!(value.serialize(&mut **ser));
  653|  58.5k|                ser.formatter
  654|  58.5k|                    .end_object_value(&mut ser.writer)
  655|  58.5k|                    .map_err(Error::io)
  656|       |            }
  657|       |            #[cfg(feature = "arbitrary_precision")]
  658|       |            Compound::Number { .. } => unreachable!(),
  659|       |            #[cfg(feature = "raw_value")]
  660|       |            Compound::RawValue { .. } => unreachable!(),
  661|       |        }
  662|  58.5k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1837|  83.4k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1838|  83.4k|    where
 1839|  83.4k|        W: ?Sized + io::Write,
 1840|  83.4k|    {
 1841|  83.4k|        Ok(())
 1842|  83.4k|    }
_RINvNtCs7SR71ZnNPS_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtBZ_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2051|  66.2k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2052|  66.2k|where
 2053|  66.2k|    W: ?Sized + io::Write,
 2054|  66.2k|    F: ?Sized + Formatter,
 2055|  66.2k|{
 2056|  66.2k|    tri!(formatter.begin_string(writer));
 2057|  66.2k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2058|  66.2k|    formatter.end_string(writer)
 2059|  66.2k|}
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1804|  51.5k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1805|  51.5k|    where
 1806|  51.5k|        W: ?Sized + io::Write,
 1807|  51.5k|    {
 1808|  51.5k|        writer.write_all(b"[")
 1809|  51.5k|    }
_RINvNtCs7SR71ZnNPS_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBP_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterB10_EB4_:
 2139|  2.65k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2140|  2.65k|where
 2141|  2.65k|    W: io::Write,
 2142|  2.65k|    T: ?Sized + Serialize,
 2143|  2.65k|{
 2144|  2.65k|    let mut ser = Serializer::new(writer);
 2145|  2.65k|    value.serialize(&mut ser)
 2146|  2.65k|}
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1v_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1881|  58.5k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1882|  58.5k|    where
 1883|  58.5k|        W: ?Sized + io::Write,
 1884|  58.5k|    {
 1885|  58.5k|        Ok(())
 1886|  58.5k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1751|   119k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1752|   119k|    where
 1753|   119k|        W: ?Sized + io::Write,
 1754|   119k|    {
 1755|       |        use self::CharEscape::*;
 1756|       |
 1757|   119k|        let s = match char_escape {
 1758|  6.68k|            Quote => b"\\\"",
 1759|    671|            ReverseSolidus => b"\\\\",
 1760|      0|            Solidus => b"\\/",
 1761|  3.36k|            Backspace => b"\\b",
 1762|    219|            FormFeed => b"\\f",
 1763|  1.16k|            LineFeed => b"\\n",
 1764|  3.43k|            CarriageReturn => b"\\r",
 1765|    720|            Tab => b"\\t",
 1766|   102k|            AsciiControl(byte) => {
 1767|   102k|                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1768|   102k|                let bytes = &[
 1769|   102k|                    b'\\',
 1770|   102k|                    b'u',
 1771|   102k|                    b'0',
 1772|   102k|                    b'0',
 1773|   102k|                    HEX_DIGITS[(byte >> 4) as usize],
 1774|   102k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1775|   102k|                ];
 1776|   102k|                return writer.write_all(bytes);
 1777|       |            }
 1778|       |        };
 1779|       |
 1780|  16.2k|        writer.write_all(s)
 1781|   119k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer14serialize_unitB7_:
  198|  14.3k|    fn serialize_unit(self) -> Result<()> {
  199|  14.3k|        self.formatter
  200|  14.3k|            .write_null(&mut self.writer)
  201|  14.3k|            .map_err(Error::io)
  202|  14.3k|    }
_RNvMs0_NtCs7SR71ZnNPS_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB10_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   48|  2.65k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   49|  2.65k|        Serializer { writer, formatter }
   50|  2.65k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer14serialize_boolB7_:
   76|  18.3k|    fn serialize_bool(self, value: bool) -> Result<()> {
   77|  18.3k|        self.formatter
   78|  18.3k|            .write_bool(&mut self.writer, value)
   79|  18.3k|            .map_err(Error::io)
   80|  18.3k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_seqB7_:
  280|  51.5k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  281|  51.5k|        tri!(self
  282|  51.5k|            .formatter
  283|  51.5k|            .begin_array(&mut self.writer)
  284|  51.5k|            .map_err(Error::io));
  285|  51.5k|        if len == Some(0) {
  286|  1.71k|            tri!(self
  287|  1.71k|                .formatter
  288|  1.71k|                .end_array(&mut self.writer)
  289|  1.71k|                .map_err(Error::io));
  290|  1.71k|            Ok(Compound::Map {
  291|  1.71k|                ser: self,
  292|  1.71k|                state: State::Empty,
  293|  1.71k|            })
  294|       |        } else {
  295|  49.8k|            Ok(Compound::Map {
  296|  49.8k|                ser: self,
  297|  49.8k|                state: State::First,
  298|  49.8k|            })
  299|       |        }
  300|  51.5k|    }
_RNvXsi_NtCs7SR71ZnNPS_10serde_json3serNtB5_5StateNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqB7_:
  458|   142k|#[derive(Eq, PartialEq)]
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1p_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1613|  1.30k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1614|  1.30k|    where
 1615|  1.30k|        W: ?Sized + io::Write,
 1616|  1.30k|    {
 1617|  1.30k|        let mut buffer = itoa::Buffer::new();
 1618|  1.30k|        let s = buffer.format(value);
 1619|  1.30k|        writer.write_all(s.as_bytes())
 1620|  1.30k|    }
_RNvMNtCs7SR71ZnNPS_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBX_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   24|  2.65k|    pub fn new(writer: W) -> Self {
   25|  2.65k|        Serializer::with_formatter(writer, CompactFormatter)
   26|  2.65k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1824|  83.4k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1825|  83.4k|    where
 1826|  83.4k|        W: ?Sized + io::Write,
 1827|  83.4k|    {
 1828|  83.4k|        if first {
 1829|  49.8k|            Ok(())
 1830|       |        } else {
 1831|  33.6k|            writer.write_all(b",")
 1832|       |        }
 1833|  83.4k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1722|  66.2k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1723|  66.2k|    where
 1724|  66.2k|        W: ?Sized + io::Write,
 1725|  66.2k|    {
 1726|  66.2k|        writer.write_all(b"\"")
 1727|  66.2k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_mapB7_:
  345|  38.8k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  346|  38.8k|        tri!(self
  347|  38.8k|            .formatter
  348|  38.8k|            .begin_object(&mut self.writer)
  349|  38.8k|            .map_err(Error::io));
  350|  38.8k|        if len == Some(0) {
  351|  2.26k|            tri!(self
  352|  2.26k|                .formatter
  353|  2.26k|                .end_object(&mut self.writer)
  354|  2.26k|                .map_err(Error::io));
  355|  2.26k|            Ok(Compound::Map {
  356|  2.26k|                ser: self,
  357|  2.26k|                state: State::Empty,
  358|  2.26k|            })
  359|       |        } else {
  360|  36.5k|            Ok(Compound::Map {
  361|  36.5k|                ser: self,
  362|  36.5k|                state: State::First,
  363|  36.5k|            })
  364|       |        }
  365|  38.8k|    }
_RNvXs9_NtCs7SR71ZnNPS_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB16_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_strB7_:
  800|  58.5k|    fn serialize_str(self, value: &str) -> Result<()> {
  801|  58.5k|        self.ser.serialize_str(value)
  802|  58.5k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1r_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1557|  14.3k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1558|  14.3k|    where
 1559|  14.3k|        W: ?Sized + io::Write,
 1560|  14.3k|    {
 1561|  14.3k|        writer.write_all(b"null")
 1562|  14.3k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1p_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1668|  5.21k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1669|  5.21k|    where
 1670|  5.21k|        W: ?Sized + io::Write,
 1671|  5.21k|    {
 1672|  5.21k|        let mut buffer = itoa::Buffer::new();
 1673|  5.21k|        let s = buffer.format(value);
 1674|  5.21k|        writer.write_all(s.as_bytes())
 1675|  5.21k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_i64B7_:
  104|  1.30k|    fn serialize_i64(self, value: i64) -> Result<()> {
  105|  1.30k|        self.formatter
  106|  1.30k|            .write_i64(&mut self.writer, value)
  107|  1.30k|            .map_err(Error::io)
  108|  1.30k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1901|  58.5k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1902|  58.5k|    where
 1903|  58.5k|        W: ?Sized + io::Write,
 1904|  58.5k|    {
 1905|  58.5k|        Ok(())
 1906|  58.5k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_f64B7_:
  165|  7.48k|    fn serialize_f64(self, value: f64) -> Result<()> {
  166|  7.48k|        match value.classify() {
  167|      0|            FpCategory::Nan | FpCategory::Infinite => self
  168|      0|                .formatter
  169|      0|                .write_null(&mut self.writer)
  170|      0|                .map_err(Error::io),
  171|  7.48k|            _ => self
  172|  7.48k|                .formatter
  173|  7.48k|                .write_f64(&mut self.writer, value)
  174|  7.48k|                .map_err(Error::io),
  175|       |        }
  176|  7.48k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_strB7_:
  186|  66.2k|    fn serialize_str(self, value: &str) -> Result<()> {
  187|  66.2k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  188|  66.2k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1r_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1566|  18.3k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1567|  18.3k|    where
 1568|  18.3k|        W: ?Sized + io::Write,
 1569|  18.3k|    {
 1570|  18.3k|        let s = if value {
 1571|  16.4k|            b"true" as &[u8]
 1572|       |        } else {
 1573|  1.90k|            b"false" as &[u8]
 1574|       |        };
 1575|  18.3k|        writer.write_all(s)
 1576|  18.3k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1r_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1732|  66.2k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1733|  66.2k|    where
 1734|  66.2k|        W: ?Sized + io::Write,
 1735|  66.2k|    {
 1736|  66.2k|        writer.write_all(b"\"")
 1737|  66.2k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1847|  38.8k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1848|  38.8k|    where
 1849|  38.8k|        W: ?Sized + io::Write,
 1850|  38.8k|    {
 1851|  38.8k|        writer.write_all(b"{")
 1852|  38.8k|    }
_RINvXs6_NtCs7SR71ZnNPS_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBY_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeMap13serialize_keyNtNtCsc6jWpmc7Dho_5alloc6string6StringEB8_:
  616|  58.5k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  617|  58.5k|    where
  618|  58.5k|        T: ?Sized + Serialize,
  619|  58.5k|    {
  620|  58.5k|        match self {
  621|  58.5k|            Compound::Map { ser, state } => {
  622|  58.5k|                tri!(ser
  623|  58.5k|                    .formatter
  624|  58.5k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  625|  58.5k|                    .map_err(Error::io));
  626|  58.5k|                *state = State::Rest;
  627|       |
  628|  58.5k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  629|       |
  630|  58.5k|                ser.formatter
  631|  58.5k|                    .end_object_key(&mut ser.writer)
  632|  58.5k|                    .map_err(Error::io)
  633|       |            }
  634|       |            #[cfg(feature = "arbitrary_precision")]
  635|       |            Compound::Number { .. } => unreachable!(),
  636|       |            #[cfg(feature = "raw_value")]
  637|       |            Compound::RawValue { .. } => unreachable!(),
  638|       |        }
  639|  58.5k|    }
_RINvNtCs7SR71ZnNPS_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB18_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2061|  66.2k|fn format_escaped_str_contents<W, F>(
 2062|  66.2k|    writer: &mut W,
 2063|  66.2k|    formatter: &mut F,
 2064|  66.2k|    value: &str,
 2065|  66.2k|) -> io::Result<()>
 2066|  66.2k|where
 2067|  66.2k|    W: ?Sized + io::Write,
 2068|  66.2k|    F: ?Sized + Formatter,
 2069|  66.2k|{
 2070|  66.2k|    let bytes = value.as_bytes();
 2071|  66.2k|
 2072|  66.2k|    let mut start = 0;
 2073|       |
 2074|   391k|    for (i, &byte) in bytes.iter().enumerate() {
 2075|   391k|        let escape = ESCAPE[byte as usize];
 2076|   391k|        if escape == 0 {
 2077|   272k|            continue;
 2078|   119k|        }
 2079|   119k|
 2080|   119k|        if start < i {
 2081|  19.1k|            tri!(formatter.write_string_fragment(writer, &value[start..i]));
 2082|  99.8k|        }
 2083|       |
 2084|   119k|        let char_escape = CharEscape::from_escape_table(escape, byte);
 2085|   119k|        tri!(formatter.write_char_escape(writer, char_escape));
 2086|       |
 2087|   119k|        start = i + 1;
 2088|       |    }
 2089|       |
 2090|  66.2k|    if start == bytes.len() {
 2091|  50.4k|        return Ok(());
 2092|  15.8k|    }
 2093|  15.8k|
 2094|  15.8k|    formatter.write_string_fragment(writer, &value[start..])
 2095|  66.2k|}
_RINvXs2_NtCs7SR71ZnNPS_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBY_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeSeq17serialize_elementRB19_EB8_:
  487|  83.4k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  488|  83.4k|    where
  489|  83.4k|        T: ?Sized + Serialize,
  490|  83.4k|    {
  491|  83.4k|        match self {
  492|  83.4k|            Compound::Map { ser, state } => {
  493|  83.4k|                tri!(ser
  494|  83.4k|                    .formatter
  495|  83.4k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  496|  83.4k|                    .map_err(Error::io));
  497|  83.4k|                *state = State::Rest;
  498|  83.4k|                tri!(value.serialize(&mut **ser));
  499|  83.4k|                ser.formatter
  500|  83.4k|                    .end_array_value(&mut ser.writer)
  501|  83.4k|                    .map_err(Error::io)
  502|       |            }
  503|       |            #[cfg(feature = "arbitrary_precision")]
  504|       |            Compound::Number { .. } => unreachable!(),
  505|       |            #[cfg(feature = "raw_value")]
  506|       |            Compound::RawValue { .. } => unreachable!(),
  507|       |        }
  508|  83.4k|    }
_RNvXs2_NtCs7SR71ZnNPS_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBX_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeSeq3endB7_:
  511|  51.5k|    fn end(self) -> Result<()> {
  512|  51.5k|        match self {
  513|  51.5k|            Compound::Map { ser, state } => match state {
  514|  1.71k|                State::Empty => Ok(()),
  515|  49.8k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  516|       |            },
  517|       |            #[cfg(feature = "arbitrary_precision")]
  518|       |            Compound::Number { .. } => unreachable!(),
  519|       |            #[cfg(feature = "raw_value")]
  520|       |            Compound::RawValue { .. } => unreachable!(),
  521|       |        }
  522|  51.5k|    }
_RNvMsa_NtCs7SR71ZnNPS_10serde_json3serNtB5_10CharEscape17from_escape_tableB7_:
 1537|   119k|    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {
 1538|   119k|        match escape {
 1539|  3.36k|            self::BB => CharEscape::Backspace,
 1540|    720|            self::TT => CharEscape::Tab,
 1541|  1.16k|            self::NN => CharEscape::LineFeed,
 1542|    219|            self::FF => CharEscape::FormFeed,
 1543|  3.43k|            self::RR => CharEscape::CarriageReturn,
 1544|  6.68k|            self::QU => CharEscape::Quote,
 1545|    671|            self::BS => CharEscape::ReverseSolidus,
 1546|   102k|            self::UU => CharEscape::AsciiControl(byte),
 1547|      0|            _ => unreachable!(),
 1548|       |        }
 1549|   119k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1892|  58.5k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1893|  58.5k|    where
 1894|  58.5k|        W: ?Sized + io::Write,
 1895|  58.5k|    {
 1896|  58.5k|        writer.write_all(b":")
 1897|  58.5k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1p_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1814|  51.5k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1815|  51.5k|    where
 1816|  51.5k|        W: ?Sized + io::Write,
 1817|  51.5k|    {
 1818|  51.5k|        writer.write_all(b"]")
 1819|  51.5k|    }
_RNvXs6_NtCs7SR71ZnNPS_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBX_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs7zU6kJgcrK9_5serde3ser12SerializeMap3endB7_:
  665|  38.8k|    fn end(self) -> Result<()> {
  666|  38.8k|        match self {
  667|  38.8k|            Compound::Map { ser, state } => match state {
  668|  2.26k|                State::Empty => Ok(()),
  669|  36.5k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  670|       |            },
  671|       |            #[cfg(feature = "arbitrary_precision")]
  672|       |            Compound::Number { .. } => unreachable!(),
  673|       |            #[cfg(feature = "raw_value")]
  674|       |            Compound::RawValue { .. } => unreachable!(),
  675|       |        }
  676|  38.8k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1866|  58.5k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1867|  58.5k|    where
 1868|  58.5k|        W: ?Sized + io::Write,
 1869|  58.5k|    {
 1870|  58.5k|        if first {
 1871|  36.5k|            Ok(())
 1872|       |        } else {
 1873|  22.0k|            writer.write_all(b",")
 1874|       |        }
 1875|  58.5k|    }
_RINvYNtNtCs7SR71ZnNPS_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1C_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1742|  34.9k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1743|  34.9k|    where
 1744|  34.9k|        W: ?Sized + io::Write,
 1745|  34.9k|    {
 1746|  34.9k|        writer.write_all(fragment.as_bytes())
 1747|  34.9k|    }
_RNvXs1_NtCs7SR71ZnNPS_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterENtNtCs7zU6kJgcrK9_5serde3ser10Serializer13serialize_u64B7_:
  138|  5.21k|    fn serialize_u64(self, value: u64) -> Result<()> {
  139|  5.21k|        self.formatter
  140|  5.21k|            .write_u64(&mut self.writer, value)
  141|  5.21k|            .map_err(Error::io)
  142|  5.21k|    }

_RNvXs_NtNtCs7SR71ZnNPS_10serde_json5value4fromNtB6_5ValueINtNtCs3NN8x5qF7TE_4core7convert4FromdE4from:
   57|  7.75k|    fn from(f: f64) -> Self {
   58|  7.75k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   59|  7.75k|    }
_RNvXsf_NtNtCs7SR71ZnNPS_10serde_json5value4fromNtB7_5ValueINtNtCs3NN8x5qF7TE_4core7convert4FromxE4from:
   12|  6.51k|                fn from(n: $ty) -> Self {
   13|  6.51k|                    Value::Number(n.into())
   14|  6.51k|                }

_RNvXs_NtCs7SR71ZnNPS_10serde_json5valueNtB4_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt:
  221|  2.65k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  222|  2.65k|        struct WriterFormatter<'a, 'b: 'a> {
  223|  2.65k|            inner: &'a mut fmt::Formatter<'b>,
  224|  2.65k|        }
  225|  2.65k|
  226|  2.65k|        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  227|  2.65k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  228|  2.65k|                // Safety: the serializer below only emits valid utf8 when using
  229|  2.65k|                // the default formatter.
  230|  2.65k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  231|  2.65k|                tri!(self.inner.write_str(s).map_err(io_error));
  232|  2.65k|                Ok(buf.len())
  233|  2.65k|            }
  234|  2.65k|
  235|  2.65k|            fn flush(&mut self) -> io::Result<()> {
  236|  2.65k|                Ok(())
  237|  2.65k|            }
  238|  2.65k|        }
  239|  2.65k|
  240|  2.65k|        fn io_error(_: fmt::Error) -> io::Error {
  241|  2.65k|            // Error value does not matter because Display impl just maps it
  242|  2.65k|            // back to fmt::Error.
  243|  2.65k|            io::Error::new(io::ErrorKind::Other, "fmt error")
  244|  2.65k|        }
  245|  2.65k|
  246|  2.65k|        let alternate = f.alternate();
  247|  2.65k|        let mut wr = WriterFormatter { inner: f };
  248|  2.65k|        if alternate {
  249|       |            // {:#}
  250|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  251|       |        } else {
  252|       |            // {}
  253|  2.65k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  254|       |        }
  255|  2.65k|    }
_RNvXNvXs_NtCs7SR71ZnNPS_10serde_json5valueNtB7_5ValueNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCs9kHBRjCA353_3std2io5Write5write:
  227|   628k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  228|   628k|                // Safety: the serializer below only emits valid utf8 when using
  229|   628k|                // the default formatter.
  230|   628k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  231|   628k|                tri!(self.inner.write_str(s).map_err(io_error));
  232|   628k|                Ok(buf.len())
  233|   628k|            }

_RINvXNtNtCs7SR71ZnNPS_10serde_json5value3serNtB5_5ValueNtNtCs7zU6kJgcrK9_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BG_NtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|   144k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|   144k|    where
   15|   144k|        S: ::serde::Serializer,
   16|   144k|    {
   17|   144k|        match self {
   18|  14.3k|            Value::Null => serializer.serialize_unit(),
   19|  18.3k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  13.9k|            Value::Number(n) => n.serialize(serializer),
   21|  7.62k|            Value::String(s) => serializer.serialize_str(s),
   22|  51.5k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  38.8k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  38.8k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|  97.3k|                for (k, v) in m {
   28|  58.5k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  38.8k|                map.end()
   31|       |            }
   32|       |        }
   33|   144k|    }

_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E15inline_capacityCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  930|   165k|    fn inline_capacity() -> usize {
  931|   165k|        if mem::size_of::<A::Item>() > 0 {
  932|   165k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   165k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E6tripleCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  975|  31.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  31.8k|        unsafe {
  977|  31.8k|            if self.spilled() {
  978|  7.97k|                let (ptr, len) = self.data.heap();
  979|  7.97k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  23.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  31.8k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E3lenCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  956|    138|    pub fn len(&self) -> usize {
  957|    138|        self.triple().1
  958|    138|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E8heap_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  663|    486|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|    486|        let h = &mut self.heap;
  665|    486|        (h.0, &mut h.1)
  666|    486|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E4heapCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  659|  1.35k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  1.35k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  1.35k|    }
_RNvXs1v_CseAHZKPHGegi_8smallvecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2412|   165k|                fn size() -> usize { $size }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1005|   184k|    pub fn spilled(&self) -> bool {
 1006|   184k|        self.capacity > Self::inline_capacity()
 1007|   184k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullNtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFrameE6as_ptrCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2451|  31.6k|    fn as_ptr(self) -> *const T {
 2452|  31.6k|        self.0.as_ptr()
 2453|  31.6k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  988|  19.2k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  19.2k|        unsafe {
  990|  19.2k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  19.2k|                (
  995|  19.2k|                    self.data.inline_mut(),
  996|  19.2k|                    &mut self.capacity,
  997|  19.2k|                    Self::inline_capacity(),
  998|  19.2k|                )
  999|       |            }
 1000|       |        }
 1001|  19.2k|    }
_RINvCseAHZKPHGegi_8smallvec10infallibleuECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  322|     69|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|     69|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|     69|}
_RNvXsX_CseAHZKPHGegi_8smallvecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2412|   348k|                fn size() -> usize { $size }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E8try_growCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1178|     69|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|     69|        unsafe {
 1180|     69|            let unspilled = !self.spilled();
 1181|     69|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|     69|            assert!(new_cap >= len);
 1183|     69|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|     69|            } else if new_cap != cap {
 1192|     69|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|     69|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|     69|                if unspilled {
 1196|     69|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|     69|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|     69|                        .cast();
 1199|     69|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|      0|                    let new_ptr =
 1206|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|      0|                    new_alloc = NonNull::new(new_ptr)
 1208|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|      0|                        .cast();
 1210|       |                }
 1211|     69|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|     69|                self.capacity = new_cap;
 1213|      0|            }
 1214|     69|            Ok(())
 1215|       |        }
 1216|     69|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullNtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFrameE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2447|  23.8k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  23.8k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  23.8k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1861|  1.59k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.59k|        unsafe {
 1863|  1.59k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.59k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.59k|        }
 1866|  1.59k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1230|     69|    fn reserve_one_unchecked(&mut self) {
 1231|     69|        debug_assert_eq!(self.len(), self.capacity());
 1232|     69|        let new_cap = self.len()
 1233|     69|            .checked_add(1)
 1234|     69|            .and_then(usize::checked_next_power_of_two)
 1235|     69|            .expect("capacity overflow");
 1236|     69|        infallible(self.try_grow(new_cap))
 1237|     69|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  930|   348k|    fn inline_capacity() -> usize {
  931|   348k|        if mem::size_of::<A::Item>() > 0 {
  932|   348k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   348k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2451|   145k|    fn as_ptr(self) -> *const T {
 2452|   145k|        self.0.as_ptr()
 2453|   145k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E9from_heapCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  668|     69|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|     69|        SmallVecData { heap: (ptr, len) }
  670|     69|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2041|  1.59k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.59k|        &mut (&mut **self)[index]
 2043|  1.59k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E8capacityCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  968|     69|    pub fn capacity(&self) -> usize {
  969|     69|        self.triple().2
  970|     69|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2447|   144k|    fn new(ptr: *const T) -> Option<Self> {
 2448|   144k|        NonNull::new(ptr as *mut T).map(Self)
 2449|   144k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  975|   145k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|   145k|        unsafe {
  977|   145k|            if self.spilled() {
  978|  1.35k|                let (ptr, len) = self.data.heap();
  979|  1.35k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|   144k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|   145k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E7spilledCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1005|  94.3k|    pub fn spilled(&self) -> bool {
 1006|  94.3k|        self.capacity > Self::inline_capacity()
 1007|  94.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E10triple_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  988|  60.7k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  60.7k|        unsafe {
  990|  60.7k|            if self.spilled() {
  991|  13.1k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  13.1k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  47.5k|                (
  995|  47.5k|                    self.data.inline_mut(),
  996|  47.5k|                    &mut self.capacity,
  997|  47.5k|                    Self::inline_capacity(),
  998|  47.5k|                )
  999|       |            }
 1000|       |        }
 1001|  60.7k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E3popCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1135|  25.4k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  25.4k|        unsafe {
 1137|  25.4k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  25.4k|            let ptr: *const _ = ptr.as_ptr();
 1139|  25.4k|            if *len_ptr == 0 {
 1140|      0|                return None;
 1141|  25.4k|            }
 1142|  25.4k|            let last_index = *len_ptr - 1;
 1143|  25.4k|            *len_ptr = last_index;
 1144|  25.4k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  25.4k|    }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1851|   145k|    fn deref(&self) -> &[A::Item] {
 1852|   145k|        unsafe {
 1853|   145k|            let (ptr, len, _) = self.triple();
 1854|   145k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|   145k|        }
 1856|   145k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E4pushCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1119|  33.5k|    pub fn push(&mut self, value: A::Item) {
 1120|  33.5k|        unsafe {
 1121|  33.5k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  33.5k|            if *len == cap {
 1123|     69|                self.reserve_one_unchecked();
 1124|     69|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|     69|                ptr = heap_ptr;
 1126|     69|                len = heap_len;
 1127|  33.5k|            }
 1128|  33.5k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  33.5k|            *len += 1;
 1130|  33.5k|        }
 1131|  33.5k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1861|  19.2k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  19.2k|        unsafe {
 1863|  19.2k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  19.2k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  19.2k|        }
 1866|  19.2k|    }
_RINvCseAHZKPHGegi_8smallvec12layout_arrayNtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFrameECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  332|     69|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|     69|    let size = mem::size_of::<T>()
  334|     69|        .checked_mul(n)
  335|     69|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|     69|    let align = mem::align_of::<T>();
  337|     69|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|     69|}
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  645|  19.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  19.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  19.2k|    }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 1851|  31.6k|    fn deref(&self) -> &[A::Item] {
 1852|  31.6k|        unsafe {
 1853|  31.6k|            let (ptr, len, _) = self.triple();
 1854|  31.6k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  31.6k|        }
 1856|  31.6k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E10inline_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  645|  47.5k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  47.5k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  47.5k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2041|  19.2k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  19.2k|        &mut (&mut **self)[index]
 2043|  19.2k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2123|  19.7k|    fn drop(&mut self) {
 2124|  19.7k|        unsafe {
 2125|  19.7k|            if self.spilled() {
 2126|    486|                let (ptr, &mut len) = self.data.heap_mut();
 2127|    486|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  19.2k|            } else {
 2129|  19.2k|                ptr::drop_in_place(&mut self[..]);
 2130|  19.2k|            }
 2131|       |        }
 2132|  19.7k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E6inlineCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  641|  23.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  23.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  23.8k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsfl1mzxY9WoK_19fuzz_arbitrary_json:
 2123|  1.66k|    fn drop(&mut self) {
 2124|  1.66k|        unsafe {
 2125|  1.66k|            if self.spilled() {
 2126|     69|                let (ptr, &mut len) = self.data.heap_mut();
 2127|     69|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.59k|            } else {
 2129|  1.59k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.59k|            }
 2131|       |        }
 2132|  1.66k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E8heap_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  663|  13.2k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  13.2k|        let h = &mut self.heap;
  665|  13.2k|        (h.0, &mut h.1)
  666|  13.2k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E4heapCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  659|  7.97k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  7.97k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  7.97k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  641|   144k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|   144k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|   144k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutBP_:
  988|   146k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|   146k|        unsafe {
  990|   146k|            if self.spilled() {
  991|  1.02k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  1.02k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|   145k|                (
  995|   145k|                    self.data.inline_mut(),
  996|   145k|                    &mut self.capacity,
  997|   145k|                    Self::inline_capacity(),
  998|   145k|                )
  999|       |            }
 1000|       |        }
 1001|   146k|    }
_RNvXsX_CseAHZKPHGegi_8smallvecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeBA_:
 2412|   530k|                fn size() -> usize { $size }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  649|  1.66k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  1.66k|        SmallVecData {
  651|  1.66k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  1.66k|        }
  653|  1.66k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleBP_:
  975|  39.3k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  39.3k|        unsafe {
  977|  39.3k|            if self.spilled() {
  978|  1.02k|                let (ptr, len) = self.data.heap();
  979|  1.02k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  38.3k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  39.3k|    }
_RNvMsO_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDrop13increment_lenCsiD8oTJhN8wu_8rsonpath:
 2356|  41.6k|    fn increment_len(&mut self, increment: usize) {
 2357|  41.6k|        self.local_len += increment;
 2358|  41.6k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutBU_:
  645|   145k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|   145k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|   145k|    }
_RINvXss_CseAHZKPHGegi_8smallvecINtB6_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2f_8adapters3map3MapINtCs2EzgWToZKiN_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5c_9Minimizer18process_superstate0EEBQ_:
 2066|  39.3k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2067|  39.3k|        let mut iter = iterable.into_iter();
 2068|  39.3k|        let (lower_size_bound, _) = iter.size_hint();
 2069|  39.3k|        self.reserve(lower_size_bound);
 2070|  39.3k|
 2071|  39.3k|        unsafe {
 2072|  39.3k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2073|  39.3k|            let ptr = ptr.as_ptr();
 2074|  39.3k|            let mut len = SetLenOnDrop::new(len_ptr);
 2075|  80.9k|            while len.get() < cap {
 2076|  75.4k|                if let Some(out) = iter.next() {
 2077|  41.6k|                    ptr::write(ptr.add(len.get()), out);
 2078|  41.6k|                    len.increment_len(1);
 2079|  41.6k|                } else {
 2080|  33.8k|                    return;
 2081|       |                }
 2082|       |            }
 2083|       |        }
 2084|       |
 2085|  5.50k|        for elem in iter {
 2086|      0|            self.push(elem);
 2087|      0|        }
 2088|  39.3k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutBP_:
 1861|  67.2k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  67.2k|        unsafe {
 1863|  67.2k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  67.2k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  67.2k|        }
 1866|  67.2k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E10inline_mutBV_:
  645|  28.7k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  28.7k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  28.7k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E4heapBV_:
  659|  2.10k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  2.10k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  2.10k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E11from_inlineBV_:
  649|  2.65k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  2.65k|        SmallVecData {
  651|  2.65k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  2.65k|        }
  653|  2.65k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineBU_:
  641|  38.3k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  38.3k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  38.3k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB1Z_5range9RangeFullE9index_mutBQ_:
 2041|  2.24k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  2.24k|        &mut (&mut **self)[index]
 2043|  2.24k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E8heap_mutBV_:
  663|  63.6k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  63.6k|        let h = &mut self.heap;
  665|  63.6k|        (h.0, &mut h.1)
  666|  63.6k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutBP_:
 2041|  67.2k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  67.2k|        &mut (&mut **self)[index]
 2043|  67.2k|    }
_RNvMsO_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDrop3newCsiD8oTJhN8wu_8rsonpath:
 2343|  39.3k|    fn new(len: &'a mut usize) -> Self {
 2344|  39.3k|        SetLenOnDrop {
 2345|  39.3k|            local_len: *len,
 2346|  39.3k|            len,
 2347|  39.3k|        }
 2348|  39.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E8try_growBP_:
 1178|  1.02k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|  1.02k|        unsafe {
 1180|  1.02k|            let unspilled = !self.spilled();
 1181|  1.02k|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|  1.02k|            assert!(new_cap >= len);
 1183|  1.02k|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|  1.02k|            } else if new_cap != cap {
 1192|  1.02k|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|  1.02k|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|  1.02k|                if unspilled {
 1196|  1.02k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|  1.02k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|  1.02k|                        .cast();
 1199|  1.02k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|      0|                    let new_ptr =
 1206|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|      0|                    new_alloc = NonNull::new(new_ptr)
 1208|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|      0|                        .cast();
 1210|       |                }
 1211|  1.02k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|  1.02k|                self.capacity = new_cap;
 1213|      0|            }
 1214|  1.02k|            Ok(())
 1215|       |        }
 1216|  1.02k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E11inline_sizeBQ_:
  950|  2.65k|    pub fn inline_size(&self) -> usize {
  951|  2.65k|        Self::inline_capacity()
  952|  2.65k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E6tripleBQ_:
  975|  3.32k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  3.32k|        unsafe {
  977|  3.32k|            if self.spilled() {
  978|  2.10k|                let (ptr, len) = self.data.heap();
  979|  2.10k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  1.21k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  3.32k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E10triple_mutBQ_:
  988|  90.8k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  90.8k|        unsafe {
  990|  90.8k|            if self.spilled() {
  991|  62.0k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  62.0k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  28.7k|                (
  995|  28.7k|                    self.data.inline_mut(),
  996|  28.7k|                    &mut self.capacity,
  997|  28.7k|                    Self::inline_capacity(),
  998|  28.7k|                )
  999|       |            }
 1000|       |        }
 1001|  90.8k|    }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefBP_:
 1851|  39.3k|    fn deref(&self) -> &[A::Item] {
 1852|  39.3k|        unsafe {
 1853|  39.3k|            let (ptr, len, _) = self.triple();
 1854|  39.3k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  39.3k|        }
 1856|  39.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E3popBQ_:
 1135|  41.9k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  41.9k|        unsafe {
 1137|  41.9k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  41.9k|            let ptr: *const _ = ptr.as_ptr();
 1139|  41.9k|            if *len_ptr == 0 {
 1140|  2.54k|                return None;
 1141|  39.4k|            }
 1142|  39.4k|            let last_index = *len_ptr - 1;
 1143|  39.4k|            *len_ptr = last_index;
 1144|  39.4k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  41.9k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E8try_growBQ_:
 1178|  1.10k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|  1.10k|        unsafe {
 1180|  1.10k|            let unspilled = !self.spilled();
 1181|  1.10k|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|  1.10k|            assert!(new_cap >= len);
 1183|  1.10k|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|  1.10k|            } else if new_cap != cap {
 1192|  1.10k|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|  1.10k|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|  1.10k|                if unspilled {
 1196|    406|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|    406|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|    406|                        .cast();
 1199|    406|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|    703|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|    703|                    let new_ptr =
 1206|    703|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|    703|                    new_alloc = NonNull::new(new_ptr)
 1208|    703|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|    703|                        .cast();
 1210|       |                }
 1211|  1.10k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|  1.10k|                self.capacity = new_cap;
 1213|      0|            }
 1214|  1.10k|            Ok(())
 1215|       |        }
 1216|  1.10k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrBT_:
 2451|  39.3k|    fn as_ptr(self) -> *const T {
 2452|  39.3k|        self.0.as_ptr()
 2453|  39.3k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E11from_inlineBU_:
  649|  87.4k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  87.4k|        SmallVecData {
  651|  87.4k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  87.4k|        }
  653|  87.4k|    }
_RINvCseAHZKPHGegi_8smallvec12layout_arrayNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256EBL_:
  332|  1.81k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|  1.81k|    let size = mem::size_of::<T>()
  334|  1.81k|        .checked_mul(n)
  335|  1.81k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|  1.81k|    let align = mem::align_of::<T>();
  337|  1.81k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|  1.81k|}
_RNvXsu_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtCs3NN8x5qF7TE_4core7default7Default7defaultBP_:
 2102|  45.4k|    fn default() -> SmallVec<A> {
 2103|  45.4k|        SmallVec::new()
 2104|  45.4k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  950|  1.66k|    pub fn inline_size(&self) -> usize {
  951|  1.66k|        Self::inline_capacity()
  952|  1.66k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E4heapBU_:
  659|  1.02k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  1.02k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  1.02k|    }
_RNvMsO_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDrop3getCsiD8oTJhN8wu_8rsonpath:
 2351|   122k|    fn get(&self) -> usize {
 2352|   122k|        self.local_len
 2353|   122k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityBP_:
  930|   442k|    fn inline_capacity() -> usize {
  931|   442k|        if mem::size_of::<A::Item>() > 0 {
  932|   442k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   442k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E9from_heapBV_:
  668|  1.10k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|  1.10k|        SmallVecData { heap: (ptr, len) }
  670|  1.10k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E3newBO_:
  783|  1.66k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  1.66k|        assert!(
  787|  1.66k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  1.66k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  1.66k|        SmallVec {
  791|  1.66k|            capacity: 0,
  792|  1.66k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  1.66k|        }
  794|  1.66k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E9from_heapBU_:
  668|  1.02k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|  1.02k|        SmallVecData { heap: (ptr, len) }
  670|  1.02k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E3newBQ_:
  783|  2.65k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  2.65k|        assert!(
  787|  2.65k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  2.65k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  2.65k|        SmallVec {
  791|  2.65k|            capacity: 0,
  792|  2.65k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  2.65k|        }
  794|  2.65k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E3lenBQ_:
  956|  2.21k|    pub fn len(&self) -> usize {
  957|  2.21k|        self.triple().1
  958|  2.21k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E15inline_capacityBQ_:
  930|   131k|    fn inline_capacity() -> usize {
  931|   131k|        if mem::size_of::<A::Item>() > 0 {
  932|   131k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   131k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11try_reserveBP_:
 1242|  39.3k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1243|  39.3k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1244|  39.3k|        // calls to it from callers.
 1245|  39.3k|        let (_, &mut len, cap) = self.triple_mut();
 1246|  39.3k|        if cap - len >= additional {
 1247|  38.3k|            return Ok(());
 1248|  1.02k|        }
 1249|  1.02k|        let new_cap = len
 1250|  1.02k|            .checked_add(additional)
 1251|  1.02k|            .and_then(usize::checked_next_power_of_two)
 1252|  1.02k|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1253|  1.02k|        self.try_grow(new_cap)
 1254|  39.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11inline_sizeBP_:
  950|  2.65k|    pub fn inline_size(&self) -> usize {
  951|  2.65k|        Self::inline_capacity()
  952|  2.65k|    }
_RINvXsr_CseAHZKPHGegi_8smallvecINtB6_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2f_8adapters3map3MapINtCs2EzgWToZKiN_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5m_9Minimizer18process_superstate0EEBQ_:
 2058|  39.3k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2059|  39.3k|        let mut v = SmallVec::new();
 2060|  39.3k|        v.extend(iterable);
 2061|  39.3k|        v
 2062|  39.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  930|  1.66k|    fn inline_capacity() -> usize {
  931|  1.66k|        if mem::size_of::<A::Item>() > 0 {
  932|  1.66k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  1.66k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E3newBP_:
  783|  87.4k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  87.4k|        assert!(
  787|  87.4k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  87.4k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  87.4k|        SmallVec {
  791|  87.4k|            capacity: 0,
  792|  87.4k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  87.4k|        }
  794|  87.4k|    }
_RNvXsX_CseAHZKPHGegi_8smallvecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBB_:
 2412|   134k|                fn size() -> usize { $size }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256E3newBU_:
 2447|  1.21k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  1.21k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  1.21k|    }
_RNvXsP_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDropNtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsiD8oTJhN8wu_8rsonpath:
 2363|  39.3k|    fn drop(&mut self) {
 2364|  39.3k|        *self.len = self.local_len;
 2365|  39.3k|    }
_RNvXs1v_CseAHZKPHGegi_8smallvecANtNtNtCsiD8oTJhN8wu_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2412|  3.32k|                fn size() -> usize { $size }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropBP_:
 2123|  67.7k|    fn drop(&mut self) {
 2124|  67.7k|        unsafe {
 2125|  67.7k|            if self.spilled() {
 2126|    541|                let (ptr, &mut len) = self.data.heap_mut();
 2127|    541|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  67.2k|            } else {
 2129|  67.2k|                ptr::drop_in_place(&mut self[..]);
 2130|  67.2k|            }
 2131|       |        }
 2132|  67.7k|    }
_RINvCseAHZKPHGegi_8smallvec12layout_arrayTNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBG_5state5StateEEBK_:
  332|  1.02k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|  1.02k|    let size = mem::size_of::<T>()
  334|  1.02k|        .checked_mul(n)
  335|  1.02k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|  1.02k|    let align = mem::align_of::<T>();
  337|  1.02k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|  1.02k|}
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E6inlineBV_:
  641|  1.21k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  1.21k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  1.21k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutBQ_:
 1861|  2.24k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  2.24k|        unsafe {
 1863|  2.24k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  2.24k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  2.24k|        }
 1866|  2.24k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newBT_:
 2447|  38.3k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  38.3k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  38.3k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E8capacityBQ_:
  968|  1.10k|    pub fn capacity(&self) -> usize {
  969|  1.10k|        self.triple().2
  970|  1.10k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E7spilledBQ_:
 1005|  97.9k|    pub fn spilled(&self) -> bool {
 1006|  97.9k|        self.capacity > Self::inline_capacity()
 1007|  97.9k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E8heap_mutBU_:
  663|  1.56k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  1.56k|        let h = &mut self.heap;
  665|  1.56k|        (h.0, &mut h.1)
  666|  1.56k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E4pushBQ_:
 1119|  45.4k|    pub fn push(&mut self, value: A::Item) {
 1120|  45.4k|        unsafe {
 1121|  45.4k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  45.4k|            if *len == cap {
 1123|  1.10k|                self.reserve_one_unchecked();
 1124|  1.10k|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|  1.10k|                ptr = heap_ptr;
 1126|  1.10k|                len = heap_len;
 1127|  44.3k|            }
 1128|  45.4k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  45.4k|            *len += 1;
 1130|  45.4k|        }
 1131|  45.4k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBQ_:
 1230|  1.10k|    fn reserve_one_unchecked(&mut self) {
 1231|  1.10k|        debug_assert_eq!(self.len(), self.capacity());
 1232|  1.10k|        let new_cap = self.len()
 1233|  1.10k|            .checked_add(1)
 1234|  1.10k|            .and_then(usize::checked_next_power_of_two)
 1235|  1.10k|            .expect("capacity overflow");
 1236|  1.10k|        infallible(self.try_grow(new_cap))
 1237|  1.10k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropBQ_:
 2123|  2.65k|    fn drop(&mut self) {
 2124|  2.65k|        unsafe {
 2125|  2.65k|            if self.spilled() {
 2126|    406|                let (ptr, &mut len) = self.data.heap_mut();
 2127|    406|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  2.24k|            } else {
 2129|  2.24k|                ptr::drop_in_place(&mut self[..]);
 2130|  2.24k|            }
 2131|       |        }
 2132|  2.65k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledBP_:
 1005|   255k|    pub fn spilled(&self) -> bool {
 1006|   255k|        self.capacity > Self::inline_capacity()
 1007|   255k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7reserveBP_:
 1224|  39.3k|    pub fn reserve(&mut self, additional: usize) {
 1225|  39.3k|        infallible(self.try_reserve(additional))
 1226|  39.3k|    }
_RINvCseAHZKPHGegi_8smallvec10infallibleuECsiD8oTJhN8wu_8rsonpath:
  322|  40.4k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|  40.4k|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|  40.4k|}

_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BQ_:
   80|  9.34M|        self.keys.iter().position(|k| key == k)
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBO_:
   79|   252k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   252k|        self.keys.iter().position(|k| key == k)
   81|   252k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE13with_capacityBN_:
   49|  2.65k|    #[post(ret.len() == 0)]
_RNCNCINvMCs2EzgWToZKiN_10vector_mapINtB7_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BS_:
   90|  30.3k|        self.position(key).map(|p| &self.values[p])
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E6insertBL_:
   99|  41.7k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BP_:
   41|  2.65k|    #[post(ret.len() == 0)]
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBN_:
   60|  45.5k|    pub fn len(&self) -> usize {
   61|  45.5k|        self.keys.len()
   62|  45.5k|    }
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BQ_:
   80|  20.1M|        self.keys.iter().position(|k| key == k)
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBI_9small_set11SmallSet256E8positionBG_EBM_:
   79|  84.5k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  84.5k|        self.keys.iter().position(|k| key == k)
   81|  84.5k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE6insertBN_:
   99|  48.1k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs9_Cs2EzgWToZKiN_10vector_mapINtB5_8IntoIterNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextBQ_:
  322|  80.9k|    fn next(&mut self) -> Option<(K, V)> {
  323|  80.9k|        self.iter.next()
  324|  80.9k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E13with_capacityBL_:
   49|  39.4k|    #[post(ret.len() == 0)]
_RNvXs9_Cs2EzgWToZKiN_10vector_mapINtB5_8IntoIterNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator9size_hintBQ_:
  326|  39.3k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  39.3k|        self.iter.size_hint()
  328|  39.3k|    }
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBO_:
   83|  83.8k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  83.8k|        self.position(key).is_some()
   85|  83.8k|    }
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE3getBI_E0BQ_:
   87|   120k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BP_:
   41|  2.65k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E6insert0BN_:
   99|  41.7k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBI_9small_set11SmallSet256E7get_mutBG_EBM_:
   93|  42.7k|    #[post(!old(self.contains_key(key)) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E13with_capacity0BN_:
   49|  39.4k|    #[post(ret.len() == 0)]
_RNvXs7_Cs2EzgWToZKiN_10vector_mapQINtB5_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12IntoIterator9into_iterBP_:
  299|  39.4k|    fn into_iter(self) -> Self::IntoIter {
  300|  39.4k|        self.iter_mut()
  301|  39.4k|    }
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3getBG_EBO_:
   87|  33.4k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BP_:
   99|  82.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXsr_Cs2EzgWToZKiN_10vector_mapINtB5_7IterMutNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextBP_:
  494|  81.0k|            fn next(&mut self) -> Option<Self::Item> {
  495|  81.0k|                self.iter.next()
  496|  81.0k|            }
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256E7get_mutBI_E0BO_:
   93|  42.7k|    #[post(!old(self.contains_key(key)) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE3getBG_EBO_:
   87|   120k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE13with_capacityBN_:
   49|  2.65k|    #[post(ret.len() == 0)]
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E8iter_mutBL_:
  175|  39.4k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  39.4k|        IterMut {
  177|  39.4k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  39.4k|        }
  179|  39.4k|    }
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BP_:
   49|  2.65k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BP_:
   99|  48.1k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBO_:
   79|   116k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   116k|        self.keys.iter().position(|k| key == k)
   81|   116k|    }
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E3new0BN_:
   41|  39.4k|    #[post(ret.len() == 0)]
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256E8positionBI_E0BO_:
   80|  19.1k|        self.keys.iter().position(|k| key == k)
_RNvXs4_Cs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexRBI_E5indexBQ_:
  277|   120k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|   120k|        self.get(key).unwrap()
  279|   120k|    }
_RNCNCINvMCs2EzgWToZKiN_10vector_mapINtB7_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256E7get_mutBK_E00BQ_:
   96|    988|        self.position(key).map(move |p| &mut self.values[p])
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BP_:
   49|  2.65k|    #[post(ret.len() == 0)]
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE3getBI_E0BQ_:
   87|  33.4k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCNCINvMCs2EzgWToZKiN_10vector_mapINtB7_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BS_:
   90|   120k|        self.position(key).map(|p| &self.values[p])
_RNvXs8_Cs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12IntoIterator9into_iterBO_:
  307|  39.3k|    fn into_iter(self) -> Self::IntoIter {
  308|  39.3k|        IntoIter {
  309|  39.3k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  39.3k|        }
  311|  39.3k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE6insertBN_:
   99|  82.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]


_RNCNvMNtCsiD8oTJhN8wu_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2d_5MatchEEEINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB24_E10forward_tos_0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  112|    114|                    .map(|b| ResumeClassifierBlockState {
  113|    114|                        block: b,
  114|    114|                        idx: remainder,
  115|    114|                    });
_RNCNvMNtCsiD8oTJhN8wu_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2d_5MatchEEEINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB24_E7get_idx0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   71|  1.97k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
_RNCNvMNtCsiD8oTJhN8wu_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2d_5MatchEEEINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB24_E10forward_to0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   86|  1.62k|        let current_block_idx = self.block.as_ref().map_or(0, |b| b.idx);
_RNvMNtCsiD8oTJhN8wu_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB4_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2b_5MatchEEEINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB22_E10forward_toCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   84|  1.62k|    pub fn forward_to(&mut self, index: usize) -> Result<(), InputError> {
   85|  1.62k|        let current_block_start = self.iter.get_offset();
   86|  1.62k|        let current_block_idx = self.block.as_ref().map_or(0, |b| b.idx);
   87|  1.62k|        let current_idx = current_block_start + current_block_idx;
   88|       |
   89|       |        debug!(
   90|      0|            "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
   91|       |        );
   92|       |
   93|       |        // We want to move by this much forward, and delta > 0.
   94|  1.62k|        assert!(index > current_idx);
   95|  1.62k|        let delta = index - current_idx;
   96|  1.62k|
   97|  1.62k|        // First we virtually pretend to move *backward*, setting the index of the current block to zero,
   98|  1.62k|        // and adjust the delta to cover that distance. This makes calculations simpler.
   99|  1.62k|        // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  100|  1.62k|        let remaining = delta + current_block_idx;
  101|  1.62k|        let blocks_to_skip = remaining / N;
  102|  1.62k|        let remainder = remaining % N;
  103|  1.62k|
  104|  1.62k|        match self.block.as_mut() {
  105|  1.62k|            Some(b) if blocks_to_skip == 0 => {
  106|  1.51k|                b.idx = remaining;
  107|  1.51k|            }
  108|    114|            Some(_) => {
  109|    114|                self.block = self
  110|    114|                    .iter
  111|    114|                    .offset(blocks_to_skip as isize)?
  112|    114|                    .map(|b| ResumeClassifierBlockState {
  113|       |                        block: b,
  114|       |                        idx: remainder,
  115|    114|                    });
  116|       |            }
  117|      0|            None => {
  118|      0|                self.block = self
  119|      0|                    .iter
  120|      0|                    .offset((blocks_to_skip + 1) as isize)?
  121|      0|                    .map(|b| ResumeClassifierBlockState {
  122|       |                        block: b,
  123|       |                        idx: remainder,
  124|      0|                    });
  125|       |            }
  126|       |        }
  127|       |
  128|      0|        debug!("forward_to({index}) results in idx moved to {}", self.get_idx());
  129|       |
  130|  1.62k|        Ok(())
  131|  1.62k|    }
_RNvMNtCsiD8oTJhN8wu_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB4_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2b_5MatchEEEINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB22_E7get_idxCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   66|      0|            "iter offset: {}, block idx: {:?}",
   67|      0|            self.iter.get_offset(),
   68|      0|            self.block.as_ref().map(|b| b.idx)
   69|       |        );
   70|       |
   71|  1.99k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   72|  1.99k|    }

_RINvYNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2C_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   94|    393|    fn resume<'i, I, Q>(
   95|    393|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   96|    393|        opening: BracketType,
   97|    393|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   98|    393|    where
   99|    393|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  100|    393|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  101|    393|    {
  102|    393|        let (first_block, iter) =
  103|    393|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
  104|    393|        DepthIteratorResumeOutcome(first_block, iter)
  105|    393|    }

_RNCNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B3T_yKB2o_E4stop0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   13|    393|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_6410new_vectorRShECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   16|  1.53k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   17|  1.53k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   18|  1.53k|    classifier: &DelimiterClassifierImpl256,
   19|  1.53k|) -> DepthVector64<'a, B> {
   20|  1.53k|    new_vector_from(bytes, classifier, 0)
   21|  1.53k|}
_RNCNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B3T_yKB2o_E6resume0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   13|    392|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   24|  1.89k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   25|  1.89k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   26|  1.89k|    classifier: &DelimiterClassifierImpl256,
   27|  1.89k|    idx: usize,
   28|  1.89k|) -> DepthVector64<'a, B> {
   29|  1.89k|    // SAFETY: target_feature invariant
   30|  1.89k|    unsafe { new_avx2(bytes, classifier, idx) }
   31|  1.89k|}
_RINvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_648new_avx2RShECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   36|  1.89k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   37|  1.89k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   38|  1.89k|    classifier: &DelimiterClassifierImpl256,
   39|  1.89k|    start_idx: usize,
   40|  1.89k|) -> DepthVector64<'a, B> {
   41|  1.89k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   42|  1.89k|    let (first_block, second_block) = bytes.block.halves();
   43|  1.89k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   44|  1.89k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   45|  1.89k|
   46|  1.89k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   47|  1.89k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   48|  1.89k|
   49|  1.89k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   50|  1.89k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   51|  1.89k|
   52|  1.89k|    DepthVector64 {
   53|  1.89k|        quote_classified: bytes,
   54|  1.89k|        opening_mask,
   55|  1.89k|        closing_mask,
   56|  1.89k|        opening_count: opening_mask.count_ones(),
   57|  1.89k|        depth: 0,
   58|  1.89k|        idx: 0,
   59|  1.89k|        phantom: PhantomData,
   60|  1.89k|    }
   61|  1.89k|}
_RNCNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBc_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   13|  1.53k|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);

_RNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2v_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B3R_yKB2m_E4stopCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   66|    393|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   67|    393|                let block_state = block.and_then(|b| {
   68|       |                    let idx = b.idx;
   69|       |                    debug!("Depth iterator stopping at index {idx}");
   70|       |                    if idx >= b.quote_classified.len() {
   71|       |                        None
   72|       |                    } else {
   73|       |                        Some(ResumeClassifierBlockState {
   74|       |                            block: b.quote_classified,
   75|       |                            idx,
   76|       |                        })
   77|       |                    }
   78|    393|                });
   79|    393|
   80|    393|                ResumeClassifierState {
   81|    393|                    iter: self.iter,
   82|    393|                    block: block_state,
   83|    393|                    are_commas_on: self.were_commas_on,
   84|    393|                    are_colons_on: self.were_colons_on,
   85|    393|                }
   86|    393|            }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2u_5MatchEEEINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   53|  1.53k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   54|  1.53k|                let quote_classified = self.iter.next()?;
   55|  1.53k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   56|  1.53k|            }
_RNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2v_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B3R_yKB2m_E6resumeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   88|    393|            fn resume(
   89|    393|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   90|    393|                opening: BracketType,
   91|    393|            ) -> (Option<Self::Block>, Self) {
   92|    393|                let classifier = $core::new(opening);
   93|    393|                let first_block = state.block.and_then(|b| {
   94|       |                    if b.idx == $size {
   95|       |                        None
   96|       |                    } else {
   97|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
   98|       |                    }
   99|    393|                });
  100|    393|
  101|    393|                (
  102|    393|                    first_block,
  103|    393|                    $name {
  104|    393|                        iter: state.iter,
  105|    393|                        classifier,
  106|    393|                        phantom: PhantomData,
  107|    393|                        were_commas_on: state.are_commas_on,
  108|    393|                        were_colons_on: state.are_colons_on,
  109|    393|                    },
  110|    393|                )
  111|    393|            }

_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_646popcntCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   31|  5.64k|unsafe fn popcnt(mask: u64) -> i32 {
   32|  5.64k|    mask.count_ones() as i32
   33|  5.64k|}
_RNvXNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   89|  1.89k|    fn estimate_lowest_possible_depth(&self) -> isize {
   90|  1.89k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   91|       |        // SAFETY: This module is meant to be included only under enabled popcnt.
   92|  1.89k|        (self.depth - unsafe { popcnt(self.closing_mask) }) as isize
   93|  1.89k|    }
_RNvXNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   72|  2.24k|    fn get_depth(&self) -> isize {
   73|  2.24k|        self.depth as isize
   74|  2.24k|    }
_RNvXNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   37|  2.38k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   38|  2.38k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   39|  2.38k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   40|  2.38k|
   41|  2.38k|        if next_closing == SIZE {
   42|    140|            return false;
   43|  2.24k|        }
   44|       |
   45|      0|        bin_u64!("opening_mask", self.opening_mask);
   46|      0|        bin_u64!("closing_mask", self.closing_mask);
   47|       |
   48|  2.24k|        self.opening_mask >>= next_closing;
   49|  2.24k|        self.closing_mask >>= next_closing;
   50|  2.24k|        self.opening_mask >>= 1;
   51|  2.24k|        self.closing_mask >>= 1;
   52|       |
   53|      0|        bin_u64!("new opening_mask", self.opening_mask);
   54|      0|        bin_u64!("new closing_mask", self.closing_mask);
   55|       |
   56|       |        // SAFETY: This module is meant to be included only under enabled popcnt.
   57|  2.24k|        let new_opening_count = unsafe { popcnt(self.opening_mask) };
   58|  2.24k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   59|  2.24k|        self.opening_count = new_opening_count as u32;
   60|       |
   61|      0|        debug!("next_closing: {next_closing}");
   62|      0|        debug!("new_opening_count: {new_opening_count}");
   63|      0|        debug!("delta: {delta}");
   64|       |
   65|  2.24k|        self.depth += delta;
   66|  2.24k|        self.idx += next_closing + 1;
   67|  2.24k|
   68|  2.24k|        true
   69|  2.38k|    }
_RNvXNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   84|  1.89k|    fn add_depth(&mut self, depth: isize) {
   85|  1.89k|        self.depth += depth as i32;
   86|  1.89k|    }
_RNvXNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   77|  1.50k|    fn depth_at_end(&self) -> isize {
   78|  1.50k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   79|       |        // SAFETY: This module is meant to be included only under enabled popcnt.
   80|  1.50k|        (((self.opening_count as i32) - unsafe { popcnt(self.closing_mask) }) + self.depth) as isize
   81|  1.50k|    }

_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563new:
   13|    393|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    393|        let opening = match opening {
   15|    175|            BracketType::Square => b'[',
   16|    218|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    393|        Self { opening: opening as i8 }
   20|    393|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masks:
   33|  3.79k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   34|  3.79k|        assert_eq!(32, bytes.len());
   35|       |        // SAFETY: target_feature invariant
   36|       |        unsafe {
   37|  3.79k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   38|  3.79k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   39|  3.79k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   40|  3.79k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   41|  3.79k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   42|  3.79k|
   43|  3.79k|            (opening_mask, closing_mask)
   44|  3.79k|        }
   45|  3.79k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  3.79k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  3.79k|        _mm256_set1_epi8(self.opening + 2)
   30|  3.79k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  3.79k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  3.79k|        _mm256_set1_epi8(self.opening)
   25|  3.79k|    }

_RINvXNtNtCsiD8oTJhN8wu_8rsonpath14classification4maskyNtB3_4Mask6is_litjECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   11|  1.62k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  1.62k|    where
   13|  1.62k|        Self: Shl<N, Output = Self>,
   14|  1.62k|    {
   15|  1.62k|        (*self & (1 << bit)) != 0
   16|  1.62k|    }
_RNvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification4mask3m6410combine_32:
   52|  80.8k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  80.8k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  80.8k|    }

_RNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input5owned10OwnedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB28_5MatchEEE10find_emptyCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   57|  1.57k|    unsafe fn find_empty(
   58|  1.57k|        &mut self,
   59|  1.57k|        label: &JsonString,
   60|  1.57k|        mut offset: usize,
   61|  1.57k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   62|  1.57k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   63|  1.57k|        let mut previous_block: u64 = 0;
   64|       |
   65|  4.52k|        while let Some(block) = self.iter.next()? {
   66|  4.19k|            let (block1, block2) = block.halves();
   67|  4.19k|            let classified1 = classifier.classify_block(block1);
   68|  4.19k|            let classified2 = classifier.classify_block(block2);
   69|  4.19k|
   70|  4.19k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   71|  4.19k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   72|  4.19k|
   73|  4.19k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   74|  6.92k|            while result != 0 {
   75|  3.97k|                let idx = result.trailing_zeros() as usize;
   76|  3.97k|                if self.input.is_member_match(offset + idx - 1, offset + idx, label) {
   77|  1.24k|                    return Ok(Some((offset + idx - 1, block)));
   78|  2.72k|                }
   79|  2.72k|                result &= !(1 << idx);
   80|       |            }
   81|       |
   82|  2.95k|            offset += SIZE;
   83|  2.95k|            previous_block = first_bitmask >> (SIZE - 1);
   84|       |        }
   85|       |
   86|    329|        Ok(None)
   87|  1.57k|    }
_RINvXNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2j_5MatchEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   22|  3.69k|    fn memmem<'i, 'b, 'r, I, R>(
   23|  3.69k|        input: &'i I,
   24|  3.69k|        iter: &'b mut I::BlockIterator<'i, 'r, BLOCK_SIZE, R>,
   25|  3.69k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   26|  3.69k|    where
   27|  3.69k|        I: Input,
   28|  3.69k|        R: InputRecorder<I::Block<'i, BLOCK_SIZE>>,
   29|  3.69k|        'i: 'r,
   30|  3.69k|    {
   31|  3.69k|        Self::Classifier { input, iter }
   32|  3.69k|    }
_RNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input5owned10OwnedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB28_5MatchEEE15find_label_avx2Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  124|  1.87k|    unsafe fn find_label_avx2(
  125|  1.87k|        &mut self,
  126|  1.87k|        label: &JsonString,
  127|  1.87k|        mut offset: usize,
  128|  1.87k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  129|  1.87k|        if label.bytes().is_empty() {
  130|  1.57k|            return self.find_empty(label, offset);
  131|    302|        } else if label.bytes().len() == 1 {
  132|     89|            return self.find_letter(label, offset);
  133|    213|        }
  134|    213|
  135|    213|        let classifier = vector_256::BlockClassifier256::new(label.bytes()[0], label.bytes()[1]);
  136|    213|        let mut previous_block: u64 = 0;
  137|       |
  138|  1.39k|        while let Some(block) = self.iter.next()? {
  139|  1.25k|            let (block1, block2) = block.halves();
  140|  1.25k|            let classified1 = classifier.classify_block(block1);
  141|  1.25k|            let classified2 = classifier.classify_block(block2);
  142|  1.25k|
  143|  1.25k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  144|  1.25k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  145|       |
  146|     70|            if let Some(res) =
  147|  1.25k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)
  148|       |            {
  149|     70|                return Ok(Some((res, block)));
  150|  1.18k|            }
  151|  1.18k|
  152|  1.18k|            offset += SIZE;
  153|  1.18k|            previous_block = first_bitmask >> (SIZE - 1);
  154|       |        }
  155|       |
  156|    143|        Ok(None)
  157|  1.87k|    }
_RNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input5owned10OwnedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB28_5MatchEEE11find_letterCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   93|     89|    unsafe fn find_letter(
   94|     89|        &mut self,
   95|     89|        label: &JsonString,
   96|     89|        mut offset: usize,
   97|     89|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   98|     89|        let classifier = vector_256::BlockClassifier256::new(label.bytes()[0], b'"');
   99|     89|        let mut previous_block: u64 = 0;
  100|       |
  101|    594|        while let Some(block) = self.iter.next()? {
  102|    559|            let (block1, block2) = block.halves();
  103|    559|            let classified1 = classifier.classify_block(block1);
  104|    559|            let classified2 = classifier.classify_block(block2);
  105|    559|
  106|    559|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  107|    559|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  108|       |
  109|     54|            if let Some(res) =
  110|    559|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)
  111|       |            {
  112|     54|                return Ok(Some((res, block)));
  113|    505|            }
  114|    505|
  115|    505|            offset += SIZE;
  116|    505|            previous_block = first_bitmask >> (SIZE - 1);
  117|       |        }
  118|       |
  119|     35|        Ok(None)
  120|     89|    }
_RNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB29_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  173|  3.69k|        if let Some(b) = first_block {
  174|  3.15k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  175|  1.81k|                return Ok(Some(res));
  176|  1.33k|            }
  177|    537|        }
  178|  1.87k|        let next_block_offset = self.iter.get_offset();
  179|  1.87k|        // SAFETY: target feature invariant
  180|  1.87k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  181|  3.69k|    }

_RINvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input5owned10OwnedBytesKj40_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   25|      0|    debug!("yyy??");
   26|  3.15k|    let block_idx = start_idx % N;
   27|  3.15k|    let label_size = label.bytes_with_quotes().len();
   28|  3.15k|
   29|  3.15k|    let res = first_block[block_idx..].iter().copied().enumerate().find(|&(i, c)| {
   30|       |        let j = start_idx + i;
   31|       |        c == b'"' && input.is_member_match(j, j + label_size - 1, label)
   32|  3.15k|    });
   33|  3.15k|    if let Some((res, _)) = res {
   34|  1.81k|        return Ok(Some((res + start_idx, first_block)));
   35|  1.33k|    }
   36|  1.33k|
   37|  1.33k|    Ok(None)
   38|  3.15k|}
_RNCINvNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtBa_5input5owned10OwnedBytesKj40_E0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   29|  58.5k|    let res = first_block[block_idx..].iter().copied().enumerate().find(|&(i, c)| {
   30|  58.5k|        let j = start_idx + i;
   31|  58.5k|        c == b'"' && input.is_member_match(j, j + label_size - 1, label)
   32|  58.5k|    });

_RINvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input5owned10OwnedBytesECsfl1mzxY9WoK_19fuzz_arbitrary_json:
    3|  1.81k|pub(crate) fn find_in_mask<I: Input>(
    4|  1.81k|    input: &I,
    5|  1.81k|    label: &JsonString,
    6|  1.81k|    previous_block: u64,
    7|  1.81k|    first: u64,
    8|  1.81k|    second: u64,
    9|  1.81k|    offset: usize,
   10|  1.81k|) -> Option<usize> {
   11|  1.81k|    let label_size = label.bytes_with_quotes().len();
   12|  1.81k|    let mut result = (previous_block | (first << 1)) & second;
   13|  2.20k|    while result != 0 {
   14|    509|        let idx = result.trailing_zeros() as usize;
   15|      0|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   16|    509|        if offset + idx > 1 && input.is_member_match(offset + idx - 2, offset + idx + label_size - 3, label) {
   17|    124|            return Some(offset + idx - 2);
   18|    385|        }
   19|    385|        result &= !(1 << idx);
   20|       |    }
   21|  1.69k|    None
   22|  1.81k|}

_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  1.87k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  1.87k|        Self {
   15|  1.87k|            first: _mm256_set1_epi8(first as i8),
   16|  1.87k|            second: _mm256_set1_epi8(second as i8),
   17|  1.87k|        }
   18|  1.87k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  12.0k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  12.0k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  12.0k|
   24|  12.0k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  12.0k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  12.0k|
   27|  12.0k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  12.0k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  12.0k|
   30|  12.0k|        BlockClassification256 { first, second }
   31|  12.0k|    }

_RNvMNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotesINtB2_20QuoteClassifiedBlockRShyKj40_E3lenCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   85|    393|    pub fn len(&self) -> usize {
   86|    393|        self.block.len()
   87|    393|    }

_RINvMNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   29|  18.7k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   30|  18.7k|        block!(blocks[..64]);
   31|       |
   32|  18.7k|        let (block1, block2) = blocks.halves();
   33|  18.7k|        let classification1 = vector_256::classify_block(block1);
   34|  18.7k|        let classification2 = vector_256::classify_block(block2);
   35|  18.7k|
   36|  18.7k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   37|  18.7k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   38|  18.7k|
   39|  18.7k|        self.internal_classifier.classify(slashes, quotes)
   40|  18.7k|    }
_RNCINvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2M_5MatchEEEE0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   14|  1.62k|super::shared::quote_classifier!(Avx2QuoteClassifier64, BlockAvx2Classifier, 64, u64);
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3new:
   21|  2.75k|    fn new() -> Self {
   22|  2.75k|        Self {
   23|  2.75k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   24|  2.75k|        }
   25|  2.75k|    }

_RNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1w_yKB2o_E10get_offsetCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   98|   124k|            fn get_offset(&self) -> usize {
   99|   124k|                self.iter.get_offset() - $size
  100|   124k|            }
_RNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1w_yKB2o_E6offsetCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  102|    114|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  103|    114|                debug_assert!(count > 0);
  104|      0|                debug!("Offsetting by {count}");
  105|       |
  106|    114|                for _ in 0..count - 1 {
  107|     17|                    self.iter.next()?;
  108|       |                }
  109|       |
  110|    114|                self.next()
  111|    114|            }
_RNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEENtBb_16FallibleIterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   79|  17.3k|                match self.iter.next()? {
   80|  17.1k|                    Some(block) => {
   81|  17.1k|                        // SAFETY: target_feature invariant
   82|  17.1k|                        let mask = unsafe { self.classifier.classify(&block) };
   83|  17.1k|                        let classified_block = QuoteClassifiedBlock {
   84|  17.1k|                            block,
   85|  17.1k|                            within_quotes_mask: mask,
   86|  17.1k|                        };
   87|  17.1k|                        Ok(Some(classified_block))
   88|       |                    }
   89|    203|                    None => Ok(None),
   90|       |                }
   91|  17.3k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_9InnerIterB1w_E10into_innerCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  122|  1.59k|            fn into_inner(self) -> I {
  123|  1.59k|                self.iter
  124|  1.59k|            }
_RNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1w_yKB2o_E15flip_quotes_bitCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  113|    717|            fn flip_quotes_bit(&mut self) {
  114|    717|                self.classifier.internal_classifier.flip_prev_quote_mask();
  115|    717|            }
_RINvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2K_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   33|  1.62k|            fn resume<'i, I>(
   34|  1.62k|                iter: I,
   35|  1.62k|                first_block: Option<I::Block>,
   36|  1.62k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   37|  1.62k|            where
   38|  1.62k|                I: InputBlockIterator<'i, $size>,
   39|  1.62k|            {
   40|  1.62k|                let mut s = Self::Classifier {
   41|  1.62k|                    iter,
   42|  1.62k|                    classifier: $core::new(),
   43|  1.62k|                    phantom: PhantomData,
   44|  1.62k|                };
   45|  1.62k|
   46|  1.62k|                let block = first_block.map(|b| {
   47|       |                    // SAFETY: target feature invariant
   48|       |                    let mask = unsafe { s.classifier.classify(&b) };
   49|       |                    QuoteClassifiedBlock {
   50|       |                        block: b,
   51|       |                        within_quotes_mask: mask,
   52|       |                    }
   53|  1.62k|                });
   54|  1.62k|
   55|  1.62k|                ResumedQuoteClassifier {
   56|  1.62k|                    classifier: s,
   57|  1.62k|                    first_block: block,
   58|  1.62k|                }
   59|  1.62k|            }
_RINvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2H_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   20|  1.12k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  1.12k|            where
   22|  1.12k|                I: InputBlockIterator<'i, $size>,
   23|  1.12k|            {
   24|  1.12k|                Self::Classifier {
   25|  1.12k|                    iter,
   26|  1.12k|                    classifier: $core::new(),
   27|  1.12k|                    phantom: PhantomData,
   28|  1.12k|                }
   29|  1.12k|            }

_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_6411all_ones128:
   13|  18.7k|unsafe fn all_ones128() -> __m128i {
   14|  18.7k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  18.7k|}
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_mask:
   31|  18.7k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  18.7k|        let slash_mask = u8::from(set_slash_mask);
   33|  18.7k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  18.7k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  18.7k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3new:
   26|  2.75k|    pub(crate) fn new() -> Self {
   27|  2.75k|        Self { prev_block_mask: 0 }
   28|  2.75k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  18.7k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  18.7k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  7.04k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  11.6k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  11.6k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  11.6k|            let odd_starts = ODD & starts;
   62|  11.6k|            let even_starts = EVEN & starts;
   63|  11.6k|
   64|  11.6k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  11.6k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  11.6k|
   67|  11.6k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  11.6k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  11.6k|
   70|  11.6k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  11.6k|
   72|  11.6k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  18.7k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  18.7k|
   77|  18.7k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  18.7k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  18.7k|
   80|  18.7k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  18.7k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  18.7k|        within_quotes
   93|  18.7k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_mask:
   49|  18.7k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  18.7k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  18.7k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_mask:
   44|  30.4k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  30.4k|        u64::from(self.prev_block_mask & 0x01)
   46|  30.4k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_mask:
   38|    717|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|    717|        self.prev_block_mask ^= 0x02;
   40|    717|    }

_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  37.4k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  37.4k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  37.4k|
   20|  37.4k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  37.4k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  37.4k|
   23|  37.4k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  37.4k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  37.4k|
   26|  37.4k|    BlockClassification256 { slashes, quotes }
   27|  37.4k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  37.4k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  37.4k|    _mm256_set1_epi8(b'\\' as i8)
   14|  37.4k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  37.4k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  37.4k|    _mm256_set1_epi8(b'"' as i8)
    9|  37.4k|}

_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  133|  1.66k|    pub(crate) fn new() -> Self {
  134|  1.66k|        Self { phantom: PhantomData }
  135|  1.66k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd6memmemNtNtNtBa_5input5owned10OwnedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB4y_5MatchEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  238|  3.69k|    fn memmem<'i, 'b, 'r, I, R>(
  239|  3.69k|        self,
  240|  3.69k|        input: &'i I,
  241|  3.69k|        iter: &'b mut I::BlockIterator<'i, 'r, BLOCK_SIZE, R>,
  242|  3.69k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  243|  3.69k|    where
  244|  3.69k|        I: Input,
  245|  3.69k|        R: InputRecorder<I::Block<'i, BLOCK_SIZE>>,
  246|  3.69k|        'i: 'r,
  247|  3.69k|    {
  248|  3.69k|        M::memmem(input, iter)
  249|  3.69k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5h_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  165|  1.12k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  166|  1.12k|    where
  167|  1.12k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  168|  1.12k|    {
  169|  1.12k|        Q::new(iter)
  170|  1.12k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5o_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  196|  1.45k|    fn resume_structural_classification<'i, I>(
  197|  1.45k|        self,
  198|  1.45k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  199|  1.45k|    ) -> Self::StructuralClassifier<'i, I>
  200|  1.45k|    where
  201|  1.45k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  202|  1.45k|    {
  203|  1.45k|        S::resume(state)
  204|  1.45k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5j_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  173|  1.62k|    fn resume_quote_classification<'i, I>(
  174|  1.62k|        self,
  175|  1.62k|        iter: I,
  176|  1.62k|        first_block: Option<I::Block>,
  177|  1.62k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  178|  1.62k|    where
  179|  1.62k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  180|  1.62k|    {
  181|  1.62k|        Q::resume(iter, first_block)
  182|  1.62k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5m_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  185|  1.12k|    fn classify_structural_characters<'i, I>(
  186|  1.12k|        self,
  187|  1.12k|        iter: Self::QuotesClassifier<'i, I>,
  188|  1.12k|    ) -> Self::StructuralClassifier<'i, I>
  189|  1.12k|    where
  190|  1.12k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  191|  1.12k|    {
  192|  1.12k|        S::new(iter)
  193|  1.12k|    }
_RINvXs1_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5j_5MatchEEEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  219|    393|    fn resume_depth_classification<'i, I>(
  220|    393|        self,
  221|    393|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  222|    393|        opening: BracketType,
  223|    393|    ) -> DepthIteratorResumeOutcome<
  224|    393|        'i,
  225|    393|        I,
  226|    393|        Self::QuotesClassifier<'i, I>,
  227|    393|        Self::DepthClassifier<'i, I>,
  228|    393|        MaskType,
  229|    393|        BLOCK_SIZE,
  230|    393|    >
  231|    393|    where
  232|    393|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  233|    393|    {
  234|    393|        D::resume(state, opening)
  235|    393|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath14classification4simd9configureCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  340|  2.54k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  341|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  342|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  343|  2.54k|    }
  344|       |
  345|       |    cfg_if! {
  346|       |        if #[cfg(not(feature = "simd"))]
  347|       |        {
  348|       |            let highest_simd = SimdTag::Nosimd;
  349|       |            let fast_quotes = false;
  350|       |            let fast_popcnt = false;
  351|       |        }
  352|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  353|       |        {
  354|  2.54k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  355|  2.54k|                SimdTag::Avx2
  356|      0|            } else if is_x86_feature_detected!("ssse3") {
  357|      0|                SimdTag::Ssse3
  358|      0|            } else if is_x86_feature_detected!("sse2") {
  359|      0|                SimdTag::Sse2
  360|       |            } else {
  361|      0|                SimdTag::Nosimd
  362|       |            };
  363|       |
  364|  2.54k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  365|  2.54k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  366|       |        }
  367|       |        else
  368|       |        {
  369|       |            let highest_simd = SimdTag::Nosimd;
  370|       |            let fast_quotes = false;
  371|       |            let fast_popcnt = false;
  372|       |        }
  373|       |    }
  374|       |
  375|  2.54k|    SimdConfiguration {
  376|  2.54k|        highest_simd,
  377|  2.54k|        fast_quotes,
  378|  2.54k|        fast_popcnt,
  379|  2.54k|    }
  380|  2.54k|}
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcnt:
  285|  1.66k|    pub(crate) fn fast_popcnt(&self) -> bool {
  286|  1.66k|        self.fast_popcnt
  287|  1.66k|    }
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotes:
  281|  1.66k|    pub(crate) fn fast_quotes(&self) -> bool {
  282|  1.66k|        self.fast_quotes
  283|  1.66k|    }
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simd:
  277|  1.66k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  278|  1.66k|        self.highest_simd
  279|  1.66k|    }

_RINvYNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2O_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  195|  1.45k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  1.45k|    where
  197|  1.45k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  1.45k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  1.45k|    {
  200|  1.45k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  1.45k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|   120k|    pub fn offset(self, amount: usize) -> Self {
   70|   120k|        match self {
   71|  31.5k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  22.8k|            Colon(idx) => Colon(idx + amount),
   73|  46.2k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  19.7k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|   120k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|    267|    pub fn idx(self) -> usize {
   50|    267|        match self {
   51|    267|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|    267|        }
   53|    267|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  10.3k|    pub fn is_closing(&self) -> bool {
   96|  10.3k|        matches!(self, Closing(_, _))
   97|  10.3k|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   21|  91.7k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]

_RNCNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2z_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B3V_yKB2q_E6resume0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   14|  1.44k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNCNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBf_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2B_5MatchEEEINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   14|   120k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RINvMNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   30|  27.5k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   31|  27.5k|        &mut self,
   32|  27.5k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   33|  27.5k|    ) -> mask_64::StructuralsBlock<B> {
   34|  27.5k|        let (block1, block2) = quote_classified_block.block.halves();
   35|  27.5k|        let classification1 = self.internal_classifier.classify_block(block1);
   36|  27.5k|        let classification2 = self.internal_classifier.classify_block(block2);
   37|  27.5k|
   38|  27.5k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   39|  27.5k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   40|       |
   41|      0|        bin_u64!("structural", structural);
   42|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   43|       |
   44|  27.5k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   45|  27.5k|    }
_RNCNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2z_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EENtBd_16FallibleIterator4next0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   14|   120k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2z_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B3V_yKB2q_E4stop0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   14|  1.42k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   21|  2.57k|    fn new() -> Self {
   22|  2.57k|        Self {
   23|  2.57k|            // SAFETY: target feature invariant
   24|  2.57k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   25|  2.57k|        }
   26|  2.57k|    }

_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E4stopCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  182|  1.42k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  183|  1.42k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  184|       |                    idx: b.get_idx() as usize,
  185|       |                    block: b.quote_classified,
  186|  1.42k|                });
  187|  1.42k|
  188|  1.42k|                ResumeClassifierState {
  189|  1.42k|                    iter: self.iter,
  190|  1.42k|                    block,
  191|  1.42k|                    are_commas_on: self.are_commas_on,
  192|  1.42k|                    are_colons_on: self.are_colons_on,
  193|  1.42k|                }
  194|  1.42k|            }
_RNvMs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   57|  10.8k|                if let Some(block) = self.block.take() {
   58|  10.8k|                    let quote_classified_block = block.quote_classified;
   59|  10.8k|                    let relevant_idx = idx + 1;
   60|  10.8k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  10.8k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  10.6k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  10.6k|                        // SAFETY: target_feature invariant
   68|  10.6k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  10.6k|                        new_block.structural_mask &= mask;
   70|  10.6k|                        self.block = Some(new_block);
   71|    170|                    }
   72|      1|                }
   73|  10.8k|            }
_RNvMs0_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   49|   136k|            fn current_block_is_spent(&self) -> bool {
   50|   136k|                self.block
   51|   136k|                    .as_ref()
   52|   136k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   136k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_colons_onCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  162|  13.0k|            fn turn_colons_on(&mut self, idx: usize) {
  163|  13.0k|                if !self.are_colons_on {
  164|  4.80k|                    self.are_colons_on = true;
  165|      0|                    debug!("Turning colons on at {idx}.");
  166|       |                    // SAFETY: target_feature invariant
  167|  4.80k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  168|  4.80k|
  169|  4.80k|                    self.reclassify(idx);
  170|  8.28k|                }
  171|  13.0k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E6resumeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  196|  1.45k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  197|  1.45k|                let mut classifier = $core::new();
  198|  1.45k|
  199|  1.45k|                // SAFETY: target_feature invariant
  200|  1.45k|                unsafe {
  201|  1.45k|                    if state.are_commas_on && state.are_colons_on {
  202|     48|                        classifier.internal_classifier.toggle_colons_and_commas();
  203|     48|                    } else {
  204|  1.40k|                        if state.are_commas_on {
  205|    670|                            classifier.internal_classifier.toggle_commas();
  206|    735|                        }
  207|  1.40k|                        if state.are_colons_on {
  208|     41|                            classifier.internal_classifier.toggle_colons();
  209|  1.36k|                        }
  210|       |                    }
  211|       |                }
  212|       |
  213|  1.45k|                let block = state.block.map(|b| {
  214|       |                    // SAFETY: target_feature invariant
  215|       |                    let mut block = unsafe { classifier.classify(b.block) };
  216|       |                    let idx_mask = <$mask_ty>::MAX << b.idx;
  217|       |                    block.structural_mask &= idx_mask;
  218|       |
  219|       |                    block
  220|  1.45k|                });
  221|  1.45k|
  222|  1.45k|                Self {
  223|  1.45k|                    iter: state.iter,
  224|  1.45k|                    block,
  225|  1.45k|                    classifier,
  226|  1.45k|                    are_commas_on: state.are_commas_on,
  227|  1.45k|                    are_colons_on: state.are_colons_on,
  228|  1.45k|                }
  229|  1.45k|            }
_RNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   85|   120k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   136k|                while self.current_block_is_spent() {
   87|  15.6k|                    match self.iter.next() {
   88|  15.4k|                        Ok(Some(block)) => {
   89|  15.4k|                            // SAFETY: target_feature invariant
   90|  15.4k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  15.4k|                        }
   92|       |                        Ok(None) => {
   93|    203|                            self.block = None;
   94|    203|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|   120k|                Ok(self
  101|   120k|                    .block
  102|   120k|                    .as_mut()
  103|   120k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|   120k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E25turn_colons_and_commas_onCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  112|  13.1k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  113|  13.1k|                if !self.are_commas_on && !self.are_colons_on {
  114|  1.19k|                    self.are_commas_on = true;
  115|  1.19k|                    self.are_colons_on = true;
  116|      0|                    debug!("Turning both commas and colons on at {idx}.");
  117|       |                    // SAFETY: target_feature invariant
  118|  1.19k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  119|  1.19k|
  120|  1.19k|                    self.reclassify(idx);
  121|  11.9k|                } else if !self.are_commas_on {
  122|    851|                    self.turn_commas_on(idx);
  123|  11.1k|                } else if !self.are_colons_on {
  124|  2.58k|                    self.turn_colons_on(idx);
  125|  8.53k|                }
  126|  13.1k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E26turn_colons_and_commas_offCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  128|  14.6k|            fn turn_colons_and_commas_off(&mut self) {
  129|  14.6k|                if self.are_commas_on && self.are_colons_on {
  130|    557|                    self.are_commas_on = false;
  131|    557|                    self.are_colons_on = false;
  132|      0|                    debug!("Turning both commas and colons off.");
  133|       |                    // SAFETY: target_feature invariant
  134|    557|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  135|  14.0k|                } else if self.are_commas_on {
  136|  1.15k|                    self.turn_commas_off();
  137|  12.8k|                } else if self.are_colons_on {
  138|    163|                    self.turn_colons_off();
  139|  12.7k|                }
  140|  14.6k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_colons_offCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  173|  40.1k|            fn turn_colons_off(&mut self) {
  174|  40.1k|                if self.are_colons_on {
  175|  4.80k|                    self.are_colons_on = false;
  176|      0|                    debug!("Turning colons off.");
  177|       |                    // SAFETY: target_feature invariant
  178|  4.80k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  179|  35.3k|                }
  180|  40.1k|            }
_RINvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2Q_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   21|  1.12k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  1.12k|            where
   23|  1.12k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  1.12k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  1.12k|            {
   26|  1.12k|                Self::Classifier {
   27|  1.12k|                    iter,
   28|  1.12k|                    classifier: $core::new(),
   29|  1.12k|                    block: None,
   30|  1.12k|                    are_commas_on: false,
   31|  1.12k|                    are_colons_on: false,
   32|  1.12k|                }
   33|  1.12k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_commas_offCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  153|  18.0k|            fn turn_commas_off(&mut self) {
  154|  18.0k|                if self.are_commas_on {
  155|  5.24k|                    self.are_commas_on = false;
  156|      0|                    debug!("Turning commas off.");
  157|       |                    // SAFETY: target_feature invariant
  158|  5.24k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  159|  12.8k|                }
  160|  18.0k|            }
_RNvXs2_NtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_commas_onCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  142|  34.4k|            fn turn_commas_on(&mut self, idx: usize) {
  143|  34.4k|                if !self.are_commas_on {
  144|  4.82k|                    self.are_commas_on = true;
  145|      0|                    debug!("Turning commas on at {idx}.");
  146|       |                    // SAFETY: target_feature invariant
  147|  4.82k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  148|  4.82k|
  149|  4.82k|                    self.reclassify(idx);
  150|  29.6k|                }
  151|  34.4k|            }

_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   16|  27.5k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  27.5k|        Self {
   18|  27.5k|            quote_classified: block,
   19|  27.5k|            structural_mask,
   20|  27.5k|        }
   21|  27.5k|    }
_RNCNvXs_NtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   40|   120k|        (idx < SIZE).then(|| {
   41|   120k|            let bit_mask = 1 << idx;
   42|   120k|
   43|   120k|            self.structural_mask ^= bit_mask;
   44|   120k|
   45|   120k|            // The last match being a catch-all *is important*.
   46|   120k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|   120k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|   120k|            match self.quote_classified.block[idx] {
   49|  22.8k|                b':' => Structural::Colon(idx),
   50|  17.5k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  28.6k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  19.7k|                b',' => Structural::Comma(idx),
   53|  14.6k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  16.9k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   120k|        })
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   29|   121k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   121k|        self.structural_mask.trailing_zeros()
   31|   121k|    }
_RNvXs_NtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   38|   120k|    fn next(&mut self) -> Option<Structural> {
   39|   120k|        let idx = self.get_idx() as usize;
   40|   120k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   120k|        })
   57|   120k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   24|   134k|    pub(crate) fn is_empty(&self) -> bool {
   25|   134k|        self.structural_mask == 0
   26|   134k|    }

_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_mask:
   24|  55.1k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   25|  55.1k|    _mm256_set1_epi8(0x0F)
   26|  55.1k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25618colons_toggle_mask:
   44|  11.4k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   45|  11.4k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   46|  11.4k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25618commas_toggle_mask:
   39|  12.5k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   40|  12.5k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   41|  12.5k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25617upper_nibble_mask:
   34|  2.57k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   35|  2.57k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   36|  2.57k|}
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25617lower_nibble_mask:
   29|  55.1k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   30|  55.1k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   31|  55.1k|}
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commas:
   76|  1.79k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   77|  1.79k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   78|  1.79k|    }
_RNvNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_mask:
   49|  1.79k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   50|  1.79k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   51|  1.79k|}
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colons:
   71|  9.65k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   72|  9.65k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   73|  9.65k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commas:
   66|  10.7k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   67|  10.7k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   68|  10.7k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563new:
   59|  2.57k|    pub(crate) unsafe fn new() -> Self {
   60|  2.57k|        Self {
   61|  2.57k|            upper_nibble_mask: upper_nibble_mask(),
   62|  2.57k|        }
   63|  2.57k|    }
_RNvMNtNtNtNtCsiD8oTJhN8wu_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   81|  55.1k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   82|  55.1k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   83|  55.1k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   84|  55.1k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   85|  55.1k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   86|  55.1k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   87|  55.1k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   88|  55.1k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
   89|  55.1k|
   90|  55.1k|        BlockClassification256 { structural }
   91|  55.1k|    }

_RNvXs6_NtCsiD8oTJhN8wu_8rsonpath5depthNtB5_5DepthNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsfl1mzxY9WoK_19fuzz_arbitrary_json:
    9|   121k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs9_NtCsiD8oTJhN8wu_8rsonpath5depthNtB5_5DepthNtNtCs3NN8x5qF7TE_4core3cmp10PartialOrd11partial_cmpCsfl1mzxY9WoK_19fuzz_arbitrary_json:
    9|  41.4k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvMNtCsiD8oTJhN8wu_8rsonpath5depthNtB2_5Depth9increment:
   21|  46.7k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  46.7k|        *self = (*self + 1)?;
   23|  46.7k|        Ok(())
   24|  46.7k|    }
_RNvXsc_NtCsiD8oTJhN8wu_8rsonpath5depthNtB5_5DepthINtNtNtCs3NN8x5qF7TE_4core3ops5arith3AddhE3addB7_:
   40|  46.7k|            fn add(self, rhs: u8) -> Self::Output {
   41|  46.7k|                self.0
   42|  46.7k|                    .checked_add(rhs)
   43|  46.7k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  46.7k|                    .map(Depth)
   45|  46.7k|            }
_RNvXs0_NtCsiD8oTJhN8wu_8rsonpath5depthNtB5_5DepthNtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5deref:
   80|  65.2k|    fn deref(&self) -> &Self::Target {
   81|  65.2k|        &self.0
   82|  65.2k|    }
_RNvMNtCsiD8oTJhN8wu_8rsonpath5depthNtB2_5Depth9decrement:
   28|  31.6k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  31.6k|        *self = (*self - 1)?;
   30|  31.6k|        Ok(())
   31|  31.6k|    }
_RNvXsf_NtCsiD8oTJhN8wu_8rsonpath5depthNtB5_5DepthINtNtNtCs3NN8x5qF7TE_4core3ops5arith3SubhE3subB7_:
   56|  31.6k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  31.6k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  31.6k|            }

_RNCINvNtNtCsiD8oTJhN8wu_8rsonpath6engine11empty_query6match_NtNtNtB8_5input5owned10OwnedBytesINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtB8_6result5MatchEE0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
   95|    877|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
_RINvNtNtCsiD8oTJhN8wu_8rsonpath6engine11empty_query6match_NtNtNtB6_5input5owned10OwnedBytesINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtB6_6result5MatchEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   80|    877|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   81|    877|where
   82|    877|    I: Input,
   83|    877|    S: Sink<Match>,
   84|    877|{
   85|    877|    // For a full match we need to copy the entire input starting from first non-whitespace,
   86|    877|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   87|    877|    // padded with whitespace at start and/or end, but that's a pathological case.
   88|    877|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   89|    877|    let mut res: Vec<u8> = vec![];
   90|    877|    let mut first_significant_idx = None;
   91|       |
   92|  7.10k|    while let Some(block) = iter.next()? {
   93|  6.22k|        if first_significant_idx.is_none() {
   94|       |            // Start of the root not found yet, look for it.
   95|    877|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
   96|       |
   97|    877|            if let Some(first_idx) = first_significant_idx {
   98|    877|                // Start of the root found in this block, copy the relevant part.
   99|    877|                res.extend(&block[first_idx..]);
  100|    877|            }
  101|  5.34k|        } else {
  102|  5.34k|            // Start of the root was already found, now we are copying everything.
  103|  5.34k|            res.extend(&*block);
  104|  5.34k|        }
  105|       |    }
  106|       |
  107|    877|    if let Some(start) = first_significant_idx {
  108|       |        // Trim whitespace if we have a result.
  109|  72.8k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  110|  71.9k|            res.pop();
  111|  71.9k|        }
  112|       |
  113|    877|        sink.add_match(Match::from_start_and_bytes(start, res))
  114|    877|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  115|      0|    }
  116|       |
  117|    877|    Ok(())
  118|    877|}

_RNCINvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13head_skippingINtB5_8HeadSkipNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB1J_6quotes7avx2_6411ConstructorNtNtNtB1J_10structural7avx2_6411ConstructorNtNtNtB1J_5depth7avx2_6411ConstructorNtNtNtB1J_6memmem7avx2_6411ConstructorEKj40_E17run_head_skippingINtNtB7_4main8ExecutorB17_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5O_5MatchEEB1E_EB5J_Es_0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  243|  1.59k|                        first_block = classifier_state.block.map(|b| b.block.block);
_RNCINvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13head_skippingINtB5_8HeadSkipNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB1J_6quotes7avx2_6411ConstructorNtNtNtB1J_10structural7avx2_6411ConstructorNtNtNtB1J_5depth7avx2_6411ConstructorNtNtNtB1J_6memmem7avx2_6411ConstructorEKj40_E17run_head_skippingINtNtB7_4main8ExecutorB17_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5O_5MatchEEB1E_EB5J_E0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  159|  1.62k|                                .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
_RINvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input5owned10OwnedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1H_6quotes7avx2_6411ConstructorNtNtNtB1H_10structural7avx2_6411ConstructorNtNtNtB1H_5depth7avx2_6411ConstructorNtNtNtB1H_6memmem7avx2_6411ConstructorEKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5M_5MatchEEB1C_EB5H_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  120|    537|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  121|    537|    where
  122|    537|        'b: 'r,
  123|    537|        E: CanHeadSkip<'b, 'r, I, R, V>,
  124|    537|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  125|    537|    {
  126|    537|        let mut input_iter = self.bytes.iter_blocks(engine.recorder());
  127|    537|        let mut idx = 0;
  128|    537|        let mut first_block = None;
  129|       |
  130|  3.69k|        loop {
  131|  3.69k|            let mut memmem = self.simd.memmem(self.bytes, &mut input_iter);
  132|      0|            debug!("Starting memmem search from {idx}");
  133|       |
  134|  3.69k|            if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, self.member_name)? {
  135|  3.18k|                drop(memmem);
  136|  3.18k|
  137|  3.18k|                first_block = Some(last_block);
  138|  3.18k|                idx = starting_quote_idx;
  139|      0|                debug!("Needle found at {idx}");
  140|  3.18k|                let seek_start_idx = idx + self.member_name.bytes_with_quotes().len();
  141|  3.18k|
  142|  3.18k|                match self.bytes.seek_non_whitespace_forward(seek_start_idx)? {
  143|  1.62k|                    Some((colon_idx, b':')) => {
  144|  1.62k|                        let (next_idx, next_c) = self
  145|  1.62k|                            .bytes
  146|  1.62k|                            .seek_non_whitespace_forward(colon_idx + 1)?
  147|  1.62k|                            .ok_or(EngineError::MissingItem())?;
  148|       |
  149|       |                        let ResumedQuoteClassifier {
  150|  1.62k|                            classifier: quote_classifier,
  151|  1.62k|                            first_block: quote_classified_first_block,
  152|  1.62k|                        } = self.simd.resume_quote_classification(input_iter, first_block);
  153|  1.62k|
  154|  1.62k|                        // Temporarily set the index within the current block to zero.
  155|  1.62k|                        // This makes sense for the move below.
  156|  1.62k|                        let mut classifier_state = ResumeClassifierState {
  157|  1.62k|                            iter: quote_classifier,
  158|  1.62k|                            block: quote_classified_first_block
  159|  1.62k|                                .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  160|  1.62k|                            are_colons_on: false,
  161|  1.62k|                            are_commas_on: self.is_accepting,
  162|  1.62k|                        };
  163|       |
  164|      0|                        debug!("Actual match with colon at {colon_idx}");
  165|      0|                        debug!("Next significant character at {next_idx}");
  166|      0|                        debug!("Classifier is at {}", classifier_state.get_idx());
  167|      0|                        debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  168|       |
  169|       |                        // Now we want to move the entire iterator state so that the current block is quote-classified,
  170|       |                        // and correctly points to the place the engine would expect had it found the matching key
  171|       |                        // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  172|       |                        // the engine wants to start one byte *after* the opening character.
  173|  1.62k|                        let resume_idx = if next_c == b'{' || next_c == b'[' {
  174|    793|                            next_idx + 1
  175|       |                        } else {
  176|    834|                            next_idx
  177|       |                        };
  178|  1.62k|                        classifier_state.forward_to(resume_idx)?;
  179|       |
  180|       |                        // We now have the block where we want and we ran quote classification, but during the `forward_to`
  181|       |                        // call we lose all the flow-through quote information that usually is passed from one block to the next.
  182|       |                        // We need to manually verify the soundness of the classification. Fortunately:
  183|       |                        // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  184|       |                        //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  185|       |                        // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  186|       |                        //    as outside and vice versa - so it suffices to flip it if it is wrong.
  187|  1.62k|                        if let Some(block) = classifier_state.block.as_mut() {
  188|  1.62k|                            let should_be_quoted = block.block.block[block.idx] == b'"';
  189|  1.62k|                            if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  190|      0|                                debug!("Mask needs flipping!");
  191|    717|                                block.block.within_quotes_mask = !block.block.within_quotes_mask;
  192|    717|                                classifier_state.iter.flip_quotes_bit();
  193|    910|                            }
  194|      0|                        }
  195|       |
  196|  1.59k|                        classifier_state = match next_c {
  197|       |                            b'{' | b'[' => {
  198|      0|                                debug!("resuming");
  199|    793|                                if self.is_accepting {
  200|    306|                                    engine.recorder().record_match(
  201|    306|                                        next_idx,
  202|    306|                                        Depth::ZERO,
  203|    306|                                        crate::result::MatchedNodeType::Complex,
  204|    306|                                    )?;
  205|    487|                                }
  206|    793|                                let classifier = self.simd.resume_structural_classification(classifier_state);
  207|    793|                                engine
  208|    793|                                    .run_on_subtree(
  209|    793|                                        Structural::Opening(
  210|    793|                                            if next_c == b'{' {
  211|    642|                                                BracketType::Curly
  212|       |                                            } else {
  213|    151|                                                BracketType::Square
  214|       |                                            },
  215|    793|                                            next_idx,
  216|    793|                                        ),
  217|    793|                                        self.state,
  218|    793|                                        classifier,
  219|     30|                                    )?
  220|       |                                    .0
  221|       |                            }
  222|    267|                            _ if self.is_accepting => {
  223|    267|                                engine.recorder().record_match(
  224|    267|                                    next_idx,
  225|    267|                                    Depth::ZERO,
  226|    267|                                    crate::result::MatchedNodeType::Atomic,
  227|    267|                                )?;
  228|    267|                                let mut classifier = self.simd.resume_structural_classification(classifier_state);
  229|    267|                                let next_structural = classifier.next()?;
  230|       |
  231|    267|                                match next_structural {
  232|    267|                                    Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  233|      0|                                    None => return Err(EngineError::MissingClosingCharacter()),
  234|       |                                }
  235|    267|                                classifier.stop()
  236|       |                            }
  237|    567|                            _ => classifier_state,
  238|       |                        };
  239|       |
  240|      0|                        debug!("Quote classified up to {}", classifier_state.get_idx());
  241|  1.59k|                        idx = classifier_state.get_idx();
  242|  1.59k|
  243|  1.59k|                        first_block = classifier_state.block.map(|b| b.block.block);
  244|  1.59k|                        input_iter = classifier_state.iter.into_inner();
  245|       |                    }
  246|  1.56k|                    _ => idx += 1,
  247|       |                }
  248|       |            } else {
  249|      0|                debug!("No memmem matches, exiting");
  250|    507|                break;
  251|    507|            }
  252|    507|        }
  253|    507|
  254|    507|        Ok(())
  255|    537|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1G_6quotes7avx2_6411ConstructorNtNtNtB1G_10structural7avx2_6411ConstructorNtNtNtB1G_5depth7avx2_6411ConstructorNtNtNtB1G_6memmem7avx2_6411ConstructorEKj40_E3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   94|  1.66k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   95|  1.66k|        let initial_state = automaton.initial_state();
   96|  1.66k|        let fallback_state = automaton[initial_state].fallback_state();
   97|  1.66k|        let transitions = automaton[initial_state].transitions();
   98|  1.66k|
   99|  1.66k|        if fallback_state == initial_state && transitions.len() == 1 {
  100|    982|            let (label, target_state) = transitions[0];
  101|       |
  102|    982|            if let Some(member_name) = label.get_member_name() {
  103|      0|                debug!("Automaton starts with a descendant search, using memmem heuristic.");
  104|       |
  105|    537|                return Some(Self {
  106|    537|                    bytes,
  107|    537|                    state: target_state,
  108|    537|                    is_accepting: automaton.is_accepting(target_state),
  109|    537|                    member_name,
  110|    537|                    simd,
  111|    537|                });
  112|    445|            }
  113|    681|        }
  114|       |
  115|  1.12k|        None
  116|  1.66k|    }

_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE21verify_subtree_closedCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  574|  1.86k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  575|  1.86k|        if self.depth != Depth::ZERO {
  576|      0|            Err(EngineError::MissingClosingCharacter())
  577|       |        } else {
  578|  1.86k|            Ok(())
  579|       |        }
  580|  1.86k|    }
_RINvNtNtCsiD8oTJhN8wu_8rsonpath6engine4main14query_executorNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1x_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB2X_6quotes7avx2_6411ConstructorNtNtNtB2X_10structural7avx2_6411ConstructorNtNtNtB2X_5depth7avx2_6411ConstructorNtNtNtB2X_6memmem7avx2_6411ConstructorEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  173|  1.66k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  174|  1.66k|    automaton: &'i Automaton<'q>,
  175|  1.66k|    input: &'i I,
  176|  1.66k|    recorder: &'r R,
  177|  1.66k|    simd: V,
  178|  1.66k|) -> Executor<'i, 'q, 'r, I, R, V>
  179|  1.66k|where
  180|  1.66k|    I: Input,
  181|  1.66k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  182|  1.66k|{
  183|  1.66k|    Executor {
  184|  1.66k|        depth: Depth::ZERO,
  185|  1.66k|        state: automaton.initial_state(),
  186|  1.66k|        stack: SmallStack::new(),
  187|  1.66k|        automaton,
  188|  1.66k|        input,
  189|  1.66k|        recorder,
  190|  1.66k|        simd,
  191|  1.66k|        next_event: None,
  192|  1.66k|        is_list: false,
  193|  1.66k|        array_count: NonNegativeArrayIndex::ZERO,
  194|  1.66k|        has_any_array_item_transition: false,
  195|  1.66k|        has_any_array_item_transition_to_accepting: false,
  196|  1.66k|    }
  197|  1.66k|}
_RNCNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE14handle_opening0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  427|     59|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RINvXs_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input5owned10OwnedBytesINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtB9_6result5MatchEECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  126|  2.54k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  127|  2.54k|    where
  128|  2.54k|        I: Input,
  129|  2.54k|        S: Sink<Match>,
  130|  2.54k|    {
  131|  2.54k|        let recorder = NodesRecorder::build_recorder(sink);
  132|  2.54k|
  133|  2.54k|        if self.automaton.is_empty_query() {
  134|    877|            return empty_query::match_(input, sink);
  135|  1.66k|        }
  136|  1.66k|
  137|  1.66k|        simd_dispatch!(self.simd => |simd| {
  138|  1.66k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  139|  1.66k|            executor.run()?;
  140|       |        });
  141|       |
  142|  1.60k|        Ok(())
  143|  2.54k|    }
_RNCNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE24record_match_detected_at0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  271|  23.8k|        .map(|x| x.0);
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12run_and_exitCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  215|  1.12k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  216|  1.12k|        let iter = self.input.iter_blocks(self.recorder);
  217|  1.12k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  218|  1.12k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  219|  1.12k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  220|  1.12k|
  221|  1.12k|        self.run_on_subtree(&mut classifier)?;
  222|       |
  223|  1.09k|        self.verify_subtree_closed()
  224|  1.12k|    }
_RNvXNtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   49|  2.65k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   50|  2.65k|        let automaton = Automaton::new(query)?;
   51|      0|        debug!("DFA:\n {}", automaton);
   52|  2.54k|        let simd = simd::configure();
   53|  2.54k|        log::info!("SIMD configuration:\n {}", simd);
   54|  2.54k|        Ok(MainEngine { automaton, simd })
   55|  2.65k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14handle_closingCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  480|      0|        debug!("Closing, decreasing depth and popping stack.");
  481|       |
  482|  31.6k|        self.depth
  483|  31.6k|            .decrement()
  484|  31.6k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  485|  31.6k|        self.recorder.record_value_terminator(idx, self.depth)?;
  486|       |
  487|  31.6k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  488|  25.4k|            self.state = stack_frame.state;
  489|  25.4k|            self.is_list = stack_frame.is_list;
  490|  25.4k|            self.array_count = stack_frame.array_count;
  491|  25.4k|            self.has_any_array_item_transition = stack_frame.has_any_array_item_transition;
  492|  25.4k|            self.has_any_array_item_transition_to_accepting = stack_frame.has_any_array_item_transition_to_accepting;
  493|       |
  494|      0|            debug!("Restored array count to {}", self.array_count);
  495|       |
  496|  25.4k|            if self.automaton.is_unitary(self.state) {
  497|     95|                let bracket_type = self.current_node_bracket_type();
  498|      0|                debug!("Skipping unique state from {bracket_type:?}");
  499|     95|                let close_idx = classifier.skip(bracket_type)?;
  500|     95|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  501|     95|                return Ok(());
  502|  25.3k|            }
  503|  6.21k|        }
  504|       |
  505|  31.5k|        if self.is_list
  506|  17.4k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  507|  11.2k|                || self.has_any_array_item_transition)
  508|  14.6k|        {
  509|  14.6k|            classifier.turn_commas_on(idx);
  510|  16.9k|        } else {
  511|  16.9k|            classifier.turn_commas_off();
  512|  16.9k|        }
  513|       |
  514|  31.5k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  515|  10.5k|            classifier.turn_colons_on(idx);
  516|  21.0k|        } else {
  517|  21.0k|            classifier.turn_colons_off();
  518|  21.0k|        }
  519|       |
  520|  31.5k|        Ok(())
  521|  31.6k|    }
_RNvXs3_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCs3NN8x5qF7TE_4core7convert4FromNtB5_12NodeTypeHintE4from:
  669|  23.8k|    fn from(value: NodeTypeHint) -> Self {
  670|  23.8k|        match value {
  671|  8.03k|            NodeTypeHint::Atomic => Self::Atomic,
  672|  15.8k|            NodeTypeHint::Complex(_) => Self::Complex,
  673|       |        }
  674|  23.8k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE20find_preceding_colonCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  548|  47.0k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  549|  47.0k|        if self.depth == Depth::ZERO {
  550|  1.71k|            None
  551|       |        } else {
  552|  45.3k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  553|       |
  554|  45.3k|            (char == b':').then_some(char_idx)
  555|       |        }
  556|  47.0k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE3runCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  206|  1.66k|    fn run(mut self) -> Result<(), EngineError> {
  207|  1.66k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  208|  1.66k|
  209|  1.66k|        match mb_head_skip {
  210|    537|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  211|  1.12k|            None => self.run_and_exit(),
  212|       |        }
  213|  1.66k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14run_on_subtreeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  226|  1.91k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  227|   121k|        loop {
  228|   121k|            if self.next_event.is_none() {
  229|   110k|                self.next_event = match classifier.next() {
  230|   110k|                    Ok(e) => e,
  231|      0|                    Err(err) => return Err(EngineError::InputError(err)),
  232|       |                };
  233|  11.2k|            }
  234|   121k|            if let Some(event) = self.next_event {
  235|      0|                debug!("====================");
  236|      0|                debug!("Event = {:?}", event);
  237|      0|                debug!("Depth = {:?}", self.depth);
  238|      0|                debug!("Stack = {:?}", self.stack);
  239|      0|                debug!("State = {:?}", self.state);
  240|      0|                debug!("====================");
  241|       |
  242|   121k|                self.next_event = None;
  243|   121k|                match event {
  244|  22.8k|                    Structural::Colon(idx) => self.handle_colon(classifier, idx)?,
  245|  19.4k|                    Structural::Comma(idx) => self.handle_comma(classifier, idx)?,
  246|  47.0k|                    Structural::Opening(b, idx) => self.handle_opening(classifier, b, idx)?,
  247|  31.6k|                    Structural::Closing(_, idx) => {
  248|  31.6k|                        self.handle_closing(classifier, idx)?;
  249|       |
  250|  31.6k|                        if self.depth == Depth::ZERO {
  251|  1.65k|                            break;
  252|  30.0k|                        }
  253|       |                    }
  254|       |                }
  255|       |            } else {
  256|    203|                break;
  257|       |            }
  258|       |        }
  259|       |
  260|  1.86k|        Ok(())
  261|  1.91k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE24record_match_detected_atCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  264|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  265|       |
  266|  23.8k|        let index = match hint {
  267|  6.57k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{'])?,
  268|  9.24k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'['])?,
  269|  8.03k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx)?,
  270|       |        }
  271|  23.8k|        .map(|x| x.0);
  272|  23.8k|
  273|  23.8k|        match index {
  274|  23.8k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  275|      0|            None => Err(EngineError::MissingItem()),
  276|       |        }
  277|  23.8k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE8is_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  558|  7.90k|    fn is_match(&self, idx: usize, member_name: &JsonString) -> Result<bool, EngineError> {
  559|  7.90k|        let len = member_name.bytes_with_quotes().len();
  560|       |
  561|  7.90k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  562|  7.90k|            Some(x) => x,
  563|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  564|       |        };
  565|       |
  566|  7.90k|        if closing_quote_idx + 1 < len {
  567|     80|            return Ok(false);
  568|  7.82k|        }
  569|  7.82k|
  570|  7.82k|        let start_idx = closing_quote_idx + 1 - len;
  571|  7.82k|        Ok(self.input.is_member_match(start_idx, closing_quote_idx, member_name))
  572|  7.90k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE25current_node_bracket_typeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  582|    112|    fn current_node_bracket_type(&self) -> BracketType {
  583|    112|        if self.is_list {
  584|      2|            BracketType::Square
  585|       |        } else {
  586|    110|            BracketType::Curly
  587|       |        }
  588|    112|    }
_RNCNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE12handle_colon0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  315|  10.3k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEEINtNtB7_13head_skipping11CanHeadSkipBX_B1u_B2U_E14run_on_subtreeCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  639|    793|    fn run_on_subtree(
  640|    793|        &mut self,
  641|    793|        next_event: Structural,
  642|    793|        state: State,
  643|    793|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, BLOCK_SIZE, R>>,
  644|    793|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, BLOCK_SIZE, R>, V, MaskType>, EngineError> {
  645|    793|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  646|    793|
  647|    793|        self.state = state;
  648|    793|        self.next_event = Some(next_event);
  649|    793|
  650|    793|        self.run_on_subtree(&mut classifier)?;
  651|    763|        self.verify_subtree_closed()?;
  652|       |
  653|    763|        Ok(ResumeState(classifier.stop()))
  654|    793|    }
_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEEINtNtB7_13head_skipping11CanHeadSkipBX_B1u_B2U_E8recorderCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  656|  1.37k|    fn recorder(&mut self) -> &'r R {
  657|  1.37k|        self.recorder
  658|  1.37k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB5_10SmallStack4peekCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  612|  31.6k|    fn peek(&mut self) -> Option<StackFrame> {
  613|  31.6k|        self.contents.last().copied()
  614|  31.6k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB5_10SmallStack4pushCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  627|  33.5k|    fn push(&mut self, value: StackFrame) {
  628|  33.5k|        self.contents.push(value)
  629|  33.5k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  618|  31.6k|        if let Some(stack_frame) = self.peek() {
  619|  28.5k|            if depth <= stack_frame.depth {
  620|  25.4k|                return self.contents.pop();
  621|  3.11k|            }
  622|  3.09k|        }
  623|  6.21k|        None
  624|  31.6k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12handle_commaCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  337|  19.4k|        self.recorder.record_value_terminator(idx, self.depth)?;
  338|  19.4k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  339|  19.4k|            c == b'{' || c == b'['
  340|       |        } else {
  341|      0|            false
  342|       |        };
  343|       |
  344|  19.4k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  345|  19.4k|
  346|  19.4k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  347|      0|            debug!("Accepting on comma.");
  348|  4.73k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  349|  14.7k|        }
  350|       |
  351|       |        // After wildcard, check for a matching array index.
  352|       |        // If the index increment exceeds the field's limit, give up.
  353|  19.4k|        if self.is_list && self.array_count.try_increment().is_err() {
  354|      0|            return Ok(());
  355|  19.4k|        }
  356|      0|        debug!("Incremented array count to {}", self.array_count);
  357|       |
  358|  19.4k|        let match_index = self
  359|  19.4k|            .automaton
  360|  19.4k|            .has_array_index_transition_to_accepting(self.state, &self.array_count);
  361|  19.4k|
  362|  19.4k|        if self.is_list && !is_next_opening && match_index {
  363|      0|            debug!("Accepting on list item.");
  364|    249|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  365|  19.2k|        }
  366|       |
  367|  19.4k|        Ok(())
  368|  19.4k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12handle_colonCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  284|      0|        debug!("Colon");
  285|       |
  286|  22.8k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  287|  22.8k|            c == b'{' || c == b'['
  288|       |        } else {
  289|      0|            false
  290|       |        };
  291|       |
  292|  22.8k|        if !is_next_opening {
  293|  10.3k|            let mut any_matched = false;
  294|       |
  295|  10.3k|            for &(label, target) in self.automaton[self.state].transitions() {
  296|  9.39k|                match label {
  297|  7.53k|                    TransitionLabel::ArrayIndex(_) => {}
  298|  1.86k|                    TransitionLabel::ObjectMember(member_name) => {
  299|  1.86k|                        if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  300|    393|                            self.record_match_detected_at(
  301|    393|                                idx + 1,
  302|    393|                                NodeTypeHint::Atomic, /* since is_next_opening is false */
  303|    393|                            )?;
  304|    393|                            any_matched = true;
  305|    393|                            break;
  306|  1.47k|                        }
  307|       |                    }
  308|       |                }
  309|       |            }
  310|  10.3k|            let fallback_state = self.automaton[self.state].fallback_state();
  311|  10.3k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  312|  1.54k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  313|  8.76k|            }
  314|  10.3k|            self.next_event = classifier.next()?;
  315|  10.3k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  316|  10.3k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  317|     17|                if let Some(s) = self.next_event {
  318|     17|                    match s {
  319|      0|                        Structural::Closing(_, idx) => {
  320|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  321|       |                        }
  322|     17|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  323|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  324|       |                    }
  325|      0|                }
  326|     17|                let bracket_type = self.current_node_bracket_type();
  327|      0|                debug!("Skipping unique state from {bracket_type:?}");
  328|     17|                let stop_at = classifier.skip(bracket_type)?;
  329|     17|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  330|  10.2k|            }
  331|  12.5k|        }
  332|       |
  333|  22.8k|        Ok(())
  334|  22.8k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14handle_openingCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  376|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  377|  47.0k|        let mut any_matched = false;
  378|  47.0k|
  379|  47.0k|        let colon_idx = self.find_preceding_colon(idx);
  380|       |
  381|  47.0k|        for &(label, target) in self.automaton[self.state].transitions() {
  382|  35.3k|            match label {
  383|  17.9k|                TransitionLabel::ArrayIndex(i) => {
  384|  17.9k|                    if self.is_list && i.eq(&self.array_count) {
  385|  1.91k|                        any_matched = true;
  386|  1.91k|                        self.transition_to(target, bracket_type);
  387|  1.91k|                        if self.automaton.is_accepting(target) {
  388|      0|                            debug!("Accept {idx}");
  389|    235|                            self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  390|  1.68k|                        }
  391|  1.91k|                        break;
  392|  16.0k|                    }
  393|       |                }
  394|  17.3k|                TransitionLabel::ObjectMember(member_name) => {
  395|  17.3k|                    if let Some(colon_idx) = colon_idx {
  396|  6.51k|                        if self.is_match(colon_idx, member_name)? {
  397|  4.51k|                            any_matched = true;
  398|  4.51k|                            self.transition_to(target, bracket_type);
  399|  4.51k|                            if self.automaton.is_accepting(target) {
  400|  2.90k|                                self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  401|  1.61k|                            }
  402|  4.51k|                            break;
  403|  2.00k|                        }
  404|  10.8k|                    }
  405|       |                }
  406|       |            }
  407|       |        }
  408|       |
  409|  47.0k|        if !any_matched && self.depth != Depth::ZERO {
  410|  38.9k|            let fallback = self.automaton[self.state].fallback_state();
  411|      0|            debug!("Falling back to {fallback}");
  412|       |
  413|  38.9k|            if self.automaton.is_rejecting(fallback) {
  414|    281|                let closing_idx = classifier.skip(bracket_type)?;
  415|    281|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  416|  38.6k|            } else {
  417|  38.6k|                self.transition_to(fallback, bracket_type);
  418|  38.6k|            }
  419|  38.6k|
  420|  38.6k|            if self.automaton.is_accepting(fallback) {
  421|  12.6k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  422|  25.9k|            }
  423|  8.15k|        }
  424|       |
  425|  46.7k|        self.depth
  426|  46.7k|            .increment()
  427|  46.7k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  428|       |
  429|  46.7k|        self.is_list = bracket_type == BracketType::Square;
  430|  46.7k|        let mut needs_commas = false;
  431|  46.7k|
  432|  46.7k|        if self.is_list {
  433|  28.6k|            self.has_any_array_item_transition = self.automaton.has_any_array_item_transition(self.state);
  434|  28.6k|            self.has_any_array_item_transition_to_accepting =
  435|  28.6k|                self.automaton.has_any_array_item_transition_to_accepting(self.state);
  436|  28.6k|
  437|  28.6k|            let fallback = self.automaton[self.state].fallback_state();
  438|  28.6k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  439|       |
  440|  28.6k|            let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  441|       |
  442|  28.6k|            if searching_list {
  443|  18.9k|                needs_commas = true;
  444|  18.9k|                self.array_count = NonNegativeArrayIndex::ZERO;
  445|      0|                debug!("Initialized array count to {}", self.array_count);
  446|       |
  447|  18.9k|                let wants_first_item =
  448|  18.9k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  449|       |
  450|  18.9k|                if wants_first_item {
  451|  9.03k|                    let next = self.input.seek_non_whitespace_forward(idx + 1)?;
  452|       |
  453|  9.03k|                    match next {
  454|  7.91k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  455|  1.11k|                        Some((value_idx, _)) => {
  456|  1.11k|                            self.record_match_detected_at(
  457|  1.11k|                                value_idx,
  458|  1.11k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  459|  1.11k|                            )?;
  460|       |                        }
  461|      0|                        _ => (),
  462|       |                    }
  463|  9.92k|                }
  464|  9.68k|            }
  465|  18.0k|        }
  466|       |
  467|  46.7k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  468|  13.1k|            classifier.turn_colons_and_commas_on(idx);
  469|  33.5k|        } else if needs_commas {
  470|  18.9k|            classifier.turn_colons_off();
  471|  18.9k|            classifier.turn_commas_on(idx);
  472|  18.9k|        } else {
  473|  14.6k|            classifier.turn_colons_and_commas_off();
  474|  14.6k|        }
  475|       |
  476|  46.7k|        Ok(())
  477|  47.0k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE13transition_toCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  523|  45.0k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  524|  45.0k|        let target_is_list = opening == BracketType::Square;
  525|  45.0k|
  526|  45.0k|        let fallback = self.automaton[self.state].fallback_state();
  527|  45.0k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  528|  45.0k|        let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  529|       |
  530|  45.0k|        if target != self.state || target_is_list != self.is_list || searching_list {
  531|       |            debug!(
  532|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  533|       |                self.state, self.array_count
  534|       |            );
  535|       |
  536|  33.5k|            self.stack.push(StackFrame {
  537|  33.5k|                depth: *self.depth,
  538|  33.5k|                state: self.state,
  539|  33.5k|                is_list: self.is_list,
  540|  33.5k|                array_count: self.array_count,
  541|  33.5k|                has_any_array_item_transition: self.has_any_array_item_transition,
  542|  33.5k|                has_any_array_item_transition_to_accepting: self.has_any_array_item_transition_to_accepting,
  543|  33.5k|            });
  544|  33.5k|            self.state = target;
  545|  11.4k|        }
  546|  45.0k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6engine4mainNtB5_10SmallStack3new:
  607|  1.66k|    fn new() -> Self {
  608|  1.66k|        Self { contents: smallvec![] }
  609|  1.66k|    }

_RNvXs0_NtNtCsiD8oTJhN8wu_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB28_5MatchEEEINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB3B_10structural7avx2_6416Avx2Classifier64B17_B3u_EINtNtB3B_4simd12ResolvedSimdNtB3x_11ConstructorNtB4G_11ConstructorNtNtNtB3B_5depth7avx2_6411ConstructorNtNtNtB3B_6memmem7avx2_6411ConstructorEKB1Z_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  129|   249k|    fn deref_mut(&mut self) -> &mut Self::Target {
  130|   249k|        self.classifier
  131|   249k|            .as_mut()
  132|   249k|            .expect("tail skip must always hold a classifier")
  133|   249k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB25_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB3y_10structural7avx2_6416Avx2Classifier64B14_B3r_EINtNtB3y_4simd12ResolvedSimdNtB3u_11ConstructorNtB4D_11ConstructorNtNtNtB3y_5depth7avx2_6411ConstructorNtNtNtB3y_6memmem7avx2_6411ConstructorEKB1W_E4stopCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  101|    763|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  102|    763|        self.classifier.expect("tail skip must always hold a classifier").stop()
  103|    763|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB25_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB3y_10structural7avx2_6416Avx2Classifier64B14_B3r_EINtNtB3y_4simd12ResolvedSimdNtB3u_11ConstructorNtB4D_11ConstructorNtNtNtB3y_5depth7avx2_6411ConstructorNtNtNtB3y_6memmem7avx2_6411ConstructorEKB1W_E4skipCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   37|      0|        debug!("Skipping");
   38|    393|        let mut idx = 0;
   39|    393|        let mut err = None;
   40|    393|
   41|    393|        let classifier = self.classifier.take().expect("tail skip must always hold a classifier");
   42|       |
   43|    393|        self.classifier = Some('a: {
   44|    393|            let resume_state = classifier.stop();
   45|    393|            let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   46|    393|                self.simd.resume_depth_classification(resume_state, opening);
   47|       |
   48|    393|            let mut current_vector = match first_vector {
   49|    358|                Some(v) => Some(v),
   50|     35|                None => match depth_classifier.next() {
   51|     35|                    Ok(v) => v,
   52|      0|                    Err(e) => {
   53|      0|                        err = Some(e);
   54|      0|                        let resume_state = depth_classifier.stop(None);
   55|      0|                        break 'a self.simd.resume_structural_classification(resume_state);
   56|       |                    }
   57|       |                },
   58|       |            };
   59|    393|            let mut current_depth = 1;
   60|       |
   61|  1.89k|            'outer: while let Some(ref mut vector) = current_vector {
   62|  1.89k|                vector.add_depth(current_depth);
   63|       |
   64|      0|                debug!("Fetched vector, current depth is {current_depth}");
   65|      0|                debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   66|       |
   67|  1.89k|                if vector.estimate_lowest_possible_depth() <= 0 {
   68|  2.38k|                    while vector.advance_to_next_depth_decrease() {
   69|  2.24k|                        if vector.get_depth() == 0 {
   70|      0|                            debug!("Encountered depth 0, breaking.");
   71|    393|                            break 'outer;
   72|  1.85k|                        }
   73|       |                    }
   74|  1.36k|                }
   75|       |
   76|  1.50k|                current_depth = vector.depth_at_end();
   77|  1.50k|                current_vector = match depth_classifier.next() {
   78|  1.50k|                    Ok(v) => v,
   79|      0|                    Err(e) => {
   80|      0|                        err = Some(e);
   81|      0|                        let resume_state = depth_classifier.stop(None);
   82|      0|                        break 'a self.simd.resume_structural_classification(resume_state);
   83|       |                    }
   84|       |                };
   85|       |            }
   86|       |
   87|      0|            debug!("Skipping complete, resuming structural classification.");
   88|    393|            let resume_state = depth_classifier.stop(current_vector);
   89|      0|            debug!("Finished at {}", resume_state.get_idx());
   90|    393|            idx = resume_state.get_idx();
   91|    393|            self.simd.resume_structural_classification(resume_state)
   92|       |        });
   93|       |
   94|    393|        if let Some(err) = err {
   95|      0|            Err(err.into())
   96|       |        } else {
   97|    393|            Ok(idx)
   98|       |        }
   99|    393|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB25_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB3y_10structural7avx2_6416Avx2Classifier64B14_B3r_EINtNtB3y_4simd12ResolvedSimdNtB3u_11ConstructorNtB4D_11ConstructorNtNtNtB3y_5depth7avx2_6411ConstructorNtNtNtB3y_6memmem7avx2_6411ConstructorEKB1W_E3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   28|  1.91k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  1.91k|        Self {
   30|  1.91k|            classifier: Some(classifier),
   31|  1.91k|            simd,
   32|  1.91k|            _phantom: (PhantomData, PhantomData),
   33|  1.91k|        }
   34|  1.91k|    }

_RNvXNtCsiD8oTJhN8wu_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  166|  54.1k|    fn halves(&self) -> (&[u8], &[u8]) {
  167|  54.1k|        assert_eq!(N % 2, 0);
  168|  54.1k|        (&self[..N / 2], &self[N / 2..])
  169|  54.1k|    }
_RINvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice12seek_forwardKj1_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  212|  15.8k|    pub(super) fn seek_forward<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  213|  15.8k|        assert!(N > 0);
  214|  15.8k|        let mut idx = from;
  215|  15.8k|
  216|  15.8k|        if idx >= bytes.len() {
  217|      0|            return None;
  218|  15.8k|        }
  219|       |
  220|  15.8k|        loop {
  221|  15.8k|            let b = bytes[idx];
  222|  15.8k|            if needles.contains(&b) {
  223|  15.8k|                return Some((idx, b));
  224|      0|            }
  225|      0|            idx += 1;
  226|      0|            if idx == bytes.len() {
  227|      0|                return None;
  228|      0|            }
  229|       |        }
  230|  15.8k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice28seek_non_whitespace_backwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  253|  45.3k|    pub(super) fn seek_non_whitespace_backward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  254|  45.3k|        let mut idx = from;
  255|  45.3k|
  256|  45.3k|        if idx >= bytes.len() {
  257|      0|            return None;
  258|  45.3k|        }
  259|       |
  260|       |        loop {
  261|  45.3k|            let b = bytes[idx];
  262|  45.3k|            if !b.is_ascii_whitespace() {
  263|  45.3k|                return Some((idx, b));
  264|      0|            }
  265|      0|            if idx == 0 {
  266|      0|                return None;
  267|      0|            }
  268|      0|            idx -= 1;
  269|       |        }
  270|  45.3k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice27seek_non_whitespace_forwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  233|  64.2k|    pub(super) fn seek_non_whitespace_forward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  234|  64.2k|        let mut idx = from;
  235|  64.2k|
  236|  64.2k|        if idx >= bytes.len() {
  237|      0|            return None;
  238|  64.2k|        }
  239|       |
  240|  64.5k|        loop {
  241|  64.5k|            let b = bytes[idx];
  242|  64.5k|            if !b.is_ascii_whitespace() {
  243|  64.2k|                return Some((idx, b));
  244|    376|            }
  245|    376|            idx += 1;
  246|    376|            if idx == bytes.len() {
  247|      3|                return None;
  248|    373|            }
  249|       |        }
  250|  64.2k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice13seek_backwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  196|  7.90k|    pub(super) fn seek_backward(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  197|  7.90k|        let mut idx = from;
  198|  7.90k|        assert!(idx < bytes.len());
  199|       |
  200|       |        loop {
  201|  7.90k|            if bytes[idx] == needle {
  202|  7.90k|                return Some(idx);
  203|      0|            }
  204|      0|            if idx == 0 {
  205|      0|                return None;
  206|      0|            }
  207|      0|            idx -= 1;
  208|       |        }
  209|  7.90k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice15is_member_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  273|  20.0k|    pub(super) fn is_member_match(bytes: &[u8], from: usize, to: usize, member: &JsonString) -> bool {
  274|  20.0k|        if to >= bytes.len() {
  275|     68|            return false;
  276|  19.9k|        }
  277|  19.9k|        let slice = &bytes[from..to + 1];
  278|  19.9k|        member.bytes_with_quotes() == slice && (from == 0 || bytes[from - 1] != b'\\')
  279|  20.0k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath5input8in_slice14pad_last_blockB5_:
  182|  2.65k|    pub(super) fn pad_last_block(bytes: &[u8]) -> LastBlock {
  183|  2.65k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
  184|  2.65k|        let last_block_start = (bytes.len() / MAX_BLOCK_SIZE) * MAX_BLOCK_SIZE;
  185|  2.65k|        let last_block_slice = &bytes[last_block_start..];
  186|  2.65k|
  187|  2.65k|        last_block_buf[..last_block_slice.len()].copy_from_slice(last_block_slice);
  188|  2.65k|
  189|  2.65k|        LastBlock {
  190|  2.65k|            bytes: last_block_buf,
  191|  2.65k|            absolute_start: last_block_start,
  192|  2.65k|        }
  193|  2.65k|    }

_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEENtB9_16FallibleIterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  151|      0|        debug!("next!");
  152|       |
  153|  23.8k|        if self.idx >= self.input.len() {
  154|    710|            Ok(None)
  155|  23.1k|        } else if self.idx >= self.last_block.absolute_start {
  156|      0|            let i = self.idx - self.last_block.absolute_start;
  157|      0|            self.idx += N;
  158|      0|            let block = &self.last_block.bytes[i..i + N];
  159|      0|
  160|      0|            self.recorder.record_block_start(block);
  161|      0|
  162|      0|            Ok(Some(block))
  163|       |        } else {
  164|  23.1k|            let block = &self.input[self.idx..self.idx + N];
  165|  23.1k|            self.idx += N;
  166|  23.1k|
  167|  23.1k|            self.recorder.record_block_start(block);
  168|  23.1k|
  169|  23.1k|            Ok(Some(block))
  170|       |        }
  171|  23.8k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_NtNtNtB9_6result5empty13EmptyRecorderE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   81|    877|    pub(super) fn new(bytes: &'a [u8], last_block: &'a LastBlock, recorder: &'r R) -> Self {
   82|    877|        Self {
   83|    877|            input: bytes,
   84|    877|            idx: 0,
   85|    877|            last_block,
   86|    877|            recorder,
   87|    877|        }
   88|    877|    }
_RNvXs3_NtNtCsiD8oTJhN8wu_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEEINtB7_18InputBlockIteratorKB1k_E10get_offsetCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  189|      0|        debug!("getting input iter {}", self.idx);
  190|   126k|        self.idx
  191|   126k|    }
_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_NtNtNtB9_6result5empty13EmptyRecorderENtB9_16FallibleIterator4nextCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  151|      0|        debug!("next!");
  152|       |
  153|  7.10k|        if self.idx >= self.input.len() {
  154|    877|            Ok(None)
  155|  6.22k|        } else if self.idx >= self.last_block.absolute_start {
  156|      0|            let i = self.idx - self.last_block.absolute_start;
  157|      0|            self.idx += N;
  158|      0|            let block = &self.last_block.bytes[i..i + N];
  159|      0|
  160|      0|            self.recorder.record_block_start(block);
  161|      0|
  162|      0|            Ok(Some(block))
  163|       |        } else {
  164|  6.22k|            let block = &self.input[self.idx..self.idx + N];
  165|  6.22k|            self.idx += N;
  166|  6.22k|
  167|  6.22k|            self.recorder.record_block_start(block);
  168|  6.22k|
  169|  6.22k|            Ok(Some(block))
  170|       |        }
  171|  7.10k|    }
_RNvMs0_NtNtCsiD8oTJhN8wu_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   81|  1.66k|    pub(super) fn new(bytes: &'a [u8], last_block: &'a LastBlock, recorder: &'r R) -> Self {
   82|  1.66k|        Self {
   83|  1.66k|            input: bytes,
   84|  1.66k|            idx: 0,
   85|  1.66k|            last_block,
   86|  1.66k|            recorder,
   87|  1.66k|        }
   88|  1.66k|    }

_RNvXs4_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB5_10OwnedBytesNtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  205|  2.65k|    fn drop(&mut self) {
  206|  2.65k|        if self.len == 0 {
  207|      0|            return;
  208|  2.65k|        }
  209|  2.65k|
  210|  2.65k|        // This should never happen and if it did it would cause a memory leak.
  211|  2.65k|        #[allow(clippy::expect_used)]
  212|  2.65k|        let layout = Self::get_layout(self.capacity).expect("layout for existing OwnedBytes must never change");
  213|  2.65k|
  214|  2.65k|        // SAFETY:
  215|  2.65k|        // `ptr` is allocated in `new` and layout is constructed using the same function
  216|  2.65k|        // and size.
  217|  2.65k|        // This relies on self.capacity not being mutated ever.
  218|  2.65k|        unsafe { alloc::dealloc(self.bytes_ptr.as_ptr(), layout) }
  219|  2.65k|    }
_RINvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input12seek_forwardKj1_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  247|  15.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, InputError> {
  248|  15.8k|        Ok(in_slice::seek_forward(self.as_slice(), from, needles))
  249|  15.8k|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input27seek_non_whitespace_forwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  252|  64.2k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, InputError> {
  253|  64.2k|        Ok(in_slice::seek_non_whitespace_forward(self.as_slice(), from))
  254|  64.2k|    }
_RINvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  234|    877|    fn iter_blocks<'a, 'r, R, const N: usize>(&'a self, recorder: &'r R) -> Self::BlockIterator<'a, 'r, N, R>
  235|    877|    where
  236|    877|        R: InputRecorder<&'a [u8]>,
  237|    877|    {
  238|    877|        BorrowedBytesBlockIterator::new(self.as_slice(), &self.last_block, recorder)
  239|    877|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input13seek_backwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  242|  7.90k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  243|  7.90k|        in_slice::seek_backward(self.as_slice(), from, needle)
  244|  7.90k|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input15is_member_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  262|  20.0k|    fn is_member_match(&self, from: usize, to: usize, label: &JsonString) -> bool {
  263|  20.0k|        in_slice::is_member_match(self.as_slice(), from, to, label)
  264|  20.0k|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input28seek_non_whitespace_backwardCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  257|  45.3k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  258|  45.3k|        in_slice::seek_non_whitespace_backward(self.as_slice(), from)
  259|  45.3k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB2_10OwnedBytes10get_layout:
  154|  5.30k|    fn get_layout(size: usize) -> Result<alloc::Layout, InputError> {
  155|  5.30k|        alloc::Layout::from_size_align(size, MAX_BLOCK_SIZE).map_err(|_err| InputError::AllocationSizeExceeded)
  156|  5.30k|    }
_RINvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEKj40_ECsfl1mzxY9WoK_19fuzz_arbitrary_json:
  234|  1.66k|    fn iter_blocks<'a, 'r, R, const N: usize>(&'a self, recorder: &'r R) -> Self::BlockIterator<'a, 'r, N, R>
  235|  1.66k|    where
  236|  1.66k|        R: InputRecorder<&'a [u8]>,
  237|  1.66k|    {
  238|  1.66k|        BorrowedBytesBlockIterator::new(self.as_slice(), &self.last_block, recorder)
  239|  1.66k|    }
_RINvMNtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB3_10OwnedBytes3newNtNtCsc6jWpmc7Dho_5alloc6string6StringECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   97|  2.65k|    pub fn new<T: AsRef<[u8]>>(src: &T) -> Result<Self, InputError> {
   98|  2.65k|        let slice = src.as_ref();
   99|  2.65k|        let rem = slice.len() % MAX_BLOCK_SIZE;
  100|  2.65k|        let pad = if rem == 0 { 0 } else { MAX_BLOCK_SIZE - rem };
  101|  2.65k|        let size = slice.len() + pad;
  102|  2.65k|
  103|  2.65k|        if size == 0 {
  104|       |            // SAFETY: For len and cap 0 the dangling ptr always works.
  105|      0|            return Ok(unsafe { Self::finalize_new(ptr::NonNull::dangling(), 0, 0) });
  106|  2.65k|        }
  107|       |
  108|       |        // Size overflow check happens in get_layout.
  109|  2.65k|        let layout = Self::get_layout(size)?;
  110|       |
  111|       |        // SAFETY:
  112|       |        // Layout is guaranteed to be of non-zero size at this point.
  113|  2.65k|        let raw_ptr = unsafe { alloc::alloc(layout) };
  114|  2.65k|        let ptr = ptr::NonNull::new(raw_ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));
  115|  2.65k|
  116|  2.65k|        // SAFETY:
  117|  2.65k|        unsafe {
  118|  2.65k|            ptr::copy_nonoverlapping(slice.as_ptr(), ptr.as_ptr(), slice.len());
  119|  2.65k|            ptr::write_bytes(ptr.as_ptr().add(slice.len()), JSON_SPACE_BYTE, pad);
  120|  2.65k|        };
  121|  2.65k|
  122|  2.65k|        // SAFETY: At this point we allocated and initialized exactly `size` bytes.
  123|  2.65k|        Ok(unsafe { Self::finalize_new(ptr, size, size) })
  124|  2.65k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB2_10OwnedBytes8as_slice:
   51|   155k|    pub fn as_slice(&self) -> &[u8] {
   52|   155k|        // SAFETY: Pointer is not null and its validity is an internal invariant.
   53|   155k|        unsafe { slice::from_raw_parts(self.bytes_ptr.as_ptr(), self.len) }
   54|   155k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5input5ownedNtB2_10OwnedBytes12finalize_new:
   36|  2.65k|    unsafe fn finalize_new(ptr: ptr::NonNull<u8>, len: usize, cap: usize) -> Self {
   37|  2.65k|        let slice = slice::from_raw_parts(ptr.as_ptr(), len);
   38|  2.65k|        let last_block = in_slice::pad_last_block(slice);
   39|  2.65k|
   40|  2.65k|        Self {
   41|  2.65k|            bytes_ptr: ptr,
   42|  2.65k|            len,
   43|  2.65k|            capacity: cap,
   44|  2.65k|            last_block,
   45|  2.65k|        }
   46|  2.65k|    }

_RNvCsiD8oTJhN8wu_8rsonpath18is_json_whitespace:
  356|  82.0k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  357|  82.0k|    JSON_WHITESPACE_BYTES.contains(&x)
  358|  82.0k|}

_RNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtB5_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  308|  2.65k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  309|       |        #[derive(arbitrary::Arbitrary)]
  310|       |        enum RawNode {
  311|       |            Child(JsonString),
  312|       |            AnyChild,
  313|       |            Descendant(JsonString),
  314|       |            AnyDescendant,
  315|       |            ArrayIndexChild(NonNegativeArrayIndex),
  316|       |            ArrayIndexDescendant(NonNegativeArrayIndex),
  317|       |        }
  318|       |
  319|  2.65k|        let sequence = u.arbitrary_iter()?;
  320|  2.65k|        let mut node = None;
  321|       |
  322|  18.2k|        for raw in sequence {
  323|  15.5k|            node = Some(Box::new(match raw? {
  324|  1.50k|                RawNode::Child(s) => JsonPathQueryNode::Child(s, node),
  325|  6.22k|                RawNode::AnyChild => JsonPathQueryNode::AnyChild(node),
  326|  1.20k|                RawNode::Descendant(s) => JsonPathQueryNode::Descendant(s, node),
  327|  2.33k|                RawNode::AnyDescendant => JsonPathQueryNode::AnyDescendant(node),
  328|  1.35k|                RawNode::ArrayIndexChild(i) => JsonPathQueryNode::ArrayIndexChild(i, node),
  329|  2.93k|                RawNode::ArrayIndexDescendant(i) => JsonPathQueryNode::ArrayIndexDescendant(i, node),
  330|       |            }));
  331|       |        }
  332|       |
  333|  2.65k|        Ok(Self {
  334|  2.65k|            root: Box::new(JsonPathQueryNode::Root(node)),
  335|  2.65k|        })
  336|  2.65k|    }
_RNCNvXNvNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtBc_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_7RawNodeB11_9arbitrary0Be_:
  309|     43|        #[derive(arbitrary::Arbitrary)]
_RNvMNtCsiD8oTJhN8wu_8rsonpath5queryNtB2_17JsonPathQueryNode4iter:
   89|  2.65k|    pub fn iter(&self) -> JsonPathQueryIterator {
   90|  2.65k|        JsonPathQueryIterator { node: Some(self) }
   91|  2.65k|    }
_RNvXs_NtCsiD8oTJhN8wu_8rsonpath5queryNtB4_21JsonPathQueryIteratorNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextB6_:
  110|  20.8k|    fn next(&mut self) -> Option<Self::Item> {
  111|  20.8k|        let result = self.node;
  112|       |
  113|  20.8k|        if let Some(node) = result {
  114|  18.2k|            self.node = node.child()
  115|  2.65k|        }
  116|       |
  117|  20.8k|        result
  118|  20.8k|    }
_RNCNvNvNvNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtBd_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__23RECURSIVE_COUNT_RawNode7___getit0Bf_:
  309|      1|        #[derive(arbitrary::Arbitrary)]
_RNvXNvNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtBa_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB4_7RawNodeBZ_9arbitrary:
  309|  46.5k|        #[derive(arbitrary::Arbitrary)]
_RNvMNtCsiD8oTJhN8wu_8rsonpath5queryNtB2_17JsonPathQueryNode5child:
   73|  18.2k|    pub fn child(&self) -> Option<&Self> {
   74|  18.2k|        match self {
   75|  2.65k|            Root(node)
   76|  1.50k|            | Child(_, node)
   77|  6.22k|            | AnyChild(node)
   78|  1.20k|            | Descendant(_, node)
   79|  2.33k|            | AnyDescendant(node)
   80|  1.35k|            | ArrayIndexChild(_, node)
   81|  18.2k|            | ArrayIndexDescendant(_, node) => node.as_deref(),
   82|  18.2k|        }
   83|  18.2k|    }
_RNvXs3_NtCsiD8oTJhN8wu_8rsonpath5queryNtB5_17JsonPathQueryNodeNtB5_21JsonPathQueryNodeType7is_root:
  219|  2.65k|    fn is_root(&self) -> bool {
  220|  2.65k|        matches!(self, Root(_))
  221|  2.65k|    }
_RNCNvXNvNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtBc_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_7RawNodeB11_9arbitrarys0_0Be_:
  309|     43|        #[derive(arbitrary::Arbitrary)]
_RNCNvXNvNvXs5_NtCsiD8oTJhN8wu_8rsonpath5queryNtBc_13JsonPathQueryNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_7RawNodeB11_9arbitrarys_0Be_:
  309|  15.5k|        #[derive(arbitrary::Arbitrary)]
_RNvMs0_NtCsiD8oTJhN8wu_8rsonpath5queryNtB5_13JsonPathQuery4root:
  128|  5.30k|    pub fn root(&self) -> &JsonPathQueryNode {
  129|  5.30k|        self.root.as_ref()
  130|  5.30k|    }

_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton27has_transition_to_accepting:
  331|  32.2k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  332|  32.2k|        self[state].attributes.has_transition_to_accepting()
  333|  32.2k|    }
_RNvMs7_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_10StateTable11transitions:
  397|   145k|    pub fn transitions(&self) -> &[Transition<'q>] {
  398|   145k|        &self.transitions
  399|   145k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton10is_unitary:
  371|  25.6k|    pub fn is_unitary(&self, state: State) -> bool {
  372|  25.6k|        self[state].attributes.is_unitary()
  373|  25.6k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  148|  2.65k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  149|  2.65k|        let nfa = NondeterministicAutomaton::new(query)?;
  150|      0|        debug!("NFA: {}", nfa);
  151|  2.65k|        Automaton::minimize(nfa)
  152|  2.65k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  289|  10.1k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  290|  10.1k|        self.has_array_index_transition_to_accepting(state, &NonNegativeArrayIndex::ZERO)
  291|  10.1k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  310|  29.6k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &NonNegativeArrayIndex) -> bool {
  311|  29.6k|        self[state].transitions().iter().any(|t| match t {
  312|       |            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  313|       |            _ => false,
  314|  29.6k|        })
  315|  29.6k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton12is_rejecting:
  349|  38.9k|    pub fn is_rejecting(&self, state: State) -> bool {
  350|  38.9k|        self[state].attributes.is_rejecting()
  351|  38.9k|    }
_RNCNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  311|  25.6k|        self[state].transitions().iter().any(|t| match t {
  312|  20.9k|            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  313|  4.68k|            _ => false,
  314|  25.6k|        })
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB2_15TransitionLabel15get_member_name:
   34|    982|    pub fn get_member_name(&self) -> Option<&'q JsonString> {
   35|    982|        match self {
   36|    537|            TransitionLabel::ObjectMember(name) => Some(name),
   37|    445|            TransitionLabel::ArrayIndex(_) => None,
   38|       |        }
   39|    982|    }
_RNvXs5_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9AutomatonINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  134|   585k|    fn index(&self, index: State) -> &Self::Output {
  135|   585k|        &self.states[index.0 as usize]
  136|   585k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton13initial_state:
  202|  3.32k|    pub fn initial_state(&self) -> State {
  203|  3.32k|        State(1)
  204|  3.32k|    }
_RNCNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB7_9Automaton42has_any_array_item_transition_to_accepting0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  260|  21.4k|        self[state].transitions().iter().any(|t| match t {
  261|  10.4k|            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  262|  11.0k|            _ => false,
  263|  21.4k|        })
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton12is_accepting:
  220|   181k|    pub fn is_accepting(&self, state: State) -> bool {
  221|   181k|        self[state].attributes.is_accepting()
  222|   181k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton14is_empty_query:
  176|  2.54k|    pub fn is_empty_query(&self) -> bool {
  177|  2.54k|        self.states.len() == 2
  178|  2.54k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton42has_any_array_item_transition_to_accepting:
  259|  28.6k|    pub fn has_any_array_item_transition_to_accepting(&self, state: State) -> bool {
  260|  28.6k|        self[state].transitions().iter().any(|t| match t {
  261|       |            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  262|       |            _ => false,
  263|  28.6k|        })
  264|  28.6k|    }
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton29has_any_array_item_transition:
  238|  28.6k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  239|  28.6k|        self[state]
  240|  28.6k|            .transitions()
  241|  28.6k|            .iter()
  242|  28.6k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
  243|  28.6k|    }
_RNvMs7_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_10StateTable14fallback_state:
  387|   161k|    pub fn fallback_state(&self) -> State {
  388|   161k|        self.fallback_state
  389|   161k|    }
_RNCNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB7_9Automaton29has_any_array_item_transition0Csfl1mzxY9WoK_19fuzz_arbitrary_json:
  242|  20.0k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
_RNvMs6_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_9Automaton8minimize:
  375|  2.65k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  376|  2.65k|        minimizer::minimize(nfa)
  377|  2.65k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB2_15TransitionLabel17new_object_member:
   54|  2.70k|    pub fn new_object_member(member_name: &'q JsonString) -> Self {
   55|  2.70k|        TransitionLabel::ObjectMember(member_name)
   56|  2.70k|    }
_RNvXs1_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_15TransitionLabelINtNtCs3NN8x5qF7TE_4core7convert4FromNtNtB7_23nonnegative_array_index21NonNegativeArrayIndexE4fromB9_:
   87|  4.28k|    fn from(index: T) -> Self {
   88|  4.28k|        TransitionLabel::new_array_index(*index.borrow())
   89|  4.28k|    }
_RNvXsh_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_15TransitionLabelNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqB9_:
   22|  19.1k|#[derive(Debug, Copy, PartialEq, Clone, Eq)]
_RNvXs_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB4_15TransitionLabelINtNtCs3NN8x5qF7TE_4core7convert4FromRNtNtB6_11json_string10JsonStringE4from:
   69|  2.70k|    fn from(member_name: &'q JsonString) -> Self {
   70|  2.70k|        TransitionLabel::new_object_member(member_name)
   71|  2.70k|    }
_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB5_10StateTableNtNtCs3NN8x5qF7TE_4core7default7Default7defaultB9_:
  108|  45.4k|    fn default() -> Self {
  109|  45.4k|        Self {
  110|  45.4k|            attributes: StateAttributes::default(),
  111|  45.4k|            transitions: Default::default(),
  112|  45.4k|            fallback_state: State(0),
  113|  45.4k|        }
  114|  45.4k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath5query9automatonNtB2_15TransitionLabel15new_array_index:
   61|  4.28k|    pub fn new_array_index(index: NonNegativeArrayIndex) -> Self {
   62|  4.28k|        TransitionLabel::ArrayIndex(index)
   63|  4.28k|    }

_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer3run:
   78|  2.65k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   79|  2.65k|        // Rejecting state has no outgoing transitions except for a self-loop.
   80|  2.65k|        self.dfa_states.push(StateTable {
   81|  2.65k|            transitions: smallvec![],
   82|  2.65k|            fallback_state: Self::rejecting_state(),
   83|  2.65k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   84|  2.65k|        });
   85|  2.65k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   86|  2.65k|
   87|  2.65k|        // Initial superstate is {0}.
   88|  2.65k|        let initial_superstate = [0].into();
   89|  2.65k|        self.activate_if_new(initial_superstate)?;
   90|       |
   91|  41.9k|        while let Some(superstate) = self.active_superstates.pop() {
   92|  39.4k|            self.process_superstate(superstate)?;
   93|       |        }
   94|       |
   95|  2.54k|        Ok(Automaton {
   96|  2.54k|            states: self.dfa_states,
   97|  2.54k|        })
   98|  2.65k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  204|  39.4k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  205|  9.06k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  206|  6.01k|                return Some(single_state);
  207|  3.05k|            }
  208|  30.3k|        }
  209|       |
  210|  33.4k|        None
  211|  39.4k|    }
_RNCNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Bc_:
  225|   127k|                    Some(id.next().map(|x| x.0))
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  193|  39.4k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  194|  6.01k|            self.checkpoints.insert(superstate, nfa_state);
  195|  6.01k|            Some(nfa_state)
  196|       |        } else {
  197|  33.4k|            self.checkpoints.get(&superstate).copied()
  198|       |        }
  199|  39.4k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer18process_superstate:
  128|  39.4k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  129|  39.4k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  130|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  131|       |
  132|  39.4k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  133|      0|        debug!("Raw transitions: {:?}", transitions);
  134|       |
  135|  39.4k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  136|      0|        debug!("Normalized transitions: {:?}", transitions);
  137|       |
  138|       |        // Translate the transitions to the data model expected by TransitionTable.
  139|  39.3k|        let translated_transitions: SmallVec<_> = transitions
  140|  39.3k|            .labelled
  141|  39.3k|            .into_iter()
  142|  39.3k|            .map(|(label, state)| (label, self.superstates[&state]))
  143|  39.3k|            .collect();
  144|      0|        debug!("Translated transitions: {translated_transitions:?}");
  145|       |
  146|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  147|       |        // Otherwise, we set the fallback to the rejecting state.
  148|  39.3k|        let id = self.superstates[&current_superstate];
  149|  39.3k|        let fallback_state = self.superstates[&transitions.wildcard];
  150|  39.3k|        let attributes = self.build_attributes(id, &translated_transitions, fallback_state);
  151|  39.3k|        let table = &mut self.dfa_states[id.0 as usize];
  152|  39.3k|        table.transitions = translated_transitions;
  153|  39.3k|        table.fallback_state = fallback_state;
  154|  39.3k|        table.attributes = attributes;
  155|  39.3k|
  156|  39.3k|        Ok(())
  157|  39.4k|    }
_RNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer16build_attributes0Ba_:
  181|  36.0k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  294|  39.4k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  295|  81.0k|        for (_, state) in &mut transitions.labelled {
  296|  41.7k|            normalize_one(self, state, current_checkpoint)?;
  297|       |        }
  298|       |
  299|  39.3k|        Ok(())
  300|  39.4k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer16build_attributes:
  161|  39.3k|    fn build_attributes(
  162|  39.3k|        &self,
  163|  39.3k|        id: DfaStateId,
  164|  39.3k|        transitions: &[(TransitionLabel, DfaStateId)],
  165|  39.3k|        fallback: DfaStateId,
  166|  39.3k|    ) -> StateAttributes {
  167|  39.3k|        let mut attrs = StateAttributesBuilder::new();
  168|  39.3k|
  169|  39.3k|        if self.accepting.contains(id.0) {
  170|      0|            debug!("{id} is accepting");
  171|  8.01k|            attrs = attrs.accepting();
  172|  31.3k|        }
  173|  39.3k|        if id == Self::rejecting_state() {
  174|      0|            debug!("{id} is rejecting");
  175|      0|            attrs = attrs.rejecting();
  176|  39.3k|        }
  177|  39.3k|        if transitions.len() == 1 && fallback == Self::rejecting_state() {
  178|      0|            debug!("{id} is unitary");
  179|  1.11k|            attrs = attrs.unitary();
  180|  38.2k|        }
  181|  39.3k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
  182|      0|            debug!("{id} has transitions to accepting");
  183|  9.00k|            attrs = attrs.transitions_to_accepting();
  184|  30.3k|        }
  185|       |
  186|  39.3k|        attrs.into()
  187|  39.3k|    }
_RNvNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizer8minimize:
   17|  2.65k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   18|  2.65k|    let minimizer = Minimizer {
   19|  2.65k|        nfa,
   20|  2.65k|        superstates: VecMap::new(),
   21|  2.65k|        checkpoints: VecMap::new(),
   22|  2.65k|        active_superstates: smallvec![],
   23|  2.65k|        dfa_states: vec![],
   24|  2.65k|        accepting: SmallSet256::default(),
   25|  2.65k|    };
   26|  2.65k|
   27|  2.65k|    minimizer.run()
   28|  2.65k|}
_RNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer15activate_if_new0Ba_:
  113|    111|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15rejecting_state:
  100|  72.2k|    fn rejecting_state() -> DfaStateId {
  101|  72.2k|        DfaStateId(0)
  102|  72.2k|    }
_RNvNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  280|  81.1k|            if let Some(checkpoint) = current_checkpoint {
  281|  76.9k|                state.insert(checkpoint.0);
  282|  76.9k|            }
  283|       |
  284|  81.1k|            this.normalize(state);
  285|  81.1k|            this.activate_if_new(*state)?;
  286|       |
  287|  81.0k|            if let Some(checkpoint) = current_checkpoint {
  288|  76.8k|                this.checkpoints.insert(*state, checkpoint);
  289|  76.8k|            }
  290|       |
  291|  81.0k|            Ok(())
  292|  81.1k|        }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer9normalize:
  305|  81.1k|    fn normalize(&self, superstate: &mut SmallSet256) {
  306|  81.1k|        let furthest_checkpoint = superstate
  307|  81.1k|            .iter()
  308|  81.1k|            .map(NfaStateId)
  309|  81.1k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  310|  81.1k|            .max();
  311|       |
  312|  81.1k|        if let Some(cutoff) = furthest_checkpoint {
  313|  77.1k|            superstate.remove_all_before(cutoff.0);
  314|  77.1k|        }
  315|  81.1k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  215|  39.4k|    fn process_nfa_transitions(
  216|  39.4k|        &self,
  217|  39.4k|        current_superstate: SmallSet256,
  218|  39.4k|        current_checkpoint: Option<NfaStateId>,
  219|  39.4k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  220|  39.4k|        let mut wildcard_targets = current_superstate
  221|  39.4k|            .iter()
  222|  39.4k|            .map(NfaStateId)
  223|  39.4k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|       |                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|       |                _ => None,
  228|  39.4k|            })
  229|  39.4k|            .collect::<Result<SmallSet256, _>>()?;
  230|  39.4k|        if let Some(checkpoint) = current_checkpoint {
  231|  36.4k|            wildcard_targets.insert(checkpoint.0);
  232|  36.4k|        }
  233|       |
  234|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  235|       |
  236|  39.4k|        let mut transitions = SuperstateTransitionTable {
  237|  39.4k|            labelled: VecMap::new(),
  238|  39.4k|            wildcard: wildcard_targets,
  239|  39.4k|        };
  240|       |
  241|   177k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  242|   177k|            match self.nfa[nfa_state] {
  243|       |                // Direct states simply have a single transition to the next state in the NFA.
  244|       |                // Recursive transitions also have a self-loop, but that is handled by the
  245|       |                // checkpoints mechanism - here we only handle the forward transition.
  246|  10.5k|                NfaState::Direct(nfa::Transition::Labelled(label))
  247|  32.1k|                | NfaState::Recursive(nfa::Transition::Labelled(label)) => {
  248|      0|                    debug!("Considering transition {nfa_state} --{}-> {}", label, nfa_state.next()?,);
  249|       |                    // Add the target NFA state to the target superstate, or create a singleton
  250|       |                    // set if this is the first transition via this label encountered in the loop.
  251|  42.7k|                    if let Some(target) = transitions.labelled.get_mut(&label) {
  252|    988|                        target.insert(nfa_state.next()?.0);
  253|       |                    } else {
  254|  41.7k|                        let mut new_set = transitions.wildcard;
  255|  41.7k|                        new_set.insert(nfa_state.next()?.0);
  256|  41.7k|                        transitions.labelled.insert(label, new_set);
  257|       |                    }
  258|       |                }
  259|       |                NfaState::Direct(nfa::Transition::Wildcard)
  260|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  261|   135k|                | NfaState::Accepting => (),
  262|       |            }
  263|       |        }
  264|       |
  265|  39.4k|        Ok(transitions)
  266|  39.4k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  106|  83.8k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  107|  83.8k|        if !self.superstates.contains_key(&superstate) {
  108|  45.5k|            let identifier = self
  109|  45.5k|                .superstates
  110|  45.5k|                .len()
  111|  45.5k|                .try_into()
  112|  45.5k|                .map(DfaStateId)
  113|  45.5k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  114|  45.4k|            self.superstates.insert(superstate, identifier);
  115|  45.4k|            self.active_superstates.push(superstate);
  116|  45.4k|            self.dfa_states.push(StateTable::default());
  117|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  118|  45.4k|            if superstate.contains(self.nfa.accepting_state().0) {
  119|  10.0k|                self.accepting.insert(identifier.0);
  120|  35.4k|            }
  121|  38.2k|        }
  122|       |
  123|  83.6k|        Ok(())
  124|  83.8k|    }
_RNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer9normalize0Ba_:
  309|   384k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer18process_superstate0Ba_:
  142|  41.6k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNCNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0Ba_:
  223|   177k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|   127k|                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|  50.7k|                _ => None,
  228|   177k|            })

_RNvXst_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB5_10NfaStateIdNtNtCs3NN8x5qF7TE_4core3cmp3Ord3cmpBb_:
   40|  15.0k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNCNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB6_25NondeterministicAutomaton3new0Bc_:
   69|  18.2k|            .filter_map(|node| match node {
   70|  2.65k|                JsonPathQueryNode::Root(_) => None,
   71|  1.20k|                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|  1.50k|                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|  6.22k|                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|  2.33k|                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|  1.35k|                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|  2.93k|                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|  2.93k|                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  18.2k|            })
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB2_10NfaStateId4next:
   49|   169k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   50|   169k|        self.0
   51|   169k|            .checked_add(1)
   52|   169k|            .ok_or(CompilerError::QueryTooComplex(None))
   53|   169k|            .map(Self)
   54|   169k|    }
_RNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   63|  2.65k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   64|  2.65k|        debug_assert!(query.root().is_root());
   65|       |
   66|  2.65k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   67|  2.65k|            .root()
   68|  2.65k|            .iter()
   69|  2.65k|            .filter_map(|node| match node {
   70|       |                JsonPathQueryNode::Root(_) => None,
   71|       |                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|       |                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|       |                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|       |                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|       |                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|       |                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|       |                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  2.65k|            })
   80|  2.65k|            .collect();
   81|  2.65k|        let mut states = states_result?;
   82|       |
   83|  2.65k|        states.push(Accepting);
   84|  2.65k|
   85|  2.65k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
   86|  2.65k|        if let Err(err) = accepting_state {
   87|      3|            Err(CompilerError::QueryTooComplex(Some(err)))
   88|       |        } else {
   89|  2.65k|            Ok(NondeterministicAutomaton { ordered_states: states })
   90|       |        }
   91|  2.65k|    }
_RNvMs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
   93|  45.4k|    pub(super) fn accepting_state(&self) -> NfaStateId {
   94|  45.4k|        // CAST: safe because of the check in `new`.
   95|  45.4k|        NfaStateId((self.ordered_states.len() - 1) as u8)
   96|  45.4k|    }
_RNvXs0_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  102|   749k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  103|   749k|        &self.ordered_states[index.0 as usize]
  104|   749k|    }

_RNvXsh_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   43|  94.8k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs6_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBc_:
  189|  2.65k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  2.65k|        let mut result = Self::default();
  191|  5.30k|        for elem in iter {
  192|  2.65k|            result.insert(elem);
  193|  2.65k|        }
  194|  2.65k|        result
  195|  2.65k|    }
_RNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iter:
   73|   160k|    fn iter(&self) -> SmallSet256Iter {
   74|   160k|        SmallSet256Iter {
   75|   160k|            half_1: self.half_1.iter(),
   76|   160k|            half_2: self.half_2.iter(),
   77|   160k|        }
   78|   160k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE9singleton:
  126|  39.0k|    fn singleton(&self) -> Option<u8> {
  127|  39.0k|        let elem = self.bitmask.trailing_zeros();
  128|  39.0k|        let elem_mask = 1_u128.wrapping_shl(elem);
  129|  39.0k|        let remainder = self.bitmask ^ elem_mask;
  130|  39.0k|
  131|  39.0k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  132|  39.0k|        (remainder == 0).then_some(elem as u8)
  133|  39.0k|    }
_RNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   95|  77.1k|    fn remove_all_before(&mut self, cutoff: u8) {
   96|  77.1k|        if cutoff < 128 {
   97|  73.1k|            self.half_1.remove_all_before(cutoff)
   98|  3.99k|        } else {
   99|  3.99k|            self.half_1.clear();
  100|  3.99k|            self.half_2.remove_all_before(cutoff - 128);
  101|  3.99k|        }
  102|  77.1k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE4iter:
  122|   320k|    fn iter(&self) -> SmallSet128Iter {
  123|   320k|        SmallSet128Iter { bitmask: self.bitmask }
  124|   320k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE6insert:
  114|   295k|    fn insert(&mut self, elem: u8) {
  115|   295k|        self.bitmask |= 1 << elem;
  116|   295k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE17remove_all_before:
  139|  77.1k|    fn remove_all_before(&mut self, cutoff: u8) {
  140|  77.1k|        let mask: u128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF << cutoff;
  141|  77.1k|        self.bitmask &= mask;
  142|  77.1k|    }
_RNvXsa_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   37|  47.4k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNCNCNvXs8_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next00Bf_:
  214|  37.5k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXsl_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
   43|  30.3M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNCNvXs8_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next0Bd_:
  214|   197k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_11SmallSet256INtNtCs3NN8x5qF7TE_4core7convert4FromAhj1_E4fromBb_:
  155|  2.65k|    fn from(arr: [u8; N]) -> Self {
  156|  2.65k|        Self::from_iter(arr)
  157|  2.65k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8contains:
  118|   160k|    fn contains(&self, elem: u8) -> bool {
  119|   160k|        (self.bitmask & (1 << elem)) != 0
  120|   160k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE5clear:
  135|  3.99k|    fn clear(&mut self) {
  136|  3.99k|        self.bitmask = 0;
  137|  3.99k|    }
_RNvXs9_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next:
  225|  1.09M|    fn next(&mut self) -> Option<Self::Item> {
  226|  1.09M|        let next_elem = self.bitmask.trailing_zeros();
  227|  1.09M|
  228|  1.09M|        if next_elem == 128 {
  229|   357k|            return None;
  230|   740k|        }
  231|   740k|
  232|   740k|        let elem_mask = 1 << next_elem;
  233|   740k|        self.bitmask ^= elem_mask;
  234|   740k|
  235|   740k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  236|   740k|        Some(next_elem as u8)
  237|  1.09M|    }
_RINvXs6_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1o_8adapters12GenericShuntINtNtB2w_10filter_map9FilterMapINtNtB2w_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4D_9Minimizer23process_nfa_transitions0EINtNtB1q_6result6ResultNtNtB1q_7convert10InfallibleNtNtBa_5error13CompilerErrorEEEBc_:
  189|  39.4k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  39.4k|        let mut result = Self::default();
  191|   166k|        for elem in iter {
  192|   127k|            result.insert(elem);
  193|   127k|        }
  194|  39.4k|        result
  195|  39.4k|    }
_RNvXse_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
   37|  29.4M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   65|   160k|    fn contains(&self, elem: u8) -> bool {
   66|   160k|        if elem < 128 {
   67|   118k|            self.half_1.contains(elem)
   68|       |        } else {
   69|  41.8k|            self.half_2.contains(elem - 128)
   70|       |        }
   71|   160k|    }
_RNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   57|   295k|    fn insert(&mut self, elem: u8) {
   58|   295k|        if elem < 128 {
   59|   278k|            self.half_1.insert(elem)
   60|       |        } else {
   61|  17.1k|            self.half_2.insert(elem - 128)
   62|       |        }
   63|   295k|    }
_RNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   80|  39.4k|    fn singleton(&self) -> Option<u8> {
   81|  39.4k|        if self.half_1.is_empty() {
   82|  1.74k|            self.half_2.singleton().map(|x| x + 128)
   83|  37.7k|        } else if self.half_2.is_empty() {
   84|  37.2k|            self.half_1.singleton()
   85|       |        } else {
   86|    447|            None
   87|       |        }
   88|  39.4k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8is_empty:
  110|  77.1k|    fn is_empty(&self) -> bool {
  111|  77.1k|        self.bitmask == 0
  112|  77.1k|    }
_RNCNvXNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0Ba_:
   82|    650|            self.half_2.singleton().map(|x| x + 128)
_RNvXs8_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next:
  213|   900k|    fn next(&mut self) -> Option<Self::Item> {
  214|   900k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  215|   900k|    }

_RNvMs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  116|  32.2k|    pub fn has_transition_to_accepting(&self) -> bool {
  117|  32.2k|        self.is_set(StateAttribute::TransitionsToAccepting)
  118|  32.2k|    }
_RNvMs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_rejecting:
  108|  38.9k|    pub fn is_rejecting(&self) -> bool {
  109|  38.9k|        self.is_set(StateAttribute::Rejecting)
  110|  38.9k|    }
_RNvMs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_accepting:
  100|   181k|    pub fn is_accepting(&self) -> bool {
  101|   181k|        self.is_set(StateAttribute::Accepting)
  102|   181k|    }
_RNvMs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributes6is_set:
  131|   277k|    fn is_set(&self, attr: StateAttribute) -> bool {
  132|   277k|        (self.0 & attr as u8) != 0
  133|   277k|    }
_RNvMs1_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributes10is_unitary:
  125|  25.6k|    pub fn is_unitary(&self) -> bool {
  126|  25.6k|        self.is_set(StateAttribute::Unitary)
  127|  25.6k|    }
_RNvXsn_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_5StateNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  137|  46.7k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvXsj_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_15StateAttributesNtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   28|  45.4k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3new:
   32|  41.9k|    pub(crate) fn new() -> Self {
   33|  41.9k|        Self {
   34|  41.9k|            attrs: StateAttributes(0),
   35|  41.9k|        }
   36|  41.9k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder7unitary:
   46|  1.11k|    pub(crate) fn unitary(self) -> Self {
   47|  1.11k|        self.set(StateAttribute::Unitary)
   48|  1.11k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9rejecting:
   42|  2.65k|    pub(crate) fn rejecting(self) -> Self {
   43|  2.65k|        self.set(StateAttribute::Rejecting)
   44|  2.65k|    }
_RNvXs_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB4_15StateAttributesINtNtCs3NN8x5qF7TE_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   67|  41.9k|    fn from(value: StateAttributesBuilder) -> Self {
   68|  41.9k|        value.build()
   69|  41.9k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_accepting:
   50|  9.00k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   51|  9.00k|        self.set(StateAttribute::TransitionsToAccepting)
   52|  9.00k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9accepting:
   38|  8.01k|    pub(crate) fn accepting(self) -> Self {
   39|  8.01k|        self.set(StateAttribute::Accepting)
   40|  8.01k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3set:
   58|  20.7k|    fn set(self, attr: StateAttribute) -> Self {
   59|  20.7k|        Self {
   60|  20.7k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   61|  20.7k|        }
   62|  20.7k|    }
_RNvMNtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder5build:
   54|  41.9k|    pub(crate) fn build(self) -> StateAttributes {
   55|  41.9k|        self.attrs
   56|  41.9k|    }
_RNvXsn_NtNtNtCsiD8oTJhN8wu_8rsonpath5query9automaton5stateNtB5_5StateNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
  137|  66.9k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]

_RNvMs_NtNtCsiD8oTJhN8wu_8rsonpath5query11json_stringNtB4_10JsonString5bytes:
   57|  2.69k|    pub fn bytes(&self) -> &[u8] {
   58|  2.69k|        &self.string
   59|  2.69k|    }
_RNvMs_NtNtCsiD8oTJhN8wu_8rsonpath5query11json_stringNtB4_10JsonString17bytes_with_quotes:
   65|  36.0k|    pub fn bytes_with_quotes(&self) -> &[u8] {
   66|  36.0k|        &self.string_with_quotes
   67|  36.0k|    }
_RNvMs_NtNtCsiD8oTJhN8wu_8rsonpath5query11json_stringNtB4_10JsonString3newB8_:
   39|  2.70k|    pub fn new(string: &str) -> Self {
   40|  2.70k|        let bytes = string.as_bytes();
   41|  2.70k|        let without_quotes = Vec::from(bytes);
   42|  2.70k|
   43|  2.70k|        let mut with_quotes = Vec::with_capacity(bytes.len() + 2);
   44|  2.70k|        with_quotes.push(b'"');
   45|  2.70k|        with_quotes.extend(bytes);
   46|  2.70k|        with_quotes.push(b'"');
   47|  2.70k|
   48|  2.70k|        Self {
   49|  2.70k|            string: without_quotes,
   50|  2.70k|            string_with_quotes: with_quotes,
   51|  2.70k|        }
   52|  2.70k|    }
_RNvXs0_NtNtCsiD8oTJhN8wu_8rsonpath5query11json_stringNtB5_10JsonStringNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eq:
   81|  3.28k|    fn eq(&self, other: &Self) -> bool {
   82|  3.28k|        self.string == other.string
   83|  3.28k|    }
_RNvXs7_NtNtCsiD8oTJhN8wu_8rsonpath5query11json_stringNtB5_10JsonStringNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryB9_:
  128|  2.70k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  129|  2.70k|        let chars = u.arbitrary_iter()?;
  130|  2.70k|        let mut string = String::new();
  131|       |
  132|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  133|       |        // except for characters that must be escaped: quotation mark,
  134|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  135|  13.5k|        for c in chars {
  136|  10.8k|            let c = c?;
  137|  10.8k|            match c {
  138|  10.8k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  139|    857|                    string.push('\\');
  140|    857|                    string.push(c);
  141|    857|                }
  142|  9.96k|                _ => string.push(c),
  143|       |            }
  144|       |        }
  145|       |
  146|  2.70k|        Ok(Self::new(&string))
  147|  2.70k|    }

_RNvMs_NtNtCsiD8oTJhN8wu_8rsonpath5query23nonnegative_array_indexNtB4_21NonNegativeArrayIndex13try_incrementCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   53|  13.0k|    pub fn try_increment(&mut self) -> Result<(), ArrayIndexError> {
   54|  13.0k|        let new_index = self.0 + 1;
   55|  13.0k|        if new_index <= JSON_NUMBER_ULIMIT {
   56|  13.0k|            self.0 = new_index;
   57|  13.0k|            Ok(())
   58|       |        } else {
   59|      0|            Err(ArrayIndexError::ExceedsUpperLimitError(new_index.to_string()))
   60|       |        }
   61|  13.0k|    }
_RNvXs6_NtNtCsiD8oTJhN8wu_8rsonpath5query23nonnegative_array_indexNtB5_21NonNegativeArrayIndexNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   17|  31.3k|#[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
_RNvXs6_NtNtCsiD8oTJhN8wu_8rsonpath5query23nonnegative_array_indexNtB5_21NonNegativeArrayIndexNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqB9_:
   17|  6.11k|#[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
_RNvXs2_NtNtCsiD8oTJhN8wu_8rsonpath5query23nonnegative_array_indexNtB5_21NonNegativeArrayIndexNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryB9_:
   89|  4.28k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   90|  4.28k|        let val = u.int_in_range(0..=JSON_NUMBER_ULIMIT)?;
   91|       |
   92|  4.28k|        Ok(Self(val))
   93|  4.28k|    }

_RNvXs2_NtCsiD8oTJhN8wu_8rsonpath6resultINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  144|  20.4k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  20.4k|        self.push(data);
  146|  20.4k|        Ok(())
  147|  20.4k|    }
_RNvXsa_NtCsiD8oTJhN8wu_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  189|  20.0k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvMs_NtCsiD8oTJhN8wu_8rsonpath6resultNtB4_5Match20from_start_and_bytes:
   81|    877|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   82|    877|        Self { bytes, span_start }
   83|    877|    }

_RNvXNtNtCsiD8oTJhN8wu_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCsfl1mzxY9WoK_19fuzz_arbitrary_json:
    9|  6.22k|    fn record_block_start(&self, _new_block: B) {
   10|  6.22k|        // Intentionally left empty.
   11|  6.22k|    }

_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  237|      0|        debug!("Value terminator at {idx}, depth {depth}");
  238|  29.7k|        if let Some(node) = self.node.as_ref() {
  239|  3.64k|            if node.start_depth >= depth {
  240|  2.68k|                let mut node = self.node.take().expect("node is Some");
  241|      0|                debug!("Mark node as ended at {}", idx + 1);
  242|       |                append_final_block(
  243|  2.68k|                    &mut node.buf,
  244|  2.68k|                    self.current_block
  245|  2.68k|                        .as_ref()
  246|  2.68k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  247|  2.68k|                    self.idx,
  248|  2.68k|                    node.start_idx,
  249|  2.68k|                    idx + 1,
  250|  2.68k|                );
  251|  2.68k|                finalize_node(&mut node.buf, node.ty);
  252|       |
  253|      0|                debug!("Committing and outputting node");
  254|  2.68k|                self.sink
  255|  2.68k|                    .add_match(Match {
  256|  2.68k|                        span_start: node.start_idx,
  257|  2.68k|                        bytes: node.buf,
  258|  2.68k|                    })
  259|  2.68k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  260|    964|            }
  261|  26.1k|        }
  262|       |
  263|  29.7k|        Ok(())
  264|  29.7k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB4_5MatchEE14build_recorderCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   28|  2.54k|    pub(crate) fn build_recorder(sink: &'s mut S) -> Self {
   29|  2.54k|        Self {
   30|  2.54k|            internal: RefCell::new(InternalRecorder::new(sink)),
   31|  2.54k|        }
   32|  2.54k|    }
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  213|  2.54k|    fn new(sink: &'s mut S) -> Self {
  214|  2.54k|        Self {
  215|  2.54k|            idx: 0,
  216|  2.54k|            current_block: None,
  217|  2.54k|            node: None,
  218|  2.54k|            sink,
  219|  2.54k|        }
  220|  2.54k|    }
_RNvXs0_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   53|      0|        debug!("Recording match at {idx}");
   54|  24.4k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  24.4k|        Ok(())
   56|  24.4k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath6result5nodes13finalize_node:
  434|      0|    debug!("Finalizing node");
  435|       |
  436|  20.0k|    if ty == MatchedNodeType::Atomic {
  437|       |        // Atomic nodes are finished when the next structural character is matched.
  438|       |        // The buffer includes that character and all preceding whitespace.
  439|       |        // We need to remove it before saving the result.
  440|  8.30k|        if buf.len() <= 1 {
  441|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  442|      0|            buf.truncate(0)
  443|       |        } else {
  444|  8.30k|            let mut i = buf.len() - 2;
  445|  8.30k|            while is_json_whitespace(buf[i]) {
  446|      0|                i -= 1;
  447|      0|            }
  448|       |
  449|  8.30k|            buf.truncate(i + 1);
  450|       |        }
  451|  11.7k|    }
  452|  20.0k|}
_RNvMs3_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  347|  21.3k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  348|  21.3k|        let node = PartialNode {
  349|  21.3k|            id: self.match_count,
  350|  21.3k|            start_idx: idx,
  351|  21.3k|            start_depth: depth,
  352|  21.3k|            buf: vec![],
  353|  21.3k|            ty,
  354|  21.3k|        };
  355|       |
  356|      0|        debug!("New node {node:?}");
  357|  21.3k|        self.match_count += 1;
  358|  21.3k|        self.stack.push(node);
  359|  21.3k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  156|  23.1k|    fn record_block(&mut self, block: B) {
  157|  23.1k|        match self {
  158|  18.2k|            Self::Simple(r) => r.record_block(block),
  159|  4.88k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  23.1k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath6result5nodes18append_final_block:
  420|  20.0k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  421|  20.0k|    debug_assert!(read_end >= src_start);
  422|  20.0k|    let in_block_start = if read_start > src_start {
  423|  10.0k|        read_start - src_start
  424|       |    } else {
  425|  10.0k|        0
  426|       |    };
  427|  20.0k|    let in_block_end = read_end - src_start;
  428|  20.0k|
  429|  20.0k|    dest.extend(&src[in_block_start..in_block_end]);
  430|  20.0k|}
_RNvMs3_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  363|      0|        debug!("Value terminator at {idx}, depth {depth}");
  364|  39.3k|        while let Some(node) = self.stack.last() {
  365|  37.7k|            if node.start_depth >= depth {
  366|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  367|  17.3k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  368|  17.3k|                append_final_block(
  369|  17.3k|                    &mut node.buf,
  370|  17.3k|                    self.current_block
  371|  17.3k|                        .as_ref()
  372|  17.3k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  373|  17.3k|                    self.idx,
  374|  17.3k|                    node.start_idx,
  375|  17.3k|                    idx + 1,
  376|  17.3k|                );
  377|  17.3k|                finalize_node(&mut node.buf, node.ty);
  378|       |
  379|      0|                debug!("Committing node: {node:?}");
  380|  17.3k|                self.output_queue.insert(
  381|  17.3k|                    node.id,
  382|  17.3k|                    Match {
  383|  17.3k|                        span_start: node.start_idx,
  384|  17.3k|                        bytes: node.buf,
  385|  17.3k|                    },
  386|  17.3k|                );
  387|       |            } else {
  388|  20.3k|                break;
  389|       |            }
  390|       |        }
  391|       |
  392|  21.9k|        if self.stack.is_empty() {
  393|      0|            debug!("Outputting batch of nodes.");
  394|  1.54k|            self.output_queue
  395|  1.54k|                .output_to(self.sink)
  396|  1.54k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  397|  20.3k|        }
  398|       |
  399|  21.9k|        Ok(())
  400|  21.9k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  165|  24.4k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  24.4k|        match self {
  167|  3.39k|            Self::Simple(simple) => {
  168|  3.39k|                if !simple.try_record_match(idx, depth, ty) {
  169|    355|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    355|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    355|                    let mut stack = simple.transform_to_stack();
  174|    355|                    stack.record_match(idx, depth, ty);
  175|    355|                    *self = Self::Stack(stack);
  176|  3.04k|                }
  177|       |            }
  178|  21.0k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  24.4k|    }
_RNvNtNtCsiD8oTJhN8wu_8rsonpath6result5nodes12append_block:
  404|   136k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  405|   136k|    if read_start >= src_start + src.len() {
  406|    136|        return;
  407|   136k|    }
  408|       |
  409|   136k|    let to_extend = if read_start > src_start {
  410|  13.7k|        let in_block_start = read_start - src_start;
  411|  13.7k|        &src[in_block_start..]
  412|       |    } else {
  413|   122k|        src
  414|       |    };
  415|       |
  416|   136k|    dest.extend(to_extend);
  417|   136k|}
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  283|    355|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  284|    355|        match self.node {
  285|    355|            Some(node) => StackRecorder {
  286|    355|                idx: self.idx,
  287|    355|                match_count: 1,
  288|    355|                current_block: self.current_block,
  289|    355|                stack: vec![PartialNode {
  290|    355|                    id: 0,
  291|    355|                    start_idx: node.start_idx,
  292|    355|                    start_depth: node.start_depth,
  293|    355|                    buf: node.buf,
  294|    355|                    ty: node.ty,
  295|    355|                }],
  296|    355|                output_queue: OutputQueue::new(),
  297|    355|                sink: self.sink,
  298|    355|            },
  299|      0|            None => StackRecorder {
  300|      0|                idx: self.idx,
  301|      0|                match_count: 0,
  302|      0|                current_block: self.current_block,
  303|      0|                stack: vec![],
  304|      0|                output_queue: OutputQueue::new(),
  305|      0|                sink: self.sink,
  306|      0|            },
  307|       |        }
  308|    355|    }
_RNvXs_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   41|  23.1k|    fn record_block_start(&self, new_block: B) {
   42|  23.1k|        self.internal.borrow_mut().record_block(new_block)
   43|  23.1k|    }
_RNvMs3_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  333|  4.88k|    fn record_block(&mut self, block: B) {
  334|  4.88k|        if let Some(finished) = self.current_block.as_ref() {
  335|   140k|            for node in &mut self.stack {
  336|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  337|   135k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  338|       |            }
  339|       |
  340|  4.88k|            self.idx += finished.len();
  341|      0|        }
  342|       |
  343|  4.88k|        self.current_block = Some(block);
  344|      0|        debug!("New block, idx = {}", self.idx);
  345|  4.88k|    }
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  222|  18.2k|    fn record_block(&mut self, block: B) {
  223|  18.2k|        if let Some(finished) = self.current_block.as_ref() {
  224|  16.5k|            if let Some(node) = self.node.as_mut() {
  225|      0|                debug!("Continuing node, idx is {}", self.idx);
  226|  1.19k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  227|  15.3k|            }
  228|       |
  229|  16.5k|            self.idx += finished.len();
  230|  1.66k|        }
  231|       |
  232|  18.2k|        self.current_block = Some(block);
  233|      0|        debug!("New block, idx = {}", self.idx);
  234|  18.2k|    }
_RNvMs2_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  266|  3.39k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  267|  3.39k|        if self.node.is_some() {
  268|      0|            debug!("nested match detected, switching to stack");
  269|    355|            return false;
  270|  3.04k|        }
  271|  3.04k|
  272|  3.04k|        let node = SimplePartialNode {
  273|  3.04k|            start_idx: idx,
  274|  3.04k|            start_depth: depth,
  275|  3.04k|            buf: vec![],
  276|  3.04k|            ty,
  277|  3.04k|        };
  278|  3.04k|        self.node = Some(node);
  279|  3.04k|
  280|  3.04k|        true
  281|  3.39k|    }
_RNvXs0_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   59|  51.7k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  51.7k|        self.internal
   61|  51.7k|            .borrow_mut()
   62|  51.7k|            .record_value_terminator(idx, depth)
   63|  51.7k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  51.7k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  151|  2.54k|    fn new(sink: &'s mut S) -> Self {
  152|  2.54k|        Self::Simple(SimpleRecorder::new(sink))
  153|  2.54k|    }
_RNvMs1_NtNtCsiD8oTJhN8wu_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsfl1mzxY9WoK_19fuzz_arbitrary_json:
  185|  51.7k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  51.7k|        match self {
  187|  29.7k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  21.9k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  51.7k|    }

_RINvMNtNtCsiD8oTJhN8wu_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCsc6jWpmc7Dho_5alloc3vec3VecB18_EECsfl1mzxY9WoK_19fuzz_arbitrary_json:
   52|  1.54k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.54k|    where
   54|  1.54k|        S: Sink<D>,
   55|  1.54k|    {
   56|  1.54k|        self.offset += self.nodes.len();
   57|       |
   58|  16.9k|        for node in self.nodes.drain(..) {
   59|  16.9k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.54k|        Ok(())
   63|  1.54k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   29|  17.3k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  17.3k|        let actual_idx = id - self.offset;
   31|       |
   32|  38.6k|        while self.nodes.len() <= actual_idx {
   33|  21.2k|            self.nodes.push(None);
   34|  21.2k|        }
   35|       |
   36|  17.3k|        self.nodes[actual_idx] = Some(node);
   37|  17.3k|    }
_RNvMNtNtCsiD8oTJhN8wu_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCsfl1mzxY9WoK_19fuzz_arbitrary_json:
   18|    355|    pub(super) fn new() -> Self {
   19|    355|        Self {
   20|    355|            offset: 0,
   21|    355|            nodes: vec![],
   22|    355|        }
   23|    355|    }

_RNCNvXNvNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtBb_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBU_9arbitrarys0_0Bb_:
   47|  1.10k|        #[derive(Arbitrary)]
_RNvXNvNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB9_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB4_8RawValueBS_9arbitrary:
   47|   537k|        #[derive(Arbitrary)]
_RNCNvXNvNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtBb_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBU_9arbitrarys_0Bb_:
   47|   179k|        #[derive(Arbitrary)]
_RNvXNvCsfl1mzxY9WoK_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hintB4_:
   15|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB9_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryNtNtCs7SR71ZnNPS_10serde_json5value5ValueINtNtCs3NN8x5qF7TE_4core7convert4FromNtB4_8RawValueE4from0B9_:
   66|  83.4k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNCNvXNvCsfl1mzxY9WoK_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCsk7csMpgu7wb_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsfl1mzxY9WoK_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hint0B6_:
   15|  2.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtBb_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBU_9arbitrary0Bb_:
   47|  1.10k|        #[derive(Arbitrary)]
_RNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB4_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary:
   46|  2.65k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   47|  2.65k|        #[derive(Arbitrary)]
   48|  2.65k|        enum RawValue {
   49|  2.65k|            Null,
   50|  2.65k|            Bool(bool),
   51|  2.65k|            Integer(i64),
   52|  2.65k|            Float(f64),
   53|  2.65k|            String(String),
   54|  2.65k|            Array(Vec<RawValue>),
   55|  2.65k|            Object(HashMap<String, RawValue>),
   56|  2.65k|        }
   57|  2.65k|
   58|  2.65k|        impl From<RawValue> for serde_json::Value {
   59|  2.65k|            fn from(value: RawValue) -> Self {
   60|  2.65k|                match value {
   61|  2.65k|                    RawValue::Null => serde_json::Value::Null,
   62|  2.65k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
   63|  2.65k|                    RawValue::Integer(n) => serde_json::Value::from(n),
   64|  2.65k|                    RawValue::Float(f) => serde_json::Value::from(f),
   65|  2.65k|                    RawValue::String(s) => serde_json::Value::String(s),
   66|  2.65k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
   67|  2.65k|                    RawValue::Object(obj) => {
   68|  2.65k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
   69|  2.65k|                    }
   70|  2.65k|                }
   71|  2.65k|            }
   72|  2.65k|        }
   73|  2.65k|
   74|  2.65k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
   75|  2.65k|    }
_RNvXNvCsfl1mzxY9WoK_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCsk7csMpgu7wb_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  7.96k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB9_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryNtNtCs7SR71ZnNPS_10serde_json5value5ValueINtNtCs3NN8x5qF7TE_4core7convert4FromNtB4_8RawValueE4froms_0B9_:
   68|  58.5k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNCNvNvNvNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtBc_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue7___getit0Bc_:
   47|      1|        #[derive(Arbitrary)]
_RNvXCsfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCs3NN8x5qF7TE_4core3fmt7Display3fmt:
   40|  2.65k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   41|  2.65k|        write!(f, "{}", self.0)
   42|  2.65k|    }
_RNvXNvXs_Csfl1mzxY9WoK_19fuzz_arbitrary_jsonNtB7_4JsonNtCsk7csMpgu7wb_9arbitrary9Arbitrary9arbitraryNtNtCs7SR71ZnNPS_10serde_json5value5ValueINtNtCs3NN8x5qF7TE_4core7convert4FromNtB2_8RawValueE4from:
   59|   144k|            fn from(value: RawValue) -> Self {
   60|   144k|                match value {
   61|  14.0k|                    RawValue::Null => serde_json::Value::Null,
   62|  18.3k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
   63|  6.51k|                    RawValue::Integer(n) => serde_json::Value::from(n),
   64|  7.75k|                    RawValue::Float(f) => serde_json::Value::from(f),
   65|  7.62k|                    RawValue::String(s) => serde_json::Value::String(s),
   66|  51.5k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
   67|  38.8k|                    RawValue::Object(obj) => {
   68|  38.8k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
   69|       |                    }
   70|       |                }
   71|   144k|            }

