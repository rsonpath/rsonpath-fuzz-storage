_RNvYNtCs9TfoC9TDKig_19fuzz_arbitrary_json4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.92k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.92k|        let _ = depth;
  279|  2.92k|        (0, None)
  280|  2.92k|    }
_RNvXs1p_Cs98o54wqeRSK_9arbitraryTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB1f_4JsonNtB6_9Arbitrary9arbitrary8RawValueEB1Z_9arbitraryB1f_:
  575|  77.3k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  77.3k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  77.3k|            }
_RNvYNtCs9TfoC9TDKig_19fuzz_arbitrary_json14SupportedQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.92k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.92k|        let _ = depth;
  279|  2.92k|        (0, None)
  280|  2.92k|    }
_RNvYNtCs9TfoC9TDKig_19fuzz_arbitrary_json4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  189|  2.92k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|  2.92k|        Self::arbitrary(&mut u)
  191|  2.92k|    }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax3num8JsonUIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintCs9TfoC9TDKig_19fuzz_arbitrary_json:
  277|  5.85k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.85k|        let _ = depth;
  279|  5.85k|        (0, None)
  280|  5.85k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB18_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1S_9arbitraryB18_:
  679|  31.5k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  31.5k|        u.arbitrary_iter()?.collect()
  681|  31.5k|    }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintCs9TfoC9TDKig_19fuzz_arbitrary_json:
  277|  5.85k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.85k|        let _ = depth;
  279|  5.85k|        (0, None)
  280|  5.85k|    }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9size_hintCs9TfoC9TDKig_19fuzz_arbitrary_json:
  320|  8.78k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  8.78k|                    let n = mem::size_of::<$ty>();
  322|  8.78k|                    (n, Some(n))
  323|  8.78k|                }
_RNvXsf_Cs98o54wqeRSK_9arbitraryINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map7HashMapNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB28_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB2S_9arbitraryB28_:
  760|  41.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  761|  41.0k|        u.arbitrary_iter()?.collect()
  762|  41.0k|    }
_RNvXs_Cs98o54wqeRSK_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   233k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   233k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   233k|    }
_RNvXsl_Cs98o54wqeRSK_9arbitraryNtNtCshJIxznpEM8j_5alloc6string6StringNtB5_9Arbitrary9arbitrary:
  874|  88.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  875|  88.0k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
  876|  88.0k|    }
_RNvXsL_Cs98o54wqeRSK_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  8.18k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  8.18k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  8.18k|                    u.fill_buffer(&mut buf)?;
  312|  8.18k|                    let mut x: $unsigned = 0;
  313|  65.4k|                    for i in 0..mem::size_of::<$ty>() {
  314|  65.4k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  65.4k|                    }
  316|  8.18k|                    Ok(x as $ty)
  317|  8.18k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   233k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   233k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   233k|                    u.fill_buffer(&mut buf)?;
  312|   233k|                    let mut x: $unsigned = 0;
  313|   233k|                    for i in 0..mem::size_of::<$ty>() {
  314|   233k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   233k|                    }
  316|   233k|                    Ok(x as $ty)
  317|   233k|                }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   176k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   176k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   176k|                    u.fill_buffer(&mut buf)?;
  312|   176k|                    let mut x: $unsigned = 0;
  313|   706k|                    for i in 0..mem::size_of::<$ty>() {
  314|   706k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   706k|                    }
  316|   176k|                    Ok(x as $ty)
  317|   176k|                }
_RNvXsV_Cs98o54wqeRSK_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  8.18k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  8.18k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  8.18k|                }
_RNvXs0_Cs98o54wqeRSK_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  12.5k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  12.5k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  12.5k|        if let Some(c) = char::from_u32(c) {
  376|  12.3k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    226|            c -= SURROGATES_START;
  380|    226|            Ok(char::from_u32(c)
  381|    226|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  12.5k|    }
_RNvXsR_Cs98o54wqeRSK_9arbitraryxNtB5_9Arbitrary9arbitrary:
  309|  5.94k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  5.94k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  5.94k|                    u.fill_buffer(&mut buf)?;
  312|  5.94k|                    let mut x: $unsigned = 0;
  313|  47.5k|                    for i in 0..mem::size_of::<$ty>() {
  314|  47.5k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  47.5k|                    }
  316|  5.94k|                    Ok(x as $ty)
  317|  5.94k|                }
_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary9arbitrary:
  857|  88.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  858|  88.0k|        let size = u.arbitrary_len::<u8>()?;
  859|  88.0k|        arbitrary_str(u, size)
  860|  88.0k|    }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9size_hintB5_:
  320|  88.0k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  88.0k|                    let n = mem::size_of::<$ty>();
  322|  88.0k|                    (n, Some(n))
  323|  88.0k|                }

_RNvNtCs98o54wqeRSK_9arbitrary9size_hint6or_allCs9TfoC9TDKig_19fuzz_arbitrary_json:
   57|  8.78k|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|  8.78k|    if let Some(head) = hints.first().copied() {
   59|  8.78k|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|  8.78k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB10_17SupportedSelectorNtB4_9Arbitrary9size_hint0EB10_:
   12|  5.85k|pub fn recursion_guard(
   13|  5.85k|    depth: usize,
   14|  5.85k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  5.85k|) -> (usize, Option<usize>) {
   16|  5.85k|    const MAX_DEPTH: usize = 20;
   17|  5.85k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  5.85k|        f(depth + 1)
   21|       |    }
   22|  5.85k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCs9TfoC9TDKig_19fuzz_arbitrary_json:
   26|  32.2k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  32.2k|    let lower = lhs.0 + rhs.0;
   28|  32.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  32.2k|    (lower, upper)
   30|  32.2k|}
_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   28|  29.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB10_16SupportedSegmentNtB4_9Arbitrary9size_hint0EB10_:
   12|  2.92k|pub fn recursion_guard(
   13|  2.92k|    depth: usize,
   14|  2.92k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.92k|) -> (usize, Option<usize>) {
   16|  2.92k|    const MAX_DEPTH: usize = 20;
   17|  2.92k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.92k|        f(depth + 1)
   21|       |    }
   22|  2.92k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCs9TfoC9TDKig_19fuzz_arbitrary_json:
   37|  26.3k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  26.3k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  26.3k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_json1__NtB10_8FuzzDataNtB4_9Arbitrary9size_hint0EB10_:
   12|  2.92k|pub fn recursion_guard(
   13|  2.92k|    depth: usize,
   14|  2.92k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.92k|) -> (usize, Option<usize>) {
   16|  2.92k|    const MAX_DEPTH: usize = 20;
   17|  2.92k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.92k|        f(depth + 1)
   21|       |    }
   22|  2.92k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint2orCs9TfoC9TDKig_19fuzz_arbitrary_json:
   44|  14.6k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  14.6k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  14.6k|    let upper = lhs
   47|  14.6k|        .1
   48|  14.6k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  14.6k|    (lower, upper)
   50|  14.6k|}

_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int7from_u8Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  821|  39.8k|                fn from_u8(b: u8) -> Self {
  822|  39.8k|                    b as Self
  823|  39.8k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB21_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB21_:
  606|  41.0k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  41.0k|        &'b mut self,
  608|  41.0k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  41.0k|        Ok(ArbitraryIter {
  610|  41.0k|            u: &mut *self,
  611|  41.0k|            _marker: PhantomData,
  612|  41.0k|        })
  613|  41.0k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCs9TfoC9TDKig_19fuzz_arbitrary_json:
  837|  5.70k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  5.70k|                    <$ty>::wrapping_sub(self, rhs)
  839|  5.70k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs9TfoC9TDKig_19fuzz_arbitrary_json:
  302|  5.70k|    fn int_in_range_impl<T>(
  303|  5.70k|        range: ops::RangeInclusive<T>,
  304|  5.70k|        mut bytes: impl Iterator<Item = u8>,
  305|  5.70k|    ) -> Result<(T, usize)>
  306|  5.70k|    where
  307|  5.70k|        T: Int,
  308|  5.70k|    {
  309|  5.70k|        let start = *range.start();
  310|  5.70k|        let end = *range.end();
  311|  5.70k|        assert!(
  312|  5.70k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  5.70k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  5.70k|        }
  321|  5.70k|
  322|  5.70k|        // From here on out we work with the unsigned representation. All of the
  323|  5.70k|        // operations performed below work out just as well whether or not `T`
  324|  5.70k|        // is a signed or unsigned integer.
  325|  5.70k|        let start = start.to_unsigned();
  326|  5.70k|        let end = end.to_unsigned();
  327|  5.70k|
  328|  5.70k|        let delta = end.wrapping_sub(start);
  329|  5.70k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  5.70k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  5.70k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  45.5k|        while (bytes_consumed < mem::size_of::<T>())
  339|  45.5k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  39.8k|            let byte = match bytes.next() {
  342|     10|                None => break,
  343|  39.8k|                Some(b) => b,
  344|  39.8k|            };
  345|  39.8k|            bytes_consumed += 1;
  346|  39.8k|
  347|  39.8k|            // Combine this byte into our arbitrary integer, but avoid
  348|  39.8k|            // overflowing the shift for `u8` and `i8`.
  349|  39.8k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  39.8k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  5.70k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  5.70k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  5.70k|        let result = start.wrapping_add(offset);
  365|  5.70k|
  366|  5.70k|        // And convert back to our maybe-signed representation.
  367|  5.70k|        let result = T::from_unsigned(result);
  368|  5.70k|        debug_assert!(*range.start() <= result);
  369|  5.70k|        debug_assert!(result <= *range.end());
  370|       |
  371|  5.70k|        Ok((result, bytes_consumed))
  372|  5.70k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int10from_usizeCs9TfoC9TDKig_19fuzz_arbitrary_json:
  825|  45.5k|                fn from_usize(u: usize) -> Self {
  826|  45.5k|                    u as Self
  827|  45.5k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs9TfoC9TDKig_19fuzz_arbitrary_json16SupportedSegmentEB1c_:
  167|  15.6k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  15.6k|    where
  169|  15.6k|        A: Arbitrary<'a>,
  170|  15.6k|    {
  171|  15.6k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  15.6k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenNtCs9TfoC9TDKig_19fuzz_arbitrary_json16SupportedSegmentEB1h_:
  213|  2.92k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  2.92k|    where
  215|  2.92k|        ElementType: Arbitrary<'a>,
  216|  2.92k|    {
  217|  2.92k|        let byte_size = self.arbitrary_byte_size()?;
  218|  2.92k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  2.92k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  2.92k|        let elem_size = std::cmp::max(1, elem_size);
  221|  2.92k|        Ok(byte_size / elem_size)
  222|  2.92k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   85|  2.92k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.92k|        Unstructured { data }
   87|  2.92k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCs9TfoC9TDKig_19fuzz_arbitrary_json:
  833|  5.70k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  5.70k|                    <$ty>::wrapping_add(self, rhs)
  835|  5.70k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB1i_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1i_:
  167|  2.92k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  2.92k|    where
  169|  2.92k|        A: Arbitrary<'a>,
  170|  2.92k|    {
  171|  2.92k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  2.92k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
  108|   166k|    pub fn len(&self) -> usize {
  109|   166k|        self.data.len()
  110|   166k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11to_unsignedCs9TfoC9TDKig_19fuzz_arbitrary_json:
  841|  11.4k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  11.4k|                    self as $unsigned_ty
  843|  11.4k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
  720|  17.9k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  17.9k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  17.9k|        if keep_going {
  723|  12.5k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  5.36k|            None
  726|       |        }
  727|  17.9k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB1b_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1b_:
  720|  83.9k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  83.9k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  83.9k|        if keep_going {
  723|  52.4k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  31.5k|            None
  726|       |        }
  727|  83.9k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int13from_unsignedCs9TfoC9TDKig_19fuzz_arbitrary_json:
  845|  5.70k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  5.70k|                    unsigned as Self
  847|  5.70k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECs9TfoC9TDKig_19fuzz_arbitrary_json:
  606|  5.36k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  5.36k|        &'b mut self,
  608|  5.36k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  5.36k|        Ok(ArbitraryIter {
  610|  5.36k|            u: &mut *self,
  611|  5.36k|            _marker: PhantomData,
  612|  5.36k|        })
  613|  5.36k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECs9TfoC9TDKig_19fuzz_arbitrary_json:
  293|  5.70k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  5.70k|    where
  295|  5.70k|        T: Int,
  296|  5.70k|    {
  297|  5.70k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  5.70k|        self.data = &self.data[bytes_consumed..];
  299|  5.70k|        Ok(result)
  300|  5.70k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs9TfoC9TDKig_19fuzz_arbitrary_json:
  167|   220k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   220k|    where
  169|   220k|        A: Arbitrary<'a>,
  170|   220k|    {
  171|   220k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   220k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB1O_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1O_:
  720|   118k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   118k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   118k|        if keep_going {
  723|  77.3k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  41.0k|            None
  726|       |        }
  727|   118k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB1o_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1o_:
  606|  31.5k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  31.5k|        &'b mut self,
  608|  31.5k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  31.5k|        Ok(ArbitraryIter {
  610|  31.5k|            u: &mut *self,
  611|  31.5k|            _marker: PhantomData,
  612|  31.5k|        })
  613|  31.5k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs9TfoC9TDKig_19fuzz_arbitrary_json:
  132|   166k|    pub fn is_empty(&self) -> bool {
  133|   166k|        self.len() == 0
  134|   166k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|   129k|                fn from_u8(b: u8) -> Self {
  822|   129k|                    b as Self
  823|   129k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|  64.9k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  64.9k|                    <$ty>::wrapping_sub(self, rhs)
  839|  64.9k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  213|  88.0k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  88.0k|    where
  215|  88.0k|        ElementType: Arbitrary<'a>,
  216|  88.0k|    {
  217|  88.0k|        let byte_size = self.arbitrary_byte_size()?;
  218|  88.0k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  88.0k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  88.0k|        let elem_size = std::cmp::max(1, elem_size);
  221|  88.0k|        Ok(byte_size / elem_size)
  222|  88.0k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   424k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   424k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   424k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   424k|        for byte in buffer[n..].iter_mut() {
  525|  67.0k|            *byte = 0;
  526|  67.0k|        }
  527|   424k|        self.data = &self.data[n..];
  528|   424k|        Ok(())
  529|   424k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|  25.3k|                fn from_u8(b: u8) -> Self {
  822|  25.3k|                    b as Self
  823|  25.3k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  50.7k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  50.7k|                    self as $unsigned_ty
  843|  50.7k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  88.0k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  88.0k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  88.0k|        }
  552|  88.0k|
  553|  88.0k|        let (for_buf, rest) = self.data.split_at(size);
  554|  88.0k|        self.data = rest;
  555|  88.0k|        Ok(for_buf)
  556|  88.0k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|  25.3k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  25.3k|                    <$ty>::wrapping_add(self, rhs)
  835|  25.3k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  88.0k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  88.0k|        self.data.get(..size)
  581|  88.0k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|  64.9k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  64.9k|                    <$ty>::checked_add(self, rhs)
  831|  64.9k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|  64.9k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  64.9k|                    <$ty>::wrapping_add(self, rhs)
  835|  64.9k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|   129k|                fn from_usize(u: usize) -> Self {
  826|   129k|                    u as Self
  827|   129k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|  25.3k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  25.3k|                    <$ty>::wrapping_sub(self, rhs)
  839|  25.3k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  5.70k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  5.70k|                    <$ty>::checked_add(self, rhs)
  831|  5.70k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  25.3k|    fn int_in_range_impl<T>(
  303|  25.3k|        range: ops::RangeInclusive<T>,
  304|  25.3k|        mut bytes: impl Iterator<Item = u8>,
  305|  25.3k|    ) -> Result<(T, usize)>
  306|  25.3k|    where
  307|  25.3k|        T: Int,
  308|  25.3k|    {
  309|  25.3k|        let start = *range.start();
  310|  25.3k|        let end = *range.end();
  311|  25.3k|        assert!(
  312|  25.3k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  25.3k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  25.3k|        }
  321|  25.3k|
  322|  25.3k|        // From here on out we work with the unsigned representation. All of the
  323|  25.3k|        // operations performed below work out just as well whether or not `T`
  324|  25.3k|        // is a signed or unsigned integer.
  325|  25.3k|        let start = start.to_unsigned();
  326|  25.3k|        let end = end.to_unsigned();
  327|  25.3k|
  328|  25.3k|        let delta = end.wrapping_sub(start);
  329|  25.3k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  25.3k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  25.3k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  50.7k|        while (bytes_consumed < mem::size_of::<T>())
  339|  25.3k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  25.3k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  25.3k|                Some(b) => b,
  344|  25.3k|            };
  345|  25.3k|            bytes_consumed += 1;
  346|  25.3k|
  347|  25.3k|            // Combine this byte into our arbitrary integer, but avoid
  348|  25.3k|            // overflowing the shift for `u8` and `i8`.
  349|  25.3k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|  25.3k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  25.3k|        let offset = if delta == T::Unsigned::MAX {
  357|     48|            arbitrary_int
  358|       |        } else {
  359|  25.3k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  25.3k|        let result = start.wrapping_add(offset);
  365|  25.3k|
  366|  25.3k|        // And convert back to our maybe-signed representation.
  367|  25.3k|        let result = T::from_unsigned(result);
  368|  25.3k|        debug_assert!(*range.start() <= result);
  369|  25.3k|        debug_assert!(result <= *range.end());
  370|       |
  371|  25.3k|        Ok((result, bytes_consumed))
  372|  25.3k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|  64.9k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  64.9k|                    unsigned as Self
  847|  64.9k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|   129k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   129k|                    self as $unsigned_ty
  843|   129k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  64.9k|    fn int_in_range_impl<T>(
  303|  64.9k|        range: ops::RangeInclusive<T>,
  304|  64.9k|        mut bytes: impl Iterator<Item = u8>,
  305|  64.9k|    ) -> Result<(T, usize)>
  306|  64.9k|    where
  307|  64.9k|        T: Int,
  308|  64.9k|    {
  309|  64.9k|        let start = *range.start();
  310|  64.9k|        let end = *range.end();
  311|  64.9k|        assert!(
  312|  64.9k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  64.9k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  64.9k|        }
  321|  64.9k|
  322|  64.9k|        // From here on out we work with the unsigned representation. All of the
  323|  64.9k|        // operations performed below work out just as well whether or not `T`
  324|  64.9k|        // is a signed or unsigned integer.
  325|  64.9k|        let start = start.to_unsigned();
  326|  64.9k|        let end = end.to_unsigned();
  327|  64.9k|
  328|  64.9k|        let delta = end.wrapping_sub(start);
  329|  64.9k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  64.9k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  64.9k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   194k|        while (bytes_consumed < mem::size_of::<T>())
  339|   129k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   129k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|   129k|                Some(b) => b,
  344|   129k|            };
  345|   129k|            bytes_consumed += 1;
  346|   129k|
  347|   129k|            // Combine this byte into our arbitrary integer, but avoid
  348|   129k|            // overflowing the shift for `u8` and `i8`.
  349|   129k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   129k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  64.9k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  64.9k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  64.9k|        let result = start.wrapping_add(offset);
  365|  64.9k|
  366|  64.9k|        // And convert back to our maybe-signed representation.
  367|  64.9k|        let result = T::from_unsigned(result);
  368|  64.9k|        debug_assert!(*range.start() <= result);
  369|  64.9k|        debug_assert!(result <= *range.end());
  370|       |
  371|  64.9k|        Ok((result, bytes_consumed))
  372|  64.9k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|  25.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  25.3k|                    <$ty>::checked_add(self, rhs)
  831|  25.3k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|  25.3k|                fn from_usize(u: usize) -> Self {
  826|  25.3k|                    u as Self
  827|  25.3k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|  25.3k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  25.3k|                    unsigned as Self
  847|  25.3k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  90.9k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  90.9k|        if self.data.is_empty() {
  226|    470|            Ok(0)
  227|  90.4k|        } else if self.data.len() == 1 {
  228|    120|            self.data = &[];
  229|    120|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|  90.3k|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|  25.3k|                let bytes = 1;
  242|  25.3k|                let max_size = self.data.len() - bytes;
  243|  25.3k|                let (rest, for_size) = self.data.split_at(max_size);
  244|  25.3k|                self.data = rest;
  245|  25.3k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|  64.9k|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|  64.9k|                let bytes = 2;
  248|  64.9k|                let max_size = self.data.len() - bytes;
  249|  64.9k|                let (rest, for_size) = self.data.split_at(max_size);
  250|  64.9k|                self.data = rest;
  251|  64.9k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|  90.3k|            Ok(len)
  267|       |        }
  268|  90.9k|    }

_RINvMs1_Cs6KAUHoa9eg5_4itoaNtB6_6Buffer6formatxECsa0kJhncOqqM_10serde_json:
   95|  1.19k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  1.19k|        i.write(unsafe {
   97|  1.19k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  1.19k|                as *mut <I as private::Sealed>::Buffer)
   99|  1.19k|        })
  100|  1.19k|    }
_RNvXsh_Cs6KAUHoa9eg5_4itoayNtNtB5_7private6Sealed5writeCsa0kJhncOqqM_10serde_json:
  135|  3.22k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  3.22k|                let is_nonnegative = self >= 0;
  137|  3.22k|                let mut n = if is_nonnegative {
  138|  3.22k|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  141|      0|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  3.22k|                let mut curr = buf.len() as isize;
  144|  3.22k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  3.22k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  3.22k|
  147|  3.22k|                unsafe {
  148|  3.22k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  149|  3.22k|                    if mem::size_of::<$t>() >= 2 {
  150|       |                        // eagerly decode 4 characters at a time
  151|  14.6k|                        while n >= 10000 {
  152|  11.4k|                            let rem = (n % 10000) as isize;
  153|  11.4k|                            n /= 10000;
  154|  11.4k|
  155|  11.4k|                            let d1 = (rem / 100) << 1;
  156|  11.4k|                            let d2 = (rem % 100) << 1;
  157|  11.4k|                            curr -= 4;
  158|  11.4k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  11.4k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  11.4k|                        }
  161|      0|                    }
  162|       |
  163|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  164|  3.22k|                    let mut n = n as isize; // possibly reduce 64bit math
  165|  3.22k|
  166|  3.22k|                    // decode 2 more chars, if > 2 chars
  167|  3.22k|                    if n >= 100 {
  168|  2.66k|                        let d1 = (n % 100) << 1;
  169|  2.66k|                        n /= 100;
  170|  2.66k|                        curr -= 2;
  171|  2.66k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  172|  2.66k|                    }
  173|       |
  174|       |                    // decode last 1 or 2 chars
  175|  3.22k|                    if n < 10 {
  176|  2.89k|                        curr -= 1;
  177|  2.89k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  178|  2.89k|                    } else {
  179|    328|                        let d1 = n << 1;
  180|    328|                        curr -= 2;
  181|    328|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  182|    328|                    }
  183|       |
  184|  3.22k|                    if !is_nonnegative {
  185|      0|                        curr -= 1;
  186|      0|                        *buf_ptr.offset(curr) = b'-';
  187|  3.22k|                    }
  188|       |                }
  189|       |
  190|  3.22k|                let len = buf.len() - curr as usize;
  191|  3.22k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  192|  3.22k|                unsafe { str::from_utf8_unchecked(bytes) }
  193|  3.22k|            }
_RNvMs1_Cs6KAUHoa9eg5_4itoaNtB5_6Buffer3newCsa0kJhncOqqM_10serde_json:
   87|  4.41k|    pub fn new() -> Buffer {
   88|  4.41k|        let bytes = [MaybeUninit::<u8>::uninit(); I128_MAX_LEN];
   89|  4.41k|        Buffer { bytes }
   90|  4.41k|    }
_RINvMs1_Cs6KAUHoa9eg5_4itoaNtB6_6Buffer6formatyECsa0kJhncOqqM_10serde_json:
   95|  3.22k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  3.22k|        i.write(unsafe {
   97|  3.22k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  3.22k|                as *mut <I as private::Sealed>::Buffer)
   99|  3.22k|        })
  100|  3.22k|    }
_RNvXsf_Cs6KAUHoa9eg5_4itoaxNtNtB5_7private6Sealed5writeCsa0kJhncOqqM_10serde_json:
  135|  1.19k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  1.19k|                let is_nonnegative = self >= 0;
  137|  1.19k|                let mut n = if is_nonnegative {
  138|      0|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  141|  1.19k|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  1.19k|                let mut curr = buf.len() as isize;
  144|  1.19k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  1.19k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  1.19k|
  147|  1.19k|                unsafe {
  148|  1.19k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  149|  1.19k|                    if mem::size_of::<$t>() >= 2 {
  150|       |                        // eagerly decode 4 characters at a time
  151|  5.29k|                        while n >= 10000 {
  152|  4.10k|                            let rem = (n % 10000) as isize;
  153|  4.10k|                            n /= 10000;
  154|  4.10k|
  155|  4.10k|                            let d1 = (rem / 100) << 1;
  156|  4.10k|                            let d2 = (rem % 100) << 1;
  157|  4.10k|                            curr -= 4;
  158|  4.10k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  4.10k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  4.10k|                        }
  161|      0|                    }
  162|       |
  163|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  164|  1.19k|                    let mut n = n as isize; // possibly reduce 64bit math
  165|  1.19k|
  166|  1.19k|                    // decode 2 more chars, if > 2 chars
  167|  1.19k|                    if n >= 100 {
  168|    903|                        let d1 = (n % 100) << 1;
  169|    903|                        n /= 100;
  170|    903|                        curr -= 2;
  171|    903|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  172|    903|                    }
  173|       |
  174|       |                    // decode last 1 or 2 chars
  175|  1.19k|                    if n < 10 {
  176|  1.04k|                        curr -= 1;
  177|  1.04k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  178|  1.04k|                    } else {
  179|    148|                        let d1 = n << 1;
  180|    148|                        curr -= 2;
  181|    148|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  182|    148|                    }
  183|       |
  184|  1.19k|                    if !is_nonnegative {
  185|  1.19k|                        curr -= 1;
  186|  1.19k|                        *buf_ptr.offset(curr) = b'-';
  187|  1.19k|                    }
  188|       |                }
  189|       |
  190|  1.19k|                let len = buf.len() - curr as usize;
  191|  1.19k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  192|  1.19k|                unsafe { str::from_utf8_unchecked(bytes) }
  193|  1.19k|            }

_RNvNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  303|  2.92k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.92k|                $body
  305|  2.92k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs9TfoC9TDKig_19fuzz_arbitrary_json:
   40|  2.92k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.92k|        match self {
   42|  2.85k|            Corpus::Keep => 0,
   43|     74|            Corpus::Reject => -1,
   44|       |        }
   45|  2.92k|    }
rust_fuzzer_test_input:
  259|  2.92k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.92k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.92k|
  262|  2.92k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.92k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.92k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.92k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.92k|                // get to longer inputs that actually lead to interesting executions
  267|  2.92k|                // quicker.
  268|  2.92k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.92k|                }
  271|  2.92k|
  272|  2.92k|                let mut u = Unstructured::new(bytes);
  273|  2.92k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.92k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.92k|                }
  291|       |
  292|  2.92k|                let data = match data {
  293|  2.92k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.92k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.92k|                result.to_libfuzzer_code()
  299|  2.92k|            }
LLVMFuzzerTestOneInput:
   58|  2.92k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.92k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.92k|    });
   63|  2.92k|
   64|  2.92k|    match test_input {
   65|  2.92k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.92k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.92k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.92k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.92k|        rust_fuzzer_test_input(data_slice)
   62|  2.92k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs9TfoC9TDKig_19fuzz_arbitrary_json:
  474|  2.87M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|  2.87M|        Some((*self as usize).cmp(&(*other as usize)))
  476|  2.87M|    }
_RNvCs36tL2qLycl0_3log9max_level:
 1269|  2.01M|pub fn max_level() -> LevelFilter {
 1270|  2.01M|    // Since `LevelFilter` is `repr(usize)`,
 1271|  2.01M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1272|  2.01M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1273|  2.01M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1274|  2.01M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1275|  2.01M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1276|  2.01M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1277|  2.01M|}
_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs8dUjriG0K0U_8rsonpath:
  474|  1.16M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|  1.16M|        Some((*self as usize).cmp(&(*other as usize)))
  476|  1.16M|    }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs9TfoC9TDKig_19fuzz_arbitrary_json:
   49|  2.92k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.92k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.92k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.92k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.92k|        // `SeqCst` operations on the slow path.
   54|  2.92k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.92k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs9TfoC9TDKig_19fuzz_arbitrary_json:
  963|  2.92k|        pub fn get(&self) -> Option<&T> {
  964|  2.92k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.92k|                None
  969|       |            }
  970|  2.92k|        }

_RINvMNtCs5Rryf4izwlP_3ryu6bufferNtB3_6Buffer13format_finitedECsa0kJhncOqqM_10serde_json:
   72|  6.18k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  6.18k|        unsafe {
   74|  6.18k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  6.18k|            debug_assert!(n <= self.bytes.len());
   76|  6.18k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  6.18k|            str::from_utf8_unchecked(slice)
   78|  6.18k|        }
   79|  6.18k|    }
_RNvMNtCs5Rryf4izwlP_3ryu6bufferNtB2_6Buffer3newCsa0kJhncOqqM_10serde_json:
   29|  6.18k|    pub fn new() -> Self {
   30|  6.18k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  6.18k|        Buffer { bytes }
   32|  6.18k|    }
_RNvXs5_NtCs5Rryf4izwlP_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCsa0kJhncOqqM_10serde_json:
  168|  6.18k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  6.18k|        raw::format64(self, result)
  170|  6.18k|    }

_RNvNtCs5Rryf4izwlP_3ryu6common8pow5bits:
   64|  6.09k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|       |    // This approximation works up to the point that the multiplication
   66|       |    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|       |    // would fail at 5^4004 which is just greater than 2^9297.
   68|  6.09k|    debug_assert!(e >= 0);
   69|  6.09k|    debug_assert!(e <= 3528);
   70|  6.09k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  6.09k|}
_RNvNtCs5Rryf4izwlP_3ryu6common10log10_pow5:
   90|  4.09k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|       |    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  4.09k|    debug_assert!(e >= 0);
   93|  4.09k|    debug_assert!(e <= 2620);
   94|  4.09k|    (e as u32 * 732923) >> 20
   95|  4.09k|}
_RNvNtCs5Rryf4izwlP_3ryu6common10log10_pow2:
   81|  2.00k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|       |    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  2.00k|    debug_assert!(e >= 0);
   84|  2.00k|    debug_assert!(e <= 1650);
   85|  2.00k|    (e as u32 * 78913) >> 18
   86|  2.00k|}

_RNvNtCs5Rryf4izwlP_3ryu3d2s3d2d:
   91|  6.09k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   92|  6.09k|    let (e2, m2) = if ieee_exponent == 0 {
   93|  1.33k|        (
   94|  1.33k|            // We subtract 2 so that the bounds computation has 2 additional bits.
   95|  1.33k|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   96|  1.33k|            ieee_mantissa,
   97|  1.33k|        )
   98|       |    } else {
   99|  4.76k|        (
  100|  4.76k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
  101|  4.76k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  102|  4.76k|        )
  103|       |    };
  104|  6.09k|    let even = (m2 & 1) == 0;
  105|  6.09k|    let accept_bounds = even;
  106|  6.09k|
  107|  6.09k|    // Step 2: Determine the interval of valid decimal representations.
  108|  6.09k|    let mv = 4 * m2;
  109|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  110|  6.09k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  111|       |    // We would compute mp and mm like this:
  112|       |    // uint64_t mp = 4 * m2 + 2;
  113|       |    // uint64_t mm = mv - 1 - mm_shift;
  114|       |
  115|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  116|       |    let mut vr: u64;
  117|       |    let mut vp: u64;
  118|       |    let mut vm: u64;
  119|  6.09k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  120|  6.09k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  121|  6.09k|    let e10: i32;
  122|  6.09k|    let mut vm_is_trailing_zeros = false;
  123|  6.09k|    let mut vr_is_trailing_zeros = false;
  124|  6.09k|    if e2 >= 0 {
  125|       |        // I tried special-casing q == 0, but there was no effect on performance.
  126|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  127|  2.00k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  128|  2.00k|        e10 = q as i32;
  129|  2.00k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  130|  2.00k|        let i = -e2 + q as i32 + k;
  131|  2.00k|        vr = unsafe {
  132|  2.00k|            mul_shift_all_64(
  133|  2.00k|                m2,
  134|       |                #[cfg(feature = "small")]
  135|       |                &compute_inv_pow5(q),
  136|       |                #[cfg(not(feature = "small"))]
  137|       |                {
  138|  2.00k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  139|  2.00k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  140|  2.00k|                },
  141|  2.00k|                i as u32,
  142|  2.00k|                vp_uninit.as_mut_ptr(),
  143|  2.00k|                vm_uninit.as_mut_ptr(),
  144|  2.00k|                mm_shift,
  145|  2.00k|            )
  146|  2.00k|        };
  147|  2.00k|        vp = unsafe { vp_uninit.assume_init() };
  148|  2.00k|        vm = unsafe { vm_uninit.assume_init() };
  149|  2.00k|        if q <= 21 {
  150|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  151|       |            // may still be safe, but it's more difficult to reason about them.
  152|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  153|    984|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  154|    984|            if mv_mod5 == 0 {
  155|    175|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  156|    809|            } else if accept_bounds {
  157|    565|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  158|    565|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  159|    565|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  160|    565|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  161|    565|            } else {
  162|    244|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  163|    244|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  164|    244|            }
  165|  1.01k|        }
  166|       |    } else {
  167|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  168|  4.09k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  169|  4.09k|        e10 = q as i32 + e2;
  170|  4.09k|        let i = -e2 - q as i32;
  171|  4.09k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  172|  4.09k|        let j = q as i32 - k;
  173|  4.09k|        vr = unsafe {
  174|  4.09k|            mul_shift_all_64(
  175|  4.09k|                m2,
  176|       |                #[cfg(feature = "small")]
  177|       |                &compute_pow5(i as u32),
  178|       |                #[cfg(not(feature = "small"))]
  179|       |                {
  180|  4.09k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  181|  4.09k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  182|  4.09k|                },
  183|  4.09k|                j as u32,
  184|  4.09k|                vp_uninit.as_mut_ptr(),
  185|  4.09k|                vm_uninit.as_mut_ptr(),
  186|  4.09k|                mm_shift,
  187|  4.09k|            )
  188|  4.09k|        };
  189|  4.09k|        vp = unsafe { vp_uninit.assume_init() };
  190|  4.09k|        vm = unsafe { vm_uninit.assume_init() };
  191|  4.09k|        if q <= 1 {
  192|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  193|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  194|    563|            vr_is_trailing_zeros = true;
  195|    563|            if accept_bounds {
  196|    426|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  197|    426|                vm_is_trailing_zeros = mm_shift == 1;
  198|    426|            } else {
  199|    137|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  200|    137|                vp -= 1;
  201|    137|            }
  202|  3.53k|        } else if q < 63 {
  203|    713|            // TODO(ulfjack): Use a tighter bound here.
  204|    713|            // We want to know if the full product has at least q trailing zeros.
  205|    713|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  206|    713|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  207|    713|            // <=> p2(mv) >= q (because -e2 >= q)
  208|    713|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  209|  2.82k|        }
  210|       |    }
  211|       |
  212|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  213|  6.09k|    let mut removed = 0i32;
  214|  6.09k|    let mut last_removed_digit = 0u8;
  215|       |    // On average, we remove ~2 digits.
  216|  6.09k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  217|       |        // General case, which happens rarely (~0.7%).
  218|       |        loop {
  219|  4.43k|            let vp_div10 = div10(vp);
  220|  4.43k|            let vm_div10 = div10(vm);
  221|  4.43k|            if vp_div10 <= vm_div10 {
  222|  1.19k|                break;
  223|  3.24k|            }
  224|  3.24k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  225|  3.24k|            let vr_div10 = div10(vr);
  226|  3.24k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  227|  3.24k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  228|  3.24k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  229|  3.24k|            last_removed_digit = vr_mod10 as u8;
  230|  3.24k|            vr = vr_div10;
  231|  3.24k|            vp = vp_div10;
  232|  3.24k|            vm = vm_div10;
  233|  3.24k|            removed += 1;
  234|       |        }
  235|  1.19k|        if vm_is_trailing_zeros {
  236|       |            loop {
  237|    644|                let vm_div10 = div10(vm);
  238|    644|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  239|    644|                if vm_mod10 != 0 {
  240|    454|                    break;
  241|    190|                }
  242|    190|                let vp_div10 = div10(vp);
  243|    190|                let vr_div10 = div10(vr);
  244|    190|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  245|    190|                vr_is_trailing_zeros &= last_removed_digit == 0;
  246|    190|                last_removed_digit = vr_mod10 as u8;
  247|    190|                vr = vr_div10;
  248|    190|                vp = vp_div10;
  249|    190|                vm = vm_div10;
  250|    190|                removed += 1;
  251|       |            }
  252|    738|        }
  253|  1.19k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  254|      0|            // Round even if the exact number is .....50..0.
  255|      0|            last_removed_digit = 4;
  256|  1.19k|        }
  257|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  258|  1.19k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  259|       |            as u64
  260|       |    } else {
  261|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  262|  4.90k|        let mut round_up = false;
  263|  4.90k|        let vp_div100 = div100(vp);
  264|  4.90k|        let vm_div100 = div100(vm);
  265|  4.90k|        // Optimization: remove two digits at a time (~86.2%).
  266|  4.90k|        if vp_div100 > vm_div100 {
  267|  3.26k|            let vr_div100 = div100(vr);
  268|  3.26k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  269|  3.26k|            round_up = vr_mod100 >= 50;
  270|  3.26k|            vr = vr_div100;
  271|  3.26k|            vp = vp_div100;
  272|  3.26k|            vm = vm_div100;
  273|  3.26k|            removed += 2;
  274|  3.26k|        }
  275|       |        // Loop iterations below (approximately), without optimization above:
  276|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  277|       |        // Loop iterations below (approximately), with optimization above:
  278|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  279|       |        loop {
  280|  7.71k|            let vp_div10 = div10(vp);
  281|  7.71k|            let vm_div10 = div10(vm);
  282|  7.71k|            if vp_div10 <= vm_div10 {
  283|  4.90k|                break;
  284|  2.80k|            }
  285|  2.80k|            let vr_div10 = div10(vr);
  286|  2.80k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  287|  2.80k|            round_up = vr_mod10 >= 5;
  288|  2.80k|            vr = vr_div10;
  289|  2.80k|            vp = vp_div10;
  290|  2.80k|            vm = vm_div10;
  291|  2.80k|            removed += 1;
  292|       |        }
  293|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  294|  4.90k|        vr + (vr == vm || round_up) as u64
  295|       |    };
  296|  6.09k|    let exp = e10 + removed;
  297|  6.09k|
  298|  6.09k|    FloatingDecimal64 {
  299|  6.09k|        exponent: exp,
  300|  6.09k|        mantissa: output,
  301|  6.09k|    }
  302|  6.09k|}
_RNvNtCs5Rryf4izwlP_3ryu3d2s16decimal_length17:
   38|  6.09k|pub fn decimal_length17(v: u64) -> u32 {
   39|       |    // This is slightly faster than a loop.
   40|       |    // The average output length is 16.38 digits, so we check high-to-low.
   41|       |    // Function precondition: v is not an 18, 19, or 20-digit number.
   42|       |    // (17 digits are sufficient for round-tripping.)
   43|  6.09k|    debug_assert!(v < 100000000000000000);
   44|       |
   45|  6.09k|    if v >= 10000000000000000 {
   46|  1.91k|        17
   47|  4.18k|    } else if v >= 1000000000000000 {
   48|  1.86k|        16
   49|  2.32k|    } else if v >= 100000000000000 {
   50|    564|        15
   51|  1.75k|    } else if v >= 10000000000000 {
   52|    112|        14
   53|  1.64k|    } else if v >= 1000000000000 {
   54|    283|        13
   55|  1.36k|    } else if v >= 100000000000 {
   56|    108|        12
   57|  1.25k|    } else if v >= 10000000000 {
   58|    434|        11
   59|    822|    } else if v >= 1000000000 {
   60|    116|        10
   61|    706|    } else if v >= 100000000 {
   62|     75|        9
   63|    631|    } else if v >= 10000000 {
   64|     82|        8
   65|    549|    } else if v >= 1000000 {
   66|     83|        7
   67|    466|    } else if v >= 100000 {
   68|     86|        6
   69|    380|    } else if v >= 10000 {
   70|    105|        5
   71|    275|    } else if v >= 1000 {
   72|     72|        4
   73|    203|    } else if v >= 100 {
   74|    123|        3
   75|     80|    } else if v >= 10 {
   76|      9|        2
   77|       |    } else {
   78|     71|        1
   79|       |    }
   80|  6.09k|}

_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics4div5B3_:
   24|    984|pub fn div5(x: u64) -> u64 {
   25|    984|    x / 5
   26|    984|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics11pow5_factor:
   39|    984|pub(crate) fn pow5_factor(mut value: u64) -> u32 {
   40|    984|    const M_INV_5: u64 = 14757395258967641293; // 5 * m_inv_5 = 1 (mod 2^64)
   41|    984|    const N_DIV_5: u64 = 3689348814741910323; // #{ n | n = 0 (mod 2^64) } = 2^64 / 5
   42|    984|    let mut count = 0u32;
   43|       |    loop {
   44|  2.35k|        debug_assert!(value != 0);
   45|  2.35k|        value = value.wrapping_mul(M_INV_5);
   46|  2.35k|        if value > N_DIV_5 {
   47|    984|            break;
   48|  1.36k|        }
   49|  1.36k|        count += 1;
   50|       |    }
   51|    984|    count
   52|    984|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  6.09k|pub unsafe fn mul_shift_all_64(
   79|  6.09k|    m: u64,
   80|  6.09k|    mul: &(u64, u64),
   81|  6.09k|    j: u32,
   82|  6.09k|    vp: *mut u64,
   83|  6.09k|    vm: *mut u64,
   84|  6.09k|    mm_shift: u32,
   85|  6.09k|) -> u64 {
   86|  6.09k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  6.09k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  6.09k|    mul_shift_64(4 * m, mul, j)
   89|  6.09k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|    984|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|    984|    // I tried a case distinction on p, but there was no performance difference.
   58|    984|    pow5_factor(value) >= p
   59|    984|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics6div100B3_:
   34|  13.0k|pub fn div100(x: u64) -> u64 {
   35|  13.0k|    x / 100
   36|  13.0k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics12mul_shift_64:
   71|  18.2k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  18.2k|    let b0 = m as u128 * mul.0 as u128;
   73|  18.2k|    let b2 = m as u128 * mul.1 as u128;
   74|  18.2k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  18.2k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics5div10B3_:
   29|  31.3k|pub fn div10(x: u64) -> u64 {
   30|  31.3k|    x / 10
   31|  31.3k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|    713|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|    713|    debug_assert!(value != 0);
   65|    713|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|    713|    (value & ((1u64 << p) - 1)) == 0
   68|    713|}

_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8exponent15write_exponent3:
    5|  5.01k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  5.01k|    let sign = k < 0;
    7|  5.01k|    if sign {
    8|  2.90k|        *result = b'-';
    9|  2.90k|        result = result.offset(1);
   10|  2.90k|        k = -k;
   11|  2.90k|    }
   12|       |
   13|  5.01k|    debug_assert!(k < 1000);
   14|  5.01k|    if k >= 100 {
   15|  3.41k|        *result = b'0' + (k / 100) as u8;
   16|  3.41k|        k %= 100;
   17|  3.41k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  3.41k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  3.41k|        sign as usize + 3
   20|  1.59k|    } else if k >= 10 {
   21|  1.52k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.52k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.52k|        sign as usize + 2
   24|       |    } else {
   25|     70|        *result = b'0' + k as u8;
   26|     70|        sign as usize + 1
   27|       |    }
   28|  5.01k|}

_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8mantissa19write_mantissa_long:
    5|  6.02k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  6.02k|    if (output >> 32) != 0 {
    7|  5.28k|        // One expensive 64-bit division.
    8|  5.28k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  5.28k|        output /= 100_000_000;
   10|  5.28k|
   11|  5.28k|        let c = output2 % 10_000;
   12|  5.28k|        output2 /= 10_000;
   13|  5.28k|        let d = output2 % 10_000;
   14|  5.28k|        let c0 = (c % 100) << 1;
   15|  5.28k|        let c1 = (c / 100) << 1;
   16|  5.28k|        let d0 = (d % 100) << 1;
   17|  5.28k|        let d1 = (d / 100) << 1;
   18|  5.28k|        ptr::copy_nonoverlapping(
   19|  5.28k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  5.28k|            result.offset(-2),
   21|  5.28k|            2,
   22|  5.28k|        );
   23|  5.28k|        ptr::copy_nonoverlapping(
   24|  5.28k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  5.28k|            result.offset(-4),
   26|  5.28k|            2,
   27|  5.28k|        );
   28|  5.28k|        ptr::copy_nonoverlapping(
   29|  5.28k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  5.28k|            result.offset(-6),
   31|  5.28k|            2,
   32|  5.28k|        );
   33|  5.28k|        ptr::copy_nonoverlapping(
   34|  5.28k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  5.28k|            result.offset(-8),
   36|  5.28k|            2,
   37|  5.28k|        );
   38|  5.28k|        result = result.offset(-8);
   39|  5.28k|    }
   40|  6.02k|    write_mantissa(output as u32, result);
   41|  6.02k|}
_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8mantissa14write_mantissa:
   44|  6.02k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  13.3k|    while output >= 10_000 {
   46|  7.36k|        let c = output - 10_000 * (output / 10_000);
   47|  7.36k|        output /= 10_000;
   48|  7.36k|        let c0 = (c % 100) << 1;
   49|  7.36k|        let c1 = (c / 100) << 1;
   50|  7.36k|        ptr::copy_nonoverlapping(
   51|  7.36k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  7.36k|            result.offset(-2),
   53|  7.36k|            2,
   54|  7.36k|        );
   55|  7.36k|        ptr::copy_nonoverlapping(
   56|  7.36k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  7.36k|            result.offset(-4),
   58|  7.36k|            2,
   59|  7.36k|        );
   60|  7.36k|        result = result.offset(-4);
   61|  7.36k|    }
   62|  6.02k|    if output >= 100 {
   63|  3.32k|        let c = (output % 100) << 1;
   64|  3.32k|        output /= 100;
   65|  3.32k|        ptr::copy_nonoverlapping(
   66|  3.32k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  3.32k|            result.offset(-2),
   68|  3.32k|            2,
   69|  3.32k|        );
   70|  3.32k|        result = result.offset(-2);
   71|  3.32k|    }
   72|  6.02k|    if output >= 10 {
   73|  2.44k|        let c = output << 1;
   74|  2.44k|        ptr::copy_nonoverlapping(
   75|  2.44k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  2.44k|            result.offset(-2),
   77|  2.44k|            2,
   78|  2.44k|        );
   79|  3.58k|    } else {
   80|  3.58k|        *result.offset(-1) = b'0' + output as u8;
   81|  3.58k|    }
   82|  6.02k|}

_RNvNtCs5Rryf4izwlP_3ryu6pretty8format64:
   52|  6.18k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  6.18k|    let bits = f.to_bits();
   54|  6.18k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  6.18k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  6.18k|    let ieee_exponent =
   57|  6.18k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  6.18k|
   59|  6.18k|    let mut index = 0isize;
   60|  6.18k|    if sign {
   61|  2.12k|        *result = b'-';
   62|  2.12k|        index += 1;
   63|  4.05k|    }
   64|       |
   65|  6.18k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|     85|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|     85|        return sign as usize + 3;
   68|  6.09k|    }
   69|  6.09k|
   70|  6.09k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  6.09k|
   72|  6.09k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  6.09k|    let k = v.exponent as isize;
   74|  6.09k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  6.09k|    debug_assert!(k >= -324);
   76|       |
   77|  6.09k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|    601|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|    601|        for i in length..kk {
   81|    507|            *result.offset(index + i) = b'0';
   82|    507|        }
   83|    601|        *result.offset(index + kk) = b'.';
   84|    601|        *result.offset(index + kk + 1) = b'0';
   85|    601|        index as usize + kk as usize + 2
   86|  5.49k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|     93|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|     93|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|     93|        *result.offset(index + kk) = b'.';
   91|     93|        index as usize + length as usize + 1
   92|  5.40k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    391|        *result.offset(index) = b'0';
   95|    391|        *result.offset(index + 1) = b'.';
   96|    391|        let offset = 2 - kk;
   97|    879|        for i in 2..offset {
   98|    879|            *result.offset(index + i) = b'0';
   99|    879|        }
  100|    391|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    391|        index as usize + length as usize + offset as usize
  102|  5.01k|    } else if length == 1 {
  103|       |        // 1e30
  104|     69|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     69|        *result.offset(index + 1) = b'e';
  106|     69|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  4.94k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  4.94k|        *result.offset(index) = *result.offset(index + 1);
  111|  4.94k|        *result.offset(index + 1) = b'.';
  112|  4.94k|        *result.offset(index + length + 1) = b'e';
  113|  4.94k|        index as usize
  114|  4.94k|            + length as usize
  115|  4.94k|            + 2
  116|  4.94k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  6.18k|}

_RINvXs1H_NtNtCsfYlpjij4ZWb_5serde3ser5implsRNtNtCsa0kJhncOqqM_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  517|  46.5k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  518|  46.5k|            where
  519|  46.5k|                S: Serializer,
  520|  46.5k|            {
  521|  46.5k|                (**self).serialize(serializer)
  522|  46.5k|            }
_RINvXs_NtNtCsfYlpjij4ZWb_5serde3ser5implsNtNtCshJIxznpEM8j_5alloc6string6StringNtB7_9Serialize9serializeINtNtCsa0kJhncOqqM_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   54|  62.3k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   55|  62.3k|    where
   56|  62.3k|        S: Serializer,
   57|  62.3k|    {
   58|  62.3k|        serializer.serialize_str(self)
   59|  62.3k|    }
_RINvXs1o_NtNtCsfYlpjij4ZWb_5serde3ser5implsINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsa0kJhncOqqM_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  200|  28.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  201|  28.4k|            where
  202|  28.4k|                S: Serializer,
  203|  28.4k|            {
  204|  28.4k|                serializer.collect_seq(self)
  205|  28.4k|            }

_RINvNtCsfYlpjij4ZWb_5serde3ser17iterator_len_hintINtNtNtCslATUeuPuGvJ_4core5slice4iter4IterNtNtCsa0kJhncOqqM_10serde_json5value5ValueEEB1v_:
 1946|  28.4k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1947|  28.4k|where
 1948|  28.4k|    I: Iterator,
 1949|  28.4k|{
 1950|  28.4k|    match iter.size_hint() {
 1951|  28.4k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1952|      0|        _ => None,
 1953|       |    }
 1954|  28.4k|}
_RINvYINtNtCsa0kJhncOqqM_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBT_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeMap15serialize_entryNtNtCshJIxznpEM8j_5alloc6string6StringB14_EB8_:
 1811|  62.3k|    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>
 1812|  62.3k|    where
 1813|  62.3k|        K: ?Sized + Serialize,
 1814|  62.3k|        V: ?Sized + Serialize,
 1815|  62.3k|    {
 1816|  62.3k|        tri!(self.serialize_key(key));
 1817|  62.3k|        self.serialize_value(value)
 1818|  62.3k|    }
_RINvYQINtNtCsa0kJhncOqqM_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBX_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EEB9_:
 1281|  28.4k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1282|  28.4k|    where
 1283|  28.4k|        I: IntoIterator,
 1284|  28.4k|        <I as IntoIterator>::Item: Serialize,
 1285|  28.4k|    {
 1286|  28.4k|        let mut iter = iter.into_iter();
 1287|  28.4k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1288|  28.4k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|  28.4k|        serializer.end()
 1290|  28.4k|    }
_RNCINvYQINtNtCsa0kJhncOqqM_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB1a_EE0Bb_:
 1288|  46.5k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXs9_NtCsa0kJhncOqqM_10serde_json3mapINtB6_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorTBM_B1o_EE9from_iterINtNtNtB1P_8adapters3map3MapINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map8IntoIterBM_NtNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB4B_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4v_B1o_INtNtB1R_7convert4FromB4t_E4froms_0EEB4B_:
  518|  36.8k|    fn from_iter<T>(iter: T) -> Self
  519|  36.8k|    where
  520|  36.8k|        T: IntoIterator<Item = (String, Value)>,
  521|  36.8k|    {
  522|  36.8k|        Map {
  523|  36.8k|            map: FromIterator::from_iter(iter),
  524|  36.8k|        }
  525|  36.8k|    }
_RNvMNtCsa0kJhncOqqM_10serde_json3mapINtB2_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  290|  36.8k|    pub fn len(&self) -> usize {
  291|  36.8k|        self.map.len()
  292|  36.8k|    }
_RNvXse_NtCsa0kJhncOqqM_10serde_json3mapRINtB5_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB7_:
 1008|  36.8k|    fn into_iter(self) -> Self::IntoIter {
 1009|  36.8k|        Iter {
 1010|  36.8k|            iter: self.map.iter(),
 1011|  36.8k|        }
 1012|  36.8k|    }
_RNvXsh_NtCsa0kJhncOqqM_10serde_json3mapNtB5_4IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB7_:
  542|  99.2k|            fn next(&mut self) -> Option<Self::Item> {
  543|  99.2k|                self.iter.next()
  544|  99.2k|            }

_RNvXsq_NtCsa0kJhncOqqM_10serde_json6numberNtB5_6NumberINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs9TfoC9TDKig_19fuzz_arbitrary_json:
  755|  4.41k|                fn from(i: $ty) -> Self {
  756|  4.41k|                    let n = {
  757|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  758|       |                        {
  759|  4.41k|                            if i < 0 {
  760|  1.19k|                                N::NegInt(i as i64)
  761|       |                            } else {
  762|  3.22k|                                N::PosInt(i as u64)
  763|       |                            }
  764|       |                        }
  765|       |                        #[cfg(feature = "arbitrary_precision")]
  766|       |                        {
  767|       |                            itoa::Buffer::new().format(i).to_owned()
  768|       |                        }
  769|       |                    };
  770|  4.41k|                    Number { n }
  771|  4.41k|                }
_RINvXs4_NtCsa0kJhncOqqM_10serde_json6numberNtB6_6NumberNtNtCsfYlpjij4ZWb_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB2a_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  372|  10.5k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  373|  10.5k|    where
  374|  10.5k|        S: Serializer,
  375|  10.5k|    {
  376|  10.5k|        match self.n {
  377|  3.22k|            N::PosInt(u) => serializer.serialize_u64(u),
  378|  1.19k|            N::NegInt(i) => serializer.serialize_i64(i),
  379|  6.18k|            N::Float(f) => serializer.serialize_f64(f),
  380|       |        }
  381|  10.5k|    }
_RNvMs1_NtCsa0kJhncOqqM_10serde_json6numberNtB5_6Number8from_f64B7_:
  264|  6.57k|    pub fn from_f64(f: f64) -> Option<Number> {
  265|  6.57k|        if f.is_finite() {
  266|  6.18k|            let n = {
  267|  6.18k|                #[cfg(not(feature = "arbitrary_precision"))]
  268|  6.18k|                {
  269|  6.18k|                    N::Float(f)
  270|  6.18k|                }
  271|  6.18k|                #[cfg(feature = "arbitrary_precision")]
  272|  6.18k|                {
  273|  6.18k|                    ryu::Buffer::new().format_finite(f).to_owned()
  274|  6.18k|                }
  275|  6.18k|            };
  276|  6.18k|            Some(Number { n })
  277|       |        } else {
  278|    396|            None
  279|       |        }
  280|  6.57k|    }

_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1901|  62.3k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1902|  62.3k|    where
 1903|  62.3k|        W: ?Sized + io::Write,
 1904|  62.3k|    {
 1905|  62.3k|        Ok(())
 1906|  62.3k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1881|  62.3k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1882|  62.3k|    where
 1883|  62.3k|        W: ?Sized + io::Write,
 1884|  62.3k|    {
 1885|  62.3k|        Ok(())
 1886|  62.3k|    }
_RNvXsi_NtCsa0kJhncOqqM_10serde_json3serNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  458|   108k|#[derive(Eq, PartialEq)]
_RNvMNtCsa0kJhncOqqM_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   24|  2.92k|    pub fn new(writer: W) -> Self {
   25|  2.92k|        Serializer::with_formatter(writer, CompactFormatter)
   26|  2.92k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1557|  18.2k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1558|  18.2k|    where
 1559|  18.2k|        W: ?Sized + io::Write,
 1560|  18.2k|    {
 1561|  18.2k|        writer.write_all(b"null")
 1562|  18.2k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1722|  70.1k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1723|  70.1k|    where
 1724|  70.1k|        W: ?Sized + io::Write,
 1725|  70.1k|    {
 1726|  70.1k|        writer.write_all(b"\"")
 1727|  70.1k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1824|  46.5k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1825|  46.5k|    where
 1826|  46.5k|        W: ?Sized + io::Write,
 1827|  46.5k|    {
 1828|  46.5k|        if first {
 1829|  26.6k|            Ok(())
 1830|       |        } else {
 1831|  19.9k|            writer.write_all(b",")
 1832|       |        }
 1833|  46.5k|    }
_RINvXs6_NtCsa0kJhncOqqM_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeMap13serialize_keyNtNtCshJIxznpEM8j_5alloc6string6StringEB8_:
  616|  62.3k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  617|  62.3k|    where
  618|  62.3k|        T: ?Sized + Serialize,
  619|  62.3k|    {
  620|  62.3k|        match self {
  621|  62.3k|            Compound::Map { ser, state } => {
  622|  62.3k|                tri!(ser
  623|  62.3k|                    .formatter
  624|  62.3k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  625|  62.3k|                    .map_err(Error::io));
  626|  62.3k|                *state = State::Rest;
  627|       |
  628|  62.3k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  629|       |
  630|  62.3k|                ser.formatter
  631|  62.3k|                    .end_object_key(&mut ser.writer)
  632|  62.3k|                    .map_err(Error::io)
  633|       |            }
  634|       |            #[cfg(feature = "arbitrary_precision")]
  635|       |            Compound::Number { .. } => unreachable!(),
  636|       |            #[cfg(feature = "raw_value")]
  637|       |            Compound::RawValue { .. } => unreachable!(),
  638|       |        }
  639|  62.3k|    }
_RNvXs9_NtCsa0kJhncOqqM_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB17_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_strB7_:
  800|  62.3k|    fn serialize_str(self, value: &str) -> Result<()> {
  801|  62.3k|        self.ser.serialize_str(value)
  802|  62.3k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1701|  6.18k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1702|  6.18k|    where
 1703|  6.18k|        W: ?Sized + io::Write,
 1704|  6.18k|    {
 1705|  6.18k|        let mut buffer = ryu::Buffer::new();
 1706|  6.18k|        let s = buffer.format_finite(value);
 1707|  6.18k|        writer.write_all(s.as_bytes())
 1708|  6.18k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1804|  28.4k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1805|  28.4k|    where
 1806|  28.4k|        W: ?Sized + io::Write,
 1807|  28.4k|    {
 1808|  28.4k|        writer.write_all(b"[")
 1809|  28.4k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1814|  28.4k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1815|  28.4k|    where
 1816|  28.4k|        W: ?Sized + io::Write,
 1817|  28.4k|    {
 1818|  28.4k|        writer.write_all(b"]")
 1819|  28.4k|    }
_RINvNtCsa0kJhncOqqM_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBQ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterB11_EB4_:
 2139|  2.92k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2140|  2.92k|where
 2141|  2.92k|    W: io::Write,
 2142|  2.92k|    T: ?Sized + Serialize,
 2143|  2.92k|{
 2144|  2.92k|    let mut ser = Serializer::new(writer);
 2145|  2.92k|    value.serialize(&mut ser)
 2146|  2.92k|}
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_u64B7_:
  138|  3.22k|    fn serialize_u64(self, value: u64) -> Result<()> {
  139|  3.22k|        self.formatter
  140|  3.22k|            .write_u64(&mut self.writer, value)
  141|  3.22k|            .map_err(Error::io)
  142|  3.22k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_strB7_:
  186|  70.1k|    fn serialize_str(self, value: &str) -> Result<()> {
  187|  70.1k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  188|  70.1k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_f64B7_:
  165|  6.18k|    fn serialize_f64(self, value: f64) -> Result<()> {
  166|  6.18k|        match value.classify() {
  167|      0|            FpCategory::Nan | FpCategory::Infinite => self
  168|      0|                .formatter
  169|      0|                .write_null(&mut self.writer)
  170|      0|                .map_err(Error::io),
  171|  6.18k|            _ => self
  172|  6.18k|                .formatter
  173|  6.18k|                .write_f64(&mut self.writer, value)
  174|  6.18k|                .map_err(Error::io),
  175|       |        }
  176|  6.18k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer14serialize_unitB7_:
  198|  18.2k|    fn serialize_unit(self) -> Result<()> {
  199|  18.2k|        self.formatter
  200|  18.2k|            .write_null(&mut self.writer)
  201|  18.2k|            .map_err(Error::io)
  202|  18.2k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1566|  9.82k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1567|  9.82k|    where
 1568|  9.82k|        W: ?Sized + io::Write,
 1569|  9.82k|    {
 1570|  9.82k|        let s = if value {
 1571|  7.46k|            b"true" as &[u8]
 1572|       |        } else {
 1573|  2.36k|            b"false" as &[u8]
 1574|       |        };
 1575|  9.82k|        writer.write_all(s)
 1576|  9.82k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1613|  1.19k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1614|  1.19k|    where
 1615|  1.19k|        W: ?Sized + io::Write,
 1616|  1.19k|    {
 1617|  1.19k|        let mut buffer = itoa::Buffer::new();
 1618|  1.19k|        let s = buffer.format(value);
 1619|  1.19k|        writer.write_all(s.as_bytes())
 1620|  1.19k|    }
_RINvNtCsa0kJhncOqqM_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB19_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2061|  70.1k|fn format_escaped_str_contents<W, F>(
 2062|  70.1k|    writer: &mut W,
 2063|  70.1k|    formatter: &mut F,
 2064|  70.1k|    value: &str,
 2065|  70.1k|) -> io::Result<()>
 2066|  70.1k|where
 2067|  70.1k|    W: ?Sized + io::Write,
 2068|  70.1k|    F: ?Sized + Formatter,
 2069|  70.1k|{
 2070|  70.1k|    let bytes = value.as_bytes();
 2071|  70.1k|
 2072|  70.1k|    let mut start = 0;
 2073|       |
 2074|   291k|    for (i, &byte) in bytes.iter().enumerate() {
 2075|   291k|        let escape = ESCAPE[byte as usize];
 2076|   291k|        if escape == 0 {
 2077|   146k|            continue;
 2078|   144k|        }
 2079|   144k|
 2080|   144k|        if start < i {
 2081|  23.0k|            tri!(formatter.write_string_fragment(writer, &value[start..i]));
 2082|   121k|        }
 2083|       |
 2084|   144k|        let char_escape = CharEscape::from_escape_table(escape, byte);
 2085|   144k|        tri!(formatter.write_char_escape(writer, char_escape));
 2086|       |
 2087|   144k|        start = i + 1;
 2088|       |    }
 2089|       |
 2090|  70.1k|    if start == bytes.len() {
 2091|  52.8k|        return Ok(());
 2092|  17.3k|    }
 2093|  17.3k|
 2094|  17.3k|    formatter.write_string_fragment(writer, &value[start..])
 2095|  70.1k|}
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_mapB7_:
  345|  36.8k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  346|  36.8k|        tri!(self
  347|  36.8k|            .formatter
  348|  36.8k|            .begin_object(&mut self.writer)
  349|  36.8k|            .map_err(Error::io));
  350|  36.8k|        if len == Some(0) {
  351|  4.79k|            tri!(self
  352|  4.79k|                .formatter
  353|  4.79k|                .end_object(&mut self.writer)
  354|  4.79k|                .map_err(Error::io));
  355|  4.79k|            Ok(Compound::Map {
  356|  4.79k|                ser: self,
  357|  4.79k|                state: State::Empty,
  358|  4.79k|            })
  359|       |        } else {
  360|  32.1k|            Ok(Compound::Map {
  361|  32.1k|                ser: self,
  362|  32.1k|                state: State::First,
  363|  32.1k|            })
  364|       |        }
  365|  36.8k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1751|   144k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1752|   144k|    where
 1753|   144k|        W: ?Sized + io::Write,
 1754|   144k|    {
 1755|       |        use self::CharEscape::*;
 1756|       |
 1757|   144k|        let s = match char_escape {
 1758|  10.0k|            Quote => b"\\\"",
 1759|    575|            ReverseSolidus => b"\\\\",
 1760|      0|            Solidus => b"\\/",
 1761|    316|            Backspace => b"\\b",
 1762|    282|            FormFeed => b"\\f",
 1763|    902|            LineFeed => b"\\n",
 1764|  1.24k|            CarriageReturn => b"\\r",
 1765|    549|            Tab => b"\\t",
 1766|   131k|            AsciiControl(byte) => {
 1767|   131k|                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1768|   131k|                let bytes = &[
 1769|   131k|                    b'\\',
 1770|   131k|                    b'u',
 1771|   131k|                    b'0',
 1772|   131k|                    b'0',
 1773|   131k|                    HEX_DIGITS[(byte >> 4) as usize],
 1774|   131k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1775|   131k|                ];
 1776|   131k|                return writer.write_all(bytes);
 1777|       |            }
 1778|       |        };
 1779|       |
 1780|  13.9k|        writer.write_all(s)
 1781|   144k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1857|  36.8k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1858|  36.8k|    where
 1859|  36.8k|        W: ?Sized + io::Write,
 1860|  36.8k|    {
 1861|  36.8k|        writer.write_all(b"}")
 1862|  36.8k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1732|  70.1k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1733|  70.1k|    where
 1734|  70.1k|        W: ?Sized + io::Write,
 1735|  70.1k|    {
 1736|  70.1k|        writer.write_all(b"\"")
 1737|  70.1k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1837|  46.5k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1838|  46.5k|    where
 1839|  46.5k|        W: ?Sized + io::Write,
 1840|  46.5k|    {
 1841|  46.5k|        Ok(())
 1842|  46.5k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1866|  62.3k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1867|  62.3k|    where
 1868|  62.3k|        W: ?Sized + io::Write,
 1869|  62.3k|    {
 1870|  62.3k|        if first {
 1871|  32.1k|            Ok(())
 1872|       |        } else {
 1873|  30.2k|            writer.write_all(b",")
 1874|       |        }
 1875|  62.3k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_i64B7_:
  104|  1.19k|    fn serialize_i64(self, value: i64) -> Result<()> {
  105|  1.19k|        self.formatter
  106|  1.19k|            .write_i64(&mut self.writer, value)
  107|  1.19k|            .map_err(Error::io)
  108|  1.19k|    }
_RNvMs0_NtCsa0kJhncOqqM_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   48|  2.92k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   49|  2.92k|        Serializer { writer, formatter }
   50|  2.92k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1847|  36.8k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1848|  36.8k|    where
 1849|  36.8k|        W: ?Sized + io::Write,
 1850|  36.8k|    {
 1851|  36.8k|        writer.write_all(b"{")
 1852|  36.8k|    }
_RINvXs6_NtCsa0kJhncOqqM_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeMap15serialize_valueB1a_EB8_:
  642|  62.3k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  643|  62.3k|    where
  644|  62.3k|        T: ?Sized + Serialize,
  645|  62.3k|    {
  646|  62.3k|        match self {
  647|  62.3k|            Compound::Map { ser, .. } => {
  648|  62.3k|                tri!(ser
  649|  62.3k|                    .formatter
  650|  62.3k|                    .begin_object_value(&mut ser.writer)
  651|  62.3k|                    .map_err(Error::io));
  652|  62.3k|                tri!(value.serialize(&mut **ser));
  653|  62.3k|                ser.formatter
  654|  62.3k|                    .end_object_value(&mut ser.writer)
  655|  62.3k|                    .map_err(Error::io)
  656|       |            }
  657|       |            #[cfg(feature = "arbitrary_precision")]
  658|       |            Compound::Number { .. } => unreachable!(),
  659|       |            #[cfg(feature = "raw_value")]
  660|       |            Compound::RawValue { .. } => unreachable!(),
  661|       |        }
  662|  62.3k|    }
_RNvXs2_NtCsa0kJhncOqqM_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeSeq3endB7_:
  511|  28.4k|    fn end(self) -> Result<()> {
  512|  28.4k|        match self {
  513|  28.4k|            Compound::Map { ser, state } => match state {
  514|  1.85k|                State::Empty => Ok(()),
  515|  26.6k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  516|       |            },
  517|       |            #[cfg(feature = "arbitrary_precision")]
  518|       |            Compound::Number { .. } => unreachable!(),
  519|       |            #[cfg(feature = "raw_value")]
  520|       |            Compound::RawValue { .. } => unreachable!(),
  521|       |        }
  522|  28.4k|    }
_RNvMsa_NtCsa0kJhncOqqM_10serde_json3serNtB5_10CharEscape17from_escape_tableB7_:
 1537|   144k|    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {
 1538|   144k|        match escape {
 1539|    316|            self::BB => CharEscape::Backspace,
 1540|    549|            self::TT => CharEscape::Tab,
 1541|    902|            self::NN => CharEscape::LineFeed,
 1542|    282|            self::FF => CharEscape::FormFeed,
 1543|  1.24k|            self::RR => CharEscape::CarriageReturn,
 1544|  10.0k|            self::QU => CharEscape::Quote,
 1545|    575|            self::BS => CharEscape::ReverseSolidus,
 1546|   131k|            self::UU => CharEscape::AsciiControl(byte),
 1547|      0|            _ => unreachable!(),
 1548|       |        }
 1549|   144k|    }
_RNvXs6_NtCsa0kJhncOqqM_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeMap3endB7_:
  665|  36.8k|    fn end(self) -> Result<()> {
  666|  36.8k|        match self {
  667|  36.8k|            Compound::Map { ser, state } => match state {
  668|  4.79k|                State::Empty => Ok(()),
  669|  32.1k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  670|       |            },
  671|       |            #[cfg(feature = "arbitrary_precision")]
  672|       |            Compound::Number { .. } => unreachable!(),
  673|       |            #[cfg(feature = "raw_value")]
  674|       |            Compound::RawValue { .. } => unreachable!(),
  675|       |        }
  676|  36.8k|    }
_RINvNtCsa0kJhncOqqM_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtB10_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2051|  70.1k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2052|  70.1k|where
 2053|  70.1k|    W: ?Sized + io::Write,
 2054|  70.1k|    F: ?Sized + Formatter,
 2055|  70.1k|{
 2056|  70.1k|    tri!(formatter.begin_string(writer));
 2057|  70.1k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2058|  70.1k|    formatter.end_string(writer)
 2059|  70.1k|}
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1742|  40.3k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1743|  40.3k|    where
 1744|  40.3k|        W: ?Sized + io::Write,
 1745|  40.3k|    {
 1746|  40.3k|        writer.write_all(fragment.as_bytes())
 1747|  40.3k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1668|  3.22k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1669|  3.22k|    where
 1670|  3.22k|        W: ?Sized + io::Write,
 1671|  3.22k|    {
 1672|  3.22k|        let mut buffer = itoa::Buffer::new();
 1673|  3.22k|        let s = buffer.format(value);
 1674|  3.22k|        writer.write_all(s.as_bytes())
 1675|  3.22k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer13serialize_seqB7_:
  280|  28.4k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  281|  28.4k|        tri!(self
  282|  28.4k|            .formatter
  283|  28.4k|            .begin_array(&mut self.writer)
  284|  28.4k|            .map_err(Error::io));
  285|  28.4k|        if len == Some(0) {
  286|  1.85k|            tri!(self
  287|  1.85k|                .formatter
  288|  1.85k|                .end_array(&mut self.writer)
  289|  1.85k|                .map_err(Error::io));
  290|  1.85k|            Ok(Compound::Map {
  291|  1.85k|                ser: self,
  292|  1.85k|                state: State::Empty,
  293|  1.85k|            })
  294|       |        } else {
  295|  26.6k|            Ok(Compound::Map {
  296|  26.6k|                ser: self,
  297|  26.6k|                state: State::First,
  298|  26.6k|            })
  299|       |        }
  300|  28.4k|    }
_RINvYNtNtCsa0kJhncOqqM_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1A_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1892|  62.3k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1893|  62.3k|    where
 1894|  62.3k|        W: ?Sized + io::Write,
 1895|  62.3k|    {
 1896|  62.3k|        writer.write_all(b":")
 1897|  62.3k|    }
_RINvXs2_NtCsa0kJhncOqqM_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsfYlpjij4ZWb_5serde3ser12SerializeSeq17serialize_elementRB1a_EB8_:
  487|  46.5k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  488|  46.5k|    where
  489|  46.5k|        T: ?Sized + Serialize,
  490|  46.5k|    {
  491|  46.5k|        match self {
  492|  46.5k|            Compound::Map { ser, state } => {
  493|  46.5k|                tri!(ser
  494|  46.5k|                    .formatter
  495|  46.5k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  496|  46.5k|                    .map_err(Error::io));
  497|  46.5k|                *state = State::Rest;
  498|  46.5k|                tri!(value.serialize(&mut **ser));
  499|  46.5k|                ser.formatter
  500|  46.5k|                    .end_array_value(&mut ser.writer)
  501|  46.5k|                    .map_err(Error::io)
  502|       |            }
  503|       |            #[cfg(feature = "arbitrary_precision")]
  504|       |            Compound::Number { .. } => unreachable!(),
  505|       |            #[cfg(feature = "raw_value")]
  506|       |            Compound::RawValue { .. } => unreachable!(),
  507|       |        }
  508|  46.5k|    }
_RNvXs1_NtCsa0kJhncOqqM_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsfYlpjij4ZWb_5serde3ser10Serializer14serialize_boolB7_:
   76|  9.82k|    fn serialize_bool(self, value: bool) -> Result<()> {
   77|  9.82k|        self.formatter
   78|  9.82k|            .write_bool(&mut self.writer, value)
   79|  9.82k|            .map_err(Error::io)
   80|  9.82k|    }

_RNvXsf_NtNtCsa0kJhncOqqM_10serde_json5value4fromNtB7_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs9TfoC9TDKig_19fuzz_arbitrary_json:
   12|  4.41k|                fn from(n: $ty) -> Self {
   13|  4.41k|                    Value::Number(n.into())
   14|  4.41k|                }
_RNvXs_NtNtCsa0kJhncOqqM_10serde_json5value4fromNtB6_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromdE4from:
   59|  6.57k|    fn from(f: f64) -> Self {
   60|  6.57k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   61|  6.57k|    }

_RNvXNvXs_NtCsa0kJhncOqqM_10serde_json5valueNtB7_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCs9a1gyOJxq9I_3std2io5Write5write:
  228|   607k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|   607k|                // Safety: the serializer below only emits valid utf8 when using
  230|   607k|                // the default formatter.
  231|   607k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|   607k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|   607k|                Ok(buf.len())
  234|   607k|            }
_RNvXs_NtCsa0kJhncOqqM_10serde_json5valueNtB4_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
  222|  2.92k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  223|  2.92k|        struct WriterFormatter<'a, 'b: 'a> {
  224|  2.92k|            inner: &'a mut fmt::Formatter<'b>,
  225|  2.92k|        }
  226|  2.92k|
  227|  2.92k|        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  228|  2.92k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|  2.92k|                // Safety: the serializer below only emits valid utf8 when using
  230|  2.92k|                // the default formatter.
  231|  2.92k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|  2.92k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|  2.92k|                Ok(buf.len())
  234|  2.92k|            }
  235|  2.92k|
  236|  2.92k|            fn flush(&mut self) -> io::Result<()> {
  237|  2.92k|                Ok(())
  238|  2.92k|            }
  239|  2.92k|        }
  240|  2.92k|
  241|  2.92k|        fn io_error(_: fmt::Error) -> io::Error {
  242|  2.92k|            // Error value does not matter because Display impl just maps it
  243|  2.92k|            // back to fmt::Error.
  244|  2.92k|            io::Error::new(io::ErrorKind::Other, "fmt error")
  245|  2.92k|        }
  246|  2.92k|
  247|  2.92k|        let alternate = f.alternate();
  248|  2.92k|        let mut wr = WriterFormatter { inner: f };
  249|  2.92k|        if alternate {
  250|       |            // {:#}
  251|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  252|       |        } else {
  253|       |            // {}
  254|  2.92k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  255|       |        }
  256|  2.92k|    }

_RINvXNtNtCsa0kJhncOqqM_10serde_json5value3serNtB5_5ValueNtNtCsfYlpjij4ZWb_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BH_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|   111k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|   111k|    where
   15|   111k|        S: ::serde::Serializer,
   16|   111k|    {
   17|   111k|        match self {
   18|  18.2k|            Value::Null => serializer.serialize_unit(),
   19|  9.82k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  10.5k|            Value::Number(n) => n.serialize(serializer),
   21|  7.82k|            Value::String(s) => serializer.serialize_str(s),
   22|  28.4k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  36.8k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  36.8k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|  99.2k|                for (k, v) in m {
   28|  62.3k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  36.8k|                map.end()
   31|       |            }
   32|       |            #[cfg(not(any(feature = "std", feature = "alloc")))]
   33|       |            Value::Object(_) => unreachable!(),
   34|       |        }
   35|   111k|    }

_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6inlineCs9TfoC9TDKig_19fuzz_arbitrary_json:
  637|  32.9k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  32.9k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  32.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2455|  19.0k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  19.0k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  19.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7spilledCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1001|  88.3k|    pub fn spilled(&self) -> bool {
 1002|  88.3k|        self.capacity > Self::inline_capacity()
 1003|  88.3k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  659|  2.47k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  2.47k|        let h = &mut self.heap;
  661|  2.47k|        (h.0, &mut h.1)
  662|  2.47k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2117|  31.9k|    fn drop(&mut self) {
 2118|  31.9k|        unsafe {
 2119|  31.9k|            if self.spilled() {
 2120|    344|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    344|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  31.5k|            } else {
 2123|  31.5k|                ptr::drop_in_place(&mut self[..]);
 2124|  31.5k|            }
 2125|       |        }
 2126|  31.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE6as_ptrCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2459|  32.1k|    fn as_ptr(self) -> *const T {
 2460|  32.1k|        self.0.as_ptr()
 2461|  32.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
  952|    765|    pub fn len(&self) -> usize {
  953|    765|        self.triple().1
  954|    765|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2035|  31.5k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  31.5k|        &mut (&mut **self)[index]
 2037|  31.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs9TfoC9TDKig_19fuzz_arbitrary_json:
  926|   138k|    fn inline_capacity() -> usize {
  927|   138k|        if mem::size_of::<A::Item>() > 0 {
  928|   138k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   138k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8is_emptyCs9TfoC9TDKig_19fuzz_arbitrary_json:
  958|    765|    pub fn is_empty(&self) -> bool {
  959|    765|        self.len() == 0
  960|    765|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  641|  29.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  29.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  29.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8try_growCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1173|     76|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|     76|        unsafe {
 1175|     76|            let unspilled = !self.spilled();
 1176|     76|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|     76|            assert!(new_cap >= len);
 1178|     76|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|     76|            } else if new_cap != cap {
 1187|     76|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|     76|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|     76|                if unspilled {
 1191|     76|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|     76|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|     76|                        .cast();
 1194|     76|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|     76|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|     76|                self.capacity = new_cap;
 1208|      0|            }
 1209|     76|            Ok(())
 1210|       |        }
 1211|     76|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameE6as_ptrCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2459|  27.8k|    fn as_ptr(self) -> *const T {
 2460|  27.8k|        self.0.as_ptr()
 2461|  27.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3popCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1130|  21.5k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  21.5k|        unsafe {
 1132|  21.5k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  21.5k|            let ptr: *const _ = ptr.as_ptr();
 1134|  21.5k|            if *len_ptr == 0 {
 1135|      0|                return None;
 1136|  21.5k|            }
 1137|  21.5k|            let last_index = *len_ptr - 1;
 1138|  21.5k|            *len_ptr = last_index;
 1139|  21.5k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  21.5k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1855|  31.5k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  31.5k|        unsafe {
 1857|  31.5k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  31.5k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  31.5k|        }
 1860|  31.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E4pushCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1114|  28.2k|    pub fn push(&mut self, value: A::Item) {
 1115|  28.2k|        unsafe {
 1116|  28.2k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  28.2k|            if *len == cap {
 1118|     76|                self.reserve_one_unchecked();
 1119|     76|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|     76|                ptr = heap_ptr;
 1121|     76|                len = heap_len;
 1122|  28.1k|            }
 1123|  28.2k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  28.2k|            *len += 1;
 1125|  28.2k|        }
 1126|  28.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8heap_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  659|    344|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|    344|        let h = &mut self.heap;
  661|    344|        (h.0, &mut h.1)
  662|    344|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8capacityCs9TfoC9TDKig_19fuzz_arbitrary_json:
  964|     76|    pub fn capacity(&self) -> usize {
  965|     76|        self.triple().2
  966|     76|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2420|   144k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E6inlineCs9TfoC9TDKig_19fuzz_arbitrary_json:
  637|  19.0k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  19.0k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  19.0k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2455|  26.9k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  26.9k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  26.9k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2035|  2.01k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  2.01k|        &mut (&mut **self)[index]
 2037|  2.01k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameECs9TfoC9TDKig_19fuzz_arbitrary_json:
  328|     76|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|     76|    let size = mem::size_of::<T>()
  330|     76|        .checked_mul(n)
  331|     76|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|     76|    let align = mem::align_of::<T>();
  333|     76|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|     76|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6inlineCs9TfoC9TDKig_19fuzz_arbitrary_json:
  637|  26.9k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  26.9k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  26.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7spilledCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1001|  96.4k|    pub fn spilled(&self) -> bool {
 1002|  96.4k|        self.capacity > Self::inline_capacity()
 1003|  96.4k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2117|  2.09k|    fn drop(&mut self) {
 2118|  2.09k|        unsafe {
 2119|  2.09k|            if self.spilled() {
 2120|     76|                let (ptr, &mut len) = self.data.heap_mut();
 2121|     76|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  2.01k|            } else {
 2123|  2.01k|                ptr::drop_in_place(&mut self[..]);
 2124|  2.01k|            }
 2125|       |        }
 2126|  2.09k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1845|  26.2k|    fn deref(&self) -> &[A::Item] {
 1846|  26.2k|        unsafe {
 1847|  26.2k|            let (ptr, len, _) = self.triple();
 1848|  26.2k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  26.2k|        }
 1850|  26.2k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2420|   160k|                fn size() -> usize { $size }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1855|  29.4k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  29.4k|        unsafe {
 1857|  29.4k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  29.4k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  29.4k|        }
 1860|  29.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E15inline_capacityCs9TfoC9TDKig_19fuzz_arbitrary_json:
  926|   160k|    fn inline_capacity() -> usize {
  927|   160k|        if mem::size_of::<A::Item>() > 0 {
  928|   160k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   160k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6tripleCs9TfoC9TDKig_19fuzz_arbitrary_json:
  971|  26.9k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  26.9k|        unsafe {
  973|  26.9k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  26.9k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  26.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10triple_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  984|  31.5k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  31.5k|        unsafe {
  986|  31.5k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  31.5k|                (
  991|  31.5k|                    self.data.inline_mut(),
  992|  31.5k|                    &mut self.capacity,
  993|  31.5k|                    Self::inline_capacity(),
  994|  31.5k|                )
  995|       |            }
  996|       |        }
  997|  31.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
  952|    152|    pub fn len(&self) -> usize {
  953|    152|        self.triple().1
  954|    152|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E6tripleCs9TfoC9TDKig_19fuzz_arbitrary_json:
  971|  28.1k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  28.1k|        unsafe {
  973|  28.1k|            if self.spilled() {
  974|  9.03k|                let (ptr, len) = self.data.heap();
  975|  9.03k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  19.0k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  28.1k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1845|  27.8k|    fn deref(&self) -> &[A::Item] {
 1846|  27.8k|        unsafe {
 1847|  27.8k|            let (ptr, len, _) = self.triple();
 1848|  27.8k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  27.8k|        }
 1850|  27.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10inline_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  641|  31.5k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  31.5k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  31.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E10inline_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  641|  37.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  37.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  37.4k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2455|  32.9k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  32.9k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  32.9k|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2420|   138k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E9from_heapCs9TfoC9TDKig_19fuzz_arbitrary_json:
  664|     76|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|     76|        SmallVecData { heap: (ptr, len) }
  666|     76|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2035|  29.4k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  29.4k|        &mut (&mut **self)[index]
 2037|  29.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1225|     76|    fn reserve_one_unchecked(&mut self) {
 1226|     76|        debug_assert_eq!(self.len(), self.capacity());
 1227|     76|        let new_cap = self.len()
 1228|     76|            .checked_add(1)
 1229|     76|            .and_then(usize::checked_next_power_of_two)
 1230|     76|            .expect("capacity overflow");
 1231|     76|        infallible(self.try_grow(new_cap))
 1232|     76|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E7spilledCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1001|  82.2k|    pub fn spilled(&self) -> bool {
 1002|  82.2k|        self.capacity > Self::inline_capacity()
 1003|  82.2k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2117|  31.9k|    fn drop(&mut self) {
 2118|  31.9k|        unsafe {
 2119|  31.9k|            if self.spilled() {
 2120|  2.47k|                let (ptr, &mut len) = self.data.heap_mut();
 2121|  2.47k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  29.4k|            } else {
 2123|  29.4k|                ptr::drop_in_place(&mut self[..]);
 2124|  29.4k|            }
 2125|       |        }
 2126|  31.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E10triple_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  984|  51.9k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  51.9k|        unsafe {
  986|  51.9k|            if self.spilled() {
  987|  14.5k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  14.5k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  37.4k|                (
  991|  37.4k|                    self.data.inline_mut(),
  992|  37.4k|                    &mut self.capacity,
  993|  37.4k|                    Self::inline_capacity(),
  994|  37.4k|                )
  995|       |            }
  996|       |        }
  997|  51.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E3lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
  952|    765|    pub fn len(&self) -> usize {
  953|    765|        self.triple().1
  954|    765|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs9TfoC9TDKig_19fuzz_arbitrary_json:
  318|     76|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|     76|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|     76|}
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1845|  32.1k|    fn deref(&self) -> &[A::Item] {
 1846|  32.1k|        unsafe {
 1847|  32.1k|            let (ptr, len, _) = self.triple();
 1848|  32.1k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  32.1k|        }
 1850|  32.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8heap_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  659|  14.6k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  14.6k|        let h = &mut self.heap;
  661|  14.6k|        (h.0, &mut h.1)
  662|  14.6k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityCs9TfoC9TDKig_19fuzz_arbitrary_json:
  926|   144k|    fn inline_capacity() -> usize {
  927|   144k|        if mem::size_of::<A::Item>() > 0 {
  928|   144k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   144k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8is_emptyCs9TfoC9TDKig_19fuzz_arbitrary_json:
  958|    765|    pub fn is_empty(&self) -> bool {
  959|    765|        self.len() == 0
  960|    765|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1855|  2.01k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  2.01k|        unsafe {
 1857|  2.01k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  2.01k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  2.01k|        }
 1860|  2.01k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  984|  29.4k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  29.4k|        unsafe {
  986|  29.4k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  29.4k|                (
  991|  29.4k|                    self.data.inline_mut(),
  992|  29.4k|                    &mut self.capacity,
  993|  29.4k|                    Self::inline_capacity(),
  994|  29.4k|                )
  995|       |            }
  996|       |        }
  997|  29.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6tripleCs9TfoC9TDKig_19fuzz_arbitrary_json:
  971|  32.9k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  32.9k|        unsafe {
  973|  32.9k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  32.9k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  32.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE6as_ptrCs9TfoC9TDKig_19fuzz_arbitrary_json:
 2459|  26.2k|    fn as_ptr(self) -> *const T {
 2460|  26.2k|        self.0.as_ptr()
 2461|  26.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E4heapCs9TfoC9TDKig_19fuzz_arbitrary_json:
  655|  9.03k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  9.03k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  9.03k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3newBO_:
  779|  2.09k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.09k|        assert!(
  783|  2.09k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.09k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.09k|        SmallVec {
  787|  2.09k|            capacity: 0,
  788|  2.09k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.09k|        }
  790|  2.09k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7reserveB1E_:
 1219|  44.1k|    pub fn reserve(&mut self, additional: usize) {
 1220|  44.1k|        infallible(self.try_reserve(additional))
 1221|  44.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8heap_mutBT_:
  659|  67.6k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  67.6k|        let h = &mut self.heap;
  661|  67.6k|        (h.0, &mut h.1)
  662|  67.6k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  926|   499k|    fn inline_capacity() -> usize {
  927|   499k|        if mem::size_of::<A::Item>() > 0 {
  928|   499k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   499k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  645|  94.9k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  94.9k|        SmallVecData {
  647|  94.9k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  94.9k|        }
  649|  94.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E15inline_capacityB1E_:
  926|   457k|    fn inline_capacity() -> usize {
  927|   457k|        if mem::size_of::<A::Item>() > 0 {
  928|   457k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   457k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeB1p_:
 2420|   552k|                fn size() -> usize { $size }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2035|  61.4k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  61.4k|        &mut (&mut **self)[index]
 2037|  61.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E21reserve_one_uncheckedBM_:
 1225|  4.13k|    fn reserve_one_unchecked(&mut self) {
 1226|  4.13k|        debug_assert_eq!(self.len(), self.capacity());
 1227|  4.13k|        let new_cap = self.len()
 1228|  4.13k|            .checked_add(1)
 1229|  4.13k|            .and_then(usize::checked_next_power_of_two)
 1230|  4.13k|            .expect("capacity overflow");
 1231|  4.13k|        infallible(self.try_grow(new_cap))
 1232|  4.13k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11inline_sizeBM_:
  946|  2.92k|    pub fn inline_size(&self) -> usize {
  947|  2.92k|        Self::inline_capacity()
  948|  2.92k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8capacityBM_:
  964|  4.13k|    pub fn capacity(&self) -> usize {
  965|  4.13k|        self.triple().2
  966|  4.13k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop13increment_lenCs8dUjriG0K0U_8rsonpath:
 2350|  62.8k|    fn increment_len(&mut self, increment: usize) {
 2351|  62.8k|        self.local_len += increment;
 2352|  62.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutBR_:
  659|  6.57k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  6.57k|        let h = &mut self.heap;
  661|  6.57k|        (h.0, &mut h.1)
  662|  6.57k|    }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2052|  44.1k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  44.1k|        let mut v = SmallVec::new();
 2054|  44.1k|        v.extend(iterable);
 2055|  44.1k|        v
 2056|  44.1k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefB1E_:
 1845|  44.1k|    fn deref(&self) -> &[A::Item] {
 1846|  44.1k|        unsafe {
 1847|  44.1k|            let (ptr, len, _) = self.triple();
 1848|  44.1k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  44.1k|        }
 1850|  44.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  637|  52.2k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  52.2k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  52.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBO_:
 1225|    939|    fn reserve_one_unchecked(&mut self) {
 1226|    939|        debug_assert_eq!(self.len(), self.capacity());
 1227|    939|        let new_cap = self.len()
 1228|    939|            .checked_add(1)
 1229|    939|            .and_then(usize::checked_next_power_of_two)
 1230|    939|            .expect("capacity overflow");
 1231|    939|        infallible(self.try_grow(new_cap))
 1232|    939|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8try_growBM_:
 1173|  4.13k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|  4.13k|        unsafe {
 1175|  4.13k|            let unspilled = !self.spilled();
 1176|  4.13k|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|  4.13k|            assert!(new_cap >= len);
 1178|  4.13k|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|  4.13k|            } else if new_cap != cap {
 1187|  4.13k|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|  4.13k|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|  4.13k|                if unspilled {
 1191|  4.04k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|  4.04k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|  4.04k|                        .cast();
 1194|  4.04k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|     85|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|     85|                    let new_ptr =
 1201|     85|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|     85|                    new_alloc = NonNull::new(new_ptr)
 1203|     85|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|     85|                        .cast();
 1205|       |                }
 1206|  4.13k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|  4.13k|                self.capacity = new_cap;
 1208|      0|            }
 1209|  4.13k|            Ok(())
 1210|       |        }
 1211|  4.13k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBM_:
 1845|  44.1k|    fn deref(&self) -> &[A::Item] {
 1846|  44.1k|        unsafe {
 1847|  44.1k|            let (ptr, len, _) = self.triple();
 1848|  44.1k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  44.1k|        }
 1850|  44.1k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2420|   144k|                fn size() -> usize { $size }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBM_:
 1855|  61.4k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  61.4k|        unsafe {
 1857|  61.4k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  61.4k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  61.4k|        }
 1860|  61.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8try_growB1E_:
 1173|    951|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    951|        unsafe {
 1175|    951|            let unspilled = !self.spilled();
 1176|    951|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    951|            assert!(new_cap >= len);
 1178|    951|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    951|            } else if new_cap != cap {
 1187|    951|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    951|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    951|                if unspilled {
 1191|    951|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    951|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    951|                        .cast();
 1194|    951|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|    951|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    951|                self.capacity = new_cap;
 1208|      0|            }
 1209|    951|            Ok(())
 1210|       |        }
 1211|    951|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256EBJ_:
  328|  1.65k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  1.65k|    let size = mem::size_of::<T>()
  330|  1.65k|        .checked_mul(n)
  331|  1.65k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  1.65k|    let align = mem::align_of::<T>();
  333|  1.65k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  1.65k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E4heapBR_:
  655|  4.30k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  4.30k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  4.30k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBM_:
 2117|  63.0k|    fn drop(&mut self) {
 2118|  63.0k|        unsafe {
 2119|  63.0k|            if self.spilled() {
 2120|  1.57k|                let (ptr, &mut len) = self.data.heap_mut();
 2121|  1.57k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  61.4k|            } else {
 2123|  61.4k|                ptr::drop_in_place(&mut self[..]);
 2124|  61.4k|            }
 2125|       |        }
 2126|  63.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E9from_heapBT_:
  664|    939|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    939|        SmallVecData { heap: (ptr, len) }
  666|    939|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2420|  4.18k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E4pushBM_:
 1114|  4.83k|    pub fn push(&mut self, value: A::Item) {
 1115|  4.83k|        unsafe {
 1116|  4.83k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  4.83k|            if *len == cap {
 1118|  4.13k|                self.reserve_one_unchecked();
 1119|  4.13k|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|  4.13k|                ptr = heap_ptr;
 1121|  4.13k|                len = heap_len;
 1122|  4.13k|            }
 1123|  4.83k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  4.83k|            *len += 1;
 1125|  4.83k|        }
 1126|  4.83k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1219|  44.1k|    pub fn reserve(&mut self, additional: usize) {
 1220|  44.1k|        infallible(self.try_reserve(additional))
 1221|  44.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  946|  2.09k|    pub fn inline_size(&self) -> usize {
  947|  2.09k|        Self::inline_capacity()
  948|  2.09k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultB1E_:
 2096|  47.9k|    fn default() -> SmallVec<A> {
 2097|  47.9k|        SmallVec::new()
 2098|  47.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E6tripleBO_:
  971|  2.81k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  2.81k|        unsafe {
  973|  2.81k|            if self.spilled() {
  974|  2.13k|                let (ptr, len) = self.data.heap();
  975|  2.13k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|    681|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  2.81k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  641|  32.0k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  32.0k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  32.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  946|  2.92k|    pub fn inline_size(&self) -> usize {
  947|  2.92k|        Self::inline_capacity()
  948|  2.92k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBO_:
 1855|  2.70k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  2.70k|        unsafe {
 1857|  2.70k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  2.70k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  2.70k|        }
 1860|  2.70k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3newCs8dUjriG0K0U_8rsonpath:
 2337|  88.2k|    fn new(len: &'a mut usize) -> Self {
 2338|  88.2k|        SetLenOnDrop {
 2339|  88.2k|            local_len: *len,
 2340|  88.2k|            len,
 2341|  88.2k|        }
 2342|  88.2k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2455|  52.2k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  52.2k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  52.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6tripleB1E_:
  971|  44.1k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  44.1k|        unsafe {
  973|  44.1k|            if self.spilled() {
  974|    951|                let (ptr, len) = self.data.heap();
  975|    951|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  43.1k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  44.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E4heapBT_:
  655|  2.13k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  2.13k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  2.13k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E3newB1E_:
  779|  94.9k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  94.9k|        assert!(
  783|  94.9k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  94.9k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  94.9k|        SmallVec {
  787|  94.9k|            capacity: 0,
  788|  94.9k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  94.9k|        }
  790|  94.9k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionEBH_:
  328|  4.21k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  4.21k|    let size = mem::size_of::<T>()
  330|  4.21k|        .checked_mul(n)
  331|  4.21k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  4.21k|    let align = mem::align_of::<T>();
  333|  4.21k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  4.21k|}
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7spilledB1E_:
 1001|   259k|    pub fn spilled(&self) -> bool {
 1002|   259k|        self.capacity > Self::inline_capacity()
 1003|   259k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  984|  98.6k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  98.6k|        unsafe {
  986|  98.6k|            if self.spilled() {
  987|  66.5k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  66.5k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  32.0k|                (
  991|  32.0k|                    self.data.inline_mut(),
  992|  32.0k|                    &mut self.capacity,
  993|  32.0k|                    Self::inline_capacity(),
  994|  32.0k|                )
  995|       |            }
  996|       |        }
  997|  98.6k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE3newB1I_:
 2455|  43.1k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  43.1k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  43.1k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3getCs8dUjriG0K0U_8rsonpath:
 2345|   213k|    fn get(&self) -> usize {
 2346|   213k|        self.local_len
 2347|   213k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8try_growBO_:
 1173|    939|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    939|        unsafe {
 1175|    939|            let unspilled = !self.spilled();
 1176|    939|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    939|            assert!(new_cap >= len);
 1178|    939|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    939|            } else if new_cap != cap {
 1187|    939|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    939|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    939|                if unspilled {
 1191|    227|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    227|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    227|                        .cast();
 1194|    227|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|    712|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|    712|                    let new_ptr =
 1201|    712|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|    712|                    new_alloc = NonNull::new(new_ptr)
 1203|    712|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|    712|                        .cast();
 1205|       |                }
 1206|    939|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    939|                self.capacity = new_cap;
 1208|      0|            }
 1209|    939|            Ok(())
 1210|       |        }
 1211|    939|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2420|   594k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1001|   282k|    pub fn spilled(&self) -> bool {
 1002|   282k|        self.capacity > Self::inline_capacity()
 1003|   282k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  926|  2.09k|    fn inline_capacity() -> usize {
  927|  2.09k|        if mem::size_of::<A::Item>() > 0 {
  928|  2.09k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|  2.09k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3lenBO_:
  952|  1.87k|    pub fn len(&self) -> usize {
  953|  1.87k|        self.triple().1
  954|  1.87k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  779|  94.9k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  94.9k|        assert!(
  783|  94.9k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  94.9k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  94.9k|        SmallVec {
  787|  94.9k|            capacity: 0,
  788|  94.9k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  94.9k|        }
  790|  94.9k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E9from_heapB1J_:
  664|    951|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    951|        SmallVecData { heap: (ptr, len) }
  666|    951|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropB1E_:
 2117|  63.0k|    fn drop(&mut self) {
 2118|  63.0k|        unsafe {
 2119|  63.0k|            if self.spilled() {
 2120|    607|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    607|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  62.4k|            } else {
 2123|  62.4k|                ptr::drop_in_place(&mut self[..]);
 2124|  62.4k|            }
 2125|       |        }
 2126|  63.0k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutB1E_:
 2035|  62.4k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  62.4k|        &mut (&mut **self)[index]
 2037|  62.4k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11from_inlineB1J_:
  645|  94.9k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  94.9k|        SmallVecData {
  647|  94.9k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  94.9k|        }
  649|  94.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2459|  44.1k|    fn as_ptr(self) -> *const T {
 2460|  44.1k|        self.0.as_ptr()
 2461|  44.1k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBO_:
 2117|  2.92k|    fn drop(&mut self) {
 2118|  2.92k|        unsafe {
 2119|  2.92k|            if self.spilled() {
 2120|    227|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    227|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  2.70k|            } else {
 2123|  2.70k|                ptr::drop_in_place(&mut self[..]);
 2124|  2.70k|            }
 2125|       |        }
 2126|  2.92k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E9from_heapBR_:
  664|  4.13k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|  4.13k|        SmallVecData { heap: (ptr, len) }
  666|  4.13k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  645|  2.09k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.09k|        SmallVecData {
  647|  2.09k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.09k|        }
  649|  2.09k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  641|   157k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   157k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   157k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1237|  44.1k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  44.1k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  44.1k|        // calls to it from callers.
 1240|  44.1k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  44.1k|        if cap - len >= additional {
 1242|  44.1k|            return Ok(());
 1243|      0|        }
 1244|      0|        let new_cap = len
 1245|      0|            .checked_add(additional)
 1246|      0|            .and_then(usize::checked_next_power_of_two)
 1247|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|      0|        self.try_grow(new_cap)
 1249|  44.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11try_reserveB1E_:
 1237|  44.1k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  44.1k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  44.1k|        // calls to it from callers.
 1240|  44.1k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  44.1k|        if cap - len >= additional {
 1242|  43.1k|            return Ok(());
 1243|    951|        }
 1244|    951|        let new_cap = len
 1245|    951|            .checked_add(additional)
 1246|    951|            .and_then(usize::checked_next_power_of_two)
 1247|    951|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|    951|        self.try_grow(new_cap)
 1249|  44.1k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5x_9Minimizer18process_superstates_0EEB1F_:
 2060|  44.1k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  44.1k|        let mut iter = iterable.into_iter();
 2062|  44.1k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  44.1k|        self.reserve(lower_size_bound);
 2064|  44.1k|
 2065|  44.1k|        unsafe {
 2066|  44.1k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  44.1k|            let ptr = ptr.as_ptr();
 2068|  44.1k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  65.9k|            while len.get() < cap {
 2070|  62.1k|                if let Some(out) = iter.next() {
 2071|  21.7k|                    ptr::write(ptr.add(len.get()), out);
 2072|  21.7k|                    len.increment_len(1);
 2073|  21.7k|                } else {
 2074|  40.3k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|  3.76k|        for elem in iter {
 2080|      0|            self.push(elem);
 2081|      0|        }
 2082|  44.1k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2060|  44.1k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  44.1k|        let mut iter = iterable.into_iter();
 2062|  44.1k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  44.1k|        self.reserve(lower_size_bound);
 2064|  44.1k|
 2065|  44.1k|        unsafe {
 2066|  44.1k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  44.1k|            let ptr = ptr.as_ptr();
 2068|  44.1k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  85.1k|            while len.get() < cap {
 2070|  72.8k|                if let Some(out) = iter.next() {
 2071|  41.0k|                    ptr::write(ptr.add(len.get()), out);
 2072|  41.0k|                    len.increment_len(1);
 2073|  41.0k|                } else {
 2074|  31.7k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|  17.1k|        for elem in iter {
 2080|  4.83k|            self.push(elem);
 2081|  4.83k|        }
 2082|  44.1k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE6as_ptrB1I_:
 2459|  44.1k|    fn as_ptr(self) -> *const T {
 2460|  44.1k|        self.0.as_ptr()
 2461|  44.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8heap_mutB1J_:
  659|  1.55k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  1.55k|        let h = &mut self.heap;
  661|  1.55k|        (h.0, &mut h.1)
  662|  1.55k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  645|  2.92k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.92k|        SmallVecData {
  647|  2.92k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.92k|        }
  649|  2.92k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10inline_mutB1J_:
  641|   150k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   150k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   150k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs8dUjriG0K0U_8rsonpath:
  318|  93.2k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|  93.2k|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|  93.2k|}
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutB1E_:
 1855|  62.4k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  62.4k|        unsafe {
 1857|  62.4k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  62.4k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  62.4k|        }
 1860|  62.4k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2035|  2.70k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  2.70k|        &mut (&mut **self)[index]
 2037|  2.70k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E4heapB1J_:
  655|    951|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    951|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    951|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1114|  47.9k|    pub fn push(&mut self, value: A::Item) {
 1115|  47.9k|        unsafe {
 1116|  47.9k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  47.9k|            if *len == cap {
 1118|    939|                self.reserve_one_unchecked();
 1119|    939|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|    939|                ptr = heap_ptr;
 1121|    939|                len = heap_len;
 1122|  47.0k|            }
 1123|  47.9k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  47.9k|            *len += 1;
 1125|  47.9k|        }
 1126|  47.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8capacityBO_:
  964|    939|    pub fn capacity(&self) -> usize {
  965|    939|        self.triple().2
  966|    939|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  984|   158k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   158k|        unsafe {
  986|   158k|            if self.spilled() {
  987|    872|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    872|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   157k|                (
  991|   157k|                    self.data.inline_mut(),
  992|   157k|                    &mut self.capacity,
  993|   157k|                    Self::inline_capacity(),
  994|   157k|                )
  995|       |            }
  996|       |        }
  997|   158k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1001|   105k|    pub fn spilled(&self) -> bool {
 1002|   105k|        self.capacity > Self::inline_capacity()
 1003|   105k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  926|   141k|    fn inline_capacity() -> usize {
  927|   141k|        if mem::size_of::<A::Item>() > 0 {
  928|   141k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   141k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11inline_sizeB1E_:
  946|  2.92k|    pub fn inline_size(&self) -> usize {
  947|  2.92k|        Self::inline_capacity()
  948|  2.92k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  779|  2.92k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.92k|        assert!(
  783|  2.92k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.92k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.92k|        SmallVec {
  787|  2.92k|            capacity: 0,
  788|  2.92k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.92k|        }
  790|  2.92k|    }
_RNvXsP_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs8dUjriG0K0U_8rsonpath:
 2357|  88.2k|    fn drop(&mut self) {
 2358|  88.2k|        *self.len = self.local_len;
 2359|  88.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6inlineB1J_:
  637|  43.1k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  43.1k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  43.1k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEEB1z_:
  328|    951|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|    951|    let size = mem::size_of::<T>()
  330|    951|        .checked_mul(n)
  331|    951|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|    951|    let align = mem::align_of::<T>();
  333|    951|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|    951|}
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5H_9Minimizer18process_superstates_0EEB1F_:
 2052|  44.1k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  44.1k|        let mut v = SmallVec::new();
 2054|  44.1k|        v.extend(iterable);
 2055|  44.1k|        v
 2056|  44.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1130|  47.0k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  47.0k|        unsafe {
 1132|  47.0k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  47.0k|            let ptr: *const _ = ptr.as_ptr();
 1134|  47.0k|            if *len_ptr == 0 {
 1135|  2.85k|                return None;
 1136|  44.1k|            }
 1137|  44.1k|            let last_index = *len_ptr - 1;
 1138|  44.1k|            *len_ptr = last_index;
 1139|  44.1k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  47.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3lenBM_:
  952|  8.26k|    pub fn len(&self) -> usize {
  953|  8.26k|        self.triple().1
  954|  8.26k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10triple_mutB1E_:
  984|   151k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   151k|        unsafe {
  986|   151k|            if self.spilled() {
  987|    951|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    951|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   150k|                (
  991|   150k|                    self.data.inline_mut(),
  992|   150k|                    &mut self.capacity,
  993|   150k|                    Self::inline_capacity(),
  994|   150k|                )
  995|       |            }
  996|       |        }
  997|   151k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBM_:
 2096|  47.9k|    fn default() -> SmallVec<A> {
 2097|  47.9k|        SmallVec::new()
 2098|  47.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E3newBS_:
 2455|    681|    fn new(ptr: *const T) -> Option<Self> {
 2456|    681|        NonNull::new(ptr as *mut T).map(Self)
 2457|    681|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E6inlineBT_:
  637|    681|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|    681|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|    681|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  971|  56.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  56.5k|        unsafe {
  973|  56.5k|            if self.spilled() {
  974|  4.30k|                let (ptr, len) = self.data.heap();
  975|  4.30k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  52.2k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  56.5k|    }

_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintB1E_:
  326|  44.1k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  44.1k|        self.iter.size_hint()
  328|  44.1k|    }
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E7get_mutBJ_E00B1E_:
   96|  4.40k|        self.position(key).map(move |p| &mut self.values[p])
_RNvXs7_CsEjgspSwkHp_10vector_mapQINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1D_:
  299|  44.1k|    fn into_iter(self) -> Self::IntoIter {
  300|  44.1k|        self.iter_mut()
  301|  44.1k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE13with_capacity0BM_:
   49|  2.92k|    #[post(ret.len() == 0)]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3new0BM_:
   41|  2.92k|    #[post(ret.len() == 0)]
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE12contains_keyBF_EBL_:
   83|   114k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|   114k|        self.position(key).is_some()
   85|   114k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E13with_capacity0B1B_:
   49|  44.1k|    #[post(ret.len() == 0)]
_RNvXs8_CsEjgspSwkHp_10vector_mapINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1C_:
  307|  44.1k|    fn into_iter(self) -> Self::IntoIter {
  308|  44.1k|        IntoIter {
  309|  44.1k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  44.1k|        }
  311|  44.1k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE13with_capacity0BM_:
   49|  2.92k|    #[post(ret.len() == 0)]
_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBI_5state5StateE3lenBK_:
   60|  48.0k|    pub fn len(&self) -> usize {
   61|  48.0k|        self.keys.len()
   62|  48.0k|    }
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE8positionBH_E0BN_:
   80|  12.8M|        self.keys.iter().position(|k| key == k)
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBN_3nfa10NfaStateIdE3getBJ_E00BP_:
   90|  34.4k|        self.position(key).map(|p| &self.values[p])
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE8positionBF_EBL_:
   79|   321k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   321k|        self.keys.iter().position(|k| key == k)
   81|   321k|    }
_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8iter_mutB1z_:
  175|  44.1k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  44.1k|        IterMut {
  177|  44.1k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  44.1k|        }
  179|  44.1k|    }
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8positionBF_EB1A_:
   79|  48.0k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  48.0k|        self.keys.iter().position(|k| key == k)
   81|  48.0k|    }
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8positionBH_E0B1C_:
   80|  20.0k|        self.keys.iter().position(|k| key == k)
_RNvXsr_CsEjgspSwkHp_10vector_mapINtB5_7IterMutRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1D_:
  494|  65.9k|            fn next(&mut self) -> Option<Self::Item> {
  495|  65.9k|                self.iter.next()
  496|  65.9k|            }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE3new0BM_:
   41|  2.92k|    #[post(ret.len() == 0)]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE6insert0BM_:
   99|   116k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E3new0B1B_:
   41|  44.1k|    #[post(ret.len() == 0)]
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE8positionBH_E0BN_:
   80|  26.4M|        self.keys.iter().position(|k| key == k)
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBN_5state5StateE3getBJ_E00BP_:
   90|   155k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE6insert0BM_:
   99|  50.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E6insert0B1B_:
   99|  21.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1E_:
  322|  65.9k|    fn next(&mut self) -> Option<(K, V)> {
  323|  65.9k|        self.iter.next()
  324|  65.9k|    }
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE8positionBF_EBL_:
   79|   152k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   152k|        self.keys.iter().position(|k| key == k)
   81|   152k|    }
_RNvXs4_CsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBH_E5indexBN_:
  277|   155k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|   155k|        self.get(key).unwrap()
  279|   155k|    }


_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  404|   118k|    pub fn fallback_state(&self) -> State {
  405|   118k|        self.fallback_state
  406|   118k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  328|  8.63k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  329|  8.63k|        let state = &self[state];
  330|  8.63k|        state.attributes.has_array_transition_to_accepting()
  331|  5.07k|            && state
  332|  5.07k|                .array_transitions()
  333|  5.07k|                .iter()
  334|  5.07k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
  335|  8.63k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  367|  28.6k|    pub fn is_rejecting(&self, state: State) -> bool {
  368|  28.6k|        self[state].attributes.is_rejecting()
  369|  28.6k|    }
_RNCNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  334|  5.49k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton13initial_state:
  248|  4.18k|    pub fn initial_state(&self) -> State {
  249|  4.18k|        State(1)
  250|  4.18k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition12target_state:
  108|  89.0k|    pub(crate) fn target_state(&self) -> State {
  109|  89.0k|        self.target
  110|  89.0k|    }
_RNvXs1_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
   97|   447k|    fn index(&self, index: State) -> &Self::Output {
   98|   447k|        &self.states[index.0 as usize]
   99|   447k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  388|  26.0k|    pub fn is_unitary(&self, state: State) -> bool {
  389|  26.0k|        self[state].attributes.is_unitary()
  390|  26.0k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton29has_any_array_item_transition:
  282|  46.1k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  283|  46.1k|        self[state].attributes.has_array_transition()
  284|  46.1k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  218|  2.09k|    pub fn is_empty_query(&self) -> bool {
  219|  2.09k|        self.states.len() == 2
  220|      0|            && self.states[1].array_transitions.is_empty()
  221|      0|            && self.states[1].member_transitions.is_empty()
  222|      0|            && self.states[1].fallback_state == State(0)
  223|      0|            && !self.states[1].attributes.is_accepting()
  224|  2.09k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  307|  6.30k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  308|  6.30k|        self.has_array_index_transition_to_accepting(state, &JsonUInt::ZERO)
  309|  6.30k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  187|  2.85k|    pub fn is_select_root_query(&self) -> bool {
  188|  2.85k|        self.states.len() == 2
  189|    765|            && self.states[1].array_transitions.is_empty()
  190|    765|            && self.states[1].member_transitions.is_empty()
  191|    765|            && self.states[1].fallback_state == State(0)
  192|    765|            && self.states[1].attributes.is_accepting()
  193|  2.85k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  265|   135k|    pub fn is_accepting(&self, state: State) -> bool {
  266|   135k|        self[state].attributes.is_accepting()
  267|   135k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  350|  30.4k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  351|  30.4k|        self[state].attributes.has_transition_to_accepting()
  352|  30.4k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition7matches:
  113|  11.9k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  114|  11.9k|        self.label.matches(index)
  115|  11.9k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  161|  2.92k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  162|  2.92k|        let nfa = NondeterministicAutomaton::new(query)?;
  163|      0|        debug!("NFA: {}", nfa);
  164|  2.92k|        Automaton::minimize(nfa)
  165|  2.92k|    }
_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  424|  32.1k|    pub fn member_transitions(&self) -> &[MemberTransition<'q>] {
  425|  32.1k|        &self.member_transitions
  426|  32.1k|    }
_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  414|  26.2k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  415|  26.2k|        &self.array_transitions
  416|  26.2k|    }
_RNvMsa_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_11SimpleSlice3newB7_:
  516|  3.44k|    fn new(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Self {
  517|  3.44k|        Self { start, end, step }
  518|  3.44k|    }
_RNvMs3_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabel7matches:
  119|  11.9k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  120|  11.9k|        match self {
  121|  11.9k|            Self::Index(i) => index.eq(i),
  122|      0|            Self::Slice(s) => s.contains(index),
  123|       |        }
  124|  11.9k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition3newB7_:
  103|  45.8k|    pub(crate) fn new(label: ArrayTransitionLabel, target: State) -> Self {
  104|  45.8k|        Self { label, target }
  105|  45.8k|    }
_RNvMs3_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabel20matches_at_most_once:
  126|    167|    fn matches_at_most_once(&self) -> bool {
  127|    167|        match self {
  128|    167|            Self::Index(_) => true,
  129|      0|            Self::Slice(slice) => {
  130|      0|                slice.step == JsonUInt::ZERO && slice.end.map_or(false, |end| slice.start.as_u64() + 1 >= end.as_u64())
  131|       |            }
  132|       |        }
  133|    167|    }
_RNvXNtCs8dUjriG0K0U_8rsonpath9automatonNtB2_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB4_:
   64|  47.9k|    fn default() -> Self {
   65|  47.9k|        Self {
   66|  47.9k|            attributes: StateAttributes::default(),
   67|  47.9k|            member_transitions: SmallVec::default(),
   68|  47.9k|            array_transitions: SmallVec::default(),
   69|  47.9k|            fallback_state: State(0),
   70|  47.9k|        }
   71|  47.9k|    }
_RNvXs4_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabelINtNtCslATUeuPuGvJ_4core7convert4FromNtNtCsmyidsRPtaf_15rsonpath_syntax3num8JsonUIntE4from:
  139|  5.70k|    fn from(index: JsonUInt) -> Self {
  140|  5.70k|        Self::Index(index)
  141|  5.70k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton8minimize:
  392|  2.92k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  393|  2.92k|        minimizer::minimize(nfa)
  394|  2.92k|    }

_RINvXsc_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB6_9LinearSetNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherEBa_:
   68|  55.6k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXs7_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSetNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   68|  7.76k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  153|  89.9k|    fn next(&mut self) -> Option<Self::Item> {
  154|  89.9k|        let (label, transition) = self.transitions.next()?;
  155|  45.8k|        Some(match label {
  156|  42.4k|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  157|      0|            LinearSet::BoundedSlice(start, end, step) => (
  158|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  159|      0|                transition.target,
  160|      0|            ),
  161|  3.44k|            LinearSet::OpenEndedSlice(start, step) => (
  162|  3.44k|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  163|  3.44k|                transition.target,
  164|  3.44k|            ),
  165|       |        })
  166|  89.9k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet12overlap_with:
  211|  34.0k|    fn overlap_with(&self, other: &Self) -> Option<Self> {
  212|  34.0k|        // Assume the first set starts not-later, otherwise flip.
  213|  34.0k|        if self.start() > other.start() {
  214|  7.83k|            return other.overlap_with(self);
  215|  26.1k|        }
  216|  26.1k|        // Empty sets are discarded on construction.
  217|  26.1k|        assert_ne!(self.step().as_u64(), 0);
  218|  26.1k|        assert_ne!(other.step().as_u64(), 0);
  219|       |
  220|       |        // First we take both sets as if they are open-ended and linear.
  221|       |        // We can take an overlap under that assumption and then simply apply the lower of the two end constraints,
  222|       |        // if any, to obtain the ultimate result.
  223|       |        //
  224|       |        // If first_element is beyond the range of JsonUInt it will fail conversion at the end of this function,
  225|       |        // and result in an empty set (empty transition = no transition). This is correct behavior - first element
  226|       |        // out of bounds means there are no valid elements.
  227|  26.1k|        let (first_element, gcd) = find_first_element(
  228|  26.1k|            self.start().into(),
  229|  26.1k|            self.step().into(),
  230|  26.1k|            other.start().into(),
  231|  26.1k|            other.step().into(),
  232|  26.1k|        )?;
  233|       |        // Perform the min of ends where None is treated as larger than everything.
  234|  26.1k|        let end = match (self.end_exclusive(), other.end_exclusive()) {
  235|  8.83k|            (None, Some(x)) | (Some(x), None) => Some(x),
  236|  5.12k|            (None, None) => None,
  237|  12.2k|            (Some(x), Some(y)) => Some(std::cmp::min(x, y)),
  238|       |        };
  239|       |        // This can also overflow both JsonUInt and u64. We saturate and then convert to JsonUInt.
  240|       |        // A step that fails this conversion is essentially infinite, which means we need to emit a set containing only the
  241|       |        // first_element.
  242|  26.1k|        let common_step = (self.step().as_u64() / gcd).saturating_mul(other.step().as_u64());
  243|       |
  244|  26.1k|        let start = JsonUInt::try_from(first_element).ok()?;
  245|       |
  246|  26.1k|        return match JsonUInt::try_from(common_step).ok() {
  247|  26.1k|            Some(step) => Self::from_slice(start, end, step),
  248|      0|            None if end.map_or(false, |end| end <= start) => None,
  249|      0|            None => Some(Self::Singleton(start)),
  250|       |        };
  251|       |
  252|       |        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|       |            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|       |            // Clearly b \in S2 and every +l step is in S2.
  255|       |            // Now the difference between b and the next element of S1 is given by:
  256|       |            //     c = k - (b - a) mod k
  257|       |            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|       |            //
  259|       |            // To get a common element we need to apply +l steps until we land in S1.
  260|       |            // We get the following equation:
  261|       |            //     c + lx = 0 mod k
  262|       |            // or
  263|       |            //     lx = -c mod k
  264|       |            //
  265|       |            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|       |            let c = umod(k - (b - a), k);
  267|       |            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|       |            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|       |        }
  270|  34.0k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet4stepB9_:
  286|   157k|    fn step(&self) -> JsonUInt {
  287|   157k|        match self {
  288|   153k|            Self::Singleton(_) => JsonUInt::ONE,
  289|  3.93k|            Self::BoundedSlice(_, _, s) | Self::OpenEndedSlice(_, s) => *s,
  290|       |        }
  291|   157k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet13end_exclusive:
  278|  52.3k|    fn end_exclusive(&self) -> Option<JsonUInt> {
  279|  52.3k|        match self {
  280|  51.0k|            Self::Singleton(i) => JsonUInt::try_from(i.as_u64() + 1).ok(),
  281|      0|            Self::BoundedSlice(_, i, _) => Some(*i),
  282|  1.31k|            Self::OpenEndedSlice(_, _) => None,
  283|       |        }
  284|  52.3k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set15extended_euclid:
  331|  26.1k|fn extended_euclid(a: i64, b: i64) -> (i64, i64) {
  332|  26.1k|    let (mut old_r, mut r) = (a, b);
  333|  26.1k|    let (mut old_x, mut x) = (1, 0);
  334|       |
  335|  52.3k|    while r != 0 {
  336|  26.1k|        let quotient = old_r / r;
  337|  26.1k|        (old_r, r) = (r, old_r - quotient * r);
  338|  26.1k|        (old_x, x) = (x, old_x - quotient * x);
  339|  26.1k|    }
  340|       |
  341|  26.1k|    (old_x, old_r)
  342|  26.1k|}
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set23solve_linear_congruence:
  310|  26.1k|fn solve_linear_congruence(a: i64, b: i64, m: i64) -> Option<(i64, u64)> {
  311|  26.1k|    // If gcd(a, m) does not divide b mod m, then there are no solutions.
  312|  26.1k|    // Otherwise, find the (x,y) that solve ax - my = gcd(a, m)
  313|  26.1k|    // and take x*(b/gcd(a,m)) mod (m/gcd(a,m)) as the solution.
  314|  26.1k|    //
  315|  26.1k|    // Note that there may be multiple solutions if gcd(a, m) > 1,
  316|  26.1k|    // but this always gives the smallest one.
  317|  26.1k|    let b = umod(b, m);
  318|  26.1k|    let (x, gcd) = extended_euclid(a, m);
  319|  26.1k|
  320|  26.1k|    if b % gcd != 0 {
  321|      0|        None
  322|       |    } else {
  323|       |        Some((
  324|  26.1k|            umod(x.checked_mul(b / gcd)?, m / gcd),
  325|  26.1k|            u64::try_from(gcd).expect("negative gcd"),
  326|       |        ))
  327|       |    }
  328|  26.1k|}
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet10states_mut0B8_:
  127|  45.9k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet14add_transition0B8_:
   94|  26.1k|            .filter_map(|(other, trans)| {
   95|  26.1k|                let overlap = other.overlap_with(&label)?;
   96|  5.93k|                let priority = trans.priority + 1;
   97|  5.93k|                let mut overlap_target = target;
   98|  5.93k|                overlap_target.union(&trans.target);
   99|  5.93k|
  100|  5.93k|                Some((overlap, LinearSetTransition { priority, target }))
  101|  26.1k|            })
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_slice:
  193|  26.1k|    fn from_slice(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Option<Self> {
  194|  26.1k|        if step == JsonUInt::ZERO {
  195|      0|            None
  196|  26.1k|        } else if let Some(end) = end {
  197|  21.0k|            if start >= end {
  198|  20.2k|                None
  199|    812|            } else if start.as_u64().saturating_add(step.as_u64()) >= end.as_u64() {
  200|       |                // Only one item within the slice.
  201|    812|                Some(Self::Singleton(start))
  202|       |            } else {
  203|      0|                debug_assert!(end > JsonUInt::ZERO);
  204|      0|                Some(Self::BoundedSlice(start, end, step))
  205|       |            }
  206|       |        } else {
  207|  5.12k|            Some(Self::OpenEndedSlice(start, step))
  208|       |        }
  209|  26.1k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet5startB9_:
  272|   120k|    fn start(&self) -> JsonUInt {
  273|   120k|        match self {
  274|   120k|            Self::Singleton(i) | Self::BoundedSlice(i, _, _) | Self::OpenEndedSlice(i, _) => *i,
  275|   120k|        }
  276|   120k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   80|  44.1k|    pub(super) fn new() -> Self {
   81|  44.1k|        Self {
   82|  44.1k|            transitions: HashMap::new(),
   83|  44.1k|        }
   84|  44.1k|    }
_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  132|  44.1k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  133|  44.1k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  134|  44.1k|        Self {
  135|  44.1k|            transitions: transitions.into_iter(),
  136|  44.1k|        }
  137|  44.1k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_label:
  170|  47.5k|    fn from_label(label: ArrayTransitionLabel) -> Option<Self> {
  171|  47.5k|        match label {
  172|  47.5k|            ArrayTransitionLabel::Index(idx) => Some(Self::Singleton(idx)),
  173|      0|            ArrayTransitionLabel::Slice(slice) => {
  174|      0|                if slice.step == JsonUInt::ZERO {
  175|      0|                    None
  176|      0|                } else if let Some(end) = slice.end {
  177|      0|                    if slice.start >= end {
  178|      0|                        None
  179|      0|                    } else if slice.start.as_u64().saturating_add(slice.step.as_u64()) >= end.as_u64() {
  180|       |                        // Only one item within the slice.
  181|      0|                        Some(Self::Singleton(slice.start))
  182|       |                    } else {
  183|      0|                        debug_assert!(end > JsonUInt::ZERO);
  184|      0|                        Some(Self::BoundedSlice(slice.start, end, slice.step))
  185|       |                    }
  186|       |                } else {
  187|      0|                    Some(Self::OpenEndedSlice(slice.start, slice.step))
  188|       |                }
  189|       |            }
  190|       |        }
  191|  47.5k|    }
_RNCNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB6_26ArrayTransitionSetIterator3new0Ba_:
  133|  17.9k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iter:
  145|  44.1k|    fn into_iter(self) -> Self::IntoIter {
  146|  44.1k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  147|  44.1k|    }
_RNvNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB7_9LinearSet12overlap_with18find_first_element:
  252|  26.1k|        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|  26.1k|            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|  26.1k|            // Clearly b \in S2 and every +l step is in S2.
  255|  26.1k|            // Now the difference between b and the next element of S1 is given by:
  256|  26.1k|            //     c = k - (b - a) mod k
  257|  26.1k|            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|  26.1k|            //
  259|  26.1k|            // To get a common element we need to apply +l steps until we land in S1.
  260|  26.1k|            // We get the following equation:
  261|  26.1k|            //     c + lx = 0 mod k
  262|  26.1k|            // or
  263|  26.1k|            //     lx = -c mod k
  264|  26.1k|            //
  265|  26.1k|            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|  26.1k|            let c = umod(k - (b - a), k);
  267|  26.1k|            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|  26.1k|            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|  26.1k|        }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet14add_transition:
   86|  47.5k|    pub(super) fn add_transition(&mut self, label: ArrayTransitionLabel, target: SmallSet256) {
   87|       |        use std::collections::hash_map::Entry;
   88|  47.5k|        let Some(label) = LinearSet::from_label(label) else {
   89|      0|            return;
   90|       |        };
   91|  47.5k|        let overlaps: Vec<_> = self
   92|  47.5k|            .transitions
   93|  47.5k|            .iter()
   94|  47.5k|            .filter_map(|(other, trans)| {
   95|       |                let overlap = other.overlap_with(&label)?;
   96|       |                let priority = trans.priority + 1;
   97|       |                let mut overlap_target = target;
   98|       |                overlap_target.union(&trans.target);
   99|       |
  100|       |                Some((overlap, LinearSetTransition { priority, target }))
  101|  47.5k|            })
  102|  47.5k|            .collect();
  103|       |
  104|  53.5k|        for (label, trans) in overlaps {
  105|  5.93k|            match self.transitions.entry(label) {
  106|  2.49k|                Entry::Occupied(mut entry) => {
  107|  2.49k|                    let entry = entry.get_mut();
  108|  2.49k|                    entry.priority = std::cmp::max(entry.priority, trans.priority);
  109|  2.49k|                    entry.target.union(&trans.target);
  110|  2.49k|                }
  111|  3.44k|                Entry::Vacant(entry) => {
  112|  3.44k|                    entry.insert(trans);
  113|  3.44k|                }
  114|       |            }
  115|       |        }
  116|       |
  117|  47.5k|        match self.transitions.entry(label) {
  118|       |            // Label overlapped (entirely) with some existing label, so it is already handled.
  119|  5.09k|            Entry::Occupied(_) => (),
  120|  42.5k|            Entry::Vacant(entry) => {
  121|  42.5k|                entry.insert(LinearSetTransition { priority: 1, target });
  122|  42.5k|            }
  123|       |        }
  124|  47.5k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set4umod:
  298|  78.5k|fn umod(x: i64, m: i64) -> i64 {
  299|  78.5k|    assert!(m > 0);
  300|  78.5k|    let k = x % m;
  301|  78.5k|    if k < 0 {
  302|      0|        m + k
  303|       |    } else {
  304|  78.5k|        k
  305|       |    }
  306|  78.5k|}
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  126|  44.1k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  127|  44.1k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  128|  44.1k|    }

_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstate0B8_:
  149|  45.8k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer15activate_if_new0B8_:
  120|     74|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  237|  44.1k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  238|  44.1k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  239|  7.46k|            self.checkpoints.insert(superstate, nfa_state);
  240|  7.46k|            Some(nfa_state)
  241|       |        } else {
  242|  36.7k|            self.checkpoints.get(&superstate).copied()
  243|       |        }
  244|  44.1k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  390|   111k|    fn normalize(&self, superstate: &mut SmallSet256) {
  391|   111k|        let furthest_checkpoint = superstate
  392|   111k|            .iter()
  393|   111k|            .map(NfaStateId)
  394|   111k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  395|   111k|            .max();
  396|       |
  397|   111k|        if let Some(cutoff) = furthest_checkpoint {
  398|   108k|            superstate.remove_all_before(cutoff.0);
  399|   108k|        }
  400|   111k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  352|  44.1k|    fn normalize_superstate_transitions(
  353|  44.1k|        &mut self,
  354|  44.1k|        transitions: &mut SuperstateTransitionTable,
  355|  44.1k|        current_checkpoint: Option<NfaStateId>,
  356|  44.1k|    ) -> Result<(), CompilerError> {
  357|  44.1k|        fn normalize_one(
  358|  44.1k|            this: &mut Minimizer,
  359|  44.1k|            state: &mut SmallSet256,
  360|  44.1k|            current_checkpoint: Option<NfaStateId>,
  361|  44.1k|        ) -> Result<(), CompilerError> {
  362|  44.1k|            if let Some(checkpoint) = current_checkpoint {
  363|  44.1k|                state.insert(checkpoint.0);
  364|  44.1k|            }
  365|  44.1k|
  366|  44.1k|            this.normalize(state);
  367|  44.1k|            this.activate_if_new(*state)?;
  368|  44.1k|
  369|  44.1k|            if let Some(checkpoint) = current_checkpoint {
  370|  44.1k|                this.checkpoints.insert(*state, checkpoint);
  371|  44.1k|            }
  372|  44.1k|
  373|  44.1k|            Ok(())
  374|  44.1k|        }
  375|  44.1k|
  376|  44.1k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  377|  65.9k|        for (_, state) in &mut transitions.member {
  378|  21.8k|            normalize_one(self, state, current_checkpoint)?;
  379|       |        }
  380|  45.9k|        for state in &mut transitions.array.states_mut() {
  381|  45.9k|            normalize_one(self, state, current_checkpoint)?;
  382|       |        }
  383|       |
  384|  44.1k|        Ok(())
  385|  44.1k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  268|   153k|            .filter_map(|id| match self.nfa[id] {
  269|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  270|  73.9k|                    Some(id.next().map(|x| x.0))
  271|       |                }
  272|  79.0k|                _ => None,
  273|   153k|            })
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  113|   114k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  114|   114k|        if !self.superstates.contains_key(&superstate) {
  115|  48.0k|            let identifier = self
  116|  48.0k|                .superstates
  117|  48.0k|                .len()
  118|  48.0k|                .try_into()
  119|  48.0k|                .map(DfaStateId)
  120|  48.0k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  121|  47.9k|            self.superstates.insert(superstate, identifier);
  122|  47.9k|            self.active_superstates.push(superstate);
  123|  47.9k|            self.dfa_states.push(StateTable::default());
  124|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  125|  47.9k|            if superstate.contains(self.nfa.accepting_state().0) {
  126|  5.55k|                self.accepting.insert(identifier.0);
  127|  42.3k|            }
  128|  66.8k|        }
  129|       |
  130|   114k|        Ok(())
  131|   114k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  394|   371k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNvNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  357|   111k|        fn normalize_one(
  358|   111k|            this: &mut Minimizer,
  359|   111k|            state: &mut SmallSet256,
  360|   111k|            current_checkpoint: Option<NfaStateId>,
  361|   111k|        ) -> Result<(), CompilerError> {
  362|   111k|            if let Some(checkpoint) = current_checkpoint {
  363|   108k|                state.insert(checkpoint.0);
  364|   108k|            }
  365|       |
  366|   111k|            this.normalize(state);
  367|   111k|            this.activate_if_new(*state)?;
  368|       |
  369|   111k|            if let Some(checkpoint) = current_checkpoint {
  370|   108k|                this.checkpoints.insert(*state, checkpoint);
  371|   108k|            }
  372|       |
  373|   111k|            Ok(())
  374|   111k|        }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstates_0B8_:
  154|  21.7k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   84|  2.92k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   85|  2.92k|        // Rejecting state has no outgoing transitions except for a self-loop.
   86|  2.92k|        self.dfa_states.push(StateTable {
   87|  2.92k|            array_transitions: smallvec![],
   88|  2.92k|            member_transitions: smallvec![],
   89|  2.92k|            fallback_state: Self::rejecting_state(),
   90|  2.92k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   91|  2.92k|        });
   92|  2.92k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   93|  2.92k|
   94|  2.92k|        // Initial superstate is {0}.
   95|  2.92k|        let initial_superstate = [0].into();
   96|  2.92k|        self.activate_if_new(initial_superstate)?;
   97|       |
   98|  47.0k|        while let Some(superstate) = self.active_superstates.pop() {
   99|  44.1k|            self.process_superstate(superstate)?;
  100|       |        }
  101|       |
  102|  2.85k|        Ok(Automaton {
  103|  2.85k|            states: self.dfa_states,
  104|  2.85k|        })
  105|  2.92k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  260|  44.1k|    fn process_nfa_transitions(
  261|  44.1k|        &self,
  262|  44.1k|        current_superstate: SmallSet256,
  263|  44.1k|        current_checkpoint: Option<NfaStateId>,
  264|  44.1k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  265|  44.1k|        let mut wildcard_targets = current_superstate
  266|  44.1k|            .iter()
  267|  44.1k|            .map(NfaStateId)
  268|  44.1k|            .filter_map(|id| match self.nfa[id] {
  269|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  270|       |                    Some(id.next().map(|x| x.0))
  271|       |                }
  272|       |                _ => None,
  273|  44.1k|            })
  274|  44.1k|            .collect::<Result<SmallSet256, _>>()?;
  275|  44.1k|        if let Some(checkpoint) = current_checkpoint {
  276|  41.9k|            wildcard_targets.insert(checkpoint.0);
  277|  41.9k|        }
  278|       |
  279|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  280|       |
  281|  44.1k|        let mut transitions = SuperstateTransitionTable {
  282|  44.1k|            array: ArrayTransitionSet::new(),
  283|  44.1k|            member: VecMap::new(),
  284|  44.1k|            wildcard: wildcard_targets,
  285|  44.1k|        };
  286|       |
  287|   153k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  288|   153k|            match self.nfa[nfa_state] {
  289|       |                // Direct states simply have a single transition to the next state in the NFA.
  290|       |                // Recursive transitions also have a self-loop, but that is handled by the
  291|       |                // checkpoints mechanism - here we only handle the forward transition.
  292|  15.2k|                NfaState::Direct(nfa::Transition::Member(label))
  293|  10.9k|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  294|       |                    debug!(
  295|      0|                        "Considering member transition {nfa_state} --{}-> {}",
  296|      0|                        label.unquoted(),
  297|      0|                        nfa_state.next()?,
  298|       |                    );
  299|       |                    // Add the target NFA state to the target superstate, or create a singleton
  300|       |                    // set if this is the first transition via this label encountered in the loop.
  301|  26.2k|                    if let Some(target) = transitions.member.get_mut(&label) {
  302|  4.40k|                        target.insert(nfa_state.next()?.0);
  303|       |                    } else {
  304|  21.8k|                        let mut new_set = transitions.wildcard;
  305|  21.8k|                        new_set.insert(nfa_state.next()?.0);
  306|  21.8k|                        transitions.member.insert(label, new_set);
  307|       |                    }
  308|       |                }
  309|  20.5k|                NfaState::Direct(nfa::Transition::Array(label))
  310|  27.0k|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  311|       |                    // Array transitions are trickier, as they can have overlap. For example,
  312|       |                    // a transition over [5] overlaps with a transition over [3::2].
  313|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  314|       |                    // to the member case - create a new singleton set with a single transition.
  315|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  316|       |                    // Fortunately, the conflicts can be resolved one at a time.
  317|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  318|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  319|       |                    // The resolution is to have the following transitions:
  320|       |                    //   --t3--> S2+{s1}
  321|       |                    //   --(t1-t3)--> {s1}
  322|       |                    //   --(t2-t3)--> S2
  323|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  324|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  325|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  326|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  327|       |                    //   --t3--> S2+{s1}
  328|       |                    //   --t1--> {s1}
  329|       |                    //   --t2--> S2
  330|       |                    // and make sure the transition over t3 is put before the other two.
  331|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  332|       |                    debug!(
  333|      0|                        "Considering array transition {nfa_state} --{}-> {}",
  334|      0|                        label,
  335|      0|                        nfa_state.next()?,
  336|       |                    );
  337|  47.5k|                    let mut new_set = transitions.wildcard;
  338|  47.5k|                    new_set.insert(nfa_state.next()?.0);
  339|  47.5k|                    transitions.array.add_transition(label, new_set);
  340|       |                }
  341|       |                NfaState::Direct(nfa::Transition::Wildcard)
  342|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  343|  79.2k|                | NfaState::Accepting => (),
  344|       |            }
  345|       |        }
  346|       |
  347|  44.1k|        Ok(transitions)
  348|  44.1k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributes0B8_:
  196|  42.8k|                .any(|x| self.accepting.contains(x.target_state().0))
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizer8minimize:
   21|  2.92k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   22|  2.92k|    let minimizer = Minimizer {
   23|  2.92k|        nfa,
   24|  2.92k|        superstates: VecMap::new(),
   25|  2.92k|        checkpoints: VecMap::new(),
   26|  2.92k|        active_superstates: smallvec![],
   27|  2.92k|        dfa_states: vec![],
   28|  2.92k|        accepting: SmallSet256::default(),
   29|  2.92k|    };
   30|  2.92k|
   31|  2.92k|    minimizer.run()
   32|  2.92k|}
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess0_0B8_:
  208|  43.7k|            .any(|x| self.accepting.contains(x.target_state().0))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_stateB6_:
  107|  94.0k|    fn rejecting_state() -> DfaStateId {
  108|  94.0k|        DfaStateId(0)
  109|  94.0k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  135|  44.1k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  136|  44.1k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  137|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  138|       |
  139|  44.1k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  140|      0|        debug!("Raw transitions: {:?}", transitions);
  141|       |
  142|  44.1k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  143|      0|        debug!("Normalized transitions: {:?}", transitions);
  144|       |
  145|       |        // Translate the transitions to the data model expected by TransitionTable.
  146|  44.1k|        let array_transitions = transitions
  147|  44.1k|            .array
  148|  44.1k|            .into_iter()
  149|  44.1k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  150|  44.1k|            .collect::<SmallVec<_>>();
  151|  44.1k|        let member_transitions = transitions
  152|  44.1k|            .member
  153|  44.1k|            .into_iter()
  154|  44.1k|            .map(|(label, state)| (label, self.superstates[&state]))
  155|  44.1k|            .collect::<SmallVec<_>>();
  156|      0|        debug!("Translated transitions (array): {array_transitions:?}");
  157|      0|        debug!("Translated transitions (member): {member_transitions:?}");
  158|       |
  159|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  160|       |        // Otherwise, we set the fallback to the rejecting state.
  161|  44.1k|        let id = self.superstates[&current_superstate];
  162|  44.1k|        let fallback_state = self.superstates[&transitions.wildcard];
  163|  44.1k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  164|  44.1k|        let table = &mut self.dfa_states[id.0 as usize];
  165|  44.1k|        table.array_transitions = array_transitions;
  166|  44.1k|        table.member_transitions = member_transitions;
  167|  44.1k|        table.fallback_state = fallback_state;
  168|  44.1k|        table.attributes = attributes;
  169|  44.1k|
  170|  44.1k|        Ok(())
  171|  44.1k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess_0B8_:
  197|  20.7k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  175|  44.1k|    fn build_attributes(
  176|  44.1k|        &self,
  177|  44.1k|        id: DfaStateId,
  178|  44.1k|        array_transitions: &[ArrayTransition],
  179|  44.1k|        member_transitions: &[(&JsonString, DfaStateId)],
  180|  44.1k|        fallback: DfaStateId,
  181|  44.1k|    ) -> StateAttributes {
  182|  44.1k|        let mut attrs = StateAttributesBuilder::new();
  183|  44.1k|
  184|  44.1k|        if self.accepting.contains(id.0) {
  185|      0|            debug!("{id} is accepting");
  186|  5.24k|            attrs = attrs.accepting();
  187|  38.8k|        }
  188|  44.1k|        if id == Self::rejecting_state() {
  189|      0|            debug!("{id} is rejecting");
  190|      0|            attrs = attrs.rejecting();
  191|  44.1k|        }
  192|       |
  193|  44.1k|        if self.accepting.contains(fallback.0)
  194|  42.0k|            || array_transitions
  195|  42.0k|                .iter()
  196|  42.0k|                .any(|x| self.accepting.contains(x.target_state().0))
  197|  39.2k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  198|       |        {
  199|      0|            debug!("{id} has transitions to accepting");
  200|  7.60k|            attrs = attrs.transitions_to_accepting();
  201|  36.5k|        }
  202|  44.1k|        if !array_transitions.is_empty() {
  203|      0|            debug!("{id} has an array index transition");
  204|  28.7k|            attrs = attrs.has_array_transition();
  205|  15.3k|        }
  206|  44.1k|        if array_transitions
  207|  44.1k|            .iter()
  208|  44.1k|            .any(|x| self.accepting.contains(x.target_state().0))
  209|       |        {
  210|      0|            debug!("{id} has an accepting array index transition");
  211|  3.73k|            attrs = attrs.has_array_transition_to_accepting();
  212|  40.3k|        }
  213|       |
  214|       |        // Unitarity check:
  215|       |        // 1. Fallback rejects.
  216|       |        // 2. Only one transition that can match at most one element in a JSON, either:
  217|       |        //   a) member transition; or
  218|       |        //   b) array transition that matches only one index.
  219|  44.1k|        let is_unitary = {
  220|  44.1k|            fallback == Self::rejecting_state()
  221|  2.05k|                && ((member_transitions.len() == 1 && array_transitions.is_empty())
  222|  1.23k|                    || (array_transitions.len() == 1
  223|    167|                        && member_transitions.is_empty()
  224|    167|                        && array_transitions[0].label.matches_at_most_once()))
  225|       |        };
  226|  44.1k|        if is_unitary {
  227|      0|            debug!("{id} is unitary");
  228|    989|            attrs = attrs.unitary();
  229|  43.1k|        }
  230|       |
  231|  44.1k|        attrs.into()
  232|  44.1k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  248|  44.1k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  249|  44.1k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  250|  9.69k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  251|  7.46k|                return Some(single_state);
  252|  2.23k|            }
  253|  34.4k|        }
  254|       |
  255|  36.7k|        None
  256|  44.1k|    }
_RNCNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  270|  73.9k|                    Some(id.next().map(|x| x.0))

_RNCNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   76|  15.6k|            .map(|segment| {
   77|  15.6k|                let selectors = segment.selectors();
   78|  15.6k|
   79|  15.6k|                if selectors.len() > 1 {
   80|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|  15.6k|                    let transition = match selectors.first() {
   83|  5.36k|                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|  4.55k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|  5.70k|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|      0|                        Selector::Slice(slice) => {
   88|      0|                            let start = match slice.start() {
   89|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|      0|                            }?;
   92|      0|                            let end = match slice.end() {
   93|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|      0|                                None => Ok(None),
   96|      0|                            }?;
   97|      0|                            let step = match slice.step() {
   98|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|      0|                            }?;
  101|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  102|      0|                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|      0|                    }?;
  106|  15.6k|                    if segment.is_child() {
  107|  8.15k|                        Ok(Direct(transition))
  108|       |                    } else {
  109|  7.47k|                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  15.6k|            })
_RNvXst_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB5_10NfaStateIdNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpB9_:
   44|  10.3k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  126|  47.9k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  127|  47.9k|        // CAST: safe because of the check in `new`.
  128|  47.9k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  129|  47.9k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  135|   687k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  136|   687k|        &self.ordered_states[index.0 as usize]
  137|   687k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|   147k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|   147k|        self.0
   55|   147k|            .checked_add(1)
   56|   147k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|   147k|            .map(Self)
   58|   147k|    }
_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  2.92k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|  2.92k|        use rsonpath_syntax::{Index, Selector};
   72|  2.92k|
   73|  2.92k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   74|  2.92k|            .segments()
   75|  2.92k|            .iter()
   76|  2.92k|            .map(|segment| {
   77|       |                let selectors = segment.selectors();
   78|       |
   79|       |                if selectors.len() > 1 {
   80|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|       |                    let transition = match selectors.first() {
   83|       |                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|       |                        Selector::Slice(slice) => {
   88|       |                            let start = match slice.start() {
   89|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|       |                            }?;
   92|       |                            let end = match slice.end() {
   93|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|       |                                None => Ok(None),
   96|       |                            }?;
   97|       |                            let step = match slice.step() {
   98|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|       |                            }?;
  101|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  102|       |                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|       |                    }?;
  106|       |                    if segment.is_child() {
  107|       |                        Ok(Direct(transition))
  108|       |                    } else {
  109|       |                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  2.92k|            })
  113|  2.92k|            .collect();
  114|  2.92k|        let mut states = states_result?;
  115|       |
  116|  2.92k|        states.push(Accepting);
  117|  2.92k|
  118|  2.92k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  119|  2.92k|        if let Err(err) = accepting_state {
  120|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  121|       |        } else {
  122|  2.92k|            Ok(NondeterministicAutomaton { ordered_states: states })
  123|       |        }
  124|  2.92k|    }

_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromB8_:
  200|  2.92k|    fn from(arr: [u8; N]) -> Self {
  201|  2.92k|        Self::from_iter(arr)
  202|  2.92k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|   108k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|   108k|        if cutoff < 128 {
  100|   106k|            self.half_1.remove_all_before(cutoff)
  101|  2.40k|        } else {
  102|  2.40k|            self.half_1.clear();
  103|  2.40k|            self.half_2.remove_all_before(cutoff - 128);
  104|  2.40k|        }
  105|   108k|    }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_emptyB9_:
  124|  87.2k|            fn is_empty(&self) -> bool {
  125|  87.2k|                self.bitmask == 0
  126|  87.2k|            }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iterB9_:
  140|   400k|            fn iter(&self) -> $iter {
  141|   400k|                $iter {
  142|   400k|                    bitmask: self.bitmask,
  143|   400k|                }
  144|   400k|            }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|   243k|            fn contains(&self, elem: u8) -> bool {
  137|   243k|                (self.bitmask & (1 << elem)) != 0
  138|   243k|            }
_RNvXsg_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  177|  1.08M|            fn next(&mut self) -> Option<Self::Item> {
  178|  1.08M|                let next_elem = self.bitmask.trailing_zeros();
  179|  1.08M|
  180|  1.08M|                if next_elem == $size {
  181|   411k|                    return None;
  182|   677k|                }
  183|   677k|
  184|   677k|                let elem_mask = 1 << next_elem;
  185|   677k|                self.bitmask ^= elem_mask;
  186|   677k|
  187|   677k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|   677k|                Some(next_elem as u8)
  189|  1.08M|            }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE5unionB6_:
   63|  8.42k|    fn union(&mut self, other: &Self) {
   64|  8.42k|        self.half_1.union(&other.half_1);
   65|  8.42k|        self.half_2.union(&other.half_2);
   66|  8.42k|    }
_RNCNCNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next00Bd_:
  259|  10.8k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXs7_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   40|  52.9k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs4_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  234|  2.92k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  2.92k|        let mut result = Self::default();
  236|  5.85k|        for elem in iter {
  237|  2.92k|            result.insert(elem);
  238|  2.92k|        }
  239|  2.92k|        result
  240|  2.92k|    }
_RNvXsh_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
  110|   105k|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXsl_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  110|  40.0M|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|   108k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|   108k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|   108k|                self.bitmask &= mask;
  162|   108k|            }
_RNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  258|   878k|    fn next(&mut self) -> Option<Self::Item> {
  259|   878k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  260|   878k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|   306k|    fn insert(&mut self, elem: u8) {
   56|   306k|        if elem < 128 {
   57|   299k|            self.half_1.insert(elem)
   58|       |        } else {
   59|  7.02k|            self.half_2.insert(elem - 128)
   60|       |        }
   61|   306k|    }
_RINvXs4_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  234|  44.1k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  44.1k|        let mut result = Self::default();
  236|   118k|        for elem in iter {
  237|  73.9k|            result.insert(elem);
  238|  73.9k|        }
  239|  44.1k|        result
  240|  44.1k|    }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|   306k|            fn insert(&mut self, elem: u8) {
  129|   306k|                self.bitmask |= 1 << elem;
  130|   306k|            }
_RNCNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  259|   211k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|   243k|    fn contains(&self, elem: u8) -> bool {
   69|   243k|        if elem < 128 {
   70|   178k|            self.half_1.contains(elem)
   71|       |        } else {
   72|  65.3k|            self.half_2.contains(elem - 128)
   73|       |        }
   74|   243k|    }
_RNCNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0B8_:
   85|    685|            self.half_2.singleton().map(|x| x + 128)
_RNvXsb_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   40|  39.2M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5unionB9_:
  132|  16.8k|            fn union(&mut self, other: &Self) {
  133|  16.8k|                self.bitmask |= other.bitmask;
  134|  16.8k|            }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5clearB9_:
  155|  2.40k|            fn clear(&mut self) {
  156|  2.40k|                self.bitmask = 0;
  157|  2.40k|            }
_RNvXse_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  43.7k|            fn singleton(&self) -> Option<u8> {
  147|  43.7k|                let elem = self.bitmask.trailing_zeros();
  148|  43.7k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  43.7k|                let remainder = self.bitmask ^ elem_mask;
  150|  43.7k|
  151|  43.7k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  43.7k|                (remainder == 0).then_some(elem as u8)
  153|  43.7k|            }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  44.1k|    fn singleton(&self) -> Option<u8> {
   84|  44.1k|        if self.half_1.is_empty() {
   85|  1.07k|            self.half_2.singleton().map(|x| x + 128)
   86|  43.1k|        } else if self.half_2.is_empty() {
   87|  42.6k|            self.half_1.singleton()
   88|       |        } else {
   89|    443|            None
   90|       |        }
   91|  44.1k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB6_:
   76|   200k|    fn iter(&self) -> SmallSet256Iter {
   77|   200k|        SmallSet256Iter {
   78|   200k|            half_1: self.half_1.iter(),
   79|   200k|            half_2: self.half_2.iter(),
   80|   200k|        }
   81|   200k|    }

_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  134|  30.4k|    pub fn has_transition_to_accepting(&self) -> bool {
  135|  30.4k|        self.is_set(StateAttribute::TransitionsToAccepting)
  136|  30.4k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  143|  26.0k|    pub fn is_unitary(&self) -> bool {
  144|  26.0k|        self.is_set(StateAttribute::Unitary)
  145|  26.0k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  126|  28.6k|    pub fn is_rejecting(&self) -> bool {
  127|  28.6k|        self.is_set(StateAttribute::Rejecting)
  128|  28.6k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  164|   276k|    fn is_set(&self, attr: StateAttribute) -> bool {
  165|   276k|        (self.0 & attr as u8) != 0
  166|   276k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes33has_array_transition_to_accepting:
  158|  8.63k|    pub fn has_array_transition_to_accepting(&self) -> bool {
  159|  8.63k|        self.is_set(StateAttribute::HasArrayTransitionToAccepting)
  160|  8.63k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  118|   136k|    pub fn is_accepting(&self) -> bool {
  119|   136k|        self.is_set(StateAttribute::Accepting)
  120|   136k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes20has_array_transition:
  150|  46.1k|    pub fn has_array_transition(&self) -> bool {
  151|  46.1k|        self.is_set(StateAttribute::HasArrayTransition)
  152|  46.1k|    }
_RNvXsn_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs9TfoC9TDKig_19fuzz_arbitrary_json:
  170|  38.3k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3newB6_:
   37|  47.0k|    pub(crate) fn new() -> Self {
   38|  47.0k|        Self {
   39|  47.0k|            attrs: StateAttributes(0),
   40|  47.0k|        }
   41|  47.0k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder33has_array_transition_to_acceptingB6_:
   63|  3.73k|    pub(crate) fn has_array_transition_to_accepting(self) -> Self {
   64|  3.73k|        self.set(StateAttribute::HasArrayTransitionToAccepting)
   65|  3.73k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3setB6_:
   71|  49.2k|    fn set(self, attr: StateAttribute) -> Self {
   72|  49.2k|        Self {
   73|  49.2k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   74|  49.2k|        }
   75|  49.2k|    }
_RNvXsj_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   33|  47.9k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejectingB6_:
   47|  2.92k|    pub(crate) fn rejecting(self) -> Self {
   48|  2.92k|        self.set(StateAttribute::Rejecting)
   49|  2.92k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder7unitaryB6_:
   51|    989|    pub(crate) fn unitary(self) -> Self {
   52|    989|        self.set(StateAttribute::Unitary)
   53|    989|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5buildB6_:
   67|  47.0k|    pub(crate) fn build(self) -> StateAttributes {
   68|  47.0k|        self.attrs
   69|  47.0k|    }
_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   80|  47.0k|    fn from(value: StateAttributesBuilder) -> Self {
   81|  47.0k|        value.build()
   82|  47.0k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9acceptingB6_:
   43|  5.24k|    pub(crate) fn accepting(self) -> Self {
   44|  5.24k|        self.set(StateAttribute::Accepting)
   45|  5.24k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder20has_array_transitionB6_:
   59|  28.7k|    pub(crate) fn has_array_transition(self) -> Self {
   60|  28.7k|        self.set(StateAttribute::HasArrayTransition)
   61|  28.7k|    }
_RNvXsn_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  170|  88.2k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB6_:
   55|  7.60k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   56|  7.60k|        self.set(StateAttribute::TransitionsToAccepting)
   57|  7.60k|    }

_RNvMNtCs8dUjriG0K0U_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1f_7padding19TwoSidesPaddedInputINtNtNtB4_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2H_5MatchEEKj40_EINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB43_E7get_idxCs9TfoC9TDKig_19fuzz_arbitrary_json:
   63|  3.01k|    pub(crate) fn get_idx(&self) -> usize {
   64|       |        debug!(
   65|      0|            "iter offset: {}, block idx: {:?}",
   66|      0|            self.iter.get_offset(),
   67|      0|            self.block.as_ref().map(|b| b.idx)
   68|       |        );
   69|       |
   70|  3.01k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   71|  3.01k|    }
_RNCNvMNtCs8dUjriG0K0U_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1h_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2J_5MatchEEKj40_EINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB45_E7get_idx0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   70|  2.97k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)

_RINvYNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1G_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB38_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   89|    569|    fn resume<'i, I, Q>(
   90|    569|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   91|    569|        opening: BracketType,
   92|    569|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   93|    569|    where
   94|    569|        I: InputBlockIterator<'i, BLOCK_SIZE>,
   95|    569|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   96|    569|    {
   97|    569|        let (first_block, iter) =
   98|    569|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
   99|    569|        DepthIteratorResumeOutcome(first_block, iter)
  100|    569|    }

_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6410new_vectorRShECs9TfoC9TDKig_19fuzz_arbitrary_json:
   17|  2.69k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   18|  2.69k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   19|  2.69k|    classifier: &DelimiterClassifierImpl256,
   20|  2.69k|) -> DepthVector64<'a, B> {
   21|  2.69k|    new_vector_from(bytes, classifier, 0)
   22|  2.69k|}
_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECs9TfoC9TDKig_19fuzz_arbitrary_json:
   25|  3.14k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   26|  3.14k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   27|  3.14k|    classifier: &DelimiterClassifierImpl256,
   28|  3.14k|    idx: usize,
   29|  3.14k|) -> DepthVector64<'a, B> {
   30|  3.14k|    // SAFETY: target_feature invariant
   31|  3.14k|    unsafe { new_avx2(bytes, classifier, idx) }
   32|  3.14k|}
_RNCNvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1A_7padding19TwoSidesPaddedInputINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB32_5MatchEEKj40_EINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   14|  2.69k|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E6resume0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   14|    564|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E4stop0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   14|    569|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_648new_avx2RShECs9TfoC9TDKig_19fuzz_arbitrary_json:
   35|  3.14k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   36|  3.14k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   37|  3.14k|    classifier: &DelimiterClassifierImpl256,
   38|  3.14k|    start_idx: usize,
   39|  3.14k|) -> DepthVector64<'a, B> {
   40|  3.14k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   41|  3.14k|    let (first_block, second_block) = bytes.block.halves();
   42|  3.14k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   43|  3.14k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   44|  3.14k|
   45|  3.14k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   46|  3.14k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   47|  3.14k|
   48|  3.14k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   49|  3.14k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   50|  3.14k|
   51|  3.14k|    DepthVector64 {
   52|  3.14k|        quote_classified: bytes,
   53|  3.14k|        opening_mask,
   54|  3.14k|        closing_mask,
   55|  3.14k|        opening_count: opening_mask.count_ones(),
   56|  3.14k|        depth: 0,
   57|  3.14k|        idx: 0,
   58|  3.14k|        phantom: PhantomData,
   59|  3.14k|    }
   60|  3.14k|}

_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E4stopCs9TfoC9TDKig_19fuzz_arbitrary_json:
   51|    569|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   52|    569|                let block_state = block.and_then(|b| {
   53|       |                    let idx = b.idx;
   54|       |                    debug!("Depth iterator stopping at index {idx}");
   55|       |                    if idx >= b.quote_classified.len() {
   56|       |                        None
   57|       |                    } else {
   58|       |                        Some(ResumeClassifierBlockState {
   59|       |                            block: b.quote_classified,
   60|       |                            idx,
   61|       |                        })
   62|       |                    }
   63|    569|                });
   64|    569|
   65|    569|                ResumeClassifierState {
   66|    569|                    iter: self.iter,
   67|    569|                    block: block_state,
   68|    569|                    are_commas_on: self.were_commas_on,
   69|    569|                    are_colons_on: self.were_colons_on,
   70|    569|                }
   71|    569|            }
_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E6resumeCs9TfoC9TDKig_19fuzz_arbitrary_json:
   74|    569|            fn resume(
   75|    569|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   76|    569|                opening: BracketType,
   77|    569|            ) -> (Option<Self::Block>, Self) {
   78|    569|                let classifier = $core::new(opening);
   79|    569|                let first_block = state.block.and_then(|b| {
   80|       |                    if b.idx == $size {
   81|       |                        None
   82|       |                    } else {
   83|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
   84|       |                    }
   85|    569|                });
   86|    569|
   87|    569|                (
   88|    569|                    first_block,
   89|    569|                    $name {
   90|    569|                        iter: state.iter,
   91|    569|                        classifier,
   92|    569|                        phantom: PhantomData,
   93|    569|                        were_commas_on: state.are_commas_on,
   94|    569|                        were_colons_on: state.are_colons_on,
   95|    569|                    },
   96|    569|                )
   97|    569|            }
_RNvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1y_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB30_5MatchEEKj40_EINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
   37|  2.69k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   38|  2.69k|                let quote_classified = self.iter.next()?;
   39|  2.69k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   40|  2.69k|            }

_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCs9TfoC9TDKig_19fuzz_arbitrary_json:
   31|  2.27k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   32|  2.27k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   33|  2.27k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   34|  2.27k|
   35|  2.27k|        if next_closing == SIZE {
   36|    271|            return false;
   37|  2.00k|        }
   38|       |
   39|      0|        bin_u64!("opening_mask", self.opening_mask);
   40|      0|        bin_u64!("closing_mask", self.closing_mask);
   41|       |
   42|  2.00k|        self.opening_mask >>= next_closing;
   43|  2.00k|        self.closing_mask >>= next_closing;
   44|  2.00k|        self.opening_mask >>= 1;
   45|  2.00k|        self.closing_mask >>= 1;
   46|       |
   47|      0|        bin_u64!("new opening_mask", self.opening_mask);
   48|      0|        bin_u64!("new closing_mask", self.closing_mask);
   49|       |
   50|  2.00k|        let new_opening_count = self.opening_mask.count_ones() as i32;
   51|  2.00k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   52|  2.00k|        self.opening_count = new_opening_count as u32;
   53|       |
   54|      0|        debug!("next_closing: {next_closing}");
   55|      0|        debug!("new_opening_count: {new_opening_count}");
   56|      0|        debug!("delta: {delta}");
   57|       |
   58|  2.00k|        self.depth += delta;
   59|  2.00k|        self.idx += next_closing + 1;
   60|  2.00k|
   61|  2.00k|        true
   62|  2.27k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCs9TfoC9TDKig_19fuzz_arbitrary_json:
   76|  3.14k|    fn add_depth(&mut self, depth: isize) {
   77|  3.14k|        self.depth += depth as i32;
   78|  3.14k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCs9TfoC9TDKig_19fuzz_arbitrary_json:
   70|  2.57k|    fn depth_at_end(&self) -> isize {
   71|  2.57k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   72|  2.57k|        (((self.opening_count as i32) - self.closing_mask.count_ones() as i32) + self.depth) as isize
   73|  2.57k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCs9TfoC9TDKig_19fuzz_arbitrary_json:
   65|  2.00k|    fn get_depth(&self) -> isize {
   66|  2.00k|        self.depth as isize
   67|  2.00k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCs9TfoC9TDKig_19fuzz_arbitrary_json:
   81|  3.14k|    fn estimate_lowest_possible_depth(&self) -> isize {
   82|  3.14k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   83|  3.14k|        (self.depth - self.closing_mask.count_ones() as i32) as isize
   84|  3.14k|    }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  6.29k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  6.29k|        _mm256_set1_epi8(self.opening)
   25|  6.29k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masksCs9TfoC9TDKig_19fuzz_arbitrary_json:
   34|  6.29k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   35|  6.29k|        assert_eq!(32, bytes.len());
   36|       |        // SAFETY: target_feature invariant
   37|       |        unsafe {
   38|  6.29k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   39|  6.29k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   40|  6.29k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   41|  6.29k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   42|  6.29k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   43|  6.29k|
   44|  6.29k|            (opening_mask, closing_mask)
   45|  6.29k|        }
   46|  6.29k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  6.29k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  6.29k|        _mm256_set1_epi8(self.opening + 2)
   30|  6.29k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   13|    569|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    569|        let opening = match opening {
   15|     67|            BracketType::Square => b'[',
   16|    502|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    569|        Self { opening: opening as i8 }
   20|    569|    }

_RINvXNtNtCs8dUjriG0K0U_8rsonpath14classification4maskyNtB3_4Mask6is_litjECs9TfoC9TDKig_19fuzz_arbitrary_json:
   11|  2.78k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  2.78k|    where
   13|  2.78k|        Self: Shl<N, Output = Self>,
   14|  2.78k|    {
   15|  2.78k|        (*self & (1 << bit)) != 0
   16|  2.78k|    }
_RNvNtNtNtCs8dUjriG0K0U_8rsonpath14classification4mask3m6410combine_32Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   52|  81.5k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  81.5k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  81.5k|    }

_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE15find_label_avx2Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  124|  2.55k|    unsafe fn find_label_avx2(
  125|  2.55k|        &mut self,
  126|  2.55k|        label: &JsonString,
  127|  2.55k|        mut offset: usize,
  128|  2.55k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  129|  2.55k|        if label.unquoted().is_empty() {
  130|  1.66k|            return self.find_empty(label, offset);
  131|    891|        } else if label.unquoted().len() == 1 {
  132|    672|            return self.find_letter(label, offset);
  133|    219|        }
  134|    219|
  135|    219|        let classifier =
  136|    219|            vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], label.unquoted().as_bytes()[1]);
  137|    219|        let mut previous_block: u64 = 0;
  138|       |
  139|  1.64k|        while let Some(block) = self.iter.next().e()? {
  140|  1.52k|            let (block1, block2) = block.halves();
  141|  1.52k|            let classified1 = classifier.classify_block(block1);
  142|  1.52k|            let classified2 = classifier.classify_block(block2);
  143|  1.52k|
  144|  1.52k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  145|  1.52k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  146|       |
  147|     98|            if let Some(res) =
  148|  1.52k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  149|       |            {
  150|     98|                return Ok(Some((res, block)));
  151|  1.42k|            }
  152|  1.42k|
  153|  1.42k|            offset += SIZE;
  154|  1.42k|            previous_block = first_bitmask >> (SIZE - 1);
  155|       |        }
  156|       |
  157|    121|        Ok(None)
  158|  2.55k|    }
_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2f_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCs9TfoC9TDKig_19fuzz_arbitrary_json:
  168|  5.36k|    fn find_label(
  169|  5.36k|        &mut self,
  170|  5.36k|        first_block: Option<I::Block<'i, SIZE>>,
  171|  5.36k|        start_idx: usize,
  172|  5.36k|        label: &JsonString,
  173|  5.36k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  174|  5.36k|        if let Some(b) = first_block {
  175|  4.28k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  176|  2.80k|                return Ok(Some(res));
  177|  1.48k|            }
  178|  1.07k|        }
  179|  2.55k|        let next_block_offset = self.iter.get_offset();
  180|  2.55k|        // SAFETY: target feature invariant
  181|  2.55k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  182|  5.36k|    }
_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE10find_emptyCs9TfoC9TDKig_19fuzz_arbitrary_json:
   54|  1.66k|    unsafe fn find_empty(
   55|  1.66k|        &mut self,
   56|  1.66k|        label: &JsonString,
   57|  1.66k|        mut offset: usize,
   58|  1.66k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   59|  1.66k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   60|  1.66k|        let mut previous_block: u64 = 0;
   61|       |
   62|  4.56k|        while let Some(block) = self.iter.next().e()? {
   63|  4.09k|            let (block1, block2) = block.halves();
   64|  4.09k|            let classified1 = classifier.classify_block(block1);
   65|  4.09k|            let classified2 = classifier.classify_block(block2);
   66|  4.09k|
   67|  4.09k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   68|  4.09k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   69|  4.09k|
   70|  4.09k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   71|  5.03k|            while result != 0 {
   72|  2.13k|                let idx = result.trailing_zeros() as usize;
   73|  2.13k|                if self
   74|  2.13k|                    .input
   75|  2.13k|                    .is_member_match(offset + idx - 1, offset + idx + 1, label)
   76|  2.13k|                    .e()?
   77|       |                {
   78|  1.19k|                    return Ok(Some((offset + idx - 1, block)));
   79|    938|                }
   80|    938|                result &= !(1 << idx);
   81|       |            }
   82|       |
   83|  2.89k|            offset += SIZE;
   84|  2.89k|            previous_block = first_bitmask >> (SIZE - 1);
   85|       |        }
   86|       |
   87|    472|        Ok(None)
   88|  1.66k|    }
_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE11find_letterCs9TfoC9TDKig_19fuzz_arbitrary_json:
   94|    672|    unsafe fn find_letter(
   95|    672|        &mut self,
   96|    672|        label: &JsonString,
   97|    672|        mut offset: usize,
   98|    672|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   99|    672|        let classifier = vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], b'"');
  100|    672|        let mut previous_block: u64 = 0;
  101|       |
  102|  2.53k|        while let Some(block) = self.iter.next().e()? {
  103|  2.39k|            let (block1, block2) = block.halves();
  104|  2.39k|            let classified1 = classifier.classify_block(block1);
  105|  2.39k|            let classified2 = classifier.classify_block(block2);
  106|  2.39k|
  107|  2.39k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  108|  2.39k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  109|       |
  110|    532|            if let Some(res) =
  111|  2.39k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  112|       |            {
  113|    532|                return Ok(Some((res, block)));
  114|  1.86k|            }
  115|  1.86k|
  116|  1.86k|            offset += SIZE;
  117|  1.86k|            previous_block = first_bitmask >> (SIZE - 1);
  118|       |        }
  119|       |
  120|    140|        Ok(None)
  121|    672|    }
_RINvXNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEECs9TfoC9TDKig_19fuzz_arbitrary_json:
   19|  5.36k|    fn memmem<'i, 'b, 'r, I, R>(
   20|  5.36k|        input: &'i I,
   21|  5.36k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
   22|  5.36k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   23|  5.36k|    where
   24|  5.36k|        I: Input,
   25|  5.36k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
   26|  5.36k|        'i: 'r,
   27|  5.36k|    {
   28|  5.36k|        Self::Classifier { input, iter }
   29|  5.36k|    }

_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input8borrowed13BorrowedBytesKj40_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
   16|  4.28k|pub(crate) fn find_label_in_first_block<'i, 'r, I, const N: usize>(
   17|  4.28k|    input: &I,
   18|  4.28k|    first_block: I::Block<'i, N>,
   19|  4.28k|    start_idx: usize,
   20|  4.28k|    label: &JsonString,
   21|  4.28k|) -> Result<Option<(usize, I::Block<'i, N>)>, InputError>
   22|  4.28k|where
   23|  4.28k|    I: Input,
   24|  4.28k|    'i: 'r,
   25|  4.28k|{
   26|  4.28k|    let block_idx = start_idx % N;
   27|  4.28k|    let label_size = label.quoted().len();
   28|       |
   29|  83.7k|    for (i, c) in first_block[block_idx..].iter().copied().enumerate() {
   30|  83.7k|        let j = start_idx + i;
   31|  83.7k|
   32|  83.7k|        if c == b'"' && input.is_member_match(j, j + label_size, label).e()? {
   33|  2.80k|            return Ok(Some((j, first_block)));
   34|  80.9k|        }
   35|       |    }
   36|       |
   37|  1.48k|    Ok(None)
   38|  4.28k|}

_RINvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input8borrowed13BorrowedBytesECs9TfoC9TDKig_19fuzz_arbitrary_json:
   11|  3.92k|pub(crate) fn find_in_mask<I: Input>(
   12|  3.92k|    input: &I,
   13|  3.92k|    label: &JsonString,
   14|  3.92k|    previous_block: u64,
   15|  3.92k|    first: u64,
   16|  3.92k|    second: u64,
   17|  3.92k|    offset: usize,
   18|  3.92k|) -> Result<Option<usize>, InputError> {
   19|  3.92k|    let label_size = label.quoted().len();
   20|  3.92k|    let mut result = (previous_block | (first << 1)) & second;
   21|  9.15k|    while result != 0 {
   22|  5.86k|        let idx = result.trailing_zeros() as usize;
   23|      0|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   24|  5.86k|        if offset + idx > 1
   25|  5.85k|            && input
   26|  5.85k|                .is_member_match(offset + idx - 2, offset + idx + label_size - 2, label)
   27|  5.85k|                .e()?
   28|       |        {
   29|    630|            return Ok(Some(offset + idx - 2));
   30|  5.23k|        }
   31|  5.23k|        result &= !(1 << idx);
   32|       |    }
   33|  3.29k|    Ok(None)
   34|  3.92k|}

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  2.55k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  2.55k|        Self {
   15|  2.55k|            first: _mm256_set1_epi8(first as i8),
   16|  2.55k|            second: _mm256_set1_epi8(second as i8),
   17|  2.55k|        }
   18|  2.55k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  16.0k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  16.0k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  16.0k|
   24|  16.0k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  16.0k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  16.0k|
   27|  16.0k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  16.0k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  16.0k|
   30|  16.0k|        BlockClassification256 { first, second }
   31|  16.0k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification6quotesINtB2_20QuoteClassifiedBlockRShyKj40_E3lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
   85|    569|    pub fn len(&self) -> usize {
   86|    569|        self.block.len()
   87|    569|    }

_RINvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs9TfoC9TDKig_19fuzz_arbitrary_json:
   22|  18.5k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  18.5k|        block!(blocks[..64]);
   24|       |
   25|  18.5k|        let (block1, block2) = blocks.halves();
   26|  18.5k|        let classification1 = vector_256::classify_block(block1);
   27|  18.5k|        let classification2 = vector_256::classify_block(block2);
   28|  18.5k|
   29|  18.5k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  18.5k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  18.5k|
   32|  18.5k|        self.internal_classifier.classify(slashes, quotes)
   33|  18.5k|    }
_RNvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   15|  3.79k|    fn new() -> Self {
   16|  3.79k|        Self {
   17|  3.79k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  3.79k|        }
   19|  3.79k|    }
_RNCINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1Q_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3i_5MatchEEKj40_EE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
    8|  2.78k|super::shared::quote_classifier!(Avx2QuoteClassifier64, BlockAvx2Classifier, 64, u64);

_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
   79|  16.3k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  16.3k|                match self.iter.next().e()? {
   81|  15.7k|                    Some(block) => {
   82|  15.7k|                        // SAFETY: target_feature invariant
   83|  15.7k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  15.7k|                        let classified_block = QuoteClassifiedBlock {
   85|  15.7k|                            block,
   86|  15.7k|                            within_quotes_mask: mask,
   87|  15.7k|                        };
   88|  15.7k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    544|                    None => Ok(None),
   91|       |                }
   92|  16.3k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCs9TfoC9TDKig_19fuzz_arbitrary_json:
  100|   110k|            fn get_offset(&self) -> usize {
  101|   110k|                self.iter.get_offset() - $size
  102|   110k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_9InnerIterB1w_E10into_innerCs9TfoC9TDKig_19fuzz_arbitrary_json:
  126|  2.44k|            fn into_inner(self) -> I {
  127|  2.44k|                self.iter
  128|  2.44k|            }
_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3d_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   20|  1.01k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  1.01k|            where
   22|  1.01k|                I: InputBlockIterator<'i, $size>,
   23|  1.01k|            {
   24|  1.01k|                Self::Classifier {
   25|  1.01k|                    iter,
   26|  1.01k|                    classifier: $core::new(),
   27|  1.01k|                    phantom: PhantomData,
   28|  1.01k|                }
   29|  1.01k|            }
_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1O_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3g_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   33|  2.78k|            fn resume<'i, I>(
   34|  2.78k|                iter: I,
   35|  2.78k|                first_block: Option<I::Block>,
   36|  2.78k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   37|  2.78k|            where
   38|  2.78k|                I: InputBlockIterator<'i, $size>,
   39|  2.78k|            {
   40|  2.78k|                let mut s = Self::Classifier {
   41|  2.78k|                    iter,
   42|  2.78k|                    classifier: $core::new(),
   43|  2.78k|                    phantom: PhantomData,
   44|  2.78k|                };
   45|  2.78k|
   46|  2.78k|                let block = first_block.map(|b| {
   47|       |                    // SAFETY: target feature invariant
   48|       |                    let mask = unsafe { s.classifier.classify(&b) };
   49|       |                    QuoteClassifiedBlock {
   50|       |                        block: b,
   51|       |                        within_quotes_mask: mask,
   52|       |                    }
   53|  2.78k|                });
   54|  2.78k|
   55|  2.78k|                ResumedQuoteClassifier {
   56|  2.78k|                    classifier: s,
   57|  2.78k|                    first_block: block,
   58|  2.78k|                }
   59|  2.78k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E6offsetCs9TfoC9TDKig_19fuzz_arbitrary_json:
  105|    288|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  106|    288|                debug_assert!(count > 0);
  107|      0|                debug!("Offsetting by {count}");
  108|       |
  109|    288|                for _ in 0..count - 1 {
  110|    123|                    self.iter.next().e()?;
  111|       |                }
  112|       |
  113|    288|                self.next()
  114|    288|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E15flip_quotes_bitCs9TfoC9TDKig_19fuzz_arbitrary_json:
  117|  1.33k|            fn flip_quotes_bit(&mut self) {
  118|  1.33k|                self.classifier.internal_classifier.flip_prev_quote_mask();
  119|  1.33k|            }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   38|  1.33k|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|  1.33k|        self.prev_block_mask ^= 0x02;
   40|  1.33k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   26|  3.79k|    pub(crate) fn new() -> Self {
   27|  3.79k|        Self { prev_block_mask: 0 }
   28|  3.79k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  29.8k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  29.8k|        u64::from(self.prev_block_mask & 0x01)
   46|  29.8k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  18.5k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  18.5k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  18.5k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  18.5k|unsafe fn all_ones128() -> __m128i {
   14|  18.5k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  18.5k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  18.5k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  18.5k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  7.28k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  11.2k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  11.2k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  11.2k|            let odd_starts = ODD & starts;
   62|  11.2k|            let even_starts = EVEN & starts;
   63|  11.2k|
   64|  11.2k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  11.2k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  11.2k|
   67|  11.2k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  11.2k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  11.2k|
   70|  11.2k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  11.2k|
   72|  11.2k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  18.5k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  18.5k|
   77|  18.5k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  18.5k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  18.5k|
   80|  18.5k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  18.5k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  18.5k|        within_quotes
   93|  18.5k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  18.5k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  18.5k|        let slash_mask = u8::from(set_slash_mask);
   33|  18.5k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  18.5k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  18.5k|    }

_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  37.1k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  37.1k|    _mm256_set1_epi8(b'\\' as i8)
   14|  37.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  37.1k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  37.1k|    _mm256_set1_epi8(b'"' as i8)
    9|  37.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  37.1k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  37.1k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  37.1k|
   20|  37.1k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  37.1k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  37.1k|
   23|  37.1k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  37.1k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  37.1k|
   26|  37.1k|    BlockClassification256 { slashes, quotes }
   27|  37.1k|}

_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  334|  2.09k|    pub(crate) fn new() -> Self {
  335|  2.09k|        Self { phantom: PhantomData }
  336|  2.09k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  379|  2.78k|    fn resume_quote_classification<'i, I>(
  380|  2.78k|        self,
  381|  2.78k|        iter: I,
  382|  2.78k|        first_block: Option<I::Block>,
  383|  2.78k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  384|  2.78k|    where
  385|  2.78k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  386|  2.78k|    {
  387|  2.78k|        Q::resume(iter, first_block)
  388|  2.78k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  413|    569|    fn resume_depth_classification<'i, I>(
  414|    569|        self,
  415|    569|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  416|    569|        opening: BracketType,
  417|    569|    ) -> DepthIteratorResumeOutcome<
  418|    569|        'i,
  419|    569|        I,
  420|    569|        Self::QuotesClassifier<'i, I>,
  421|    569|        Self::DepthClassifier<'i, I>,
  422|    569|        MaskType,
  423|    569|        BLOCK_SIZE,
  424|    569|    >
  425|    569|    where
  426|    569|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  427|    569|    {
  428|    569|        D::resume(state, opening)
  429|    569|    }
_RNvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs9TfoC9TDKig_19fuzz_arbitrary_json:
  366|  3.94k|    fn dispatch_tag(self) -> usize {
  367|  3.94k|        TARGET
  368|  3.94k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  391|  1.01k|    fn classify_structural_characters<'i, I>(
  392|  1.01k|        self,
  393|  1.01k|        iter: Self::QuotesClassifier<'i, I>,
  394|  1.01k|    ) -> Self::StructuralClassifier<'i, I>
  395|  1.01k|    where
  396|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  397|  1.01k|    {
  398|  1.01k|        S::new(iter)
  399|  1.01k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs9TfoC9TDKig_19fuzz_arbitrary_json:
  475|  2.09k|    pub(crate) fn fast_quotes(&self) -> bool {
  476|  2.09k|        self.fast_quotes
  477|  2.09k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs9TfoC9TDKig_19fuzz_arbitrary_json:
  471|  2.09k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  472|  2.09k|        self.highest_simd
  473|  2.09k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath14classification4simd9configureCs9TfoC9TDKig_19fuzz_arbitrary_json:
  533|  2.85k|pub(crate) fn configure() -> SimdConfiguration {
  534|  2.85k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  535|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  536|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  537|  2.85k|    }
  538|       |
  539|       |    cfg_if! {
  540|       |        if #[cfg(not(feature = "simd"))]
  541|       |        {
  542|       |            let highest_simd = SimdTag::Nosimd;
  543|       |            let fast_quotes = false;
  544|       |            let fast_popcnt = false;
  545|       |        }
  546|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  547|       |        {
  548|  2.85k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  549|  2.85k|                SimdTag::Avx2
  550|      0|            } else if is_x86_feature_detected!("ssse3") {
  551|      0|                SimdTag::Ssse3
  552|      0|            } else if is_x86_feature_detected!("sse2") {
  553|      0|                SimdTag::Sse2
  554|       |            } else {
  555|      0|                SimdTag::Nosimd
  556|       |            };
  557|       |
  558|  2.85k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  559|  2.85k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  560|       |        }
  561|       |        else
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |    }
  568|       |
  569|  2.85k|    SimdConfiguration {
  570|  2.85k|        highest_simd,
  571|  2.85k|        fast_quotes,
  572|  2.85k|        fast_popcnt,
  573|  2.85k|    }
  574|  2.85k|}
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5R_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  371|  1.01k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  372|  1.01k|    where
  373|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  374|  1.01k|    {
  375|  1.01k|        Q::new(iter)
  376|  1.01k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4w_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5Y_5MatchEEKj40_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  402|  3.12k|    fn resume_structural_classification<'i, I>(
  403|  3.12k|        self,
  404|  3.12k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  405|  3.12k|    ) -> Self::StructuralClassifier<'i, I>
  406|  3.12k|    where
  407|  3.12k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  408|  3.12k|    {
  409|  3.12k|        S::resume(state)
  410|  3.12k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd6memmemNtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4I_5MatchEEECs9TfoC9TDKig_19fuzz_arbitrary_json:
  432|  5.36k|    fn memmem<'i, 'b, 'r, I, R>(
  433|  5.36k|        self,
  434|  5.36k|        input: &'i I,
  435|  5.36k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
  436|  5.36k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  437|  5.36k|    where
  438|  5.36k|        I: Input,
  439|  5.36k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
  440|  5.36k|        'i: 'r,
  441|  5.36k|    {
  442|  5.36k|        M::memmem(input, iter)
  443|  5.36k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs9TfoC9TDKig_19fuzz_arbitrary_json:
  479|  2.09k|    pub(crate) fn fast_popcnt(&self) -> bool {
  480|  2.09k|        self.fast_popcnt
  481|  2.09k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|   103k|    pub fn offset(self, amount: usize) -> Self {
   70|   103k|        match self {
   71|  27.8k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  22.1k|            Colon(idx) => Colon(idx + amount),
   73|  36.5k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  16.6k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|   103k|    }
_RNvXs5_NtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs9TfoC9TDKig_19fuzz_arbitrary_json:
   21|  72.9k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|  1.26k|    pub fn idx(self) -> usize {
   50|  1.26k|        match self {
   51|  1.26k|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|  1.26k|        }
   53|  1.26k|    }
_RINvYNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1S_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3k_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  195|  3.12k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  3.12k|    where
  197|  3.12k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  3.12k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  3.12k|    {
  200|  3.12k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  3.12k|    }

_RINvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs9TfoC9TDKig_19fuzz_arbitrary_json:
   28|  22.0k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  22.0k|        &mut self,
   30|  22.0k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  22.0k|    ) -> mask_64::StructuralsBlock<B> {
   32|  22.0k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  22.0k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  22.0k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  22.0k|
   36|  22.0k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  22.0k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|       |
   39|      0|        bin_u64!("structural", structural);
   40|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|       |
   42|  22.0k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  22.0k|    }
_RNCNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E6resume0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   13|  3.09k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E4stop0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   13|  2.77k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNCNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   13|   103k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  4.14k|    fn new() -> Self {
   21|  4.14k|        Self {
   22|  4.14k|            // SAFETY: target feature invariant
   23|  4.14k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  4.14k|        }
   25|  4.14k|    }

_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E6resumeCs9TfoC9TDKig_19fuzz_arbitrary_json:
  204|  3.12k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  205|  3.12k|                let mut classifier = $core::new();
  206|  3.12k|
  207|  3.12k|                // SAFETY: target_feature invariant
  208|  3.12k|                unsafe {
  209|  3.12k|                    if state.are_commas_on && state.are_colons_on {
  210|    123|                        classifier.internal_classifier.toggle_colons_and_commas();
  211|    123|                    } else {
  212|  3.00k|                        if state.are_commas_on {
  213|  2.42k|                            classifier.internal_classifier.toggle_commas();
  214|  2.42k|                        }
  215|  3.00k|                        if state.are_colons_on {
  216|     42|                            classifier.internal_classifier.toggle_colons();
  217|  2.96k|                        }
  218|       |                    }
  219|       |                }
  220|       |
  221|  3.12k|                let block = state.block.map(|b| {
  222|       |                    // SAFETY: target_feature invariant
  223|       |                    let mut block = unsafe { classifier.classify(b.block) };
  224|       |                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  225|       |                    block.structural_mask &= idx_mask;
  226|       |
  227|       |                    block
  228|  3.12k|                });
  229|  3.12k|
  230|  3.12k|                Self {
  231|  3.12k|                    iter: state.iter,
  232|  3.12k|                    block,
  233|  3.12k|                    classifier,
  234|  3.12k|                    are_commas_on: state.are_commas_on,
  235|  3.12k|                    are_colons_on: state.are_colons_on,
  236|  3.12k|                }
  237|  3.12k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
   85|   103k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   116k|                while self.current_block_is_spent() {
   87|  13.3k|                    match self.iter.next() {
   88|  12.7k|                        Ok(Some(block)) => {
   89|  12.7k|                            // SAFETY: target_feature invariant
   90|  12.7k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  12.7k|                        }
   92|       |                        Ok(None) => {
   93|    544|                            self.block = None;
   94|    544|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|   103k|                Ok(self
  101|   103k|                    .block
  102|   103k|                    .as_mut()
  103|   103k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|   103k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCs9TfoC9TDKig_19fuzz_arbitrary_json:
  157|  5.09k|            fn turn_commas_off(&mut self) {
  158|  5.09k|                if self.are_commas_on {
  159|  2.54k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  2.54k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|  2.55k|                }
  164|  5.09k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCs9TfoC9TDKig_19fuzz_arbitrary_json:
  167|  2.36k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  2.36k|                if !self.are_colons_on {
  169|  2.36k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  2.36k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  2.36k|
  174|  2.36k|                    self.reclassify(idx);
  175|      0|                }
  176|  2.36k|            }
_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   21|  1.01k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  1.01k|            where
   23|  1.01k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  1.01k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  1.01k|            {
   26|  1.01k|                Self::Classifier {
   27|  1.01k|                    iter,
   28|  1.01k|                    classifier: $core::new(),
   29|  1.01k|                    block: None,
   30|  1.01k|                    are_commas_on: false,
   31|  1.01k|                    are_colons_on: false,
   32|  1.01k|                }
   33|  1.01k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E4stopCs9TfoC9TDKig_19fuzz_arbitrary_json:
  189|  2.78k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  190|  2.78k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  191|       |                    idx: b.get_idx() as usize,
  192|       |                    block: b.quote_classified,
  193|  2.78k|                });
  194|  2.78k|
  195|  2.78k|                ResumeClassifierState {
  196|  2.78k|                    iter: self.iter,
  197|  2.78k|                    block,
  198|  2.78k|                    are_commas_on: self.are_commas_on,
  199|  2.78k|                    are_colons_on: self.are_colons_on,
  200|  2.78k|                }
  201|  2.78k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCs9TfoC9TDKig_19fuzz_arbitrary_json:
  179|  19.4k|            fn turn_colons_off(&mut self) {
  180|  19.4k|                if self.are_colons_on {
  181|  2.20k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  2.20k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  17.2k|                }
  186|  19.4k|            }
_RNvMs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCs9TfoC9TDKig_19fuzz_arbitrary_json:
   49|   116k|            fn current_block_is_spent(&self) -> bool {
   50|   116k|                self.block
   51|   116k|                    .as_ref()
   52|   116k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   116k|            }
_RNvMs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCs9TfoC9TDKig_19fuzz_arbitrary_json:
   56|  6.26k|            fn reclassify(&mut self, idx: usize) {
   57|  6.26k|                if let Some(block) = self.block.take() {
   58|  6.26k|                    let quote_classified_block = block.quote_classified;
   59|  6.26k|                    let relevant_idx = idx + 1;
   60|  6.26k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  6.26k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  6.18k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  6.18k|                        // SAFETY: target_feature invariant
   68|  6.18k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  6.18k|                        new_block.structural_mask &= mask;
   70|  6.18k|                        self.block = Some(new_block);
   71|     81|                    }
   72|      4|                }
   73|  6.26k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCs9TfoC9TDKig_19fuzz_arbitrary_json:
  145|  27.6k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  27.6k|                if !self.are_commas_on {
  147|  1.98k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  1.98k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  1.98k|
  152|  1.98k|                    self.reclassify(idx);
  153|  25.6k|                }
  154|  27.6k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E26turn_colons_and_commas_offCs9TfoC9TDKig_19fuzz_arbitrary_json:
  130|  9.70k|            fn turn_colons_and_commas_off(&mut self) {
  131|  9.70k|                if self.are_commas_on && self.are_colons_on {
  132|    732|                    self.are_commas_on = false;
  133|    732|                    self.are_colons_on = false;
  134|      0|                    debug!("Turning both commas and colons off.");
  135|       |                    // SAFETY: target_feature invariant
  136|    732|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  137|  8.96k|                } else if self.are_commas_on {
  138|    843|                    self.turn_commas_off();
  139|  8.12k|                } else if self.are_colons_on {
  140|    728|                    self.turn_colons_off();
  141|  7.39k|                }
  142|  9.70k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCs9TfoC9TDKig_19fuzz_arbitrary_json:
  113|  20.3k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  20.3k|                if !self.are_commas_on && !self.are_colons_on {
  115|  1.92k|                    self.are_commas_on = true;
  116|  1.92k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  1.92k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  1.92k|
  121|  1.92k|                    self.reclassify(idx);
  122|  18.4k|                } else if !self.are_commas_on {
  123|    913|                    self.turn_commas_on(idx);
  124|  17.5k|                } else if !self.are_colons_on {
  125|  2.36k|                    self.turn_colons_on(idx);
  126|  15.1k|                }
  127|  20.3k|            }

_RNCNvXs_NtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
   40|   103k|        (idx < SIZE).then(|| {
   41|   103k|            let bit_mask = 1 << idx;
   42|   103k|
   43|   103k|            self.structural_mask ^= bit_mask;
   44|   103k|
   45|   103k|            // The last match being a catch-all *is important*.
   46|   103k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|   103k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|   103k|            match self.quote_classified.block[idx] {
   49|  22.1k|                b':' => Structural::Colon(idx),
   50|  18.2k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  18.2k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  16.6k|                b',' => Structural::Comma(idx),
   53|  13.1k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  14.7k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   103k|        })
_RNvXs_NtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
   38|   103k|    fn next(&mut self) -> Option<Structural> {
   39|   103k|        let idx = self.get_idx() as usize;
   40|   103k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   103k|        })
   57|   103k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs9TfoC9TDKig_19fuzz_arbitrary_json:
   24|   115k|    pub(crate) fn is_empty(&self) -> bool {
   25|   115k|        self.structural_mask == 0
   26|   115k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs9TfoC9TDKig_19fuzz_arbitrary_json:
   29|   106k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   106k|        self.structural_mask.trailing_zeros()
   31|   106k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   16|  22.0k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  22.0k|        Self {
   18|  22.0k|            quote_classified: block,
   19|  22.0k|            structural_mask,
   20|  22.0k|        }
   21|  22.0k|    }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs9TfoC9TDKig_19fuzz_arbitrary_json:
   74|  6.95k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  6.95k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  6.95k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   55|  2.77k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  2.77k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  2.77k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   25|  44.1k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  44.1k|    _mm256_set1_epi8(0x0F)
   27|  44.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   31|  44.1k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  44.1k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  44.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   49|  7.39k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  7.39k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  7.39k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs9TfoC9TDKig_19fuzz_arbitrary_json:
   80|  4.61k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  4.61k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  4.61k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs9TfoC9TDKig_19fuzz_arbitrary_json:
   43|  9.72k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  9.72k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  9.72k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs9TfoC9TDKig_19fuzz_arbitrary_json:
   92|  44.1k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  44.1k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  44.1k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  44.1k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  44.1k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  44.1k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  44.1k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  44.1k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  44.1k|
  101|  44.1k|        BlockClassification256 { structural }
  102|  44.1k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs9TfoC9TDKig_19fuzz_arbitrary_json:
   86|  2.77k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  2.77k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  2.77k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  4.14k|    pub(crate) unsafe fn new() -> Self {
   67|  4.14k|        Self {
   68|  4.14k|            upper_nibble_mask: upper_nibble_mask(),
   69|  4.14k|        }
   70|  4.14k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  4.14k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  4.14k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  4.14k|}

_RNvXs6_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs9TfoC9TDKig_19fuzz_arbitrary_json:
    9|  78.6k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs9_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs9TfoC9TDKig_19fuzz_arbitrary_json:
    9|  41.0k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs9TfoC9TDKig_19fuzz_arbitrary_json:
   80|  56.1k|    fn deref(&self) -> &Self::Target {
   81|  56.1k|        &self.0
   82|  56.1k|    }
_RNvMNtCs8dUjriG0K0U_8rsonpath5depthNtB2_5Depth9decrement:
   28|  27.8k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  27.8k|        *self = (*self - 1)?;
   30|  27.8k|        Ok(())
   31|  27.8k|    }
_RNvXsc_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  37.5k|            fn add(self, rhs: u8) -> Self::Output {
   41|  37.5k|                self.0
   42|  37.5k|                    .checked_add(rhs)
   43|  37.5k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  37.5k|                    .map(Depth)
   45|  37.5k|            }
_RNvXsf_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  27.8k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  27.8k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  27.8k|            }
_RNvMNtCs8dUjriG0K0U_8rsonpath5depthNtB2_5Depth9increment:
   21|  37.5k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  37.5k|        *self = (*self + 1)?;
   23|  37.5k|        Ok(())
   24|  37.5k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   95|  2.09k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   96|  2.09k|        let initial_state = automaton.initial_state();
   97|  2.09k|        let fallback_state = automaton[initial_state].fallback_state();
   98|  2.09k|        let transitions = automaton[initial_state].member_transitions();
   99|  2.09k|
  100|  2.09k|        if fallback_state == initial_state
  101|  1.41k|            && transitions.len() == 1
  102|  1.07k|            && automaton[initial_state].array_transitions().is_empty()
  103|       |        {
  104|  1.07k|            let (member_name, target_state) = transitions[0];
  105|      0|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  106|  1.07k|            return Some(Self {
  107|  1.07k|                bytes,
  108|  1.07k|                state: target_state,
  109|  1.07k|                is_accepting: automaton.is_accepting(target_state),
  110|  1.07k|                member_name,
  111|  1.07k|                simd,
  112|  1.07k|            });
  113|  1.01k|        }
  114|  1.01k|
  115|  1.01k|        None
  116|  2.09k|    }
_RINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2e_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3G_5MatchEEKB1c_EINtNtNtNtBb_14classification6quotes7avx2_6421Avx2QuoteClassifier64B29_EyKB1c_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  277|  4.07k|            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|  4.07k|            where
  279|  4.07k|                I: InputBlockIterator<'i, N>,
  280|  4.07k|                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|  4.07k|            {
  282|  4.07k|                let current_block_start = state.iter.get_offset();
  283|  4.07k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|  4.07k|                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|      0|                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|  4.07k|                assert!(index > current_idx);
  292|  4.07k|                let delta = index - current_idx;
  293|  4.07k|
  294|  4.07k|                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|  4.07k|                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|  4.07k|                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|  4.07k|                let remaining = delta + current_block_idx;
  298|  4.07k|                let blocks_to_skip = remaining / N;
  299|  4.07k|                let remainder = remaining % N;
  300|  4.07k|
  301|  4.07k|                match state.block.as_mut() {
  302|  4.07k|                    Some(b) if blocks_to_skip == 0 => {
  303|  3.78k|                        b.idx = remaining;
  304|  3.78k|                    }
  305|    288|                    Some(_) => {
  306|    288|                        state.block = state
  307|    288|                            .iter
  308|    288|                            .offset(blocks_to_skip as isize)?
  309|    288|                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|    288|                            });
  313|       |                    }
  314|      0|                    None => {
  315|      0|                        state.block = state
  316|      0|                            .iter
  317|      0|                            .offset((blocks_to_skip + 1) as isize)?
  318|      0|                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|      0|                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|      0|                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|  4.07k|                Ok(())
  328|  4.07k|            }
_RNCINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  168|  2.78k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
_RNCINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_Es_0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  254|  2.44k|                            first_block = classifier_state.block.map(|b| b.block.block);
_RINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB5_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2D_6quotes7avx2_6411ConstructorNtNtNtB2D_10structural7avx2_6411ConstructorNtNtNtB2D_5depth7avx2_6411ConstructorNtNtNtB2D_6memmem7avx2_6411ConstructorKj1_EINtNtB7_4main8ExecutorB1V_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6n_5MatchEEB2y_EB6i_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  134|  1.07k|        {
  135|  1.07k|            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|  1.07k|            let mut idx = 0;
  137|  1.07k|            let mut first_block = None;
  138|       |
  139|  5.36k|            loop {
  140|  5.36k|                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|      0|                debug!("Starting memmem search from {idx}");
  142|       |
  143|  5.36k|                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|  4.62k|                    drop(memmem);
  145|  4.62k|
  146|  4.62k|                    first_block = Some(last_block);
  147|  4.62k|                    idx = starting_quote_idx;
  148|      0|                    debug!("Needle found at {idx}");
  149|  4.62k|                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|  4.62k|
  151|  4.62k|                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|  2.78k|                    Some((colon_idx, b':')) => {
  153|  2.78k|                        let (next_idx, next_c) = head_skip
  154|  2.78k|                            .bytes
  155|  2.78k|                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|  2.78k|                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|  2.78k|                                classifier: quote_classifier,
  160|  2.78k|                                first_block: quote_classified_first_block,
  161|  2.78k|                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|  2.78k|
  163|  2.78k|                            // Temporarily set the index within the current block to zero.
  164|  2.78k|                            // This makes sense for the move below.
  165|  2.78k|                            let mut classifier_state = ResumeClassifierState {
  166|  2.78k|                                iter: quote_classifier,
  167|  2.78k|                                block: quote_classified_first_block
  168|  2.78k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|  2.78k|                                are_colons_on: false,
  170|  2.78k|                                are_commas_on: head_skip.is_accepting,
  171|  2.78k|                            };
  172|       |
  173|      0|                            debug!("Actual match with colon at {colon_idx}");
  174|      0|                            debug!("Next significant character at {next_idx}");
  175|      0|                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|      0|                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|  2.78k|                            if next_c == b'{' || next_c == b'[' {
  185|  1.29k|                                forward_to(&mut classifier_state, next_idx)?;
  186|  1.29k|                                if head_skip.is_accepting {
  187|  1.03k|                                    engine.recorder().record_match(
  188|  1.03k|                                        next_idx,
  189|  1.03k|                                        Depth::ZERO,
  190|  1.03k|                                        crate::result::MatchedNodeType::Complex,
  191|  1.03k|                                    )?;
  192|    254|                                }
  193|  1.29k|                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|  1.49k|                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|  2.78k|                            if let Some(block) = classifier_state.block.as_mut() {
  206|  2.78k|                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|  2.78k|                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|      0|                                    debug!("Mask needs flipping!");
  209|  1.33k|                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|  1.33k|                                    classifier_state.iter.flip_quotes_bit();
  211|  1.44k|                                }
  212|      0|                            }
  213|       |
  214|  2.44k|                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|      0|                                    debug!("resuming");
  217|  1.29k|                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|  1.29k|                                    engine
  219|  1.29k|                                        .run_on_subtree(
  220|  1.29k|                                            Structural::Opening(
  221|  1.29k|                                                if next_c == b'{' {
  222|  1.10k|                                                    BracketType::Curly
  223|       |                                                } else {
  224|    181|                                                    BracketType::Square
  225|       |                                                },
  226|  1.29k|                                                next_idx,
  227|  1.29k|                                            ),
  228|  1.29k|                                            head_skip.state,
  229|  1.29k|                                            classifier,
  230|    341|                                        )?
  231|       |                                        .0
  232|       |                                }
  233|  1.27k|                                _ if head_skip.is_accepting => {
  234|  1.27k|                                    engine.recorder().record_match(
  235|  1.27k|                                        next_idx,
  236|  1.27k|                                        Depth::ZERO,
  237|  1.27k|                                        crate::result::MatchedNodeType::Atomic,
  238|  1.27k|                                    )?;
  239|  1.27k|                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|  1.27k|                                    let next_structural = classifier.next()?;
  241|       |
  242|  1.27k|                                    match next_structural {
  243|  1.26k|                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|      4|                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|  1.26k|                                    classifier.stop()
  247|       |                                }
  248|    226|                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|      0|                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|  2.44k|                            idx = classifier_state.get_idx();
  253|  2.44k|
  254|  2.44k|                            first_block = classifier_state.block.map(|b| b.block.block);
  255|  2.44k|                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|  1.84k|                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|      0|                    debug!("No memmem matches, exiting");
  261|    733|                    break;
  262|    733|                }
  263|    733|            }
  264|    733|
  265|    733|            return Ok(());
_RINvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input8borrowed13BorrowedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1N_6quotes7avx2_6411ConstructorNtNtNtB1N_10structural7avx2_6411ConstructorNtNtNtB1N_5depth7avx2_6411ConstructorNtNtNtB1N_6memmem7avx2_6411ConstructorKj1_EKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEB1I_EB5R_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  120|  1.07k|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  121|  1.07k|    where
  122|  1.07k|        'b: 'r,
  123|  1.07k|        E: CanHeadSkip<'b, 'r, I, R, V>,
  124|  1.07k|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  125|  1.07k|    {
  126|  1.07k|        dispatch_simd!(self.simd; self, engine =>
  127|       |        fn<'b, 'q, 'r, I, V, E, R>(head_skip: &HeadSkip<'b, 'q, I, V, BLOCK_SIZE>, engine: &mut E) -> Result<(), EngineError>
  128|       |        where
  129|       |            'b: 'r,
  130|       |            E: CanHeadSkip<'b, 'r, I, R, V>,
  131|       |            R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  132|       |            I: Input,
  133|       |            V: Simd
  134|       |        {
  135|       |            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|       |            let mut idx = 0;
  137|       |            let mut first_block = None;
  138|       |
  139|       |            loop {
  140|       |                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|       |                debug!("Starting memmem search from {idx}");
  142|       |
  143|       |                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|       |                    drop(memmem);
  145|       |
  146|       |                    first_block = Some(last_block);
  147|       |                    idx = starting_quote_idx;
  148|       |                    debug!("Needle found at {idx}");
  149|       |                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|       |
  151|       |                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|       |                    Some((colon_idx, b':')) => {
  153|       |                        let (next_idx, next_c) = head_skip
  154|       |                            .bytes
  155|       |                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|       |                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|       |                                classifier: quote_classifier,
  160|       |                                first_block: quote_classified_first_block,
  161|       |                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|       |
  163|       |                            // Temporarily set the index within the current block to zero.
  164|       |                            // This makes sense for the move below.
  165|       |                            let mut classifier_state = ResumeClassifierState {
  166|       |                                iter: quote_classifier,
  167|       |                                block: quote_classified_first_block
  168|       |                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|       |                                are_colons_on: false,
  170|       |                                are_commas_on: head_skip.is_accepting,
  171|       |                            };
  172|       |
  173|       |                            debug!("Actual match with colon at {colon_idx}");
  174|       |                            debug!("Next significant character at {next_idx}");
  175|       |                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|       |                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|       |                            if next_c == b'{' || next_c == b'[' {
  185|       |                                forward_to(&mut classifier_state, next_idx)?;
  186|       |                                if head_skip.is_accepting {
  187|       |                                    engine.recorder().record_match(
  188|       |                                        next_idx,
  189|       |                                        Depth::ZERO,
  190|       |                                        crate::result::MatchedNodeType::Complex,
  191|       |                                    )?;
  192|       |                                }
  193|       |                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|       |                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|       |                            if let Some(block) = classifier_state.block.as_mut() {
  206|       |                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|       |                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|       |                                    debug!("Mask needs flipping!");
  209|       |                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|       |                                    classifier_state.iter.flip_quotes_bit();
  211|       |                                }
  212|       |                            }
  213|       |
  214|       |                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|       |                                    debug!("resuming");
  217|       |                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|       |                                    engine
  219|       |                                        .run_on_subtree(
  220|       |                                            Structural::Opening(
  221|       |                                                if next_c == b'{' {
  222|       |                                                    BracketType::Curly
  223|       |                                                } else {
  224|       |                                                    BracketType::Square
  225|       |                                                },
  226|       |                                                next_idx,
  227|       |                                            ),
  228|       |                                            head_skip.state,
  229|       |                                            classifier,
  230|       |                                        )?
  231|       |                                        .0
  232|       |                                }
  233|       |                                _ if head_skip.is_accepting => {
  234|       |                                    engine.recorder().record_match(
  235|       |                                        next_idx,
  236|       |                                        Depth::ZERO,
  237|       |                                        crate::result::MatchedNodeType::Atomic,
  238|       |                                    )?;
  239|       |                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|       |                                    let next_structural = classifier.next()?;
  241|       |
  242|       |                                    match next_structural {
  243|       |                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|       |                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|       |                                    classifier.stop()
  247|       |                                }
  248|       |                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|       |                            idx = classifier_state.get_idx();
  253|       |
  254|       |                            first_block = classifier_state.block.map(|b| b.block.block);
  255|       |                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|       |                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|       |                    debug!("No memmem matches, exiting");
  261|       |                    break;
  262|       |                }
  263|       |            }
  264|       |
  265|       |            return Ok(());
  266|       |
  267|       |            /// Move the state forward to `index`.
  268|       |            ///
  269|       |            /// # Errors
  270|       |            /// If the offset crosses block boundaries, then a new block is read from the underlying
  271|       |            /// [`Input`](crate::input::Input) implementation, which can fail.
  272|       |            ///
  273|       |            /// # Panics
  274|       |            /// If the `index` is not ahead of the current position of the state ([`get_idx`](ResumeClassifierState::get_idx)).
  275|       |            #[inline(always)]
  276|       |            #[allow(clippy::panic_in_result_fn)]
  277|       |            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|       |            where
  279|       |                I: InputBlockIterator<'i, N>,
  280|       |                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|       |            {
  282|       |                let current_block_start = state.iter.get_offset();
  283|       |                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|       |                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|       |                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|       |                assert!(index > current_idx);
  292|       |                let delta = index - current_idx;
  293|       |
  294|       |                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|       |                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|       |                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|       |                let remaining = delta + current_block_idx;
  298|       |                let blocks_to_skip = remaining / N;
  299|       |                let remainder = remaining % N;
  300|       |
  301|       |                match state.block.as_mut() {
  302|       |                    Some(b) if blocks_to_skip == 0 => {
  303|       |                        b.idx = remaining;
  304|       |                    }
  305|       |                    Some(_) => {
  306|       |                        state.block = state
  307|       |                            .iter
  308|       |                            .offset(blocks_to_skip as isize)?
  309|       |                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|       |                            });
  313|       |                    }
  314|       |                    None => {
  315|       |                        state.block = state
  316|       |                            .iter
  317|       |                            .offset((blocks_to_skip + 1) as isize)?
  318|       |                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|       |                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|       |                Ok(())
  328|       |            }
  329|       |        })
  330|  1.07k|    }
_RNCINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_Es_0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  309|    288|                            .map(|b| ResumeClassifierBlockState {
  310|    288|                                block: b,
  311|    288|                                idx: remainder,
  312|    288|                            });
_RNCINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  283|  4.07k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);

_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack4peekCs9TfoC9TDKig_19fuzz_arbitrary_json:
  734|  27.8k|    fn peek(&mut self) -> Option<StackFrame> {
  735|  27.8k|        self.contents.last().copied()
  736|  27.8k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs9TfoC9TDKig_19fuzz_arbitrary_json:
  644|  17.8k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  645|  17.8k|        if self.depth == Depth::ZERO {
  646|  1.98k|            None
  647|       |        } else {
  648|  15.8k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  649|       |
  650|  15.8k|            (char == b':').then_some(char_idx)
  651|       |        }
  652|  17.8k|    }
_RINvNtNtCs8dUjriG0K0U_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  237|  2.09k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  238|  2.09k|    automaton: &'i Automaton<'q>,
  239|  2.09k|    input: &'i I,
  240|  2.09k|    recorder: &'r R,
  241|  2.09k|    simd: V,
  242|  2.09k|) -> Executor<'i, 'q, 'r, I, R, V>
  243|  2.09k|where
  244|  2.09k|    I: Input,
  245|  2.09k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  246|  2.09k|{
  247|  2.09k|    Executor {
  248|  2.09k|        depth: Depth::ZERO,
  249|  2.09k|        state: automaton.initial_state(),
  250|  2.09k|        stack: SmallStack::new(),
  251|  2.09k|        automaton,
  252|  2.09k|        input,
  253|  2.09k|        recorder,
  254|  2.09k|        simd,
  255|  2.09k|        next_event: None,
  256|  2.09k|        is_list: false,
  257|  2.09k|        array_count: JsonUInt::ZERO,
  258|  2.09k|    }
  259|  2.09k|}
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs9TfoC9TDKig_19fuzz_arbitrary_json:
  296|  2.30k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  297|  2.30k|        dispatch_simd!(self.simd; self, classifier =>
  298|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  299|       |        where
  300|       |            'i: 'r,
  301|       |            I: Input,
  302|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  303|       |            V: Simd
  304|       |        {
  305|       |            loop {
  306|       |                // Fetch the next element only if the lookahead is empty.
  307|       |                if eng.next_event.is_none() {
  308|       |                    eng.next_event = match classifier.next() {
  309|       |                        Ok(e) => e,
  310|       |                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|       |                }
  313|       |                if let Some(event) = eng.next_event.take() {
  314|       |                    debug!("====================");
  315|       |                    debug!("Event = {:?}", event);
  316|       |                    debug!("Depth = {:?}", eng.depth);
  317|       |                    debug!("Stack = {:?}", eng.stack);
  318|       |                    debug!("State = {:?}", eng.state);
  319|       |                    debug!("====================");
  320|       |
  321|       |                    match event {
  322|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|       |                        Structural::Closing(_, idx) => {
  326|       |                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|       |                            if eng.depth == Depth::ZERO {
  329|       |                                break;
  330|       |                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|       |                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|       |            Ok(())
  339|       |        })
  340|  2.30k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs9TfoC9TDKig_19fuzz_arbitrary_json:
  570|  27.8k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  571|      0|        debug!("Closing, decreasing depth and popping stack.");
  572|       |
  573|  27.8k|        self.depth
  574|  27.8k|            .decrement()
  575|  27.8k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  576|  27.8k|        self.recorder.record_value_terminator(idx, self.depth)?;
  577|       |
  578|       |        // Restore the state from the stack if the transition was not a loop.
  579|  27.8k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  580|  21.5k|            self.state = stack_frame.state;
  581|  21.5k|            self.is_list = stack_frame.is_list;
  582|  21.5k|            self.array_count = stack_frame.array_count;
  583|       |
  584|      0|            debug!("Restored array count to {}", self.array_count);
  585|       |
  586|       |            // We have taken a transition when entering the just-closed subtree. If the state is unitary
  587|       |            // we can just skip the rest of the current subtree.
  588|  21.5k|            if self.automaton.is_unitary(self.state) {
  589|    224|                let bracket_type = self.current_node_bracket_type();
  590|      0|                debug!("Skipping unique state from {bracket_type:?}");
  591|    224|                let close_idx = classifier.skip(bracket_type)?;
  592|       |                // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  593|       |                // handle a closing, so we set the lookahead to the correct character.
  594|    224|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  595|    224|                return Ok(());
  596|  21.3k|            }
  597|  6.28k|        }
  598|       |
  599|  27.6k|        if self.is_list {
  600|  16.3k|            if self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  601|  10.7k|                || self.automaton.has_any_array_item_transition(self.state)
  602|  12.1k|            {
  603|  12.1k|                classifier.turn_commas_on(idx);
  604|  12.1k|            } else {
  605|  4.25k|                classifier.turn_commas_off();
  606|  4.25k|            }
  607|  11.2k|        } else if self.automaton.has_transition_to_accepting(self.state) {
  608|  7.19k|            classifier.turn_colons_and_commas_on(idx);
  609|  7.19k|        } else {
  610|  4.10k|            classifier.turn_colons_off();
  611|  4.10k|        }
  612|       |
  613|  27.6k|        Ok(())
  614|  27.8k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCs9TfoC9TDKig_19fuzz_arbitrary_json:
  268|  2.09k|    fn run(mut self) -> Result<(), EngineError> {
  269|  2.09k|        // First we check if head-skipping is possible for a given query automaton.
  270|  2.09k|        // If yes, delegate the control to HeadSkip and give it full access to this Executor.
  271|  2.09k|        // Otherwise, we run our normal one-shot engine.
  272|  2.09k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  273|  2.09k|
  274|  2.09k|        match mb_head_skip {
  275|  1.07k|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  276|  1.01k|            None => self.run_and_exit(),
  277|       |        }
  278|  2.09k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs9TfoC9TDKig_19fuzz_arbitrary_json:
  619|  35.4k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  620|  35.4k|        let target_is_list = opening == BracketType::Square;
  621|  35.4k|
  622|  35.4k|        let fallback = self.automaton[self.state].fallback_state();
  623|  35.4k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  624|  35.4k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  625|       |
  626|       |        // To keep the stack small, we only push if the state only changes in any meaningful way.
  627|  35.4k|        if target != self.state || target_is_list != self.is_list || searching_list {
  628|       |            debug!(
  629|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  630|       |                self.state, self.array_count
  631|       |            );
  632|       |
  633|  28.2k|            self.stack.push(StackFrame {
  634|  28.2k|                depth: *self.depth,
  635|  28.2k|                state: self.state,
  636|  28.2k|                is_list: self.is_list,
  637|  28.2k|                array_count: self.array_count,
  638|  28.2k|            });
  639|  28.2k|            self.state = target;
  640|  7.18k|        }
  641|  35.4k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs9TfoC9TDKig_19fuzz_arbitrary_json:
  695|  2.26k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  696|  2.26k|        if self.depth != Depth::ZERO {
  697|    333|            Err(EngineError::MissingClosingCharacter())
  698|       |        } else {
  699|  1.93k|            Ok(())
  700|       |        }
  701|  2.26k|    }
_RNCNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  510|     33|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE25current_node_bracket_typeCs9TfoC9TDKig_19fuzz_arbitrary_json:
  704|    259|    fn current_node_bracket_type(&self) -> BracketType {
  705|    259|        if self.is_list {
  706|      0|            BracketType::Square
  707|       |        } else {
  708|    259|            BracketType::Curly
  709|       |        }
  710|    259|    }
_RNCNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  686|  23.6k|        .map(|x| x.0);
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs9TfoC9TDKig_19fuzz_arbitrary_json:
  739|  27.8k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  740|  27.8k|        if let Some(stack_frame) = self.peek() {
  741|  25.5k|            if depth <= stack_frame.depth {
  742|  21.5k|                return self.contents.pop();
  743|  3.97k|            }
  744|  2.31k|        }
  745|  6.28k|        None
  746|  27.8k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs9TfoC9TDKig_19fuzz_arbitrary_json:
  447|  37.8k|    fn handle_opening(
  448|  37.8k|        &mut self,
  449|  37.8k|        classifier: &mut Classifier!(),
  450|  37.8k|        bracket_type: BracketType,
  451|  37.8k|        idx: usize,
  452|  37.8k|    ) -> Result<(), EngineError> {
  453|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  454|       |
  455|       |        // Check all transitions relevant to the current subtree - array if in list, member if not.
  456|  37.8k|        let mut any_matched = false;
  457|  37.8k|        if self.is_list {
  458|  20.0k|            for trans in self.automaton[self.state].array_transitions() {
  459|  6.89k|                if trans.matches(self.array_count) {
  460|  2.46k|                    let target = trans.target_state();
  461|  2.46k|                    any_matched = true;
  462|  2.46k|                    self.transition_to(target, bracket_type);
  463|  2.46k|                    if self.automaton.is_accepting(target) {
  464|      0|                        debug!("Accept {idx}");
  465|  1.21k|                        self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  466|  1.24k|                    }
  467|  2.46k|                    break;
  468|  4.42k|                }
  469|       |            }
  470|       |        } else {
  471|  17.8k|            let colon_idx = self.find_preceding_colon(idx);
  472|       |
  473|  17.8k|            for &(member_name, target) in self.automaton[self.state].member_transitions() {
  474|  9.26k|                if let Some(colon_idx) = colon_idx {
  475|  7.24k|                    if self.is_match(colon_idx, member_name)? {
  476|  4.68k|                        any_matched = true;
  477|  4.68k|                        self.transition_to(target, bracket_type);
  478|  4.68k|                        if self.automaton.is_accepting(target) {
  479|      0|                            debug!("Accept {idx}");
  480|  2.91k|                            self.record_match_detected_at(colon_idx + 1, NodeType::Complex(bracket_type))?;
  481|  1.76k|                        }
  482|  4.68k|                        break;
  483|  2.56k|                    }
  484|  2.01k|                }
  485|       |            }
  486|       |        }
  487|       |
  488|       |        // If nothing matched trigger the fallback transition.
  489|  37.8k|        if !any_matched && self.depth != Depth::ZERO {
  490|  28.6k|            let fallback = self.automaton[self.state].fallback_state();
  491|      0|            debug!("Falling back to {fallback}");
  492|       |
  493|  28.6k|            if self.automaton.is_rejecting(fallback) {
  494|       |                // Tail skipping. Skip the entire subtree. The skipping consumes the closing character.
  495|       |                // We still need to notify the recorder - in case the value being skipped was actually accepted.
  496|    310|                let closing_idx = classifier.skip(bracket_type)?;
  497|    310|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  498|  28.3k|            } else {
  499|  28.3k|                self.transition_to(fallback, bracket_type);
  500|  28.3k|            }
  501|  28.3k|
  502|  28.3k|            if self.automaton.is_accepting(fallback) {
  503|  9.66k|                self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  504|  18.6k|            }
  505|  9.23k|        }
  506|       |
  507|       |        // At this point we will be actually digging into the subtree.
  508|  37.5k|        self.depth
  509|  37.5k|            .increment()
  510|  37.5k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  511|       |
  512|  37.5k|        self.is_list = bracket_type == BracketType::Square;
  513|  37.5k|        let mut needs_commas = false;
  514|  37.5k|
  515|  37.5k|        // If we're starting a list, there's a very hairy problem of accepting the first element in the list,
  516|  37.5k|        // if it is atomic. We process objects and arrays on their opening character, and atomics on their preceding comma.
  517|  37.5k|        // The first element doesn't have a preceding comma, so if it needs to be accepted we need to handle it now.
  518|  37.5k|        //
  519|  37.5k|        // Additionally, whether to enable commas or not depends on whether an item of the list can ever be accepted.
  520|  37.5k|        if self.is_list {
  521|  18.3k|            let fallback = self.automaton[self.state].fallback_state();
  522|  18.3k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  523|  18.3k|
  524|  18.3k|            if is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state) {
  525|  14.6k|                needs_commas = true;
  526|  14.6k|                self.array_count = JsonUInt::ZERO;
  527|      0|                debug!("Initialized array count to {}", self.array_count);
  528|       |
  529|  14.6k|                let wants_first_item =
  530|  14.6k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  531|       |
  532|  14.6k|                if wants_first_item {
  533|  9.61k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  534|       |
  535|       |                    // We only handle the match if it exists and is atomic. The possible cases
  536|       |                    // in a well-formed JSON for the next character are:
  537|       |                    // - '[', for an array value
  538|       |                    // - '{' for an object value
  539|       |                    // - ']' if the list was empty and has no values
  540|       |                    // - otherwise it's the first character of an atomic value.
  541|  9.61k|                    match next {
  542|  8.88k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  543|    728|                        Some((value_idx, _)) => {
  544|    728|                            self.record_match_detected_at(value_idx, NodeType::Atomic)?;
  545|       |                        }
  546|      0|                        _ => (),
  547|       |                    }
  548|  5.01k|                }
  549|  3.74k|            }
  550|  19.1k|        }
  551|       |
  552|       |        // Decide which structural characters need to be handled in this subtree.
  553|  37.5k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  554|  13.1k|            // When accepting values in an object we need colons for the member names,
  555|  13.1k|            // and commas to report where atomic values end (for the Recorder).
  556|  13.1k|            // This is the only case that needs colons.
  557|  13.1k|            classifier.turn_colons_and_commas_on(idx);
  558|  24.3k|        } else if needs_commas {
  559|  14.6k|            classifier.turn_colons_off();
  560|  14.6k|            classifier.turn_commas_on(idx);
  561|  14.6k|        } else {
  562|  9.70k|            classifier.turn_colons_and_commas_off();
  563|  9.70k|        }
  564|       |
  565|  37.5k|        Ok(())
  566|  37.8k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE8is_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
  656|  17.2k|    fn is_match(&self, idx: usize, member_name: &JsonString) -> Result<bool, EngineError> {
  657|  17.2k|        let len = member_name.quoted().len();
  658|       |
  659|       |        // The colon can be preceded by whitespace before the actual label.
  660|  17.2k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  661|  17.2k|            Some(x) => x,
  662|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  663|       |        };
  664|       |
  665|       |        // First check if the length matches.
  666|  17.2k|        if closing_quote_idx + 1 < len {
  667|    319|            return Ok(false);
  668|  16.9k|        }
  669|  16.9k|
  670|  16.9k|        // Do the expensive memcmp.
  671|  16.9k|        let start_idx = closing_quote_idx + 1 - len;
  672|  16.9k|        self.input
  673|  16.9k|            .is_member_match(start_idx, closing_quote_idx + 1, member_name)
  674|  16.9k|            .map_err(|x| x.into().into())
  675|  17.2k|    }
_RINvNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
  304|  2.30k|        {
  305|   104k|            loop {
  306|   104k|                // Fetch the next element only if the lookahead is empty.
  307|   104k|                if eng.next_event.is_none() {
  308|   102k|                    eng.next_event = match classifier.next() {
  309|   102k|                        Ok(e) => e,
  310|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|  1.56k|                }
  313|   104k|                if let Some(event) = eng.next_event.take() {
  314|      0|                    debug!("====================");
  315|      0|                    debug!("Event = {:?}", event);
  316|      0|                    debug!("Depth = {:?}", eng.depth);
  317|      0|                    debug!("Stack = {:?}", eng.stack);
  318|      0|                    debug!("State = {:?}", eng.state);
  319|      0|                    debug!("====================");
  320|       |
  321|   103k|                    match event {
  322|  22.1k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|  15.5k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|  37.8k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|  27.8k|                        Structural::Closing(_, idx) => {
  326|  27.8k|                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|  27.8k|                            if eng.depth == Depth::ZERO {
  329|  1.72k|                                break;
  330|  26.1k|                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|    540|                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|  2.26k|            Ok(())
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack4pushCs9TfoC9TDKig_19fuzz_arbitrary_json:
  749|  28.2k|    fn push(&mut self, value: StackFrame) {
  750|  28.2k|        self.contents.push(value)
  751|  28.2k|    }
_RINvXs_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECs9TfoC9TDKig_19fuzz_arbitrary_json:
  174|  2.85k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  175|  2.85k|    where
  176|  2.85k|        I: Input,
  177|  2.85k|        S: Sink<Match>,
  178|  2.85k|    {
  179|  2.85k|        if self.automaton.is_select_root_query() {
  180|    765|            return select_root_query::match_(input, sink);
  181|  2.09k|        }
  182|  2.09k|        if self.automaton.is_empty_query() {
  183|      0|            return Ok(());
  184|  2.09k|        }
  185|  2.09k|
  186|  2.09k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  187|  2.09k|        config_simd!(self.simd => |simd| {
  188|  2.09k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  189|  2.09k|            executor.run()
  190|    370|        })?;
  191|       |
  192|  1.72k|        Ok(())
  193|  2.85k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs9TfoC9TDKig_19fuzz_arbitrary_json:
  678|  23.6k|    fn record_match_detected_at(&mut self, start_idx: usize, ty: NodeType) -> Result<(), EngineError> {
  679|      0|        debug!("Reporting result somewhere after {start_idx} with node type {ty:?}");
  680|       |
  681|  23.6k|        let index = match ty {
  682|  4.32k|            NodeType::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  683|  9.47k|            NodeType::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  684|  9.88k|            NodeType::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  685|       |        }
  686|  23.6k|        .map(|x| x.0);
  687|  23.6k|
  688|  23.6k|        match index {
  689|  23.6k|            Some(idx) => self.recorder.record_match(idx, self.depth, ty.into()),
  690|      0|            None => Err(EngineError::MissingItem()),
  691|       |        }
  692|  23.6k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E8recorderCs9TfoC9TDKig_19fuzz_arbitrary_json:
  778|  4.65k|    fn recorder(&mut self) -> &'r R {
  779|  4.65k|        self.recorder
  780|  4.65k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   81|  2.92k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   82|  2.92k|        let automaton = Automaton::new(query)?;
   83|      0|        debug!("DFA:\n {}", automaton);
   84|  2.85k|        let simd = simd::configure();
   85|  2.85k|        log::info!("SIMD configuration:\n {}", simd);
   86|  2.85k|        Ok(MainEngine { automaton, simd })
   87|  2.92k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E14run_on_subtreeCs9TfoC9TDKig_19fuzz_arbitrary_json:
  761|  1.29k|    fn run_on_subtree(
  762|  1.29k|        &mut self,
  763|  1.29k|        next_event: Structural,
  764|  1.29k|        state: State,
  765|  1.29k|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>>,
  766|  1.29k|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>, V, MaskType>, EngineError> {
  767|  1.29k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  768|  1.29k|
  769|  1.29k|        self.state = state;
  770|  1.29k|        self.next_event = Some(next_event);
  771|  1.29k|
  772|  1.29k|        self.run_on_subtree(&mut classifier)?;
  773|  1.28k|        self.verify_subtree_closed()?;
  774|       |
  775|    949|        Ok(ResumeState(classifier.stop()))
  776|  1.29k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8NodeTypeE4from:
  791|  23.6k|    fn from(value: NodeType) -> Self {
  792|  23.6k|        match value {
  793|  9.88k|            NodeType::Atomic => Self::Atomic,
  794|  13.8k|            NodeType::Complex(_) => Self::Complex,
  795|       |        }
  796|  23.6k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs9TfoC9TDKig_19fuzz_arbitrary_json:
  346|  22.1k|    fn handle_colon(
  347|  22.1k|        &mut self,
  348|  22.1k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  349|  22.1k|        idx: usize,
  350|  22.1k|    ) -> Result<(), EngineError> {
  351|      0|        debug!("Colon");
  352|       |
  353|       |        // Lookahead to see if the next character is an opening.
  354|       |        // If yes, the logic will be handled in handle_opening and we bail.
  355|  22.1k|        if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  356|  22.1k|            if c == b'{' || c == b'[' {
  357|  9.86k|                return Ok(());
  358|  12.2k|            }
  359|      0|        }
  360|       |
  361|       |        // Atomic values are only relevant if the automaton accepts.
  362|       |        // Look at accepting transitions and try to match them with the label.
  363|  12.2k|        let mut any_matched = false;
  364|       |
  365|  12.2k|        for &(member_name, target) in self.automaton[self.state].member_transitions() {
  366|  10.3k|            if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  367|  4.44k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  368|  4.44k|                any_matched = true;
  369|  4.44k|                break;
  370|  5.91k|            }
  371|       |        }
  372|       |        // Alternatively, match consider the fallback transition if it accepts.
  373|  12.2k|        let fallback_state = self.automaton[self.state].fallback_state();
  374|  12.2k|        if !any_matched && self.automaton.is_accepting(fallback_state) {
  375|  1.45k|            self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  376|  10.8k|        }
  377|       |
  378|       |        // Tail skipping.
  379|       |        // If we are in a unitary state and have matched a transition, we can skip the rest of the subtree,
  380|       |        // since member names are unique.
  381|  12.2k|        if any_matched && self.automaton.is_unitary(self.state) {
  382|       |            // We need to look ahead for some bookkeeping.
  383|       |            // 1. If the next event is closing then there's no reason to spin up the skipping machinery,
  384|       |            //    since it would exit immediately anyway.
  385|       |            // 2. If the next character is a comma then we need to notify the recorder.
  386|       |            // 3. Realistically, a colon should never happen. An opening is not interesting and will be skipped.
  387|     55|            self.next_event = classifier.next()?;
  388|     55|            match self.next_event {
  389|       |                None | Some(Structural::Closing(_, _)) => {
  390|     20|                    return Ok(());
  391|       |                }
  392|     35|                Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  393|      0|                Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  394|       |            }
  395|     35|            let bracket_type = self.current_node_bracket_type();
  396|      0|            debug!("Skipping unique state from {bracket_type:?}");
  397|     35|            let stop_at = classifier.skip(bracket_type)?;
  398|       |            // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  399|       |            // handle a closing, so we set the lookahead to the correct character.
  400|     35|            self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  401|  12.2k|        }
  402|       |
  403|  12.2k|        Ok(())
  404|  22.1k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs9TfoC9TDKig_19fuzz_arbitrary_json:
  282|  1.01k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  283|  1.01k|        let iter = self.input.iter_blocks(self.recorder);
  284|  1.01k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  285|  1.01k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  286|  1.01k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  287|  1.01k|
  288|  1.01k|        self.run_on_subtree(&mut classifier)?;
  289|       |
  290|    987|        self.verify_subtree_closed()
  291|  1.01k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs9TfoC9TDKig_19fuzz_arbitrary_json:
  410|  15.5k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  411|      0|        debug!("Comma");
  412|       |
  413|  15.5k|        self.recorder.record_value_terminator(idx, self.depth)?;
  414|       |
  415|  15.5k|        if self.is_list {
  416|       |            // If the index increment exceeds the field's limit, give up.
  417|  9.82k|            if self.array_count.try_increment().is_err() {
  418|      0|                return Ok(());
  419|  9.82k|            }
  420|       |
  421|       |            // Lookahead to see if the next character is an opening.
  422|       |            // If yes, the logic will be handled in handle_opening and we bail.
  423|  9.82k|            if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  424|  9.82k|                if c == b'{' || c == b'[' {
  425|  4.49k|                    return Ok(());
  426|  5.32k|                }
  427|      0|            }
  428|       |
  429|       |            // Check the fallback transition first since it's cheap, then check for the specific index.
  430|  5.32k|            let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  431|  5.32k|
  432|  5.32k|            if is_fallback_accepting
  433|  2.33k|                || self
  434|  2.33k|                    .automaton
  435|  2.33k|                    .has_array_index_transition_to_accepting(self.state, &self.array_count)
  436|       |            {
  437|      0|                debug!("Accepting list item on comma.");
  438|  3.25k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  439|  2.07k|            }
  440|  5.77k|        }
  441|       |
  442|  11.1k|        Ok(())
  443|  15.5k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack3new:
  729|  2.09k|    fn new() -> Self {
  730|  2.09k|        Self { contents: smallvec![] }
  731|  2.09k|    }

_RINvNtNtCs8dUjriG0K0U_8rsonpath6engine17select_root_query6match_NtNtNtB6_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB6_6result5MatchEECs9TfoC9TDKig_19fuzz_arbitrary_json:
   84|    765|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   85|    765|where
   86|    765|    I: Input,
   87|    765|    S: Sink<Match>,
   88|    765|{
   89|    765|    // For a full match we need to copy the entire input starting from first non-whitespace,
   90|    765|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   91|    765|    // padded with whitespace at start and/or end, but that's a pathological case.
   92|    765|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   93|    765|    let mut res: Vec<u8> = vec![];
   94|    765|    let mut first_significant_idx = None;
   95|    765|    let mut offset = 0;
   96|       |
   97|  10.7k|    while let Some(block) = iter.next().e()? {
   98|  9.97k|        if first_significant_idx.is_none() {
   99|       |            // Start of the root not found yet, look for it.
  100|  1.74k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
  101|       |
  102|  1.74k|            if let Some(first_idx) = first_significant_idx {
  103|    765|                // Start of the root found in this block, copy the relevant part.
  104|    765|                res.extend(&block[first_idx..]);
  105|    981|            } else {
  106|    981|                offset += block.len();
  107|    981|            }
  108|  8.23k|        } else {
  109|  8.23k|            // Start of the root was already found, now we are copying everything.
  110|  8.23k|            res.extend(&*block);
  111|  8.23k|        }
  112|       |    }
  113|       |
  114|    765|    if let Some(start) = first_significant_idx {
  115|       |        // Trim whitespace if we have a result.
  116|  81.4k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  117|  80.6k|            res.pop();
  118|  80.6k|        }
  119|       |
  120|    765|        let actual_start = start + offset - input.leading_padding_len();
  121|    765|        sink.add_match(Match::from_start_and_bytes(actual_start, res))
  122|    765|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  123|      0|    }
  124|       |
  125|    765|    Ok(())
  126|    765|}
_RNCINvNtNtCs8dUjriG0K0U_8rsonpath6engine17select_root_query6match_NtNtNtB8_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB8_6result5MatchEE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  100|  86.2k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));

_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   28|  2.30k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  2.30k|        Self {
   30|  2.30k|            classifier: Some(classifier),
   31|  2.30k|            simd,
   32|  2.30k|            _phantom: (PhantomData, PhantomData),
   33|  2.30k|        }
   34|  2.30k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4stopCs9TfoC9TDKig_19fuzz_arbitrary_json:
  110|    949|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  111|    949|        self.classifier.expect("tail skip must always hold a classifier").stop()
  112|    949|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs9TfoC9TDKig_19fuzz_arbitrary_json:
  138|   182k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   182k|        self.classifier
  140|   182k|            .as_mut()
  141|   182k|            .expect("tail skip must always hold a classifier")
  142|   182k|    }
_RINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB5_8TailSkippINtYpNtNtNtB9_14classification4simd4Simd16QuotesClassifierpEINtYpB1d_20StructuralClassifierpEpKj40_E4skip21avx2_pclmulqdq_popcntINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB3h_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4J_5MatchEEKB2F_EINtB1f_12ResolvedSimdNtNtNtB1h_6quotes7avx2_6411ConstructorNtNtNtB1h_10structural7avx2_6411ConstructorNtNtNtB1h_5depth7avx2_6411ConstructorNtNtNtB1h_6memmem7avx2_6411ConstructorKj1_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   44|    569|        {
   45|    569|            debug!("Skipping");
   46|    569|            let mut idx = 0;
   47|    569|            let mut err = None;
   48|    569|
   49|    569|            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|    569|            tail_skip.classifier = Some('a: {
   52|    569|                let resume_state = classifier.stop();
   53|    569|                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|    569|                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|    569|                let mut current_vector = match first_vector {
   57|    450|                    Some(v) => Some(v),
   58|    119|                    None => match depth_classifier.next() {
   59|    119|                        Ok(v) => v,
   60|      0|                        Err(e) => {
   61|      0|                            err = Some(e);
   62|      0|                            let resume_state = depth_classifier.stop(None);
   63|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|    569|                let mut current_depth = 1;
   68|       |
   69|  3.14k|                'outer: while let Some(ref mut vector) = current_vector {
   70|  3.14k|                    vector.add_depth(current_depth);
   71|       |
   72|      0|                    debug!("Fetched vector, current depth is {current_depth}");
   73|      0|                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|  3.14k|                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|  2.27k|                        while vector.advance_to_next_depth_decrease() {
   77|  2.00k|                            if vector.get_depth() == 0 {
   78|      0|                                debug!("Encountered depth 0, breaking.");
   79|    569|                                break 'outer;
   80|  1.43k|                            }
   81|       |                        }
   82|  2.30k|                    }
   83|       |
   84|  2.57k|                    current_depth = vector.depth_at_end();
   85|  2.57k|                    current_vector = match depth_classifier.next() {
   86|  2.57k|                        Ok(v) => v,
   87|      0|                        Err(e) => {
   88|      0|                            err = Some(e);
   89|      0|                            let resume_state = depth_classifier.stop(None);
   90|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|      0|                debug!("Skipping complete, resuming structural classification.");
   96|    569|                let resume_state = depth_classifier.stop(current_vector);
   97|      0|                debug!("Finished at {}", resume_state.get_idx());
   98|    569|                idx = resume_state.get_idx();
   99|    569|                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|    569|            if let Some(err) = err {
  103|      0|                Err(err.into())
  104|       |            } else {
  105|    569|                Ok(idx)
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4skipCs9TfoC9TDKig_19fuzz_arbitrary_json:
   36|    569|    pub(crate) fn skip(&mut self, opening: BracketType) -> Result<usize, EngineError> {
   37|    569|        dispatch_simd!(self.simd; self, opening =>
   38|       |        fn <'i, I, V>(
   39|       |            tail_skip: &mut TailSkip<'i, I, V::QuotesClassifier<'i, I>, V::StructuralClassifier<'i, I>, V, BLOCK_SIZE>,
   40|       |            opening: BracketType) -> Result<usize, EngineError>
   41|       |        where
   42|       |            I: InputBlockIterator<'i, BLOCK_SIZE>,
   43|       |            V: Simd
   44|       |        {
   45|       |            debug!("Skipping");
   46|       |            let mut idx = 0;
   47|       |            let mut err = None;
   48|       |
   49|       |            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|       |            tail_skip.classifier = Some('a: {
   52|       |                let resume_state = classifier.stop();
   53|       |                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|       |                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|       |                let mut current_vector = match first_vector {
   57|       |                    Some(v) => Some(v),
   58|       |                    None => match depth_classifier.next() {
   59|       |                        Ok(v) => v,
   60|       |                        Err(e) => {
   61|       |                            err = Some(e);
   62|       |                            let resume_state = depth_classifier.stop(None);
   63|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|       |                let mut current_depth = 1;
   68|       |
   69|       |                'outer: while let Some(ref mut vector) = current_vector {
   70|       |                    vector.add_depth(current_depth);
   71|       |
   72|       |                    debug!("Fetched vector, current depth is {current_depth}");
   73|       |                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|       |                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|       |                        while vector.advance_to_next_depth_decrease() {
   77|       |                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|       |                                break 'outer;
   80|       |                            }
   81|       |                        }
   82|       |                    }
   83|       |
   84|       |                    current_depth = vector.depth_at_end();
   85|       |                    current_vector = match depth_classifier.next() {
   86|       |                        Ok(v) => v,
   87|       |                        Err(e) => {
   88|       |                            err = Some(e);
   89|       |                            let resume_state = depth_classifier.stop(None);
   90|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|       |                let resume_state = depth_classifier.stop(current_vector);
   97|       |                debug!("Finished at {}", resume_state.get_idx());
   98|       |                idx = resume_state.get_idx();
   99|       |                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|       |            if let Some(err) = err {
  103|       |                Err(err.into())
  104|       |            } else {
  105|       |                Ok(idx)
  106|       |            }
  107|       |        })
  108|    569|    }

_RNvXNtCs8dUjriG0K0U_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs9TfoC9TDKig_19fuzz_arbitrary_json:
  207|  51.7k|    fn halves(&self) -> (&[u8], &[u8]) {
  208|  51.7k|        assert_eq!(N % 2, 0);
  209|  51.7k|        (&self[..N / 2], &self[N / 2..])
  210|  51.7k|    }
_RINvNtCs8dUjriG0K0U_8rsonpath5input8align_toKj80_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  226|  2.92k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  227|  2.92k|    let ptr = bytes.as_ptr();
  228|  2.92k|    let offset = ptr.align_offset(N);
  229|  2.92k|    if offset > bytes.len() {
  230|  1.19k|        (bytes, &[], &[])
  231|       |    } else {
  232|  1.73k|        let (left, rest) = bytes.split_at(offset);
  233|  1.73k|        let middle_len = (rest.len() / N) * N;
  234|  1.73k|        let (middle, right) = rest.split_at(middle_len);
  235|  1.73k|
  236|  1.73k|        (left, middle, right)
  237|       |    }
  238|  2.92k|}

_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputNtNtNtB9_6result5empty13EmptyRecorderKj40_EINtB7_18InputBlockIteratorKB2v_E4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
  246|  10.7k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  10.7k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  6.91k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  6.91k|            // SAFETY: Bounds check above.
  251|  6.91k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  6.91k|            // By construction, middle has length divisible by N.
  253|  6.91k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  6.91k|            self.recorder.record_block_start(block);
  255|  6.91k|            self.idx += N;
  256|  6.91k|            Ok(Some(block))
  257|       |        } else {
  258|  3.82k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  10.7k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input15is_member_match:
  218|  38.0k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> Result<bool, Self::Error> {
  219|  38.0k|        debug_assert!(from < to);
  220|       |        // The hot path is when we're checking fully within the middle section.
  221|       |        // This has to be as fast as possible, so the "cold" path referring to the TwoSidesPaddedInput
  222|       |        // impl is explicitly marked with #[cold].
  223|  38.0k|        if from > MAX_BLOCK_SIZE && to < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  224|       |            // This is the hot path -- do the bounds check and memcmp.
  225|  24.6k|            let bytes = self.middle_bytes;
  226|  24.6k|            let from = from - MAX_BLOCK_SIZE;
  227|  24.6k|            let to = to - MAX_BLOCK_SIZE;
  228|  24.6k|            let slice = &bytes[from..to];
  229|  24.6k|            Ok(member.quoted().as_bytes() == slice && (from == 0 || bytes[from - 1] != b'\\'))
  230|       |        } else {
  231|       |            // This is a very expensive, cold path.
  232|  13.4k|            Ok(self.as_padded_input().is_member_match(from, to, member))
  233|       |        }
  234|  38.0k|    }
_RINvNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathNtNtNtBc_6result5empty13EmptyRecorderKj40_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  262|  3.82k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  3.82k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  3.82k|        ) -> Option<&'a [u8]>
  265|  3.82k|        where
  266|  3.82k|            R: InputRecorder<&'a [u8]>,
  267|  3.82k|        {
  268|  3.82k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  3.82k|            if let Some(b) = block {
  271|  3.06k|                iter.recorder.record_block_start(b);
  272|  3.06k|                iter.idx += N;
  273|  3.06k|            }
  274|       |
  275|  3.82k|            block
  276|  3.82k|        }
_RNCINvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtBa_13BorrowedBytesNtBc_5Input12seek_forward11handle_lastKj1_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  169|     14|                .map(|(x, y)| (x + offset, y))
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
  200|  15.8k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  201|  15.8k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  202|  14.1k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  203|  14.1k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  204|     12|                None => handle_first(&self.first_block),
  205|       |            }
  206|       |        } else {
  207|  1.64k|            self.as_padded_input().seek_non_whitespace_backward(from)
  208|       |        };
  209|       |
  210|       |        #[cold]
  211|       |        #[inline(never)]
  212|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|       |        }
  215|  15.8k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_inputCs9TfoC9TDKig_19fuzz_arbitrary_json:
   57|  33.2k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   58|  33.2k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   59|  33.2k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
  174|  58.8k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  175|  58.8k|        return Ok(
  176|  58.8k|            // The hot path is when we start and end within the middle section.
  177|  58.8k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  178|  58.8k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  179|  58.8k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  180|  46.9k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  181|  46.8k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  182|     40|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  183|       |                }
  184|       |            } else {
  185|  11.9k|                self.as_padded_input().seek_non_whitespace_forward(from)
  186|       |            },
  187|       |        );
  188|       |
  189|       |        #[cold]
  190|       |        #[inline(never)]
  191|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|       |            last_block
  193|       |                .bytes()
  194|       |                .seek_non_whitespace_forward(0)
  195|       |                .map(|(x, y)| (x + offset, y))
  196|       |        }
  197|  58.8k|    }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1z_5MatchEEKj40_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  115|  2.09k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|  2.09k|    where
  117|  2.09k|        R: InputRecorder<&'b [u8]>,
  118|  2.09k|    {
  119|  2.09k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|  2.09k|
  121|  2.09k|        Self::BlockIterator {
  122|  2.09k|            idx: 0,
  123|  2.09k|            input: padded_input,
  124|  2.09k|            recorder,
  125|  2.09k|        }
  126|  2.09k|    }
_RINvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB8_13BorrowedBytesNtBa_5Input12seek_forward11handle_lastKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  161|     14|        fn handle_last<const N: usize>(
  162|     14|            last_block: &PaddedBlock,
  163|     14|            offset: usize,
  164|     14|            needles: [u8; N],
  165|     14|        ) -> Option<(usize, u8)> {
  166|     14|            last_block
  167|     14|                .bytes()
  168|     14|                .seek_forward(0, needles)
  169|     14|                .map(|(x, y)| (x + offset, y))
  170|     14|        }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   45|  2.92k|    pub fn new(bytes: &'a [u8]) -> Self {
   46|  2.92k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   47|  2.92k|        let first_block = PaddedBlock::pad_first_block(first);
   48|  2.92k|        let last_block = PaddedBlock::pad_last_block(last);
   49|  2.92k|
   50|  2.92k|        Self {
   51|  2.92k|            middle_bytes: middle,
   52|  2.92k|            first_block,
   53|  2.92k|            last_block,
   54|  2.92k|        }
   55|  2.92k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  100|  2.85k|    fn leading_padding_len(&self) -> usize {
  101|  2.85k|        self.first_block.padding_len()
  102|  2.85k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCs9TfoC9TDKig_19fuzz_arbitrary_json:
  287|   112k|    fn get_offset(&self) -> usize {
  288|      0|        debug!("getting input iter {}", self.idx);
  289|   112k|        self.idx
  290|   112k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCs9TfoC9TDKig_19fuzz_arbitrary_json:
  246|  25.1k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  25.1k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  16.4k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  16.4k|            // SAFETY: Bounds check above.
  251|  16.4k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  16.4k|            // By construction, middle has length divisible by N.
  253|  16.4k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  16.4k|            self.recorder.record_block_start(block);
  255|  16.4k|            self.idx += N;
  256|  16.4k|            Ok(Some(block))
  257|       |        } else {
  258|  8.74k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  25.1k|    }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  115|    765|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|    765|    where
  117|    765|        R: InputRecorder<&'b [u8]>,
  118|    765|    {
  119|    765|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|    765|
  121|    765|        Self::BlockIterator {
  122|    765|            idx: 0,
  123|    765|            input: padded_input,
  124|    765|            recorder,
  125|    765|        }
  126|    765|    }
_RINvNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2N_5MatchEEKj40_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  262|  8.74k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  8.74k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  8.74k|        ) -> Option<&'a [u8]>
  265|  8.74k|        where
  266|  8.74k|            R: InputRecorder<&'a [u8]>,
  267|  8.74k|        {
  268|  8.74k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  8.74k|            if let Some(b) = block {
  271|  7.46k|                iter.recorder.record_block_start(b);
  272|  7.46k|                iter.idx += N;
  273|  7.46k|            }
  274|       |
  275|  8.74k|            block
  276|  8.74k|        }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  147|  13.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  148|  13.8k|        return Ok(
  149|  13.8k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  150|  12.7k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  151|  12.7k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  152|     14|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  153|       |                }
  154|       |            } else {
  155|  1.01k|                self.as_padded_input().seek_forward(from, needles)
  156|       |            },
  157|       |        );
  158|       |
  159|       |        #[cold]
  160|       |        #[inline(never)]
  161|       |        fn handle_last<const N: usize>(
  162|       |            last_block: &PaddedBlock,
  163|       |            offset: usize,
  164|       |            needles: [u8; N],
  165|       |        ) -> Option<(usize, u8)> {
  166|       |            last_block
  167|       |                .bytes()
  168|       |                .seek_forward(0, needles)
  169|       |                .map(|(x, y)| (x + offset, y))
  170|       |        }
  171|  13.8k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input13seek_backwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
  129|  17.2k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  130|  17.2k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  131|  12.0k|            match self.middle_bytes.seek_backward(from - MAX_BLOCK_SIZE, needle) {
  132|  10.0k|                Some(x) => Some(x + MAX_BLOCK_SIZE),
  133|  2.00k|                None => handle_first(&self.first_block, needle),
  134|       |            }
  135|       |        } else {
  136|  5.14k|            self.as_padded_input().seek_backward(from, needle)
  137|       |        };
  138|       |
  139|       |        #[cold]
  140|       |        #[inline(never)]
  141|       |        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|       |            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|       |        }
  144|  17.2k|    }
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  212|     12|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|     12|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|     12|        }
_RNCNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  195|     40|                .map(|(x, y)| (x + offset, y))
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input13seek_backward12handle_first:
  141|  2.00k|        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|  2.00k|            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|  2.00k|        }
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  191|     40|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|     40|            last_block
  193|     40|                .bytes()
  194|     40|                .seek_non_whitespace_forward(0)
  195|     40|                .map(|(x, y)| (x + offset, y))
  196|     40|        }

_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultbNtB2_10InfallibleEINtB2_21InputErrorConvertiblebE1eCs9TfoC9TDKig_19fuzz_arbitrary_json:
   50|  21.1k|    fn e(self) -> Result<T, InputError> {
   51|  21.1k|        self.map_err(std::convert::Into::into)
   52|  21.1k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs9TfoC9TDKig_19fuzz_arbitrary_json:
   50|  72.6k|    fn e(self) -> Result<T, InputError> {
   51|  72.6k|        self.map_err(std::convert::Into::into)
   52|  72.6k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs9TfoC9TDKig_19fuzz_arbitrary_json:
   50|  35.9k|    fn e(self) -> Result<T, InputError> {
   51|  35.9k|        self.map_err(std::convert::Into::into)
   52|  35.9k|    }

_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  370|      9|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  315|  53.6k|    pub(super) fn middle(&self) -> &'a [u8] {
  316|  53.6k|        self.middle
  317|  53.6k|    }
_RINvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  127|  1.01k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  128|  1.01k|        if from < MAX_BLOCK_SIZE {
  129|    573|            self.seek_forward_from_first(from, needles)
  130|    444|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  131|      0|            self.seek_forward_from_middle(from, needles)
  132|       |        } else {
  133|    444|            self.seek_forward_from_last(from, needles)
  134|       |        }
  135|  1.01k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_lenCs9TfoC9TDKig_19fuzz_arbitrary_json:
   27|  2.85k|    pub(super) fn padding_len(&self) -> usize {
   28|  2.85k|        self.padding_len
   29|  2.85k|    }
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  380|    451|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_Es_0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  371|      2|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  374|    451|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  375|    451|        assert!(N > 0);
  376|    451|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  377|    451|        let bytes = &self.last_block.bytes;
  378|    451|
  379|    451|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  380|    451|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  381|    451|    }
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput23seek_forward_from_firstKj1_E0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  355|     16|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|     16|            if self.middle.is_empty() {
  357|      5|                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|     11|                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|     16|        })
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesCs9TfoC9TDKig_19fuzz_arbitrary_json:
   31|     14|    pub(super) fn bytes(&self) -> &[u8] {
   32|     14|        &self.bytes
   33|     14|    }
_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput24seek_forward_from_middleKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  364|     11|    fn seek_forward_from_middle<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  365|     11|        assert!(N > 0);
  366|     11|        debug_assert!(from >= MAX_BLOCK_SIZE);
  367|     11|        let bytes = self.middle;
  368|     11|
  369|     11|        seek_forward_impl(bytes, from - MAX_BLOCK_SIZE, needles)
  370|     11|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  371|     11|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
  372|     11|    }
_RINvNtNtCs8dUjriG0K0U_8rsonpath5input7padding17seek_forward_implKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  539|  1.03k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  540|  1.03k|    let mut idx = from;
  541|  1.03k|    if idx >= bytes.len() {
  542|      0|        return None;
  543|  1.03k|    }
  544|       |
  545|  1.95k|    loop {
  546|  1.95k|        let b = bytes[idx];
  547|  1.95k|        if needles.contains(&b) {
  548|  1.01k|            return Some((idx, b));
  549|    940|        }
  550|    940|        idx += 1;
  551|    940|        if idx == bytes.len() {
  552|     18|            return None;
  553|    922|        }
  554|       |    }
  555|  1.03k|}
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  306|  36.0k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  307|  36.0k|        Self {
  308|  36.0k|            first_block: first,
  309|  36.0k|            middle,
  310|  36.0k|            last_block: last,
  311|  36.0k|        }
  312|  36.0k|    }
_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  350|    573|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  351|    573|        assert!(N > 0);
  352|    573|        debug_assert!(from < MAX_BLOCK_SIZE);
  353|    573|        let bytes = &self.first_block.bytes;
  354|    573|
  355|    573|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|       |            if self.middle.is_empty() {
  357|       |                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|       |                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|    573|        })
  362|    573|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput25seek_backward_from_middle:
  326|    969|    fn seek_backward_from_middle(&self, from: usize, needle: u8) -> Option<usize> {
  327|    969|        debug_assert!(from >= MAX_BLOCK_SIZE);
  328|    969|        let bytes = self.middle;
  329|    969|
  330|    969|        seek_backward_impl(bytes, from - MAX_BLOCK_SIZE, needle)
  331|    969|            .map(|x| x + MAX_BLOCK_SIZE)
  332|    969|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
  333|    969|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  434|    743|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_matchs_0Bb_:
  518|  4.40k|            && preceding_char.map_or(true, |x| x != b'\\')
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  444|  12.5k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  445|  12.5k|        debug_assert!(len < MAX_BLOCK_SIZE);
  446|       |
  447|  12.5k|        if start < MAX_BLOCK_SIZE {
  448|  5.71k|            Some(self.slice_first(start, len))
  449|  6.85k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  450|      0|            Some(self.slice_middle(start, len))
  451|       |        } else {
  452|  6.85k|            self.slice_last(start, len)
  453|       |        }
  454|  12.5k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   48|  2.92k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   49|  2.92k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   50|  2.92k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   51|  2.92k|        let block_end = bytes.len();
   52|  2.92k|
   53|  2.92k|        last_block_buf[..block_end].copy_from_slice(bytes);
   54|  2.92k|
   55|  2.92k|        Self {
   56|  2.92k|            bytes: last_block_buf,
   57|  2.92k|            padding_len: MAX_BLOCK_SIZE - block_end,
   58|  2.92k|        }
   59|  2.92k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6get_at:
  496|  13.4k|    fn get_at(&self, idx: usize) -> Option<u8> {
  497|  13.4k|        if idx < MAX_BLOCK_SIZE {
  498|  8.51k|            Some(self.first_block.bytes[idx])
  499|  4.93k|        } else if idx < self.middle.len() + MAX_BLOCK_SIZE {
  500|    241|            Some(self.middle[idx - MAX_BLOCK_SIZE])
  501|  4.69k|        } else if idx < self.middle.len() + 2 * MAX_BLOCK_SIZE {
  502|  4.64k|            Some(self.last_block.bytes[idx - MAX_BLOCK_SIZE - self.middle.len()])
  503|       |        } else {
  504|     44|            None
  505|       |        }
  506|  13.4k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_lasts_0Bb_:
  341|  1.78k|            .or_else(|| {
  342|  1.78k|                if self.middle.is_empty() {
  343|    817|                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|    969|                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  1.78k|            })
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  426|      8|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  413|    884|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  414|    884|        debug_assert!(from < MAX_BLOCK_SIZE);
  415|    884|        let bytes = &self.first_block.bytes;
  416|    884|
  417|    884|        seek_non_whitespace_backward_impl(bytes, from)
  418|    884|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable13seek_backward:
  115|  5.14k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  116|  5.14k|        if from < MAX_BLOCK_SIZE {
  117|  2.34k|            self.seek_backward_from_first(from, needle)
  118|  2.79k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  119|      0|            self.seek_backward_from_middle(from, needle)
  120|       |        } else {
  121|  2.79k|            self.seek_backward_from_last(from, needle)
  122|       |        }
  123|  5.14k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   35|  2.92k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   36|  2.92k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   37|  2.92k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   38|  2.92k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   39|  2.92k|
   40|  2.92k|        block_buf[block_start..].copy_from_slice(bytes);
   41|  2.92k|
   42|  2.92k|        Self {
   43|  2.92k|            bytes: block_buf,
   44|  2.92k|            padding_len: block_start,
   45|  2.92k|        }
   46|  2.92k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding18seek_backward_impl:
  523|  7.35k|fn seek_backward_impl(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  524|  7.35k|    let mut idx = from;
  525|  7.35k|    assert!(idx < bytes.len());
  526|       |
  527|       |    loop {
  528|   248k|        if bytes[idx] == needle {
  529|  5.14k|            return Some(idx);
  530|   243k|        }
  531|   243k|        if idx == 0 {
  532|  2.21k|            return None;
  533|   241k|        }
  534|   241k|        idx -= 1;
  535|       |    }
  536|  7.35k|}
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  139|  11.9k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  140|  11.9k|        if from < MAX_BLOCK_SIZE {
  141|  5.81k|            self.seek_non_whitespace_forward_from_first(from)
  142|  6.15k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  143|      0|            self.seek_non_whitespace_forward_from_middle(from)
  144|       |        } else {
  145|  6.15k|            self.seek_non_whitespace_forward_from_last(from)
  146|       |        }
  147|  11.9k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middle0Bb_:
  331|    542|            .map(|x| x + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_last0Bb_:
  340|  1.00k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput23seek_backward_from_last:
  335|  2.79k|    fn seek_backward_from_last(&self, from: usize, needle: u8) -> Option<usize> {
  336|  2.79k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  337|  2.79k|        let bytes = &self.last_block.bytes;
  338|  2.79k|
  339|  2.79k|        seek_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needle)
  340|  2.79k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
  341|  2.79k|            .or_else(|| {
  342|       |                if self.middle.is_empty() {
  343|       |                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|       |                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  2.79k|            })
  348|  2.79k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  405|  6.17k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  406|  6.17k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  407|  6.17k|        let bytes = &self.last_block.bytes;
  408|  6.17k|
  409|  6.17k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  410|  6.17k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  411|  6.17k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  429|    778|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  430|    778|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  431|    778|        let bytes = &self.last_block.bytes;
  432|    778|
  433|    778|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  434|    778|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  435|    778|            .or_else(|| {
  436|       |                if self.middle.is_empty() {
  437|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|    778|            })
  442|    778|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middles_0Bb_:
  332|    427|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesB6_:
   31|  2.06k|    pub(super) fn bytes(&self) -> &[u8] {
   32|  2.06k|        &self.bytes
   33|  2.06k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  435|     35|            .or_else(|| {
  436|     35|                if self.middle.is_empty() {
  437|     12|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|     23|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|     35|            })
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_parts:
  473|  13.4k|    fn slice_parts(&self, from: usize, to: usize) -> (&[u8], &[u8], &[u8]) {
  474|  13.4k|        use std::cmp::min;
  475|  13.4k|
  476|  13.4k|        let first_from = min(from, MAX_BLOCK_SIZE);
  477|  13.4k|        let first_to = min(to, MAX_BLOCK_SIZE);
  478|  13.4k|
  479|  13.4k|        let from = from.saturating_sub(MAX_BLOCK_SIZE);
  480|  13.4k|        let to = to.saturating_sub(MAX_BLOCK_SIZE);
  481|  13.4k|        let middle_from = min(from, self.middle.len());
  482|  13.4k|        let middle_to = min(to, self.middle.len());
  483|  13.4k|
  484|  13.4k|        let from = from.saturating_sub(self.middle.len());
  485|  13.4k|        let to = to.saturating_sub(self.middle.len());
  486|  13.4k|        let last_from = min(from, self.last_block.len());
  487|  13.4k|        let last_to = min(to, self.last_block.len());
  488|  13.4k|
  489|  13.4k|        (
  490|  13.4k|            &self.first_block.bytes[first_from..first_to],
  491|  13.4k|            &self.middle[middle_from..middle_to],
  492|  13.4k|            &self.last_block.bytes[last_from..last_to],
  493|  13.4k|        )
  494|  13.4k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable15is_member_match:
  163|  13.4k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> bool {
  164|  13.4k|        debug_assert!(from < to);
  165|  13.4k|        let other = member.quoted().as_bytes();
  166|  13.4k|        self.cold_member_match(other, from, to)
  167|  13.4k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  558|  12.0k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  559|  12.0k|    let mut idx = from;
  560|  12.0k|    if idx >= bytes.len() {
  561|      0|        return None;
  562|  12.0k|    }
  563|       |
  564|  16.0k|    loop {
  565|  16.0k|        let b = bytes[idx];
  566|  16.0k|        if !b.is_ascii_whitespace() {
  567|  11.9k|            return Some((idx, b));
  568|  4.05k|        }
  569|  4.05k|        idx += 1;
  570|  4.05k|        if idx == bytes.len() {
  571|     39|            return None;
  572|  4.01k|        }
  573|       |    }
  574|  12.0k|}
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  401|     16|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  425|     15|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  467|  4.81k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  151|  1.64k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  152|  1.64k|        if from < MAX_BLOCK_SIZE {
  153|    864|            self.seek_non_whitespace_backward_from_first(from)
  154|    778|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  155|      0|            self.seek_non_whitespace_backward_from_middle(from)
  156|       |        } else {
  157|    778|            self.seek_non_whitespace_backward_from_last(from)
  158|       |        }
  159|  1.64k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput24seek_backward_from_first:
  319|  3.59k|    fn seek_backward_from_first(&self, from: usize, needle: u8) -> Option<usize> {
  320|  3.59k|        debug_assert!(from < MAX_BLOCK_SIZE);
  321|  3.59k|        let bytes = &self.first_block.bytes;
  322|  3.59k|
  323|  3.59k|        seek_backward_impl(bytes, from, needle)
  324|  3.59k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  410|  6.17k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  396|     20|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  397|     20|        debug_assert!(from >= MAX_BLOCK_SIZE);
  398|     20|        let bytes = self.middle;
  399|     20|
  400|     20|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  401|     20|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  402|     20|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  403|     20|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  420|     23|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  421|     23|        debug_assert!(from >= MAX_BLOCK_SIZE);
  422|     23|        let bytes = self.middle;
  423|     23|
  424|     23|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  425|     23|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  426|     23|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  427|     23|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  456|  5.71k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  457|  5.71k|        &self.first_block.bytes[start..start + len]
  458|  5.71k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  465|  6.85k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  466|  6.85k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  467|  6.85k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  468|  6.85k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  383|  5.81k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  384|  5.81k|        debug_assert!(from < MAX_BLOCK_SIZE);
  385|  5.81k|        let bytes = &self.first_block.bytes;
  386|  5.81k|
  387|  5.81k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|       |            if self.middle.is_empty() {
  389|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  5.81k|        })
  394|  5.81k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  577|  1.68k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  578|  1.68k|    let mut idx = from;
  579|  1.68k|    if idx >= bytes.len() {
  580|      0|        return None;
  581|  1.68k|    }
  582|       |
  583|       |    loop {
  584|  3.93k|        let b = bytes[idx];
  585|  3.93k|        if !b.is_ascii_whitespace() {
  586|  1.64k|            return Some((idx, b));
  587|  2.29k|        }
  588|  2.29k|        if idx == 0 {
  589|     43|            return None;
  590|  2.25k|        }
  591|  2.25k|        idx -= 1;
  592|       |    }
  593|  1.68k|}
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock3lenB6_:
   23|  28.9k|    pub(super) const fn len(&self) -> usize {
   24|  28.9k|        MAX_BLOCK_SIZE
   25|  28.9k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput17cold_member_match:
  508|  13.4k|    fn cold_member_match(&self, other: &[u8], from: usize, to: usize) -> bool {
  509|  13.4k|        let (first_self, middle_self, last_self) = self.slice_parts(from, to);
  510|  13.4k|        let first_other = &other[..first_self.len()];
  511|  13.4k|        let middle_other = &other[first_self.len()..first_self.len() + middle_self.len()];
  512|  13.4k|        let last_other = &other[first_self.len() + middle_self.len()..];
  513|  13.4k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
  514|  13.4k|
  515|  13.4k|        first_self == first_other
  516|  8.31k|            && middle_self == middle_other
  517|  8.01k|            && last_self == last_other
  518|  4.40k|            && preceding_char.map_or(true, |x| x != b'\\')
  519|  13.4k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  402|      4|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  387|     33|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|     33|            if self.middle.is_empty() {
  389|     13|                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|     20|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|     33|        })
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_match0Bb_:
  513|  13.4k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));

_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
   77|  14.1k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  14.1k|        let bytes = self.as_ref();
   79|  14.1k|        let mut idx = from;
   80|  14.1k|
   81|  14.1k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  14.1k|        }
   84|       |
   85|       |        loop {
   86|  14.7k|            let b = bytes[idx];
   87|  14.7k|            if !b.is_ascii_whitespace() {
   88|  14.1k|                return Some((idx, b));
   89|    626|            }
   90|    626|            if idx == 0 {
   91|     12|                return None;
   92|    614|            }
   93|    614|            idx -= 1;
   94|       |        }
   95|  14.1k|    }
_RINvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECs9TfoC9TDKig_19fuzz_arbitrary_json:
   33|  12.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  12.8k|        let bytes = self.as_ref();
   35|       |
   36|  12.8k|        assert!(N > 0);
   37|  12.8k|        let mut idx = from;
   38|  12.8k|
   39|  12.8k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  12.8k|        }
   42|       |
   43|  13.8k|        loop {
   44|  13.8k|            let b = bytes[idx];
   45|  13.8k|            if needles.contains(&b) {
   46|  12.7k|                return Some((idx, b));
   47|  1.05k|            }
   48|  1.05k|            idx += 1;
   49|  1.05k|            if idx == bytes.len() {
   50|     14|                return None;
   51|  1.04k|            }
   52|       |        }
   53|  12.8k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
   15|  12.0k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  12.0k|        let bytes = self.as_ref();
   17|  12.0k|
   18|  12.0k|        let mut idx = from;
   19|  12.0k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|   211k|            if bytes[idx] == needle {
   23|  10.0k|                return Some(idx);
   24|   201k|            }
   25|   201k|            if idx == 0 {
   26|  2.00k|                return None;
   27|   199k|            }
   28|   199k|            idx -= 1;
   29|       |        }
   30|  12.0k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardCs9TfoC9TDKig_19fuzz_arbitrary_json:
   56|  46.9k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  46.9k|        let bytes = self.as_ref();
   58|  46.9k|        let mut idx = from;
   59|  46.9k|
   60|  46.9k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  46.9k|        }
   63|       |
   64|  48.9k|        loop {
   65|  48.9k|            let b = bytes[idx];
   66|  48.9k|            if !b.is_ascii_whitespace() {
   67|  46.8k|                return Some((idx, b));
   68|  2.07k|            }
   69|  2.07k|            idx += 1;
   70|  2.07k|            if idx == bytes.len() {
   71|     40|                return None;
   72|  2.03k|            }
   73|       |        }
   74|  46.9k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|     12|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|     12|        let bytes = self.as_ref();
   79|     12|        let mut idx = from;
   80|     12|
   81|     12|        if idx >= bytes.len() {
   82|      0|            return None;
   83|     12|        }
   84|       |
   85|       |        loop {
   86|    182|            let b = bytes[idx];
   87|    182|            if !b.is_ascii_whitespace() {
   88|     12|                return Some((idx, b));
   89|    170|            }
   90|    170|            if idx == 0 {
   91|      0|                return None;
   92|    170|            }
   93|    170|            idx -= 1;
   94|       |        }
   95|     12|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardB6_:
   15|  2.00k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  2.00k|        let bytes = self.as_ref();
   17|  2.00k|
   18|  2.00k|        let mut idx = from;
   19|  2.00k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|  40.2k|            if bytes[idx] == needle {
   23|  2.00k|                return Some(idx);
   24|  38.2k|            }
   25|  38.2k|            if idx == 0 {
   26|      0|                return None;
   27|  38.2k|            }
   28|  38.2k|            idx -= 1;
   29|       |        }
   30|  2.00k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|     40|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|     40|        let bytes = self.as_ref();
   58|     40|        let mut idx = from;
   59|     40|
   60|     40|        if idx >= bytes.len() {
   61|      0|            return None;
   62|     40|        }
   63|       |
   64|    651|        loop {
   65|    651|            let b = bytes[idx];
   66|    651|            if !b.is_ascii_whitespace() {
   67|     40|                return Some((idx, b));
   68|    611|            }
   69|    611|            idx += 1;
   70|    611|            if idx == bytes.len() {
   71|      0|                return None;
   72|    611|            }
   73|       |        }
   74|     40|    }

_RNvCs8dUjriG0K0U_8rsonpath18is_json_whitespace:
  351|   176k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  352|   176k|    JSON_WHITESPACE_BYTES.contains(&x)
  353|   176k|}

_RNvXs2_NtCs8dUjriG0K0U_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
  144|  18.6k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  18.6k|        self.push(data);
  146|  18.6k|        Ok(())
  147|  18.6k|    }
_RNvXsa_NtCs8dUjriG0K0U_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs9TfoC9TDKig_19fuzz_arbitrary_json:
  189|  18.4k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvMs_NtCs8dUjriG0K0U_8rsonpath6resultNtB4_5Match20from_start_and_bytesCs9TfoC9TDKig_19fuzz_arbitrary_json:
   81|    765|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   82|    765|        Self { bytes, span_start }
   83|    765|    }

_RNvXNtNtCs8dUjriG0K0U_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCs9TfoC9TDKig_19fuzz_arbitrary_json:
    9|  9.97k|    fn record_block_start(&self, _new_block: B) {
   10|  9.97k|        // Intentionally left empty.
   11|  9.97k|    }

_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCs9TfoC9TDKig_19fuzz_arbitrary_json:
   59|  45.0k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  45.0k|        self.internal
   61|  45.0k|            .borrow_mut()
   62|  45.0k|            .record_value_terminator(idx, depth)
   63|  45.0k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  45.0k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes18append_final_block:
  425|  18.4k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|      0|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  18.4k|    debug_assert!(read_end >= src_start);
  428|  18.4k|    let in_block_start = if read_start > src_start {
  429|  9.50k|        read_start - src_start
  430|       |    } else {
  431|  8.91k|        0
  432|       |    };
  433|  18.4k|    let in_block_end = read_end - src_start;
  434|  18.4k|
  435|  18.4k|    dest.extend(&src[in_block_start..in_block_end]);
  436|  18.4k|}
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
  268|  4.86k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  4.86k|        if self.node.is_some() {
  270|      0|            debug!("nested match detected, switching to stack");
  271|    699|            return false;
  272|  4.16k|        }
  273|  4.16k|
  274|  4.16k|        let node = SimplePartialNode {
  275|  4.16k|            start_idx: idx,
  276|  4.16k|            start_depth: depth,
  277|  4.16k|            buf: vec![],
  278|  4.16k|            ty,
  279|  4.16k|        };
  280|  4.16k|        self.node = Some(node);
  281|  4.16k|
  282|  4.16k|        true
  283|  4.86k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes12append_block:
  409|  80.7k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|  80.7k|    if read_start >= src_start + src.len() {
  411|    218|        return;
  412|  80.5k|    }
  413|       |
  414|  80.5k|    let to_extend = if read_start > src_start {
  415|  15.5k|        let in_block_start = read_start - src_start;
  416|  15.5k|        &src[in_block_start..]
  417|       |    } else {
  418|  64.9k|        src
  419|       |    };
  420|       |
  421|  80.5k|    dest.extend(to_extend);
  422|  80.7k|}
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs9TfoC9TDKig_19fuzz_arbitrary_json:
  185|  45.0k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  45.0k|        match self {
  187|  21.4k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  23.6k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  45.0k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs9TfoC9TDKig_19fuzz_arbitrary_json:
  224|  18.4k|    fn record_block(&mut self, block: B) {
  225|  18.4k|        if let Some(finished) = self.current_block.as_ref() {
  226|  16.3k|            if let Some(node) = self.node.as_mut() {
  227|      0|                debug!("Continuing node, idx is {}", self.idx);
  228|  1.76k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  14.6k|            }
  230|       |
  231|  16.3k|            self.idx += finished.len();
  232|  2.09k|        }
  233|       |
  234|  18.4k|        self.current_block = Some(block);
  235|      0|        debug!("New block, idx = {}", self.idx);
  236|  18.4k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs9TfoC9TDKig_19fuzz_arbitrary_json:
  238|  21.4k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|      0|        debug!("Value terminator at {idx}, depth {depth}");
  240|  21.4k|        if let Some(node) = self.node.as_ref() {
  241|  4.44k|            if node.start_depth >= depth {
  242|  3.41k|                let mut node = self.node.take().expect("node is Some");
  243|      0|                debug!("Mark node as ended at {}", idx + 1);
  244|       |                append_final_block(
  245|  3.41k|                    &mut node.buf,
  246|  3.41k|                    self.current_block
  247|  3.41k|                        .as_ref()
  248|  3.41k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  3.41k|                    self.idx,
  250|  3.41k|                    node.start_idx,
  251|  3.41k|                    idx + 1,
  252|  3.41k|                );
  253|  3.41k|                finalize_node(&mut node.buf, node.ty);
  254|       |
  255|      0|                debug!("Committing and outputting node");
  256|  3.41k|                self.sink
  257|  3.41k|                    .add_match(Match {
  258|  3.41k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  3.41k|                        bytes: node.buf,
  260|  3.41k|                    })
  261|  3.41k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|  1.02k|            }
  263|  17.0k|        }
  264|       |
  265|  21.4k|        Ok(())
  266|  21.4k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs9TfoC9TDKig_19fuzz_arbitrary_json:
  285|    699|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    699|        match self.node {
  287|    699|            Some(node) => StackRecorder {
  288|    699|                idx: self.idx,
  289|    699|                match_count: 1,
  290|    699|                current_block: self.current_block,
  291|    699|                stack: vec![PartialNode {
  292|    699|                    id: 0,
  293|    699|                    start_idx: node.start_idx,
  294|    699|                    start_depth: node.start_depth,
  295|    699|                    buf: node.buf,
  296|    699|                    ty: node.ty,
  297|    699|                }],
  298|    699|                output_queue: OutputQueue::new(),
  299|    699|                sink: self.sink,
  300|    699|                leading_padding_len: self.leading_padding_len,
  301|    699|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    699|    }
_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCs9TfoC9TDKig_19fuzz_arbitrary_json:
   41|  23.9k|    fn record_block_start(&self, new_block: B) {
   42|  23.9k|        self.internal.borrow_mut().record_block(new_block)
   43|  23.9k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
   52|  25.9k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  25.9k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  25.9k|        Ok(())
   56|  25.9k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  151|  2.09k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  2.09k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  2.09k|    }
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs9TfoC9TDKig_19fuzz_arbitrary_json:
  367|  23.6k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|      0|        debug!("Value terminator at {idx}, depth {depth}");
  369|  38.6k|        while let Some(node) = self.stack.last() {
  370|  36.5k|            if node.start_depth >= depth {
  371|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  15.0k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  15.0k|                append_final_block(
  374|  15.0k|                    &mut node.buf,
  375|  15.0k|                    self.current_block
  376|  15.0k|                        .as_ref()
  377|  15.0k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  15.0k|                    self.idx,
  379|  15.0k|                    node.start_idx,
  380|  15.0k|                    idx + 1,
  381|  15.0k|                );
  382|  15.0k|                finalize_node(&mut node.buf, node.ty);
  383|       |
  384|      0|                debug!("Committing node: {node:?}");
  385|  15.0k|                self.output_queue.insert(
  386|  15.0k|                    node.id,
  387|  15.0k|                    Match {
  388|  15.0k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  15.0k|                        bytes: node.buf,
  390|  15.0k|                    },
  391|  15.0k|                );
  392|       |            } else {
  393|  21.5k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  23.6k|        if self.stack.is_empty() {
  398|      0|            debug!("Outputting batch of nodes.");
  399|  2.05k|            self.output_queue
  400|  2.05k|                .output_to(self.sink)
  401|  2.05k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  21.5k|        }
  403|       |
  404|  23.6k|        Ok(())
  405|  23.6k|    }
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs9TfoC9TDKig_19fuzz_arbitrary_json:
  338|  5.45k|    fn record_block(&mut self, block: B) {
  339|  5.45k|        if let Some(finished) = self.current_block.as_ref() {
  340|  84.4k|            for node in &mut self.stack {
  341|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|  78.9k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  5.45k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  5.45k|        self.current_block = Some(block);
  349|      0|        debug!("New block, idx = {}", self.idx);
  350|  5.45k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  214|  2.09k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  2.09k|        Self {
  216|  2.09k|            idx: 0,
  217|  2.09k|            current_block: None,
  218|  2.09k|            node: None,
  219|  2.09k|            sink,
  220|  2.09k|            leading_padding_len,
  221|  2.09k|        }
  222|  2.09k|    }
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
  352|  21.8k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  21.8k|        let node = PartialNode {
  354|  21.8k|            id: self.match_count,
  355|  21.8k|            start_idx: idx,
  356|  21.8k|            start_depth: depth,
  357|  21.8k|            buf: vec![],
  358|  21.8k|            ty,
  359|  21.8k|        };
  360|       |
  361|      0|        debug!("New node {node:?}");
  362|  21.8k|        self.match_count += 1;
  363|  21.8k|        self.stack.push(node);
  364|  21.8k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs9TfoC9TDKig_19fuzz_arbitrary_json:
  156|  23.9k|    fn record_block(&mut self, block: B) {
  157|  23.9k|        match self {
  158|  18.4k|            Self::Simple(r) => r.record_block(block),
  159|  5.45k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  23.9k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs9TfoC9TDKig_19fuzz_arbitrary_json:
  165|  25.9k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  25.9k|        match self {
  167|  4.86k|            Self::Simple(simple) => {
  168|  4.86k|                if !simple.try_record_match(idx, depth, ty) {
  169|    699|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    699|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    699|                    let mut stack = simple.transform_to_stack();
  174|    699|                    stack.record_match(idx, depth, ty);
  175|    699|                    *self = Self::Stack(stack);
  176|  4.16k|                }
  177|       |            }
  178|  21.1k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  25.9k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes13finalize_node:
  439|  18.4k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  440|      0|    debug!("Finalizing node");
  441|       |
  442|  18.4k|    if ty == MatchedNodeType::Atomic {
  443|       |        // Atomic nodes are finished when the next structural character is matched.
  444|       |        // The buffer includes that character and all preceding whitespace.
  445|       |        // We need to remove it before saving the result.
  446|  8.46k|        if buf.len() <= 1 {
  447|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  448|    205|            buf.truncate(0)
  449|       |        } else {
  450|  8.26k|            let mut i = buf.len() - 2;
  451|  9.27k|            while is_json_whitespace(buf[i]) {
  452|  1.01k|                i -= 1;
  453|  1.01k|            }
  454|       |
  455|  8.26k|            buf.truncate(i + 1);
  456|       |        }
  457|  9.95k|    }
  458|  18.4k|}
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs9TfoC9TDKig_19fuzz_arbitrary_json:
   28|  2.09k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  2.09k|        Self {
   30|  2.09k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  2.09k|        }
   32|  2.09k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
   18|    699|    pub(super) fn new() -> Self {
   19|    699|        Self {
   20|    699|            offset: 0,
   21|    699|            nodes: vec![],
   22|    699|        }
   23|    699|    }
_RINvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EECs9TfoC9TDKig_19fuzz_arbitrary_json:
   52|  2.05k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  2.05k|    where
   54|  2.05k|        S: Sink<D>,
   55|  2.05k|    {
   56|  2.05k|        self.offset += self.nodes.len();
   57|       |
   58|  14.4k|        for node in self.nodes.drain(..) {
   59|  14.4k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  2.05k|        Ok(())
   63|  2.05k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs9TfoC9TDKig_19fuzz_arbitrary_json:
   29|  15.0k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  15.0k|        let actual_idx = id - self.offset;
   31|       |
   32|  32.5k|        while self.nodes.len() <= actual_idx {
   33|  17.5k|            self.nodes.push(None);
   34|  17.5k|        }
   35|       |
   36|  15.0k|        self.nodes[actual_idx] = Some(node);
   37|  15.0k|    }

_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder19descendant_wildcard:
  178|  1.32k|    pub fn descendant_wildcard(&mut self) -> &mut Self {
  179|  1.32k|        self.descendant(|x| x.wildcard())
  180|  1.32k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder15descendant_nameNtNtB7_3str10JsonStringE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  171|  1.80k|        self.descendant(|x| x.name(name))
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder15descendant_nameNtNtB5_3str10JsonStringECs9TfoC9TDKig_19fuzz_arbitrary_json:
  170|  1.80k|    pub fn descendant_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  171|  1.80k|        self.descendant(|x| x.name(name))
  172|  1.80k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  238|  15.6k|    fn new() -> Self {
  239|  15.6k|        Self { selectors: vec![] }
  240|  15.6k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder16descendant_indexNtNtB7_3num8JsonUIntE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  187|  4.33k|        self.descendant(|x| x.index(idx))
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder14child_wildcard:
  132|  3.23k|    pub fn child_wildcard(&mut self) -> &mut Self {
  133|  3.23k|        self.child(|x| x.wildcard())
  134|  3.23k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder11child_indexNtNtB5_3num8JsonUIntECs9TfoC9TDKig_19fuzz_arbitrary_json:
  140|  1.36k|    pub fn child_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  141|  1.36k|        self.child(|x| x.index(idx))
  142|  1.36k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_10child_nameNtNtB5_3str10JsonStringE0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
   79|  3.55k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  3.55k|    where
   81|  3.55k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  3.55k|    {
   83|  3.55k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  3.55k|        selectors_builder(&mut builder);
   85|  3.55k|        self.segments.push(Segment::Child(builder.build()));
   86|  3.55k|        self
   87|  3.55k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder10child_nameNtNtB7_3str10JsonStringE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  125|  3.55k|        self.child(|x| x.name(name))
_RNvXs1_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB7_13JsonPathQueryINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_20JsonPathQueryBuilderE4from:
  399|  2.92k|    fn from(value: JsonPathQueryBuilder) -> Self {
  400|  2.92k|        Self {
  401|  2.92k|            segments: value.segments,
  402|  2.92k|        }
  403|  2.92k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder16descendant_indexNtNtB5_3num8JsonUIntECs9TfoC9TDKig_19fuzz_arbitrary_json:
  186|  4.33k|    pub fn descendant_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  187|  4.33k|        self.descendant(|x| x.index(idx))
  188|  4.33k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10child_nameNtNtB5_3str10JsonStringECs9TfoC9TDKig_19fuzz_arbitrary_json:
  124|  3.55k|    pub fn child_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  125|  3.55k|        self.child(|x| x.name(name))
  126|  3.55k|    }
_RINvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder5indexNtNtB7_3num8JsonUIntECs9TfoC9TDKig_19fuzz_arbitrary_json:
  289|  5.70k|    pub fn index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  290|  5.70k|        let json_int: JsonInt = idx.into();
  291|  5.70k|        self.selectors.push(Selector::Index(Index::from(json_int)));
  292|  5.70k|        self
  293|  5.70k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCNvB2_14child_wildcard0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
   79|  3.23k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  3.23k|    where
   81|  3.23k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  3.23k|    {
   83|  3.23k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  3.23k|        selectors_builder(&mut builder);
   85|  3.23k|        self.segments.push(Segment::Child(builder.build()));
   86|  3.23k|        self
   87|  3.23k|    }
_RNCNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder19descendant_wildcard0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  179|  1.32k|        self.descendant(|x| x.wildcard())
_RINvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder4nameNtNtB7_3str10JsonStringECs9TfoC9TDKig_19fuzz_arbitrary_json:
  263|  5.36k|    pub fn name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  264|  5.36k|        self.selectors.push(Selector::Name(name.into()));
  265|  5.36k|        self
  266|  5.36k|    }
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder3new:
   54|  2.92k|    pub fn new() -> Self {
   55|  2.92k|        Self { segments: vec![] }
   56|  2.92k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder8wildcard:
  371|  4.55k|    pub fn wildcard(&mut self) -> &mut Self {
  372|  4.55k|        self.selectors.push(Selector::Wildcard);
  373|  4.55k|        self
  374|  4.55k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder11child_indexNtNtB7_3num8JsonUIntE0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  141|  1.36k|        self.child(|x| x.index(idx))
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCNvB2_19descendant_wildcard0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  110|  1.32k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.32k|    where
  112|  1.32k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.32k|    {
  114|  1.32k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.32k|        selectors_builder(&mut builder);
  116|  1.32k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.32k|        self
  118|  1.32k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_11child_indexNtNtB5_3num8JsonUIntE0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
   79|  1.36k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  1.36k|    where
   81|  1.36k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  1.36k|    {
   83|  1.36k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  1.36k|        selectors_builder(&mut builder);
   85|  1.36k|        self.segments.push(Segment::Child(builder.build()));
   86|  1.36k|        self
   87|  1.36k|    }
_RNCNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder14child_wildcard0Cs9TfoC9TDKig_19fuzz_arbitrary_json:
  133|  3.23k|        self.child(|x| x.wildcard())
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_15descendant_nameNtNtB5_3str10JsonStringE0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  110|  1.80k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.80k|    where
  112|  1.80k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.80k|    {
  114|  1.80k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.80k|        selectors_builder(&mut builder);
  116|  1.80k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.80k|        self
  118|  1.80k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_16descendant_indexNtNtB5_3num8JsonUIntE0ECs9TfoC9TDKig_19fuzz_arbitrary_json:
  110|  4.33k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  4.33k|    where
  112|  4.33k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  4.33k|    {
  114|  4.33k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  4.33k|        selectors_builder(&mut builder);
  116|  4.33k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  4.33k|        self
  118|  4.33k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder5build:
  242|  15.6k|    fn build(self) -> Selectors {
  243|  15.6k|        Selectors::many(self.selectors)
  244|  15.6k|    }

_RNvXs9_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromCs9TfoC9TDKig_19fuzz_arbitrary_json:
  475|  5.70k|    fn from(value: N) -> Self {
  476|  5.70k|        let value = value.into();
  477|  5.70k|        if value.as_i64() >= 0 {
  478|  5.70k|            Self::FromStart(value.abs())
  479|       |        } else {
  480|      0|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  481|       |        }
  482|  5.70k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment8is_child:
  891|  15.6k|    pub fn is_child(&self) -> bool {
  892|  15.6k|        matches!(self, Self::Child(_))
  893|  15.6k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment9selectors:
  875|  15.6k|    pub fn selectors(&self) -> &Selectors {
  876|  15.6k|        match self {
  877|  15.6k|            Self::Child(s) | Self::Descendant(s) => s,
  878|  15.6k|        }
  879|  15.6k|    }
_RNvMsr_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  866|  2.92k|    pub fn segments(&self) -> &[Segment] {
  867|  2.92k|        &self.segments
  868|  2.92k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstCs8dUjriG0K0U_8rsonpath:
  956|  15.6k|    pub fn first(&self) -> &Selector {
  957|  15.6k|        &self.inner[0]
  958|  15.6k|    }
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1109|  15.6k|    fn deref(&self) -> &Self::Target {
 1110|  15.6k|        &self.inner
 1111|  15.6k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  948|  15.6k|    pub fn many(vec: Vec<Selector>) -> Self {
  949|  15.6k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  950|  15.6k|        Self { inner: vec }
  951|  15.6k|    }

_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  286|  5.70k|    const fn new(index: i64) -> Self {
  287|  5.70k|        Self(index)
  288|  5.70k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  5.70k|    pub const fn abs(&self) -> JsonUInt {
  363|  5.70k|        JsonUInt(self.0.unsigned_abs())
  364|  5.70k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCs9TfoC9TDKig_19fuzz_arbitrary_json:
  420|  9.82k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  421|  9.82k|        let new_index = self.0 + 1;
  422|  9.82k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  423|  9.82k|            self.0 = new_index;
  424|  9.82k|            Ok(())
  425|       |        } else {
  426|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  427|       |        }
  428|  9.82k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newCs9TfoC9TDKig_19fuzz_arbitrary_json:
  400|  5.70k|    const fn new(index: u64) -> Self {
  401|  5.70k|        Self(index)
  402|  5.70k|    }
_RNvXsN_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryCs9TfoC9TDKig_19fuzz_arbitrary_json:
 1073|  5.70k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1074|  5.70k|        let val = u.int_in_range(0..=JSON_UINT_UPPER_LIMIT)?;
 1075|       |
 1076|  5.70k|        Ok(Self::new(val))
 1077|  5.70k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  5.70k|    pub const fn as_i64(&self) -> i64 {
  331|  5.70k|        self.0
  332|  5.70k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt6as_u64:
  455|   158k|    pub const fn as_u64(&self) -> u64 {
  456|   158k|        self.0
  457|   158k|    }
_RNvXsh_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  652|  5.70k|    fn from(value: JsonUInt) -> Self {
  653|  5.70k|        // This is always safe due to the type invariant bounds.
  654|  5.70k|        Self::new(value.0 as i64)
  655|  5.70k|    }
_RNvXsj_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromCs8dUjriG0K0U_8rsonpath:
  674|   103k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  675|   103k|        if value > JSON_UINT_UPPER_LIMIT {
  676|  17.7k|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  677|       |        } else {
  678|  85.7k|            Ok(Self::new(value))
  679|       |        }
  680|   103k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newCs8dUjriG0K0U_8rsonpath:
  400|  85.7k|    const fn new(index: u64) -> Self {
  401|  85.7k|        Self(index)
  402|  85.7k|    }
_RNvXsk_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromCs8dUjriG0K0U_8rsonpath:
  687|  26.1k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  688|  26.1k|        if value < 0 {
  689|      0|            Err(JsonIntOverflowError::negative_uint(value))
  690|       |        } else {
  691|  26.1k|            Self::try_from(value as u64)
  692|       |        }
  693|  26.1k|    }
_RNvXs16_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8dUjriG0K0U_8rsonpath:
   87|  47.5k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1b_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpCs8dUjriG0K0U_8rsonpath:
   87|  12.2k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1a_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs8dUjriG0K0U_8rsonpath:
   87|  55.1k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RINvXs19_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB7_8JsonUIntNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherECs8dUjriG0K0U_8rsonpath:
   87|  60.7k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXso_NtCsmyidsRPtaf_15rsonpath_syntax3numxINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  726|   104k|    fn from(value: JsonUInt) -> Self {
  727|   104k|        // Safe cast since JsonUInt::MAX is lower than i64::MAX.
  728|   104k|        value.0 as Self
  729|   104k|    }

_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError17uint_pos_overflowCs8dUjriG0K0U_8rsonpath:
   57|  17.7k|    pub(crate) fn uint_pos_overflow(src: u64) -> Self {
   58|  17.7k|        Self {
   59|  17.7k|            kind: JsonIntOverflowKind::UIntPos(src),
   60|  17.7k|        }
   61|  17.7k|    }

_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  44.7k|    pub fn unquoted(&self) -> &str {
  188|  44.7k|        let len = self.quoted.len();
  189|  44.7k|        debug_assert!(len >= 2);
  190|  44.7k|        &self.quoted[1..len - 1]
  191|  44.7k|    }
_RNvXs0_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  5.36k|    fn from(value: JsonStringBuilder) -> Self {
   59|  5.36k|        value.finish()
   60|  5.36k|    }
_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString6quoted:
  203|  68.1k|    pub fn quoted(&self) -> &str {
  204|  68.1k|        &self.quoted
  205|  68.1k|    }
_RNvXs6_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryCs9TfoC9TDKig_19fuzz_arbitrary_json:
  228|  5.36k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  5.36k|        let chars = u.arbitrary_iter()?;
  230|  5.36k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  17.9k|        for c in chars {
  236|  12.5k|            let c = c?;
  237|  12.5k|            match c {
  238|  12.5k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|    955|                    builder.push('\\');
  240|    955|                    builder.push(c);
  241|    955|                }
  242|  11.6k|                _ => {
  243|  11.6k|                    builder.push(c);
  244|  11.6k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  5.36k|        Ok(builder.into())
  249|  5.36k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  20.0k|    fn eq(&self, other: &Self) -> bool {
  211|  20.0k|        self.unquoted() == other.unquoted()
  212|  20.0k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  5.36k|    pub(crate) fn new() -> Self {
   40|  5.36k|        Self {
   41|  5.36k|            quoted: String::from('"'),
   42|  5.36k|        }
   43|  5.36k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  13.5k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  13.5k|        self.quoted.push(char);
   47|  13.5k|        self
   48|  13.5k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  5.36k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  5.36k|        self.quoted.push('"');
   52|  5.36k|        JsonString { quoted: self.quoted }
   53|  5.36k|    }

_RNCNvNvNvNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBd_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue7___getit0Bd_:
   84|      1|        #[derive(Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.92k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys_0Bc_:
   84|   132k|        #[derive(Arbitrary)]
_RNCNvNvNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment7___getit0B7_:
   42|      1|#[derive(Debug, Arbitrary)]
_RNvXNvNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB4_8RawValueBT_9arbitrary:
   84|   395k|        #[derive(Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   42|  1.07k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
   42|  15.6k|#[derive(Debug, Arbitrary)]
_RNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB5_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   83|  2.92k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   84|  2.92k|        #[derive(Arbitrary)]
   85|  2.92k|        enum RawValue {
   86|  2.92k|            Null,
   87|  2.92k|            Bool(bool),
   88|  2.92k|            Integer(i64),
   89|  2.92k|            Float(f64),
   90|  2.92k|            String(String),
   91|  2.92k|            Array(Vec<RawValue>),
   92|  2.92k|            Object(HashMap<String, RawValue>),
   93|  2.92k|        }
   94|  2.92k|
   95|  2.92k|        impl From<RawValue> for serde_json::Value {
   96|  2.92k|            fn from(value: RawValue) -> Self {
   97|  2.92k|                match value {
   98|  2.92k|                    RawValue::Null => serde_json::Value::Null,
   99|  2.92k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  2.92k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  2.92k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  2.92k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  2.92k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  2.92k|                    RawValue::Object(obj) => {
  105|  2.92k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|  2.92k|                    }
  107|  2.92k|                }
  108|  2.92k|            }
  109|  2.92k|        }
  110|  2.92k|
  111|  2.92k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
  112|  2.92k|    }
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
   48|  1.08k|#[derive(Debug, Arbitrary)]
_RNvXCs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
   56|  2.92k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   57|  2.92k|        write!(f, "{}", self.0)
   58|  2.92k|    }
_RNCNvXNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCsa0kJhncOqqM_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4from0Ba_:
  103|  46.5k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNCNvXNvNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrary0Bc_:
   84|  1.10k|        #[derive(Arbitrary)]
_RNCNvXNvNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys0_0Bc_:
   84|  1.10k|        #[derive(Arbitrary)]
_RNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB4_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   42|  44.7k|#[derive(Debug, Arbitrary)]
_RNvXNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB8_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCsa0kJhncOqqM_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB2_8RawValueE4from:
   96|   111k|            fn from(value: RawValue) -> Self {
   97|   111k|                match value {
   98|  17.8k|                    RawValue::Null => serde_json::Value::Null,
   99|  9.82k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  4.41k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  6.57k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  7.82k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  28.4k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  36.8k|                    RawValue::Object(obj) => {
  105|  36.8k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|   111k|            }
_RNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB4_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   48|  44.7k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
   48|  15.6k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   48|  5.85k|#[derive(Debug, Arbitrary)]
_RNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  8.78k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   48|  1.08k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCsa0kJhncOqqM_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4froms_0Ba_:
  105|  62.3k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNCNvNvNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector7___getit0B7_:
   48|      1|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   15|  2.92k|#[derive(Debug, Arbitrary)]
_RNvXs_Cs9TfoC9TDKig_19fuzz_arbitrary_jsonNtB4_14SupportedQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   62|  2.92k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   63|  2.92k|        let segment_count = u.arbitrary_len::<SupportedSegment>()?;
   64|  2.92k|        let mut query = JsonPathQueryBuilder::new();
   65|  2.92k|
   66|  2.92k|        for _ in 0..segment_count {
   67|  15.6k|            let segment = u.arbitrary::<SupportedSegment>()?;
   68|  15.6k|            match segment {
   69|  3.55k|                SupportedSegment::Child(SupportedSelector::Name(name)) => query.child_name(name),
   70|  3.23k|                SupportedSegment::Child(SupportedSelector::Wildcard) => query.child_wildcard(),
   71|  1.36k|                SupportedSegment::Child(SupportedSelector::Index(idx)) => query.child_index(idx),
   72|  1.80k|                SupportedSegment::Descendant(SupportedSelector::Name(name)) => query.descendant_name(name),
   73|  1.32k|                SupportedSegment::Descendant(SupportedSelector::Wildcard) => query.descendant_wildcard(),
   74|  4.33k|                SupportedSegment::Descendant(SupportedSelector::Index(idx)) => query.descendant_index(idx),
   75|       |            };
   76|       |        }
   77|       |
   78|  2.92k|        Ok(SupportedQuery(query.into()))
   79|  2.92k|    }
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
   42|  1.07k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs9TfoC9TDKig_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   42|  2.92k|#[derive(Debug, Arbitrary)]

