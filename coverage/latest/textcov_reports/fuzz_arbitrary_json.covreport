_RNvXNtNtNtCs38Pwkt6J51w_9arbitrary7foreign5alloc6stringNtNtCshJIxznpEM8j_5alloc6string6StringNtB8_9Arbitrary9arbitrary:
    7|  78.4k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    8|  78.4k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
    9|  78.4k|    }

_RNvXNtNtNtCs38Pwkt6J51w_9arbitrary7foreign5alloc3vecINtNtCshJIxznpEM8j_5alloc3vec3VecNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1t_4JsonNtB8_9Arbitrary9arbitrary8RawValueEB2d_9arbitraryB1t_:
   10|  30.5k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   11|  30.5k|        u.arbitrary_iter()?.collect()
   12|  30.5k|    }

_RNvXNtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core4boolbNtB8_9Arbitrary9arbitrary:
    4|   217k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    5|   217k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
    6|   217k|    }

_RNvXNtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core4charcNtB8_9Arbitrary9arbitrary:
    4|  12.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
    5|       |        // The highest unicode code point is 0x11_FFFF
    6|       |        const CHAR_END: u32 = 0x11_0000;
    7|       |        // The size of the surrogate blocks
    8|       |        const SURROGATES_START: u32 = 0xD800;
    9|  12.3k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
   10|  12.3k|        if let Some(c) = char::from_u32(c) {
   11|  12.1k|            Ok(c)
   12|       |        } else {
   13|       |            // We found a surrogate, wrap and try again
   14|    222|            c -= SURROGATES_START;
   15|    222|            Ok(char::from_u32(c)
   16|    222|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
   17|       |        }
   18|  12.3k|    }

_RNvXs3_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3nummNtBb_9Arbitrary9size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   23|  8.24k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   24|  8.24k|                    let n = mem::size_of::<$ty>();
   25|  8.24k|                    (n, Some(n))
   26|  8.24k|                }
_RNvXs9_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3numxNtBb_9Arbitrary9arbitrary:
   16|  5.36k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|  5.36k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|  5.36k|                    u.fill_buffer(&mut buf)?;
   19|  5.36k|                    Ok(Self::from_le_bytes(buf))
   20|  5.36k|                }
_RNvXs3_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3nummNtBb_9Arbitrary9arbitrary:
   16|   164k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|   164k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|   164k|                    u.fill_buffer(&mut buf)?;
   19|   164k|                    Ok(Self::from_le_bytes(buf))
   20|   164k|                }
_RNvXsc_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3numdNtBb_9Arbitrary9arbitrary:
   75|  7.49k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   76|  7.49k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
   77|  7.49k|                }
_RNvXs1_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3numhNtBb_9Arbitrary9size_hintBb_:
   23|  78.4k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
   24|  78.4k|                    let n = mem::size_of::<$ty>();
   25|  78.4k|                    (n, Some(n))
   26|  78.4k|                }
_RNvXs1_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3numhNtBb_9Arbitrary9arbitrary:
   16|   217k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|   217k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|   217k|                    u.fill_buffer(&mut buf)?;
   19|   217k|                    Ok(Self::from_le_bytes(buf))
   20|   217k|                }
_RNvXs4_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3numyNtBb_9Arbitrary9arbitrary:
   16|  7.49k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   17|  7.49k|                    let mut buf = [0; mem::size_of::<$ty>()];
   18|  7.49k|                    u.fill_buffer(&mut buf)?;
   19|  7.49k|                    Ok(Self::from_le_bytes(buf))
   20|  7.49k|                }

_RNvXNtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core3strReNtB8_9Arbitrary9arbitrary:
   25|  78.4k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   26|  78.4k|        let size = u.arbitrary_len::<u8>()?;
   27|  78.4k|        arbitrary_str(u, size)
   28|  78.4k|    }

_RNvXsm_NtNtNtCs38Pwkt6J51w_9arbitrary7foreign4core5tupleTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1D_4JsonNtBb_9Arbitrary9arbitrary8RawValueEB2n_9arbitraryB1D_:
   13|  68.2k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   14|  68.2k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
   15|  68.2k|            }

_RNvXNtNtNtNtCs38Pwkt6J51w_9arbitrary7foreign3std11collections8hash_mapINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map7HashMapNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB2L_4JsonNtBa_9Arbitrary9arbitrary8RawValueEB3v_9arbitraryB2L_:
   15|  38.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
   16|  38.1k|        u.arbitrary_iter()?.collect()
   17|  38.1k|    }

_RNvYNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3num8JsonUIntNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  320|  5.49k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  5.49k|        let _ = depth;
  322|  5.49k|        (0, None)
  323|  5.49k|    }
_RNvYNtCsdv3Cd29mJmf_19fuzz_arbitrary_json4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hintB4_:
  320|  2.74k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  2.74k|        let _ = depth;
  322|  2.74k|        (0, None)
  323|  2.74k|    }
_RNvYNtCsdv3Cd29mJmf_19fuzz_arbitrary_json14SupportedQueryNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hintB4_:
  320|  2.74k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  2.74k|        let _ = depth;
  322|  2.74k|        (0, None)
  323|  2.74k|    }
_RNvYNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3num8JsonUIntNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  423|  5.49k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  5.49k|        Ok(Self::size_hint(depth))
  425|  5.49k|    }
_RNvYNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  423|  5.49k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  5.49k|        Ok(Self::size_hint(depth))
  425|  5.49k|    }
_RNvYNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  320|  5.49k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  321|  5.49k|        let _ = depth;
  322|  5.49k|        (0, None)
  323|  5.49k|    }
_RNvYNtCsdv3Cd29mJmf_19fuzz_arbitrary_json4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hintB4_:
  423|  2.74k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  2.74k|        Ok(Self::size_hint(depth))
  425|  2.74k|    }
_RNvYNtCsdv3Cd29mJmf_19fuzz_arbitrary_json4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  216|  2.74k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  217|  2.74k|        Self::arbitrary(&mut u)
  218|  2.74k|    }
_RNvYNtCsdv3Cd29mJmf_19fuzz_arbitrary_json14SupportedQueryNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hintB4_:
  423|  2.74k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  2.74k|        Ok(Self::size_hint(depth))
  425|  2.74k|    }
_RNvYmNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hintCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  423|  8.24k|    fn try_size_hint(depth: usize) -> Result<(usize, Option<usize>), MaxRecursionReached> {
  424|  8.24k|        Ok(Self::size_hint(depth))
  425|  8.24k|    }

_RNCNvNtCs38Pwkt6J51w_9arbitrary9size_hint3and0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   53|  27.4k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs38Pwkt6J51w_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_json1__NtB14_8FuzzDataNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  2.74k|pub fn try_recursion_guard(
   39|  2.74k|    depth: usize,
   40|  2.74k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  2.74k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  2.74k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  2.74k|        f(depth + 1)
   46|       |    }
   47|  2.74k|}
_RNvNtCs38Pwkt6J51w_9arbitrary9size_hint6or_allCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   82|  8.24k|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   83|  8.24k|    if let Some(head) = hints.first().copied() {
   84|  8.24k|        hints[1..].iter().copied().fold(head, or)
   85|       |    } else {
   86|      0|        (0, Some(0))
   87|       |    }
   88|  8.24k|}
_RINvNtCs38Pwkt6J51w_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB14_17SupportedSelectorNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  5.49k|pub fn try_recursion_guard(
   39|  5.49k|    depth: usize,
   40|  5.49k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  5.49k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  5.49k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  5.49k|        f(depth + 1)
   46|       |    }
   47|  5.49k|}
_RNvNtCs38Pwkt6J51w_9arbitrary9size_hint3andCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   51|  30.2k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   52|  30.2k|    let lower = lhs.0 + rhs.0;
   53|  30.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   54|  30.2k|    (lower, upper)
   55|  30.2k|}
_RNvNtCs38Pwkt6J51w_9arbitrary9size_hint2orCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   69|  13.7k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   70|  13.7k|    let lower = std::cmp::min(lhs.0, rhs.0);
   71|  13.7k|    let upper = lhs
   72|  13.7k|        .1
   73|  13.7k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   74|  13.7k|    (lower, upper)
   75|  13.7k|}
_RNvNtCs38Pwkt6J51w_9arbitrary9size_hint7and_allCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   62|  24.7k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   63|  24.7k|    hints.iter().copied().fold((0, Some(0)), and)
   64|  24.7k|}
_RINvNtCs38Pwkt6J51w_9arbitrary9size_hint19try_recursion_guardNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB14_16SupportedSegmentNtB4_9Arbitrary13try_size_hint0EB14_:
   38|  2.74k|pub fn try_recursion_guard(
   39|  2.74k|    depth: usize,
   40|  2.74k|    f: impl FnOnce(usize) -> Result<(usize, Option<usize>), crate::MaxRecursionReached>,
   41|  2.74k|) -> Result<(usize, Option<usize>), crate::MaxRecursionReached> {
   42|  2.74k|    if depth > MAX_DEPTH {
   43|      0|        Err(crate::MaxRecursionReached {})
   44|       |    } else {
   45|  2.74k|        f(depth + 1)
   46|       |    }
   47|  2.74k|}

_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  643|  5.10k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  644|  5.10k|        &'b mut self,
  645|  5.10k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  646|  5.10k|        Ok(ArbitraryIter {
  647|  5.10k|            u: &mut *self,
  648|  5.10k|            _marker: PhantomData,
  649|  5.10k|        })
  650|  5.10k|    }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   86|  2.74k|    pub fn new(data: &'a [u8]) -> Self {
   87|  2.74k|        Unstructured { data }
   88|  2.74k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsdv3Cd29mJmf_19fuzz_arbitrary_json16SupportedSegmentEB1c_:
  168|  14.7k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|  14.7k|    where
  170|  14.7k|        A: Arbitrary<'a>,
  171|  14.7k|    {
  172|  14.7k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|  14.7k|    }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int10from_usizeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  862|  43.9k|                fn from_usize(u: usize) -> Self {
  863|  43.9k|                    u as Self
  864|  43.9k|                }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  874|  5.50k|                fn wrapping_sub(self, rhs: Self) -> Self {
  875|  5.50k|                    <$ty>::wrapping_sub(self, rhs)
  876|  5.50k|                }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  870|  5.50k|                fn wrapping_add(self, rhs: Self) -> Self {
  871|  5.50k|                    <$ty>::wrapping_add(self, rhs)
  872|  5.50k|                }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  295|  5.50k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  296|  5.50k|    where
  297|  5.50k|        T: Int,
  298|  5.50k|    {
  299|  5.50k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  300|  5.50k|        self.data = &self.data[bytes_consumed..];
  301|  5.50k|        Ok(result)
  302|  5.50k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1o_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1o_:
  643|  30.5k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  644|  30.5k|        &'b mut self,
  645|  30.5k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  646|  30.5k|        Ok(ArbitraryIter {
  647|  30.5k|            u: &mut *self,
  648|  30.5k|            _marker: PhantomData,
  649|  30.5k|        })
  650|  30.5k|    }
_RNvXs_NtCs38Pwkt6J51w_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1b_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1b_:
  757|  81.7k|    fn next(&mut self) -> Option<Result<ElementType>> {
  758|  81.7k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  759|  81.7k|        if keep_going {
  760|  51.2k|            Some(Arbitrary::arbitrary(self.u))
  761|       |        } else {
  762|  30.5k|            None
  763|       |        }
  764|  81.7k|    }
_RNvXs_NtCs38Pwkt6J51w_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1O_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1O_:
  757|   106k|    fn next(&mut self) -> Option<Result<ElementType>> {
  758|   106k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  759|   106k|        if keep_going {
  760|  68.2k|            Some(Arbitrary::arbitrary(self.u))
  761|       |        } else {
  762|  38.1k|            None
  763|       |        }
  764|   106k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  304|  5.50k|    fn int_in_range_impl<T>(
  305|  5.50k|        range: ops::RangeInclusive<T>,
  306|  5.50k|        mut bytes: impl Iterator<Item = u8>,
  307|  5.50k|    ) -> Result<(T, usize)>
  308|  5.50k|    where
  309|  5.50k|        T: Int,
  310|  5.50k|    {
  311|  5.50k|        let start = *range.start();
  312|  5.50k|        let end = *range.end();
  313|  5.50k|        assert!(
  314|  5.50k|            start <= end,
  315|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  316|       |        );
  317|       |
  318|       |        // When there is only one possible choice, don't waste any entropy from
  319|       |        // the underlying data.
  320|  5.50k|        if start == end {
  321|      0|            return Ok((start, 0));
  322|  5.50k|        }
  323|  5.50k|
  324|  5.50k|        // From here on out we work with the unsigned representation. All of the
  325|  5.50k|        // operations performed below work out just as well whether or not `T`
  326|  5.50k|        // is a signed or unsigned integer.
  327|  5.50k|        let start = start.to_unsigned();
  328|  5.50k|        let end = end.to_unsigned();
  329|  5.50k|
  330|  5.50k|        let delta = end.wrapping_sub(start);
  331|  5.50k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  332|       |
  333|       |        // Compute an arbitrary integer offset from the start of the range. We
  334|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  335|       |        // arbitrary integer and then clamping that int into our range bounds
  336|       |        // with a modulo operation.
  337|  5.50k|        let mut arbitrary_int = T::Unsigned::ZERO;
  338|  5.50k|        let mut bytes_consumed: usize = 0;
  339|       |
  340|  43.9k|        while (bytes_consumed < mem::size_of::<T>())
  341|  43.9k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  342|       |        {
  343|  38.4k|            let byte = match bytes.next() {
  344|     14|                None => break,
  345|  38.4k|                Some(b) => b,
  346|  38.4k|            };
  347|  38.4k|            bytes_consumed += 1;
  348|  38.4k|
  349|  38.4k|            // Combine this byte into our arbitrary integer, but avoid
  350|  38.4k|            // overflowing the shift for `u8` and `i8`.
  351|  38.4k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  352|      0|                T::Unsigned::from_u8(byte)
  353|       |            } else {
  354|  38.4k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  355|       |            };
  356|       |        }
  357|       |
  358|  5.50k|        let offset = if delta == T::Unsigned::MAX {
  359|      0|            arbitrary_int
  360|       |        } else {
  361|  5.50k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  362|       |        };
  363|       |
  364|       |        // Finally, we add `start` to our offset from `start` to get the result
  365|       |        // actual value within the range.
  366|  5.50k|        let result = start.wrapping_add(offset);
  367|  5.50k|
  368|  5.50k|        // And convert back to our maybe-signed representation.
  369|  5.50k|        let result = T::from_unsigned(result);
  370|  5.50k|        debug_assert!(*range.start() <= result);
  371|  5.50k|        debug_assert!(result <= *range.end());
  372|       |
  373|  5.50k|        Ok((result, bytes_consumed))
  374|  5.50k|    }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int13from_unsignedCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  882|  5.50k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  883|  5.50k|                    unsigned as Self
  884|  5.50k|                }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenNtCsdv3Cd29mJmf_19fuzz_arbitrary_json16SupportedSegmentEB1h_:
  214|  2.74k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  215|  2.74k|    where
  216|  2.74k|        ElementType: Arbitrary<'a>,
  217|  2.74k|    {
  218|  2.74k|        let byte_size = self.arbitrary_byte_size()?;
  219|  2.74k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  220|  2.74k|        let elem_size = upper.unwrap_or(lower * 2);
  221|  2.74k|        let elem_size = std::cmp::max(1, elem_size);
  222|  2.74k|        Ok(byte_size / elem_size)
  223|  2.74k|    }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured3lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  109|   154k|    pub fn len(&self) -> usize {
  110|   154k|        self.data.len()
  111|   154k|    }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int7from_u8Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  858|  38.4k|                fn from_u8(b: u8) -> Self {
  859|  38.4k|                    b as Self
  860|  38.4k|                }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  133|   154k|    pub fn is_empty(&self) -> bool {
  134|   154k|        self.len() == 0
  135|   154k|    }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int11to_unsignedCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  878|  11.0k|                fn to_unsigned(self) -> Self::Unsigned {
  879|  11.0k|                    self as $unsigned_ty
  880|  11.0k|                }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB1i_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1i_:
  168|  2.74k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|  2.74k|    where
  170|  2.74k|        A: Arbitrary<'a>,
  171|  2.74k|    {
  172|  2.74k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|  2.74k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB21_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB21_:
  643|  38.1k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  644|  38.1k|        &'b mut self,
  645|  38.1k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  646|  38.1k|        Ok(ArbitraryIter {
  647|  38.1k|            u: &mut *self,
  648|  38.1k|            _marker: PhantomData,
  649|  38.1k|        })
  650|  38.1k|    }
_RNvXs_NtCs38Pwkt6J51w_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  757|  17.4k|    fn next(&mut self) -> Option<Result<ElementType>> {
  758|  17.4k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  759|  17.4k|        if keep_going {
  760|  12.3k|            Some(Arbitrary::arbitrary(self.u))
  761|       |        } else {
  762|  5.10k|            None
  763|       |        }
  764|  17.4k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  168|   205k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  169|   205k|    where
  170|   205k|        A: Arbitrary<'a>,
  171|   205k|    {
  172|   205k|        <A as Arbitrary<'a>>::arbitrary(self)
  173|   205k|    }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  862|   113k|                fn from_usize(u: usize) -> Self {
  863|   113k|                    u as Self
  864|   113k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  858|   113k|                fn from_u8(b: u8) -> Self {
  859|   113k|                    b as Self
  860|   113k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  878|   113k|                fn to_unsigned(self) -> Self::Unsigned {
  879|   113k|                    self as $unsigned_ty
  880|   113k|                }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  858|  23.8k|                fn from_u8(b: u8) -> Self {
  859|  23.8k|                    b as Self
  860|  23.8k|                }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  304|  56.7k|    fn int_in_range_impl<T>(
  305|  56.7k|        range: ops::RangeInclusive<T>,
  306|  56.7k|        mut bytes: impl Iterator<Item = u8>,
  307|  56.7k|    ) -> Result<(T, usize)>
  308|  56.7k|    where
  309|  56.7k|        T: Int,
  310|  56.7k|    {
  311|  56.7k|        let start = *range.start();
  312|  56.7k|        let end = *range.end();
  313|  56.7k|        assert!(
  314|  56.7k|            start <= end,
  315|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  316|       |        );
  317|       |
  318|       |        // When there is only one possible choice, don't waste any entropy from
  319|       |        // the underlying data.
  320|  56.7k|        if start == end {
  321|      0|            return Ok((start, 0));
  322|  56.7k|        }
  323|  56.7k|
  324|  56.7k|        // From here on out we work with the unsigned representation. All of the
  325|  56.7k|        // operations performed below work out just as well whether or not `T`
  326|  56.7k|        // is a signed or unsigned integer.
  327|  56.7k|        let start = start.to_unsigned();
  328|  56.7k|        let end = end.to_unsigned();
  329|  56.7k|
  330|  56.7k|        let delta = end.wrapping_sub(start);
  331|  56.7k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  332|       |
  333|       |        // Compute an arbitrary integer offset from the start of the range. We
  334|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  335|       |        // arbitrary integer and then clamping that int into our range bounds
  336|       |        // with a modulo operation.
  337|  56.7k|        let mut arbitrary_int = T::Unsigned::ZERO;
  338|  56.7k|        let mut bytes_consumed: usize = 0;
  339|       |
  340|   170k|        while (bytes_consumed < mem::size_of::<T>())
  341|   113k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  342|       |        {
  343|   113k|            let byte = match bytes.next() {
  344|      0|                None => break,
  345|   113k|                Some(b) => b,
  346|   113k|            };
  347|   113k|            bytes_consumed += 1;
  348|   113k|
  349|   113k|            // Combine this byte into our arbitrary integer, but avoid
  350|   113k|            // overflowing the shift for `u8` and `i8`.
  351|   113k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  352|      0|                T::Unsigned::from_u8(byte)
  353|       |            } else {
  354|   113k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  355|       |            };
  356|       |        }
  357|       |
  358|  56.7k|        let offset = if delta == T::Unsigned::MAX {
  359|      0|            arbitrary_int
  360|       |        } else {
  361|  56.7k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  362|       |        };
  363|       |
  364|       |        // Finally, we add `start` to our offset from `start` to get the result
  365|       |        // actual value within the range.
  366|  56.7k|        let result = start.wrapping_add(offset);
  367|  56.7k|
  368|  56.7k|        // And convert back to our maybe-signed representation.
  369|  56.7k|        let result = T::from_unsigned(result);
  370|  56.7k|        debug_assert!(*range.start() <= result);
  371|  56.7k|        debug_assert!(result <= *range.end());
  372|       |
  373|  56.7k|        Ok((result, bytes_consumed))
  374|  56.7k|    }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  225|  81.1k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  226|  81.1k|        if self.data.is_empty() {
  227|    467|            Ok(0)
  228|  80.6k|        } else if self.data.len() == 1 {
  229|    107|            self.data = &[];
  230|    107|            Ok(0)
  231|       |        } else {
  232|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  233|       |            // found that this lets fuzzers more efficiently explore the input
  234|       |            // space.
  235|       |            //
  236|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  237|       |
  238|       |            // We only consume as many bytes as necessary to cover the entire
  239|       |            // range of the byte string.
  240|       |            // Note: We cast to u64 so we don't overflow when checking u32::MAX + 4 on 32-bit archs
  241|  80.5k|            let len = if self.data.len() as u64 <= u8::MAX as u64 + 1 {
  242|  23.8k|                let bytes = 1;
  243|  23.8k|                let max_size = self.data.len() - bytes;
  244|  23.8k|                let (rest, for_size) = self.data.split_at(max_size);
  245|  23.8k|                self.data = rest;
  246|  23.8k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  247|  56.7k|            } else if self.data.len() as u64 <= u16::MAX as u64 + 2 {
  248|  56.7k|                let bytes = 2;
  249|  56.7k|                let max_size = self.data.len() - bytes;
  250|  56.7k|                let (rest, for_size) = self.data.split_at(max_size);
  251|  56.7k|                self.data = rest;
  252|  56.7k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  253|      0|            } else if self.data.len() as u64 <= u32::MAX as u64 + 4 {
  254|      0|                let bytes = 4;
  255|      0|                let max_size = self.data.len() - bytes;
  256|      0|                let (rest, for_size) = self.data.split_at(max_size);
  257|      0|                self.data = rest;
  258|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  259|       |            } else {
  260|      0|                let bytes = 8;
  261|      0|                let max_size = self.data.len() - bytes;
  262|      0|                let (rest, for_size) = self.data.split_at(max_size);
  263|      0|                self.data = rest;
  264|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  265|       |            };
  266|       |
  267|  80.5k|            Ok(len)
  268|       |        }
  269|  81.1k|    }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  304|  23.8k|    fn int_in_range_impl<T>(
  305|  23.8k|        range: ops::RangeInclusive<T>,
  306|  23.8k|        mut bytes: impl Iterator<Item = u8>,
  307|  23.8k|    ) -> Result<(T, usize)>
  308|  23.8k|    where
  309|  23.8k|        T: Int,
  310|  23.8k|    {
  311|  23.8k|        let start = *range.start();
  312|  23.8k|        let end = *range.end();
  313|  23.8k|        assert!(
  314|  23.8k|            start <= end,
  315|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  316|       |        );
  317|       |
  318|       |        // When there is only one possible choice, don't waste any entropy from
  319|       |        // the underlying data.
  320|  23.8k|        if start == end {
  321|      0|            return Ok((start, 0));
  322|  23.8k|        }
  323|  23.8k|
  324|  23.8k|        // From here on out we work with the unsigned representation. All of the
  325|  23.8k|        // operations performed below work out just as well whether or not `T`
  326|  23.8k|        // is a signed or unsigned integer.
  327|  23.8k|        let start = start.to_unsigned();
  328|  23.8k|        let end = end.to_unsigned();
  329|  23.8k|
  330|  23.8k|        let delta = end.wrapping_sub(start);
  331|  23.8k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  332|       |
  333|       |        // Compute an arbitrary integer offset from the start of the range. We
  334|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  335|       |        // arbitrary integer and then clamping that int into our range bounds
  336|       |        // with a modulo operation.
  337|  23.8k|        let mut arbitrary_int = T::Unsigned::ZERO;
  338|  23.8k|        let mut bytes_consumed: usize = 0;
  339|       |
  340|  47.6k|        while (bytes_consumed < mem::size_of::<T>())
  341|  23.8k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  342|       |        {
  343|  23.8k|            let byte = match bytes.next() {
  344|      0|                None => break,
  345|  23.8k|                Some(b) => b,
  346|  23.8k|            };
  347|  23.8k|            bytes_consumed += 1;
  348|  23.8k|
  349|  23.8k|            // Combine this byte into our arbitrary integer, but avoid
  350|  23.8k|            // overflowing the shift for `u8` and `i8`.
  351|  23.8k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  352|  23.8k|                T::Unsigned::from_u8(byte)
  353|       |            } else {
  354|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  355|       |            };
  356|       |        }
  357|       |
  358|  23.8k|        let offset = if delta == T::Unsigned::MAX {
  359|     52|            arbitrary_int
  360|       |        } else {
  361|  23.7k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  362|       |        };
  363|       |
  364|       |        // Finally, we add `start` to our offset from `start` to get the result
  365|       |        // actual value within the range.
  366|  23.8k|        let result = start.wrapping_add(offset);
  367|  23.8k|
  368|  23.8k|        // And convert back to our maybe-signed representation.
  369|  23.8k|        let result = T::from_unsigned(result);
  370|  23.8k|        debug_assert!(*range.start() <= result);
  371|  23.8k|        debug_assert!(result <= *range.end());
  372|       |
  373|  23.8k|        Ok((result, bytes_consumed))
  374|  23.8k|    }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  874|  23.8k|                fn wrapping_sub(self, rhs: Self) -> Self {
  875|  23.8k|                    <$ty>::wrapping_sub(self, rhs)
  876|  23.8k|                }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  866|  23.7k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  867|  23.7k|                    <$ty>::checked_add(self, rhs)
  868|  23.7k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  866|  56.7k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  867|  56.7k|                    <$ty>::checked_add(self, rhs)
  868|  56.7k|                }
_RNvXs5_NtCs38Pwkt6J51w_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  866|  5.50k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  867|  5.50k|                    <$ty>::checked_add(self, rhs)
  868|  5.50k|                }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  870|  23.8k|                fn wrapping_add(self, rhs: Self) -> Self {
  871|  23.8k|                    <$ty>::wrapping_add(self, rhs)
  872|  23.8k|                }
_RINvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  214|  78.4k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  215|  78.4k|    where
  216|  78.4k|        ElementType: Arbitrary<'a>,
  217|  78.4k|    {
  218|  78.4k|        let byte_size = self.arbitrary_byte_size()?;
  219|  78.4k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  220|  78.4k|        let elem_size = upper.unwrap_or(lower * 2);
  221|  78.4k|        let elem_size = std::cmp::max(1, elem_size);
  222|  78.4k|        Ok(byte_size / elem_size)
  223|  78.4k|    }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  882|  23.8k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  883|  23.8k|                    unsigned as Self
  884|  23.8k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  874|  56.7k|                fn wrapping_sub(self, rhs: Self) -> Self {
  875|  56.7k|                    <$ty>::wrapping_sub(self, rhs)
  876|  56.7k|                }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  616|  78.4k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  617|  78.4k|        self.data.get(..size)
  618|  78.4k|    }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  862|  23.8k|                fn from_usize(u: usize) -> Self {
  863|  23.8k|                    u as Self
  864|  23.8k|                }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  585|  78.4k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  586|  78.4k|        if self.data.len() < size {
  587|      0|            return Err(Error::NotEnoughData);
  588|  78.4k|        }
  589|  78.4k|
  590|  78.4k|        let (for_buf, rest) = self.data.split_at(size);
  591|  78.4k|        self.data = rest;
  592|  78.4k|        Ok(for_buf)
  593|  78.4k|    }
_RNvXs2_NtCs38Pwkt6J51w_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  878|  47.6k|                fn to_unsigned(self) -> Self::Unsigned {
  879|  47.6k|                    self as $unsigned_ty
  880|  47.6k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  870|  56.7k|                fn wrapping_add(self, rhs: Self) -> Self {
  871|  56.7k|                    <$ty>::wrapping_add(self, rhs)
  872|  56.7k|                }
_RNvXs3_NtCs38Pwkt6J51w_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  882|  56.7k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  883|  56.7k|                    unsigned as Self
  884|  56.7k|                }
_RNvMNtCs38Pwkt6J51w_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  558|   393k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  559|   393k|        let n = std::cmp::min(buffer.len(), self.data.len());
  560|   393k|        buffer[..n].copy_from_slice(&self.data[..n]);
  561|   393k|        for byte in buffer[n..].iter_mut() {
  562|  65.6k|            *byte = 0;
  563|  65.6k|        }
  564|   393k|        self.data = &self.data[n..];
  565|   393k|        Ok(())
  566|   393k|    }

_RINvMs1_Cs8v2akxAmI5k_4itoaNtB6_6Buffer6formatyECsexm4zzIkt34_10serde_json:
   95|  2.60k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  2.60k|        i.write(unsafe {
   97|  2.60k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  2.60k|                as *mut <I as private::Sealed>::Buffer)
   99|  2.60k|        })
  100|  2.60k|    }
_RNvXsh_Cs8v2akxAmI5k_4itoayNtNtB5_7private6Sealed5writeCsexm4zzIkt34_10serde_json:
  135|  2.60k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  2.60k|                let is_nonnegative = self >= 0;
  137|  2.60k|                let mut n = if is_nonnegative {
  138|  2.60k|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // Convert negative number to positive by summing 1 to its two's complement.
  141|      0|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  2.60k|                let mut curr = buf.len() as isize;
  144|  2.60k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  2.60k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  2.60k|
  147|  2.60k|                // Need at least 16 bits for the 4-digits-at-a-time to work.
  148|  2.60k|                if mem::size_of::<$t>() >= 2 {
  149|       |                    // Eagerly decode 4 digits at a time.
  150|  11.3k|                    while n >= 10000 {
  151|  8.70k|                        let rem = (n % 10000) as isize;
  152|  8.70k|                        n /= 10000;
  153|  8.70k|
  154|  8.70k|                        let d1 = (rem / 100) << 1;
  155|  8.70k|                        let d2 = (rem % 100) << 1;
  156|  8.70k|                        curr -= 4;
  157|  8.70k|                        unsafe {
  158|  8.70k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  8.70k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  8.70k|                        }
  161|       |                    }
  162|      0|                }
  163|       |
  164|       |                // If we reach here, numbers are <=9999 so at most 4 digits long.
  165|  2.60k|                let mut n = n as isize; // Possibly reduce 64-bit math.
  166|  2.60k|
  167|  2.60k|                // Decode 2 more digits, if >2 digits.
  168|  2.60k|                if n >= 100 {
  169|  1.98k|                    let d1 = (n % 100) << 1;
  170|  1.98k|                    n /= 100;
  171|  1.98k|                    curr -= 2;
  172|  1.98k|                    unsafe {
  173|  1.98k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  174|  1.98k|                    }
  175|    620|                }
  176|       |
  177|       |                // Decode last 1 or 2 digits.
  178|  2.60k|                if n < 10 {
  179|  2.28k|                    curr -= 1;
  180|  2.28k|                    unsafe {
  181|  2.28k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  182|  2.28k|                    }
  183|       |                } else {
  184|    316|                    let d1 = n << 1;
  185|    316|                    curr -= 2;
  186|    316|                    unsafe {
  187|    316|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  188|    316|                    }
  189|       |                }
  190|       |
  191|  2.60k|                if !is_nonnegative {
  192|      0|                    curr -= 1;
  193|      0|                    unsafe {
  194|      0|                        *buf_ptr.offset(curr) = b'-';
  195|      0|                    }
  196|  2.60k|                }
  197|       |
  198|  2.60k|                let len = buf.len() - curr as usize;
  199|  2.60k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  200|  2.60k|                unsafe { str::from_utf8_unchecked(bytes) }
  201|  2.60k|            }
_RINvMs1_Cs8v2akxAmI5k_4itoaNtB6_6Buffer6formatxECsexm4zzIkt34_10serde_json:
   95|  1.48k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  1.48k|        i.write(unsafe {
   97|  1.48k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  1.48k|                as *mut <I as private::Sealed>::Buffer)
   99|  1.48k|        })
  100|  1.48k|    }
_RNvMs1_Cs8v2akxAmI5k_4itoaNtB5_6Buffer3newCsexm4zzIkt34_10serde_json:
   87|  4.08k|    pub fn new() -> Buffer {
   88|  4.08k|        let bytes = [MaybeUninit::<u8>::uninit(); I128_MAX_LEN];
   89|  4.08k|        Buffer { bytes }
   90|  4.08k|    }
_RNvXsf_Cs8v2akxAmI5k_4itoaxNtNtB5_7private6Sealed5writeCsexm4zzIkt34_10serde_json:
  135|  1.48k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  1.48k|                let is_nonnegative = self >= 0;
  137|  1.48k|                let mut n = if is_nonnegative {
  138|      0|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // Convert negative number to positive by summing 1 to its two's complement.
  141|  1.48k|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  1.48k|                let mut curr = buf.len() as isize;
  144|  1.48k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  1.48k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  1.48k|
  147|  1.48k|                // Need at least 16 bits for the 4-digits-at-a-time to work.
  148|  1.48k|                if mem::size_of::<$t>() >= 2 {
  149|       |                    // Eagerly decode 4 digits at a time.
  150|  4.98k|                    while n >= 10000 {
  151|  3.50k|                        let rem = (n % 10000) as isize;
  152|  3.50k|                        n /= 10000;
  153|  3.50k|
  154|  3.50k|                        let d1 = (rem / 100) << 1;
  155|  3.50k|                        let d2 = (rem % 100) << 1;
  156|  3.50k|                        curr -= 4;
  157|  3.50k|                        unsafe {
  158|  3.50k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  3.50k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  3.50k|                        }
  161|       |                    }
  162|      0|                }
  163|       |
  164|       |                // If we reach here, numbers are <=9999 so at most 4 digits long.
  165|  1.48k|                let mut n = n as isize; // Possibly reduce 64-bit math.
  166|  1.48k|
  167|  1.48k|                // Decode 2 more digits, if >2 digits.
  168|  1.48k|                if n >= 100 {
  169|    877|                    let d1 = (n % 100) << 1;
  170|    877|                    n /= 100;
  171|    877|                    curr -= 2;
  172|    877|                    unsafe {
  173|    877|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  174|    877|                    }
  175|    604|                }
  176|       |
  177|       |                // Decode last 1 or 2 digits.
  178|  1.48k|                if n < 10 {
  179|  1.34k|                    curr -= 1;
  180|  1.34k|                    unsafe {
  181|  1.34k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  182|  1.34k|                    }
  183|       |                } else {
  184|    136|                    let d1 = n << 1;
  185|    136|                    curr -= 2;
  186|    136|                    unsafe {
  187|    136|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  188|    136|                    }
  189|       |                }
  190|       |
  191|  1.48k|                if !is_nonnegative {
  192|  1.48k|                    curr -= 1;
  193|  1.48k|                    unsafe {
  194|  1.48k|                        *buf_ptr.offset(curr) = b'-';
  195|  1.48k|                    }
  196|      0|                }
  197|       |
  198|  1.48k|                let len = buf.len() - curr as usize;
  199|  1.48k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  200|  1.48k|                unsafe { str::from_utf8_unchecked(bytes) }
  201|  1.48k|            }

_RNvMs_Cs6sPQDrby0Yw_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   40|  2.74k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.74k|        match self {
   42|  2.68k|            Corpus::Keep => 0,
   43|     63|            Corpus::Reject => -1,
   44|       |        }
   45|  2.74k|    }
_RNvNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  303|  2.74k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.74k|                $body
  305|  2.74k|            }
rust_fuzzer_test_input:
  259|  2.74k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.74k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.74k|
  262|  2.74k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.74k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.74k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.74k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.74k|                // get to longer inputs that actually lead to interesting executions
  267|  2.74k|                // quicker.
  268|  2.74k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.74k|                }
  271|  2.74k|
  272|  2.74k|                let mut u = Unstructured::new(bytes);
  273|  2.74k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.74k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.74k|                }
  291|       |
  292|  2.74k|                let data = match data {
  293|  2.74k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.74k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.74k|                result.to_libfuzzer_code()
  299|  2.74k|            }
LLVMFuzzerTestOneInput:
   58|  2.74k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.74k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.74k|    });
   63|  2.74k|
   64|  2.74k|    match test_input {
   65|  2.74k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.74k|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs6sPQDrby0Yw_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.74k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.74k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.74k|        rust_fuzzer_test_input(data_slice)
   62|  2.74k|    });

_RNvXs_Cs3qtFwgoRZLF_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  513|  2.74M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  514|  2.74M|        Some((*self as usize).cmp(&(*other as usize)))
  515|  2.74M|    }
_RNvCs3qtFwgoRZLF_3log9max_level:
 1313|  1.87M|pub fn max_level() -> LevelFilter {
 1314|  1.87M|    // Since `LevelFilter` is `repr(usize)`,
 1315|  1.87M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1316|  1.87M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1317|  1.87M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1318|  1.87M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1319|  1.87M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1320|  1.87M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1321|  1.87M|}
_RNvXs_Cs3qtFwgoRZLF_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs7ecOk0g9G9V_8rsonpath:
  513|  1.00M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  514|  1.00M|        Some((*self as usize).cmp(&(*other as usize)))
  515|  1.00M|    }

_RNvMs2_NtCshKo6FPclqKV_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   49|  2.74k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.74k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.74k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.74k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.74k|        // `SeqCst` operations on the slow path.
   54|  2.74k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.74k|    }

_RNvMs4_NtCshKo6FPclqKV_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  963|  2.74k|        pub fn get(&self) -> Option<&T> {
  964|  2.74k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.74k|                None
  969|       |            }
  970|  2.74k|        }

_RINvMNtCs3OSQAvY9yf4_3ryu6bufferNtB3_6Buffer13format_finitedECsexm4zzIkt34_10serde_json:
   72|  5.90k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  5.90k|        unsafe {
   74|  5.90k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  5.90k|            debug_assert!(n <= self.bytes.len());
   76|  5.90k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  5.90k|            str::from_utf8_unchecked(slice)
   78|  5.90k|        }
   79|  5.90k|    }
_RNvMNtCs3OSQAvY9yf4_3ryu6bufferNtB2_6Buffer3newCsexm4zzIkt34_10serde_json:
   29|  5.90k|    pub fn new() -> Self {
   30|  5.90k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  5.90k|        Buffer { bytes }
   32|  5.90k|    }
_RNvXs5_NtCs3OSQAvY9yf4_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCsexm4zzIkt34_10serde_json:
  168|  5.90k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  5.90k|        raw::format64(self, result)
  170|  5.90k|    }

_RNvNtCs3OSQAvY9yf4_3ryu6common8pow5bits:
   64|  5.48k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|       |    // This approximation works up to the point that the multiplication
   66|       |    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|       |    // would fail at 5^4004 which is just greater than 2^9297.
   68|  5.48k|    debug_assert!(e >= 0);
   69|  5.48k|    debug_assert!(e <= 3528);
   70|  5.48k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  5.48k|}
_RNvNtCs3OSQAvY9yf4_3ryu6common10log10_pow5:
   90|  3.67k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|       |    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  3.67k|    debug_assert!(e >= 0);
   93|  3.67k|    debug_assert!(e <= 2620);
   94|  3.67k|    (e as u32 * 732923) >> 20
   95|  3.67k|}
_RNvNtCs3OSQAvY9yf4_3ryu6common10log10_pow2:
   81|  1.80k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|       |    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  1.80k|    debug_assert!(e >= 0);
   84|  1.80k|    debug_assert!(e <= 1650);
   85|  1.80k|    (e as u32 * 78913) >> 18
   86|  1.80k|}

_RNvNtCs3OSQAvY9yf4_3ryu3d2s3d2d:
   91|  5.48k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   92|  5.48k|    let (e2, m2) = if ieee_exponent == 0 {
   93|  1.20k|        (
   94|  1.20k|            // We subtract 2 so that the bounds computation has 2 additional bits.
   95|  1.20k|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   96|  1.20k|            ieee_mantissa,
   97|  1.20k|        )
   98|       |    } else {
   99|  4.27k|        (
  100|  4.27k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
  101|  4.27k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  102|  4.27k|        )
  103|       |    };
  104|  5.48k|    let even = (m2 & 1) == 0;
  105|  5.48k|    let accept_bounds = even;
  106|  5.48k|
  107|  5.48k|    // Step 2: Determine the interval of valid decimal representations.
  108|  5.48k|    let mv = 4 * m2;
  109|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  110|  5.48k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  111|       |    // We would compute mp and mm like this:
  112|       |    // uint64_t mp = 4 * m2 + 2;
  113|       |    // uint64_t mm = mv - 1 - mm_shift;
  114|       |
  115|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  116|       |    let mut vr: u64;
  117|       |    let mut vp: u64;
  118|       |    let mut vm: u64;
  119|  5.48k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  120|  5.48k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  121|  5.48k|    let e10: i32;
  122|  5.48k|    let mut vm_is_trailing_zeros = false;
  123|  5.48k|    let mut vr_is_trailing_zeros = false;
  124|  5.48k|    if e2 >= 0 {
  125|       |        // I tried special-casing q == 0, but there was no effect on performance.
  126|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  127|  1.80k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  128|  1.80k|        e10 = q as i32;
  129|  1.80k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  130|  1.80k|        let i = -e2 + q as i32 + k;
  131|  1.80k|        vr = unsafe {
  132|  1.80k|            mul_shift_all_64(
  133|  1.80k|                m2,
  134|       |                #[cfg(feature = "small")]
  135|       |                &compute_inv_pow5(q),
  136|       |                #[cfg(not(feature = "small"))]
  137|       |                {
  138|  1.80k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  139|  1.80k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  140|  1.80k|                },
  141|  1.80k|                i as u32,
  142|  1.80k|                vp_uninit.as_mut_ptr(),
  143|  1.80k|                vm_uninit.as_mut_ptr(),
  144|  1.80k|                mm_shift,
  145|  1.80k|            )
  146|  1.80k|        };
  147|  1.80k|        vp = unsafe { vp_uninit.assume_init() };
  148|  1.80k|        vm = unsafe { vm_uninit.assume_init() };
  149|  1.80k|        if q <= 21 {
  150|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  151|       |            // may still be safe, but it's more difficult to reason about them.
  152|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  153|    814|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  154|    814|            if mv_mod5 == 0 {
  155|    169|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  156|    645|            } else if accept_bounds {
  157|    406|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  158|    406|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  159|    406|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  160|    406|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  161|    406|            } else {
  162|    239|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  163|    239|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  164|    239|            }
  165|    990|        }
  166|       |    } else {
  167|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  168|  3.67k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  169|  3.67k|        e10 = q as i32 + e2;
  170|  3.67k|        let i = -e2 - q as i32;
  171|  3.67k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  172|  3.67k|        let j = q as i32 - k;
  173|  3.67k|        vr = unsafe {
  174|  3.67k|            mul_shift_all_64(
  175|  3.67k|                m2,
  176|       |                #[cfg(feature = "small")]
  177|       |                &compute_pow5(i as u32),
  178|       |                #[cfg(not(feature = "small"))]
  179|       |                {
  180|  3.67k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  181|  3.67k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  182|  3.67k|                },
  183|  3.67k|                j as u32,
  184|  3.67k|                vp_uninit.as_mut_ptr(),
  185|  3.67k|                vm_uninit.as_mut_ptr(),
  186|  3.67k|                mm_shift,
  187|  3.67k|            )
  188|  3.67k|        };
  189|  3.67k|        vp = unsafe { vp_uninit.assume_init() };
  190|  3.67k|        vm = unsafe { vm_uninit.assume_init() };
  191|  3.67k|        if q <= 1 {
  192|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  193|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  194|    595|            vr_is_trailing_zeros = true;
  195|    595|            if accept_bounds {
  196|    334|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  197|    334|                vm_is_trailing_zeros = mm_shift == 1;
  198|    334|            } else {
  199|    261|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  200|    261|                vp -= 1;
  201|    261|            }
  202|  3.08k|        } else if q < 63 {
  203|    708|            // TODO(ulfjack): Use a tighter bound here.
  204|    708|            // We want to know if the full product has at least q trailing zeros.
  205|    708|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  206|    708|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  207|    708|            // <=> p2(mv) >= q (because -e2 >= q)
  208|    708|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  209|  2.37k|        }
  210|       |    }
  211|       |
  212|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  213|  5.48k|    let mut removed = 0i32;
  214|  5.48k|    let mut last_removed_digit = 0u8;
  215|       |    // On average, we remove ~2 digits.
  216|  5.48k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  217|       |        // General case, which happens rarely (~0.7%).
  218|       |        loop {
  219|  4.22k|            let vp_div10 = div10(vp);
  220|  4.22k|            let vm_div10 = div10(vm);
  221|  4.22k|            if vp_div10 <= vm_div10 {
  222|  1.07k|                break;
  223|  3.14k|            }
  224|  3.14k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  225|  3.14k|            let vr_div10 = div10(vr);
  226|  3.14k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  227|  3.14k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  228|  3.14k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  229|  3.14k|            last_removed_digit = vr_mod10 as u8;
  230|  3.14k|            vr = vr_div10;
  231|  3.14k|            vp = vp_div10;
  232|  3.14k|            vm = vm_div10;
  233|  3.14k|            removed += 1;
  234|       |        }
  235|  1.07k|        if vm_is_trailing_zeros {
  236|       |            loop {
  237|    471|                let vm_div10 = div10(vm);
  238|    471|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  239|    471|                if vm_mod10 != 0 {
  240|    292|                    break;
  241|    179|                }
  242|    179|                let vp_div10 = div10(vp);
  243|    179|                let vr_div10 = div10(vr);
  244|    179|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  245|    179|                vr_is_trailing_zeros &= last_removed_digit == 0;
  246|    179|                last_removed_digit = vr_mod10 as u8;
  247|    179|                vr = vr_div10;
  248|    179|                vp = vp_div10;
  249|    179|                vm = vm_div10;
  250|    179|                removed += 1;
  251|       |            }
  252|    780|        }
  253|  1.07k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  254|      0|            // Round even if the exact number is .....50..0.
  255|      0|            last_removed_digit = 4;
  256|  1.07k|        }
  257|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  258|  1.07k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  259|       |            as u64
  260|       |    } else {
  261|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  262|  4.41k|        let mut round_up = false;
  263|  4.41k|        let vp_div100 = div100(vp);
  264|  4.41k|        let vm_div100 = div100(vm);
  265|  4.41k|        // Optimization: remove two digits at a time (~86.2%).
  266|  4.41k|        if vp_div100 > vm_div100 {
  267|  2.90k|            let vr_div100 = div100(vr);
  268|  2.90k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  269|  2.90k|            round_up = vr_mod100 >= 50;
  270|  2.90k|            vr = vr_div100;
  271|  2.90k|            vp = vp_div100;
  272|  2.90k|            vm = vm_div100;
  273|  2.90k|            removed += 2;
  274|  2.90k|        }
  275|       |        // Loop iterations below (approximately), without optimization above:
  276|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  277|       |        // Loop iterations below (approximately), with optimization above:
  278|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  279|       |        loop {
  280|  7.19k|            let vp_div10 = div10(vp);
  281|  7.19k|            let vm_div10 = div10(vm);
  282|  7.19k|            if vp_div10 <= vm_div10 {
  283|  4.41k|                break;
  284|  2.78k|            }
  285|  2.78k|            let vr_div10 = div10(vr);
  286|  2.78k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  287|  2.78k|            round_up = vr_mod10 >= 5;
  288|  2.78k|            vr = vr_div10;
  289|  2.78k|            vp = vp_div10;
  290|  2.78k|            vm = vm_div10;
  291|  2.78k|            removed += 1;
  292|       |        }
  293|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  294|  4.41k|        vr + (vr == vm || round_up) as u64
  295|       |    };
  296|  5.48k|    let exp = e10 + removed;
  297|  5.48k|
  298|  5.48k|    FloatingDecimal64 {
  299|  5.48k|        exponent: exp,
  300|  5.48k|        mantissa: output,
  301|  5.48k|    }
  302|  5.48k|}
_RNvNtCs3OSQAvY9yf4_3ryu3d2s16decimal_length17:
   38|  5.48k|pub fn decimal_length17(v: u64) -> u32 {
   39|       |    // This is slightly faster than a loop.
   40|       |    // The average output length is 16.38 digits, so we check high-to-low.
   41|       |    // Function precondition: v is not an 18, 19, or 20-digit number.
   42|       |    // (17 digits are sufficient for round-tripping.)
   43|  5.48k|    debug_assert!(v < 100000000000000000);
   44|       |
   45|  5.48k|    if v >= 10000000000000000 {
   46|  1.68k|        17
   47|  3.79k|    } else if v >= 1000000000000000 {
   48|  1.66k|        16
   49|  2.13k|    } else if v >= 100000000000000 {
   50|    459|        15
   51|  1.67k|    } else if v >= 10000000000000 {
   52|    107|        14
   53|  1.56k|    } else if v >= 1000000000000 {
   54|    334|        13
   55|  1.23k|    } else if v >= 100000000000 {
   56|     81|        12
   57|  1.14k|    } else if v >= 10000000000 {
   58|    425|        11
   59|    724|    } else if v >= 1000000000 {
   60|     82|        10
   61|    642|    } else if v >= 100000000 {
   62|     75|        9
   63|    567|    } else if v >= 10000000 {
   64|     80|        8
   65|    487|    } else if v >= 1000000 {
   66|     81|        7
   67|    406|    } else if v >= 100000 {
   68|     80|        6
   69|    326|    } else if v >= 10000 {
   70|     69|        5
   71|    257|    } else if v >= 1000 {
   72|     73|        4
   73|    184|    } else if v >= 100 {
   74|    110|        3
   75|     74|    } else if v >= 10 {
   76|      5|        2
   77|       |    } else {
   78|     69|        1
   79|       |    }
   80|  5.48k|}

_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics4div5B3_:
   24|    814|pub fn div5(x: u64) -> u64 {
   25|    814|    x / 5
   26|    814|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics11pow5_factor:
   39|    814|pub(crate) fn pow5_factor(mut value: u64) -> u32 {
   40|    814|    const M_INV_5: u64 = 14757395258967641293; // 5 * m_inv_5 = 1 (mod 2^64)
   41|    814|    const N_DIV_5: u64 = 3689348814741910323; // #{ n | n = 0 (mod 2^64) } = 2^64 / 5
   42|    814|    let mut count = 0u32;
   43|       |    loop {
   44|  2.14k|        debug_assert!(value != 0);
   45|  2.14k|        value = value.wrapping_mul(M_INV_5);
   46|  2.14k|        if value > N_DIV_5 {
   47|    814|            break;
   48|  1.32k|        }
   49|  1.32k|        count += 1;
   50|       |    }
   51|    814|    count
   52|    814|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  5.48k|pub unsafe fn mul_shift_all_64(
   79|  5.48k|    m: u64,
   80|  5.48k|    mul: &(u64, u64),
   81|  5.48k|    j: u32,
   82|  5.48k|    vp: *mut u64,
   83|  5.48k|    vm: *mut u64,
   84|  5.48k|    mm_shift: u32,
   85|  5.48k|) -> u64 {
   86|  5.48k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  5.48k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  5.48k|    mul_shift_64(4 * m, mul, j)
   89|  5.48k|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|    814|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|    814|    // I tried a case distinction on p, but there was no performance difference.
   58|    814|    pow5_factor(value) >= p
   59|    814|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics6div100B3_:
   34|  11.7k|pub fn div100(x: u64) -> u64 {
   35|  11.7k|    x / 100
   36|  11.7k|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics12mul_shift_64:
   71|  16.4k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  16.4k|    let b0 = m as u128 * mul.0 as u128;
   73|  16.4k|    let b2 = m as u128 * mul.1 as u128;
   74|  16.4k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  16.4k|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics5div10B3_:
   29|  29.5k|pub fn div10(x: u64) -> u64 {
   30|  29.5k|    x / 10
   31|  29.5k|}
_RNvNtCs3OSQAvY9yf4_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|    708|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|    708|    debug_assert!(value != 0);
   65|    708|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|    708|    (value & ((1u64 << p) - 1)) == 0
   68|    708|}

_RNvNtNtCs3OSQAvY9yf4_3ryu6pretty8exponent15write_exponent3:
    5|  4.40k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  4.40k|    let sign = k < 0;
    7|  4.40k|    if sign {
    8|  2.46k|        *result = b'-';
    9|  2.46k|        result = result.offset(1);
   10|  2.46k|        k = -k;
   11|  2.46k|    }
   12|       |
   13|  4.40k|    debug_assert!(k < 1000);
   14|  4.40k|    if k >= 100 {
   15|  3.00k|        *result = b'0' + (k / 100) as u8;
   16|  3.00k|        k %= 100;
   17|  3.00k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  3.00k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  3.00k|        sign as usize + 3
   20|  1.40k|    } else if k >= 10 {
   21|  1.33k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.33k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.33k|        sign as usize + 2
   24|       |    } else {
   25|     72|        *result = b'0' + k as u8;
   26|     72|        sign as usize + 1
   27|       |    }
   28|  4.40k|}

_RNvNtNtCs3OSQAvY9yf4_3ryu6pretty8mantissa19write_mantissa_long:
    5|  5.41k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  5.41k|    if (output >> 32) != 0 {
    7|  4.77k|        // One expensive 64-bit division.
    8|  4.77k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  4.77k|        output /= 100_000_000;
   10|  4.77k|
   11|  4.77k|        let c = output2 % 10_000;
   12|  4.77k|        output2 /= 10_000;
   13|  4.77k|        let d = output2 % 10_000;
   14|  4.77k|        let c0 = (c % 100) << 1;
   15|  4.77k|        let c1 = (c / 100) << 1;
   16|  4.77k|        let d0 = (d % 100) << 1;
   17|  4.77k|        let d1 = (d / 100) << 1;
   18|  4.77k|        ptr::copy_nonoverlapping(
   19|  4.77k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  4.77k|            result.offset(-2),
   21|  4.77k|            2,
   22|  4.77k|        );
   23|  4.77k|        ptr::copy_nonoverlapping(
   24|  4.77k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  4.77k|            result.offset(-4),
   26|  4.77k|            2,
   27|  4.77k|        );
   28|  4.77k|        ptr::copy_nonoverlapping(
   29|  4.77k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  4.77k|            result.offset(-6),
   31|  4.77k|            2,
   32|  4.77k|        );
   33|  4.77k|        ptr::copy_nonoverlapping(
   34|  4.77k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  4.77k|            result.offset(-8),
   36|  4.77k|            2,
   37|  4.77k|        );
   38|  4.77k|        result = result.offset(-8);
   39|  4.77k|    }
   40|  5.41k|    write_mantissa(output as u32, result);
   41|  5.41k|}
_RNvNtNtCs3OSQAvY9yf4_3ryu6pretty8mantissa14write_mantissa:
   44|  5.41k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  11.9k|    while output >= 10_000 {
   46|  6.53k|        let c = output - 10_000 * (output / 10_000);
   47|  6.53k|        output /= 10_000;
   48|  6.53k|        let c0 = (c % 100) << 1;
   49|  6.53k|        let c1 = (c / 100) << 1;
   50|  6.53k|        ptr::copy_nonoverlapping(
   51|  6.53k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  6.53k|            result.offset(-2),
   53|  6.53k|            2,
   54|  6.53k|        );
   55|  6.53k|        ptr::copy_nonoverlapping(
   56|  6.53k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  6.53k|            result.offset(-4),
   58|  6.53k|            2,
   59|  6.53k|        );
   60|  6.53k|        result = result.offset(-4);
   61|  6.53k|    }
   62|  5.41k|    if output >= 100 {
   63|  2.97k|        let c = (output % 100) << 1;
   64|  2.97k|        output /= 100;
   65|  2.97k|        ptr::copy_nonoverlapping(
   66|  2.97k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  2.97k|            result.offset(-2),
   68|  2.97k|            2,
   69|  2.97k|        );
   70|  2.97k|        result = result.offset(-2);
   71|  2.97k|    }
   72|  5.41k|    if output >= 10 {
   73|  2.17k|        let c = output << 1;
   74|  2.17k|        ptr::copy_nonoverlapping(
   75|  2.17k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  2.17k|            result.offset(-2),
   77|  2.17k|            2,
   78|  2.17k|        );
   79|  3.24k|    } else {
   80|  3.24k|        *result.offset(-1) = b'0' + output as u8;
   81|  3.24k|    }
   82|  5.41k|}

_RNvNtCs3OSQAvY9yf4_3ryu6pretty8format64:
   52|  5.90k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  5.90k|    let bits = f.to_bits();
   54|  5.90k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  5.90k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  5.90k|    let ieee_exponent =
   57|  5.90k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  5.90k|
   59|  5.90k|    let mut index = 0isize;
   60|  5.90k|    if sign {
   61|  1.86k|        *result = b'-';
   62|  1.86k|        index += 1;
   63|  4.04k|    }
   64|       |
   65|  5.90k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|    425|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|    425|        return sign as usize + 3;
   68|  5.48k|    }
   69|  5.48k|
   70|  5.48k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  5.48k|
   72|  5.48k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  5.48k|    let k = v.exponent as isize;
   74|  5.48k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  5.48k|    debug_assert!(k >= -324);
   76|       |
   77|  5.48k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|    593|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|    593|        for i in length..kk {
   81|    437|            *result.offset(index + i) = b'0';
   82|    437|        }
   83|    593|        *result.offset(index + kk) = b'.';
   84|    593|        *result.offset(index + kk + 1) = b'0';
   85|    593|        index as usize + kk as usize + 2
   86|  4.88k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|     87|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|     87|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|     87|        *result.offset(index + kk) = b'.';
   91|     87|        index as usize + length as usize + 1
   92|  4.80k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    395|        *result.offset(index) = b'0';
   95|    395|        *result.offset(index + 1) = b'.';
   96|    395|        let offset = 2 - kk;
   97|    905|        for i in 2..offset {
   98|    905|            *result.offset(index + i) = b'0';
   99|    905|        }
  100|    395|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    395|        index as usize + length as usize + offset as usize
  102|  4.40k|    } else if length == 1 {
  103|       |        // 1e30
  104|     67|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     67|        *result.offset(index + 1) = b'e';
  106|     67|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  4.34k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  4.34k|        *result.offset(index) = *result.offset(index + 1);
  111|  4.34k|        *result.offset(index + 1) = b'.';
  112|  4.34k|        *result.offset(index + length + 1) = b'e';
  113|  4.34k|        index as usize
  114|  4.34k|            + length as usize
  115|  4.34k|            + 2
  116|  4.34k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  5.90k|}

_RINvXs1o_NtNtCskSOrDnYTJQW_5serde3ser5implsINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsexm4zzIkt34_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  200|  27.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  201|  27.4k|            where
  202|  27.4k|                S: Serializer,
  203|  27.4k|            {
  204|  27.4k|                serializer.collect_seq(self)
  205|  27.4k|            }
_RINvXs1H_NtNtCskSOrDnYTJQW_5serde3ser5implsRNtNtCsexm4zzIkt34_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  517|  45.6k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  518|  45.6k|            where
  519|  45.6k|                S: Serializer,
  520|  45.6k|            {
  521|  45.6k|                (**self).serialize(serializer)
  522|  45.6k|            }
_RINvXs_NtNtCskSOrDnYTJQW_5serde3ser5implsNtNtCshJIxznpEM8j_5alloc6string6StringNtB7_9Serialize9serializeINtNtCsexm4zzIkt34_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   54|  54.6k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   55|  54.6k|    where
   56|  54.6k|        S: Serializer,
   57|  54.6k|    {
   58|  54.6k|        serializer.serialize_str(self)
   59|  54.6k|    }

_RNCINvYQINtNtCsexm4zzIkt34_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB1a_EE0Bb_:
 1288|  45.6k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsexm4zzIkt34_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBX_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EEB9_:
 1281|  27.4k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1282|  27.4k|    where
 1283|  27.4k|        I: IntoIterator,
 1284|  27.4k|        <I as IntoIterator>::Item: Serialize,
 1285|  27.4k|    {
 1286|  27.4k|        let mut iter = iter.into_iter();
 1287|  27.4k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1288|  27.4k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|  27.4k|        serializer.end()
 1290|  27.4k|    }
_RINvYINtNtCsexm4zzIkt34_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBT_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeMap15serialize_entryNtNtCshJIxznpEM8j_5alloc6string6StringB14_EB8_:
 1811|  54.6k|    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>
 1812|  54.6k|    where
 1813|  54.6k|        K: ?Sized + Serialize,
 1814|  54.6k|        V: ?Sized + Serialize,
 1815|  54.6k|    {
 1816|  54.6k|        tri!(self.serialize_key(key));
 1817|  54.6k|        self.serialize_value(value)
 1818|  54.6k|    }
_RINvNtCskSOrDnYTJQW_5serde3ser17iterator_len_hintINtNtNtCslATUeuPuGvJ_4core5slice4iter4IterNtNtCsexm4zzIkt34_10serde_json5value5ValueEEB1v_:
 1946|  27.4k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1947|  27.4k|where
 1948|  27.4k|    I: Iterator,
 1949|  27.4k|{
 1950|  27.4k|    match iter.size_hint() {
 1951|  27.4k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1952|      0|        _ => None,
 1953|       |    }
 1954|  27.4k|}

_RINvXs9_NtCsexm4zzIkt34_10serde_json3mapINtB6_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorTBM_B1o_EE9from_iterINtNtNtB1P_8adapters3map3MapINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map8IntoIterBM_NtNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB4B_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4v_B1o_INtNtB1R_7convert4FromB4t_E4froms_0EEB4B_:
  542|  34.4k|    fn from_iter<T>(iter: T) -> Self
  543|  34.4k|    where
  544|  34.4k|        T: IntoIterator<Item = (String, Value)>,
  545|  34.4k|    {
  546|  34.4k|        Map {
  547|  34.4k|            map: FromIterator::from_iter(iter),
  548|  34.4k|        }
  549|  34.4k|    }
_RNvXsj_NtCsexm4zzIkt34_10serde_json3mapNtB5_4IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB7_:
  566|  89.0k|            fn next(&mut self) -> Option<Self::Item> {
  567|  89.0k|                self.iter.next()
  568|  89.0k|            }
_RNvMNtCsexm4zzIkt34_10serde_json3mapINtB2_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  291|  34.4k|    pub fn len(&self) -> usize {
  292|  34.4k|        self.map.len()
  293|  34.4k|    }
_RNvXsg_NtCsexm4zzIkt34_10serde_json3mapRINtB5_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB7_:
 1048|  34.4k|    fn into_iter(self) -> Self::IntoIter {
 1049|  34.4k|        Iter {
 1050|  34.4k|            iter: self.map.iter(),
 1051|  34.4k|        }
 1052|  34.4k|    }

_RNvXsq_NtCsexm4zzIkt34_10serde_json6numberNtB5_6NumberINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  765|  4.08k|                fn from(i: $ty) -> Self {
  766|  4.08k|                    let n = {
  767|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  768|       |                        {
  769|  4.08k|                            if i < 0 {
  770|  1.48k|                                N::NegInt(i as i64)
  771|       |                            } else {
  772|  2.60k|                                N::PosInt(i as u64)
  773|       |                            }
  774|       |                        }
  775|       |                        #[cfg(feature = "arbitrary_precision")]
  776|       |                        {
  777|       |                            itoa::Buffer::new().format(i).to_owned()
  778|       |                        }
  779|       |                    };
  780|  4.08k|                    Number { n }
  781|  4.08k|                }
_RNvMs1_NtCsexm4zzIkt34_10serde_json6numberNtB5_6Number8from_f64B7_:
  183|  6.23k|    pub fn from_f64(f: f64) -> Option<Number> {
  184|  6.23k|        if f.is_finite() {
  185|  5.90k|            let n = {
  186|  5.90k|                #[cfg(not(feature = "arbitrary_precision"))]
  187|  5.90k|                {
  188|  5.90k|                    N::Float(f)
  189|  5.90k|                }
  190|  5.90k|                #[cfg(feature = "arbitrary_precision")]
  191|  5.90k|                {
  192|  5.90k|                    ryu::Buffer::new().format_finite(f).to_owned()
  193|  5.90k|                }
  194|  5.90k|            };
  195|  5.90k|            Some(Number { n })
  196|       |        } else {
  197|    331|            None
  198|       |        }
  199|  6.23k|    }
_RINvXs4_NtCsexm4zzIkt34_10serde_json6numberNtB6_6NumberNtNtCskSOrDnYTJQW_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB2a_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  371|  9.99k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  372|  9.99k|    where
  373|  9.99k|        S: Serializer,
  374|  9.99k|    {
  375|  9.99k|        match self.n {
  376|  2.60k|            N::PosInt(u) => serializer.serialize_u64(u),
  377|  1.48k|            N::NegInt(i) => serializer.serialize_i64(i),
  378|  5.90k|            N::Float(f) => serializer.serialize_f64(f),
  379|       |        }
  380|  9.99k|    }

_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1734|  62.0k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1735|  62.0k|    where
 1736|  62.0k|        W: ?Sized + io::Write,
 1737|  62.0k|    {
 1738|  62.0k|        writer.write_all(b"\"")
 1739|  62.0k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1816|  27.4k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1817|  27.4k|    where
 1818|  27.4k|        W: ?Sized + io::Write,
 1819|  27.4k|    {
 1820|  27.4k|        writer.write_all(b"]")
 1821|  27.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1753|   122k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1754|   122k|    where
 1755|   122k|        W: ?Sized + io::Write,
 1756|   122k|    {
 1757|       |        use self::CharEscape::*;
 1758|       |
 1759|   122k|        let s = match char_escape {
 1760|  7.87k|            Quote => b"\\\"",
 1761|    515|            ReverseSolidus => b"\\\\",
 1762|      0|            Solidus => b"\\/",
 1763|    311|            Backspace => b"\\b",
 1764|    248|            FormFeed => b"\\f",
 1765|    823|            LineFeed => b"\\n",
 1766|  1.09k|            CarriageReturn => b"\\r",
 1767|    526|            Tab => b"\\t",
 1768|   111k|            AsciiControl(byte) => {
 1769|   111k|                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1770|   111k|                let bytes = &[
 1771|   111k|                    b'\\',
 1772|   111k|                    b'u',
 1773|   111k|                    b'0',
 1774|   111k|                    b'0',
 1775|   111k|                    HEX_DIGITS[(byte >> 4) as usize],
 1776|   111k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1777|   111k|                ];
 1778|   111k|                return writer.write_all(bytes);
 1779|       |            }
 1780|       |        };
 1781|       |
 1782|  11.4k|        writer.write_all(s)
 1783|   122k|    }
_RNvXs2_NtCsexm4zzIkt34_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeSeq3endB7_:
  513|  27.4k|    fn end(self) -> Result<()> {
  514|  27.4k|        match self {
  515|  27.4k|            Compound::Map { ser, state } => match state {
  516|  1.81k|                State::Empty => Ok(()),
  517|  25.6k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  518|       |            },
  519|       |            #[cfg(feature = "arbitrary_precision")]
  520|       |            Compound::Number { .. } => unreachable!(),
  521|       |            #[cfg(feature = "raw_value")]
  522|       |            Compound::RawValue { .. } => unreachable!(),
  523|       |        }
  524|  27.4k|    }
_RINvNtCsexm4zzIkt34_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB19_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2063|  62.0k|fn format_escaped_str_contents<W, F>(
 2064|  62.0k|    writer: &mut W,
 2065|  62.0k|    formatter: &mut F,
 2066|  62.0k|    value: &str,
 2067|  62.0k|) -> io::Result<()>
 2068|  62.0k|where
 2069|  62.0k|    W: ?Sized + io::Write,
 2070|  62.0k|    F: ?Sized + Formatter,
 2071|  62.0k|{
 2072|  62.0k|    let bytes = value.as_bytes();
 2073|  62.0k|
 2074|  62.0k|    let mut start = 0;
 2075|       |
 2076|   234k|    for (i, &byte) in bytes.iter().enumerate() {
 2077|   234k|        let escape = ESCAPE[byte as usize];
 2078|   234k|        if escape == 0 {
 2079|   111k|            continue;
 2080|   122k|        }
 2081|   122k|
 2082|   122k|        if start < i {
 2083|  17.9k|            tri!(formatter.write_string_fragment(writer, &value[start..i]));
 2084|   105k|        }
 2085|       |
 2086|   122k|        let char_escape = CharEscape::from_escape_table(escape, byte);
 2087|   122k|        tri!(formatter.write_char_escape(writer, char_escape));
 2088|       |
 2089|   122k|        start = i + 1;
 2090|       |    }
 2091|       |
 2092|  62.0k|    if start == bytes.len() {
 2093|  47.5k|        return Ok(());
 2094|  14.4k|    }
 2095|  14.4k|
 2096|  14.4k|    formatter.write_string_fragment(writer, &value[start..])
 2097|  62.0k|}
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1839|  45.6k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1840|  45.6k|    where
 1841|  45.6k|        W: ?Sized + io::Write,
 1842|  45.6k|    {
 1843|  45.6k|        Ok(())
 1844|  45.6k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1568|  8.35k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1569|  8.35k|    where
 1570|  8.35k|        W: ?Sized + io::Write,
 1571|  8.35k|    {
 1572|  8.35k|        let s = if value {
 1573|  6.37k|            b"true" as &[u8]
 1574|       |        } else {
 1575|  1.98k|            b"false" as &[u8]
 1576|       |        };
 1577|  8.35k|        writer.write_all(s)
 1578|  8.35k|    }
_RNvXsi_NtCsexm4zzIkt34_10serde_json3serNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  460|   100k|#[derive(Eq, PartialEq)]
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1703|  5.90k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1704|  5.90k|    where
 1705|  5.90k|        W: ?Sized + io::Write,
 1706|  5.90k|    {
 1707|  5.90k|        let mut buffer = ryu::Buffer::new();
 1708|  5.90k|        let s = buffer.format_finite(value);
 1709|  5.90k|        writer.write_all(s.as_bytes())
 1710|  5.90k|    }
_RNvXs6_NtCsexm4zzIkt34_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeMap3endB7_:
  667|  34.4k|    fn end(self) -> Result<()> {
  668|  34.4k|        match self {
  669|  34.4k|            Compound::Map { ser, state } => match state {
  670|  4.07k|                State::Empty => Ok(()),
  671|  30.3k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  672|       |            },
  673|       |            #[cfg(feature = "arbitrary_precision")]
  674|       |            Compound::Number { .. } => unreachable!(),
  675|       |            #[cfg(feature = "raw_value")]
  676|       |            Compound::RawValue { .. } => unreachable!(),
  677|       |        }
  678|  34.4k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer14serialize_boolB7_:
   78|  8.35k|    fn serialize_bool(self, value: bool) -> Result<()> {
   79|  8.35k|        self.formatter
   80|  8.35k|            .write_bool(&mut self.writer, value)
   81|  8.35k|            .map_err(Error::io)
   82|  8.35k|    }
_RNvMNtCsexm4zzIkt34_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   26|  2.74k|    pub fn new(writer: W) -> Self {
   27|  2.74k|        Serializer::with_formatter(writer, CompactFormatter)
   28|  2.74k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer14serialize_unitB7_:
  200|  15.4k|    fn serialize_unit(self) -> Result<()> {
  201|  15.4k|        self.formatter
  202|  15.4k|            .write_null(&mut self.writer)
  203|  15.4k|            .map_err(Error::io)
  204|  15.4k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_seqB7_:
  282|  27.4k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  283|  27.4k|        tri!(self
  284|  27.4k|            .formatter
  285|  27.4k|            .begin_array(&mut self.writer)
  286|  27.4k|            .map_err(Error::io));
  287|  27.4k|        if len == Some(0) {
  288|  1.81k|            tri!(self
  289|  1.81k|                .formatter
  290|  1.81k|                .end_array(&mut self.writer)
  291|  1.81k|                .map_err(Error::io));
  292|  1.81k|            Ok(Compound::Map {
  293|  1.81k|                ser: self,
  294|  1.81k|                state: State::Empty,
  295|  1.81k|            })
  296|       |        } else {
  297|  25.6k|            Ok(Compound::Map {
  298|  25.6k|                ser: self,
  299|  25.6k|                state: State::First,
  300|  25.6k|            })
  301|       |        }
  302|  27.4k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_mapB7_:
  347|  34.4k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  348|  34.4k|        tri!(self
  349|  34.4k|            .formatter
  350|  34.4k|            .begin_object(&mut self.writer)
  351|  34.4k|            .map_err(Error::io));
  352|  34.4k|        if len == Some(0) {
  353|  4.07k|            tri!(self
  354|  4.07k|                .formatter
  355|  4.07k|                .end_object(&mut self.writer)
  356|  4.07k|                .map_err(Error::io));
  357|  4.07k|            Ok(Compound::Map {
  358|  4.07k|                ser: self,
  359|  4.07k|                state: State::Empty,
  360|  4.07k|            })
  361|       |        } else {
  362|  30.3k|            Ok(Compound::Map {
  363|  30.3k|                ser: self,
  364|  30.3k|                state: State::First,
  365|  30.3k|            })
  366|       |        }
  367|  34.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1A_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1894|  54.6k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1895|  54.6k|    where
 1896|  54.6k|        W: ?Sized + io::Write,
 1897|  54.6k|    {
 1898|  54.6k|        writer.write_all(b":")
 1899|  54.6k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1670|  2.60k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1671|  2.60k|    where
 1672|  2.60k|        W: ?Sized + io::Write,
 1673|  2.60k|    {
 1674|  2.60k|        let mut buffer = itoa::Buffer::new();
 1675|  2.60k|        let s = buffer.format(value);
 1676|  2.60k|        writer.write_all(s.as_bytes())
 1677|  2.60k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1724|  62.0k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1725|  62.0k|    where
 1726|  62.0k|        W: ?Sized + io::Write,
 1727|  62.0k|    {
 1728|  62.0k|        writer.write_all(b"\"")
 1729|  62.0k|    }
_RINvXs6_NtCsexm4zzIkt34_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeMap15serialize_valueB1a_EB8_:
  644|  54.6k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  645|  54.6k|    where
  646|  54.6k|        T: ?Sized + Serialize,
  647|  54.6k|    {
  648|  54.6k|        match self {
  649|  54.6k|            Compound::Map { ser, .. } => {
  650|  54.6k|                tri!(ser
  651|  54.6k|                    .formatter
  652|  54.6k|                    .begin_object_value(&mut ser.writer)
  653|  54.6k|                    .map_err(Error::io));
  654|  54.6k|                tri!(value.serialize(&mut **ser));
  655|  54.6k|                ser.formatter
  656|  54.6k|                    .end_object_value(&mut ser.writer)
  657|  54.6k|                    .map_err(Error::io)
  658|       |            }
  659|       |            #[cfg(feature = "arbitrary_precision")]
  660|       |            Compound::Number { .. } => unreachable!(),
  661|       |            #[cfg(feature = "raw_value")]
  662|       |            Compound::RawValue { .. } => unreachable!(),
  663|       |        }
  664|  54.6k|    }
_RINvXs2_NtCsexm4zzIkt34_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeSeq17serialize_elementRB1a_EB8_:
  489|  45.6k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  490|  45.6k|    where
  491|  45.6k|        T: ?Sized + Serialize,
  492|  45.6k|    {
  493|  45.6k|        match self {
  494|  45.6k|            Compound::Map { ser, state } => {
  495|  45.6k|                tri!(ser
  496|  45.6k|                    .formatter
  497|  45.6k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  498|  45.6k|                    .map_err(Error::io));
  499|  45.6k|                *state = State::Rest;
  500|  45.6k|                tri!(value.serialize(&mut **ser));
  501|  45.6k|                ser.formatter
  502|  45.6k|                    .end_array_value(&mut ser.writer)
  503|  45.6k|                    .map_err(Error::io)
  504|       |            }
  505|       |            #[cfg(feature = "arbitrary_precision")]
  506|       |            Compound::Number { .. } => unreachable!(),
  507|       |            #[cfg(feature = "raw_value")]
  508|       |            Compound::RawValue { .. } => unreachable!(),
  509|       |        }
  510|  45.6k|    }
_RNvMs0_NtCsexm4zzIkt34_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   50|  2.74k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   51|  2.74k|        Serializer { writer, formatter }
   52|  2.74k|    }
_RINvNtCsexm4zzIkt34_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtB10_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2053|  62.0k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2054|  62.0k|where
 2055|  62.0k|    W: ?Sized + io::Write,
 2056|  62.0k|    F: ?Sized + Formatter,
 2057|  62.0k|{
 2058|  62.0k|    tri!(formatter.begin_string(writer));
 2059|  62.0k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2060|  62.0k|    formatter.end_string(writer)
 2061|  62.0k|}
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1859|  34.4k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1860|  34.4k|    where
 1861|  34.4k|        W: ?Sized + io::Write,
 1862|  34.4k|    {
 1863|  34.4k|        writer.write_all(b"}")
 1864|  34.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1615|  1.48k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1616|  1.48k|    where
 1617|  1.48k|        W: ?Sized + io::Write,
 1618|  1.48k|    {
 1619|  1.48k|        let mut buffer = itoa::Buffer::new();
 1620|  1.48k|        let s = buffer.format(value);
 1621|  1.48k|        writer.write_all(s.as_bytes())
 1622|  1.48k|    }
_RINvNtCsexm4zzIkt34_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBQ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterB11_EB4_:
 2141|  2.74k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2142|  2.74k|where
 2143|  2.74k|    W: io::Write,
 2144|  2.74k|    T: ?Sized + Serialize,
 2145|  2.74k|{
 2146|  2.74k|    let mut ser = Serializer::new(writer);
 2147|  2.74k|    value.serialize(&mut ser)
 2148|  2.74k|}
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1903|  54.6k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1904|  54.6k|    where
 1905|  54.6k|        W: ?Sized + io::Write,
 1906|  54.6k|    {
 1907|  54.6k|        Ok(())
 1908|  54.6k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_i64B7_:
  106|  1.48k|    fn serialize_i64(self, value: i64) -> Result<()> {
  107|  1.48k|        self.formatter
  108|  1.48k|            .write_i64(&mut self.writer, value)
  109|  1.48k|            .map_err(Error::io)
  110|  1.48k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1744|  32.3k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1745|  32.3k|    where
 1746|  32.3k|        W: ?Sized + io::Write,
 1747|  32.3k|    {
 1748|  32.3k|        writer.write_all(fragment.as_bytes())
 1749|  32.3k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_u64B7_:
  140|  2.60k|    fn serialize_u64(self, value: u64) -> Result<()> {
  141|  2.60k|        self.formatter
  142|  2.60k|            .write_u64(&mut self.writer, value)
  143|  2.60k|            .map_err(Error::io)
  144|  2.60k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_f64B7_:
  167|  5.90k|    fn serialize_f64(self, value: f64) -> Result<()> {
  168|  5.90k|        match value.classify() {
  169|      0|            FpCategory::Nan | FpCategory::Infinite => self
  170|      0|                .formatter
  171|      0|                .write_null(&mut self.writer)
  172|      0|                .map_err(Error::io),
  173|  5.90k|            _ => self
  174|  5.90k|                .formatter
  175|  5.90k|                .write_f64(&mut self.writer, value)
  176|  5.90k|                .map_err(Error::io),
  177|       |        }
  178|  5.90k|    }
_RNvXs1_NtCsexm4zzIkt34_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_strB7_:
  188|  62.0k|    fn serialize_str(self, value: &str) -> Result<()> {
  189|  62.0k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  190|  62.0k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1806|  27.4k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1807|  27.4k|    where
 1808|  27.4k|        W: ?Sized + io::Write,
 1809|  27.4k|    {
 1810|  27.4k|        writer.write_all(b"[")
 1811|  27.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1559|  15.4k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1560|  15.4k|    where
 1561|  15.4k|        W: ?Sized + io::Write,
 1562|  15.4k|    {
 1563|  15.4k|        writer.write_all(b"null")
 1564|  15.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1849|  34.4k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1850|  34.4k|    where
 1851|  34.4k|        W: ?Sized + io::Write,
 1852|  34.4k|    {
 1853|  34.4k|        writer.write_all(b"{")
 1854|  34.4k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1883|  54.6k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1884|  54.6k|    where
 1885|  54.6k|        W: ?Sized + io::Write,
 1886|  54.6k|    {
 1887|  54.6k|        Ok(())
 1888|  54.6k|    }
_RNvMsa_NtCsexm4zzIkt34_10serde_json3serNtB5_10CharEscape17from_escape_tableB7_:
 1539|   122k|    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {
 1540|   122k|        match escape {
 1541|    311|            self::BB => CharEscape::Backspace,
 1542|    526|            self::TT => CharEscape::Tab,
 1543|    823|            self::NN => CharEscape::LineFeed,
 1544|    248|            self::FF => CharEscape::FormFeed,
 1545|  1.09k|            self::RR => CharEscape::CarriageReturn,
 1546|  7.87k|            self::QU => CharEscape::Quote,
 1547|    515|            self::BS => CharEscape::ReverseSolidus,
 1548|   111k|            self::UU => CharEscape::AsciiControl(byte),
 1549|      0|            _ => unreachable!(),
 1550|       |        }
 1551|   122k|    }
_RNvXs9_NtCsexm4zzIkt34_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB17_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser10Serializer13serialize_strB7_:
  802|  54.6k|    fn serialize_str(self, value: &str) -> Result<()> {
  803|  54.6k|        self.ser.serialize_str(value)
  804|  54.6k|    }
_RINvXs6_NtCsexm4zzIkt34_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCskSOrDnYTJQW_5serde3ser12SerializeMap13serialize_keyNtNtCshJIxznpEM8j_5alloc6string6StringEB8_:
  618|  54.6k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  619|  54.6k|    where
  620|  54.6k|        T: ?Sized + Serialize,
  621|  54.6k|    {
  622|  54.6k|        match self {
  623|  54.6k|            Compound::Map { ser, state } => {
  624|  54.6k|                tri!(ser
  625|  54.6k|                    .formatter
  626|  54.6k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  627|  54.6k|                    .map_err(Error::io));
  628|  54.6k|                *state = State::Rest;
  629|       |
  630|  54.6k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  631|       |
  632|  54.6k|                ser.formatter
  633|  54.6k|                    .end_object_key(&mut ser.writer)
  634|  54.6k|                    .map_err(Error::io)
  635|       |            }
  636|       |            #[cfg(feature = "arbitrary_precision")]
  637|       |            Compound::Number { .. } => unreachable!(),
  638|       |            #[cfg(feature = "raw_value")]
  639|       |            Compound::RawValue { .. } => unreachable!(),
  640|       |        }
  641|  54.6k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1826|  45.6k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1827|  45.6k|    where
 1828|  45.6k|        W: ?Sized + io::Write,
 1829|  45.6k|    {
 1830|  45.6k|        if first {
 1831|  25.6k|            Ok(())
 1832|       |        } else {
 1833|  19.9k|            writer.write_all(b",")
 1834|       |        }
 1835|  45.6k|    }
_RINvYNtNtCsexm4zzIkt34_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1868|  54.6k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1869|  54.6k|    where
 1870|  54.6k|        W: ?Sized + io::Write,
 1871|  54.6k|    {
 1872|  54.6k|        if first {
 1873|  30.3k|            Ok(())
 1874|       |        } else {
 1875|  24.3k|            writer.write_all(b",")
 1876|       |        }
 1877|  54.6k|    }

_RNvXsf_NtNtCsexm4zzIkt34_10serde_json5value4fromNtB7_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   12|  4.08k|                fn from(n: $ty) -> Self {
   13|  4.08k|                    Value::Number(n.into())
   14|  4.08k|                }
_RNvXs_NtNtCsexm4zzIkt34_10serde_json5value4fromNtB6_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromdE4from:
   59|  6.23k|    fn from(f: f64) -> Self {
   60|  6.23k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   61|  6.23k|    }

_RNvXs_NtCsexm4zzIkt34_10serde_json5valueNtB4_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
  222|  2.74k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  223|  2.74k|        struct WriterFormatter<'a, 'b: 'a> {
  224|  2.74k|            inner: &'a mut fmt::Formatter<'b>,
  225|  2.74k|        }
  226|  2.74k|
  227|  2.74k|        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  228|  2.74k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|  2.74k|                // Safety: the serializer below only emits valid utf8 when using
  230|  2.74k|                // the default formatter.
  231|  2.74k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|  2.74k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|  2.74k|                Ok(buf.len())
  234|  2.74k|            }
  235|  2.74k|
  236|  2.74k|            fn flush(&mut self) -> io::Result<()> {
  237|  2.74k|                Ok(())
  238|  2.74k|            }
  239|  2.74k|        }
  240|  2.74k|
  241|  2.74k|        fn io_error(_: fmt::Error) -> io::Error {
  242|  2.74k|            // Error value does not matter because Display impl just maps it
  243|  2.74k|            // back to fmt::Error.
  244|  2.74k|            io::Error::new(io::ErrorKind::Other, "fmt error")
  245|  2.74k|        }
  246|  2.74k|
  247|  2.74k|        let alternate = f.alternate();
  248|  2.74k|        let mut wr = WriterFormatter { inner: f };
  249|  2.74k|        if alternate {
  250|       |            // {:#}
  251|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  252|       |        } else {
  253|       |            // {}
  254|  2.74k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  255|       |        }
  256|  2.74k|    }
_RNvXNvXs_NtCsexm4zzIkt34_10serde_json5valueNtB7_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCs9a1gyOJxq9I_3std2io5Write5write:
  228|   536k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|   536k|                // Safety: the serializer below only emits valid utf8 when using
  230|   536k|                // the default formatter.
  231|   536k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|   536k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|   536k|                Ok(buf.len())
  234|   536k|            }

_RINvXNtNtCsexm4zzIkt34_10serde_json5value3serNtB5_5ValueNtNtCskSOrDnYTJQW_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BH_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|   103k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|   103k|    where
   15|   103k|        S: ::serde::Serializer,
   16|   103k|    {
   17|   103k|        match self {
   18|  15.4k|            Value::Null => serializer.serialize_unit(),
   19|  8.35k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  9.99k|            Value::Number(n) => n.serialize(serializer),
   21|  7.36k|            Value::String(s) => serializer.serialize_str(s),
   22|  27.4k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  34.4k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  34.4k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|  89.0k|                for (k, v) in m {
   28|  54.6k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  34.4k|                map.end()
   31|       |            }
   32|       |            #[cfg(not(any(feature = "std", feature = "alloc")))]
   33|       |            Value::Object(_) => unreachable!(),
   34|       |        }
   35|   103k|    }

_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E15inline_capacityCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  926|   134k|    fn inline_capacity() -> usize {
  927|   134k|        if mem::size_of::<A::Item>() > 0 {
  928|   134k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   134k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFrameE6as_ptrCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2460|  26.3k|    fn as_ptr(self) -> *const T {
 2461|  26.3k|        self.0.as_ptr()
 2462|  26.3k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E15inline_capacityCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  926|   141k|    fn inline_capacity() -> usize {
  927|   141k|        if mem::size_of::<A::Item>() > 0 {
  928|   141k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   141k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E3lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  952|    760|    pub fn len(&self) -> usize {
  953|    760|        self.triple().1
  954|    760|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E6tripleCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  971|  29.3k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  29.3k|        unsafe {
  973|  29.3k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  29.3k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  29.3k|    }
_RINvCsheSF99ktFma_8smallvec12layout_arrayNtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFrameECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  328|     75|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|     75|    let size = mem::size_of::<T>()
  330|     75|        .checked_mul(n)
  331|     75|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|     75|    let align = mem::align_of::<T>();
  333|     75|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|     75|}
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E6tripleCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  971|  27.2k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  27.2k|        unsafe {
  973|  27.2k|            if self.spilled() {
  974|    404|                let (ptr, len) = self.data.heap();
  975|    404|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  26.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  27.2k|    }
_RNvXsf_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1846|  26.4k|    fn deref(&self) -> &[A::Item] {
 1847|  26.4k|        unsafe {
 1848|  26.4k|            let (ptr, len, _) = self.triple();
 1849|  26.4k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1850|  26.4k|        }
 1851|  26.4k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E3popCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1130|  20.6k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  20.6k|        unsafe {
 1132|  20.6k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  20.6k|            let ptr: *const _ = ptr.as_ptr();
 1134|  20.6k|            if *len_ptr == 0 {
 1135|      0|                return None;
 1136|  20.6k|            }
 1137|  20.6k|            let last_index = *len_ptr - 1;
 1138|  20.6k|            *len_ptr = last_index;
 1139|  20.6k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  20.6k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  641|  25.7k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  25.7k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  25.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E6tripleCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  971|  26.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  26.5k|        unsafe {
  973|  26.5k|            if self.spilled() {
  974|  8.16k|                let (ptr, len) = self.data.heap();
  975|  8.16k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  18.4k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  26.5k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullTRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2456|  29.3k|    fn new(ptr: *const T) -> Option<Self> {
 2457|  29.3k|        NonNull::new(ptr as *mut T).map(Self)
 2458|  29.3k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2456|  26.8k|    fn new(ptr: *const T) -> Option<Self> {
 2457|  26.8k|        NonNull::new(ptr as *mut T).map(Self)
 2458|  26.8k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E8heap_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  659|  13.8k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  13.8k|        let h = &mut self.heap;
  661|  13.8k|        (h.0, &mut h.1)
  662|  13.8k|    }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1856|  27.3k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  27.3k|        unsafe {
 1858|  27.3k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  27.3k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  27.3k|        }
 1861|  27.3k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E7spilledCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1001|  80.7k|    pub fn spilled(&self) -> bool {
 1002|  80.7k|        self.capacity > Self::inline_capacity()
 1003|  80.7k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E9from_heapCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  664|     75|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|     75|        SmallVecData { heap: (ptr, len) }
  666|     75|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  984|  25.7k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  25.7k|        unsafe {
  986|  25.7k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  25.7k|                (
  991|  25.7k|                    self.data.inline_mut(),
  992|  25.7k|                    &mut self.capacity,
  993|  25.7k|                    Self::inline_capacity(),
  994|  25.7k|                )
  995|       |            }
  996|       |        }
  997|  25.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E8is_emptyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  958|    760|    pub fn is_empty(&self) -> bool {
  959|    760|        self.len() == 0
  960|    760|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  659|  1.97k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  1.97k|        let h = &mut self.heap;
  661|  1.97k|        (h.0, &mut h.1)
  662|  1.97k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionE6as_ptrCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2460|  26.4k|    fn as_ptr(self) -> *const T {
 2461|  26.4k|        self.0.as_ptr()
 2462|  26.4k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E8capacityCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  964|     75|    pub fn capacity(&self) -> usize {
  965|     75|        self.triple().2
  966|     75|    }
_RNvXsX_CsheSF99ktFma_8smallvecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2421|   133k|                fn size() -> usize { $size }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1856|  25.7k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  25.7k|        unsafe {
 1858|  25.7k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  25.7k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  25.7k|        }
 1861|  25.7k|    }
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2y_5range9RangeFullE9index_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2036|  27.3k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  27.3k|        &mut (&mut **self)[index]
 2038|  27.3k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E4heapCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  655|    404|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    404|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    404|    }
_RNvXsf_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1846|  26.3k|    fn deref(&self) -> &[A::Item] {
 1847|  26.3k|        unsafe {
 1848|  26.3k|            let (ptr, len, _) = self.triple();
 1849|  26.3k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1850|  26.3k|        }
 1851|  26.3k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E10inline_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  641|  36.9k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  36.9k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  36.9k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E8try_growCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1173|     75|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|     75|        unsafe {
 1175|     75|            let unspilled = !self.spilled();
 1176|     75|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|     75|            assert!(new_cap >= len);
 1178|     75|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|     75|            } else if new_cap != cap {
 1187|     75|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|     75|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|     75|                if unspilled {
 1191|     75|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|     75|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|     75|                        .cast();
 1194|     75|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|     75|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|     75|                self.capacity = new_cap;
 1208|      0|            }
 1209|     75|            Ok(())
 1210|       |        }
 1211|     75|    }
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2036|  25.7k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  25.7k|        &mut (&mut **self)[index]
 2038|  25.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1225|     75|    fn reserve_one_unchecked(&mut self) {
 1226|     75|        debug_assert_eq!(self.len(), self.capacity());
 1227|     75|        let new_cap = self.len()
 1228|     75|            .checked_add(1)
 1229|     75|            .and_then(usize::checked_next_power_of_two)
 1230|     75|            .expect("capacity overflow");
 1231|     75|        infallible(self.try_grow(new_cap))
 1232|     75|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  926|   133k|    fn inline_capacity() -> usize {
  927|   133k|        if mem::size_of::<A::Item>() > 0 {
  928|   133k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   133k|    }
_RINvCsheSF99ktFma_8smallvec10infallibleuECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  318|     75|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|     75|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|     75|}
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullTRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEE6as_ptrCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2460|  28.5k|    fn as_ptr(self) -> *const T {
 2461|  28.5k|        self.0.as_ptr()
 2462|  28.5k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E10triple_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  984|  50.7k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  50.7k|        unsafe {
  986|  50.7k|            if self.spilled() {
  987|  13.7k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  13.7k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  36.9k|                (
  991|  36.9k|                    self.data.inline_mut(),
  992|  36.9k|                    &mut self.capacity,
  993|  36.9k|                    Self::inline_capacity(),
  994|  36.9k|                )
  995|       |            }
  996|       |        }
  997|  50.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E10triple_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  984|  27.3k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  27.3k|        unsafe {
  986|  27.3k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  27.3k|                (
  991|  27.3k|                    self.data.inline_mut(),
  992|  27.3k|                    &mut self.capacity,
  993|  27.3k|                    Self::inline_capacity(),
  994|  27.3k|                )
  995|       |            }
  996|       |        }
  997|  27.3k|    }
_RNvXs1v_CsheSF99ktFma_8smallvecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2421|   134k|                fn size() -> usize { $size }
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2036|  1.85k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  1.85k|        &mut (&mut **self)[index]
 2038|  1.85k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFrameE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2456|  18.4k|    fn new(ptr: *const T) -> Option<Self> {
 2457|  18.4k|        NonNull::new(ptr as *mut T).map(Self)
 2458|  18.4k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E8heap_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  659|    367|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|    367|        let h = &mut self.heap;
  661|    367|        (h.0, &mut h.1)
  662|    367|    }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1856|  1.85k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  1.85k|        unsafe {
 1858|  1.85k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  1.85k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  1.85k|        }
 1861|  1.85k|    }
_RNvXsX_CsheSF99ktFma_8smallvecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2421|   141k|                fn size() -> usize { $size }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E6inlineCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  637|  26.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  26.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  26.8k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2118|  1.92k|    fn drop(&mut self) {
 2119|  1.92k|        unsafe {
 2120|  1.92k|            if self.spilled() {
 2121|     75|                let (ptr, &mut len) = self.data.heap_mut();
 2122|     75|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  1.85k|            } else {
 2124|  1.85k|                ptr::drop_in_place(&mut self[..]);
 2125|  1.85k|            }
 2126|       |        }
 2127|  1.92k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E4heapCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  655|  8.16k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  8.16k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  8.16k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E4pushCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1114|  28.0k|    pub fn push(&mut self, value: A::Item) {
 1115|  28.0k|        unsafe {
 1116|  28.0k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  28.0k|            if *len == cap {
 1118|     75|                self.reserve_one_unchecked();
 1119|     75|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|     75|                ptr = heap_ptr;
 1121|     75|                len = heap_len;
 1122|  28.0k|            }
 1123|  28.0k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  28.0k|            *len += 1;
 1125|  28.0k|        }
 1126|  28.0k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E3lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  952|    760|    pub fn len(&self) -> usize {
  953|    760|        self.triple().1
  954|    760|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E7spilledCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1001|  84.5k|    pub fn spilled(&self) -> bool {
 1002|  84.5k|        self.capacity > Self::inline_capacity()
 1003|  84.5k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E3lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  952|    150|    pub fn len(&self) -> usize {
  953|    150|        self.triple().1
  954|    150|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E7spilledCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1001|  79.3k|    pub fn spilled(&self) -> bool {
 1002|  79.3k|        self.capacity > Self::inline_capacity()
 1003|  79.3k|    }
_RNvXsf_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1846|  28.5k|    fn deref(&self) -> &[A::Item] {
 1847|  28.5k|        unsafe {
 1848|  28.5k|            let (ptr, len, _) = self.triple();
 1849|  28.5k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1850|  28.5k|        }
 1851|  28.5k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E6inlineCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  637|  18.4k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  18.4k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  18.4k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2118|  27.7k|    fn drop(&mut self) {
 2119|  27.7k|        unsafe {
 2120|  27.7k|            if self.spilled() {
 2121|  1.97k|                let (ptr, &mut len) = self.data.heap_mut();
 2122|  1.97k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  25.7k|            } else {
 2124|  25.7k|                ptr::drop_in_place(&mut self[..]);
 2125|  25.7k|            }
 2126|       |        }
 2127|  27.7k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E10inline_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  641|  27.3k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  27.3k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  27.3k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E6inlineCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  637|  29.3k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  29.3k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  29.3k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 2118|  27.7k|    fn drop(&mut self) {
 2119|  27.7k|        unsafe {
 2120|  27.7k|            if self.spilled() {
 2121|    367|                let (ptr, &mut len) = self.data.heap_mut();
 2122|    367|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  27.3k|            } else {
 2124|  27.3k|                ptr::drop_in_place(&mut self[..]);
 2125|  27.3k|            }
 2126|       |        }
 2127|  27.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E8is_emptyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  958|    760|    pub fn is_empty(&self) -> bool {
  959|    760|        self.len() == 0
  960|    760|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E8capacityBO_:
  964|    790|    pub fn capacity(&self) -> usize {
  965|    790|        self.triple().2
  966|    790|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  779|  81.8k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  81.8k|        assert!(
  783|  81.8k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  81.8k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  81.8k|        SmallVec {
  787|  81.8k|            capacity: 0,
  788|  81.8k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  81.8k|        }
  790|  81.8k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E9from_heapBR_:
  664|  3.06k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|  3.06k|        SmallVecData { heap: (ptr, len) }
  666|  3.06k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1237|  37.9k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  37.9k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  37.9k|        // calls to it from callers.
 1240|  37.9k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  37.9k|        if cap - len >= additional {
 1242|  37.9k|            return Ok(());
 1243|      0|        }
 1244|      0|        let new_cap = len
 1245|      0|            .checked_add(additional)
 1246|      0|            .and_then(usize::checked_next_power_of_two)
 1247|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|      0|        self.try_grow(new_cap)
 1249|  37.9k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E6inlineBT_:
  637|    606|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|    606|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|    606|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E15inline_capacityB1F_:
  926|   393k|    fn inline_capacity() -> usize {
  927|   393k|        if mem::size_of::<A::Item>() > 0 {
  928|   393k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   393k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  971|  47.1k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  47.1k|        unsafe {
  973|  47.1k|            if self.spilled() {
  974|  3.17k|                let (ptr, len) = self.data.heap();
  975|  3.17k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  43.9k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  47.1k|    }
_RNvXsX_CsheSF99ktFma_8smallvecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeB1q_:
 2421|   475k|                fn size() -> usize { $size }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E3newB1F_:
  779|  81.8k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  81.8k|        assert!(
  783|  81.8k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  81.8k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  81.8k|        SmallVec {
  787|  81.8k|            capacity: 0,
  788|  81.8k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  81.8k|        }
  790|  81.8k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E10triple_mutB1F_:
  984|   130k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   130k|        unsafe {
  986|   130k|            if self.spilled() {
  987|    950|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    950|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   129k|                (
  991|   129k|                    self.data.inline_mut(),
  992|   129k|                    &mut self.capacity,
  993|   129k|                    Self::inline_capacity(),
  994|   129k|                )
  995|       |            }
  996|       |        }
  997|   130k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E3newBO_:
  779|  1.92k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  1.92k|        assert!(
  783|  1.92k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  1.92k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  1.92k|        SmallVec {
  787|  1.92k|            capacity: 0,
  788|  1.92k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  1.92k|        }
  790|  1.92k|    }
_RNvXsP_CsheSF99ktFma_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs7ecOk0g9G9V_8rsonpath:
 2358|  75.9k|    fn drop(&mut self) {
 2359|  75.9k|        *self.len = self.local_len;
 2360|  75.9k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  641|   135k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   135k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   135k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBM_:
 2118|  54.1k|    fn drop(&mut self) {
 2119|  54.1k|        unsafe {
 2120|  54.1k|            if self.spilled() {
 2121|  1.03k|                let (ptr, &mut len) = self.data.heap_mut();
 2122|  1.03k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  53.0k|            } else {
 2124|  53.0k|                ptr::drop_in_place(&mut self[..]);
 2125|  53.0k|            }
 2126|       |        }
 2127|  54.1k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E11try_reserveB1F_:
 1237|  37.9k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  37.9k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  37.9k|        // calls to it from callers.
 1240|  37.9k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  37.9k|        if cap - len >= additional {
 1242|  37.0k|            return Ok(());
 1243|    950|        }
 1244|    950|        let new_cap = len
 1245|    950|            .checked_add(additional)
 1246|    950|            .and_then(usize::checked_next_power_of_two)
 1247|    950|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|    950|        self.try_grow(new_cap)
 1249|  37.9k|    }
_RNvMsO_CsheSF99ktFma_8smallvecNtB5_12SetLenOnDrop3getCs7ecOk0g9G9V_8rsonpath:
 2346|   182k|    fn get(&self) -> usize {
 2347|   182k|        self.local_len
 2348|   182k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  926|   125k|    fn inline_capacity() -> usize {
  927|   125k|        if mem::size_of::<A::Item>() > 0 {
  928|   125k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   125k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  926|   424k|    fn inline_capacity() -> usize {
  927|   424k|        if mem::size_of::<A::Item>() > 0 {
  928|   424k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   424k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  984|  85.2k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  85.2k|        unsafe {
  986|  85.2k|            if self.spilled() {
  987|  54.7k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  54.7k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  30.4k|                (
  991|  30.4k|                    self.data.inline_mut(),
  992|  30.4k|                    &mut self.capacity,
  993|  30.4k|                    Self::inline_capacity(),
  994|  30.4k|                )
  995|       |            }
  996|       |        }
  997|  85.2k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1114|  41.1k|    pub fn push(&mut self, value: A::Item) {
 1115|  41.1k|        unsafe {
 1116|  41.1k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  41.1k|            if *len == cap {
 1118|    790|                self.reserve_one_unchecked();
 1119|    790|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|    790|                ptr = heap_ptr;
 1121|    790|                len = heap_len;
 1122|  40.3k|            }
 1123|  41.1k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  41.1k|            *len += 1;
 1125|  41.1k|        }
 1126|  41.1k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  984|   135k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   135k|        unsafe {
  986|   135k|            if self.spilled() {
  987|    582|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    582|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   135k|                (
  991|   135k|                    self.data.inline_mut(),
  992|   135k|                    &mut self.capacity,
  993|   135k|                    Self::inline_capacity(),
  994|   135k|                )
  995|       |            }
  996|       |        }
  997|   135k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropB1F_:
 2118|  54.1k|    fn drop(&mut self) {
 2119|  54.1k|        unsafe {
 2120|  54.1k|            if self.spilled() {
 2121|    583|                let (ptr, &mut len) = self.data.heap_mut();
 2122|    583|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  53.5k|            } else {
 2124|  53.5k|                ptr::drop_in_place(&mut self[..]);
 2125|  53.5k|            }
 2126|       |        }
 2127|  54.1k|    }
_RNvXs1v_CsheSF99ktFma_8smallvecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2421|  3.85k|                fn size() -> usize { $size }
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2036|  2.54k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  2.54k|        &mut (&mut **self)[index]
 2038|  2.54k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  645|  2.74k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.74k|        SmallVecData {
  647|  2.74k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.74k|        }
  649|  2.74k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullTRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEE3newB1J_:
 2456|  37.0k|    fn new(ptr: *const T) -> Option<Self> {
 2457|  37.0k|        NonNull::new(ptr as *mut T).map(Self)
 2458|  37.0k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E6inlineB1K_:
  637|  37.0k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  37.0k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  37.0k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutBR_:
  659|  4.67k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  4.67k|        let h = &mut self.heap;
  661|  4.67k|        (h.0, &mut h.1)
  662|  4.67k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  779|  2.74k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.74k|        assert!(
  783|  2.74k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.74k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.74k|        SmallVec {
  787|  2.74k|            capacity: 0,
  788|  2.74k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.74k|        }
  790|  2.74k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E11from_inlineB1K_:
  645|  81.8k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  81.8k|        SmallVecData {
  647|  81.8k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  81.8k|        }
  649|  81.8k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1001|   239k|    pub fn spilled(&self) -> bool {
 1002|   239k|        self.capacity > Self::inline_capacity()
 1003|   239k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E3lenBO_:
  952|  1.58k|    pub fn len(&self) -> usize {
  953|  1.58k|        self.triple().1
  954|  1.58k|    }
_RINvCsheSF99ktFma_8smallvec12layout_arrayNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256EBJ_:
  328|  1.37k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  1.37k|    let size = mem::size_of::<T>()
  330|  1.37k|        .checked_mul(n)
  331|  1.37k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  1.37k|    let align = mem::align_of::<T>();
  333|  1.37k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  1.37k|}
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1001|  91.1k|    pub fn spilled(&self) -> bool {
 1002|  91.1k|        self.capacity > Self::inline_capacity()
 1003|  91.1k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullTRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEE6as_ptrB1J_:
 2460|  37.9k|    fn as_ptr(self) -> *const T {
 2461|  37.9k|        self.0.as_ptr()
 2462|  37.9k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  637|  43.9k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  43.9k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  43.9k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E8heap_mutB1K_:
  659|  1.53k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  1.53k|        let h = &mut self.heap;
  661|  1.53k|        (h.0, &mut h.1)
  662|  1.53k|    }
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2y_5range9RangeFullE9index_mutB1F_:
 2036|  53.5k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  53.5k|        &mut (&mut **self)[index]
 2038|  53.5k|    }
_RINvXsr_CsheSF99ktFma_8smallvecINtB6_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2053|  37.9k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2054|  37.9k|        let mut v = SmallVec::new();
 2055|  37.9k|        v.extend(iterable);
 2056|  37.9k|        v
 2057|  37.9k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E3newBS_:
 2456|    606|    fn new(ptr: *const T) -> Option<Self> {
 2457|    606|        NonNull::new(ptr as *mut T).map(Self)
 2458|    606|    }
_RNvXsf_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefB1F_:
 1846|  37.9k|    fn deref(&self) -> &[A::Item] {
 1847|  37.9k|        unsafe {
 1848|  37.9k|            let (ptr, len, _) = self.triple();
 1849|  37.9k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1850|  37.9k|        }
 1851|  37.9k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E8try_growBO_:
 1173|    790|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    790|        unsafe {
 1175|    790|            let unspilled = !self.spilled();
 1176|    790|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    790|            assert!(new_cap >= len);
 1178|    790|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    790|            } else if new_cap != cap {
 1187|    790|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    790|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    790|                if unspilled {
 1191|    202|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    202|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    202|                        .cast();
 1194|    202|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|    588|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|    588|                    let new_ptr =
 1201|    588|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|    588|                    new_alloc = NonNull::new(new_ptr)
 1203|    588|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|    588|                        .cast();
 1205|       |                }
 1206|    790|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    790|                self.capacity = new_cap;
 1208|      0|            }
 1209|    790|            Ok(())
 1210|       |        }
 1211|    790|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E8try_growBM_:
 1173|  3.06k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|  3.06k|        unsafe {
 1175|  3.06k|            let unspilled = !self.spilled();
 1176|  3.06k|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|  3.06k|            assert!(new_cap >= len);
 1178|  3.06k|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|  3.06k|            } else if new_cap != cap {
 1187|  3.06k|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|  3.06k|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|  3.06k|                if unspilled {
 1191|  3.00k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|  3.00k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|  3.00k|                        .cast();
 1194|  3.00k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|     58|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|     58|                    let new_ptr =
 1201|     58|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|     58|                    new_alloc = NonNull::new(new_ptr)
 1203|     58|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|     58|                        .cast();
 1205|       |                }
 1206|  3.06k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|  3.06k|                self.capacity = new_cap;
 1208|      0|            }
 1209|  3.06k|            Ok(())
 1210|       |        }
 1211|  3.06k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  641|  30.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  30.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  30.4k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2460|  37.9k|    fn as_ptr(self) -> *const T {
 2461|  37.9k|        self.0.as_ptr()
 2462|  37.9k|    }
_RNvXsv_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBO_:
 2118|  2.74k|    fn drop(&mut self) {
 2119|  2.74k|        unsafe {
 2120|  2.74k|            if self.spilled() {
 2121|    202|                let (ptr, &mut len) = self.data.heap_mut();
 2122|    202|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2123|  2.54k|            } else {
 2124|  2.54k|                ptr::drop_in_place(&mut self[..]);
 2125|  2.54k|            }
 2126|       |        }
 2127|  2.74k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E7spilledB1F_:
 1001|   223k|    pub fn spilled(&self) -> bool {
 1002|   223k|        self.capacity > Self::inline_capacity()
 1003|   223k|    }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBO_:
 1856|  2.54k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  2.54k|        unsafe {
 1858|  2.54k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  2.54k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  2.54k|        }
 1861|  2.54k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  645|  1.92k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  1.92k|        SmallVecData {
  647|  1.92k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  1.92k|        }
  649|  1.92k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E4heapBT_:
  655|  1.76k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  1.76k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  1.76k|    }
_RNvMsO_CsheSF99ktFma_8smallvecNtB5_12SetLenOnDrop13increment_lenCs7ecOk0g9G9V_8rsonpath:
 2351|  53.0k|    fn increment_len(&mut self, increment: usize) {
 2352|  53.0k|        self.local_len += increment;
 2353|  53.0k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E7reserveB1F_:
 1219|  37.9k|    pub fn reserve(&mut self, additional: usize) {
 1220|  37.9k|        infallible(self.try_reserve(additional))
 1221|  37.9k|    }
_RNvXsu_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBM_:
 2097|  41.1k|    fn default() -> SmallVec<A> {
 2098|  41.1k|        SmallVec::new()
 2099|  41.1k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  946|  1.92k|    pub fn inline_size(&self) -> usize {
  947|  1.92k|        Self::inline_capacity()
  948|  1.92k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E6tripleBO_:
  971|  2.37k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  2.37k|        unsafe {
  973|  2.37k|            if self.spilled() {
  974|  1.76k|                let (ptr, len) = self.data.heap();
  975|  1.76k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|    606|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  2.37k|    }
_RNvMsR_CsheSF99ktFma_8smallvecINtB5_12ConstNonNullNtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2456|  43.9k|    fn new(ptr: *const T) -> Option<Self> {
 2457|  43.9k|        NonNull::new(ptr as *mut T).map(Self)
 2458|  43.9k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBO_:
 1225|    790|    fn reserve_one_unchecked(&mut self) {
 1226|    790|        debug_assert_eq!(self.len(), self.capacity());
 1227|    790|        let new_cap = self.len()
 1228|    790|            .checked_add(1)
 1229|    790|            .and_then(usize::checked_next_power_of_two)
 1230|    790|            .expect("capacity overflow");
 1231|    790|        infallible(self.try_grow(new_cap))
 1232|    790|    }
_RINvCsheSF99ktFma_8smallvec12layout_arrayNtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionEBH_:
  328|  3.11k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  3.11k|    let size = mem::size_of::<T>()
  330|  3.11k|        .checked_mul(n)
  331|  3.11k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  3.11k|    let align = mem::align_of::<T>();
  333|  3.11k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  3.11k|}
_RNvXsp_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2036|  53.0k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2037|  53.0k|        &mut (&mut **self)[index]
 2038|  53.0k|    }
_RINvCsheSF99ktFma_8smallvec12layout_arrayTRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEEB1A_:
  328|    950|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|    950|    let size = mem::size_of::<T>()
  330|    950|        .checked_mul(n)
  331|    950|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|    950|    let align = mem::align_of::<T>();
  333|    950|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|    950|}
_RNvXsX_CsheSF99ktFma_8smallvecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2421|   506k|                fn size() -> usize { $size }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E11inline_sizeBM_:
  946|  2.74k|    pub fn inline_size(&self) -> usize {
  947|  2.74k|        Self::inline_capacity()
  948|  2.74k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E8capacityBM_:
  964|  3.06k|    pub fn capacity(&self) -> usize {
  965|  3.06k|        self.triple().2
  966|  3.06k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  926|  1.92k|    fn inline_capacity() -> usize {
  927|  1.92k|        if mem::size_of::<A::Item>() > 0 {
  928|  1.92k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|  1.92k|    }
_RINvXsr_CsheSF99ktFma_8smallvecINtB6_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2B_8adapters3map3MapINtCseVajoZDyomA_10vector_map8IntoIterBK_NtNtB1E_9small_set11SmallSet256ENCNvMNtB1E_9minimizerNtB5J_9Minimizer18process_superstates_0EEB1G_:
 2053|  37.9k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2054|  37.9k|        let mut v = SmallVec::new();
 2055|  37.9k|        v.extend(iterable);
 2056|  37.9k|        v
 2057|  37.9k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  946|  2.74k|    pub fn inline_size(&self) -> usize {
  947|  2.74k|        Self::inline_capacity()
  948|  2.74k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E6tripleB1F_:
  971|  37.9k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  37.9k|        unsafe {
  973|  37.9k|            if self.spilled() {
  974|    950|                let (ptr, len) = self.data.heap();
  975|    950|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  37.0k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  37.9k|    }
_RNvMsO_CsheSF99ktFma_8smallvecNtB5_12SetLenOnDrop3newCs7ecOk0g9G9V_8rsonpath:
 2338|  75.9k|    fn new(len: &'a mut usize) -> Self {
 2339|  75.9k|        SetLenOnDrop {
 2340|  75.9k|            local_len: *len,
 2341|  75.9k|            len,
 2342|  75.9k|        }
 2343|  75.9k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E10inline_mutB1K_:
  641|   129k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   129k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   129k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E11inline_sizeB1F_:
  946|  2.74k|    pub fn inline_size(&self) -> usize {
  947|  2.74k|        Self::inline_capacity()
  948|  2.74k|    }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutB1F_:
 1856|  53.5k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  53.5k|        unsafe {
 1858|  53.5k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  53.5k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  53.5k|        }
 1861|  53.5k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E3lenBM_:
  952|  6.12k|    pub fn len(&self) -> usize {
  953|  6.12k|        self.triple().1
  954|  6.12k|    }
_RINvCsheSF99ktFma_8smallvec10infallibleuECs7ecOk0g9G9V_8rsonpath:
  318|  79.8k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|  79.8k|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|  79.8k|}
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E4heapB1K_:
  655|    950|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    950|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    950|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E9from_heapBT_:
  664|    790|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    790|        SmallVecData { heap: (ptr, len) }
  666|    790|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E4pushBM_:
 1114|  3.52k|    pub fn push(&mut self, value: A::Item) {
 1115|  3.52k|        unsafe {
 1116|  3.52k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  3.52k|            if *len == cap {
 1118|  3.06k|                self.reserve_one_unchecked();
 1119|  3.06k|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|  3.06k|                ptr = heap_ptr;
 1121|  3.06k|                len = heap_len;
 1122|  3.06k|            }
 1123|  3.52k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  3.52k|            *len += 1;
 1125|  3.52k|        }
 1126|  3.52k|    }
_RNvXsf_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBM_:
 1846|  37.9k|    fn deref(&self) -> &[A::Item] {
 1847|  37.9k|        unsafe {
 1848|  37.9k|            let (ptr, len, _) = self.triple();
 1849|  37.9k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1850|  37.9k|        }
 1851|  37.9k|    }
_RNvXsg_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBM_:
 1856|  53.0k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1857|  53.0k|        unsafe {
 1858|  53.0k|            let (ptr, &mut len, _) = self.triple_mut();
 1859|  53.0k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1860|  53.0k|        }
 1861|  53.0k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E8try_growB1F_:
 1173|    950|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    950|        unsafe {
 1175|    950|            let unspilled = !self.spilled();
 1176|    950|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    950|            assert!(new_cap >= len);
 1178|    950|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    950|            } else if new_cap != cap {
 1187|    950|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    950|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    950|                if unspilled {
 1191|    950|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    950|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    950|                        .cast();
 1194|    950|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|    950|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    950|                self.capacity = new_cap;
 1208|      0|            }
 1209|    950|            Ok(())
 1210|       |        }
 1211|    950|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E4heapBR_:
  655|  3.17k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  3.17k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  3.17k|    }
_RINvXss_CsheSF99ktFma_8smallvecINtB6_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2B_8adapters3map3MapINtCseVajoZDyomA_10vector_map8IntoIterBK_NtNtB1E_9small_set11SmallSet256ENCNvMNtB1E_9minimizerNtB5z_9Minimizer18process_superstates_0EEB1G_:
 2061|  37.9k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2062|  37.9k|        let mut iter = iterable.into_iter();
 2063|  37.9k|        let (lower_size_bound, _) = iter.size_hint();
 2064|  37.9k|        self.reserve(lower_size_bound);
 2065|  37.9k|
 2066|  37.9k|        unsafe {
 2067|  37.9k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2068|  37.9k|            let ptr = ptr.as_ptr();
 2069|  37.9k|            let mut len = SetLenOnDrop::new(len_ptr);
 2070|  58.7k|            while len.get() < cap {
 2071|  55.0k|                if let Some(out) = iter.next() {
 2072|  20.8k|                    ptr::write(ptr.add(len.get()), out);
 2073|  20.8k|                    len.increment_len(1);
 2074|  20.8k|                } else {
 2075|  34.2k|                    return;
 2076|       |                }
 2077|       |            }
 2078|       |        }
 2079|       |
 2080|  3.76k|        for elem in iter {
 2081|      0|            self.push(elem);
 2082|      0|        }
 2083|  37.9k|    }
_RINvXss_CsheSF99ktFma_8smallvecINtB6_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2061|  37.9k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2062|  37.9k|        let mut iter = iterable.into_iter();
 2063|  37.9k|        let (lower_size_bound, _) = iter.size_hint();
 2064|  37.9k|        self.reserve(lower_size_bound);
 2065|  37.9k|
 2066|  37.9k|        unsafe {
 2067|  37.9k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2068|  37.9k|            let ptr = ptr.as_ptr();
 2069|  37.9k|            let mut len = SetLenOnDrop::new(len_ptr);
 2070|  70.2k|            while len.get() < cap {
 2071|  61.3k|                if let Some(out) = iter.next() {
 2072|  32.2k|                    ptr::write(ptr.add(len.get()), out);
 2073|  32.2k|                    len.increment_len(1);
 2074|  32.2k|                } else {
 2075|  29.0k|                    return;
 2076|       |                }
 2077|       |            }
 2078|       |        }
 2079|       |
 2080|  12.4k|        for elem in iter {
 2081|  3.52k|            self.push(elem);
 2082|  3.52k|        }
 2083|  37.9k|    }
_RNvXsX_CsheSF99ktFma_8smallvecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2421|   128k|                fn size() -> usize { $size }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1219|  37.9k|    pub fn reserve(&mut self, additional: usize) {
 1220|  37.9k|        infallible(self.try_reserve(additional))
 1221|  37.9k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1130|  40.7k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  40.7k|        unsafe {
 1132|  40.7k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  40.7k|            let ptr: *const _ = ptr.as_ptr();
 1134|  40.7k|            if *len_ptr == 0 {
 1135|  2.68k|                return None;
 1136|  38.0k|            }
 1137|  38.0k|            let last_index = *len_ptr - 1;
 1138|  38.0k|            *len_ptr = last_index;
 1139|  38.0k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  40.7k|    }
_RNvXsu_CsheSF99ktFma_8smallvecINtB5_8SmallVecATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultB1F_:
 2097|  41.1k|    fn default() -> SmallVec<A> {
 2098|  41.1k|        SmallVec::new()
 2099|  41.1k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  645|  81.8k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  81.8k|        SmallVecData {
  647|  81.8k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  81.8k|        }
  649|  81.8k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataANtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256j2_E8heap_mutBT_:
  659|  55.7k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  55.7k|        let h = &mut self.heap;
  661|  55.7k|        (h.0, &mut h.1)
  662|  55.7k|    }
_RNvMsc_CsheSF99ktFma_8smallvecINtB5_8SmallVecANtNtCs7ecOk0g9G9V_8rsonpath9automaton15ArrayTransitionj2_E21reserve_one_uncheckedBM_:
 1225|  3.06k|    fn reserve_one_unchecked(&mut self) {
 1226|  3.06k|        debug_assert_eq!(self.len(), self.capacity());
 1227|  3.06k|        let new_cap = self.len()
 1228|  3.06k|            .checked_add(1)
 1229|  3.06k|            .and_then(usize::checked_next_power_of_two)
 1230|  3.06k|            .expect("capacity overflow");
 1231|  3.06k|        infallible(self.try_grow(new_cap))
 1232|  3.06k|    }
_RNvMs9_CsheSF99ktFma_8smallvecINtB5_12SmallVecDataATRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton5state5StateEj2_E9from_heapB1K_:
  664|    950|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    950|        SmallVecData { heap: (ptr, len) }
  666|    950|    }

_RNCINvMCseVajoZDyomA_10vector_mapINtB5_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E8positionBI_E0B1E_:
   80|  19.7k|        self.keys.iter().position(|k| key == k)
_RNCINvMCseVajoZDyomA_10vector_mapINtB5_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BO_:
   80|  10.5M|        self.keys.iter().position(|k| key == k)
_RNvXs8_CseVajoZDyomA_10vector_mapINtB5_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1E_:
  307|  37.9k|    fn into_iter(self) -> Self::IntoIter {
  308|  37.9k|        IntoIter {
  309|  37.9k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  37.9k|        }
  311|  37.9k|    }
_RNvXs4_CseVajoZDyomA_10vector_mapINtB5_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBI_E5indexBO_:
  277|   132k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|   132k|        self.get(key).unwrap()
  279|   132k|    }
_RNvXs7_CseVajoZDyomA_10vector_mapQINtB5_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1F_:
  299|  38.0k|    fn into_iter(self) -> Self::IntoIter {
  300|  38.0k|        self.iter_mut()
  301|  38.0k|    }
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BN_:
   49|  2.74k|    #[post(ret.len() == 0)]
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E13with_capacity0B1D_:
   49|  38.0k|    #[post(ret.len() == 0)]
_RINvMCseVajoZDyomA_10vector_mapINtB3_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBM_:
   79|   129k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   129k|        self.keys.iter().position(|k| key == k)
   81|   129k|    }
_RINvMCseVajoZDyomA_10vector_mapINtB3_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBM_:
   79|   273k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   273k|        self.keys.iter().position(|k| key == k)
   81|   273k|    }
_RINvMCseVajoZDyomA_10vector_mapINtB3_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBM_:
   83|  97.4k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  97.4k|        self.position(key).is_some()
   85|  97.4k|    }
_RNvXs9_CseVajoZDyomA_10vector_mapINtB5_8IntoIterRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1G_:
  322|  58.7k|    fn next(&mut self) -> Option<(K, V)> {
  323|  58.7k|        self.iter.next()
  324|  58.7k|    }
_RNCINvMCseVajoZDyomA_10vector_mapINtB5_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BO_:
   80|  21.8M|        self.keys.iter().position(|k| key == k)
_RNCNCINvMCseVajoZDyomA_10vector_mapINtB7_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BQ_:
   90|  28.7k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BN_:
   41|  2.74k|    #[post(ret.len() == 0)]
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BN_:
   49|  2.74k|    #[post(ret.len() == 0)]
_RNCNCINvMCseVajoZDyomA_10vector_mapINtB7_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E7get_mutBK_E00B1G_:
   96|  4.13k|        self.position(key).map(move |p| &mut self.values[p])
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BN_:
   41|  2.74k|    #[post(ret.len() == 0)]
_RINvMCseVajoZDyomA_10vector_mapINtB3_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E8positionBG_EB1C_:
   79|  45.8k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  45.8k|        self.keys.iter().position(|k| key == k)
   81|  45.8k|    }
_RNvXs9_CseVajoZDyomA_10vector_mapINtB5_8IntoIterRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintB1G_:
  326|  37.9k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  37.9k|        self.iter.size_hint()
  328|  37.9k|    }
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E6insert0B1D_:
   99|  20.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E3new0B1D_:
   41|  38.0k|    #[post(ret.len() == 0)]
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BN_:
   99|  98.5k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCseVajoZDyomA_10vector_mapINtB2_6VecMapRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256E8iter_mutB1B_:
  175|  38.0k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  38.0k|        IterMut {
  177|  38.0k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  38.0k|        }
  179|  38.0k|    }
_RNCNCINvMCseVajoZDyomA_10vector_mapINtB7_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BQ_:
   90|   132k|        self.position(key).map(|p| &self.values[p])
_RNvXsr_CseVajoZDyomA_10vector_mapINtB5_7IterMutRNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3str10JsonStringNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1F_:
  494|  58.8k|            fn next(&mut self) -> Option<Self::Item> {
  495|  58.8k|                self.iter.next()
  496|  58.8k|            }
_RNCNvMCseVajoZDyomA_10vector_mapINtB4_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BN_:
   99|  43.8k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCseVajoZDyomA_10vector_mapINtB2_6VecMapNtNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBL_:
   60|  41.2k|    pub fn len(&self) -> usize {
   61|  41.2k|        self.keys.len()
   62|  41.2k|    }


_RNvMs2_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_15ArrayTransition7matches:
  113|  12.3k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  114|  12.3k|        self.label.matches(index)
  115|  12.3k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  265|   131k|    pub fn is_accepting(&self, state: State) -> bool {
  266|   131k|        self[state].attributes.is_accepting()
  267|   131k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  388|  24.3k|    pub fn is_unitary(&self, state: State) -> bool {
  389|  24.3k|        self[state].attributes.is_unitary()
  390|  24.3k|    }
_RNvMs2_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_15ArrayTransition12target_state:
  108|  68.9k|    pub(crate) fn target_state(&self) -> State {
  109|  68.9k|        self.target
  110|  68.9k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  161|  2.74k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  162|  2.74k|        let nfa = NondeterministicAutomaton::new(query)?;
  163|      0|        debug!("NFA: {}", nfa);
  164|  2.74k|        Automaton::minimize(nfa)
  165|  2.74k|    }
_RNvXs1_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
   97|   427k|    fn index(&self, index: State) -> &Self::Output {
   98|   427k|        &self.states[index.0 as usize]
   99|   427k|    }
_RNvMs7_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  404|   115k|    pub fn fallback_state(&self) -> State {
  405|   115k|        self.fallback_state
  406|   115k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  187|  2.68k|    pub fn is_select_root_query(&self) -> bool {
  188|  2.68k|        self.states.len() == 2
  189|    760|            && self.states[1].array_transitions.is_empty()
  190|    760|            && self.states[1].member_transitions.is_empty()
  191|    760|            && self.states[1].fallback_state == State(0)
  192|    760|            && self.states[1].attributes.is_accepting()
  193|  2.68k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  328|  8.83k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  329|  8.83k|        let state = &self[state];
  330|  8.83k|        state.attributes.has_array_transition_to_accepting()
  331|  5.14k|            && state
  332|  5.14k|                .array_transitions()
  333|  5.14k|                .iter()
  334|  5.14k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
  335|  8.83k|    }
_RNvMs7_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  414|  26.4k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  415|  26.4k|        &self.array_transitions
  416|  26.4k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton13initial_state:
  248|  3.85k|    pub fn initial_state(&self) -> State {
  249|  3.85k|        State(1)
  250|  3.85k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  350|  27.7k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  351|  27.7k|        self[state].attributes.has_transition_to_accepting()
  352|  27.7k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  218|  1.92k|    pub fn is_empty_query(&self) -> bool {
  219|  1.92k|        self.states.len() == 2
  220|      0|            && self.states[1].array_transitions.is_empty()
  221|      0|            && self.states[1].member_transitions.is_empty()
  222|      0|            && self.states[1].fallback_state == State(0)
  223|      0|            && !self.states[1].attributes.is_accepting()
  224|  1.92k|    }
_RNCNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  334|  6.09k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  367|  27.5k|    pub fn is_rejecting(&self, state: State) -> bool {
  368|  27.5k|        self[state].attributes.is_rejecting()
  369|  27.5k|    }
_RNvMs7_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  424|  28.5k|    pub fn member_transitions(&self) -> &[MemberTransition<'q>] {
  425|  28.5k|        &self.member_transitions
  426|  28.5k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton29has_any_array_item_transition:
  282|  42.3k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  283|  42.3k|        self[state].attributes.has_array_transition()
  284|  42.3k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  307|  6.23k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  308|  6.23k|        self.has_array_index_transition_to_accepting(state, &JsonUInt::ZERO)
  309|  6.23k|    }
_RNvMs2_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_15ArrayTransition3newB7_:
  103|  35.7k|    pub(crate) fn new(label: ArrayTransitionLabel, target: State) -> Self {
  104|  35.7k|        Self { label, target }
  105|  35.7k|    }
_RNvMs3_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_20ArrayTransitionLabel20matches_at_most_once:
  126|    150|    fn matches_at_most_once(&self) -> bool {
  127|    150|        match self {
  128|    150|            Self::Index(_) => true,
  129|      0|            Self::Slice(slice) => {
  130|      0|                slice.step == JsonUInt::ZERO && slice.end.map_or(false, |end| slice.start.as_u64() + 1 >= end.as_u64())
  131|       |            }
  132|       |        }
  133|    150|    }
_RNvXs4_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_20ArrayTransitionLabelINtNtCslATUeuPuGvJ_4core7convert4FromNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3num8JsonUIntE4from:
  139|  5.50k|    fn from(index: JsonUInt) -> Self {
  140|  5.50k|        Self::Index(index)
  141|  5.50k|    }
_RNvMs3_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_20ArrayTransitionLabel7matches:
  119|  12.3k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  120|  12.3k|        match self {
  121|  12.3k|            Self::Index(i) => index.eq(i),
  122|      0|            Self::Slice(s) => s.contains(index),
  123|       |        }
  124|  12.3k|    }
_RNvMsa_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_11SimpleSlice3newB7_:
  516|  2.43k|    fn new(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Self {
  517|  2.43k|        Self { start, end, step }
  518|  2.43k|    }
_RNvMs6_NtCs7ecOk0g9G9V_8rsonpath9automatonNtB5_9Automaton8minimize:
  392|  2.74k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  393|  2.74k|        minimizer::minimize(nfa)
  394|  2.74k|    }
_RNvXNtCs7ecOk0g9G9V_8rsonpath9automatonNtB2_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB4_:
   64|  41.1k|    fn default() -> Self {
   65|  41.1k|        Self {
   66|  41.1k|            attributes: StateAttributes::default(),
   67|  41.1k|            member_transitions: SmallVec::default(),
   68|  41.1k|            array_transitions: SmallVec::default(),
   69|  41.1k|            fallback_state: State(0),
   70|  41.1k|        }
   71|  41.1k|    }

_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet14add_transition0B8_:
   94|  18.9k|            .filter_map(|(other, trans)| {
   95|  18.9k|                let overlap = other.overlap_with(&label)?;
   96|  4.04k|                let priority = trans.priority + 1;
   97|  4.04k|                let mut overlap_target = target;
   98|  4.04k|                overlap_target.union(&trans.target);
   99|  4.04k|
  100|  4.04k|                Some((overlap, LinearSetTransition { priority, target }))
  101|  18.9k|            })
_RNvXs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  153|  73.7k|    fn next(&mut self) -> Option<Self::Item> {
  154|  73.7k|        let (label, transition) = self.transitions.next()?;
  155|  35.7k|        Some(match label {
  156|  33.3k|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  157|      0|            LinearSet::BoundedSlice(start, end, step) => (
  158|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  159|      0|                transition.target,
  160|      0|            ),
  161|  2.43k|            LinearSet::OpenEndedSlice(start, step) => (
  162|  2.43k|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  163|  2.43k|                transition.target,
  164|  2.43k|            ),
  165|       |        })
  166|  73.7k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet12overlap_with:
  211|  24.2k|    fn overlap_with(&self, other: &Self) -> Option<Self> {
  212|  24.2k|        // Assume the first set starts not-later, otherwise flip.
  213|  24.2k|        if self.start() > other.start() {
  214|  5.30k|            return other.overlap_with(self);
  215|  18.9k|        }
  216|  18.9k|        // Empty sets are discarded on construction.
  217|  18.9k|        assert_ne!(self.step().as_u64(), 0);
  218|  18.9k|        assert_ne!(other.step().as_u64(), 0);
  219|       |
  220|       |        // First we take both sets as if they are open-ended and linear.
  221|       |        // We can take an overlap under that assumption and then simply apply the lower of the two end constraints,
  222|       |        // if any, to obtain the ultimate result.
  223|       |        //
  224|       |        // If first_element is beyond the range of JsonUInt it will fail conversion at the end of this function,
  225|       |        // and result in an empty set (empty transition = no transition). This is correct behavior - first element
  226|       |        // out of bounds means there are no valid elements.
  227|  18.9k|        let (first_element, gcd) = find_first_element(
  228|  18.9k|            self.start().into(),
  229|  18.9k|            self.step().into(),
  230|  18.9k|            other.start().into(),
  231|  18.9k|            other.step().into(),
  232|  18.9k|        )?;
  233|       |        // Perform the min of ends where None is treated as larger than everything.
  234|  18.9k|        let end = match (self.end_exclusive(), other.end_exclusive()) {
  235|  6.89k|            (None, Some(x)) | (Some(x), None) => Some(x),
  236|  3.28k|            (None, None) => None,
  237|  8.77k|            (Some(x), Some(y)) => Some(std::cmp::min(x, y)),
  238|       |        };
  239|       |        // This can also overflow both JsonUInt and u64. We saturate and then convert to JsonUInt.
  240|       |        // A step that fails this conversion is essentially infinite, which means we need to emit a set containing only the
  241|       |        // first_element.
  242|  18.9k|        let common_step = (self.step().as_u64() / gcd).saturating_mul(other.step().as_u64());
  243|       |
  244|  18.9k|        let start = JsonUInt::try_from(first_element).ok()?;
  245|       |
  246|  18.9k|        return match JsonUInt::try_from(common_step).ok() {
  247|  18.9k|            Some(step) => Self::from_slice(start, end, step),
  248|      0|            None if end.map_or(false, |end| end <= start) => None,
  249|      0|            None => Some(Self::Singleton(start)),
  250|       |        };
  251|       |
  252|       |        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|       |            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|       |            // Clearly b \in S2 and every +l step is in S2.
  255|       |            // Now the difference between b and the next element of S1 is given by:
  256|       |            //     c = k - (b - a) mod k
  257|       |            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|       |            //
  259|       |            // To get a common element we need to apply +l steps until we land in S1.
  260|       |            // We get the following equation:
  261|       |            //     c + lx = 0 mod k
  262|       |            // or
  263|       |            //     lx = -c mod k
  264|       |            //
  265|       |            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|       |            let c = umod(k - (b - a), k);
  267|       |            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|       |            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|       |        }
  270|  24.2k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet4stepB9_:
  286|   113k|    fn step(&self) -> JsonUInt {
  287|   113k|        match self {
  288|   111k|            Self::Singleton(_) => JsonUInt::ONE,
  289|  2.60k|            Self::BoundedSlice(_, _, s) | Self::OpenEndedSlice(_, s) => *s,
  290|       |        }
  291|   113k|    }
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet10states_mut0B8_:
  127|  35.7k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
_RNCNvMs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB6_26ArrayTransitionSetIterator3new0Ba_:
  133|  13.0k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet13end_exclusive:
  278|  37.8k|    fn end_exclusive(&self) -> Option<JsonUInt> {
  279|  37.8k|        match self {
  280|  37.0k|            Self::Singleton(i) => JsonUInt::try_from(i.as_u64() + 1).ok(),
  281|      0|            Self::BoundedSlice(_, i, _) => Some(*i),
  282|    867|            Self::OpenEndedSlice(_, _) => None,
  283|       |        }
  284|  37.8k|    }
_RINvXsc_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB6_9LinearSetNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherEBa_:
   68|  42.4k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_set15extended_euclid:
  331|  18.9k|fn extended_euclid(a: i64, b: i64) -> (i64, i64) {
  332|  18.9k|    let (mut old_r, mut r) = (a, b);
  333|  18.9k|    let (mut old_x, mut x) = (1, 0);
  334|       |
  335|  37.8k|    while r != 0 {
  336|  18.9k|        let quotient = old_r / r;
  337|  18.9k|        (old_r, r) = (r, old_r - quotient * r);
  338|  18.9k|        (old_x, x) = (x, old_x - quotient * x);
  339|  18.9k|    }
  340|       |
  341|  18.9k|    (old_x, old_r)
  342|  18.9k|}
_RNvNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_set23solve_linear_congruence:
  310|  18.9k|fn solve_linear_congruence(a: i64, b: i64, m: i64) -> Option<(i64, u64)> {
  311|  18.9k|    // If gcd(a, m) does not divide b mod m, then there are no solutions.
  312|  18.9k|    // Otherwise, find the (x,y) that solve ax - my = gcd(a, m)
  313|  18.9k|    // and take x*(b/gcd(a,m)) mod (m/gcd(a,m)) as the solution.
  314|  18.9k|    //
  315|  18.9k|    // Note that there may be multiple solutions if gcd(a, m) > 1,
  316|  18.9k|    // but this always gives the smallest one.
  317|  18.9k|    let b = umod(b, m);
  318|  18.9k|    let (x, gcd) = extended_euclid(a, m);
  319|  18.9k|
  320|  18.9k|    if b % gcd != 0 {
  321|      0|        None
  322|       |    } else {
  323|       |        Some((
  324|  18.9k|            umod(x.checked_mul(b / gcd)?, m / gcd),
  325|  18.9k|            u64::try_from(gcd).expect("negative gcd"),
  326|       |        ))
  327|       |    }
  328|  18.9k|}
_RNvXs7_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSetNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   68|  5.36k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_slice:
  193|  18.9k|    fn from_slice(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Option<Self> {
  194|  18.9k|        if step == JsonUInt::ZERO {
  195|      0|            None
  196|  18.9k|        } else if let Some(end) = end {
  197|  15.6k|            if start >= end {
  198|  14.9k|                None
  199|    767|            } else if start.as_u64().saturating_add(step.as_u64()) >= end.as_u64() {
  200|       |                // Only one item within the slice.
  201|    767|                Some(Self::Singleton(start))
  202|       |            } else {
  203|      0|                debug_assert!(end > JsonUInt::ZERO);
  204|      0|                Some(Self::BoundedSlice(start, end, step))
  205|       |            }
  206|       |        } else {
  207|  3.28k|            Some(Self::OpenEndedSlice(start, step))
  208|       |        }
  209|  18.9k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet5startB9_:
  272|  86.3k|    fn start(&self) -> JsonUInt {
  273|  86.3k|        match self {
  274|  86.3k|            Self::Singleton(i) | Self::BoundedSlice(i, _, _) | Self::OpenEndedSlice(i, _) => *i,
  275|  86.3k|        }
  276|  86.3k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   80|  38.0k|    pub(super) fn new() -> Self {
   81|  38.0k|        Self {
   82|  38.0k|            transitions: HashMap::new(),
   83|  38.0k|        }
   84|  38.0k|    }
_RNvMs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  132|  37.9k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  133|  37.9k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  134|  37.9k|        Self {
  135|  37.9k|            transitions: transitions.into_iter(),
  136|  37.9k|        }
  137|  37.9k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_label:
  170|  37.0k|    fn from_label(label: ArrayTransitionLabel) -> Option<Self> {
  171|  37.0k|        match label {
  172|  37.0k|            ArrayTransitionLabel::Index(idx) => Some(Self::Singleton(idx)),
  173|      0|            ArrayTransitionLabel::Slice(slice) => {
  174|      0|                if slice.step == JsonUInt::ZERO {
  175|      0|                    None
  176|      0|                } else if let Some(end) = slice.end {
  177|      0|                    if slice.start >= end {
  178|      0|                        None
  179|      0|                    } else if slice.start.as_u64().saturating_add(slice.step.as_u64()) >= end.as_u64() {
  180|       |                        // Only one item within the slice.
  181|      0|                        Some(Self::Singleton(slice.start))
  182|       |                    } else {
  183|      0|                        debug_assert!(end > JsonUInt::ZERO);
  184|      0|                        Some(Self::BoundedSlice(slice.start, end, slice.step))
  185|       |                    }
  186|       |                } else {
  187|      0|                    Some(Self::OpenEndedSlice(slice.start, slice.step))
  188|       |                }
  189|       |            }
  190|       |        }
  191|  37.0k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iter:
  145|  37.9k|    fn into_iter(self) -> Self::IntoIter {
  146|  37.9k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  147|  37.9k|    }
_RNvNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB7_9LinearSet12overlap_with18find_first_element:
  252|  18.9k|        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  253|  18.9k|            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  254|  18.9k|            // Clearly b \in S2 and every +l step is in S2.
  255|  18.9k|            // Now the difference between b and the next element of S1 is given by:
  256|  18.9k|            //     c = k - (b - a) mod k
  257|  18.9k|            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  258|  18.9k|            //
  259|  18.9k|            // To get a common element we need to apply +l steps until we land in S1.
  260|  18.9k|            // We get the following equation:
  261|  18.9k|            //     c + lx = 0 mod k
  262|  18.9k|            // or
  263|  18.9k|            //     lx = -c mod k
  264|  18.9k|            //
  265|  18.9k|            // This is a linear congruence which has a known algorithm using extended Euclid.
  266|  18.9k|            let c = umod(k - (b - a), k);
  267|  18.9k|            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  268|  18.9k|            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  269|  18.9k|        }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet14add_transition:
   86|  37.0k|    pub(super) fn add_transition(&mut self, label: ArrayTransitionLabel, target: SmallSet256) {
   87|       |        use std::collections::hash_map::Entry;
   88|  37.0k|        let Some(label) = LinearSet::from_label(label) else {
   89|      0|            return;
   90|       |        };
   91|  37.0k|        let overlaps: Vec<_> = self
   92|  37.0k|            .transitions
   93|  37.0k|            .iter()
   94|  37.0k|            .filter_map(|(other, trans)| {
   95|       |                let overlap = other.overlap_with(&label)?;
   96|       |                let priority = trans.priority + 1;
   97|       |                let mut overlap_target = target;
   98|       |                overlap_target.union(&trans.target);
   99|       |
  100|       |                Some((overlap, LinearSetTransition { priority, target }))
  101|  37.0k|            })
  102|  37.0k|            .collect();
  103|       |
  104|  41.0k|        for (label, trans) in overlaps {
  105|  4.04k|            match self.transitions.entry(label) {
  106|  1.60k|                Entry::Occupied(mut entry) => {
  107|  1.60k|                    let entry = entry.get_mut();
  108|  1.60k|                    entry.priority = std::cmp::max(entry.priority, trans.priority);
  109|  1.60k|                    entry.target.union(&trans.target);
  110|  1.60k|                }
  111|  2.44k|                Entry::Vacant(entry) => {
  112|  2.44k|                    entry.insert(trans);
  113|  2.44k|                }
  114|       |            }
  115|       |        }
  116|       |
  117|  37.0k|        match self.transitions.entry(label) {
  118|       |            // Label overlapped (entirely) with some existing label, so it is already handled.
  119|  3.62k|            Entry::Occupied(_) => (),
  120|  33.3k|            Entry::Vacant(entry) => {
  121|  33.3k|                entry.insert(LinearSetTransition { priority: 1, target });
  122|  33.3k|            }
  123|       |        }
  124|  37.0k|    }
_RNvNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_set4umod:
  298|  56.8k|fn umod(x: i64, m: i64) -> i64 {
  299|  56.8k|    assert!(m > 0);
  300|  56.8k|    let k = x % m;
  301|  56.8k|    if k < 0 {
  302|      0|        m + k
  303|       |    } else {
  304|  56.8k|        k
  305|       |    }
  306|  56.8k|}
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  126|  38.0k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  127|  38.0k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  128|  38.0k|    }

_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstates_0B8_:
  154|  20.8k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstate0B8_:
  149|  35.7k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  175|  37.9k|    fn build_attributes(
  176|  37.9k|        &self,
  177|  37.9k|        id: DfaStateId,
  178|  37.9k|        array_transitions: &[ArrayTransition],
  179|  37.9k|        member_transitions: &[(&JsonString, DfaStateId)],
  180|  37.9k|        fallback: DfaStateId,
  181|  37.9k|    ) -> StateAttributes {
  182|  37.9k|        let mut attrs = StateAttributesBuilder::new();
  183|  37.9k|
  184|  37.9k|        if self.accepting.contains(id.0) {
  185|      0|            debug!("{id} is accepting");
  186|  5.13k|            attrs = attrs.accepting();
  187|  32.8k|        }
  188|  37.9k|        if id == Self::rejecting_state() {
  189|      0|            debug!("{id} is rejecting");
  190|      0|            attrs = attrs.rejecting();
  191|  37.9k|        }
  192|       |
  193|  37.9k|        if self.accepting.contains(fallback.0)
  194|  35.8k|            || array_transitions
  195|  35.8k|                .iter()
  196|  35.8k|                .any(|x| self.accepting.contains(x.target_state().0))
  197|  33.1k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  198|       |        {
  199|      0|            debug!("{id} has transitions to accepting");
  200|  7.31k|            attrs = attrs.transitions_to_accepting();
  201|  30.6k|        }
  202|  37.9k|        if !array_transitions.is_empty() {
  203|      0|            debug!("{id} has an array index transition");
  204|  23.3k|            attrs = attrs.has_array_transition();
  205|  14.6k|        }
  206|  37.9k|        if array_transitions
  207|  37.9k|            .iter()
  208|  37.9k|            .any(|x| self.accepting.contains(x.target_state().0))
  209|       |        {
  210|      0|            debug!("{id} has an accepting array index transition");
  211|  3.69k|            attrs = attrs.has_array_transition_to_accepting();
  212|  34.2k|        }
  213|       |
  214|       |        // Unitarity check:
  215|       |        // 1. Fallback rejects.
  216|       |        // 2. Only one transition that can match at most one element in a JSON, either:
  217|       |        //   a) member transition; or
  218|       |        //   b) array transition that matches only one index.
  219|  37.9k|        let is_unitary = {
  220|  37.9k|            fallback == Self::rejecting_state()
  221|  1.98k|                && ((member_transitions.len() == 1 && array_transitions.is_empty())
  222|  1.19k|                    || (array_transitions.len() == 1
  223|    150|                        && member_transitions.is_empty()
  224|    150|                        && array_transitions[0].label.matches_at_most_once()))
  225|       |        };
  226|  37.9k|        if is_unitary {
  227|      0|            debug!("{id} is unitary");
  228|    941|            attrs = attrs.unitary();
  229|  37.0k|        }
  230|       |
  231|  37.9k|        attrs.into()
  232|  37.9k|    }
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess_0B8_:
  197|  19.8k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess0_0B8_:
  208|  33.6k|            .any(|x| self.accepting.contains(x.target_state().0))
_RNCNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  270|  62.1k|                    Some(id.next().map(|x| x.0))
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  390|  94.6k|    fn normalize(&self, superstate: &mut SmallSet256) {
  391|  94.6k|        let furthest_checkpoint = superstate
  392|  94.6k|            .iter()
  393|  94.6k|            .map(NfaStateId)
  394|  94.6k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  395|  94.6k|            .max();
  396|       |
  397|  94.6k|        if let Some(cutoff) = furthest_checkpoint {
  398|  91.7k|            superstate.remove_all_before(cutoff.0);
  399|  91.7k|        }
  400|  94.6k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_stateB6_:
  107|  81.4k|    fn rejecting_state() -> DfaStateId {
  108|  81.4k|        DfaStateId(0)
  109|  81.4k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  135|  38.0k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  136|  38.0k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  137|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  138|       |
  139|  38.0k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  140|      0|        debug!("Raw transitions: {:?}", transitions);
  141|       |
  142|  38.0k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  143|      0|        debug!("Normalized transitions: {:?}", transitions);
  144|       |
  145|       |        // Translate the transitions to the data model expected by TransitionTable.
  146|  37.9k|        let array_transitions = transitions
  147|  37.9k|            .array
  148|  37.9k|            .into_iter()
  149|  37.9k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  150|  37.9k|            .collect::<SmallVec<_>>();
  151|  37.9k|        let member_transitions = transitions
  152|  37.9k|            .member
  153|  37.9k|            .into_iter()
  154|  37.9k|            .map(|(label, state)| (label, self.superstates[&state]))
  155|  37.9k|            .collect::<SmallVec<_>>();
  156|      0|        debug!("Translated transitions (array): {array_transitions:?}");
  157|      0|        debug!("Translated transitions (member): {member_transitions:?}");
  158|       |
  159|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  160|       |        // Otherwise, we set the fallback to the rejecting state.
  161|  37.9k|        let id = self.superstates[&current_superstate];
  162|  37.9k|        let fallback_state = self.superstates[&transitions.wildcard];
  163|  37.9k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  164|  37.9k|        let table = &mut self.dfa_states[id.0 as usize];
  165|  37.9k|        table.array_transitions = array_transitions;
  166|  37.9k|        table.member_transitions = member_transitions;
  167|  37.9k|        table.fallback_state = fallback_state;
  168|  37.9k|        table.attributes = attributes;
  169|  37.9k|
  170|  37.9k|        Ok(())
  171|  38.0k|    }
_RNvNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  357|  94.6k|        fn normalize_one(
  358|  94.6k|            this: &mut Minimizer,
  359|  94.6k|            state: &mut SmallSet256,
  360|  94.6k|            current_checkpoint: Option<NfaStateId>,
  361|  94.6k|        ) -> Result<(), CompilerError> {
  362|  94.6k|            if let Some(checkpoint) = current_checkpoint {
  363|  91.5k|                state.insert(checkpoint.0);
  364|  91.5k|            }
  365|       |
  366|  94.6k|            this.normalize(state);
  367|  94.6k|            this.activate_if_new(*state)?;
  368|       |
  369|  94.6k|            if let Some(checkpoint) = current_checkpoint {
  370|  91.4k|                this.checkpoints.insert(*state, checkpoint);
  371|  91.4k|            }
  372|       |
  373|  94.6k|            Ok(())
  374|  94.6k|        }
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributes0B8_:
  196|  32.6k|                .any(|x| self.accepting.contains(x.target_state().0))
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  268|   129k|            .filter_map(|id| match self.nfa[id] {
  269|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  270|  62.1k|                    Some(id.next().map(|x| x.0))
  271|       |                }
  272|  67.1k|                _ => None,
  273|   129k|            })
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  352|  38.0k|    fn normalize_superstate_transitions(
  353|  38.0k|        &mut self,
  354|  38.0k|        transitions: &mut SuperstateTransitionTable,
  355|  38.0k|        current_checkpoint: Option<NfaStateId>,
  356|  38.0k|    ) -> Result<(), CompilerError> {
  357|  38.0k|        fn normalize_one(
  358|  38.0k|            this: &mut Minimizer,
  359|  38.0k|            state: &mut SmallSet256,
  360|  38.0k|            current_checkpoint: Option<NfaStateId>,
  361|  38.0k|        ) -> Result<(), CompilerError> {
  362|  38.0k|            if let Some(checkpoint) = current_checkpoint {
  363|  38.0k|                state.insert(checkpoint.0);
  364|  38.0k|            }
  365|  38.0k|
  366|  38.0k|            this.normalize(state);
  367|  38.0k|            this.activate_if_new(*state)?;
  368|  38.0k|
  369|  38.0k|            if let Some(checkpoint) = current_checkpoint {
  370|  38.0k|                this.checkpoints.insert(*state, checkpoint);
  371|  38.0k|            }
  372|  38.0k|
  373|  38.0k|            Ok(())
  374|  38.0k|        }
  375|  38.0k|
  376|  38.0k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  377|  58.8k|        for (_, state) in &mut transitions.member {
  378|  20.8k|            normalize_one(self, state, current_checkpoint)?;
  379|       |        }
  380|  38.0k|        for state in &mut transitions.array.states_mut() {
  381|  35.7k|            normalize_one(self, state, current_checkpoint)?;
  382|       |        }
  383|       |
  384|  37.9k|        Ok(())
  385|  38.0k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  248|  38.0k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  249|  38.0k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  250|  9.26k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  251|  7.07k|                return Some(single_state);
  252|  2.18k|            }
  253|  28.7k|        }
  254|       |
  255|  30.9k|        None
  256|  38.0k|    }
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer15activate_if_new0B8_:
  120|     63|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNvNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizer8minimize:
   21|  2.74k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   22|  2.74k|    let minimizer = Minimizer {
   23|  2.74k|        nfa,
   24|  2.74k|        superstates: VecMap::new(),
   25|  2.74k|        checkpoints: VecMap::new(),
   26|  2.74k|        active_superstates: smallvec![],
   27|  2.74k|        dfa_states: vec![],
   28|  2.74k|        accepting: SmallSet256::default(),
   29|  2.74k|    };
   30|  2.74k|
   31|  2.74k|    minimizer.run()
   32|  2.74k|}
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  113|  97.4k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  114|  97.4k|        if !self.superstates.contains_key(&superstate) {
  115|  41.2k|            let identifier = self
  116|  41.2k|                .superstates
  117|  41.2k|                .len()
  118|  41.2k|                .try_into()
  119|  41.2k|                .map(DfaStateId)
  120|  41.2k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  121|  41.1k|            self.superstates.insert(superstate, identifier);
  122|  41.1k|            self.active_superstates.push(superstate);
  123|  41.1k|            self.dfa_states.push(StateTable::default());
  124|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  125|  41.1k|            if superstate.contains(self.nfa.accepting_state().0) {
  126|  5.44k|                self.accepting.insert(identifier.0);
  127|  35.6k|            }
  128|  56.2k|        }
  129|       |
  130|  97.3k|        Ok(())
  131|  97.4k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  237|  38.0k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  238|  38.0k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  239|  7.07k|            self.checkpoints.insert(superstate, nfa_state);
  240|  7.07k|            Some(nfa_state)
  241|       |        } else {
  242|  30.9k|            self.checkpoints.get(&superstate).copied()
  243|       |        }
  244|  38.0k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   84|  2.74k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   85|  2.74k|        // Rejecting state has no outgoing transitions except for a self-loop.
   86|  2.74k|        self.dfa_states.push(StateTable {
   87|  2.74k|            array_transitions: smallvec![],
   88|  2.74k|            member_transitions: smallvec![],
   89|  2.74k|            fallback_state: Self::rejecting_state(),
   90|  2.74k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   91|  2.74k|        });
   92|  2.74k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   93|  2.74k|
   94|  2.74k|        // Initial superstate is {0}.
   95|  2.74k|        let initial_superstate = [0].into();
   96|  2.74k|        self.activate_if_new(initial_superstate)?;
   97|       |
   98|  40.7k|        while let Some(superstate) = self.active_superstates.pop() {
   99|  38.0k|            self.process_superstate(superstate)?;
  100|       |        }
  101|       |
  102|  2.68k|        Ok(Automaton {
  103|  2.68k|            states: self.dfa_states,
  104|  2.68k|        })
  105|  2.74k|    }
_RNCNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  394|   311k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  260|  38.0k|    fn process_nfa_transitions(
  261|  38.0k|        &self,
  262|  38.0k|        current_superstate: SmallSet256,
  263|  38.0k|        current_checkpoint: Option<NfaStateId>,
  264|  38.0k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  265|  38.0k|        let mut wildcard_targets = current_superstate
  266|  38.0k|            .iter()
  267|  38.0k|            .map(NfaStateId)
  268|  38.0k|            .filter_map(|id| match self.nfa[id] {
  269|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  270|       |                    Some(id.next().map(|x| x.0))
  271|       |                }
  272|       |                _ => None,
  273|  38.0k|            })
  274|  38.0k|            .collect::<Result<SmallSet256, _>>()?;
  275|  38.0k|        if let Some(checkpoint) = current_checkpoint {
  276|  35.8k|            wildcard_targets.insert(checkpoint.0);
  277|  35.8k|        }
  278|       |
  279|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  280|       |
  281|  38.0k|        let mut transitions = SuperstateTransitionTable {
  282|  38.0k|            array: ArrayTransitionSet::new(),
  283|  38.0k|            member: VecMap::new(),
  284|  38.0k|            wildcard: wildcard_targets,
  285|  38.0k|        };
  286|       |
  287|   129k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  288|   129k|            match self.nfa[nfa_state] {
  289|       |                // Direct states simply have a single transition to the next state in the NFA.
  290|       |                // Recursive transitions also have a self-loop, but that is handled by the
  291|       |                // checkpoints mechanism - here we only handle the forward transition.
  292|  14.5k|                NfaState::Direct(nfa::Transition::Member(label))
  293|  10.3k|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  294|       |                    debug!(
  295|      0|                        "Considering member transition {nfa_state} --{}-> {}",
  296|      0|                        label.unquoted(),
  297|      0|                        nfa_state.next()?,
  298|       |                    );
  299|       |                    // Add the target NFA state to the target superstate, or create a singleton
  300|       |                    // set if this is the first transition via this label encountered in the loop.
  301|  24.9k|                    if let Some(target) = transitions.member.get_mut(&label) {
  302|  4.13k|                        target.insert(nfa_state.next()?.0);
  303|       |                    } else {
  304|  20.8k|                        let mut new_set = transitions.wildcard;
  305|  20.8k|                        new_set.insert(nfa_state.next()?.0);
  306|  20.8k|                        transitions.member.insert(label, new_set);
  307|       |                    }
  308|       |                }
  309|  15.3k|                NfaState::Direct(nfa::Transition::Array(label))
  310|  21.6k|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  311|       |                    // Array transitions are trickier, as they can have overlap. For example,
  312|       |                    // a transition over [5] overlaps with a transition over [3::2].
  313|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  314|       |                    // to the member case - create a new singleton set with a single transition.
  315|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  316|       |                    // Fortunately, the conflicts can be resolved one at a time.
  317|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  318|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  319|       |                    // The resolution is to have the following transitions:
  320|       |                    //   --t3--> S2+{s1}
  321|       |                    //   --(t1-t3)--> {s1}
  322|       |                    //   --(t2-t3)--> S2
  323|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  324|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  325|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  326|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  327|       |                    //   --t3--> S2+{s1}
  328|       |                    //   --t1--> {s1}
  329|       |                    //   --t2--> S2
  330|       |                    // and make sure the transition over t3 is put before the other two.
  331|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  332|       |                    debug!(
  333|      0|                        "Considering array transition {nfa_state} --{}-> {}",
  334|      0|                        label,
  335|      0|                        nfa_state.next()?,
  336|       |                    );
  337|  37.0k|                    let mut new_set = transitions.wildcard;
  338|  37.0k|                    new_set.insert(nfa_state.next()?.0);
  339|  37.0k|                    transitions.array.add_transition(label, new_set);
  340|       |                }
  341|       |                NfaState::Direct(nfa::Transition::Wildcard)
  342|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  343|  67.2k|                | NfaState::Accepting => (),
  344|       |            }
  345|       |        }
  346|       |
  347|  38.0k|        Ok(transitions)
  348|  38.0k|    }

_RNvMs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  126|  41.1k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  127|  41.1k|        // CAST: safe because of the check in `new`.
  128|  41.1k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  129|  41.1k|    }
_RNvXst_NtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB5_10NfaStateIdNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpB9_:
   44|  9.12k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  2.74k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|  2.74k|        use rsonpath_syntax::{Index, Selector};
   72|  2.74k|
   73|  2.74k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   74|  2.74k|            .segments()
   75|  2.74k|            .iter()
   76|  2.74k|            .map(|segment| {
   77|       |                let selectors = segment.selectors();
   78|       |
   79|       |                if selectors.len() > 1 {
   80|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|       |                    let transition = match selectors.first() {
   83|       |                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|       |                        Selector::Slice(slice) => {
   88|       |                            let start = match slice.start() {
   89|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|       |                            }?;
   92|       |                            let end = match slice.end() {
   93|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|       |                                None => Ok(None),
   96|       |                            }?;
   97|       |                            let step = match slice.step() {
   98|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|       |                            }?;
  101|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  102|       |                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|       |                    }?;
  106|       |                    if segment.is_child() {
  107|       |                        Ok(Direct(transition))
  108|       |                    } else {
  109|       |                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  2.74k|            })
  113|  2.74k|            .collect();
  114|  2.74k|        let mut states = states_result?;
  115|       |
  116|  2.74k|        states.push(Accepting);
  117|  2.74k|
  118|  2.74k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  119|  2.74k|        if let Err(err) = accepting_state {
  120|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  121|       |        } else {
  122|  2.74k|            Ok(NondeterministicAutomaton { ordered_states: states })
  123|       |        }
  124|  2.74k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|   124k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|   124k|        self.0
   55|   124k|            .checked_add(1)
   56|   124k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|   124k|            .map(Self)
   58|   124k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  135|   579k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  136|   579k|        &self.ordered_states[index.0 as usize]
  137|   579k|    }
_RNCNvMs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   76|  14.7k|            .map(|segment| {
   77|  14.7k|                let selectors = segment.selectors();
   78|  14.7k|
   79|  14.7k|                if selectors.len() > 1 {
   80|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|  14.7k|                    let transition = match selectors.first() {
   83|  5.10k|                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|  4.11k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|  5.50k|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|      0|                        Selector::Slice(slice) => {
   88|      0|                            let start = match slice.start() {
   89|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|      0|                            }?;
   92|      0|                            let end = match slice.end() {
   93|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|      0|                                None => Ok(None),
   96|      0|                            }?;
   97|      0|                            let step = match slice.step() {
   98|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|      0|                            }?;
  101|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  102|      0|                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|      0|                    }?;
  106|  14.7k|                    if segment.is_child() {
  107|  7.63k|                        Ok(Direct(transition))
  108|       |                    } else {
  109|  7.09k|                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  14.7k|            })

_RNvXsl_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  110|  33.1M|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|   203k|    fn contains(&self, elem: u8) -> bool {
   69|   203k|        if elem < 128 {
   70|   149k|            self.half_1.contains(elem)
   71|       |        } else {
   72|  53.8k|            self.half_2.contains(elem - 128)
   73|       |        }
   74|   203k|    }
_RNvXs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromB8_:
  200|  2.74k|    fn from(arr: [u8; N]) -> Self {
  201|  2.74k|        Self::from_iter(arr)
  202|  2.74k|    }
_RNvXs6_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  258|   740k|    fn next(&mut self) -> Option<Self::Item> {
  259|   740k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  260|   740k|    }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|  91.7k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|  91.7k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|  91.7k|                self.bitmask &= mask;
  162|  91.7k|            }
_RNvXsg_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  177|   922k|            fn next(&mut self) -> Option<Self::Item> {
  178|   922k|                let next_elem = self.bitmask.trailing_zeros();
  179|   922k|
  180|   922k|                if next_elem == $size {
  181|   352k|                    return None;
  182|   569k|                }
  183|   569k|
  184|   569k|                let elem_mask = 1 << next_elem;
  185|   569k|                self.bitmask ^= elem_mask;
  186|   569k|
  187|   569k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|   569k|                Some(next_elem as u8)
  189|   922k|            }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  37.7k|            fn singleton(&self) -> Option<u8> {
  147|  37.7k|                let elem = self.bitmask.trailing_zeros();
  148|  37.7k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  37.7k|                let remainder = self.bitmask ^ elem_mask;
  150|  37.7k|
  151|  37.7k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  37.7k|                (remainder == 0).then_some(elem as u8)
  153|  37.7k|            }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|  91.7k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|  91.7k|        if cutoff < 128 {
  100|  89.1k|            self.half_1.remove_all_before(cutoff)
  101|  2.55k|        } else {
  102|  2.55k|            self.half_1.clear();
  103|  2.55k|            self.half_2.remove_all_before(cutoff - 128);
  104|  2.55k|        }
  105|  91.7k|    }
_RNvXsh_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
  110|  92.5k|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|   259k|    fn insert(&mut self, elem: u8) {
   56|   259k|        if elem < 128 {
   57|   252k|            self.half_1.insert(elem)
   58|       |        } else {
   59|  7.17k|            self.half_2.insert(elem - 128)
   60|       |        }
   61|   259k|    }
_RNCNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0B8_:
   85|    656|            self.half_2.singleton().map(|x| x + 128)
_RINvXs4_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  234|  2.74k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  2.74k|        let mut result = Self::default();
  236|  5.49k|        for elem in iter {
  237|  2.74k|            result.insert(elem);
  238|  2.74k|        }
  239|  2.74k|        result
  240|  2.74k|    }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|   259k|            fn insert(&mut self, elem: u8) {
  129|   259k|                self.bitmask |= 1 << elem;
  130|   259k|            }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_emptyB9_:
  124|  74.9k|            fn is_empty(&self) -> bool {
  125|  74.9k|                self.bitmask == 0
  126|  74.9k|            }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iterB9_:
  140|   341k|            fn iter(&self) -> $iter {
  141|   341k|                $iter {
  142|   341k|                    bitmask: self.bitmask,
  143|   341k|                }
  144|   341k|            }
_RINvXs4_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  234|  38.0k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  235|  38.0k|        let mut result = Self::default();
  236|   100k|        for elem in iter {
  237|  62.1k|            result.insert(elem);
  238|  62.1k|        }
  239|  38.0k|        result
  240|  38.0k|    }
_RNCNvXs6_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  259|   181k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXsb_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   40|  32.4M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|   203k|            fn contains(&self, elem: u8) -> bool {
  137|   203k|                (self.bitmask & (1 << elem)) != 0
  138|   203k|            }
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5unionB9_:
  132|  11.3k|            fn union(&mut self, other: &Self) {
  133|  11.3k|                self.bitmask |= other.bitmask;
  134|  11.3k|            }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE5unionB6_:
   63|  5.65k|    fn union(&mut self, other: &Self) {
   64|  5.65k|        self.half_1.union(&other.half_1);
   65|  5.65k|        self.half_2.union(&other.half_2);
   66|  5.65k|    }
_RNCNCNvXs6_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next00Bd_:
  259|  10.9k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB6_:
   76|   170k|    fn iter(&self) -> SmallSet256Iter {
   77|   170k|        SmallSet256Iter {
   78|   170k|            half_1: self.half_1.iter(),
   79|   170k|            half_2: self.half_2.iter(),
   80|   170k|        }
   81|   170k|    }
_RNvXs7_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   40|  46.2k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5clearB9_:
  155|  2.55k|            fn clear(&mut self) {
  156|  2.55k|                self.bitmask = 0;
  157|  2.55k|            }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  38.0k|    fn singleton(&self) -> Option<u8> {
   84|  38.0k|        if self.half_1.is_empty() {
   85|  1.11k|            self.half_2.singleton().map(|x| x + 128)
   86|  36.9k|        } else if self.half_2.is_empty() {
   87|  36.5k|            self.half_1.singleton()
   88|       |        } else {
   89|    348|            None
   90|       |        }
   91|  38.0k|    }

_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  118|   132k|    pub fn is_accepting(&self) -> bool {
  119|   132k|        self.is_set(StateAttribute::Accepting)
  120|   132k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  143|  24.3k|    pub fn is_unitary(&self) -> bool {
  144|  24.3k|        self.is_set(StateAttribute::Unitary)
  145|  24.3k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes20has_array_transition:
  150|  42.3k|    pub fn has_array_transition(&self) -> bool {
  151|  42.3k|        self.is_set(StateAttribute::HasArrayTransition)
  152|  42.3k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  134|  27.7k|    pub fn has_transition_to_accepting(&self) -> bool {
  135|  27.7k|        self.is_set(StateAttribute::TransitionsToAccepting)
  136|  27.7k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  164|   263k|    fn is_set(&self, attr: StateAttribute) -> bool {
  165|   263k|        (self.0 & attr as u8) != 0
  166|   263k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  126|  27.5k|    pub fn is_rejecting(&self) -> bool {
  127|  27.5k|        self.is_set(StateAttribute::Rejecting)
  128|  27.5k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributes33has_array_transition_to_accepting:
  158|  8.83k|    pub fn has_array_transition_to_accepting(&self) -> bool {
  159|  8.83k|        self.is_set(StateAttribute::HasArrayTransitionToAccepting)
  160|  8.83k|    }
_RNvXsn_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  170|  37.1k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9acceptingB6_:
   43|  5.13k|    pub(crate) fn accepting(self) -> Self {
   44|  5.13k|        self.set(StateAttribute::Accepting)
   45|  5.13k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5buildB6_:
   67|  40.7k|    pub(crate) fn build(self) -> StateAttributes {
   68|  40.7k|        self.attrs
   69|  40.7k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3newB6_:
   37|  40.7k|    pub(crate) fn new() -> Self {
   38|  40.7k|        Self {
   39|  40.7k|            attrs: StateAttributes(0),
   40|  40.7k|        }
   41|  40.7k|    }
_RNvXs_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   80|  40.7k|    fn from(value: StateAttributesBuilder) -> Self {
   81|  40.7k|        value.build()
   82|  40.7k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder7unitaryB6_:
   51|    941|    pub(crate) fn unitary(self) -> Self {
   52|    941|        self.set(StateAttribute::Unitary)
   53|    941|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB6_:
   55|  7.31k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   56|  7.31k|        self.set(StateAttribute::TransitionsToAccepting)
   57|  7.31k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3setB6_:
   71|  43.1k|    fn set(self, attr: StateAttribute) -> Self {
   72|  43.1k|        Self {
   73|  43.1k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   74|  43.1k|        }
   75|  43.1k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejectingB6_:
   47|  2.74k|    pub(crate) fn rejecting(self) -> Self {
   48|  2.74k|        self.set(StateAttribute::Rejecting)
   49|  2.74k|    }
_RNvXsj_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   33|  41.1k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder33has_array_transition_to_acceptingB6_:
   63|  3.69k|    pub(crate) fn has_array_transition_to_accepting(self) -> Self {
   64|  3.69k|        self.set(StateAttribute::HasArrayTransitionToAccepting)
   65|  3.69k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder20has_array_transitionB6_:
   59|  23.3k|    pub(crate) fn has_array_transition(self) -> Self {
   60|  23.3k|        self.set(StateAttribute::HasArrayTransition)
   61|  23.3k|    }
_RNvXsn_NtNtCs7ecOk0g9G9V_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  170|  75.9k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]

_RNvMNtCs7ecOk0g9G9V_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1f_7padding19TwoSidesPaddedInputINtNtNtB4_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2H_5MatchEEKj40_EINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB43_E7get_idxCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   63|  2.93k|    pub(crate) fn get_idx(&self) -> usize {
   64|       |        debug!(
   65|      0|            "iter offset: {}, block idx: {:?}",
   66|      0|            self.iter.get_offset(),
   67|      0|            self.block.as_ref().map(|b| b.idx)
   68|       |        );
   69|       |
   70|  2.93k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   71|  2.93k|    }
_RNCNvMNtCs7ecOk0g9G9V_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1h_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2J_5MatchEEKj40_EINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB45_E7get_idx0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   70|  2.90k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)

_RINvYNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1G_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB38_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   89|    559|    fn resume<'i, I, Q>(
   90|    559|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   91|    559|        opening: BracketType,
   92|    559|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   93|    559|    where
   94|    559|        I: InputBlockIterator<'i, BLOCK_SIZE>,
   95|    559|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   96|    559|    {
   97|    559|        let (first_block, iter) =
   98|    559|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
   99|    559|        DepthIteratorResumeOutcome(first_block, iter)
  100|    559|    }

_RINvNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_648new_avx2RShECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   35|  2.59k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   36|  2.59k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   37|  2.59k|    classifier: &DelimiterClassifierImpl256,
   38|  2.59k|    start_idx: usize,
   39|  2.59k|) -> DepthVector64<'a, B> {
   40|  2.59k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   41|  2.59k|    let (first_block, second_block) = bytes.block.halves();
   42|  2.59k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   43|  2.59k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   44|  2.59k|
   45|  2.59k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   46|  2.59k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   47|  2.59k|
   48|  2.59k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   49|  2.59k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   50|  2.59k|
   51|  2.59k|    DepthVector64 {
   52|  2.59k|        quote_classified: bytes,
   53|  2.59k|        opening_mask,
   54|  2.59k|        closing_mask,
   55|  2.59k|        opening_count: opening_mask.count_ones(),
   56|  2.59k|        depth: 0,
   57|  2.59k|        idx: 0,
   58|  2.59k|        phantom: PhantomData,
   59|  2.59k|    }
   60|  2.59k|}
_RINvNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_6410new_vectorRShECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   17|  2.16k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   18|  2.16k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   19|  2.16k|    classifier: &DelimiterClassifierImpl256,
   20|  2.16k|) -> DepthVector64<'a, B> {
   21|  2.16k|    new_vector_from(bytes, classifier, 0)
   22|  2.16k|}
_RNCNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E6resume0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   14|    554|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1A_7padding19TwoSidesPaddedInputINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB32_5MatchEEKj40_EINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   14|  2.16k|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E4stop0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   14|    559|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   25|  2.59k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   26|  2.59k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   27|  2.59k|    classifier: &DelimiterClassifierImpl256,
   28|  2.59k|    idx: usize,
   29|  2.59k|) -> DepthVector64<'a, B> {
   30|  2.59k|    // SAFETY: target_feature invariant
   31|  2.59k|    unsafe { new_avx2(bytes, classifier, idx) }
   32|  2.59k|}

_RNvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1y_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB30_5MatchEEKj40_EINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   37|  2.16k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   38|  2.16k|                let quote_classified = self.iter.next()?;
   39|  2.16k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   40|  2.16k|            }
_RNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E4stopCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   51|    559|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   52|    559|                let block_state = block.and_then(|b| {
   53|       |                    let idx = b.idx;
   54|       |                    debug!("Depth iterator stopping at index {idx}");
   55|       |                    if idx >= b.quote_classified.len() {
   56|       |                        None
   57|       |                    } else {
   58|       |                        Some(ResumeClassifierBlockState {
   59|       |                            block: b.quote_classified,
   60|       |                            idx,
   61|       |                        })
   62|       |                    }
   63|    559|                });
   64|    559|
   65|    559|                ResumeClassifierState {
   66|    559|                    iter: self.iter,
   67|    559|                    block: block_state,
   68|    559|                    are_commas_on: self.were_commas_on,
   69|    559|                    are_colons_on: self.were_colons_on,
   70|    559|                }
   71|    559|            }
_RNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E6resumeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   74|    559|            fn resume(
   75|    559|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   76|    559|                opening: BracketType,
   77|    559|            ) -> (Option<Self::Block>, Self) {
   78|    559|                let classifier = $core::new(opening);
   79|    559|                let first_block = state.block.and_then(|b| {
   80|       |                    if b.idx == $size {
   81|       |                        None
   82|       |                    } else {
   83|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
   84|       |                    }
   85|    559|                });
   86|    559|
   87|    559|                (
   88|    559|                    first_block,
   89|    559|                    $name {
   90|    559|                        iter: state.iter,
   91|    559|                        classifier,
   92|    559|                        phantom: PhantomData,
   93|    559|                        were_commas_on: state.are_commas_on,
   94|    559|                        were_colons_on: state.are_colons_on,
   95|    559|                    },
   96|    559|                )
   97|    559|            }

_RNvXNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   31|  2.00k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   32|  2.00k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   33|  2.00k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   34|  2.00k|
   35|  2.00k|        if next_closing == SIZE {
   36|    209|            return false;
   37|  1.79k|        }
   38|       |
   39|      0|        bin_u64!("opening_mask", self.opening_mask);
   40|      0|        bin_u64!("closing_mask", self.closing_mask);
   41|       |
   42|  1.79k|        self.opening_mask >>= next_closing;
   43|  1.79k|        self.closing_mask >>= next_closing;
   44|  1.79k|        self.opening_mask >>= 1;
   45|  1.79k|        self.closing_mask >>= 1;
   46|       |
   47|      0|        bin_u64!("new opening_mask", self.opening_mask);
   48|      0|        bin_u64!("new closing_mask", self.closing_mask);
   49|       |
   50|  1.79k|        let new_opening_count = self.opening_mask.count_ones() as i32;
   51|  1.79k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   52|  1.79k|        self.opening_count = new_opening_count as u32;
   53|       |
   54|      0|        debug!("next_closing: {next_closing}");
   55|      0|        debug!("new_opening_count: {new_opening_count}");
   56|      0|        debug!("delta: {delta}");
   57|       |
   58|  1.79k|        self.depth += delta;
   59|  1.79k|        self.idx += next_closing + 1;
   60|  1.79k|
   61|  1.79k|        true
   62|  2.00k|    }
_RNvXNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   76|  2.59k|    fn add_depth(&mut self, depth: isize) {
   77|  2.59k|        self.depth += depth as i32;
   78|  2.59k|    }
_RNvXNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   65|  1.79k|    fn get_depth(&self) -> isize {
   66|  1.79k|        self.depth as isize
   67|  1.79k|    }
_RNvXNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   70|  2.04k|    fn depth_at_end(&self) -> isize {
   71|  2.04k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   72|  2.04k|        (((self.opening_count as i32) - self.closing_mask.count_ones() as i32) + self.depth) as isize
   73|  2.04k|    }
_RNvXNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   81|  2.59k|    fn estimate_lowest_possible_depth(&self) -> isize {
   82|  2.59k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   83|  2.59k|        (self.depth - self.closing_mask.count_ones() as i32) as isize
   84|  2.59k|    }

_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masksCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   34|  5.19k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   35|  5.19k|        assert_eq!(32, bytes.len());
   36|       |        // SAFETY: target_feature invariant
   37|       |        unsafe {
   38|  5.19k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   39|  5.19k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   40|  5.19k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   41|  5.19k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   42|  5.19k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   43|  5.19k|
   44|  5.19k|            (opening_mask, closing_mask)
   45|  5.19k|        }
   46|  5.19k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  5.19k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  5.19k|        _mm256_set1_epi8(self.opening + 2)
   30|  5.19k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  5.19k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  5.19k|        _mm256_set1_epi8(self.opening)
   25|  5.19k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   13|    559|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    559|        let opening = match opening {
   15|     57|            BracketType::Square => b'[',
   16|    502|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    559|        Self { opening: opening as i8 }
   20|    559|    }

_RNvNtNtNtCs7ecOk0g9G9V_8rsonpath14classification4mask3m6410combine_32Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   52|  72.9k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  72.9k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  72.9k|    }
_RINvXNtNtCs7ecOk0g9G9V_8rsonpath14classification4maskyNtB3_4Mask6is_litjECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   11|  2.66k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  2.66k|    where
   13|  2.66k|        Self: Shl<N, Output = Self>,
   14|  2.66k|    {
   15|  2.66k|        (*self & (1 << bit)) != 0
   16|  2.66k|    }

_RNvMs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE15find_label_avx2Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  124|  2.27k|    unsafe fn find_label_avx2(
  125|  2.27k|        &mut self,
  126|  2.27k|        label: &JsonString,
  127|  2.27k|        mut offset: usize,
  128|  2.27k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  129|  2.27k|        if label.unquoted().is_empty() {
  130|  1.50k|            return self.find_empty(label, offset);
  131|    774|        } else if label.unquoted().len() == 1 {
  132|    581|            return self.find_letter(label, offset);
  133|    193|        }
  134|    193|
  135|    193|        let classifier =
  136|    193|            vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], label.unquoted().as_bytes()[1]);
  137|    193|        let mut previous_block: u64 = 0;
  138|       |
  139|  1.55k|        while let Some(block) = self.iter.next().e()? {
  140|  1.44k|            let (block1, block2) = block.halves();
  141|  1.44k|            let classified1 = classifier.classify_block(block1);
  142|  1.44k|            let classified2 = classifier.classify_block(block2);
  143|  1.44k|
  144|  1.44k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  145|  1.44k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  146|       |
  147|     92|            if let Some(res) =
  148|  1.44k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  149|       |            {
  150|     92|                return Ok(Some((res, block)));
  151|  1.35k|            }
  152|  1.35k|
  153|  1.35k|            offset += SIZE;
  154|  1.35k|            previous_block = first_bitmask >> (SIZE - 1);
  155|       |        }
  156|       |
  157|    101|        Ok(None)
  158|  2.27k|    }
_RNvMs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE11find_letterCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   94|    581|    unsafe fn find_letter(
   95|    581|        &mut self,
   96|    581|        label: &JsonString,
   97|    581|        mut offset: usize,
   98|    581|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   99|    581|        let classifier = vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], b'"');
  100|    581|        let mut previous_block: u64 = 0;
  101|       |
  102|  2.06k|        while let Some(block) = self.iter.next().e()? {
  103|  1.94k|            let (block1, block2) = block.halves();
  104|  1.94k|            let classified1 = classifier.classify_block(block1);
  105|  1.94k|            let classified2 = classifier.classify_block(block2);
  106|  1.94k|
  107|  1.94k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  108|  1.94k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  109|       |
  110|    462|            if let Some(res) =
  111|  1.94k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  112|       |            {
  113|    462|                return Ok(Some((res, block)));
  114|  1.48k|            }
  115|  1.48k|
  116|  1.48k|            offset += SIZE;
  117|  1.48k|            previous_block = first_bitmask >> (SIZE - 1);
  118|       |        }
  119|       |
  120|    119|        Ok(None)
  121|    581|    }
_RINvXNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   19|  5.30k|    fn memmem<'i, 'b, 'r, I, R>(
   20|  5.30k|        input: &'i I,
   21|  5.30k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
   22|  5.30k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   23|  5.30k|    where
   24|  5.30k|        I: Input,
   25|  5.30k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
   26|  5.30k|        'i: 'r,
   27|  5.30k|    {
   28|  5.30k|        Self::Classifier { input, iter }
   29|  5.30k|    }
_RNvMs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE10find_emptyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   54|  1.50k|    unsafe fn find_empty(
   55|  1.50k|        &mut self,
   56|  1.50k|        label: &JsonString,
   57|  1.50k|        mut offset: usize,
   58|  1.50k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   59|  1.50k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   60|  1.50k|        let mut previous_block: u64 = 0;
   61|       |
   62|  4.12k|        while let Some(block) = self.iter.next().e()? {
   63|  3.70k|            let (block1, block2) = block.halves();
   64|  3.70k|            let classified1 = classifier.classify_block(block1);
   65|  3.70k|            let classified2 = classifier.classify_block(block2);
   66|  3.70k|
   67|  3.70k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   68|  3.70k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   69|  3.70k|
   70|  3.70k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   71|  4.52k|            while result != 0 {
   72|  1.89k|                let idx = result.trailing_zeros() as usize;
   73|  1.89k|                if self
   74|  1.89k|                    .input
   75|  1.89k|                    .is_member_match(offset + idx - 1, offset + idx + 1, label)
   76|  1.89k|                    .e()?
   77|       |                {
   78|  1.07k|                    return Ok(Some((offset + idx - 1, block)));
   79|    817|                }
   80|    817|                result &= !(1 << idx);
   81|       |            }
   82|       |
   83|  2.62k|            offset += SIZE;
   84|  2.62k|            previous_block = first_bitmask >> (SIZE - 1);
   85|       |        }
   86|       |
   87|    423|        Ok(None)
   88|  1.50k|    }
_RNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2f_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  168|  5.30k|    fn find_label(
  169|  5.30k|        &mut self,
  170|  5.30k|        first_block: Option<I::Block<'i, SIZE>>,
  171|  5.30k|        start_idx: usize,
  172|  5.30k|        label: &JsonString,
  173|  5.30k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  174|  5.30k|        if let Some(b) = first_block {
  175|  4.37k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  176|  3.02k|                return Ok(Some(res));
  177|  1.34k|            }
  178|    931|        }
  179|  2.27k|        let next_block_offset = self.iter.get_offset();
  180|  2.27k|        // SAFETY: target feature invariant
  181|  2.27k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  182|  5.30k|    }

_RINvNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input8borrowed13BorrowedBytesKj40_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   16|  4.37k|pub(crate) fn find_label_in_first_block<'i, 'r, I, const N: usize>(
   17|  4.37k|    input: &I,
   18|  4.37k|    first_block: I::Block<'i, N>,
   19|  4.37k|    start_idx: usize,
   20|  4.37k|    label: &JsonString,
   21|  4.37k|) -> Result<Option<(usize, I::Block<'i, N>)>, InputError>
   22|  4.37k|where
   23|  4.37k|    I: Input,
   24|  4.37k|    'i: 'r,
   25|  4.37k|{
   26|  4.37k|    let block_idx = start_idx % N;
   27|  4.37k|    let label_size = label.quoted().len();
   28|       |
   29|  75.5k|    for (i, c) in first_block[block_idx..].iter().copied().enumerate() {
   30|  75.5k|        let j = start_idx + i;
   31|  75.5k|
   32|  75.5k|        if c == b'"' && input.is_member_match(j, j + label_size, label).e()? {
   33|  3.02k|            return Ok(Some((j, first_block)));
   34|  72.4k|        }
   35|       |    }
   36|       |
   37|  1.34k|    Ok(None)
   38|  4.37k|}

_RINvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input8borrowed13BorrowedBytesECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   11|  3.39k|pub(crate) fn find_in_mask<I: Input>(
   12|  3.39k|    input: &I,
   13|  3.39k|    label: &JsonString,
   14|  3.39k|    previous_block: u64,
   15|  3.39k|    first: u64,
   16|  3.39k|    second: u64,
   17|  3.39k|    offset: usize,
   18|  3.39k|) -> Result<Option<usize>, InputError> {
   19|  3.39k|    let label_size = label.quoted().len();
   20|  3.39k|    let mut result = (previous_block | (first << 1)) & second;
   21|  8.36k|    while result != 0 {
   22|  5.52k|        let idx = result.trailing_zeros() as usize;
   23|      0|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   24|  5.52k|        if offset + idx > 1
   25|  5.51k|            && input
   26|  5.51k|                .is_member_match(offset + idx - 2, offset + idx + label_size - 2, label)
   27|  5.51k|                .e()?
   28|       |        {
   29|    554|            return Ok(Some(offset + idx - 2));
   30|  4.97k|        }
   31|  4.97k|        result &= !(1 << idx);
   32|       |    }
   33|  2.84k|    Ok(None)
   34|  3.39k|}

_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  2.27k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  2.27k|        Self {
   15|  2.27k|            first: _mm256_set1_epi8(first as i8),
   16|  2.27k|            second: _mm256_set1_epi8(second as i8),
   17|  2.27k|        }
   18|  2.27k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  14.2k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  14.2k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  14.2k|
   24|  14.2k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  14.2k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  14.2k|
   27|  14.2k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  14.2k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  14.2k|
   30|  14.2k|        BlockClassification256 { first, second }
   31|  14.2k|    }

_RNvMNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotesINtB2_20QuoteClassifiedBlockRShyKj40_E3lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   85|    559|    pub fn len(&self) -> usize {
   86|    559|        self.block.len()
   87|    559|    }

_RNCINvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1Q_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3i_5MatchEEKj40_EE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
    8|  2.66k|super::shared::quote_classifier!(Avx2QuoteClassifier64, BlockAvx2Classifier, 64, u64);
_RINvMNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   22|  16.6k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  16.6k|        block!(blocks[..64]);
   24|       |
   25|  16.6k|        let (block1, block2) = blocks.halves();
   26|  16.6k|        let classification1 = vector_256::classify_block(block1);
   27|  16.6k|        let classification2 = vector_256::classify_block(block2);
   28|  16.6k|
   29|  16.6k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  16.6k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  16.6k|
   32|  16.6k|        self.internal_classifier.classify(slashes, quotes)
   33|  16.6k|    }
_RNvMNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   15|  3.66k|    fn new() -> Self {
   16|  3.66k|        Self {
   17|  3.66k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  3.66k|        }
   19|  3.66k|    }

_RNvXs1_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E6offsetCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  105|    282|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  106|    282|                debug_assert!(count > 0);
  107|      0|                debug!("Offsetting by {count}");
  108|       |
  109|    282|                for _ in 0..count - 1 {
  110|    120|                    self.iter.next().e()?;
  111|       |                }
  112|       |
  113|    282|                self.next()
  114|    282|            }
_RNvXs1_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E15flip_quotes_bitCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  117|  1.20k|            fn flip_quotes_bit(&mut self) {
  118|  1.20k|                self.classifier.internal_classifier.flip_prev_quote_mask();
  119|  1.20k|            }
_RINvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1O_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3g_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   33|  2.66k|            fn resume<'i, I>(
   34|  2.66k|                iter: I,
   35|  2.66k|                first_block: Option<I::Block>,
   36|  2.66k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   37|  2.66k|            where
   38|  2.66k|                I: InputBlockIterator<'i, $size>,
   39|  2.66k|            {
   40|  2.66k|                let mut s = Self::Classifier {
   41|  2.66k|                    iter,
   42|  2.66k|                    classifier: $core::new(),
   43|  2.66k|                    phantom: PhantomData,
   44|  2.66k|                };
   45|  2.66k|
   46|  2.66k|                let block = first_block.map(|b| {
   47|       |                    // SAFETY: target feature invariant
   48|       |                    let mask = unsafe { s.classifier.classify(&b) };
   49|       |                    QuoteClassifiedBlock {
   50|       |                        block: b,
   51|       |                        within_quotes_mask: mask,
   52|       |                    }
   53|  2.66k|                });
   54|  2.66k|
   55|  2.66k|                ResumedQuoteClassifier {
   56|  2.66k|                    classifier: s,
   57|  2.66k|                    first_block: block,
   58|  2.66k|                }
   59|  2.66k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_9InnerIterB1w_E10into_innerCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  126|  2.37k|            fn into_inner(self) -> I {
  127|  2.37k|                self.iter
  128|  2.37k|            }
_RNvXs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   79|  14.4k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  14.4k|                match self.iter.next().e()? {
   81|  13.9k|                    Some(block) => {
   82|  13.9k|                        // SAFETY: target_feature invariant
   83|  13.9k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  13.9k|                        let classified_block = QuoteClassifiedBlock {
   85|  13.9k|                            block,
   86|  13.9k|                            within_quotes_mask: mask,
   87|  13.9k|                        };
   88|  13.9k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    479|                    None => Ok(None),
   91|       |                }
   92|  14.4k|            }
_RNvXs1_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  100|   104k|            fn get_offset(&self) -> usize {
  101|   104k|                self.iter.get_offset() - $size
  102|   104k|            }
_RINvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3d_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   20|    995|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|    995|            where
   22|    995|                I: InputBlockIterator<'i, $size>,
   23|    995|            {
   24|    995|                Self::Classifier {
   25|    995|                    iter,
   26|    995|                    classifier: $core::new(),
   27|    995|                    phantom: PhantomData,
   28|    995|                }
   29|    995|            }

_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   26|  3.66k|    pub(crate) fn new() -> Self {
   27|  3.66k|        Self { prev_block_mask: 0 }
   28|  3.66k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   38|  1.20k|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|  1.20k|        self.prev_block_mask ^= 0x02;
   40|  1.20k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  16.6k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  16.6k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  16.6k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  26.1k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  26.1k|        u64::from(self.prev_block_mask & 0x01)
   46|  26.1k|    }
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  16.6k|unsafe fn all_ones128() -> __m128i {
   14|  16.6k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  16.6k|}
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  16.6k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  16.6k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  7.18k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  9.46k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  9.46k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  9.46k|            let odd_starts = ODD & starts;
   62|  9.46k|            let even_starts = EVEN & starts;
   63|  9.46k|
   64|  9.46k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  9.46k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  9.46k|
   67|  9.46k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  9.46k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  9.46k|
   70|  9.46k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  9.46k|
   72|  9.46k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  16.6k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  16.6k|
   77|  16.6k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  16.6k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  16.6k|
   80|  16.6k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  16.6k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  16.6k|        within_quotes
   93|  16.6k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  16.6k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  16.6k|        let slash_mask = u8::from(set_slash_mask);
   33|  16.6k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  16.6k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  16.6k|    }

_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  33.2k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  33.2k|    _mm256_set1_epi8(b'\\' as i8)
   14|  33.2k|}
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  33.2k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  33.2k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  33.2k|
   20|  33.2k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  33.2k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  33.2k|
   23|  33.2k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  33.2k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  33.2k|
   26|  33.2k|    BlockClassification256 { slashes, quotes }
   27|  33.2k|}
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  33.2k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  33.2k|    _mm256_set1_epi8(b'"' as i8)
    9|  33.2k|}

_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  413|    559|    fn resume_depth_classification<'i, I>(
  414|    559|        self,
  415|    559|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  416|    559|        opening: BracketType,
  417|    559|    ) -> DepthIteratorResumeOutcome<
  418|    559|        'i,
  419|    559|        I,
  420|    559|        Self::QuotesClassifier<'i, I>,
  421|    559|        Self::DepthClassifier<'i, I>,
  422|    559|        MaskType,
  423|    559|        BLOCK_SIZE,
  424|    559|    >
  425|    559|    where
  426|    559|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  427|    559|    {
  428|    559|        D::resume(state, opening)
  429|    559|    }
_RNvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  366|  3.58k|    fn dispatch_tag(self) -> usize {
  367|  3.58k|        TARGET
  368|  3.58k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  479|  1.92k|    pub(crate) fn fast_popcnt(&self) -> bool {
  480|  1.92k|        self.fast_popcnt
  481|  1.92k|    }
_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd6memmemNtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4I_5MatchEEECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  432|  5.30k|    fn memmem<'i, 'b, 'r, I, R>(
  433|  5.30k|        self,
  434|  5.30k|        input: &'i I,
  435|  5.30k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
  436|  5.30k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  437|  5.30k|    where
  438|  5.30k|        I: Input,
  439|  5.30k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
  440|  5.30k|        'i: 'r,
  441|  5.30k|    {
  442|  5.30k|        M::memmem(input, iter)
  443|  5.30k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  334|  1.92k|    pub(crate) fn new() -> Self {
  335|  1.92k|        Self { phantom: PhantomData }
  336|  1.92k|    }
_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  379|  2.66k|    fn resume_quote_classification<'i, I>(
  380|  2.66k|        self,
  381|  2.66k|        iter: I,
  382|  2.66k|        first_block: Option<I::Block>,
  383|  2.66k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  384|  2.66k|    where
  385|  2.66k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  386|  2.66k|    {
  387|  2.66k|        Q::resume(iter, first_block)
  388|  2.66k|    }
_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  391|    995|    fn classify_structural_characters<'i, I>(
  392|    995|        self,
  393|    995|        iter: Self::QuotesClassifier<'i, I>,
  394|    995|    ) -> Self::StructuralClassifier<'i, I>
  395|    995|    where
  396|    995|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  397|    995|    {
  398|    995|        S::new(iter)
  399|    995|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  475|  1.92k|    pub(crate) fn fast_quotes(&self) -> bool {
  476|  1.92k|        self.fast_quotes
  477|  1.92k|    }
_RNvNtNtCs7ecOk0g9G9V_8rsonpath14classification4simd9configureCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  533|  2.68k|pub(crate) fn configure() -> SimdConfiguration {
  534|  2.68k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  535|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  536|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  537|  2.68k|    }
  538|       |
  539|       |    cfg_if! {
  540|       |        if #[cfg(not(feature = "simd"))]
  541|       |        {
  542|       |            let highest_simd = SimdTag::Nosimd;
  543|       |            let fast_quotes = false;
  544|       |            let fast_popcnt = false;
  545|       |        }
  546|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  547|       |        {
  548|  2.68k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  549|  2.68k|                SimdTag::Avx2
  550|      0|            } else if is_x86_feature_detected!("ssse3") {
  551|      0|                SimdTag::Ssse3
  552|      0|            } else if is_x86_feature_detected!("sse2") {
  553|      0|                SimdTag::Sse2
  554|       |            } else {
  555|      0|                SimdTag::Nosimd
  556|       |            };
  557|       |
  558|  2.68k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  559|  2.68k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  560|       |        }
  561|       |        else
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |    }
  568|       |
  569|  2.68k|    SimdConfiguration {
  570|  2.68k|        highest_simd,
  571|  2.68k|        fast_quotes,
  572|  2.68k|        fast_popcnt,
  573|  2.68k|    }
  574|  2.68k|}
_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4w_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5Y_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  402|  3.00k|    fn resume_structural_classification<'i, I>(
  403|  3.00k|        self,
  404|  3.00k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  405|  3.00k|    ) -> Self::StructuralClassifier<'i, I>
  406|  3.00k|    where
  407|  3.00k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  408|  3.00k|    {
  409|  3.00k|        S::resume(state)
  410|  3.00k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  471|  1.92k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  472|  1.92k|        self.highest_simd
  473|  1.92k|    }
_RINvXs1_NtNtCs7ecOk0g9G9V_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5R_5MatchEEKj40_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  371|    995|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  372|    995|    where
  373|    995|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  374|    995|    {
  375|    995|        Q::new(iter)
  376|    995|    }

_RNvMNtNtCs7ecOk0g9G9V_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|  1.33k|    pub fn idx(self) -> usize {
   50|  1.33k|        match self {
   51|  1.33k|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|  1.33k|        }
   53|  1.33k|    }
_RNvXs5_NtNtCs7ecOk0g9G9V_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   21|  70.7k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  97.8k|    pub fn offset(self, amount: usize) -> Self {
   70|  97.8k|        match self {
   71|  26.3k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  19.5k|            Colon(idx) => Colon(idx + amount),
   73|  35.5k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  16.3k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  97.8k|    }
_RINvYNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1S_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3k_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  195|  3.00k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  3.00k|    where
  197|  3.00k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  3.00k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  3.00k|    {
  200|  3.00k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  3.00k|    }

_RNCNCNvXs1_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   13|  97.8k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RINvMNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   28|  20.2k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  20.2k|        &mut self,
   30|  20.2k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  20.2k|    ) -> mask_64::StructuralsBlock<B> {
   32|  20.2k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  20.2k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  20.2k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  20.2k|
   36|  20.2k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  20.2k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|       |
   39|      0|        bin_u64!("structural", structural);
   40|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|       |
   42|  20.2k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  20.2k|    }
_RNCNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E6resume0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   13|  2.96k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E4stop0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   13|  2.70k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  3.99k|    fn new() -> Self {
   21|  3.99k|        Self {
   22|  3.99k|            // SAFETY: target feature invariant
   23|  3.99k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  3.99k|        }
   25|  3.99k|    }

_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  145|  28.4k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  28.4k|                if !self.are_commas_on {
  147|  1.83k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  1.83k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  1.83k|
  152|  1.83k|                    self.reclassify(idx);
  153|  26.5k|                }
  154|  28.4k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E26turn_colons_and_commas_offCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  130|  8.86k|            fn turn_colons_and_commas_off(&mut self) {
  131|  8.86k|                if self.are_commas_on && self.are_colons_on {
  132|    748|                    self.are_commas_on = false;
  133|    748|                    self.are_colons_on = false;
  134|      0|                    debug!("Turning both commas and colons off.");
  135|       |                    // SAFETY: target_feature invariant
  136|    748|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  137|  8.11k|                } else if self.are_commas_on {
  138|    772|                    self.turn_commas_off();
  139|  7.34k|                } else if self.are_colons_on {
  140|    688|                    self.turn_colons_off();
  141|  6.65k|                }
  142|  8.86k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  167|  2.14k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  2.14k|                if !self.are_colons_on {
  169|  2.14k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  2.14k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  2.14k|
  174|  2.14k|                    self.reclassify(idx);
  175|      0|                }
  176|  2.14k|            }
_RNvXs1_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   85|  98.2k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   109k|                while self.current_block_is_spent() {
   87|  12.0k|                    match self.iter.next() {
   88|  11.5k|                        Ok(Some(block)) => {
   89|  11.5k|                            // SAFETY: target_feature invariant
   90|  11.5k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  11.5k|                        }
   92|       |                        Ok(None) => {
   93|    479|                            self.block = None;
   94|    479|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|  98.2k|                Ok(self
  101|  98.2k|                    .block
  102|  98.2k|                    .as_mut()
  103|  98.2k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|  98.2k|            }
_RINvXs_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   21|    995|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|    995|            where
   23|    995|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|    995|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|    995|            {
   26|    995|                Self::Classifier {
   27|    995|                    iter,
   28|    995|                    classifier: $core::new(),
   29|    995|                    block: None,
   30|    995|                    are_commas_on: false,
   31|    995|                    are_colons_on: false,
   32|    995|                }
   33|    995|            }
_RNvMs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   56|  5.81k|            fn reclassify(&mut self, idx: usize) {
   57|  5.81k|                if let Some(block) = self.block.take() {
   58|  5.81k|                    let quote_classified_block = block.quote_classified;
   59|  5.81k|                    let relevant_idx = idx + 1;
   60|  5.81k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  5.81k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  5.73k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  5.73k|                        // SAFETY: target_feature invariant
   68|  5.73k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  5.73k|                        new_block.structural_mask &= mask;
   70|  5.73k|                        self.block = Some(new_block);
   71|     85|                    }
   72|      4|                }
   73|  5.81k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E4stopCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  189|  2.71k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  190|  2.71k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  191|       |                    idx: b.get_idx() as usize,
  192|       |                    block: b.quote_classified,
  193|  2.71k|                });
  194|  2.71k|
  195|  2.71k|                ResumeClassifierState {
  196|  2.71k|                    iter: self.iter,
  197|  2.71k|                    block,
  198|  2.71k|                    are_commas_on: self.are_commas_on,
  199|  2.71k|                    are_colons_on: self.are_colons_on,
  200|  2.71k|                }
  201|  2.71k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E6resumeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  204|  3.00k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  205|  3.00k|                let mut classifier = $core::new();
  206|  3.00k|
  207|  3.00k|                // SAFETY: target_feature invariant
  208|  3.00k|                unsafe {
  209|  3.00k|                    if state.are_commas_on && state.are_colons_on {
  210|    120|                        classifier.internal_classifier.toggle_colons_and_commas();
  211|    120|                    } else {
  212|  2.88k|                        if state.are_commas_on {
  213|  2.32k|                            classifier.internal_classifier.toggle_commas();
  214|  2.32k|                        }
  215|  2.88k|                        if state.are_colons_on {
  216|     42|                            classifier.internal_classifier.toggle_colons();
  217|  2.83k|                        }
  218|       |                    }
  219|       |                }
  220|       |
  221|  3.00k|                let block = state.block.map(|b| {
  222|       |                    // SAFETY: target_feature invariant
  223|       |                    let mut block = unsafe { classifier.classify(b.block) };
  224|       |                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  225|       |                    block.structural_mask &= idx_mask;
  226|       |
  227|       |                    block
  228|  3.00k|                });
  229|  3.00k|
  230|  3.00k|                Self {
  231|  3.00k|                    iter: state.iter,
  232|  3.00k|                    block,
  233|  3.00k|                    classifier,
  234|  3.00k|                    are_commas_on: state.are_commas_on,
  235|  3.00k|                    are_colons_on: state.are_colons_on,
  236|  3.00k|                }
  237|  3.00k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  179|  19.9k|            fn turn_colons_off(&mut self) {
  180|  19.9k|                if self.are_colons_on {
  181|  2.06k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  2.06k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  17.9k|                }
  186|  19.9k|            }
_RNvMs0_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   49|   109k|            fn current_block_is_spent(&self) -> bool {
   50|   109k|                self.block
   51|   109k|                    .as_ref()
   52|   109k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   109k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  113|  18.5k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  18.5k|                if !self.are_commas_on && !self.are_colons_on {
  115|  1.84k|                    self.are_commas_on = true;
  116|  1.84k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  1.84k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  1.84k|
  121|  1.84k|                    self.reclassify(idx);
  122|  16.7k|                } else if !self.are_commas_on {
  123|    825|                    self.turn_commas_on(idx);
  124|  15.9k|                } else if !self.are_colons_on {
  125|  2.14k|                    self.turn_colons_on(idx);
  126|  13.7k|                }
  127|  18.5k|            }
_RNvXs2_NtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  157|  4.52k|            fn turn_commas_off(&mut self) {
  158|  4.52k|                if self.are_commas_on {
  159|  2.35k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  2.35k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|  2.17k|                }
  164|  4.52k|            }

_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   29|   100k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   100k|        self.structural_mask.trailing_zeros()
   31|   100k|    }
_RNCNvXs_NtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
   40|  97.8k|        (idx < SIZE).then(|| {
   41|  97.8k|            let bit_mask = 1 << idx;
   42|  97.8k|
   43|  97.8k|            self.structural_mask ^= bit_mask;
   44|  97.8k|
   45|  97.8k|            // The last match being a catch-all *is important*.
   46|  97.8k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  97.8k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  97.8k|            match self.quote_classified.block[idx] {
   49|  19.5k|                b':' => Structural::Colon(idx),
   50|  16.7k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  18.8k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  16.3k|                b',' => Structural::Comma(idx),
   53|  11.9k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  14.3k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  97.8k|        })
_RNvXs_NtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   38|  97.8k|    fn next(&mut self) -> Option<Structural> {
   39|  97.8k|        let idx = self.get_idx() as usize;
   40|  97.8k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  97.8k|        })
   57|  97.8k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   24|   108k|    pub(crate) fn is_empty(&self) -> bool {
   25|   108k|        self.structural_mask == 0
   26|   108k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   16|  20.2k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  20.2k|        Self {
   18|  20.2k|            quote_classified: block,
   19|  20.2k|            structural_mask,
   20|  20.2k|        }
   21|  20.2k|    }

_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   49|  6.95k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  6.95k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  6.95k|}
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   43|  9.22k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  9.22k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  9.22k|}
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   92|  40.4k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  40.4k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  40.4k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  40.4k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  40.4k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  40.4k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  40.4k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  40.4k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  40.4k|
  101|  40.4k|        BlockClassification256 { structural }
  102|  40.4k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   86|  2.70k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  2.70k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  2.70k|    }
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   80|  4.24k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  4.24k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  4.24k|    }
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   25|  40.4k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  40.4k|    _mm256_set1_epi8(0x0F)
   27|  40.4k|}
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   55|  2.70k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  2.70k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  2.70k|}
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   74|  6.51k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  6.51k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  6.51k|    }
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   31|  40.4k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  40.4k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  40.4k|}
_RNvNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  3.99k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  3.99k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  3.99k|}
_RNvMNtNtNtNtCs7ecOk0g9G9V_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  3.99k|    pub(crate) unsafe fn new() -> Self {
   67|  3.99k|        Self {
   68|  3.99k|            upper_nibble_mask: upper_nibble_mask(),
   69|  3.99k|        }
   70|  3.99k|    }

_RNvXs6_NtCs7ecOk0g9G9V_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsdv3Cd29mJmf_19fuzz_arbitrary_json:
    9|  74.1k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs9_NtCs7ecOk0g9G9V_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCsdv3Cd29mJmf_19fuzz_arbitrary_json:
    9|  40.9k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs7ecOk0g9G9V_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   80|  54.4k|    fn deref(&self) -> &Self::Target {
   81|  54.4k|        &self.0
   82|  54.4k|    }
_RNvMNtCs7ecOk0g9G9V_8rsonpath5depthNtB2_5Depth9decrement:
   28|  26.3k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  26.3k|        *self = (*self - 1)?;
   30|  26.3k|        Ok(())
   31|  26.3k|    }
_RNvMNtCs7ecOk0g9G9V_8rsonpath5depthNtB2_5Depth9increment:
   21|  36.3k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  36.3k|        *self = (*self + 1)?;
   23|  36.3k|        Ok(())
   24|  36.3k|    }
_RNvXsc_NtCs7ecOk0g9G9V_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  36.3k|            fn add(self, rhs: u8) -> Self::Output {
   41|  36.3k|                self.0
   42|  36.3k|                    .checked_add(rhs)
   43|  36.3k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  36.3k|                    .map(Depth)
   45|  36.3k|            }
_RNvXsf_NtCs7ecOk0g9G9V_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  26.3k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  26.3k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  26.3k|            }

_RINvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB5_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2D_6quotes7avx2_6411ConstructorNtNtNtB2D_10structural7avx2_6411ConstructorNtNtNtB2D_5depth7avx2_6411ConstructorNtNtNtB2D_6memmem7avx2_6411ConstructorKj1_EINtNtB7_4main8ExecutorB1V_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6n_5MatchEEB2y_EB6i_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  134|    930|        {
  135|    930|            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|    930|            let mut idx = 0;
  137|    930|            let mut first_block = None;
  138|       |
  139|  5.30k|            loop {
  140|  5.30k|                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|      0|                debug!("Starting memmem search from {idx}");
  142|       |
  143|  5.30k|                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|  4.66k|                    drop(memmem);
  145|  4.66k|
  146|  4.66k|                    first_block = Some(last_block);
  147|  4.66k|                    idx = starting_quote_idx;
  148|      0|                    debug!("Needle found at {idx}");
  149|  4.66k|                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|  4.66k|
  151|  4.66k|                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|  2.66k|                    Some((colon_idx, b':')) => {
  153|  2.66k|                        let (next_idx, next_c) = head_skip
  154|  2.66k|                            .bytes
  155|  2.66k|                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|  2.66k|                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|  2.66k|                                classifier: quote_classifier,
  160|  2.66k|                                first_block: quote_classified_first_block,
  161|  2.66k|                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|  2.66k|
  163|  2.66k|                            // Temporarily set the index within the current block to zero.
  164|  2.66k|                            // This makes sense for the move below.
  165|  2.66k|                            let mut classifier_state = ResumeClassifierState {
  166|  2.66k|                                iter: quote_classifier,
  167|  2.66k|                                block: quote_classified_first_block
  168|  2.66k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|  2.66k|                                are_colons_on: false,
  170|  2.66k|                                are_commas_on: head_skip.is_accepting,
  171|  2.66k|                            };
  172|       |
  173|      0|                            debug!("Actual match with colon at {colon_idx}");
  174|      0|                            debug!("Next significant character at {next_idx}");
  175|      0|                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|      0|                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|  2.66k|                            if next_c == b'{' || next_c == b'[' {
  185|  1.09k|                                forward_to(&mut classifier_state, next_idx)?;
  186|  1.09k|                                if head_skip.is_accepting {
  187|    883|                                    engine.recorder().record_match(
  188|    883|                                        next_idx,
  189|    883|                                        Depth::ZERO,
  190|    883|                                        crate::result::MatchedNodeType::Complex,
  191|    883|                                    )?;
  192|    216|                                }
  193|  1.09k|                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|  1.56k|                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|  2.66k|                            if let Some(block) = classifier_state.block.as_mut() {
  206|  2.66k|                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|  2.66k|                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|      0|                                    debug!("Mask needs flipping!");
  209|  1.20k|                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|  1.20k|                                    classifier_state.iter.flip_quotes_bit();
  211|  1.45k|                                }
  212|      0|                            }
  213|       |
  214|  2.37k|                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|      0|                                    debug!("resuming");
  217|  1.09k|                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|  1.09k|                                    engine
  219|  1.09k|                                        .run_on_subtree(
  220|  1.09k|                                            Structural::Opening(
  221|  1.09k|                                                if next_c == b'{' {
  222|    938|                                                    BracketType::Curly
  223|       |                                                } else {
  224|    161|                                                    BracketType::Square
  225|       |                                                },
  226|  1.09k|                                                next_idx,
  227|  1.09k|                                            ),
  228|  1.09k|                                            head_skip.state,
  229|  1.09k|                                            classifier,
  230|    283|                                        )?
  231|       |                                        .0
  232|       |                                }
  233|  1.34k|                                _ if head_skip.is_accepting => {
  234|  1.34k|                                    engine.recorder().record_match(
  235|  1.34k|                                        next_idx,
  236|  1.34k|                                        Depth::ZERO,
  237|  1.34k|                                        crate::result::MatchedNodeType::Atomic,
  238|  1.34k|                                    )?;
  239|  1.34k|                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|  1.34k|                                    let next_structural = classifier.next()?;
  241|       |
  242|  1.34k|                                    match next_structural {
  243|  1.33k|                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|      4|                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|  1.33k|                                    classifier.stop()
  247|       |                                }
  248|    224|                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|      0|                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|  2.37k|                            idx = classifier_state.get_idx();
  253|  2.37k|
  254|  2.37k|                            first_block = classifier_state.block.map(|b| b.block.block);
  255|  2.37k|                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|  1.99k|                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|      0|                    debug!("No memmem matches, exiting");
  261|    643|                    break;
  262|    643|                }
  263|    643|            }
  264|    643|
  265|    643|            return Ok(());
_RINvNvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2e_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3G_5MatchEEKB1c_EINtNtNtNtBb_14classification6quotes7avx2_6421Avx2QuoteClassifier64B29_EyKB1c_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  277|  3.76k|            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|  3.76k|            where
  279|  3.76k|                I: InputBlockIterator<'i, N>,
  280|  3.76k|                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|  3.76k|            {
  282|  3.76k|                let current_block_start = state.iter.get_offset();
  283|  3.76k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|  3.76k|                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|      0|                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|  3.76k|                assert!(index > current_idx);
  292|  3.76k|                let delta = index - current_idx;
  293|  3.76k|
  294|  3.76k|                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|  3.76k|                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|  3.76k|                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|  3.76k|                let remaining = delta + current_block_idx;
  298|  3.76k|                let blocks_to_skip = remaining / N;
  299|  3.76k|                let remainder = remaining % N;
  300|  3.76k|
  301|  3.76k|                match state.block.as_mut() {
  302|  3.76k|                    Some(b) if blocks_to_skip == 0 => {
  303|  3.48k|                        b.idx = remaining;
  304|  3.48k|                    }
  305|    282|                    Some(_) => {
  306|    282|                        state.block = state
  307|    282|                            .iter
  308|    282|                            .offset(blocks_to_skip as isize)?
  309|    282|                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|    282|                            });
  313|       |                    }
  314|      0|                    None => {
  315|      0|                        state.block = state
  316|      0|                            .iter
  317|      0|                            .offset((blocks_to_skip + 1) as isize)?
  318|      0|                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|      0|                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|      0|                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|  3.76k|                Ok(())
  328|  3.76k|            }
_RNCINvNvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_Es_0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  309|    282|                            .map(|b| ResumeClassifierBlockState {
  310|    282|                                block: b,
  311|    282|                                idx: remainder,
  312|    282|                            });
_RINvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input8borrowed13BorrowedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1N_6quotes7avx2_6411ConstructorNtNtNtB1N_10structural7avx2_6411ConstructorNtNtNtB1N_5depth7avx2_6411ConstructorNtNtNtB1N_6memmem7avx2_6411ConstructorKj1_EKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEB1I_EB5R_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  120|    930|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  121|    930|    where
  122|    930|        'b: 'r,
  123|    930|        E: CanHeadSkip<'b, 'r, I, R, V>,
  124|    930|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  125|    930|    {
  126|    930|        dispatch_simd!(self.simd; self, engine =>
  127|       |        fn<'b, 'q, 'r, I, V, E, R>(head_skip: &HeadSkip<'b, 'q, I, V, BLOCK_SIZE>, engine: &mut E) -> Result<(), EngineError>
  128|       |        where
  129|       |            'b: 'r,
  130|       |            E: CanHeadSkip<'b, 'r, I, R, V>,
  131|       |            R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  132|       |            I: Input,
  133|       |            V: Simd
  134|       |        {
  135|       |            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|       |            let mut idx = 0;
  137|       |            let mut first_block = None;
  138|       |
  139|       |            loop {
  140|       |                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|       |                debug!("Starting memmem search from {idx}");
  142|       |
  143|       |                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|       |                    drop(memmem);
  145|       |
  146|       |                    first_block = Some(last_block);
  147|       |                    idx = starting_quote_idx;
  148|       |                    debug!("Needle found at {idx}");
  149|       |                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|       |
  151|       |                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|       |                    Some((colon_idx, b':')) => {
  153|       |                        let (next_idx, next_c) = head_skip
  154|       |                            .bytes
  155|       |                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|       |                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|       |                                classifier: quote_classifier,
  160|       |                                first_block: quote_classified_first_block,
  161|       |                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|       |
  163|       |                            // Temporarily set the index within the current block to zero.
  164|       |                            // This makes sense for the move below.
  165|       |                            let mut classifier_state = ResumeClassifierState {
  166|       |                                iter: quote_classifier,
  167|       |                                block: quote_classified_first_block
  168|       |                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|       |                                are_colons_on: false,
  170|       |                                are_commas_on: head_skip.is_accepting,
  171|       |                            };
  172|       |
  173|       |                            debug!("Actual match with colon at {colon_idx}");
  174|       |                            debug!("Next significant character at {next_idx}");
  175|       |                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|       |                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|       |                            if next_c == b'{' || next_c == b'[' {
  185|       |                                forward_to(&mut classifier_state, next_idx)?;
  186|       |                                if head_skip.is_accepting {
  187|       |                                    engine.recorder().record_match(
  188|       |                                        next_idx,
  189|       |                                        Depth::ZERO,
  190|       |                                        crate::result::MatchedNodeType::Complex,
  191|       |                                    )?;
  192|       |                                }
  193|       |                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|       |                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|       |                            if let Some(block) = classifier_state.block.as_mut() {
  206|       |                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|       |                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|       |                                    debug!("Mask needs flipping!");
  209|       |                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|       |                                    classifier_state.iter.flip_quotes_bit();
  211|       |                                }
  212|       |                            }
  213|       |
  214|       |                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|       |                                    debug!("resuming");
  217|       |                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|       |                                    engine
  219|       |                                        .run_on_subtree(
  220|       |                                            Structural::Opening(
  221|       |                                                if next_c == b'{' {
  222|       |                                                    BracketType::Curly
  223|       |                                                } else {
  224|       |                                                    BracketType::Square
  225|       |                                                },
  226|       |                                                next_idx,
  227|       |                                            ),
  228|       |                                            head_skip.state,
  229|       |                                            classifier,
  230|       |                                        )?
  231|       |                                        .0
  232|       |                                }
  233|       |                                _ if head_skip.is_accepting => {
  234|       |                                    engine.recorder().record_match(
  235|       |                                        next_idx,
  236|       |                                        Depth::ZERO,
  237|       |                                        crate::result::MatchedNodeType::Atomic,
  238|       |                                    )?;
  239|       |                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|       |                                    let next_structural = classifier.next()?;
  241|       |
  242|       |                                    match next_structural {
  243|       |                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|       |                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|       |                                    classifier.stop()
  247|       |                                }
  248|       |                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|       |                            idx = classifier_state.get_idx();
  253|       |
  254|       |                            first_block = classifier_state.block.map(|b| b.block.block);
  255|       |                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|       |                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|       |                    debug!("No memmem matches, exiting");
  261|       |                    break;
  262|       |                }
  263|       |            }
  264|       |
  265|       |            return Ok(());
  266|       |
  267|       |            /// Move the state forward to `index`.
  268|       |            ///
  269|       |            /// # Errors
  270|       |            /// If the offset crosses block boundaries, then a new block is read from the underlying
  271|       |            /// [`Input`](crate::input::Input) implementation, which can fail.
  272|       |            ///
  273|       |            /// # Panics
  274|       |            /// If the `index` is not ahead of the current position of the state ([`get_idx`](ResumeClassifierState::get_idx)).
  275|       |            #[inline(always)]
  276|       |            #[allow(clippy::panic_in_result_fn)]
  277|       |            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|       |            where
  279|       |                I: InputBlockIterator<'i, N>,
  280|       |                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|       |            {
  282|       |                let current_block_start = state.iter.get_offset();
  283|       |                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|       |                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|       |                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|       |                assert!(index > current_idx);
  292|       |                let delta = index - current_idx;
  293|       |
  294|       |                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|       |                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|       |                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|       |                let remaining = delta + current_block_idx;
  298|       |                let blocks_to_skip = remaining / N;
  299|       |                let remainder = remaining % N;
  300|       |
  301|       |                match state.block.as_mut() {
  302|       |                    Some(b) if blocks_to_skip == 0 => {
  303|       |                        b.idx = remaining;
  304|       |                    }
  305|       |                    Some(_) => {
  306|       |                        state.block = state
  307|       |                            .iter
  308|       |                            .offset(blocks_to_skip as isize)?
  309|       |                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|       |                            });
  313|       |                    }
  314|       |                    None => {
  315|       |                        state.block = state
  316|       |                            .iter
  317|       |                            .offset((blocks_to_skip + 1) as isize)?
  318|       |                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|       |                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|       |                Ok(())
  328|       |            }
  329|       |        })
  330|    930|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   95|  1.92k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   96|  1.92k|        let initial_state = automaton.initial_state();
   97|  1.92k|        let fallback_state = automaton[initial_state].fallback_state();
   98|  1.92k|        let transitions = automaton[initial_state].member_transitions();
   99|  1.92k|
  100|  1.92k|        if fallback_state == initial_state
  101|  1.23k|            && transitions.len() == 1
  102|    930|            && automaton[initial_state].array_transitions().is_empty()
  103|       |        {
  104|    930|            let (member_name, target_state) = transitions[0];
  105|      0|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  106|    930|            return Some(Self {
  107|    930|                bytes,
  108|    930|                state: target_state,
  109|    930|                is_accepting: automaton.is_accepting(target_state),
  110|    930|                member_name,
  111|    930|                simd,
  112|    930|            });
  113|    995|        }
  114|    995|
  115|    995|        None
  116|  1.92k|    }
_RNCINvNvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  283|  3.76k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
_RNCINvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_Es_0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  254|  2.37k|                            first_block = classifier_state.block.map(|b| b.block.block);
_RNCINvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  168|  2.66k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),

_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  268|  1.92k|    fn run(mut self) -> Result<(), EngineError> {
  269|  1.92k|        // First we check if head-skipping is possible for a given query automaton.
  270|  1.92k|        // If yes, delegate the control to HeadSkip and give it full access to this Executor.
  271|  1.92k|        // Otherwise, we run our normal one-shot engine.
  272|  1.92k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  273|  1.92k|
  274|  1.92k|        match mb_head_skip {
  275|    930|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  276|    995|            None => self.run_and_exit(),
  277|       |        }
  278|  1.92k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   81|  2.74k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   82|  2.74k|        let automaton = Automaton::new(query)?;
   83|      0|        debug!("DFA:\n {}", automaton);
   84|  2.68k|        let simd = simd::configure();
   85|  2.68k|        log::info!("SIMD configuration:\n {}", simd);
   86|  2.68k|        Ok(MainEngine { automaton, simd })
   87|  2.74k|    }
_RNCNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  686|  24.6k|        .map(|x| x.0);
_RNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8NodeTypeE4from:
  791|  24.6k|    fn from(value: NodeType) -> Self {
  792|  24.6k|        match value {
  793|  9.57k|            NodeType::Atomic => Self::Atomic,
  794|  15.1k|            NodeType::Complex(_) => Self::Complex,
  795|       |        }
  796|  24.6k|    }
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E14run_on_subtreeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  761|  1.09k|    fn run_on_subtree(
  762|  1.09k|        &mut self,
  763|  1.09k|        next_event: Structural,
  764|  1.09k|        state: State,
  765|  1.09k|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>>,
  766|  1.09k|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>, V, MaskType>, EngineError> {
  767|  1.09k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  768|  1.09k|
  769|  1.09k|        self.state = state;
  770|  1.09k|        self.next_event = Some(next_event);
  771|  1.09k|
  772|  1.09k|        self.run_on_subtree(&mut classifier)?;
  773|  1.09k|        self.verify_subtree_closed()?;
  774|       |
  775|    816|        Ok(ResumeState(classifier.stop()))
  776|  1.09k|    }
_RINvNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  304|  2.09k|        {
  305|  98.2k|            loop {
  306|  98.2k|                // Fetch the next element only if the lookahead is empty.
  307|  98.2k|                if eng.next_event.is_none() {
  308|  96.8k|                    eng.next_event = match classifier.next() {
  309|  96.8k|                        Ok(e) => e,
  310|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|  1.37k|                }
  313|  98.2k|                if let Some(event) = eng.next_event.take() {
  314|      0|                    debug!("====================");
  315|      0|                    debug!("Event = {:?}", event);
  316|      0|                    debug!("Depth = {:?}", eng.depth);
  317|      0|                    debug!("Stack = {:?}", eng.stack);
  318|      0|                    debug!("State = {:?}", eng.state);
  319|      0|                    debug!("====================");
  320|       |
  321|  97.7k|                    match event {
  322|  19.5k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|  15.1k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|  36.6k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|  26.3k|                        Structural::Closing(_, idx) => {
  326|  26.3k|                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|  26.3k|                            if eng.depth == Depth::ZERO {
  329|  1.58k|                                break;
  330|  24.7k|                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|    475|                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|  2.05k|            Ok(())
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  739|  26.3k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  740|  26.3k|        if let Some(stack_frame) = self.peek() {
  741|  24.1k|            if depth <= stack_frame.depth {
  742|  20.6k|                return self.contents.pop();
  743|  3.49k|            }
  744|  2.19k|        }
  745|  5.68k|        None
  746|  26.3k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE25current_node_bracket_typeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  704|    256|    fn current_node_bracket_type(&self) -> BracketType {
  705|    256|        if self.is_list {
  706|      0|            BracketType::Square
  707|       |        } else {
  708|    256|            BracketType::Curly
  709|       |        }
  710|    256|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  447|  36.6k|    fn handle_opening(
  448|  36.6k|        &mut self,
  449|  36.6k|        classifier: &mut Classifier!(),
  450|  36.6k|        bracket_type: BracketType,
  451|  36.6k|        idx: usize,
  452|  36.6k|    ) -> Result<(), EngineError> {
  453|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  454|       |
  455|       |        // Check all transitions relevant to the current subtree - array if in list, member if not.
  456|  36.6k|        let mut any_matched = false;
  457|  36.6k|        if self.is_list {
  458|  20.3k|            for trans in self.automaton[self.state].array_transitions() {
  459|  7.17k|                if trans.matches(self.array_count) {
  460|  2.72k|                    let target = trans.target_state();
  461|  2.72k|                    any_matched = true;
  462|  2.72k|                    self.transition_to(target, bracket_type);
  463|  2.72k|                    if self.automaton.is_accepting(target) {
  464|      0|                        debug!("Accept {idx}");
  465|  1.21k|                        self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  466|  1.51k|                    }
  467|  2.72k|                    break;
  468|  4.45k|                }
  469|       |            }
  470|       |        } else {
  471|  16.2k|            let colon_idx = self.find_preceding_colon(idx);
  472|       |
  473|  16.2k|            for &(member_name, target) in self.automaton[self.state].member_transitions() {
  474|  8.13k|                if let Some(colon_idx) = colon_idx {
  475|  6.58k|                    if self.is_match(colon_idx, member_name)? {
  476|  4.46k|                        any_matched = true;
  477|  4.46k|                        self.transition_to(target, bracket_type);
  478|  4.46k|                        if self.automaton.is_accepting(target) {
  479|      0|                            debug!("Accept {idx}");
  480|  2.88k|                            self.record_match_detected_at(colon_idx + 1, NodeType::Complex(bracket_type))?;
  481|  1.58k|                        }
  482|  4.46k|                        break;
  483|  2.11k|                    }
  484|  1.55k|                }
  485|       |            }
  486|       |        }
  487|       |
  488|       |        // If nothing matched trigger the fallback transition.
  489|  36.6k|        if !any_matched && self.depth != Depth::ZERO {
  490|  27.5k|            let fallback = self.automaton[self.state].fallback_state();
  491|      0|            debug!("Falling back to {fallback}");
  492|       |
  493|  27.5k|            if self.automaton.is_rejecting(fallback) {
  494|       |                // Tail skipping. Skip the entire subtree. The skipping consumes the closing character.
  495|       |                // We still need to notify the recorder - in case the value being skipped was actually accepted.
  496|    303|                let closing_idx = classifier.skip(bracket_type)?;
  497|    303|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  498|  27.2k|            } else {
  499|  27.2k|                self.transition_to(fallback, bracket_type);
  500|  27.2k|            }
  501|  27.2k|
  502|  27.2k|            if self.automaton.is_accepting(fallback) {
  503|  11.0k|                self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  504|  16.2k|            }
  505|  9.08k|        }
  506|       |
  507|       |        // At this point we will be actually digging into the subtree.
  508|  36.3k|        self.depth
  509|  36.3k|            .increment()
  510|  36.3k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  511|       |
  512|  36.3k|        self.is_list = bracket_type == BracketType::Square;
  513|  36.3k|        let mut needs_commas = false;
  514|  36.3k|
  515|  36.3k|        // If we're starting a list, there's a very hairy problem of accepting the first element in the list,
  516|  36.3k|        // if it is atomic. We process objects and arrays on their opening character, and atomics on their preceding comma.
  517|  36.3k|        // The first element doesn't have a preceding comma, so if it needs to be accepted we need to handle it now.
  518|  36.3k|        //
  519|  36.3k|        // Additionally, whether to enable commas or not depends on whether an item of the list can ever be accepted.
  520|  36.3k|        if self.is_list {
  521|  18.9k|            let fallback = self.automaton[self.state].fallback_state();
  522|  18.9k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  523|  18.9k|
  524|  18.9k|            if is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state) {
  525|  15.6k|                needs_commas = true;
  526|  15.6k|                self.array_count = JsonUInt::ZERO;
  527|      0|                debug!("Initialized array count to {}", self.array_count);
  528|       |
  529|  15.6k|                let wants_first_item =
  530|  15.6k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  531|       |
  532|  15.6k|                if wants_first_item {
  533|  10.5k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  534|       |
  535|       |                    // We only handle the match if it exists and is atomic. The possible cases
  536|       |                    // in a well-formed JSON for the next character are:
  537|       |                    // - '[', for an array value
  538|       |                    // - '{' for an object value
  539|       |                    // - ']' if the list was empty and has no values
  540|       |                    // - otherwise it's the first character of an atomic value.
  541|  10.5k|                    match next {
  542|  9.71k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  543|    813|                        Some((value_idx, _)) => {
  544|    813|                            self.record_match_detected_at(value_idx, NodeType::Atomic)?;
  545|       |                        }
  546|      0|                        _ => (),
  547|       |                    }
  548|  5.09k|                }
  549|  3.32k|            }
  550|  17.3k|        }
  551|       |
  552|       |        // Decide which structural characters need to be handled in this subtree.
  553|  36.3k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  554|  11.8k|            // When accepting values in an object we need colons for the member names,
  555|  11.8k|            // and commas to report where atomic values end (for the Recorder).
  556|  11.8k|            // This is the only case that needs colons.
  557|  11.8k|            classifier.turn_colons_and_commas_on(idx);
  558|  24.4k|        } else if needs_commas {
  559|  15.6k|            classifier.turn_colons_off();
  560|  15.6k|            classifier.turn_commas_on(idx);
  561|  15.6k|        } else {
  562|  8.86k|            classifier.turn_colons_and_commas_off();
  563|  8.86k|        }
  564|       |
  565|  36.3k|        Ok(())
  566|  36.6k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  695|  2.05k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  696|  2.05k|        if self.depth != Depth::ZERO {
  697|    276|            Err(EngineError::MissingClosingCharacter())
  698|       |        } else {
  699|  1.78k|            Ok(())
  700|       |        }
  701|  2.05k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  410|  15.1k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  411|      0|        debug!("Comma");
  412|       |
  413|  15.1k|        self.recorder.record_value_terminator(idx, self.depth)?;
  414|       |
  415|  15.1k|        if self.is_list {
  416|       |            // If the index increment exceeds the field's limit, give up.
  417|  10.3k|            if self.array_count.try_increment().is_err() {
  418|      0|                return Ok(());
  419|  10.3k|            }
  420|       |
  421|       |            // Lookahead to see if the next character is an opening.
  422|       |            // If yes, the logic will be handled in handle_opening and we bail.
  423|  10.3k|            if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  424|  10.3k|                if c == b'{' || c == b'[' {
  425|  4.39k|                    return Ok(());
  426|  5.99k|                }
  427|      0|            }
  428|       |
  429|       |            // Check the fallback transition first since it's cheap, then check for the specific index.
  430|  5.99k|            let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  431|  5.99k|
  432|  5.99k|            if is_fallback_accepting
  433|  2.60k|                || self
  434|  2.60k|                    .automaton
  435|  2.60k|                    .has_array_index_transition_to_accepting(self.state, &self.array_count)
  436|       |            {
  437|      0|                debug!("Accepting list item on comma.");
  438|  3.68k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  439|  2.31k|            }
  440|  4.78k|        }
  441|       |
  442|  10.7k|        Ok(())
  443|  15.1k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  570|  26.3k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  571|      0|        debug!("Closing, decreasing depth and popping stack.");
  572|       |
  573|  26.3k|        self.depth
  574|  26.3k|            .decrement()
  575|  26.3k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  576|  26.3k|        self.recorder.record_value_terminator(idx, self.depth)?;
  577|       |
  578|       |        // Restore the state from the stack if the transition was not a loop.
  579|  26.3k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  580|  20.6k|            self.state = stack_frame.state;
  581|  20.6k|            self.is_list = stack_frame.is_list;
  582|  20.6k|            self.array_count = stack_frame.array_count;
  583|       |
  584|      0|            debug!("Restored array count to {}", self.array_count);
  585|       |
  586|       |            // We have taken a transition when entering the just-closed subtree. If the state is unitary
  587|       |            // we can just skip the rest of the current subtree.
  588|  20.6k|            if self.automaton.is_unitary(self.state) {
  589|    225|                let bracket_type = self.current_node_bracket_type();
  590|      0|                debug!("Skipping unique state from {bracket_type:?}");
  591|    225|                let close_idx = classifier.skip(bracket_type)?;
  592|       |                // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  593|       |                // handle a closing, so we set the lookahead to the correct character.
  594|    225|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  595|    225|                return Ok(());
  596|  20.4k|            }
  597|  5.68k|        }
  598|       |
  599|  26.1k|        if self.is_list {
  600|  15.7k|            if self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  601|  9.76k|                || self.automaton.has_any_array_item_transition(self.state)
  602|  11.9k|            {
  603|  11.9k|                classifier.turn_commas_on(idx);
  604|  11.9k|            } else {
  605|  3.75k|                classifier.turn_commas_off();
  606|  3.75k|            }
  607|  10.4k|        } else if self.automaton.has_transition_to_accepting(self.state) {
  608|  6.73k|            classifier.turn_colons_and_commas_on(idx);
  609|  6.73k|        } else {
  610|  3.67k|            classifier.turn_colons_off();
  611|  3.67k|        }
  612|       |
  613|  26.1k|        Ok(())
  614|  26.3k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  346|  19.5k|    fn handle_colon(
  347|  19.5k|        &mut self,
  348|  19.5k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  349|  19.5k|        idx: usize,
  350|  19.5k|    ) -> Result<(), EngineError> {
  351|      0|        debug!("Colon");
  352|       |
  353|       |        // Lookahead to see if the next character is an opening.
  354|       |        // If yes, the logic will be handled in handle_opening and we bail.
  355|  19.5k|        if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  356|  19.5k|            if c == b'{' || c == b'[' {
  357|  9.17k|                return Ok(());
  358|  10.4k|            }
  359|      0|        }
  360|       |
  361|       |        // Atomic values are only relevant if the automaton accepts.
  362|       |        // Look at accepting transitions and try to match them with the label.
  363|  10.4k|        let mut any_matched = false;
  364|       |
  365|  10.4k|        for &(member_name, target) in self.automaton[self.state].member_transitions() {
  366|  8.48k|            if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  367|  3.65k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  368|  3.65k|                any_matched = true;
  369|  3.65k|                break;
  370|  4.83k|            }
  371|       |        }
  372|       |        // Alternatively, match consider the fallback transition if it accepts.
  373|  10.4k|        let fallback_state = self.automaton[self.state].fallback_state();
  374|  10.4k|        if !any_matched && self.automaton.is_accepting(fallback_state) {
  375|  1.42k|            self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  376|  8.97k|        }
  377|       |
  378|       |        // Tail skipping.
  379|       |        // If we are in a unitary state and have matched a transition, we can skip the rest of the subtree,
  380|       |        // since member names are unique.
  381|  10.4k|        if any_matched && self.automaton.is_unitary(self.state) {
  382|       |            // We need to look ahead for some bookkeeping.
  383|       |            // 1. If the next event is closing then there's no reason to spin up the skipping machinery,
  384|       |            //    since it would exit immediately anyway.
  385|       |            // 2. If the next character is a comma then we need to notify the recorder.
  386|       |            // 3. Realistically, a colon should never happen. An opening is not interesting and will be skipped.
  387|     50|            self.next_event = classifier.next()?;
  388|     50|            match self.next_event {
  389|       |                None | Some(Structural::Closing(_, _)) => {
  390|     19|                    return Ok(());
  391|       |                }
  392|     31|                Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  393|      0|                Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  394|       |            }
  395|     31|            let bracket_type = self.current_node_bracket_type();
  396|      0|            debug!("Skipping unique state from {bracket_type:?}");
  397|     31|            let stop_at = classifier.skip(bracket_type)?;
  398|       |            // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  399|       |            // handle a closing, so we set the lookahead to the correct character.
  400|     31|            self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  401|  10.3k|        }
  402|       |
  403|  10.3k|        Ok(())
  404|  19.5k|    }
_RNCNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  510|     36|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE8is_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  656|  14.8k|    fn is_match(&self, idx: usize, member_name: &JsonString) -> Result<bool, EngineError> {
  657|  14.8k|        let len = member_name.quoted().len();
  658|       |
  659|       |        // The colon can be preceded by whitespace before the actual label.
  660|  14.8k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  661|  14.8k|            Some(x) => x,
  662|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  663|       |        };
  664|       |
  665|       |        // First check if the length matches.
  666|  14.8k|        if closing_quote_idx + 1 < len {
  667|    339|            return Ok(false);
  668|  14.4k|        }
  669|  14.4k|
  670|  14.4k|        // Do the expensive memcmp.
  671|  14.4k|        let start_idx = closing_quote_idx + 1 - len;
  672|  14.4k|        self.input
  673|  14.4k|            .is_member_match(start_idx, closing_quote_idx + 1, member_name)
  674|  14.4k|            .map_err(|x| x.into().into())
  675|  14.8k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB5_10SmallStack4peekCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  734|  26.3k|    fn peek(&mut self) -> Option<StackFrame> {
  735|  26.3k|        self.contents.last().copied()
  736|  26.3k|    }
_RINvXs_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  174|  2.68k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  175|  2.68k|    where
  176|  2.68k|        I: Input,
  177|  2.68k|        S: Sink<Match>,
  178|  2.68k|    {
  179|  2.68k|        if self.automaton.is_select_root_query() {
  180|    760|            return select_root_query::match_(input, sink);
  181|  1.92k|        }
  182|  1.92k|        if self.automaton.is_empty_query() {
  183|      0|            return Ok(());
  184|  1.92k|        }
  185|  1.92k|
  186|  1.92k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  187|  1.92k|        config_simd!(self.simd => |simd| {
  188|  1.92k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  189|  1.92k|            executor.run()
  190|    316|        })?;
  191|       |
  192|  1.60k|        Ok(())
  193|  2.68k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB5_10SmallStack4pushCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  749|  28.0k|    fn push(&mut self, value: StackFrame) {
  750|  28.0k|        self.contents.push(value)
  751|  28.0k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  644|  16.2k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  645|  16.2k|        if self.depth == Depth::ZERO {
  646|  1.79k|            None
  647|       |        } else {
  648|  14.4k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  649|       |
  650|  14.4k|            (char == b':').then_some(char_idx)
  651|       |        }
  652|  16.2k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  678|  24.6k|    fn record_match_detected_at(&mut self, start_idx: usize, ty: NodeType) -> Result<(), EngineError> {
  679|      0|        debug!("Reporting result somewhere after {start_idx} with node type {ty:?}");
  680|       |
  681|  24.6k|        let index = match ty {
  682|  4.57k|            NodeType::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  683|  10.5k|            NodeType::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  684|  9.57k|            NodeType::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  685|       |        }
  686|  24.6k|        .map(|x| x.0);
  687|  24.6k|
  688|  24.6k|        match index {
  689|  24.6k|            Some(idx) => self.recorder.record_match(idx, self.depth, ty.into()),
  690|      0|            None => Err(EngineError::MissingItem()),
  691|       |        }
  692|  24.6k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  619|  34.4k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  620|  34.4k|        let target_is_list = opening == BracketType::Square;
  621|  34.4k|
  622|  34.4k|        let fallback = self.automaton[self.state].fallback_state();
  623|  34.4k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  624|  34.4k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  625|       |
  626|       |        // To keep the stack small, we only push if the state only changes in any meaningful way.
  627|  34.4k|        if target != self.state || target_is_list != self.is_list || searching_list {
  628|       |            debug!(
  629|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  630|       |                self.state, self.array_count
  631|       |            );
  632|       |
  633|  28.0k|            self.stack.push(StackFrame {
  634|  28.0k|                depth: *self.depth,
  635|  28.0k|                state: self.state,
  636|  28.0k|                is_list: self.is_list,
  637|  28.0k|                array_count: self.array_count,
  638|  28.0k|            });
  639|  28.0k|            self.state = target;
  640|  6.37k|        }
  641|  34.4k|    }
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  296|  2.09k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  297|  2.09k|        dispatch_simd!(self.simd; self, classifier =>
  298|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  299|       |        where
  300|       |            'i: 'r,
  301|       |            I: Input,
  302|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  303|       |            V: Simd
  304|       |        {
  305|       |            loop {
  306|       |                // Fetch the next element only if the lookahead is empty.
  307|       |                if eng.next_event.is_none() {
  308|       |                    eng.next_event = match classifier.next() {
  309|       |                        Ok(e) => e,
  310|       |                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|       |                }
  313|       |                if let Some(event) = eng.next_event.take() {
  314|       |                    debug!("====================");
  315|       |                    debug!("Event = {:?}", event);
  316|       |                    debug!("Depth = {:?}", eng.depth);
  317|       |                    debug!("Stack = {:?}", eng.stack);
  318|       |                    debug!("State = {:?}", eng.state);
  319|       |                    debug!("====================");
  320|       |
  321|       |                    match event {
  322|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|       |                        Structural::Closing(_, idx) => {
  326|       |                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|       |                            if eng.depth == Depth::ZERO {
  329|       |                                break;
  330|       |                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|       |                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|       |            Ok(())
  339|       |        })
  340|  2.09k|    }
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E8recorderCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  778|  4.49k|    fn recorder(&mut self) -> &'r R {
  779|  4.49k|        self.recorder
  780|  4.49k|    }
_RINvNtNtCs7ecOk0g9G9V_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  237|  1.92k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  238|  1.92k|    automaton: &'i Automaton<'q>,
  239|  1.92k|    input: &'i I,
  240|  1.92k|    recorder: &'r R,
  241|  1.92k|    simd: V,
  242|  1.92k|) -> Executor<'i, 'q, 'r, I, R, V>
  243|  1.92k|where
  244|  1.92k|    I: Input,
  245|  1.92k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  246|  1.92k|{
  247|  1.92k|    Executor {
  248|  1.92k|        depth: Depth::ZERO,
  249|  1.92k|        state: automaton.initial_state(),
  250|  1.92k|        stack: SmallStack::new(),
  251|  1.92k|        automaton,
  252|  1.92k|        input,
  253|  1.92k|        recorder,
  254|  1.92k|        simd,
  255|  1.92k|        next_event: None,
  256|  1.92k|        is_list: false,
  257|  1.92k|        array_count: JsonUInt::ZERO,
  258|  1.92k|    }
  259|  1.92k|}
_RNvMs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  282|    995|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  283|    995|        let iter = self.input.iter_blocks(self.recorder);
  284|    995|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  285|    995|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  286|    995|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  287|    995|
  288|    995|        self.run_on_subtree(&mut classifier)?;
  289|       |
  290|    966|        self.verify_subtree_closed()
  291|    995|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6engine4mainNtB5_10SmallStack3new:
  729|  1.92k|    fn new() -> Self {
  730|  1.92k|        Self { contents: smallvec![] }
  731|  1.92k|    }

_RNCINvNtNtCs7ecOk0g9G9V_8rsonpath6engine17select_root_query6match_NtNtNtB8_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB8_6result5MatchEE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  100|  85.1k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
_RINvNtNtCs7ecOk0g9G9V_8rsonpath6engine17select_root_query6match_NtNtNtB6_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB6_6result5MatchEECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   84|    760|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   85|    760|where
   86|    760|    I: Input,
   87|    760|    S: Sink<Match>,
   88|    760|{
   89|    760|    // For a full match we need to copy the entire input starting from first non-whitespace,
   90|    760|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   91|    760|    // padded with whitespace at start and/or end, but that's a pathological case.
   92|    760|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   93|    760|    let mut res: Vec<u8> = vec![];
   94|    760|    let mut first_significant_idx = None;
   95|    760|    let mut offset = 0;
   96|       |
   97|  9.33k|    while let Some(block) = iter.next().e()? {
   98|  8.57k|        if first_significant_idx.is_none() {
   99|       |            // Start of the root not found yet, look for it.
  100|  1.70k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
  101|       |
  102|  1.70k|            if let Some(first_idx) = first_significant_idx {
  103|    760|                // Start of the root found in this block, copy the relevant part.
  104|    760|                res.extend(&block[first_idx..]);
  105|    946|            } else {
  106|    946|                offset += block.len();
  107|    946|            }
  108|  6.86k|        } else {
  109|  6.86k|            // Start of the root was already found, now we are copying everything.
  110|  6.86k|            res.extend(&*block);
  111|  6.86k|        }
  112|       |    }
  113|       |
  114|    760|    if let Some(start) = first_significant_idx {
  115|       |        // Trim whitespace if we have a result.
  116|  83.3k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  117|  82.5k|            res.pop();
  118|  82.5k|        }
  119|       |
  120|    760|        let actual_start = start + offset - input.leading_padding_len();
  121|    760|        sink.add_match(Match::from_start_and_bytes(actual_start, res))
  122|    760|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  123|      0|    }
  124|       |
  125|    760|    Ok(())
  126|    760|}

_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  138|   175k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   175k|        self.classifier
  140|   175k|            .as_mut()
  141|   175k|            .expect("tail skip must always hold a classifier")
  142|   175k|    }
_RINvNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13tail_skippingINtB5_8TailSkippINtYpNtNtNtB9_14classification4simd4Simd16QuotesClassifierpEINtYpB1d_20StructuralClassifierpEpKj40_E4skip21avx2_pclmulqdq_popcntINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB3h_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4J_5MatchEEKB2F_EINtB1f_12ResolvedSimdNtNtNtB1h_6quotes7avx2_6411ConstructorNtNtNtB1h_10structural7avx2_6411ConstructorNtNtNtB1h_5depth7avx2_6411ConstructorNtNtNtB1h_6memmem7avx2_6411ConstructorKj1_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   44|    559|        {
   45|    559|            debug!("Skipping");
   46|    559|            let mut idx = 0;
   47|    559|            let mut err = None;
   48|    559|
   49|    559|            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|    559|            tail_skip.classifier = Some('a: {
   52|    559|                let resume_state = classifier.stop();
   53|    559|                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|    559|                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|    559|                let mut current_vector = match first_vector {
   57|    439|                    Some(v) => Some(v),
   58|    120|                    None => match depth_classifier.next() {
   59|    120|                        Ok(v) => v,
   60|      0|                        Err(e) => {
   61|      0|                            err = Some(e);
   62|      0|                            let resume_state = depth_classifier.stop(None);
   63|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|    559|                let mut current_depth = 1;
   68|       |
   69|  2.59k|                'outer: while let Some(ref mut vector) = current_vector {
   70|  2.59k|                    vector.add_depth(current_depth);
   71|       |
   72|      0|                    debug!("Fetched vector, current depth is {current_depth}");
   73|      0|                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|  2.59k|                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|  2.00k|                        while vector.advance_to_next_depth_decrease() {
   77|  1.79k|                            if vector.get_depth() == 0 {
   78|      0|                                debug!("Encountered depth 0, breaking.");
   79|    559|                                break 'outer;
   80|  1.23k|                            }
   81|       |                        }
   82|  1.83k|                    }
   83|       |
   84|  2.04k|                    current_depth = vector.depth_at_end();
   85|  2.04k|                    current_vector = match depth_classifier.next() {
   86|  2.04k|                        Ok(v) => v,
   87|      0|                        Err(e) => {
   88|      0|                            err = Some(e);
   89|      0|                            let resume_state = depth_classifier.stop(None);
   90|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|      0|                debug!("Skipping complete, resuming structural classification.");
   96|    559|                let resume_state = depth_classifier.stop(current_vector);
   97|      0|                debug!("Finished at {}", resume_state.get_idx());
   98|    559|                idx = resume_state.get_idx();
   99|    559|                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|    559|            if let Some(err) = err {
  103|      0|                Err(err.into())
  104|       |            } else {
  105|    559|                Ok(idx)
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4skipCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   36|    559|    pub(crate) fn skip(&mut self, opening: BracketType) -> Result<usize, EngineError> {
   37|    559|        dispatch_simd!(self.simd; self, opening =>
   38|       |        fn <'i, I, V>(
   39|       |            tail_skip: &mut TailSkip<'i, I, V::QuotesClassifier<'i, I>, V::StructuralClassifier<'i, I>, V, BLOCK_SIZE>,
   40|       |            opening: BracketType) -> Result<usize, EngineError>
   41|       |        where
   42|       |            I: InputBlockIterator<'i, BLOCK_SIZE>,
   43|       |            V: Simd
   44|       |        {
   45|       |            debug!("Skipping");
   46|       |            let mut idx = 0;
   47|       |            let mut err = None;
   48|       |
   49|       |            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|       |            tail_skip.classifier = Some('a: {
   52|       |                let resume_state = classifier.stop();
   53|       |                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|       |                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|       |                let mut current_vector = match first_vector {
   57|       |                    Some(v) => Some(v),
   58|       |                    None => match depth_classifier.next() {
   59|       |                        Ok(v) => v,
   60|       |                        Err(e) => {
   61|       |                            err = Some(e);
   62|       |                            let resume_state = depth_classifier.stop(None);
   63|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|       |                let mut current_depth = 1;
   68|       |
   69|       |                'outer: while let Some(ref mut vector) = current_vector {
   70|       |                    vector.add_depth(current_depth);
   71|       |
   72|       |                    debug!("Fetched vector, current depth is {current_depth}");
   73|       |                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|       |                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|       |                        while vector.advance_to_next_depth_decrease() {
   77|       |                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|       |                                break 'outer;
   80|       |                            }
   81|       |                        }
   82|       |                    }
   83|       |
   84|       |                    current_depth = vector.depth_at_end();
   85|       |                    current_vector = match depth_classifier.next() {
   86|       |                        Ok(v) => v,
   87|       |                        Err(e) => {
   88|       |                            err = Some(e);
   89|       |                            let resume_state = depth_classifier.stop(None);
   90|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|       |                let resume_state = depth_classifier.stop(current_vector);
   97|       |                debug!("Finished at {}", resume_state.get_idx());
   98|       |                idx = resume_state.get_idx();
   99|       |                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|       |            if let Some(err) = err {
  103|       |                Err(err.into())
  104|       |            } else {
  105|       |                Ok(idx)
  106|       |            }
  107|       |        })
  108|    559|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   28|  2.09k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  2.09k|        Self {
   30|  2.09k|            classifier: Some(classifier),
   31|  2.09k|            simd,
   32|  2.09k|            _phantom: (PhantomData, PhantomData),
   33|  2.09k|        }
   34|  2.09k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4stopCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  110|    816|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  111|    816|        self.classifier.expect("tail skip must always hold a classifier").stop()
  112|    816|    }

_RNvXNtCs7ecOk0g9G9V_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  207|  46.5k|    fn halves(&self) -> (&[u8], &[u8]) {
  208|  46.5k|        assert_eq!(N % 2, 0);
  209|  46.5k|        (&self[..N / 2], &self[N / 2..])
  210|  46.5k|    }
_RINvNtCs7ecOk0g9G9V_8rsonpath5input8align_toKj80_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  226|  2.74k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  227|  2.74k|    let ptr = bytes.as_ptr();
  228|  2.74k|    let offset = ptr.align_offset(N);
  229|  2.74k|    if offset > bytes.len() {
  230|  1.17k|        (bytes, &[], &[])
  231|       |    } else {
  232|  1.57k|        let (left, rest) = bytes.split_at(offset);
  233|  1.57k|        let middle_len = (rest.len() / N) * N;
  234|  1.57k|        let (middle, right) = rest.split_at(middle_len);
  235|  1.57k|
  236|  1.57k|        (left, middle, right)
  237|       |    }
  238|  2.74k|}

_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  174|  57.3k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  175|  57.3k|        return Ok(
  176|  57.3k|            // The hot path is when we start and end within the middle section.
  177|  57.3k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  178|  57.3k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  179|  57.3k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  180|  46.7k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  181|  46.7k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  182|     39|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  183|       |                }
  184|       |            } else {
  185|  10.6k|                self.as_padded_input().seek_non_whitespace_forward(from)
  186|       |            },
  187|       |        );
  188|       |
  189|       |        #[cold]
  190|       |        #[inline(never)]
  191|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|       |            last_block
  193|       |                .bytes()
  194|       |                .seek_non_whitespace_forward(0)
  195|       |                .map(|(x, y)| (x + offset, y))
  196|       |        }
  197|  57.3k|    }
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  200|  14.4k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  201|  14.4k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  202|  12.9k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  203|  12.8k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  204|     14|                None => handle_first(&self.first_block),
  205|       |            }
  206|       |        } else {
  207|  1.56k|            self.as_padded_input().seek_non_whitespace_backward(from)
  208|       |        };
  209|       |
  210|       |        #[cold]
  211|       |        #[inline(never)]
  212|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|       |        }
  215|  14.4k|    }
_RINvNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2N_5MatchEEKj40_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  262|  7.92k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  7.92k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  7.92k|        ) -> Option<&'a [u8]>
  265|  7.92k|        where
  266|  7.92k|            R: InputRecorder<&'a [u8]>,
  267|  7.92k|        {
  268|  7.92k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  7.92k|            if let Some(b) = block {
  271|  6.80k|                iter.recorder.record_block_start(b);
  272|  6.80k|                iter.idx += N;
  273|  6.80k|            }
  274|       |
  275|  7.92k|            block
  276|  7.92k|        }
_RNCINvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtBa_13BorrowedBytesNtBc_5Input12seek_forward11handle_lastKj1_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  169|     12|                .map(|(x, y)| (x + offset, y))
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input15is_member_match:
  218|  34.8k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> Result<bool, Self::Error> {
  219|  34.8k|        debug_assert!(from < to);
  220|       |        // The hot path is when we're checking fully within the middle section.
  221|       |        // This has to be as fast as possible, so the "cold" path referring to the TwoSidesPaddedInput
  222|       |        // impl is explicitly marked with #[cold].
  223|  34.8k|        if from > MAX_BLOCK_SIZE && to < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  224|       |            // This is the hot path -- do the bounds check and memcmp.
  225|  23.8k|            let bytes = self.middle_bytes;
  226|  23.8k|            let from = from - MAX_BLOCK_SIZE;
  227|  23.8k|            let to = to - MAX_BLOCK_SIZE;
  228|  23.8k|            let slice = &bytes[from..to];
  229|  23.8k|            Ok(member.quoted().as_bytes() == slice && (from == 0 || bytes[from - 1] != b'\\'))
  230|       |        } else {
  231|       |            // This is a very expensive, cold path.
  232|  10.9k|            Ok(self.as_padded_input().is_member_match(from, to, member))
  233|       |        }
  234|  34.8k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   45|  2.74k|    pub fn new(bytes: &'a [u8]) -> Self {
   46|  2.74k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   47|  2.74k|        let first_block = PaddedBlock::pad_first_block(first);
   48|  2.74k|        let last_block = PaddedBlock::pad_last_block(last);
   49|  2.74k|
   50|  2.74k|        Self {
   51|  2.74k|            middle_bytes: middle,
   52|  2.74k|            first_block,
   53|  2.74k|            last_block,
   54|  2.74k|        }
   55|  2.74k|    }
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  100|  2.68k|    fn leading_padding_len(&self) -> usize {
  101|  2.68k|        self.first_block.padding_len()
  102|  2.68k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_inputCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   57|  28.5k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   58|  28.5k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   59|  28.5k|    }
_RINvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  115|    760|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|    760|    where
  117|    760|        R: InputRecorder<&'b [u8]>,
  118|    760|    {
  119|    760|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|    760|
  121|    760|        Self::BlockIterator {
  122|    760|            idx: 0,
  123|    760|            input: padded_input,
  124|    760|            recorder,
  125|    760|        }
  126|    760|    }
_RINvNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathNtNtNtBc_6result5empty13EmptyRecorderKj40_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  262|  3.80k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  3.80k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  3.80k|        ) -> Option<&'a [u8]>
  265|  3.80k|        where
  266|  3.80k|            R: InputRecorder<&'a [u8]>,
  267|  3.80k|        {
  268|  3.80k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  3.80k|            if let Some(b) = block {
  271|  3.04k|                iter.recorder.record_block_start(b);
  272|  3.04k|                iter.idx += N;
  273|  3.04k|            }
  274|       |
  275|  3.80k|            block
  276|  3.80k|        }
_RNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputNtNtNtB9_6result5empty13EmptyRecorderKj40_EINtB7_18InputBlockIteratorKB2v_E4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  246|  9.33k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  9.33k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  5.53k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  5.53k|            // SAFETY: Bounds check above.
  251|  5.53k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  5.53k|            // By construction, middle has length divisible by N.
  253|  5.53k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  5.53k|            self.recorder.record_block_start(block);
  255|  5.53k|            self.idx += N;
  256|  5.53k|            Ok(Some(block))
  257|       |        } else {
  258|  3.80k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  9.33k|    }
_RNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input13seek_backwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  129|  14.8k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  130|  14.8k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  131|  10.6k|            match self.middle_bytes.seek_backward(from - MAX_BLOCK_SIZE, needle) {
  132|  8.78k|                Some(x) => Some(x + MAX_BLOCK_SIZE),
  133|  1.87k|                None => handle_first(&self.first_block, needle),
  134|       |            }
  135|       |        } else {
  136|  4.16k|            self.as_padded_input().seek_backward(from, needle)
  137|       |        };
  138|       |
  139|       |        #[cold]
  140|       |        #[inline(never)]
  141|       |        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|       |            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|       |        }
  144|  14.8k|    }
_RINvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  147|  15.1k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  148|  15.1k|        return Ok(
  149|  15.1k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  150|  13.8k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  151|  13.8k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  152|     12|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  153|       |                }
  154|       |            } else {
  155|  1.23k|                self.as_padded_input().seek_forward(from, needles)
  156|       |            },
  157|       |        );
  158|       |
  159|       |        #[cold]
  160|       |        #[inline(never)]
  161|       |        fn handle_last<const N: usize>(
  162|       |            last_block: &PaddedBlock,
  163|       |            offset: usize,
  164|       |            needles: [u8; N],
  165|       |        ) -> Option<(usize, u8)> {
  166|       |            last_block
  167|       |                .bytes()
  168|       |                .seek_forward(0, needles)
  169|       |                .map(|(x, y)| (x + offset, y))
  170|       |        }
  171|  15.1k|    }
_RINvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1z_5MatchEEKj40_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  115|  1.92k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|  1.92k|    where
  117|  1.92k|        R: InputRecorder<&'b [u8]>,
  118|  1.92k|    {
  119|  1.92k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|  1.92k|
  121|  1.92k|        Self::BlockIterator {
  122|  1.92k|            idx: 0,
  123|  1.92k|            input: padded_input,
  124|  1.92k|            recorder,
  125|  1.92k|        }
  126|  1.92k|    }
_RINvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB8_13BorrowedBytesNtBa_5Input12seek_forward11handle_lastKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  161|     12|        fn handle_last<const N: usize>(
  162|     12|            last_block: &PaddedBlock,
  163|     12|            offset: usize,
  164|     12|            needles: [u8; N],
  165|     12|        ) -> Option<(usize, u8)> {
  166|     12|            last_block
  167|     12|                .bytes()
  168|     12|                .seek_forward(0, needles)
  169|     12|                .map(|(x, y)| (x + offset, y))
  170|     12|        }
_RNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  246|  22.3k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  22.3k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  14.3k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  14.3k|            // SAFETY: Bounds check above.
  251|  14.3k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  14.3k|            // By construction, middle has length divisible by N.
  253|  14.3k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  14.3k|            self.recorder.record_block_start(block);
  255|  14.3k|            self.idx += N;
  256|  14.3k|            Ok(Some(block))
  257|       |        } else {
  258|  7.92k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  22.3k|    }
_RNvXs3_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  287|   106k|    fn get_offset(&self) -> usize {
  288|      0|        debug!("getting input iter {}", self.idx);
  289|   106k|        self.idx
  290|   106k|    }
_RNvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  212|     14|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|     14|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|     14|        }
_RNCNvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  195|     39|                .map(|(x, y)| (x + offset, y))
_RNvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input13seek_backward12handle_first:
  141|  1.87k|        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|  1.87k|            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|  1.87k|        }
_RNvNvXs2_NtNtCs7ecOk0g9G9V_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  191|     39|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|     39|            last_block
  193|     39|                .bytes()
  194|     39|                .seek_non_whitespace_forward(0)
  195|     39|                .map(|(x, y)| (x + offset, y))
  196|     39|        }

_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   50|  31.6k|    fn e(self) -> Result<T, InputError> {
   51|  31.6k|        self.map_err(std::convert::Into::into)
   52|  31.6k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   50|  72.4k|    fn e(self) -> Result<T, InputError> {
   51|  72.4k|        self.map_err(std::convert::Into::into)
   52|  72.4k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultbNtB2_10InfallibleEINtB2_21InputErrorConvertiblebE1eCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   50|  20.3k|    fn e(self) -> Result<T, InputError> {
   51|  20.3k|        self.map_err(std::convert::Into::into)
   52|  20.3k|    }

_RINvNtNtCs7ecOk0g9G9V_8rsonpath5input7padding17seek_forward_implKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  539|  1.25k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  540|  1.25k|    let mut idx = from;
  541|  1.25k|    if idx >= bytes.len() {
  542|      0|        return None;
  543|  1.25k|    }
  544|       |
  545|  2.24k|    loop {
  546|  2.24k|        let b = bytes[idx];
  547|  2.24k|        if needles.contains(&b) {
  548|  1.23k|            return Some((idx, b));
  549|  1.00k|        }
  550|  1.00k|        idx += 1;
  551|  1.00k|        if idx == bytes.len() {
  552|     20|            return None;
  553|    988|        }
  554|       |    }
  555|  1.25k|}
_RINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput24seek_forward_from_middleKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  364|     13|    fn seek_forward_from_middle<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  365|     13|        assert!(N > 0);
  366|     13|        debug_assert!(from >= MAX_BLOCK_SIZE);
  367|     13|        let bytes = self.middle;
  368|     13|
  369|     13|        seek_forward_impl(bytes, from - MAX_BLOCK_SIZE, needles)
  370|     13|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  371|     13|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
  372|     13|    }
_RNCINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  370|     11|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  315|  46.2k|    pub(super) fn middle(&self) -> &'a [u8] {
  316|  46.2k|        self.middle
  317|  46.2k|    }
_RINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  374|    485|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  375|    485|        assert!(N > 0);
  376|    485|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  377|    485|        let bytes = &self.last_block.bytes;
  378|    485|
  379|    485|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  380|    485|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  381|    485|    }
_RNCINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  380|    485|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  350|    760|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  351|    760|        assert!(N > 0);
  352|    760|        debug_assert!(from < MAX_BLOCK_SIZE);
  353|    760|        let bytes = &self.first_block.bytes;
  354|    760|
  355|    760|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|       |            if self.middle.is_empty() {
  357|       |                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|       |                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|    760|        })
  362|    760|    }
_RINvXs0_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  127|  1.23k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  128|  1.23k|        if from < MAX_BLOCK_SIZE {
  129|    760|            self.seek_forward_from_first(from, needles)
  130|    478|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  131|      0|            self.seek_forward_from_middle(from, needles)
  132|       |        } else {
  133|    478|            self.seek_forward_from_last(from, needles)
  134|       |        }
  135|  1.23k|    }
_RNCINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_Es_0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  371|      2|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
_RNCINvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput23seek_forward_from_firstKj1_E0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  355|     18|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|     18|            if self.middle.is_empty() {
  357|      5|                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|     13|                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|     18|        })
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   31|     12|    pub(super) fn bytes(&self) -> &[u8] {
   32|     12|        &self.bytes
   33|     12|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_lenCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   27|  2.68k|    pub(super) fn padding_len(&self) -> usize {
   28|  2.68k|        self.padding_len
   29|  2.68k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  306|  31.2k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  307|  31.2k|        Self {
  308|  31.2k|            first_block: first,
  309|  31.2k|            middle,
  310|  31.2k|            last_block: last,
  311|  31.2k|        }
  312|  31.2k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  396|     20|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  397|     20|        debug_assert!(from >= MAX_BLOCK_SIZE);
  398|     20|        let bytes = self.middle;
  399|     20|
  400|     20|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  401|     20|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  402|     20|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  403|     20|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  456|  5.37k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  457|  5.37k|        &self.first_block.bytes[start..start + len]
  458|  5.37k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  429|    631|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  430|    631|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  431|    631|        let bytes = &self.last_block.bytes;
  432|    631|
  433|    631|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  434|    631|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  435|    631|            .or_else(|| {
  436|       |                if self.middle.is_empty() {
  437|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|    631|            })
  442|    631|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  383|  4.68k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  384|  4.68k|        debug_assert!(from < MAX_BLOCK_SIZE);
  385|  4.68k|        let bytes = &self.first_block.bytes;
  386|  4.68k|
  387|  4.68k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|       |            if self.middle.is_empty() {
  389|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  4.68k|        })
  394|  4.68k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  413|    946|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  414|    946|        debug_assert!(from < MAX_BLOCK_SIZE);
  415|    946|        let bytes = &self.first_block.bytes;
  416|    946|
  417|    946|        seek_non_whitespace_backward_impl(bytes, from)
  418|    946|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  410|  5.92k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvNtNtCs7ecOk0g9G9V_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  577|  1.59k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  578|  1.59k|    let mut idx = from;
  579|  1.59k|    if idx >= bytes.len() {
  580|      0|        return None;
  581|  1.59k|    }
  582|       |
  583|       |    loop {
  584|  3.57k|        let b = bytes[idx];
  585|  3.57k|        if !b.is_ascii_whitespace() {
  586|  1.56k|            return Some((idx, b));
  587|  2.01k|        }
  588|  2.01k|        if idx == 0 {
  589|     34|            return None;
  590|  1.97k|        }
  591|  1.97k|        idx -= 1;
  592|       |    }
  593|  1.59k|}
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   48|  2.74k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   49|  2.74k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   50|  2.74k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   51|  2.74k|        let block_end = bytes.len();
   52|  2.74k|
   53|  2.74k|        last_block_buf[..block_end].copy_from_slice(bytes);
   54|  2.74k|
   55|  2.74k|        Self {
   56|  2.74k|            bytes: last_block_buf,
   57|  2.74k|            padding_len: MAX_BLOCK_SIZE - block_end,
   58|  2.74k|        }
   59|  2.74k|    }
_RNvNtNtCs7ecOk0g9G9V_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  558|  10.6k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  559|  10.6k|    let mut idx = from;
  560|  10.6k|    if idx >= bytes.len() {
  561|      0|        return None;
  562|  10.6k|    }
  563|       |
  564|  13.6k|    loop {
  565|  13.6k|        let b = bytes[idx];
  566|  13.6k|        if !b.is_ascii_whitespace() {
  567|  10.6k|            return Some((idx, b));
  568|  3.00k|        }
  569|  3.00k|        idx += 1;
  570|  3.00k|        if idx == bytes.len() {
  571|     34|            return None;
  572|  2.97k|        }
  573|       |    }
  574|  10.6k|}
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_parts:
  473|  10.9k|    fn slice_parts(&self, from: usize, to: usize) -> (&[u8], &[u8], &[u8]) {
  474|  10.9k|        use std::cmp::min;
  475|  10.9k|
  476|  10.9k|        let first_from = min(from, MAX_BLOCK_SIZE);
  477|  10.9k|        let first_to = min(to, MAX_BLOCK_SIZE);
  478|  10.9k|
  479|  10.9k|        let from = from.saturating_sub(MAX_BLOCK_SIZE);
  480|  10.9k|        let to = to.saturating_sub(MAX_BLOCK_SIZE);
  481|  10.9k|        let middle_from = min(from, self.middle.len());
  482|  10.9k|        let middle_to = min(to, self.middle.len());
  483|  10.9k|
  484|  10.9k|        let from = from.saturating_sub(self.middle.len());
  485|  10.9k|        let to = to.saturating_sub(self.middle.len());
  486|  10.9k|        let last_from = min(from, self.last_block.len());
  487|  10.9k|        let last_to = min(to, self.last_block.len());
  488|  10.9k|
  489|  10.9k|        (
  490|  10.9k|            &self.first_block.bytes[first_from..first_to],
  491|  10.9k|            &self.middle[middle_from..middle_to],
  492|  10.9k|            &self.last_block.bytes[last_from..last_to],
  493|  10.9k|        )
  494|  10.9k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput17cold_member_match:
  508|  10.9k|    fn cold_member_match(&self, other: &[u8], from: usize, to: usize) -> bool {
  509|  10.9k|        let (first_self, middle_self, last_self) = self.slice_parts(from, to);
  510|  10.9k|        let first_other = &other[..first_self.len()];
  511|  10.9k|        let middle_other = &other[first_self.len()..first_self.len() + middle_self.len()];
  512|  10.9k|        let last_other = &other[first_self.len() + middle_self.len()..];
  513|  10.9k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
  514|  10.9k|
  515|  10.9k|        first_self == first_other
  516|  7.01k|            && middle_self == middle_other
  517|  6.77k|            && last_self == last_other
  518|  3.84k|            && preceding_char.map_or(true, |x| x != b'\\')
  519|  10.9k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  151|  1.56k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  152|  1.56k|        if from < MAX_BLOCK_SIZE {
  153|    932|            self.seek_non_whitespace_backward_from_first(from)
  154|    631|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  155|      0|            self.seek_non_whitespace_backward_from_middle(from)
  156|       |        } else {
  157|    631|            self.seek_non_whitespace_backward_from_last(from)
  158|       |        }
  159|  1.56k|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  467|  4.47k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  426|      7|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_last0Bb_:
  340|    958|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_matchs_0Bb_:
  518|  3.84k|            && preceding_char.map_or(true, |x| x != b'\\')
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput25seek_backward_from_middle:
  326|    725|    fn seek_backward_from_middle(&self, from: usize, needle: u8) -> Option<usize> {
  327|    725|        debug_assert!(from >= MAX_BLOCK_SIZE);
  328|    725|        let bytes = self.middle;
  329|    725|
  330|    725|        seek_backward_impl(bytes, from - MAX_BLOCK_SIZE, needle)
  331|    725|            .map(|x| x + MAX_BLOCK_SIZE)
  332|    725|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
  333|    725|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput23seek_backward_from_last:
  335|  2.38k|    fn seek_backward_from_last(&self, from: usize, needle: u8) -> Option<usize> {
  336|  2.38k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  337|  2.38k|        let bytes = &self.last_block.bytes;
  338|  2.38k|
  339|  2.38k|        seek_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needle)
  340|  2.38k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
  341|  2.38k|            .or_else(|| {
  342|       |                if self.middle.is_empty() {
  343|       |                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|       |                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  2.38k|            })
  348|  2.38k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  420|     20|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  421|     20|        debug_assert!(from >= MAX_BLOCK_SIZE);
  422|     20|        let bytes = self.middle;
  423|     20|
  424|     20|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  425|     20|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  426|     20|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  427|     20|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock3lenB6_:
   23|  23.8k|    pub(super) const fn len(&self) -> usize {
   24|  23.8k|        MAX_BLOCK_SIZE
   25|  23.8k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6get_at:
  496|  10.9k|    fn get_at(&self, idx: usize) -> Option<u8> {
  497|  10.9k|        if idx < MAX_BLOCK_SIZE {
  498|  6.84k|            Some(self.first_block.bytes[idx])
  499|  4.12k|        } else if idx < self.middle.len() + MAX_BLOCK_SIZE {
  500|    169|            Some(self.middle[idx - MAX_BLOCK_SIZE])
  501|  3.95k|        } else if idx < self.middle.len() + 2 * MAX_BLOCK_SIZE {
  502|  3.89k|            Some(self.last_block.bytes[idx - MAX_BLOCK_SIZE - self.middle.len()])
  503|       |        } else {
  504|     56|            None
  505|       |        }
  506|  10.9k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   35|  2.74k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   36|  2.74k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   37|  2.74k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   38|  2.74k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   39|  2.74k|
   40|  2.74k|        block_buf[block_start..].copy_from_slice(bytes);
   41|  2.74k|
   42|  2.74k|        Self {
   43|  2.74k|            bytes: block_buf,
   44|  2.74k|            padding_len: block_start,
   45|  2.74k|        }
   46|  2.74k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable13seek_backward:
  115|  4.16k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  116|  4.16k|        if from < MAX_BLOCK_SIZE {
  117|  1.78k|            self.seek_backward_from_first(from, needle)
  118|  2.38k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  119|      0|            self.seek_backward_from_middle(from, needle)
  120|       |        } else {
  121|  2.38k|            self.seek_backward_from_last(from, needle)
  122|       |        }
  123|  4.16k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  465|  6.35k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  466|  6.35k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  467|  6.35k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  468|  6.35k|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_lasts_0Bb_:
  341|  1.42k|            .or_else(|| {
  342|  1.42k|                if self.middle.is_empty() {
  343|    700|                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|    725|                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  1.42k|            })
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middle0Bb_:
  331|    320|            .map(|x| x + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  387|     28|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|     28|            if self.middle.is_empty() {
  389|      8|                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|     20|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|     28|        })
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  425|     13|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  435|     27|            .or_else(|| {
  436|     27|                if self.middle.is_empty() {
  437|      7|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|     20|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|     27|            })
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  405|  5.92k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  406|  5.92k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  407|  5.92k|        let bytes = &self.last_block.bytes;
  408|  5.92k|
  409|  5.92k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  410|  5.92k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  411|  5.92k|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  434|    604|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvNtNtCs7ecOk0g9G9V_8rsonpath5input7padding18seek_backward_impl:
  523|  5.99k|fn seek_backward_impl(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  524|  5.99k|    let mut idx = from;
  525|  5.99k|    assert!(idx < bytes.len());
  526|       |
  527|       |    loop {
  528|   193k|        if bytes[idx] == needle {
  529|  4.16k|            return Some(idx);
  530|   189k|        }
  531|   189k|        if idx == 0 {
  532|  1.83k|            return None;
  533|   187k|        }
  534|   187k|        idx -= 1;
  535|       |    }
  536|  5.99k|}
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  444|  11.7k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  445|  11.7k|        debug_assert!(len < MAX_BLOCK_SIZE);
  446|       |
  447|  11.7k|        if start < MAX_BLOCK_SIZE {
  448|  5.37k|            Some(self.slice_first(start, len))
  449|  6.35k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  450|      0|            Some(self.slice_middle(start, len))
  451|       |        } else {
  452|  6.35k|            self.slice_last(start, len)
  453|       |        }
  454|  11.7k|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_match0Bb_:
  513|  10.9k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable15is_member_match:
  163|  10.9k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> bool {
  164|  10.9k|        debug_assert!(from < to);
  165|  10.9k|        let other = member.quoted().as_bytes();
  166|  10.9k|        self.cold_member_match(other, from, to)
  167|  10.9k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesB6_:
   31|  1.93k|    pub(super) fn bytes(&self) -> &[u8] {
   32|  1.93k|        &self.bytes
   33|  1.93k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput24seek_backward_from_first:
  319|  2.89k|    fn seek_backward_from_first(&self, from: usize, needle: u8) -> Option<usize> {
  320|  2.89k|        debug_assert!(from < MAX_BLOCK_SIZE);
  321|  2.89k|        let bytes = &self.first_block.bytes;
  322|  2.89k|
  323|  2.89k|        seek_backward_impl(bytes, from, needle)
  324|  2.89k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  139|  10.6k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  140|  10.6k|        if from < MAX_BLOCK_SIZE {
  141|  4.68k|            self.seek_non_whitespace_forward_from_first(from)
  142|  5.91k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  143|      0|            self.seek_non_whitespace_forward_from_middle(from)
  144|       |        } else {
  145|  5.91k|            self.seek_non_whitespace_forward_from_last(from)
  146|       |        }
  147|  10.6k|    }
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middles_0Bb_:
  332|    405|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  402|      4|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNCNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  401|     16|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))

_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   15|  10.6k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  10.6k|        let bytes = self.as_ref();
   17|  10.6k|
   18|  10.6k|        let mut idx = from;
   19|  10.6k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|   198k|            if bytes[idx] == needle {
   23|  8.78k|                return Some(idx);
   24|   189k|            }
   25|   189k|            if idx == 0 {
   26|  1.87k|                return None;
   27|   187k|            }
   28|   187k|            idx -= 1;
   29|       |        }
   30|  10.6k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   77|  12.9k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  12.9k|        let bytes = self.as_ref();
   79|  12.9k|        let mut idx = from;
   80|  12.9k|
   81|  12.9k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  12.9k|        }
   84|       |
   85|       |        loop {
   86|  13.3k|            let b = bytes[idx];
   87|  13.3k|            if !b.is_ascii_whitespace() {
   88|  12.8k|                return Some((idx, b));
   89|    447|            }
   90|    447|            if idx == 0 {
   91|     14|                return None;
   92|    433|            }
   93|    433|            idx -= 1;
   94|       |        }
   95|  12.9k|    }
_RINvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   33|  13.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  13.8k|        let bytes = self.as_ref();
   35|       |
   36|  13.8k|        assert!(N > 0);
   37|  13.8k|        let mut idx = from;
   38|  13.8k|
   39|  13.8k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  13.8k|        }
   42|       |
   43|  14.6k|        loop {
   44|  14.6k|            let b = bytes[idx];
   45|  14.6k|            if needles.contains(&b) {
   46|  13.8k|                return Some((idx, b));
   47|    731|            }
   48|    731|            idx += 1;
   49|    731|            if idx == bytes.len() {
   50|     12|                return None;
   51|    719|            }
   52|       |        }
   53|  13.8k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   56|  46.7k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  46.7k|        let bytes = self.as_ref();
   58|  46.7k|        let mut idx = from;
   59|  46.7k|
   60|  46.7k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  46.7k|        }
   63|       |
   64|  48.3k|        loop {
   65|  48.3k|            let b = bytes[idx];
   66|  48.3k|            if !b.is_ascii_whitespace() {
   67|  46.7k|                return Some((idx, b));
   68|  1.55k|            }
   69|  1.55k|            idx += 1;
   70|  1.55k|            if idx == bytes.len() {
   71|     39|                return None;
   72|  1.51k|            }
   73|       |        }
   74|  46.7k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardB6_:
   15|  1.87k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  1.87k|        let bytes = self.as_ref();
   17|  1.87k|
   18|  1.87k|        let mut idx = from;
   19|  1.87k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|  41.6k|            if bytes[idx] == needle {
   23|  1.87k|                return Some(idx);
   24|  39.8k|            }
   25|  39.8k|            if idx == 0 {
   26|      0|                return None;
   27|  39.8k|            }
   28|  39.8k|            idx -= 1;
   29|       |        }
   30|  1.87k|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|     39|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|     39|        let bytes = self.as_ref();
   58|     39|        let mut idx = from;
   59|     39|
   60|     39|        if idx >= bytes.len() {
   61|      0|            return None;
   62|     39|        }
   63|       |
   64|  1.15k|        loop {
   65|  1.15k|            let b = bytes[idx];
   66|  1.15k|            if !b.is_ascii_whitespace() {
   67|     39|                return Some((idx, b));
   68|  1.11k|            }
   69|  1.11k|            idx += 1;
   70|  1.11k|            if idx == bytes.len() {
   71|      0|                return None;
   72|  1.11k|            }
   73|       |        }
   74|     39|    }
_RNvXNtNtCs7ecOk0g9G9V_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|     14|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|     14|        let bytes = self.as_ref();
   79|     14|        let mut idx = from;
   80|     14|
   81|     14|        if idx >= bytes.len() {
   82|      0|            return None;
   83|     14|        }
   84|       |
   85|       |        loop {
   86|    223|            let b = bytes[idx];
   87|    223|            if !b.is_ascii_whitespace() {
   88|     14|                return Some((idx, b));
   89|    209|            }
   90|    209|            if idx == 0 {
   91|      0|                return None;
   92|    209|            }
   93|    209|            idx -= 1;
   94|       |        }
   95|     14|    }

_RNvCs7ecOk0g9G9V_8rsonpath18is_json_whitespace:
  351|   177k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  352|   177k|    JSON_WHITESPACE_BYTES.contains(&x)
  353|   177k|}

_RNvMs_NtCs7ecOk0g9G9V_8rsonpath6resultNtB4_5Match20from_start_and_bytesCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   81|    760|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   82|    760|        Self { bytes, span_start }
   83|    760|    }
_RNvXsa_NtCs7ecOk0g9G9V_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  189|  19.1k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvXs2_NtCs7ecOk0g9G9V_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  144|  19.2k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  19.2k|        self.push(data);
  146|  19.2k|        Ok(())
  147|  19.2k|    }

_RNvXNtNtCs7ecOk0g9G9V_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCsdv3Cd29mJmf_19fuzz_arbitrary_json:
    9|  8.57k|    fn record_block_start(&self, _new_block: B) {
   10|  8.57k|        // Intentionally left empty.
   11|  8.57k|    }

_RNvMs3_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  367|  22.9k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|      0|        debug!("Value terminator at {idx}, depth {depth}");
  369|  38.6k|        while let Some(node) = self.stack.last() {
  370|  36.6k|            if node.start_depth >= depth {
  371|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  15.7k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  15.7k|                append_final_block(
  374|  15.7k|                    &mut node.buf,
  375|  15.7k|                    self.current_block
  376|  15.7k|                        .as_ref()
  377|  15.7k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  15.7k|                    self.idx,
  379|  15.7k|                    node.start_idx,
  380|  15.7k|                    idx + 1,
  381|  15.7k|                );
  382|  15.7k|                finalize_node(&mut node.buf, node.ty);
  383|       |
  384|      0|                debug!("Committing node: {node:?}");
  385|  15.7k|                self.output_queue.insert(
  386|  15.7k|                    node.id,
  387|  15.7k|                    Match {
  388|  15.7k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  15.7k|                        bytes: node.buf,
  390|  15.7k|                    },
  391|  15.7k|                );
  392|       |            } else {
  393|  20.9k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  22.9k|        if self.stack.is_empty() {
  398|      0|            debug!("Outputting batch of nodes.");
  399|  1.99k|            self.output_queue
  400|  1.99k|                .output_to(self.sink)
  401|  1.99k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  20.9k|        }
  403|       |
  404|  22.9k|        Ok(())
  405|  22.9k|    }
_RNvNtNtCs7ecOk0g9G9V_8rsonpath6result5nodes13finalize_node:
  435|  19.1k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  436|      0|    debug!("Finalizing node");
  437|       |
  438|  19.1k|    if ty == MatchedNodeType::Atomic {
  439|       |        // Atomic nodes are finished when the next structural character is matched.
  440|       |        // The buffer includes that character and all preceding whitespace.
  441|       |        // We need to remove it before saving the result.
  442|  8.72k|        if buf.len() <= 1 {
  443|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  444|    215|            buf.truncate(0)
  445|       |        } else {
  446|  8.50k|            let mut i = buf.len() - 2;
  447|  9.23k|            while is_json_whitespace(buf[i]) {
  448|    732|                i -= 1;
  449|    732|            }
  450|       |
  451|  8.50k|            buf.truncate(i + 1);
  452|       |        }
  453|  10.4k|    }
  454|  19.1k|}
_RNvNtNtCs7ecOk0g9G9V_8rsonpath6result5nodes18append_final_block:
  425|  19.1k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|      0|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  19.1k|    debug_assert!(read_end >= src_start);
  428|  19.1k|    let in_block_start = read_start.saturating_sub(src_start);
  429|  19.1k|    let in_block_end = read_end - src_start;
  430|  19.1k|
  431|  19.1k|    dest.extend(&src[in_block_start..in_block_end]);
  432|  19.1k|}
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  224|  16.2k|    fn record_block(&mut self, block: B) {
  225|  16.2k|        if let Some(finished) = self.current_block.as_ref() {
  226|  14.3k|            if let Some(node) = self.node.as_mut() {
  227|      0|                debug!("Continuing node, idx is {}", self.idx);
  228|  1.67k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  12.6k|            }
  230|       |
  231|  14.3k|            self.idx += finished.len();
  232|  1.92k|        }
  233|       |
  234|  16.2k|        self.current_block = Some(block);
  235|      0|        debug!("New block, idx = {}", self.idx);
  236|  16.2k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  268|  4.71k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  4.71k|        if self.node.is_some() {
  270|      0|            debug!("nested match detected, switching to stack");
  271|    642|            return false;
  272|  4.07k|        }
  273|  4.07k|
  274|  4.07k|        let node = SimplePartialNode {
  275|  4.07k|            start_idx: idx,
  276|  4.07k|            start_depth: depth,
  277|  4.07k|            buf: vec![],
  278|  4.07k|            ty,
  279|  4.07k|        };
  280|  4.07k|        self.node = Some(node);
  281|  4.07k|
  282|  4.07k|        true
  283|  4.71k|    }
_RNvMs3_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  338|  4.97k|    fn record_block(&mut self, block: B) {
  339|  4.97k|        if let Some(finished) = self.current_block.as_ref() {
  340|  84.5k|            for node in &mut self.stack {
  341|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|  79.5k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  4.97k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  4.97k|        self.current_block = Some(block);
  349|      0|        debug!("New block, idx = {}", self.idx);
  350|  4.97k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  165|  26.9k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  26.9k|        match self {
  167|  4.71k|            Self::Simple(simple) => {
  168|  4.71k|                if !simple.try_record_match(idx, depth, ty) {
  169|    642|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    642|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    642|                    let mut stack = simple.transform_to_stack();
  174|    642|                    stack.record_match(idx, depth, ty);
  175|    642|                    *self = Self::Stack(stack);
  176|  4.07k|                }
  177|       |            }
  178|  22.1k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  26.9k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   52|  26.9k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  26.9k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  26.9k|        Ok(())
   56|  26.9k|    }
_RNvXs_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   41|  21.2k|    fn record_block_start(&self, new_block: B) {
   42|  21.2k|        self.internal.borrow_mut().record_block(new_block)
   43|  21.2k|    }
_RNvMs3_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  352|  22.8k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  22.8k|        let node = PartialNode {
  354|  22.8k|            id: self.match_count,
  355|  22.8k|            start_idx: idx,
  356|  22.8k|            start_depth: depth,
  357|  22.8k|            buf: vec![],
  358|  22.8k|            ty,
  359|  22.8k|        };
  360|       |
  361|      0|        debug!("New node {node:?}");
  362|  22.8k|        self.match_count += 1;
  363|  22.8k|        self.stack.push(node);
  364|  22.8k|    }
_RNvNtNtCs7ecOk0g9G9V_8rsonpath6result5nodes12append_block:
  409|  81.2k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|  81.2k|    if read_start >= src_start + src.len() {
  411|    210|        return;
  412|  80.9k|    }
  413|       |
  414|  80.9k|    let to_extend = if read_start > src_start {
  415|  15.9k|        let in_block_start = read_start - src_start;
  416|  15.9k|        &src[in_block_start..]
  417|       |    } else {
  418|  65.0k|        src
  419|       |    };
  420|       |
  421|  80.9k|    dest.extend(to_extend);
  422|  81.2k|}
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  238|  20.3k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|      0|        debug!("Value terminator at {idx}, depth {depth}");
  240|  20.3k|        if let Some(node) = self.node.as_ref() {
  241|  4.31k|            if node.start_depth >= depth {
  242|  3.38k|                let mut node = self.node.take().expect("node is Some");
  243|      0|                debug!("Mark node as ended at {}", idx + 1);
  244|       |                append_final_block(
  245|  3.38k|                    &mut node.buf,
  246|  3.38k|                    self.current_block
  247|  3.38k|                        .as_ref()
  248|  3.38k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  3.38k|                    self.idx,
  250|  3.38k|                    node.start_idx,
  251|  3.38k|                    idx + 1,
  252|  3.38k|                );
  253|  3.38k|                finalize_node(&mut node.buf, node.ty);
  254|       |
  255|      0|                debug!("Committing and outputting node");
  256|  3.38k|                self.sink
  257|  3.38k|                    .add_match(Match {
  258|  3.38k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  3.38k|                        bytes: node.buf,
  260|  3.38k|                    })
  261|  3.38k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    930|            }
  263|  16.0k|        }
  264|       |
  265|  20.3k|        Ok(())
  266|  20.3k|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  285|    642|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    642|        match self.node {
  287|    642|            Some(node) => StackRecorder {
  288|    642|                idx: self.idx,
  289|    642|                match_count: 1,
  290|    642|                current_block: self.current_block,
  291|    642|                stack: vec![PartialNode {
  292|    642|                    id: 0,
  293|    642|                    start_idx: node.start_idx,
  294|    642|                    start_depth: node.start_depth,
  295|    642|                    buf: node.buf,
  296|    642|                    ty: node.ty,
  297|    642|                }],
  298|    642|                output_queue: OutputQueue::new(),
  299|    642|                sink: self.sink,
  300|    642|                leading_padding_len: self.leading_padding_len,
  301|    642|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    642|    }
_RNvMs2_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  214|  1.92k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  1.92k|        Self {
  216|  1.92k|            idx: 0,
  217|  1.92k|            current_block: None,
  218|  1.92k|            node: None,
  219|  1.92k|            sink,
  220|  1.92k|            leading_padding_len,
  221|  1.92k|        }
  222|  1.92k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  156|  21.2k|    fn record_block(&mut self, block: B) {
  157|  21.2k|        match self {
  158|  16.2k|            Self::Simple(r) => r.record_block(block),
  159|  4.97k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  21.2k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   28|  1.92k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  1.92k|        Self {
   30|  1.92k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  1.92k|        }
   32|  1.92k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  151|  1.92k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  1.92k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  1.92k|    }
_RNvMs1_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  185|  43.2k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  43.2k|        match self {
  187|  20.3k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  22.9k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  43.2k|    }
_RNvXs0_NtNtCs7ecOk0g9G9V_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   59|  43.2k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  43.2k|        self.internal
   61|  43.2k|            .borrow_mut()
   62|  43.2k|            .record_value_terminator(idx, depth)
   63|  43.2k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  43.2k|    }

_RINvMNtNtCs7ecOk0g9G9V_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   52|  1.99k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.99k|    where
   54|  1.99k|        S: Sink<D>,
   55|  1.99k|    {
   56|  1.99k|        self.offset += self.nodes.len();
   57|       |
   58|  15.0k|        for node in self.nodes.drain(..) {
   59|  15.0k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.99k|        Ok(())
   63|  1.99k|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   18|    642|    pub(super) fn new() -> Self {
   19|    642|        Self {
   20|    642|            offset: 0,
   21|    642|            nodes: vec![],
   22|    642|        }
   23|    642|    }
_RNvMNtNtCs7ecOk0g9G9V_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCsdv3Cd29mJmf_19fuzz_arbitrary_json:
   29|  15.7k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  15.7k|        let actual_idx = id - self.offset;
   31|       |
   32|  34.6k|        while self.nodes.len() <= actual_idx {
   33|  18.9k|            self.nodes.push(None);
   34|  18.9k|        }
   35|       |
   36|  15.7k|        self.nodes[actual_idx] = Some(node);
   37|  15.7k|    }

_RNCINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder10child_nameNtNtB7_3str10JsonStringE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  125|  3.52k|        self.child(|x| x.name(name))
_RNvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder19descendant_wildcard:
  178|  1.24k|    pub fn descendant_wildcard(&mut self) -> &mut Self {
  179|  1.24k|        self.descendant(|x| x.wildcard())
  180|  1.24k|    }
_RINvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder5indexNtNtB7_3num8JsonUIntECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  289|  5.50k|    pub fn index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  290|  5.50k|        let json_int: JsonInt = idx.into();
  291|  5.50k|        self.selectors.push(Selector::Index(Index::from(json_int)));
  292|  5.50k|        self
  293|  5.50k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCNvB2_14child_wildcard0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   79|  2.87k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  2.87k|    where
   81|  2.87k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  2.87k|    {
   83|  2.87k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  2.87k|        selectors_builder(&mut builder);
   85|  2.87k|        self.segments.push(Segment::Child(builder.build()));
   86|  2.87k|        self
   87|  2.87k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  238|  14.7k|    fn new() -> Self {
  239|  14.7k|        Self { selectors: vec![] }
  240|  14.7k|    }
_RNCINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder15descendant_nameNtNtB7_3str10JsonStringE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  171|  1.58k|        self.descendant(|x| x.name(name))
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_10child_nameNtNtB5_3str10JsonStringE0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   79|  3.52k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  3.52k|    where
   81|  3.52k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  3.52k|    {
   83|  3.52k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  3.52k|        selectors_builder(&mut builder);
   85|  3.52k|        self.segments.push(Segment::Child(builder.build()));
   86|  3.52k|        self
   87|  3.52k|    }
_RNvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder14child_wildcard:
  132|  2.87k|    pub fn child_wildcard(&mut self) -> &mut Self {
  133|  2.87k|        self.child(|x| x.wildcard())
  134|  2.87k|    }
_RNvXs1_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB7_13JsonPathQueryINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_20JsonPathQueryBuilderE4from:
  399|  2.74k|    fn from(value: JsonPathQueryBuilder) -> Self {
  400|  2.74k|        Self {
  401|  2.74k|            segments: value.segments,
  402|  2.74k|        }
  403|  2.74k|    }
_RNCNvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder19descendant_wildcard0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  179|  1.24k|        self.descendant(|x| x.wildcard())
_RNCINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder11child_indexNtNtB7_3num8JsonUIntE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  141|  1.23k|        self.child(|x| x.index(idx))
_RNvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder3new:
   54|  2.74k|    pub fn new() -> Self {
   55|  2.74k|        Self { segments: vec![] }
   56|  2.74k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder8wildcard:
  371|  4.11k|    pub fn wildcard(&mut self) -> &mut Self {
  372|  4.11k|        self.selectors.push(Selector::Wildcard);
  373|  4.11k|        self
  374|  4.11k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder15descendant_nameNtNtB5_3str10JsonStringECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  170|  1.58k|    pub fn descendant_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  171|  1.58k|        self.descendant(|x| x.name(name))
  172|  1.58k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCNvB2_19descendant_wildcard0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  110|  1.24k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.24k|    where
  112|  1.24k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.24k|    {
  114|  1.24k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.24k|        selectors_builder(&mut builder);
  116|  1.24k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.24k|        self
  118|  1.24k|    }
_RNCNvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder14child_wildcard0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  133|  2.87k|        self.child(|x| x.wildcard())
_RINvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder4nameNtNtB7_3str10JsonStringECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  263|  5.10k|    pub fn name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  264|  5.10k|        self.selectors.push(Selector::Name(name.into()));
  265|  5.10k|        self
  266|  5.10k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder11child_indexNtNtB5_3num8JsonUIntECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  140|  1.23k|    pub fn child_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  141|  1.23k|        self.child(|x| x.index(idx))
  142|  1.23k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_15descendant_nameNtNtB5_3str10JsonStringE0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  110|  1.58k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.58k|    where
  112|  1.58k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.58k|    {
  114|  1.58k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.58k|        selectors_builder(&mut builder);
  116|  1.58k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.58k|        self
  118|  1.58k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder16descendant_indexNtNtB5_3num8JsonUIntECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  186|  4.26k|    pub fn descendant_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  187|  4.26k|        self.descendant(|x| x.index(idx))
  188|  4.26k|    }
_RNCINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder16descendant_indexNtNtB7_3num8JsonUIntE0Csdv3Cd29mJmf_19fuzz_arbitrary_json:
  187|  4.26k|        self.descendant(|x| x.index(idx))
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_16descendant_indexNtNtB5_3num8JsonUIntE0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  110|  4.26k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  4.26k|    where
  112|  4.26k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  4.26k|    {
  114|  4.26k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  4.26k|        selectors_builder(&mut builder);
  116|  4.26k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  4.26k|        self
  118|  4.26k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10child_nameNtNtB5_3str10JsonStringECsdv3Cd29mJmf_19fuzz_arbitrary_json:
  124|  3.52k|    pub fn child_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  125|  3.52k|        self.child(|x| x.name(name))
  126|  3.52k|    }
_RINvMNtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_11child_indexNtNtB5_3num8JsonUIntE0ECsdv3Cd29mJmf_19fuzz_arbitrary_json:
   79|  1.23k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  1.23k|    where
   81|  1.23k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  1.23k|    {
   83|  1.23k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  1.23k|        selectors_builder(&mut builder);
   85|  1.23k|        self.segments.push(Segment::Child(builder.build()));
   86|  1.23k|        self
   87|  1.23k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder5build:
  242|  14.7k|    fn build(self) -> Selectors {
  243|  14.7k|        Selectors::many(self.selectors)
  244|  14.7k|    }

_RNvXs9_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  475|  5.50k|    fn from(value: N) -> Self {
  476|  5.50k|        let value = value.into();
  477|  5.50k|        if value.as_i64() >= 0 {
  478|  5.50k|            Self::FromStart(value.abs())
  479|       |        } else {
  480|      0|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  481|       |        }
  482|  5.50k|    }
_RNvMsr_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  871|  2.74k|    pub fn segments(&self) -> &[Segment] {
  872|  2.74k|        &self.segments
  873|  2.74k|    }
_RNvMss_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_7Segment8is_child:
  896|  14.7k|    pub fn is_child(&self) -> bool {
  897|  14.7k|        matches!(self, Self::Child(_))
  898|  14.7k|    }
_RNvMss_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_7Segment9selectors:
  880|  14.7k|    pub fn selectors(&self) -> &Selectors {
  881|  14.7k|        match self {
  882|  14.7k|            Self::Child(s) | Self::Descendant(s) => s,
  883|  14.7k|        }
  884|  14.7k|    }
_RNvXsx_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1114|  14.7k|    fn deref(&self) -> &Self::Target {
 1115|  14.7k|        &self.inner
 1116|  14.7k|    }
_RNvMst_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_9Selectors5firstCs7ecOk0g9G9V_8rsonpath:
  961|  14.7k|    pub fn first(&self) -> &Selector {
  962|  14.7k|        &self.inner[0]
  963|  14.7k|    }
_RNvMst_Cs8b8CMl5b5gJ_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  953|  14.7k|    pub fn many(vec: Vec<Selector>) -> Self {
  954|  14.7k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  955|  14.7k|        Self { inner: vec }
  956|  14.7k|    }

_RNvMs7_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  5.50k|    pub const fn as_i64(&self) -> i64 {
  331|  5.50k|        self.0
  332|  5.50k|    }
_RNvMs8_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUInt6as_u64:
  455|   115k|    pub const fn as_u64(&self) -> u64 {
  456|   115k|        self.0
  457|   115k|    }
_RNvMs8_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  420|  10.3k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  421|  10.3k|        let new_index = self.0 + 1;
  422|  10.3k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  423|  10.3k|            self.0 = new_index;
  424|  10.3k|            Ok(())
  425|       |        } else {
  426|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  427|       |        }
  428|  10.3k|    }
_RNvMs7_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  5.50k|    pub const fn abs(&self) -> JsonUInt {
  363|  5.50k|        JsonUInt(self.0.unsigned_abs())
  364|  5.50k|    }
_RNvMs7_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_7JsonInt3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  286|  5.50k|    const fn new(index: i64) -> Self {
  287|  5.50k|        Self(index)
  288|  5.50k|    }
_RNvMs8_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUInt3newCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  400|  5.50k|    const fn new(index: u64) -> Self {
  401|  5.50k|        Self(index)
  402|  5.50k|    }
_RNvXsh_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  652|  5.50k|    fn from(value: JsonUInt) -> Self {
  653|  5.50k|        // This is always safe due to the type invariant bounds.
  654|  5.50k|        Self::new(value.0 as i64)
  655|  5.50k|    }
_RNvXsN_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUIntNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitraryCsdv3Cd29mJmf_19fuzz_arbitrary_json:
 1073|  5.50k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1074|  5.50k|        let val = u.int_in_range(0..=JSON_UINT_UPPER_LIMIT)?;
 1075|       |
 1076|  5.50k|        Ok(Self::new(val))
 1077|  5.50k|    }
_RNvMs8_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUInt3newCs7ecOk0g9G9V_8rsonpath:
  400|  62.3k|    const fn new(index: u64) -> Self {
  401|  62.3k|        Self(index)
  402|  62.3k|    }
_RNvXs1b_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpCs7ecOk0g9G9V_8rsonpath:
   87|  8.77k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs16_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7ecOk0g9G9V_8rsonpath:
   87|  37.4k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsk_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromCs7ecOk0g9G9V_8rsonpath:
  687|  18.9k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  688|  18.9k|        if value < 0 {
  689|      0|            Err(JsonIntOverflowError::negative_uint(value))
  690|       |        } else {
  691|  18.9k|            Self::try_from(value as u64)
  692|       |        }
  693|  18.9k|    }
_RNvXso_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numxINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  726|  75.7k|    fn from(value: JsonUInt) -> Self {
  727|  75.7k|        // Safe cast since JsonUInt::MAX is lower than i64::MAX.
  728|  75.7k|        value.0 as Self
  729|  75.7k|    }
_RNvXs1a_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs7ecOk0g9G9V_8rsonpath:
   87|  39.9k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RINvXs19_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB7_8JsonUIntNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherECs7ecOk0g9G9V_8rsonpath:
   87|  45.7k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsj_NtCs8b8CMl5b5gJ_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromCs7ecOk0g9G9V_8rsonpath:
  674|  74.9k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  675|  74.9k|        if value > JSON_UINT_UPPER_LIMIT {
  676|  12.5k|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  677|       |        } else {
  678|  62.3k|            Ok(Self::new(value))
  679|       |        }
  680|  74.9k|    }

_RNvMNtNtCs8b8CMl5b5gJ_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError17uint_pos_overflowCs7ecOk0g9G9V_8rsonpath:
   57|  12.5k|    pub(crate) fn uint_pos_overflow(src: u64) -> Self {
   58|  12.5k|        Self {
   59|  12.5k|            kind: JsonIntOverflowKind::UIntPos(src),
   60|  12.5k|        }
   61|  12.5k|    }

_RNvXs6_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB5_10JsonStringNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitraryCsdv3Cd29mJmf_19fuzz_arbitrary_json:
  228|  5.10k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  5.10k|        let chars = u.arbitrary_iter()?;
  230|  5.10k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  17.4k|        for c in chars {
  236|  12.3k|            let c = c?;
  237|  12.3k|            match c {
  238|  12.3k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|    942|                    builder.push('\\');
  240|    942|                    builder.push(c);
  241|    942|                }
  242|  11.4k|                _ => {
  243|  11.4k|                    builder.push(c);
  244|  11.4k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  5.10k|        Ok(builder.into())
  249|  5.10k|    }
_RNvXs0_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  5.10k|    fn from(value: JsonStringBuilder) -> Self {
   59|  5.10k|        value.finish()
   60|  5.10k|    }
_RNvMs2_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB5_10JsonString6quoted:
  203|  62.1k|    pub fn quoted(&self) -> &str {
  204|  62.1k|        &self.quoted
  205|  62.1k|    }
_RNvMs2_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  43.5k|    pub fn unquoted(&self) -> &str {
  188|  43.5k|        let len = self.quoted.len();
  189|  43.5k|        debug_assert!(len >= 2);
  190|  43.5k|        &self.quoted[1..len - 1]
  191|  43.5k|    }
_RNvXs3_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  19.7k|    fn eq(&self, other: &Self) -> bool {
  211|  19.7k|        self.unquoted() == other.unquoted()
  212|  19.7k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  5.10k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  5.10k|        self.quoted.push('"');
   52|  5.10k|        JsonString { quoted: self.quoted }
   53|  5.10k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  5.10k|    pub(crate) fn new() -> Self {
   40|  5.10k|        Self {
   41|  5.10k|            quoted: String::from('"'),
   42|  5.10k|        }
   43|  5.10k|    }
_RNvMs_NtCs8b8CMl5b5gJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  13.2k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  13.2k|        self.quoted.push(char);
   47|  13.2k|        self
   48|  13.2k|    }

_RNvXs_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB4_14SupportedQueryNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary:
   62|  2.74k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   63|  2.74k|        let segment_count = u.arbitrary_len::<SupportedSegment>()?;
   64|  2.74k|        let mut query = JsonPathQueryBuilder::new();
   65|  2.74k|
   66|  2.74k|        for _ in 0..segment_count {
   67|  14.7k|            let segment = u.arbitrary::<SupportedSegment>()?;
   68|  14.7k|            match segment {
   69|  3.52k|                SupportedSegment::Child(SupportedSelector::Name(name)) => query.child_name(name),
   70|  2.87k|                SupportedSegment::Child(SupportedSelector::Wildcard) => query.child_wildcard(),
   71|  1.23k|                SupportedSegment::Child(SupportedSelector::Index(idx)) => query.child_index(idx),
   72|  1.58k|                SupportedSegment::Descendant(SupportedSelector::Name(name)) => query.descendant_name(name),
   73|  1.24k|                SupportedSegment::Descendant(SupportedSelector::Wildcard) => query.descendant_wildcard(),
   74|  4.26k|                SupportedSegment::Descendant(SupportedSelector::Index(idx)) => query.descendant_index(idx),
   75|       |            };
   76|       |        }
   77|       |
   78|  2.74k|        Ok(SupportedQuery(query.into()))
   79|  2.74k|    }
_RNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB4_17SupportedSelectorNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary:
   48|  41.8k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBc_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys_0Bc_:
   84|   122k|        #[derive(Arbitrary)]
_RNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB4_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hint:
   42|  2.74k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBa_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitraryNtNtCsexm4zzIkt34_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4from0Ba_:
  103|  45.6k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB4_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary:
   42|  41.8k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs38Pwkt6J51w_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.74k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBa_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitraryNtNtCsexm4zzIkt34_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4froms_0Ba_:
  105|  54.6k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNCNvNvNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector7___getit0B7_:
   48|      1|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   42|  1.14k|#[derive(Debug, Arbitrary)]
_RNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB5_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary:
   83|  2.74k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   84|  2.74k|        #[derive(Arbitrary)]
   85|  2.74k|        enum RawValue {
   86|  2.74k|            Null,
   87|  2.74k|            Bool(bool),
   88|  2.74k|            Integer(i64),
   89|  2.74k|            Float(f64),
   90|  2.74k|            String(String),
   91|  2.74k|            Array(Vec<RawValue>),
   92|  2.74k|            Object(HashMap<String, RawValue>),
   93|  2.74k|        }
   94|  2.74k|
   95|  2.74k|        impl From<RawValue> for serde_json::Value {
   96|  2.74k|            fn from(value: RawValue) -> Self {
   97|  2.74k|                match value {
   98|  2.74k|                    RawValue::Null => serde_json::Value::Null,
   99|  2.74k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  2.74k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  2.74k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  2.74k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  2.74k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  2.74k|                    RawValue::Object(obj) => {
  105|  2.74k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|  2.74k|                    }
  107|  2.74k|                }
  108|  2.74k|            }
  109|  2.74k|        }
  110|  2.74k|
  111|  2.74k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
  112|  2.74k|    }
_RNvXCsdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
   56|  2.74k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   57|  2.74k|        write!(f, "{}", self.0)
   58|  2.74k|    }
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   48|  1.15k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary0B6_:
   48|  1.15k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hint0B6_:
   42|  2.74k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment7___getit0B7_:
   42|      1|#[derive(Debug, Arbitrary)]
_RNvXNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtB8_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitraryNtNtCsexm4zzIkt34_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB2_8RawValueE4from:
   96|   103k|            fn from(value: RawValue) -> Self {
   97|   103k|                match value {
   98|  15.1k|                    RawValue::Null => serde_json::Value::Null,
   99|  8.35k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  4.08k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  6.23k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  7.36k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  27.4k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  34.4k|                    RawValue::Object(obj) => {
  105|  34.4k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|   103k|            }
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary0B6_:
   42|  1.14k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrarys_0B6_:
   42|  14.7k|#[derive(Debug, Arbitrary)]
_RNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCs38Pwkt6J51w_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  8.24k|#[derive(Debug, Arbitrary)]
_RNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCs38Pwkt6J51w_9arbitrary9Arbitrary9size_hintB4_:
   15|  2.74k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBc_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrary0Bc_:
   84|  1.09k|        #[derive(Arbitrary)]
_RNCNvXNvNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBc_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys0_0Bc_:
   84|  1.09k|        #[derive(Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hint0B6_:
   48|  5.49k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs38Pwkt6J51w_9arbitrary9Arbitrary13try_size_hint0B6_:
   15|  2.74k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsdv3Cd29mJmf_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrarys_0B6_:
   48|  14.7k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBd_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue7___getit0Bd_:
   84|      1|        #[derive(Arbitrary)]
_RNvXNvNvXs0_Csdv3Cd29mJmf_19fuzz_arbitrary_jsonNtBa_4JsonNtCs38Pwkt6J51w_9arbitrary9Arbitrary9arbitrary1__NtB4_8RawValueBT_9arbitrary:
   84|   364k|        #[derive(Arbitrary)]

