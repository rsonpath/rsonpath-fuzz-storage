_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax3num8JsonUIntNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hintCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  277|  5.51k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.51k|        let _ = depth;
  279|  5.51k|        (0, None)
  280|  5.51k|    }
_RNvXs1p_Cs6flZAYNibw_9arbitraryTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB1e_4JsonNtB6_9Arbitrary9arbitrary8RawValueEB1Y_9arbitraryB1e_:
  575|  96.1k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  96.1k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  96.1k|            }
_RNvYNtCs6UAlhEvAH5K_19fuzz_arbitrary_json14SupportedQueryNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.75k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.75k|        let _ = depth;
  279|  2.75k|        (0, None)
  280|  2.75k|    }
_RNvYNtCs6UAlhEvAH5K_19fuzz_arbitrary_json4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  189|  2.75k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|  2.75k|        Self::arbitrary(&mut u)
  191|  2.75k|    }
_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hintCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  277|  5.51k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.51k|        let _ = depth;
  279|  5.51k|        (0, None)
  280|  5.51k|    }
_RNvXsf_Cs6flZAYNibw_9arbitraryINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map7HashMapNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB27_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB2R_9arbitraryB27_:
  760|  51.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  761|  51.0k|        u.arbitrary_iter()?.collect()
  762|  51.0k|    }
_RNvXsK_Cs6flZAYNibw_9arbitrarymNtB5_9Arbitrary9size_hintCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  320|  8.26k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  8.26k|                    let n = mem::size_of::<$ty>();
  322|  8.26k|                    (n, Some(n))
  323|  8.26k|                }
_RNvYNtCs6UAlhEvAH5K_19fuzz_arbitrary_json4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.75k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.75k|        let _ = depth;
  279|  2.75k|        (0, None)
  280|  2.75k|    }
_RNvXsa_Cs6flZAYNibw_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB17_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1R_9arbitraryB17_:
  679|  45.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  45.9k|        u.arbitrary_iter()?.collect()
  681|  45.9k|    }
_RNvXs_Cs6flZAYNibw_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   302k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   302k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   302k|    }
_RNvXsl_Cs6flZAYNibw_9arbitraryNtNtCshJIxznpEM8j_5alloc6string6StringNtB5_9Arbitrary9arbitrary:
  874|   106k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  875|   106k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
  876|   106k|    }
_RNvXsL_Cs6flZAYNibw_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  11.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  11.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  11.4k|                    u.fill_buffer(&mut buf)?;
  312|  11.4k|                    let mut x: $unsigned = 0;
  313|  91.6k|                    for i in 0..mem::size_of::<$ty>() {
  314|  91.6k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  91.6k|                    }
  316|  11.4k|                    Ok(x as $ty)
  317|  11.4k|                }
_RNvXsI_Cs6flZAYNibw_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   302k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   302k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   302k|                    u.fill_buffer(&mut buf)?;
  312|   302k|                    let mut x: $unsigned = 0;
  313|   302k|                    for i in 0..mem::size_of::<$ty>() {
  314|   302k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   302k|                    }
  316|   302k|                    Ok(x as $ty)
  317|   302k|                }
_RNvXsK_Cs6flZAYNibw_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   215k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   215k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   215k|                    u.fill_buffer(&mut buf)?;
  312|   215k|                    let mut x: $unsigned = 0;
  313|   863k|                    for i in 0..mem::size_of::<$ty>() {
  314|   863k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   863k|                    }
  316|   215k|                    Ok(x as $ty)
  317|   215k|                }
_RNvXsV_Cs6flZAYNibw_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  11.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  11.4k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  11.4k|                }
_RNvXs0_Cs6flZAYNibw_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  16.6k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  16.6k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  16.6k|        if let Some(c) = char::from_u32(c) {
  376|  16.4k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    223|            c -= SURROGATES_START;
  380|    223|            Ok(char::from_u32(c)
  381|    223|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  16.6k|    }
_RNvXsR_Cs6flZAYNibw_9arbitraryxNtB5_9Arbitrary9arbitrary:
  309|  6.90k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  6.90k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  6.90k|                    u.fill_buffer(&mut buf)?;
  312|  6.90k|                    let mut x: $unsigned = 0;
  313|  55.2k|                    for i in 0..mem::size_of::<$ty>() {
  314|  55.2k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  55.2k|                    }
  316|  6.90k|                    Ok(x as $ty)
  317|  6.90k|                }
_RNvXsk_Cs6flZAYNibw_9arbitraryReNtB5_9Arbitrary9arbitrary:
  857|   106k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  858|   106k|        let size = u.arbitrary_len::<u8>()?;
  859|   106k|        arbitrary_str(u, size)
  860|   106k|    }
_RNvXsI_Cs6flZAYNibw_9arbitraryhNtB5_9Arbitrary9size_hintB5_:
  320|   106k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|   106k|                    let n = mem::size_of::<$ty>();
  322|   106k|                    (n, Some(n))
  323|   106k|                }

_RNvNtCs6flZAYNibw_9arbitrary9size_hint6or_allCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   57|  8.26k|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|  8.26k|    if let Some(head) = hints.first().copied() {
   59|  8.26k|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|  8.26k|}
_RNvNtCs6flZAYNibw_9arbitrary9size_hint3andCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   26|  30.3k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  30.3k|    let lower = lhs.0 + rhs.0;
   28|  30.3k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  30.3k|    (lower, upper)
   30|  30.3k|}
_RINvNtCs6flZAYNibw_9arbitrary9size_hint15recursion_guardNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtBZ_17SupportedSelectorNtB4_9Arbitrary9size_hint0EBZ_:
   12|  5.51k|pub fn recursion_guard(
   13|  5.51k|    depth: usize,
   14|  5.51k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  5.51k|) -> (usize, Option<usize>) {
   16|  5.51k|    const MAX_DEPTH: usize = 20;
   17|  5.51k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  5.51k|        f(depth + 1)
   21|       |    }
   22|  5.51k|}
_RINvNtCs6flZAYNibw_9arbitrary9size_hint15recursion_guardNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtBZ_16SupportedSegmentNtB4_9Arbitrary9size_hint0EBZ_:
   12|  2.75k|pub fn recursion_guard(
   13|  2.75k|    depth: usize,
   14|  2.75k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.75k|) -> (usize, Option<usize>) {
   16|  2.75k|    const MAX_DEPTH: usize = 20;
   17|  2.75k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.75k|        f(depth + 1)
   21|       |    }
   22|  2.75k|}
_RNvNtCs6flZAYNibw_9arbitrary9size_hint7and_allCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   37|  24.8k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  24.8k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  24.8k|}
_RNCNvNtCs6flZAYNibw_9arbitrary9size_hint3and0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   28|  27.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs6flZAYNibw_9arbitrary9size_hint15recursion_guardNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_json1__NtBZ_8FuzzDataNtB4_9Arbitrary9size_hint0EBZ_:
   12|  2.75k|pub fn recursion_guard(
   13|  2.75k|    depth: usize,
   14|  2.75k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.75k|) -> (usize, Option<usize>) {
   16|  2.75k|    const MAX_DEPTH: usize = 20;
   17|  2.75k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.75k|        f(depth + 1)
   21|       |    }
   22|  2.75k|}
_RNvNtCs6flZAYNibw_9arbitrary9size_hint2orCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   44|  13.7k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  13.7k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  13.7k|    let upper = lhs
   47|  13.7k|        .1
   48|  13.7k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  13.7k|    (lower, upper)
   50|  13.7k|}

_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterhEEECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  302|  5.35k|    fn int_in_range_impl<T>(
  303|  5.35k|        range: ops::RangeInclusive<T>,
  304|  5.35k|        mut bytes: impl Iterator<Item = u8>,
  305|  5.35k|    ) -> Result<(T, usize)>
  306|  5.35k|    where
  307|  5.35k|        T: Int,
  308|  5.35k|    {
  309|  5.35k|        let start = *range.start();
  310|  5.35k|        let end = *range.end();
  311|  5.35k|        assert!(
  312|  5.35k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  5.35k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  5.35k|        }
  321|  5.35k|
  322|  5.35k|        // From here on out we work with the unsigned representation. All of the
  323|  5.35k|        // operations performed below work out just as well whether or not `T`
  324|  5.35k|        // is a signed or unsigned integer.
  325|  5.35k|        let start = start.to_unsigned();
  326|  5.35k|        let end = end.to_unsigned();
  327|  5.35k|
  328|  5.35k|        let delta = end.wrapping_sub(start);
  329|  5.35k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  5.35k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  5.35k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  42.7k|        while (bytes_consumed < mem::size_of::<T>())
  339|  42.7k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  37.4k|            let byte = match bytes.next() {
  342|     18|                None => break,
  343|  37.4k|                Some(b) => b,
  344|  37.4k|            };
  345|  37.4k|            bytes_consumed += 1;
  346|  37.4k|
  347|  37.4k|            // Combine this byte into our arbitrary integer, but avoid
  348|  37.4k|            // overflowing the shift for `u8` and `i8`.
  349|  37.4k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  37.4k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  5.35k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  5.35k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  5.35k|        let result = start.wrapping_add(offset);
  365|  5.35k|
  366|  5.35k|        // And convert back to our maybe-signed representation.
  367|  5.35k|        let result = T::from_unsigned(result);
  368|  5.35k|        debug_assert!(*range.start() <= result);
  369|  5.35k|        debug_assert!(result <= *range.end());
  370|       |
  371|  5.35k|        Ok((result, bytes_consumed))
  372|  5.35k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int7from_u8Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  821|  37.4k|                fn from_u8(b: u8) -> Self {
  822|  37.4k|                    b as Self
  823|  37.4k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  132|   202k|    pub fn is_empty(&self) -> bool {
  133|   202k|        self.len() == 0
  134|   202k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  837|  5.35k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  5.35k|                    <$ty>::wrapping_sub(self, rhs)
  839|  5.35k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  293|  5.35k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  5.35k|    where
  295|  5.35k|        T: Int,
  296|  5.35k|    {
  297|  5.35k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  5.35k|        self.data = &self.data[bytes_consumed..];
  299|  5.35k|        Ok(result)
  300|  5.35k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int10from_usizeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  825|  42.7k|                fn from_usize(u: usize) -> Self {
  826|  42.7k|                    u as Self
  827|  42.7k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs6UAlhEvAH5K_19fuzz_arbitrary_json16SupportedSegmentEB1b_:
  167|  15.2k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  15.2k|    where
  169|  15.2k|        A: Arbitrary<'a>,
  170|  15.2k|    {
  171|  15.2k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  15.2k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  167|   286k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   286k|    where
  169|   286k|        A: Arbitrary<'a>,
  170|   286k|    {
  171|   286k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   286k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenNtCs6UAlhEvAH5K_19fuzz_arbitrary_json16SupportedSegmentEB1g_:
  213|  2.75k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  2.75k|    where
  215|  2.75k|        ElementType: Arbitrary<'a>,
  216|  2.75k|    {
  217|  2.75k|        let byte_size = self.arbitrary_byte_size()?;
  218|  2.75k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  2.75k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  2.75k|        let elem_size = std::cmp::max(1, elem_size);
  221|  2.75k|        Ok(byte_size / elem_size)
  222|  2.75k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  833|  5.35k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  5.35k|                    <$ty>::wrapping_add(self, rhs)
  835|  5.35k|                }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int11to_unsignedCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  841|  10.7k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  10.7k|                    self as $unsigned_ty
  843|  10.7k|                }
_RNvXs_NtCs6flZAYNibw_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB1N_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1N_:
  720|   147k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   147k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   147k|        if keep_going {
  723|  96.1k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  51.0k|            None
  726|       |        }
  727|   147k|    }
_RNvXs_NtCs6flZAYNibw_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB1a_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1a_:
  720|   115k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   115k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   115k|        if keep_going {
  723|  69.9k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  45.9k|            None
  726|       |        }
  727|   115k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   85|  2.75k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.75k|        Unstructured { data }
   87|  2.75k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB1n_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1n_:
  606|  45.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  45.9k|        &'b mut self,
  608|  45.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  45.9k|        Ok(ArbitraryIter {
  610|  45.9k|            u: &mut *self,
  611|  45.9k|            _marker: PhantomData,
  612|  45.9k|        })
  613|  45.9k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int13from_unsignedCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  845|  5.35k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  5.35k|                    unsigned as Self
  847|  5.35k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3lenCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  108|   202k|    pub fn len(&self) -> usize {
  109|   202k|        self.data.len()
  110|   202k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB1h_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1h_:
  167|  2.75k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  2.75k|    where
  169|  2.75k|        A: Arbitrary<'a>,
  170|  2.75k|    {
  171|  2.75k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  2.75k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB20_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB20_:
  606|  51.0k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  51.0k|        &'b mut self,
  608|  51.0k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  51.0k|        Ok(ArbitraryIter {
  610|  51.0k|            u: &mut *self,
  611|  51.0k|            _marker: PhantomData,
  612|  51.0k|        })
  613|  51.0k|    }
_RNvXs_NtCs6flZAYNibw_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  720|  23.0k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  23.0k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  23.0k|        if keep_going {
  723|  16.6k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  6.36k|            None
  726|       |        }
  727|  23.0k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  606|  6.36k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  6.36k|        &'b mut self,
  608|  6.36k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  6.36k|        Ok(ArbitraryIter {
  610|  6.36k|            u: &mut *self,
  611|  6.36k|            _marker: PhantomData,
  612|  6.36k|        })
  613|  6.36k|    }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|   160k|                fn from_u8(b: u8) -> Self {
  822|   160k|                    b as Self
  823|   160k|                }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|  80.3k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  80.3k|                    <$ty>::wrapping_sub(self, rhs)
  839|  80.3k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  213|   106k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|   106k|    where
  215|   106k|        ElementType: Arbitrary<'a>,
  216|   106k|    {
  217|   106k|        let byte_size = self.arbitrary_byte_size()?;
  218|   106k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|   106k|        let elem_size = upper.unwrap_or(lower * 2);
  220|   106k|        let elem_size = std::cmp::max(1, elem_size);
  221|   106k|        Ok(byte_size / elem_size)
  222|   106k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   536k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   536k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   536k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   536k|        for byte in buffer[n..].iter_mut() {
  525|  90.2k|            *byte = 0;
  526|  90.2k|        }
  527|   536k|        self.data = &self.data[n..];
  528|   536k|        Ok(())
  529|   536k|    }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|  28.6k|                fn from_u8(b: u8) -> Self {
  822|  28.6k|                    b as Self
  823|  28.6k|                }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  57.2k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  57.2k|                    self as $unsigned_ty
  843|  57.2k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|   106k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|   106k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|   106k|        }
  552|   106k|
  553|   106k|        let (for_buf, rest) = self.data.split_at(size);
  554|   106k|        self.data = rest;
  555|   106k|        Ok(for_buf)
  556|   106k|    }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|  28.6k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  28.6k|                    <$ty>::wrapping_add(self, rhs)
  835|  28.6k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|   106k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|   106k|        self.data.get(..size)
  581|   106k|    }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|  80.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  80.3k|                    <$ty>::checked_add(self, rhs)
  831|  80.3k|                }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|  80.3k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  80.3k|                    <$ty>::wrapping_add(self, rhs)
  835|  80.3k|                }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|   160k|                fn from_usize(u: usize) -> Self {
  826|   160k|                    u as Self
  827|   160k|                }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|  28.6k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  28.6k|                    <$ty>::wrapping_sub(self, rhs)
  839|  28.6k|                }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  5.35k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  5.35k|                    <$ty>::checked_add(self, rhs)
  831|  5.35k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1s_5slice4iter4IterhEEEB5_:
  302|  28.6k|    fn int_in_range_impl<T>(
  303|  28.6k|        range: ops::RangeInclusive<T>,
  304|  28.6k|        mut bytes: impl Iterator<Item = u8>,
  305|  28.6k|    ) -> Result<(T, usize)>
  306|  28.6k|    where
  307|  28.6k|        T: Int,
  308|  28.6k|    {
  309|  28.6k|        let start = *range.start();
  310|  28.6k|        let end = *range.end();
  311|  28.6k|        assert!(
  312|  28.6k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  28.6k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  28.6k|        }
  321|  28.6k|
  322|  28.6k|        // From here on out we work with the unsigned representation. All of the
  323|  28.6k|        // operations performed below work out just as well whether or not `T`
  324|  28.6k|        // is a signed or unsigned integer.
  325|  28.6k|        let start = start.to_unsigned();
  326|  28.6k|        let end = end.to_unsigned();
  327|  28.6k|
  328|  28.6k|        let delta = end.wrapping_sub(start);
  329|  28.6k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  28.6k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  28.6k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  57.2k|        while (bytes_consumed < mem::size_of::<T>())
  339|  28.6k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  28.6k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  28.6k|                Some(b) => b,
  344|  28.6k|            };
  345|  28.6k|            bytes_consumed += 1;
  346|  28.6k|
  347|  28.6k|            // Combine this byte into our arbitrary integer, but avoid
  348|  28.6k|            // overflowing the shift for `u8` and `i8`.
  349|  28.6k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|  28.6k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  28.6k|        let offset = if delta == T::Unsigned::MAX {
  357|     62|            arbitrary_int
  358|       |        } else {
  359|  28.5k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  28.6k|        let result = start.wrapping_add(offset);
  365|  28.6k|
  366|  28.6k|        // And convert back to our maybe-signed representation.
  367|  28.6k|        let result = T::from_unsigned(result);
  368|  28.6k|        debug_assert!(*range.start() <= result);
  369|  28.6k|        debug_assert!(result <= *range.end());
  370|       |
  371|  28.6k|        Ok((result, bytes_consumed))
  372|  28.6k|    }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|  80.3k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  80.3k|                    unsigned as Self
  847|  80.3k|                }
_RNvXs2_NtCs6flZAYNibw_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|   160k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   160k|                    self as $unsigned_ty
  843|   160k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1s_5slice4iter4IterhEEEB5_:
  302|  80.3k|    fn int_in_range_impl<T>(
  303|  80.3k|        range: ops::RangeInclusive<T>,
  304|  80.3k|        mut bytes: impl Iterator<Item = u8>,
  305|  80.3k|    ) -> Result<(T, usize)>
  306|  80.3k|    where
  307|  80.3k|        T: Int,
  308|  80.3k|    {
  309|  80.3k|        let start = *range.start();
  310|  80.3k|        let end = *range.end();
  311|  80.3k|        assert!(
  312|  80.3k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  80.3k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  80.3k|        }
  321|  80.3k|
  322|  80.3k|        // From here on out we work with the unsigned representation. All of the
  323|  80.3k|        // operations performed below work out just as well whether or not `T`
  324|  80.3k|        // is a signed or unsigned integer.
  325|  80.3k|        let start = start.to_unsigned();
  326|  80.3k|        let end = end.to_unsigned();
  327|  80.3k|
  328|  80.3k|        let delta = end.wrapping_sub(start);
  329|  80.3k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  80.3k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  80.3k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   241k|        while (bytes_consumed < mem::size_of::<T>())
  339|   160k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   160k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|   160k|                Some(b) => b,
  344|   160k|            };
  345|   160k|            bytes_consumed += 1;
  346|   160k|
  347|   160k|            // Combine this byte into our arbitrary integer, but avoid
  348|   160k|            // overflowing the shift for `u8` and `i8`.
  349|   160k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   160k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  80.3k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  80.3k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  80.3k|        let result = start.wrapping_add(offset);
  365|  80.3k|
  366|  80.3k|        // And convert back to our maybe-signed representation.
  367|  80.3k|        let result = T::from_unsigned(result);
  368|  80.3k|        debug_assert!(*range.start() <= result);
  369|  80.3k|        debug_assert!(result <= *range.end());
  370|       |
  371|  80.3k|        Ok((result, bytes_consumed))
  372|  80.3k|    }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|  28.5k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  28.5k|                    <$ty>::checked_add(self, rhs)
  831|  28.5k|                }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|  28.6k|                fn from_usize(u: usize) -> Self {
  826|  28.6k|                    u as Self
  827|  28.6k|                }
_RNvXs1_NtCs6flZAYNibw_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|  28.6k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  28.6k|                    unsigned as Self
  847|  28.6k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|   109k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|   109k|        if self.data.is_empty() {
  226|    427|            Ok(0)
  227|   109k|        } else if self.data.len() == 1 {
  228|    162|            self.data = &[];
  229|    162|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|   109k|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|  28.6k|                let bytes = 1;
  242|  28.6k|                let max_size = self.data.len() - bytes;
  243|  28.6k|                let (rest, for_size) = self.data.split_at(max_size);
  244|  28.6k|                self.data = rest;
  245|  28.6k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|  80.3k|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|  80.3k|                let bytes = 2;
  248|  80.3k|                let max_size = self.data.len() - bytes;
  249|  80.3k|                let (rest, for_size) = self.data.split_at(max_size);
  250|  80.3k|                self.data = rest;
  251|  80.3k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|   109k|            Ok(len)
  267|       |        }
  268|   109k|    }

_RINvMs1_CsjyRUoby6Pv7_4itoaNtB6_6Buffer6formatyECscNYaBR6dW1h_10serde_json:
   94|  3.90k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   95|  3.90k|        i.write(unsafe {
   96|  3.90k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   97|  3.90k|                as *mut <I as private::Sealed>::Buffer)
   98|  3.90k|        })
   99|  3.90k|    }
_RNvXsh_CsjyRUoby6Pv7_4itoayNtNtB5_7private6Sealed5writeCscNYaBR6dW1h_10serde_json:
  134|  3.90k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  135|  3.90k|                let is_nonnegative = self >= 0;
  136|  3.90k|                let mut n = if is_nonnegative {
  137|  3.90k|                    self as $conv_fn
  138|       |                } else {
  139|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  140|      0|                    (!(self as $conv_fn)).wrapping_add(1)
  141|       |                };
  142|  3.90k|                let mut curr = buf.len() as isize;
  143|  3.90k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  144|  3.90k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  145|  3.90k|
  146|  3.90k|                unsafe {
  147|  3.90k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  148|  3.90k|                    if mem::size_of::<$t>() >= 2 {
  149|       |                        // eagerly decode 4 characters at a time
  150|  18.2k|                        while n >= 10000 {
  151|  14.3k|                            let rem = (n % 10000) as isize;
  152|  14.3k|                            n /= 10000;
  153|  14.3k|
  154|  14.3k|                            let d1 = (rem / 100) << 1;
  155|  14.3k|                            let d2 = (rem % 100) << 1;
  156|  14.3k|                            curr -= 4;
  157|  14.3k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  158|  14.3k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  159|  14.3k|                        }
  160|      0|                    }
  161|       |
  162|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  163|  3.90k|                    let mut n = n as isize; // possibly reduce 64bit math
  164|  3.90k|
  165|  3.90k|                    // decode 2 more chars, if > 2 chars
  166|  3.90k|                    if n >= 100 {
  167|  3.37k|                        let d1 = (n % 100) << 1;
  168|  3.37k|                        n /= 100;
  169|  3.37k|                        curr -= 2;
  170|  3.37k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  171|  3.37k|                    }
  172|       |
  173|       |                    // decode last 1 or 2 chars
  174|  3.90k|                    if n < 10 {
  175|  3.72k|                        curr -= 1;
  176|  3.72k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  177|  3.72k|                    } else {
  178|    186|                        let d1 = n << 1;
  179|    186|                        curr -= 2;
  180|    186|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  181|    186|                    }
  182|       |
  183|  3.90k|                    if !is_nonnegative {
  184|      0|                        curr -= 1;
  185|      0|                        *buf_ptr.offset(curr) = b'-';
  186|  3.90k|                    }
  187|       |                }
  188|       |
  189|  3.90k|                let len = buf.len() - curr as usize;
  190|  3.90k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  191|  3.90k|                unsafe { str::from_utf8_unchecked(bytes) }
  192|  3.90k|            }
_RNvMs1_CsjyRUoby6Pv7_4itoaNtB5_6Buffer3newCscNYaBR6dW1h_10serde_json:
   86|  5.40k|    pub fn new() -> Buffer {
   87|  5.40k|        let bytes = [MaybeUninit::<u8>::uninit(); I128_MAX_LEN];
   88|  5.40k|        Buffer { bytes }
   89|  5.40k|    }
_RINvMs1_CsjyRUoby6Pv7_4itoaNtB6_6Buffer6formatxECscNYaBR6dW1h_10serde_json:
   94|  1.50k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   95|  1.50k|        i.write(unsafe {
   96|  1.50k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   97|  1.50k|                as *mut <I as private::Sealed>::Buffer)
   98|  1.50k|        })
   99|  1.50k|    }
_RNvXsf_CsjyRUoby6Pv7_4itoaxNtNtB5_7private6Sealed5writeCscNYaBR6dW1h_10serde_json:
  134|  1.50k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  135|  1.50k|                let is_nonnegative = self >= 0;
  136|  1.50k|                let mut n = if is_nonnegative {
  137|      0|                    self as $conv_fn
  138|       |                } else {
  139|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  140|  1.50k|                    (!(self as $conv_fn)).wrapping_add(1)
  141|       |                };
  142|  1.50k|                let mut curr = buf.len() as isize;
  143|  1.50k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  144|  1.50k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  145|  1.50k|
  146|  1.50k|                unsafe {
  147|  1.50k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  148|  1.50k|                    if mem::size_of::<$t>() >= 2 {
  149|       |                        // eagerly decode 4 characters at a time
  150|  6.82k|                        while n >= 10000 {
  151|  5.32k|                            let rem = (n % 10000) as isize;
  152|  5.32k|                            n /= 10000;
  153|  5.32k|
  154|  5.32k|                            let d1 = (rem / 100) << 1;
  155|  5.32k|                            let d2 = (rem % 100) << 1;
  156|  5.32k|                            curr -= 4;
  157|  5.32k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  158|  5.32k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  159|  5.32k|                        }
  160|      0|                    }
  161|       |
  162|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  163|  1.50k|                    let mut n = n as isize; // possibly reduce 64bit math
  164|  1.50k|
  165|  1.50k|                    // decode 2 more chars, if > 2 chars
  166|  1.50k|                    if n >= 100 {
  167|  1.20k|                        let d1 = (n % 100) << 1;
  168|  1.20k|                        n /= 100;
  169|  1.20k|                        curr -= 2;
  170|  1.20k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  171|  1.20k|                    }
  172|       |
  173|       |                    // decode last 1 or 2 chars
  174|  1.50k|                    if n < 10 {
  175|  1.36k|                        curr -= 1;
  176|  1.36k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  177|  1.36k|                    } else {
  178|    135|                        let d1 = n << 1;
  179|    135|                        curr -= 2;
  180|    135|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  181|    135|                    }
  182|       |
  183|  1.50k|                    if !is_nonnegative {
  184|  1.50k|                        curr -= 1;
  185|  1.50k|                        *buf_ptr.offset(curr) = b'-';
  186|  1.50k|                    }
  187|       |                }
  188|       |
  189|  1.50k|                let len = buf.len() - curr as usize;
  190|  1.50k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  191|  1.50k|                unsafe { str::from_utf8_unchecked(bytes) }
  192|  1.50k|            }

rust_fuzzer_test_input:
  259|  2.75k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.75k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.75k|
  262|  2.75k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.75k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.75k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.75k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.75k|                // get to longer inputs that actually lead to interesting executions
  267|  2.75k|                // quicker.
  268|  2.75k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.75k|                }
  271|  2.75k|
  272|  2.75k|                let mut u = Unstructured::new(bytes);
  273|  2.75k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.75k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.75k|                }
  291|       |
  292|  2.75k|                let data = match data {
  293|  2.75k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.75k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.75k|                result.to_libfuzzer_code()
  299|  2.75k|            }
_RNvNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  303|  2.75k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.75k|                $body
  305|  2.75k|            }
_RNvMs_Cs1IVhUpAZS7v_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   40|  2.75k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.75k|        match self {
   42|  2.70k|            Corpus::Keep => 0,
   43|     47|            Corpus::Reject => -1,
   44|       |        }
   45|  2.75k|    }
LLVMFuzzerTestOneInput:
   58|  2.75k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.75k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.75k|    });
   63|  2.75k|
   64|  2.75k|    match test_input {
   65|  2.75k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.75k|}
_RNCNvCs1IVhUpAZS7v_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.75k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.75k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.75k|        rust_fuzzer_test_input(data_slice)
   62|  2.75k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvCs7f28p97iUrb_3log9max_level:
 1270|  2.20M|pub fn max_level() -> LevelFilter {
 1271|  2.20M|    // Since `LevelFilter` is `repr(usize)`,
 1272|  2.20M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1273|  2.20M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1274|  2.20M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1275|  2.20M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1276|  2.20M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1277|  2.20M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1278|  2.20M|}
_RNvXs_Cs7f28p97iUrb_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  464|  3.60M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|  3.60M|        Some((*self as usize).cmp(&(*other as usize)))
  466|  3.60M|    }
_RNvXs_Cs7f28p97iUrb_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs1IPNbM7K0I4_8rsonpath:
  464|   800k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|   800k|        Some((*self as usize).cmp(&(*other as usize)))
  466|   800k|    }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   49|  2.75k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.75k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.75k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.75k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.75k|        // `SeqCst` operations on the slow path.
   54|  2.75k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.75k|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  965|  2.75k|        pub fn get(&self) -> Option<&T> {
  966|  2.75k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  2.75k|                None
  971|       |            }
  972|  2.75k|        }

_RNvMNtCs8MR3WrktZyl_3ryu6bufferNtB2_6Buffer3newCscNYaBR6dW1h_10serde_json:
   29|  8.29k|    pub fn new() -> Self {
   30|  8.29k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  8.29k|        Buffer { bytes }
   32|  8.29k|    }
_RNvXs5_NtCs8MR3WrktZyl_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCscNYaBR6dW1h_10serde_json:
  168|  8.29k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  8.29k|        raw::format64(self, result)
  170|  8.29k|    }
_RINvMNtCs8MR3WrktZyl_3ryu6bufferNtB3_6Buffer13format_finitedECscNYaBR6dW1h_10serde_json:
   72|  8.29k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  8.29k|        unsafe {
   74|  8.29k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  8.29k|            debug_assert!(n <= self.bytes.len());
   76|  8.29k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  8.29k|            str::from_utf8_unchecked(slice)
   78|  8.29k|        }
   79|  8.29k|    }

_RNvNtCs8MR3WrktZyl_3ryu6common8pow5bits:
   64|  8.12k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|       |    // This approximation works up to the point that the multiplication
   66|       |    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|       |    // would fail at 5^4004 which is just greater than 2^9297.
   68|  8.12k|    debug_assert!(e >= 0);
   69|  8.12k|    debug_assert!(e <= 3528);
   70|  8.12k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  8.12k|}
_RNvNtCs8MR3WrktZyl_3ryu6common10log10_pow5:
   90|  5.52k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|       |    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  5.52k|    debug_assert!(e >= 0);
   93|  5.52k|    debug_assert!(e <= 2620);
   94|  5.52k|    (e as u32 * 732923) >> 20
   95|  5.52k|}
_RNvNtCs8MR3WrktZyl_3ryu6common10log10_pow2:
   81|  2.59k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|       |    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  2.59k|    debug_assert!(e >= 0);
   84|  2.59k|    debug_assert!(e <= 1650);
   85|  2.59k|    (e as u32 * 78913) >> 18
   86|  2.59k|}

_RNvNtCs8MR3WrktZyl_3ryu3d2s16decimal_length17:
   36|  8.12k|pub fn decimal_length17(v: u64) -> u32 {
   37|       |    // This is slightly faster than a loop.
   38|       |    // The average output length is 16.38 digits, so we check high-to-low.
   39|       |    // Function precondition: v is not an 18, 19, or 20-digit number.
   40|       |    // (17 digits are sufficient for round-tripping.)
   41|  8.12k|    debug_assert!(v < 100000000000000000);
   42|       |
   43|  8.12k|    if v >= 10000000000000000 {
   44|  2.47k|        17
   45|  5.64k|    } else if v >= 1000000000000000 {
   46|  2.61k|        16
   47|  3.02k|    } else if v >= 100000000000000 {
   48|    944|        15
   49|  2.08k|    } else if v >= 10000000000000 {
   50|    177|        14
   51|  1.90k|    } else if v >= 1000000000000 {
   52|    187|        13
   53|  1.72k|    } else if v >= 100000000000 {
   54|    131|        12
   55|  1.59k|    } else if v >= 10000000000 {
   56|    367|        11
   57|  1.22k|    } else if v >= 1000000000 {
   58|    257|        10
   59|    966|    } else if v >= 100000000 {
   60|     81|        9
   61|    885|    } else if v >= 10000000 {
   62|    140|        8
   63|    745|    } else if v >= 1000000 {
   64|    143|        7
   65|    602|    } else if v >= 100000 {
   66|    128|        6
   67|    474|    } else if v >= 10000 {
   68|    115|        5
   69|    359|    } else if v >= 1000 {
   70|     73|        4
   71|    286|    } else if v >= 100 {
   72|    198|        3
   73|     88|    } else if v >= 10 {
   74|     12|        2
   75|       |    } else {
   76|     76|        1
   77|       |    }
   78|  8.12k|}
_RNvNtCs8MR3WrktZyl_3ryu3d2s3d2d:
   89|  8.12k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   90|  8.12k|    let (e2, m2) = if ieee_exponent == 0 {
   91|  1.69k|        (
   92|  1.69k|            // We subtract 2 so that the bounds computation has 2 additional bits.
   93|  1.69k|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   94|  1.69k|            ieee_mantissa,
   95|  1.69k|        )
   96|       |    } else {
   97|  6.43k|        (
   98|  6.43k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   99|  6.43k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  100|  6.43k|        )
  101|       |    };
  102|  8.12k|    let even = (m2 & 1) == 0;
  103|  8.12k|    let accept_bounds = even;
  104|  8.12k|
  105|  8.12k|    // Step 2: Determine the interval of valid decimal representations.
  106|  8.12k|    let mv = 4 * m2;
  107|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  108|  8.12k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  109|       |    // We would compute mp and mm like this:
  110|       |    // uint64_t mp = 4 * m2 + 2;
  111|       |    // uint64_t mm = mv - 1 - mm_shift;
  112|       |
  113|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  114|       |    let mut vr: u64;
  115|       |    let mut vp: u64;
  116|       |    let mut vm: u64;
  117|  8.12k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  118|  8.12k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  119|  8.12k|    let e10: i32;
  120|  8.12k|    let mut vm_is_trailing_zeros = false;
  121|  8.12k|    let mut vr_is_trailing_zeros = false;
  122|  8.12k|    if e2 >= 0 {
  123|       |        // I tried special-casing q == 0, but there was no effect on performance.
  124|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  125|  2.59k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  126|  2.59k|        e10 = q as i32;
  127|  2.59k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  128|  2.59k|        let i = -e2 + q as i32 + k;
  129|  2.59k|        vr = unsafe {
  130|  2.59k|            mul_shift_all_64(
  131|  2.59k|                m2,
  132|       |                #[cfg(feature = "small")]
  133|       |                &compute_inv_pow5(q),
  134|       |                #[cfg(not(feature = "small"))]
  135|       |                {
  136|  2.59k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  137|  2.59k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  138|  2.59k|                },
  139|  2.59k|                i as u32,
  140|  2.59k|                vp_uninit.as_mut_ptr(),
  141|  2.59k|                vm_uninit.as_mut_ptr(),
  142|  2.59k|                mm_shift,
  143|  2.59k|            )
  144|  2.59k|        };
  145|  2.59k|        vp = unsafe { vp_uninit.assume_init() };
  146|  2.59k|        vm = unsafe { vm_uninit.assume_init() };
  147|  2.59k|        if q <= 21 {
  148|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  149|       |            // may still be safe, but it's more difficult to reason about them.
  150|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  151|  1.05k|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  152|  1.05k|            if mv_mod5 == 0 {
  153|    283|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  154|    768|            } else if accept_bounds {
  155|    433|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  156|    433|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  157|    433|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  158|    433|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  159|    433|            } else {
  160|    335|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  161|    335|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  162|    335|            }
  163|  1.54k|        }
  164|       |    } else {
  165|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  166|  5.52k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  167|  5.52k|        e10 = q as i32 + e2;
  168|  5.52k|        let i = -e2 - q as i32;
  169|  5.52k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  170|  5.52k|        let j = q as i32 - k;
  171|  5.52k|        vr = unsafe {
  172|  5.52k|            mul_shift_all_64(
  173|  5.52k|                m2,
  174|       |                #[cfg(feature = "small")]
  175|       |                &compute_pow5(i as u32),
  176|       |                #[cfg(not(feature = "small"))]
  177|       |                {
  178|  5.52k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  179|  5.52k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  180|  5.52k|                },
  181|  5.52k|                j as u32,
  182|  5.52k|                vp_uninit.as_mut_ptr(),
  183|  5.52k|                vm_uninit.as_mut_ptr(),
  184|  5.52k|                mm_shift,
  185|  5.52k|            )
  186|  5.52k|        };
  187|  5.52k|        vp = unsafe { vp_uninit.assume_init() };
  188|  5.52k|        vm = unsafe { vm_uninit.assume_init() };
  189|  5.52k|        if q <= 1 {
  190|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  191|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  192|    972|            vr_is_trailing_zeros = true;
  193|    972|            if accept_bounds {
  194|    766|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  195|    766|                vm_is_trailing_zeros = mm_shift == 1;
  196|    766|            } else {
  197|    206|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  198|    206|                vp -= 1;
  199|    206|            }
  200|  4.55k|        } else if q < 63 {
  201|    781|            // TODO(ulfjack): Use a tighter bound here.
  202|    781|            // We want to know if the full product has at least q trailing zeros.
  203|    781|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  204|    781|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  205|    781|            // <=> p2(mv) >= q (because -e2 >= q)
  206|    781|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  207|  3.77k|        }
  208|       |    }
  209|       |
  210|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  211|  8.12k|    let mut removed = 0i32;
  212|  8.12k|    let mut last_removed_digit = 0u8;
  213|       |    // On average, we remove ~2 digits.
  214|  8.12k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  215|       |        // General case, which happens rarely (~0.7%).
  216|       |        loop {
  217|  6.78k|            let vp_div10 = div10(vp);
  218|  6.78k|            let vm_div10 = div10(vm);
  219|  6.78k|            if vp_div10 <= vm_div10 {
  220|  1.57k|                break;
  221|  5.20k|            }
  222|  5.20k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  223|  5.20k|            let vr_div10 = div10(vr);
  224|  5.20k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  225|  5.20k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  226|  5.20k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  227|  5.20k|            last_removed_digit = vr_mod10 as u8;
  228|  5.20k|            vr = vr_div10;
  229|  5.20k|            vp = vp_div10;
  230|  5.20k|            vm = vm_div10;
  231|  5.20k|            removed += 1;
  232|       |        }
  233|  1.57k|        if vm_is_trailing_zeros {
  234|       |            loop {
  235|    479|                let vm_div10 = div10(vm);
  236|    479|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  237|    479|                if vm_mod10 != 0 {
  238|    287|                    break;
  239|    192|                }
  240|    192|                let vp_div10 = div10(vp);
  241|    192|                let vr_div10 = div10(vr);
  242|    192|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  243|    192|                vr_is_trailing_zeros &= last_removed_digit == 0;
  244|    192|                last_removed_digit = vr_mod10 as u8;
  245|    192|                vr = vr_div10;
  246|    192|                vp = vp_div10;
  247|    192|                vm = vm_div10;
  248|    192|                removed += 1;
  249|       |            }
  250|  1.29k|        }
  251|  1.57k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  252|      0|            // Round even if the exact number is .....50..0.
  253|      0|            last_removed_digit = 4;
  254|  1.57k|        }
  255|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  256|  1.57k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  257|       |            as u64
  258|       |    } else {
  259|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  260|  6.54k|        let mut round_up = false;
  261|  6.54k|        let vp_div100 = div100(vp);
  262|  6.54k|        let vm_div100 = div100(vm);
  263|  6.54k|        // Optimization: remove two digits at a time (~86.2%).
  264|  6.54k|        if vp_div100 > vm_div100 {
  265|  4.47k|            let vr_div100 = div100(vr);
  266|  4.47k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  267|  4.47k|            round_up = vr_mod100 >= 50;
  268|  4.47k|            vr = vr_div100;
  269|  4.47k|            vp = vp_div100;
  270|  4.47k|            vm = vm_div100;
  271|  4.47k|            removed += 2;
  272|  4.47k|        }
  273|       |        // Loop iterations below (approximately), without optimization above:
  274|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  275|       |        // Loop iterations below (approximately), with optimization above:
  276|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  277|       |        loop {
  278|  9.54k|            let vp_div10 = div10(vp);
  279|  9.54k|            let vm_div10 = div10(vm);
  280|  9.54k|            if vp_div10 <= vm_div10 {
  281|  6.54k|                break;
  282|  3.00k|            }
  283|  3.00k|            let vr_div10 = div10(vr);
  284|  3.00k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  285|  3.00k|            round_up = vr_mod10 >= 5;
  286|  3.00k|            vr = vr_div10;
  287|  3.00k|            vp = vp_div10;
  288|  3.00k|            vm = vm_div10;
  289|  3.00k|            removed += 1;
  290|       |        }
  291|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  292|  6.54k|        vr + (vr == vm || round_up) as u64
  293|       |    };
  294|  8.12k|    let exp = e10 + removed;
  295|  8.12k|
  296|  8.12k|    FloatingDecimal64 {
  297|  8.12k|        exponent: exp,
  298|  8.12k|        mantissa: output,
  299|  8.12k|    }
  300|  8.12k|}

_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|  1.05k|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|  1.05k|    // I tried a case distinction on p, but there was no performance difference.
   58|  1.05k|    pow5_factor(value) >= p
   59|  1.05k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics4div5B3_:
   24|  3.98k|pub fn div5(x: u64) -> u64 {
   25|  3.98k|    x / 5
   26|  3.98k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics12mul_shift_64:
   71|  24.3k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  24.3k|    let b0 = m as u128 * mul.0 as u128;
   73|  24.3k|    let b2 = m as u128 * mul.1 as u128;
   74|  24.3k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  24.3k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics5div10B3_:
   29|  41.7k|pub fn div10(x: u64) -> u64 {
   30|  41.7k|    x / 10
   31|  41.7k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  8.12k|pub unsafe fn mul_shift_all_64(
   79|  8.12k|    m: u64,
   80|  8.12k|    mul: &(u64, u64),
   81|  8.12k|    j: u32,
   82|  8.12k|    vp: *mut u64,
   83|  8.12k|    vm: *mut u64,
   84|  8.12k|    mm_shift: u32,
   85|  8.12k|) -> u64 {
   86|  8.12k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  8.12k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  8.12k|    mul_shift_64(4 * m, mul, j)
   89|  8.12k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics11pow5_factor:
   39|  1.05k|fn pow5_factor(mut value: u64) -> u32 {
   40|  1.05k|    let mut count = 0u32;
   41|       |    loop {
   42|  2.93k|        debug_assert!(value != 0);
   43|  2.93k|        let q = div5(value);
   44|  2.93k|        let r = (value as u32).wrapping_sub(5u32.wrapping_mul(q as u32));
   45|  2.93k|        if r != 0 {
   46|  1.05k|            break;
   47|  1.88k|        }
   48|  1.88k|        value = q;
   49|  1.88k|        count += 1;
   50|       |    }
   51|  1.05k|    count
   52|  1.05k|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|    781|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|    781|    debug_assert!(value != 0);
   65|    781|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|    781|    (value & ((1u64 << p) - 1)) == 0
   68|    781|}
_RNvNtCs8MR3WrktZyl_3ryu14d2s_intrinsics6div100B3_:
   34|  17.5k|pub fn div100(x: u64) -> u64 {
   35|  17.5k|    x / 100
   36|  17.5k|}

_RNvNtNtCs8MR3WrktZyl_3ryu6pretty8exponent15write_exponent3:
    5|  6.50k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  6.50k|    let sign = k < 0;
    7|  6.50k|    if sign {
    8|  3.86k|        *result = b'-';
    9|  3.86k|        result = result.offset(1);
   10|  3.86k|        k = -k;
   11|  3.86k|    }
   12|       |
   13|  6.50k|    debug_assert!(k < 1000);
   14|  6.50k|    if k >= 100 {
   15|  4.49k|        *result = b'0' + (k / 100) as u8;
   16|  4.49k|        k %= 100;
   17|  4.49k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  4.49k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  4.49k|        sign as usize + 3
   20|  2.00k|    } else if k >= 10 {
   21|  1.94k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.94k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.94k|        sign as usize + 2
   24|       |    } else {
   25|     67|        *result = b'0' + k as u8;
   26|     67|        sign as usize + 1
   27|       |    }
   28|  6.50k|}

_RNvNtNtCs8MR3WrktZyl_3ryu6pretty8mantissa19write_mantissa_long:
    5|  8.04k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  8.04k|    if (output >> 32) != 0 {
    7|  6.90k|        // One expensive 64-bit division.
    8|  6.90k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  6.90k|        output /= 100_000_000;
   10|  6.90k|
   11|  6.90k|        let c = output2 % 10_000;
   12|  6.90k|        output2 /= 10_000;
   13|  6.90k|        let d = output2 % 10_000;
   14|  6.90k|        let c0 = (c % 100) << 1;
   15|  6.90k|        let c1 = (c / 100) << 1;
   16|  6.90k|        let d0 = (d % 100) << 1;
   17|  6.90k|        let d1 = (d / 100) << 1;
   18|  6.90k|        ptr::copy_nonoverlapping(
   19|  6.90k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  6.90k|            result.offset(-2),
   21|  6.90k|            2,
   22|  6.90k|        );
   23|  6.90k|        ptr::copy_nonoverlapping(
   24|  6.90k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  6.90k|            result.offset(-4),
   26|  6.90k|            2,
   27|  6.90k|        );
   28|  6.90k|        ptr::copy_nonoverlapping(
   29|  6.90k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  6.90k|            result.offset(-6),
   31|  6.90k|            2,
   32|  6.90k|        );
   33|  6.90k|        ptr::copy_nonoverlapping(
   34|  6.90k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  6.90k|            result.offset(-8),
   36|  6.90k|            2,
   37|  6.90k|        );
   38|  6.90k|        result = result.offset(-8);
   39|  6.90k|    }
   40|  8.04k|    write_mantissa(output as u32, result);
   41|  8.04k|}
_RNvNtNtCs8MR3WrktZyl_3ryu6pretty8mantissa14write_mantissa:
   44|  8.04k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  18.1k|    while output >= 10_000 {
   46|  10.0k|        let c = output - 10_000 * (output / 10_000);
   47|  10.0k|        output /= 10_000;
   48|  10.0k|        let c0 = (c % 100) << 1;
   49|  10.0k|        let c1 = (c / 100) << 1;
   50|  10.0k|        ptr::copy_nonoverlapping(
   51|  10.0k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  10.0k|            result.offset(-2),
   53|  10.0k|            2,
   54|  10.0k|        );
   55|  10.0k|        ptr::copy_nonoverlapping(
   56|  10.0k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  10.0k|            result.offset(-4),
   58|  10.0k|            2,
   59|  10.0k|        );
   60|  10.0k|        result = result.offset(-4);
   61|  10.0k|    }
   62|  8.04k|    if output >= 100 {
   63|  4.61k|        let c = (output % 100) << 1;
   64|  4.61k|        output /= 100;
   65|  4.61k|        ptr::copy_nonoverlapping(
   66|  4.61k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  4.61k|            result.offset(-2),
   68|  4.61k|            2,
   69|  4.61k|        );
   70|  4.61k|        result = result.offset(-2);
   71|  4.61k|    }
   72|  8.04k|    if output >= 10 {
   73|  3.53k|        let c = output << 1;
   74|  3.53k|        ptr::copy_nonoverlapping(
   75|  3.53k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  3.53k|            result.offset(-2),
   77|  3.53k|            2,
   78|  3.53k|        );
   79|  4.51k|    } else {
   80|  4.51k|        *result.offset(-1) = b'0' + output as u8;
   81|  4.51k|    }
   82|  8.04k|}

_RNvNtCs8MR3WrktZyl_3ryu6pretty8format64:
   52|  8.29k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  8.29k|    let bits = f.to_bits();
   54|  8.29k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  8.29k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  8.29k|    let ieee_exponent =
   57|  8.29k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  8.29k|
   59|  8.29k|    let mut index = 0isize;
   60|  8.29k|    if sign {
   61|  3.10k|        *result = b'-';
   62|  3.10k|        index += 1;
   63|  5.18k|    }
   64|       |
   65|  8.29k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|    168|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|    168|        return sign as usize + 3;
   68|  8.12k|    }
   69|  8.12k|
   70|  8.12k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  8.12k|
   72|  8.12k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  8.12k|    let k = v.exponent as isize;
   74|  8.12k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  8.12k|    debug_assert!(k >= -324);
   76|       |
   77|  8.12k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|  1.12k|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|  1.12k|        for i in length..kk {
   81|    985|            *result.offset(index + i) = b'0';
   82|    985|        }
   83|  1.12k|        *result.offset(index + kk) = b'.';
   84|  1.12k|        *result.offset(index + kk + 1) = b'0';
   85|  1.12k|        index as usize + kk as usize + 2
   86|  7.00k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|    118|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|    118|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|    118|        *result.offset(index + kk) = b'.';
   91|    118|        index as usize + length as usize + 1
   92|  6.88k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    376|        *result.offset(index) = b'0';
   95|    376|        *result.offset(index + 1) = b'.';
   96|    376|        let offset = 2 - kk;
   97|    731|        for i in 2..offset {
   98|    731|            *result.offset(index + i) = b'0';
   99|    731|        }
  100|    376|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    376|        index as usize + length as usize + offset as usize
  102|  6.50k|    } else if length == 1 {
  103|       |        // 1e30
  104|     74|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     74|        *result.offset(index + 1) = b'e';
  106|     74|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  6.43k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  6.43k|        *result.offset(index) = *result.offset(index + 1);
  111|  6.43k|        *result.offset(index + 1) = b'.';
  112|  6.43k|        *result.offset(index + length + 1) = b'e';
  113|  6.43k|        index as usize
  114|  6.43k|            + length as usize
  115|  6.43k|            + 2
  116|  6.43k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  8.29k|}

_RINvXs_NtNtCsflWmtj16Soz_5serde3ser5implsNtNtCshJIxznpEM8j_5alloc6string6StringNtB7_9Serialize9serializeINtNtCscNYaBR6dW1h_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   54|  78.6k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   55|  78.6k|    where
   56|  78.6k|        S: Serializer,
   57|  78.6k|    {
   58|  78.6k|        serializer.serialize_str(self)
   59|  78.6k|    }
_RINvXs1G_NtNtCsflWmtj16Soz_5serde3ser5implsRNtNtCscNYaBR6dW1h_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  496|  62.3k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  62.3k|            where
  498|  62.3k|                S: Serializer,
  499|  62.3k|            {
  500|  62.3k|                (**self).serialize(serializer)
  501|  62.3k|            }
_RINvXs1m_NtNtCsflWmtj16Soz_5serde3ser5implsINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCscNYaBR6dW1h_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  197|  42.2k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  198|  42.2k|            where
  199|  42.2k|                S: Serializer,
  200|  42.2k|            {
  201|  42.2k|                serializer.collect_seq(self)
  202|  42.2k|            }

_RINvYQINtNtCscNYaBR6dW1h_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBX_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EEB9_:
 1271|  42.2k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  42.2k|    where
 1273|  42.2k|        I: IntoIterator,
 1274|  42.2k|        <I as IntoIterator>::Item: Serialize,
 1275|  42.2k|    {
 1276|  42.2k|        let mut iter = iter.into_iter();
 1277|  42.2k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  42.2k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  42.2k|        serializer.end()
 1280|  42.2k|    }
_RINvYINtNtCscNYaBR6dW1h_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBT_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeMap15serialize_entryNtNtCshJIxznpEM8j_5alloc6string6StringB14_EB8_:
 1801|  78.6k|    fn serialize_entry<K: ?Sized, V: ?Sized>(
 1802|  78.6k|        &mut self,
 1803|  78.6k|        key: &K,
 1804|  78.6k|        value: &V,
 1805|  78.6k|    ) -> Result<(), Self::Error>
 1806|  78.6k|    where
 1807|  78.6k|        K: Serialize,
 1808|  78.6k|        V: Serialize,
 1809|  78.6k|    {
 1810|  78.6k|        tri!(self.serialize_key(key));
 1811|  78.6k|        self.serialize_value(value)
 1812|  78.6k|    }
_RNCINvYQINtNtCscNYaBR6dW1h_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB1a_EE0Bb_:
 1278|  62.3k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCsflWmtj16Soz_5serde3ser17iterator_len_hintINtNtNtCslATUeuPuGvJ_4core5slice4iter4IterNtNtCscNYaBR6dW1h_10serde_json5value5ValueEEB1v_:
 1944|  42.2k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|  42.2k|where
 1946|  42.2k|    I: Iterator,
 1947|  42.2k|{
 1948|  42.2k|    match iter.size_hint() {
 1949|  42.2k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  42.2k|}

_RINvXs8_NtCscNYaBR6dW1h_10serde_json3mapINtB6_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorTBM_B1o_EE9from_iterINtNtNtB1P_8adapters3map3MapINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map8IntoIterBM_NtNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB4B_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4v_B1o_INtNtB1R_7convert4FromB4t_E4froms_0EEB4B_:
  479|  46.0k|    fn from_iter<T>(iter: T) -> Self
  480|  46.0k|    where
  481|  46.0k|        T: IntoIterator<Item = (String, Value)>,
  482|  46.0k|    {
  483|  46.0k|        Map {
  484|  46.0k|            map: FromIterator::from_iter(iter),
  485|  46.0k|        }
  486|  46.0k|    }
_RNvXsd_NtCscNYaBR6dW1h_10serde_json3mapRINtB5_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  872|  46.0k|    fn into_iter(self) -> Self::IntoIter {
  873|  46.0k|        Iter {
  874|  46.0k|            iter: self.map.iter(),
  875|  46.0k|        }
  876|  46.0k|    }
_RNvXsg_NtCscNYaBR6dW1h_10serde_json3mapNtB5_4IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB7_:
  503|   124k|            fn next(&mut self) -> Option<Self::Item> {
  504|   124k|                self.iter.next()
  505|   124k|            }
_RNvMNtCscNYaBR6dW1h_10serde_json3mapINtB2_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  267|  46.0k|    pub fn len(&self) -> usize {
  268|  46.0k|        self.map.len()
  269|  46.0k|    }

_RNvXsq_NtCscNYaBR6dW1h_10serde_json6numberNtB5_6NumberINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  755|  5.40k|                fn from(i: $ty) -> Self {
  756|  5.40k|                    let n = {
  757|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  758|       |                        {
  759|  5.40k|                            if i < 0 {
  760|  1.50k|                                N::NegInt(i as i64)
  761|       |                            } else {
  762|  3.90k|                                N::PosInt(i as u64)
  763|       |                            }
  764|       |                        }
  765|       |                        #[cfg(feature = "arbitrary_precision")]
  766|       |                        {
  767|       |                            itoa::Buffer::new().format(i).to_owned()
  768|       |                        }
  769|       |                    };
  770|  5.40k|                    Number { n }
  771|  5.40k|                }
_RNvMs1_NtCscNYaBR6dW1h_10serde_json6numberNtB5_6Number8from_f64B7_:
  264|  9.05k|    pub fn from_f64(f: f64) -> Option<Number> {
  265|  9.05k|        if f.is_finite() {
  266|  8.29k|            let n = {
  267|  8.29k|                #[cfg(not(feature = "arbitrary_precision"))]
  268|  8.29k|                {
  269|  8.29k|                    N::Float(f)
  270|  8.29k|                }
  271|  8.29k|                #[cfg(feature = "arbitrary_precision")]
  272|  8.29k|                {
  273|  8.29k|                    ryu::Buffer::new().format_finite(f).to_owned()
  274|  8.29k|                }
  275|  8.29k|            };
  276|  8.29k|            Some(Number { n })
  277|       |        } else {
  278|    767|            None
  279|       |        }
  280|  9.05k|    }
_RINvXs4_NtCscNYaBR6dW1h_10serde_json6numberNtB6_6NumberNtNtCsflWmtj16Soz_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB2a_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  372|  13.6k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  373|  13.6k|    where
  374|  13.6k|        S: Serializer,
  375|  13.6k|    {
  376|  13.6k|        match self.n {
  377|  3.90k|            N::PosInt(u) => serializer.serialize_u64(u),
  378|  1.50k|            N::NegInt(i) => serializer.serialize_i64(i),
  379|  8.29k|            N::Float(f) => serializer.serialize_f64(f),
  380|       |        }
  381|  13.6k|    }

_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_mapB7_:
  345|  46.0k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  346|  46.0k|        tri!(self
  347|  46.0k|            .formatter
  348|  46.0k|            .begin_object(&mut self.writer)
  349|  46.0k|            .map_err(Error::io));
  350|  46.0k|        if len == Some(0) {
  351|  4.51k|            tri!(self
  352|  4.51k|                .formatter
  353|  4.51k|                .end_object(&mut self.writer)
  354|  4.51k|                .map_err(Error::io));
  355|  4.51k|            Ok(Compound::Map {
  356|  4.51k|                ser: self,
  357|  4.51k|                state: State::Empty,
  358|  4.51k|            })
  359|       |        } else {
  360|  41.5k|            Ok(Compound::Map {
  361|  41.5k|                ser: self,
  362|  41.5k|                state: State::First,
  363|  41.5k|            })
  364|       |        }
  365|  46.0k|    }
_RINvXs6_NtCscNYaBR6dW1h_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeMap15serialize_valueB1a_EB8_:
  642|  78.6k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  643|  78.6k|    where
  644|  78.6k|        T: ?Sized + Serialize,
  645|  78.6k|    {
  646|  78.6k|        match self {
  647|  78.6k|            Compound::Map { ser, .. } => {
  648|  78.6k|                tri!(ser
  649|  78.6k|                    .formatter
  650|  78.6k|                    .begin_object_value(&mut ser.writer)
  651|  78.6k|                    .map_err(Error::io));
  652|  78.6k|                tri!(value.serialize(&mut **ser));
  653|  78.6k|                ser.formatter
  654|  78.6k|                    .end_object_value(&mut ser.writer)
  655|  78.6k|                    .map_err(Error::io)
  656|       |            }
  657|       |            #[cfg(feature = "arbitrary_precision")]
  658|       |            Compound::Number { .. } => unreachable!(),
  659|       |            #[cfg(feature = "raw_value")]
  660|       |            Compound::RawValue { .. } => unreachable!(),
  661|       |        }
  662|  78.6k|    }
_RNvXs9_NtCscNYaBR6dW1h_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB17_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_strB7_:
  800|  78.6k|    fn serialize_str(self, value: &str) -> Result<()> {
  801|  78.6k|        self.ser.serialize_str(value)
  802|  78.6k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1866|  78.6k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1867|  78.6k|    where
 1868|  78.6k|        W: ?Sized + io::Write,
 1869|  78.6k|    {
 1870|  78.6k|        if first {
 1871|  41.5k|            Ok(())
 1872|       |        } else {
 1873|  37.0k|            writer.write_all(b",")
 1874|       |        }
 1875|  78.6k|    }
_RNvXsi_NtCscNYaBR6dW1h_10serde_json3serNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  458|   140k|#[derive(Eq, PartialEq)]
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1857|  46.0k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1858|  46.0k|    where
 1859|  46.0k|        W: ?Sized + io::Write,
 1860|  46.0k|    {
 1861|  46.0k|        writer.write_all(b"}")
 1862|  46.0k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1722|  85.2k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1723|  85.2k|    where
 1724|  85.2k|        W: ?Sized + io::Write,
 1725|  85.2k|    {
 1726|  85.2k|        writer.write_all(b"\"")
 1727|  85.2k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1557|  22.2k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1558|  22.2k|    where
 1559|  22.2k|        W: ?Sized + io::Write,
 1560|  22.2k|    {
 1561|  22.2k|        writer.write_all(b"null")
 1562|  22.2k|    }
_RINvNtCscNYaBR6dW1h_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBQ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterB11_EB4_:
 2139|  2.75k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2140|  2.75k|where
 2141|  2.75k|    W: io::Write,
 2142|  2.75k|    T: ?Sized + Serialize,
 2143|  2.75k|{
 2144|  2.75k|    let mut ser = Serializer::new(writer);
 2145|  2.75k|    value.serialize(&mut ser)
 2146|  2.75k|}
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1742|  49.5k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1743|  49.5k|    where
 1744|  49.5k|        W: ?Sized + io::Write,
 1745|  49.5k|    {
 1746|  49.5k|        writer.write_all(fragment.as_bytes())
 1747|  49.5k|    }
_RINvXs6_NtCscNYaBR6dW1h_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeMap13serialize_keyNtNtCshJIxznpEM8j_5alloc6string6StringEB8_:
  616|  78.6k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  617|  78.6k|    where
  618|  78.6k|        T: ?Sized + Serialize,
  619|  78.6k|    {
  620|  78.6k|        match self {
  621|  78.6k|            Compound::Map { ser, state } => {
  622|  78.6k|                tri!(ser
  623|  78.6k|                    .formatter
  624|  78.6k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  625|  78.6k|                    .map_err(Error::io));
  626|  78.6k|                *state = State::Rest;
  627|       |
  628|  78.6k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  629|       |
  630|  78.6k|                ser.formatter
  631|  78.6k|                    .end_object_key(&mut ser.writer)
  632|  78.6k|                    .map_err(Error::io)
  633|       |            }
  634|       |            #[cfg(feature = "arbitrary_precision")]
  635|       |            Compound::Number { .. } => unreachable!(),
  636|       |            #[cfg(feature = "raw_value")]
  637|       |            Compound::RawValue { .. } => unreachable!(),
  638|       |        }
  639|  78.6k|    }
_RNvMs0_NtCscNYaBR6dW1h_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   48|  2.75k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   49|  2.75k|        Serializer { writer, formatter }
   50|  2.75k|    }
_RNvMNtCscNYaBR6dW1h_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   24|  2.75k|    pub fn new(writer: W) -> Self {
   25|  2.75k|        Serializer::with_formatter(writer, CompactFormatter)
   26|  2.75k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1701|  8.29k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1702|  8.29k|    where
 1703|  8.29k|        W: ?Sized + io::Write,
 1704|  8.29k|    {
 1705|  8.29k|        let mut buffer = ryu::Buffer::new();
 1706|  8.29k|        let s = buffer.format_finite(value);
 1707|  8.29k|        writer.write_all(s.as_bytes())
 1708|  8.29k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_i64B7_:
  104|  1.50k|    fn serialize_i64(self, value: i64) -> Result<()> {
  105|  1.50k|        self.formatter
  106|  1.50k|            .write_i64(&mut self.writer, value)
  107|  1.50k|            .map_err(Error::io)
  108|  1.50k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1732|  85.2k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1733|  85.2k|    where
 1734|  85.2k|        W: ?Sized + io::Write,
 1735|  85.2k|    {
 1736|  85.2k|        writer.write_all(b"\"")
 1737|  85.2k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer14serialize_unitB7_:
  198|  22.2k|    fn serialize_unit(self) -> Result<()> {
  199|  22.2k|        self.formatter
  200|  22.2k|            .write_null(&mut self.writer)
  201|  22.2k|            .map_err(Error::io)
  202|  22.2k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1837|  62.3k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1838|  62.3k|    where
 1839|  62.3k|        W: ?Sized + io::Write,
 1840|  62.3k|    {
 1841|  62.3k|        Ok(())
 1842|  62.3k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer14serialize_boolB7_:
   76|  12.8k|    fn serialize_bool(self, value: bool) -> Result<()> {
   77|  12.8k|        self.formatter
   78|  12.8k|            .write_bool(&mut self.writer, value)
   79|  12.8k|            .map_err(Error::io)
   80|  12.8k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_seqB7_:
  280|  42.2k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  281|  42.2k|        tri!(self
  282|  42.2k|            .formatter
  283|  42.2k|            .begin_array(&mut self.writer)
  284|  42.2k|            .map_err(Error::io));
  285|  42.2k|        if len == Some(0) {
  286|  3.12k|            tri!(self
  287|  3.12k|                .formatter
  288|  3.12k|                .end_array(&mut self.writer)
  289|  3.12k|                .map_err(Error::io));
  290|  3.12k|            Ok(Compound::Map {
  291|  3.12k|                ser: self,
  292|  3.12k|                state: State::Empty,
  293|  3.12k|            })
  294|       |        } else {
  295|  39.1k|            Ok(Compound::Map {
  296|  39.1k|                ser: self,
  297|  39.1k|                state: State::First,
  298|  39.1k|            })
  299|       |        }
  300|  42.2k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_u64B7_:
  138|  3.90k|    fn serialize_u64(self, value: u64) -> Result<()> {
  139|  3.90k|        self.formatter
  140|  3.90k|            .write_u64(&mut self.writer, value)
  141|  3.90k|            .map_err(Error::io)
  142|  3.90k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1613|  1.50k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1614|  1.50k|    where
 1615|  1.50k|        W: ?Sized + io::Write,
 1616|  1.50k|    {
 1617|  1.50k|        let mut buffer = itoa::Buffer::new();
 1618|  1.50k|        let s = buffer.format(value);
 1619|  1.50k|        writer.write_all(s.as_bytes())
 1620|  1.50k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1824|  62.3k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1825|  62.3k|    where
 1826|  62.3k|        W: ?Sized + io::Write,
 1827|  62.3k|    {
 1828|  62.3k|        if first {
 1829|  39.1k|            Ok(())
 1830|       |        } else {
 1831|  23.2k|            writer.write_all(b",")
 1832|       |        }
 1833|  62.3k|    }
_RNvMsa_NtCscNYaBR6dW1h_10serde_json3serNtB5_10CharEscape17from_escape_tableB7_:
 1537|   176k|    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {
 1538|   176k|        match escape {
 1539|    337|            self::BB => CharEscape::Backspace,
 1540|    475|            self::TT => CharEscape::Tab,
 1541|  1.07k|            self::NN => CharEscape::LineFeed,
 1542|    587|            self::FF => CharEscape::FormFeed,
 1543|  1.27k|            self::RR => CharEscape::CarriageReturn,
 1544|  12.8k|            self::QU => CharEscape::Quote,
 1545|    609|            self::BS => CharEscape::ReverseSolidus,
 1546|   159k|            self::UU => CharEscape::AsciiControl(byte),
 1547|      0|            _ => unreachable!(),
 1548|       |        }
 1549|   176k|    }
_RINvXs2_NtCscNYaBR6dW1h_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeSeq17serialize_elementRB1a_EB8_:
  487|  62.3k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  488|  62.3k|    where
  489|  62.3k|        T: ?Sized + Serialize,
  490|  62.3k|    {
  491|  62.3k|        match self {
  492|  62.3k|            Compound::Map { ser, state } => {
  493|  62.3k|                tri!(ser
  494|  62.3k|                    .formatter
  495|  62.3k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  496|  62.3k|                    .map_err(Error::io));
  497|  62.3k|                *state = State::Rest;
  498|  62.3k|                tri!(value.serialize(&mut **ser));
  499|  62.3k|                ser.formatter
  500|  62.3k|                    .end_array_value(&mut ser.writer)
  501|  62.3k|                    .map_err(Error::io)
  502|       |            }
  503|       |            #[cfg(feature = "arbitrary_precision")]
  504|       |            Compound::Number { .. } => unreachable!(),
  505|       |            #[cfg(feature = "raw_value")]
  506|       |            Compound::RawValue { .. } => unreachable!(),
  507|       |        }
  508|  62.3k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1814|  42.2k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1815|  42.2k|    where
 1816|  42.2k|        W: ?Sized + io::Write,
 1817|  42.2k|    {
 1818|  42.2k|        writer.write_all(b"]")
 1819|  42.2k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1847|  46.0k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1848|  46.0k|    where
 1849|  46.0k|        W: ?Sized + io::Write,
 1850|  46.0k|    {
 1851|  46.0k|        writer.write_all(b"{")
 1852|  46.0k|    }
_RINvNtCscNYaBR6dW1h_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB19_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2061|  85.2k|fn format_escaped_str_contents<W, F>(
 2062|  85.2k|    writer: &mut W,
 2063|  85.2k|    formatter: &mut F,
 2064|  85.2k|    value: &str,
 2065|  85.2k|) -> io::Result<()>
 2066|  85.2k|where
 2067|  85.2k|    W: ?Sized + io::Write,
 2068|  85.2k|    F: ?Sized + Formatter,
 2069|  85.2k|{
 2070|  85.2k|    let bytes = value.as_bytes();
 2071|  85.2k|
 2072|  85.2k|    let mut start = 0;
 2073|       |
 2074|   360k|    for (i, &byte) in bytes.iter().enumerate() {
 2075|   360k|        let escape = ESCAPE[byte as usize];
 2076|   360k|        if escape == 0 {
 2077|   183k|            continue;
 2078|   176k|        }
 2079|   176k|
 2080|   176k|        if start < i {
 2081|  28.6k|            tri!(formatter.write_string_fragment(writer, &value[start..i]));
 2082|   147k|        }
 2083|       |
 2084|   176k|        let char_escape = CharEscape::from_escape_table(escape, byte);
 2085|   176k|        tri!(formatter.write_char_escape(writer, char_escape));
 2086|       |
 2087|   176k|        start = i + 1;
 2088|       |    }
 2089|       |
 2090|  85.2k|    if start == bytes.len() {
 2091|  64.2k|        return Ok(());
 2092|  20.9k|    }
 2093|  20.9k|
 2094|  20.9k|    formatter.write_string_fragment(writer, &value[start..])
 2095|  85.2k|}
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1668|  3.90k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1669|  3.90k|    where
 1670|  3.90k|        W: ?Sized + io::Write,
 1671|  3.90k|    {
 1672|  3.90k|        let mut buffer = itoa::Buffer::new();
 1673|  3.90k|        let s = buffer.format(value);
 1674|  3.90k|        writer.write_all(s.as_bytes())
 1675|  3.90k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1901|  78.6k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1902|  78.6k|    where
 1903|  78.6k|        W: ?Sized + io::Write,
 1904|  78.6k|    {
 1905|  78.6k|        Ok(())
 1906|  78.6k|    }
_RNvXs6_NtCscNYaBR6dW1h_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeMap3endB7_:
  665|  46.0k|    fn end(self) -> Result<()> {
  666|  46.0k|        match self {
  667|  46.0k|            Compound::Map { ser, state } => match state {
  668|  4.51k|                State::Empty => Ok(()),
  669|  41.5k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  670|       |            },
  671|       |            #[cfg(feature = "arbitrary_precision")]
  672|       |            Compound::Number { .. } => unreachable!(),
  673|       |            #[cfg(feature = "raw_value")]
  674|       |            Compound::RawValue { .. } => unreachable!(),
  675|       |        }
  676|  46.0k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1566|  12.8k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1567|  12.8k|    where
 1568|  12.8k|        W: ?Sized + io::Write,
 1569|  12.8k|    {
 1570|  12.8k|        let s = if value {
 1571|  9.95k|            b"true" as &[u8]
 1572|       |        } else {
 1573|  2.90k|            b"false" as &[u8]
 1574|       |        };
 1575|  12.8k|        writer.write_all(s)
 1576|  12.8k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1A_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1892|  78.6k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1893|  78.6k|    where
 1894|  78.6k|        W: ?Sized + io::Write,
 1895|  78.6k|    {
 1896|  78.6k|        writer.write_all(b":")
 1897|  78.6k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1751|   176k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1752|   176k|    where
 1753|   176k|        W: ?Sized + io::Write,
 1754|   176k|    {
 1755|       |        use self::CharEscape::*;
 1756|       |
 1757|   176k|        let s = match char_escape {
 1758|  12.8k|            Quote => b"\\\"",
 1759|    609|            ReverseSolidus => b"\\\\",
 1760|      0|            Solidus => b"\\/",
 1761|    337|            Backspace => b"\\b",
 1762|    587|            FormFeed => b"\\f",
 1763|  1.07k|            LineFeed => b"\\n",
 1764|  1.27k|            CarriageReturn => b"\\r",
 1765|    475|            Tab => b"\\t",
 1766|   159k|            AsciiControl(byte) => {
 1767|   159k|                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1768|   159k|                let bytes = &[
 1769|   159k|                    b'\\',
 1770|   159k|                    b'u',
 1771|   159k|                    b'0',
 1772|   159k|                    b'0',
 1773|   159k|                    HEX_DIGITS[(byte >> 4) as usize],
 1774|   159k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1775|   159k|                ];
 1776|   159k|                return writer.write_all(bytes);
 1777|       |            }
 1778|       |        };
 1779|       |
 1780|  17.2k|        writer.write_all(s)
 1781|   176k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_f64B7_:
  165|  8.29k|    fn serialize_f64(self, value: f64) -> Result<()> {
  166|  8.29k|        match value.classify() {
  167|      0|            FpCategory::Nan | FpCategory::Infinite => self
  168|      0|                .formatter
  169|      0|                .write_null(&mut self.writer)
  170|      0|                .map_err(Error::io),
  171|  8.29k|            _ => self
  172|  8.29k|                .formatter
  173|  8.29k|                .write_f64(&mut self.writer, value)
  174|  8.29k|                .map_err(Error::io),
  175|       |        }
  176|  8.29k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1804|  42.2k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1805|  42.2k|    where
 1806|  42.2k|        W: ?Sized + io::Write,
 1807|  42.2k|    {
 1808|  42.2k|        writer.write_all(b"[")
 1809|  42.2k|    }
_RINvNtCscNYaBR6dW1h_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtB10_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2051|  85.2k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2052|  85.2k|where
 2053|  85.2k|    W: ?Sized + io::Write,
 2054|  85.2k|    F: ?Sized + Formatter,
 2055|  85.2k|{
 2056|  85.2k|    tri!(formatter.begin_string(writer));
 2057|  85.2k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2058|  85.2k|    formatter.end_string(writer)
 2059|  85.2k|}
_RNvXs2_NtCscNYaBR6dW1h_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCsflWmtj16Soz_5serde3ser12SerializeSeq3endB7_:
  511|  42.2k|    fn end(self) -> Result<()> {
  512|  42.2k|        match self {
  513|  42.2k|            Compound::Map { ser, state } => match state {
  514|  3.12k|                State::Empty => Ok(()),
  515|  39.1k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  516|       |            },
  517|       |            #[cfg(feature = "arbitrary_precision")]
  518|       |            Compound::Number { .. } => unreachable!(),
  519|       |            #[cfg(feature = "raw_value")]
  520|       |            Compound::RawValue { .. } => unreachable!(),
  521|       |        }
  522|  42.2k|    }
_RNvXs1_NtCscNYaBR6dW1h_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCsflWmtj16Soz_5serde3ser10Serializer13serialize_strB7_:
  186|  85.2k|    fn serialize_str(self, value: &str) -> Result<()> {
  187|  85.2k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  188|  85.2k|    }
_RINvYNtNtCscNYaBR6dW1h_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1881|  78.6k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1882|  78.6k|    where
 1883|  78.6k|        W: ?Sized + io::Write,
 1884|  78.6k|    {
 1885|  78.6k|        Ok(())
 1886|  78.6k|    }

_RNvXsf_NtNtCscNYaBR6dW1h_10serde_json5value4fromNtB7_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   12|  5.40k|                fn from(n: $ty) -> Self {
   13|  5.40k|                    Value::Number(n.into())
   14|  5.40k|                }
_RNvXs_NtNtCscNYaBR6dW1h_10serde_json5value4fromNtB6_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromdE4from:
   59|  9.05k|    fn from(f: f64) -> Self {
   60|  9.05k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   61|  9.05k|    }

_RNvXs_NtCscNYaBR6dW1h_10serde_json5valueNtB4_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
  222|  2.75k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  223|  2.75k|        struct WriterFormatter<'a, 'b: 'a> {
  224|  2.75k|            inner: &'a mut fmt::Formatter<'b>,
  225|  2.75k|        }
  226|  2.75k|
  227|  2.75k|        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  228|  2.75k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|  2.75k|                // Safety: the serializer below only emits valid utf8 when using
  230|  2.75k|                // the default formatter.
  231|  2.75k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|  2.75k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|  2.75k|                Ok(buf.len())
  234|  2.75k|            }
  235|  2.75k|
  236|  2.75k|            fn flush(&mut self) -> io::Result<()> {
  237|  2.75k|                Ok(())
  238|  2.75k|            }
  239|  2.75k|        }
  240|  2.75k|
  241|  2.75k|        fn io_error(_: fmt::Error) -> io::Error {
  242|  2.75k|            // Error value does not matter because Display impl just maps it
  243|  2.75k|            // back to fmt::Error.
  244|  2.75k|            io::Error::new(io::ErrorKind::Other, "fmt error")
  245|  2.75k|        }
  246|  2.75k|
  247|  2.75k|        let alternate = f.alternate();
  248|  2.75k|        let mut wr = WriterFormatter { inner: f };
  249|  2.75k|        if alternate {
  250|       |            // {:#}
  251|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  252|       |        } else {
  253|       |            // {}
  254|  2.75k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  255|       |        }
  256|  2.75k|    }
_RNvXNvXs_NtCscNYaBR6dW1h_10serde_json5valueNtB7_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCs9a1gyOJxq9I_3std2io5Write5write:
  228|   760k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|   760k|                // Safety: the serializer below only emits valid utf8 when using
  230|   760k|                // the default formatter.
  231|   760k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|   760k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|   760k|                Ok(buf.len())
  234|   760k|            }

_RINvXNtNtCscNYaBR6dW1h_10serde_json5value3serNtB5_5ValueNtNtCsflWmtj16Soz_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BH_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|   143k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|   143k|    where
   15|   143k|        S: ::serde::Serializer,
   16|   143k|    {
   17|   143k|        match self {
   18|  22.2k|            Value::Null => serializer.serialize_unit(),
   19|  12.8k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  13.6k|            Value::Number(n) => n.serialize(serializer),
   21|  6.63k|            Value::String(s) => serializer.serialize_str(s),
   22|  42.2k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  46.0k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  46.0k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|   124k|                for (k, v) in m {
   28|  78.6k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  46.0k|                map.end()
   31|       |            }
   32|       |        }
   33|   143k|    }

_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  318|     86|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|     86|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|     86|}
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1845|   150k|    fn deref(&self) -> &[A::Item] {
 1846|   150k|        unsafe {
 1847|   150k|            let (ptr, len, _) = self.triple();
 1848|   150k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|   150k|        }
 1850|   150k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1225|     86|    fn reserve_one_unchecked(&mut self) {
 1226|     86|        debug_assert_eq!(self.len(), self.capacity());
 1227|     86|        let new_cap = self.len()
 1228|     86|            .checked_add(1)
 1229|     86|            .and_then(usize::checked_next_power_of_two)
 1230|     86|            .expect("capacity overflow");
 1231|     86|        infallible(self.try_grow(new_cap))
 1232|     86|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E4pushCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1114|  33.5k|    pub fn push(&mut self, value: A::Item) {
 1115|  33.5k|        unsafe {
 1116|  33.5k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  33.5k|            if *len == cap {
 1118|     86|                self.reserve_one_unchecked();
 1119|     86|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|     86|                ptr = heap_ptr;
 1121|     86|                len = heap_len;
 1122|  33.4k|            }
 1123|  33.5k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  33.5k|            *len += 1;
 1125|  33.5k|        }
 1126|  33.5k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB24_5range9RangeFullE9index_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2035|  19.0k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  19.0k|        &mut (&mut **self)[index]
 2037|  19.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E10triple_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  984|  61.1k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  61.1k|        unsafe {
  986|  61.1k|            if self.spilled() {
  987|  17.0k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  17.0k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  44.0k|                (
  991|  44.0k|                    self.data.inline_mut(),
  992|  44.0k|                    &mut self.capacity,
  993|  44.0k|                    Self::inline_capacity(),
  994|  44.0k|                )
  995|       |            }
  996|       |        }
  997|  61.1k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2420|   357k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E8try_growCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1173|     86|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|     86|        unsafe {
 1175|     86|            let unspilled = !self.spilled();
 1176|     86|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|     86|            assert!(new_cap >= len);
 1178|     86|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|     86|            } else if new_cap != cap {
 1187|     86|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|     86|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|     86|                if unspilled {
 1191|     86|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|     86|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|     86|                        .cast();
 1194|     86|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|     86|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|     86|                self.capacity = new_cap;
 1208|      0|            }
 1209|     86|            Ok(())
 1210|       |        }
 1211|     86|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1845|  35.9k|    fn deref(&self) -> &[A::Item] {
 1846|  35.9k|        unsafe {
 1847|  35.9k|            let (ptr, len, _) = self.triple();
 1848|  35.9k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  35.9k|        }
 1850|  35.9k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2117|  1.98k|    fn drop(&mut self) {
 2118|  1.98k|        unsafe {
 2119|  1.98k|            if self.spilled() {
 2120|     86|                let (ptr, &mut len) = self.data.heap_mut();
 2121|     86|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  1.90k|            } else {
 2123|  1.90k|                ptr::drop_in_place(&mut self[..]);
 2124|  1.90k|            }
 2125|       |        }
 2126|  1.98k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1855|  1.90k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  1.90k|        unsafe {
 1857|  1.90k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  1.90k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  1.90k|        }
 1860|  1.90k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E10inline_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  641|  44.0k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  44.0k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  44.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1001|   189k|    pub fn spilled(&self) -> bool {
 1002|   189k|        self.capacity > Self::inline_capacity()
 1003|   189k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E7spilledCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1001|  99.3k|    pub fn spilled(&self) -> bool {
 1002|  99.3k|        self.capacity > Self::inline_capacity()
 1003|  99.3k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  637|   149k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|   149k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|   149k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E3lenCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  952|    172|    pub fn len(&self) -> usize {
  953|    172|        self.triple().1
  954|    172|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E3popCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1130|  25.5k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  25.5k|        unsafe {
 1132|  25.5k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  25.5k|            let ptr: *const _ = ptr.as_ptr();
 1134|  25.5k|            if *len_ptr == 0 {
 1135|      0|                return None;
 1136|  25.5k|            }
 1137|  25.5k|            let last_index = *len_ptr - 1;
 1138|  25.5k|            *len_ptr = last_index;
 1139|  25.5k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  25.5k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFrameE6as_ptrCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2459|  35.9k|    fn as_ptr(self) -> *const T {
 2460|  35.9k|        self.0.as_ptr()
 2461|  35.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2459|   150k|    fn as_ptr(self) -> *const T {
 2460|   150k|        self.0.as_ptr()
 2461|   150k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  641|  19.0k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  19.0k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  19.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E6tripleCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  971|  36.1k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  36.1k|        unsafe {
  973|  36.1k|            if self.spilled() {
  974|  10.6k|                let (ptr, len) = self.data.heap();
  975|  10.6k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  25.5k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  36.1k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 1855|  19.0k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  19.0k|        unsafe {
 1857|  19.0k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  19.0k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  19.0k|        }
 1860|  19.0k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2117|  19.5k|    fn drop(&mut self) {
 2118|  19.5k|        unsafe {
 2119|  19.5k|            if self.spilled() {
 2120|    564|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    564|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  19.0k|            } else {
 2123|  19.0k|                ptr::drop_in_place(&mut self[..]);
 2124|  19.0k|            }
 2125|       |        }
 2126|  19.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E4heapCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  655|    875|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    875|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    875|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  926|   169k|    fn inline_capacity() -> usize {
  927|   169k|        if mem::size_of::<A::Item>() > 0 {
  928|   169k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   169k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBP_5state5StateEE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2455|   149k|    fn new(ptr: *const T) -> Option<Self> {
 2456|   149k|        NonNull::new(ptr as *mut T).map(Self)
 2457|   149k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2035|  1.90k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  1.90k|        &mut (&mut **self)[index]
 2037|  1.90k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  926|   357k|    fn inline_capacity() -> usize {
  927|   357k|        if mem::size_of::<A::Item>() > 0 {
  928|   357k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   357k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E8capacityCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  964|     86|    pub fn capacity(&self) -> usize {
  965|     86|        self.triple().2
  966|     86|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2420|   169k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  971|   150k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|   150k|        unsafe {
  973|   150k|            if self.spilled() {
  974|    875|                let (ptr, len) = self.data.heap();
  975|    875|                (ptr, len, self.capacity)
  976|       |            } else {
  977|   149k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|   150k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E8heap_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  659|  17.2k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  17.2k|        let h = &mut self.heap;
  661|  17.2k|        (h.0, &mut h.1)
  662|  17.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E6inlineCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  637|  25.5k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  25.5k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  25.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E9from_heapCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  664|     86|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|     86|        SmallVecData { heap: (ptr, len) }
  666|     86|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  984|  19.0k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  19.0k|        unsafe {
  986|  19.0k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  19.0k|                (
  991|  19.0k|                    self.data.inline_mut(),
  992|  19.0k|                    &mut self.capacity,
  993|  19.0k|                    Self::inline_capacity(),
  994|  19.0k|                )
  995|       |            }
  996|       |        }
  997|  19.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E8heap_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  659|    564|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|    564|        let h = &mut self.heap;
  661|    564|        (h.0, &mut h.1)
  662|    564|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E4heapCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  655|  10.6k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  10.6k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  10.6k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFrameECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  328|     86|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|     86|    let size = mem::size_of::<T>()
  330|     86|        .checked_mul(n)
  331|     86|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|     86|    let align = mem::align_of::<T>();
  333|     86|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|     86|}
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFrameE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
 2455|  25.5k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  25.5k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  25.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E3newBO_:
  779|  1.98k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  1.98k|        assert!(
  783|  1.98k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  1.98k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  1.98k|        SmallVec {
  787|  1.98k|            capacity: 0,
  788|  1.98k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  1.98k|        }
  790|  1.98k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBO_:
 1225|    426|    fn reserve_one_unchecked(&mut self) {
 1226|    426|        debug_assert_eq!(self.len(), self.capacity());
 1227|    426|        let new_cap = self.len()
 1228|    426|            .checked_add(1)
 1229|    426|            .and_then(usize::checked_next_power_of_two)
 1230|    426|            .expect("capacity overflow");
 1231|    426|        infallible(self.try_grow(new_cap))
 1232|    426|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrBR_:
 2459|  26.4k|    fn as_ptr(self) -> *const T {
 2460|  26.4k|        self.0.as_ptr()
 2461|  26.4k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop13increment_lenCs1IPNbM7K0I4_8rsonpath:
 2350|  33.2k|    fn increment_len(&mut self, increment: usize) {
 2351|  33.2k|        self.local_len += increment;
 2352|  33.2k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3newCs1IPNbM7K0I4_8rsonpath:
 2337|  26.4k|    fn new(len: &'a mut usize) -> Self {
 2338|  26.4k|        SetLenOnDrop {
 2339|  26.4k|            local_len: *len,
 2340|  26.4k|            len,
 2341|  26.4k|        }
 2342|  26.4k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E8heap_mutBS_:
  659|  1.85k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  1.85k|        let h = &mut self.heap;
  661|  1.85k|        (h.0, &mut h.1)
  662|  1.85k|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2420|  3.97k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E6inlineBT_:
  637|    345|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|    345|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|    345|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  645|  2.75k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.75k|        SmallVecData {
  647|  2.75k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.75k|        }
  649|  2.75k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB27_8adapters3map3MapINtCsa0TpSzywbAu_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB54_9Minimizer18process_superstate0EEBO_:
 2060|  26.4k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  26.4k|        let mut iter = iterable.into_iter();
 2062|  26.4k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  26.4k|        self.reserve(lower_size_bound);
 2064|  26.4k|
 2065|  26.4k|        unsafe {
 2066|  26.4k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  26.4k|            let ptr = ptr.as_ptr();
 2068|  26.4k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  59.7k|            while len.get() < cap {
 2070|  52.2k|                if let Some(out) = iter.next() {
 2071|  33.2k|                    ptr::write(ptr.add(len.get()), out);
 2072|  33.2k|                    len.increment_len(1);
 2073|  33.2k|                } else {
 2074|  19.0k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|  7.42k|        for elem in iter {
 2080|      0|            self.push(elem);
 2081|      0|        }
 2082|  26.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  946|  2.75k|    pub fn inline_size(&self) -> usize {
  947|  2.75k|        Self::inline_capacity()
  948|  2.75k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBO_:
 1855|  2.64k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  2.64k|        unsafe {
 1857|  2.64k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  2.64k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  2.64k|        }
 1860|  2.64k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E6tripleBO_:
  971|  1.27k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  1.27k|        unsafe {
  973|  1.27k|            if self.spilled() {
  974|    933|                let (ptr, len) = self.data.heap();
  975|    933|                (ptr, len, self.capacity)
  976|       |            } else {
  977|    345|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  1.27k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E4heapBT_:
  655|    933|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    933|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    933|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E8capacityBO_:
  964|    426|    pub fn capacity(&self) -> usize {
  965|    426|        self.triple().2
  966|    426|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11try_reserveBN_:
 1237|  26.4k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  26.4k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  26.4k|        // calls to it from callers.
 1240|  26.4k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  26.4k|        if cap - len >= additional {
 1242|  25.2k|            return Ok(());
 1243|  1.20k|        }
 1244|  1.20k|        let new_cap = len
 1245|  1.20k|            .checked_add(additional)
 1246|  1.20k|            .and_then(usize::checked_next_power_of_two)
 1247|  1.20k|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|  1.20k|        self.try_grow(new_cap)
 1249|  26.4k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBN_:
 1855|  37.8k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  37.8k|        unsafe {
 1857|  37.8k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  37.8k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  37.8k|        }
 1860|  37.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E3newBN_:
  779|  58.0k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  58.0k|        assert!(
  783|  58.0k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  58.0k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  58.0k|        SmallVec {
  787|  58.0k|            capacity: 0,
  788|  58.0k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  58.0k|        }
  790|  58.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E3lenBO_:
  952|    852|    pub fn len(&self) -> usize {
  953|    852|        self.triple().1
  954|    852|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  984|  61.1k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  61.1k|        unsafe {
  986|  61.1k|            if self.spilled() {
  987|  29.8k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  29.8k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  31.2k|                (
  991|  31.2k|                    self.data.inline_mut(),
  992|  31.2k|                    &mut self.capacity,
  993|  31.2k|                    Self::inline_capacity(),
  994|  31.2k|                )
  995|       |            }
  996|       |        }
  997|  61.1k|    }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB27_8adapters3map3MapINtCsa0TpSzywbAu_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5e_9Minimizer18process_superstate0EEBO_:
 2052|  26.4k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  26.4k|        let mut v = SmallVec::new();
 2054|  26.4k|        v.extend(iterable);
 2055|  26.4k|        v
 2056|  26.4k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2035|  2.64k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  2.64k|        &mut (&mut **self)[index]
 2037|  2.64k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E8try_growBO_:
 1173|    426|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    426|        unsafe {
 1175|    426|            let unspilled = !self.spilled();
 1176|    426|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    426|            assert!(new_cap >= len);
 1178|    426|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    426|            } else if new_cap != cap {
 1187|    426|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    426|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    426|                if unspilled {
 1191|    115|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    115|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    115|                        .cast();
 1194|    115|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|    311|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|    311|                    let new_ptr =
 1201|    311|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|    311|                    new_alloc = NonNull::new(new_ptr)
 1203|    311|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|    311|                        .cast();
 1205|       |                }
 1206|    426|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    426|                self.capacity = new_cap;
 1208|      0|            }
 1209|    426|            Ok(())
 1210|       |        }
 1211|    426|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBO_:
 2117|  2.75k|    fn drop(&mut self) {
 2118|  2.75k|        unsafe {
 2119|  2.75k|            if self.spilled() {
 2120|    115|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    115|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  2.64k|            } else {
 2123|  2.64k|                ptr::drop_in_place(&mut self[..]);
 2124|  2.64k|            }
 2125|       |        }
 2126|  2.75k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs1IPNbM7K0I4_8rsonpath:
  318|  26.8k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|  26.8k|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|  26.8k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E11from_inlineBS_:
  645|  58.0k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  58.0k|        SmallVecData {
  647|  58.0k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  58.0k|        }
  649|  58.0k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256EBJ_:
  328|    737|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|    737|    let size = mem::size_of::<T>()
  330|    737|        .checked_mul(n)
  331|    737|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|    737|    let align = mem::align_of::<T>();
  333|    737|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|    737|}
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3getCs1IPNbM7K0I4_8rsonpath:
 2345|  92.9k|    fn get(&self) -> usize {
 2346|  92.9k|        self.local_len
 2347|  92.9k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E9from_heapBT_:
  664|    426|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    426|        SmallVecData { heap: (ptr, len) }
  666|    426|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7reserveBN_:
 1219|  26.4k|    pub fn reserve(&mut self, additional: usize) {
 1220|  26.4k|        infallible(self.try_reserve(additional))
 1221|  26.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E8try_growBN_:
 1173|  1.20k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|  1.20k|        unsafe {
 1175|  1.20k|            let unspilled = !self.spilled();
 1176|  1.20k|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|  1.20k|            assert!(new_cap >= len);
 1178|  1.20k|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|  1.20k|            } else if new_cap != cap {
 1187|  1.20k|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|  1.20k|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|  1.20k|                if unspilled {
 1191|  1.20k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|  1.20k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|  1.20k|                        .cast();
 1194|  1.20k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|  1.20k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|  1.20k|                self.capacity = new_cap;
 1208|      0|            }
 1209|  1.20k|            Ok(())
 1210|       |        }
 1211|  1.20k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1001|  65.5k|    pub fn spilled(&self) -> bool {
 1002|  65.5k|        self.capacity > Self::inline_capacity()
 1003|  65.5k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBN_:
 2117|  38.4k|    fn drop(&mut self) {
 2118|  38.4k|        unsafe {
 2119|  38.4k|            if self.spilled() {
 2120|    643|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    643|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  37.8k|            } else {
 2123|  37.8k|                ptr::drop_in_place(&mut self[..]);
 2124|  37.8k|            }
 2125|       |        }
 2126|  38.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  779|  2.75k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.75k|        assert!(
  783|  2.75k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.75k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.75k|        SmallVec {
  787|  2.75k|            capacity: 0,
  788|  2.75k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.75k|        }
  790|  2.75k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1114|  28.8k|    pub fn push(&mut self, value: A::Item) {
 1115|  28.8k|        unsafe {
 1116|  28.8k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  28.8k|            if *len == cap {
 1118|    426|                self.reserve_one_unchecked();
 1119|    426|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|    426|                ptr = heap_ptr;
 1121|    426|                len = heap_len;
 1122|  28.4k|            }
 1123|  28.8k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  28.8k|            *len += 1;
 1125|  28.8k|        }
 1126|  28.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutBS_:
  641|  90.7k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  90.7k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  90.7k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayTNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBG_5state5StateEEBI_:
  328|  1.20k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  1.20k|    let size = mem::size_of::<T>()
  330|  1.20k|        .checked_mul(n)
  331|  1.20k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  1.20k|    let align = mem::align_of::<T>();
  333|  1.20k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  1.20k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E9from_heapBS_:
  664|  1.20k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|  1.20k|        SmallVecData { heap: (ptr, len) }
  666|  1.20k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  946|  1.98k|    pub fn inline_size(&self) -> usize {
  947|  1.98k|        Self::inline_capacity()
  948|  1.98k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  926|   100k|    fn inline_capacity() -> usize {
  927|   100k|        if mem::size_of::<A::Item>() > 0 {
  928|   100k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   100k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1130|  29.2k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  29.2k|        unsafe {
 1132|  29.2k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  29.2k|            let ptr: *const _ = ptr.as_ptr();
 1134|  29.2k|            if *len_ptr == 0 {
 1135|  2.70k|                return None;
 1136|  26.4k|            }
 1137|  26.4k|            let last_index = *len_ptr - 1;
 1138|  26.4k|            *len_ptr = last_index;
 1139|  26.4k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  29.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledBN_:
 1001|   158k|    pub fn spilled(&self) -> bool {
 1002|   158k|        self.capacity > Self::inline_capacity()
 1003|   158k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  645|  1.98k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  1.98k|        SmallVecData {
  647|  1.98k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  1.98k|        }
  649|  1.98k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2420|   103k|                fn size() -> usize { $size }
_RNvXsP_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs1IPNbM7K0I4_8rsonpath:
 2357|  26.4k|    fn drop(&mut self) {
 2358|  26.4k|        *self.len = self.local_len;
 2359|  26.4k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256E3newBS_:
 2455|    345|    fn new(ptr: *const T) -> Option<Self> {
 2456|    345|        NonNull::new(ptr as *mut T).map(Self)
 2457|    345|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB24_5range9RangeFullE9index_mutBN_:
 2035|  37.8k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  37.8k|        &mut (&mut **self)[index]
 2037|  37.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityBN_:
  926|   277k|    fn inline_capacity() -> usize {
  927|   277k|        if mem::size_of::<A::Item>() > 0 {
  928|   277k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   277k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleBN_:
  971|  26.4k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  26.4k|        unsafe {
  973|  26.4k|            if self.spilled() {
  974|  1.20k|                let (ptr, len) = self.data.heap();
  975|  1.20k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  25.2k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  26.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutBN_:
  984|  91.9k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  91.9k|        unsafe {
  986|  91.9k|            if self.spilled() {
  987|  1.20k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  1.20k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  90.7k|                (
  991|  90.7k|                    self.data.inline_mut(),
  992|  90.7k|                    &mut self.capacity,
  993|  90.7k|                    Self::inline_capacity(),
  994|  90.7k|                )
  995|       |            }
  996|       |        }
  997|  91.9k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  641|  31.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  31.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  31.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs1IPNbM7K0I4_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  926|  1.98k|    fn inline_capacity() -> usize {
  927|  1.98k|        if mem::size_of::<A::Item>() > 0 {
  928|  1.98k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|  1.98k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256j2_E8heap_mutBT_:
  659|  30.4k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  30.4k|        let h = &mut self.heap;
  661|  30.4k|        (h.0, &mut h.1)
  662|  30.4k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBN_:
 1845|  26.4k|    fn deref(&self) -> &[A::Item] {
 1846|  26.4k|        unsafe {
 1847|  26.4k|            let (ptr, len, _) = self.triple();
 1848|  26.4k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  26.4k|        }
 1850|  26.4k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBN_:
 2096|  28.8k|    fn default() -> SmallVec<A> {
 2097|  28.8k|        SmallVec::new()
 2098|  28.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineBS_:
  637|  25.2k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  25.2k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  25.2k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeBy_:
 2420|   336k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E4heapBS_:
  655|  1.20k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  1.20k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  1.20k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBP_5state5StateEE3newBR_:
 2455|  25.2k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  25.2k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  25.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11inline_sizeBN_:
  946|  2.75k|    pub fn inline_size(&self) -> usize {
  947|  2.75k|        Self::inline_capacity()
  948|  2.75k|    }

_RNvMCsa0TpSzywbAu_10vector_mapINtB2_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E8iter_mutBJ_:
  175|  26.4k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  26.4k|        IterMut {
  177|  26.4k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  26.4k|        }
  179|  26.4k|    }
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BN_:
   49|  2.75k|    #[post(ret.len() == 0)]
_RNCNCINvMCsa0TpSzywbAu_10vector_mapINtB7_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256E7get_mutBK_E00BO_:
   96|  17.3k|        self.position(key).map(move |p| &mut self.values[p])
_RNCNCINvMCsa0TpSzywbAu_10vector_mapINtB7_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BQ_:
   90|  16.6k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E13with_capacity0BL_:
   49|  26.4k|    #[post(ret.len() == 0)]
_RNvXs9_Csa0TpSzywbAu_10vector_mapINtB5_8IntoIterNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintBO_:
  326|  26.4k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  26.4k|        self.iter.size_hint()
  328|  26.4k|    }
_RINvMCsa0TpSzywbAu_10vector_mapINtB3_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBI_9small_set11SmallSet256E8positionBG_EBK_:
   79|  84.0k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  84.0k|        self.keys.iter().position(|k| key == k)
   81|  84.0k|    }
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BN_:
   49|  2.75k|    #[post(ret.len() == 0)]
_RNvXs9_Csa0TpSzywbAu_10vector_mapINtB5_8IntoIterNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextBO_:
  322|  59.7k|    fn next(&mut self) -> Option<(K, V)> {
  323|  59.7k|        self.iter.next()
  324|  59.7k|    }
_RNvXs7_Csa0TpSzywbAu_10vector_mapQINtB5_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterBN_:
  299|  26.4k|    fn into_iter(self) -> Self::IntoIter {
  300|  26.4k|        self.iter_mut()
  301|  26.4k|    }
_RNCINvMCsa0TpSzywbAu_10vector_mapINtB5_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BO_:
   80|  6.02M|        self.keys.iter().position(|k| key == k)
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BN_:
   99|  64.4k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCsa0TpSzywbAu_10vector_mapINtB2_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBL_:
   60|  28.9k|    pub fn len(&self) -> usize {
   61|  28.9k|        self.keys.len()
   62|  28.9k|    }
_RNvXsr_Csa0TpSzywbAu_10vector_mapINtB5_7IterMutNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextBN_:
  494|  59.7k|            fn next(&mut self) -> Option<Self::Item> {
  495|  59.7k|                self.iter.next()
  496|  59.7k|            }
_RNCINvMCsa0TpSzywbAu_10vector_mapINtB5_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BO_:
   80|  12.6M|        self.keys.iter().position(|k| key == k)
_RNCINvMCsa0TpSzywbAu_10vector_mapINtB5_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256E8positionBI_E0BM_:
   80|  40.8k|        self.keys.iter().position(|k| key == k)
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E6insert0BL_:
   99|  33.3k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BN_:
   41|  2.75k|    #[post(ret.len() == 0)]
_RNvXs4_Csa0TpSzywbAu_10vector_mapINtB5_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBI_E5indexBO_:
  277|  86.1k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  86.1k|        self.get(key).unwrap()
  279|  86.1k|    }
_RNCNCINvMCsa0TpSzywbAu_10vector_mapINtB7_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BQ_:
   90|  86.1k|        self.position(key).map(|p| &self.values[p])
_RNvXs8_Csa0TpSzywbAu_10vector_mapINtB5_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterBM_:
  307|  26.4k|    fn into_iter(self) -> Self::IntoIter {
  308|  26.4k|        IntoIter {
  309|  26.4k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  26.4k|        }
  311|  26.4k|    }
_RINvMCsa0TpSzywbAu_10vector_mapINtB3_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBM_:
   79|   180k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   180k|        self.keys.iter().position(|k| key == k)
   81|   180k|    }
_RINvMCsa0TpSzywbAu_10vector_mapINtB3_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBM_:
   83|  62.5k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  62.5k|        self.position(key).is_some()
   85|  62.5k|    }
_RINvMCsa0TpSzywbAu_10vector_mapINtB3_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBM_:
   79|  83.2k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  83.2k|        self.keys.iter().position(|k| key == k)
   81|  83.2k|    }
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BN_:
   99|  31.6k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtCs1IPNbM7K0I4_8rsonpath9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E3new0BL_:
   41|  26.4k|    #[post(ret.len() == 0)]
_RNCNvMCsa0TpSzywbAu_10vector_mapINtB4_6VecMapNtNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BN_:
   41|  2.75k|    #[post(ret.len() == 0)]


_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  218|   195k|    pub fn is_accepting(&self, state: State) -> bool {
  219|   195k|        self[state].attributes.is_accepting()
  220|   195k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  175|  2.70k|    pub fn is_empty_query(&self) -> bool {
  176|  2.70k|        self.states.len() == 2
  177|  2.70k|    }
_RNCNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB7_9Automaton29has_any_array_item_transition0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  239|  17.7k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  362|  26.5k|    pub fn is_unitary(&self, state: State) -> bool {
  363|  26.5k|        self[state].attributes.is_unitary()
  364|  26.5k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton29has_any_array_item_transition:
  235|  29.1k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  236|  29.1k|        self[state]
  237|  29.1k|            .transitions()
  238|  29.1k|            .iter()
  239|  29.1k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
  240|  29.1k|    }
_RNvMs7_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_10StateTable11transitions:
  388|   150k|    pub fn transitions(&self) -> &[Transition<'q>] {
  389|   150k|        &self.transitions
  390|   150k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  341|  41.6k|    pub fn is_rejecting(&self, state: State) -> bool {
  342|  41.6k|        self[state].attributes.is_rejecting()
  343|  41.6k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  283|  10.7k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  284|  10.7k|        self.has_array_index_transition_to_accepting(state, &JsonUInt::ZERO)
  285|  10.7k|    }
_RNCNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB7_9Automaton42has_any_array_item_transition_to_accepting0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  256|  19.0k|        self[state].transitions().iter().any(|t| match t {
  257|  11.4k|            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  258|  7.66k|            _ => false,
  259|  19.0k|        })
_RNvMNtCs1IPNbM7K0I4_8rsonpath9automatonNtB2_15TransitionLabel15get_member_name:
   35|  1.29k|    pub fn get_member_name(&self) -> Option<&'q JsonString> {
   36|  1.29k|        match self {
   37|    977|            TransitionLabel::ObjectMember(name) => Some(name),
   38|    315|            TransitionLabel::ArrayIndex(_) => None,
   39|       |        }
   40|  1.29k|    }
_RNvMs7_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  378|   168k|    pub fn fallback_state(&self) -> State {
  379|   168k|        self.fallback_state
  380|   168k|    }
_RNvXs5_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  135|   622k|    fn index(&self, index: State) -> &Self::Output {
  136|   622k|        &self.states[index.0 as usize]
  137|   622k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton42has_any_array_item_transition_to_accepting:
  255|  29.1k|    pub fn has_any_array_item_transition_to_accepting(&self, state: State) -> bool {
  256|  29.1k|        self[state].transitions().iter().any(|t| match t {
  257|       |            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  258|       |            _ => false,
  259|  29.1k|        })
  260|  29.1k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  304|  30.1k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  305|  30.1k|        self[state].transitions().iter().any(|t| match t {
  306|       |            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  307|       |            _ => false,
  308|  30.1k|        })
  309|  30.1k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton13initial_state:
  201|  3.97k|    pub fn initial_state(&self) -> State {
  202|  3.97k|        State(1)
  203|  3.97k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  324|  40.1k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  325|  40.1k|        self[state].attributes.has_transition_to_accepting()
  326|  40.1k|    }
_RNCNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  305|  27.3k|        self[state].transitions().iter().any(|t| match t {
  306|  21.5k|            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  307|  5.84k|            _ => false,
  308|  27.3k|        })
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  149|  2.75k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  150|  2.75k|        let nfa = NondeterministicAutomaton::new(query)?;
  151|      0|        debug!("NFA: {}", nfa);
  152|  2.75k|        Automaton::minimize(nfa)
  153|  2.75k|    }
_RNvMNtCs1IPNbM7K0I4_8rsonpath9automatonNtB2_15TransitionLabel15new_array_index:
   62|  5.35k|    pub fn new_array_index(index: JsonUInt) -> Self {
   63|  5.35k|        TransitionLabel::ArrayIndex(index)
   64|  5.35k|    }
_RNvMNtCs1IPNbM7K0I4_8rsonpath9automatonNtB2_15TransitionLabel17new_object_member:
   55|  6.36k|    pub fn new_object_member(member_name: &'q JsonString) -> Self {
   56|  6.36k|        TransitionLabel::ObjectMember(member_name)
   57|  6.36k|    }
_RNvXs1_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_15TransitionLabelINtNtCslATUeuPuGvJ_4core7convert4FromNtNtCsiia64awkvAv_15rsonpath_syntax3num8JsonUIntE4from:
   88|  5.35k|    fn from(index: JsonUInt) -> Self {
   89|  5.35k|        TransitionLabel::new_array_index(index)
   90|  5.35k|    }
_RNvMs6_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_9Automaton8minimize:
  366|  2.75k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  367|  2.75k|        minimizer::minimize(nfa)
  368|  2.75k|    }
_RNvXs_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB4_15TransitionLabelINtNtCslATUeuPuGvJ_4core7convert4FromRNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringE4from:
   70|  6.36k|    fn from(member_name: &'q JsonString) -> Self {
   71|  6.36k|        TransitionLabel::new_object_member(member_name)
   72|  6.36k|    }
_RNvXs2_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB7_:
  109|  28.8k|    fn default() -> Self {
  110|  28.8k|        Self {
  111|  28.8k|            attributes: StateAttributes::default(),
  112|  28.8k|            transitions: Default::default(),
  113|  28.8k|            fallback_state: State(0),
  114|  28.8k|        }
  115|  28.8k|    }
_RNvXsh_NtCs1IPNbM7K0I4_8rsonpath9automatonNtB5_15TransitionLabelNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
   23|  40.8k|#[derive(Debug, Copy, PartialEq, Clone, Eq)]

_RNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributes0B8_:
  183|  31.8k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  217|  26.4k|    fn process_nfa_transitions(
  218|  26.4k|        &self,
  219|  26.4k|        current_superstate: SmallSet256,
  220|  26.4k|        current_checkpoint: Option<NfaStateId>,
  221|  26.4k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  222|  26.4k|        let mut wildcard_targets = current_superstate
  223|  26.4k|            .iter()
  224|  26.4k|            .map(NfaStateId)
  225|  26.4k|            .filter_map(|id| match self.nfa[id] {
  226|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  227|       |                    Some(id.next().map(|x| x.0))
  228|       |                }
  229|       |                _ => None,
  230|  26.4k|            })
  231|  26.4k|            .collect::<Result<SmallSet256, _>>()?;
  232|  26.4k|        if let Some(checkpoint) = current_checkpoint {
  233|  24.3k|            wildcard_targets.insert(checkpoint.0);
  234|  24.3k|        }
  235|       |
  236|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  237|       |
  238|  26.4k|        let mut transitions = SuperstateTransitionTable {
  239|  26.4k|            labelled: VecMap::new(),
  240|  26.4k|            wildcard: wildcard_targets,
  241|  26.4k|        };
  242|       |
  243|  93.0k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  244|  93.0k|            match self.nfa[nfa_state] {
  245|       |                // Direct states simply have a single transition to the next state in the NFA.
  246|       |                // Recursive transitions also have a self-loop, but that is handled by the
  247|       |                // checkpoints mechanism - here we only handle the forward transition.
  248|  31.5k|                NfaState::Direct(nfa::Transition::Labelled(label))
  249|  19.1k|                | NfaState::Recursive(nfa::Transition::Labelled(label)) => {
  250|      0|                    debug!("Considering transition {nfa_state} --{}-> {}", label, nfa_state.next()?,);
  251|       |                    // Add the target NFA state to the target superstate, or create a singleton
  252|       |                    // set if this is the first transition via this label encountered in the loop.
  253|  50.7k|                    if let Some(target) = transitions.labelled.get_mut(&label) {
  254|  17.3k|                        target.insert(nfa_state.next()?.0);
  255|       |                    } else {
  256|  33.3k|                        let mut new_set = transitions.wildcard;
  257|  33.3k|                        new_set.insert(nfa_state.next()?.0);
  258|  33.3k|                        transitions.labelled.insert(label, new_set);
  259|       |                    }
  260|       |                }
  261|       |                NfaState::Direct(nfa::Transition::Wildcard)
  262|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  263|  42.3k|                | NfaState::Accepting => (),
  264|       |            }
  265|       |        }
  266|       |
  267|  26.4k|        Ok(transitions)
  268|  26.4k|    }
_RNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  225|  93.0k|            .filter_map(|id| match self.nfa[id] {
  226|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  227|  38.1k|                    Some(id.next().map(|x| x.0))
  228|       |                }
  229|  54.8k|                _ => None,
  230|  93.0k|            })
_RNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  311|   199k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNCNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  227|  38.1k|                    Some(id.next().map(|x| x.0))
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  205|  26.4k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  206|  26.4k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  207|  9.84k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  208|  7.74k|                return Some(single_state);
  209|  2.09k|            }
  210|  16.6k|        }
  211|       |
  212|  18.7k|        None
  213|  26.4k|    }
_RNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstate0B8_:
  144|  33.2k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   80|  2.75k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   81|  2.75k|        // Rejecting state has no outgoing transitions except for a self-loop.
   82|  2.75k|        self.dfa_states.push(StateTable {
   83|  2.75k|            transitions: smallvec![],
   84|  2.75k|            fallback_state: Self::rejecting_state(),
   85|  2.75k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   86|  2.75k|        });
   87|  2.75k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   88|  2.75k|
   89|  2.75k|        // Initial superstate is {0}.
   90|  2.75k|        let initial_superstate = [0].into();
   91|  2.75k|        self.activate_if_new(initial_superstate)?;
   92|       |
   93|  29.2k|        while let Some(superstate) = self.active_superstates.pop() {
   94|  26.4k|            self.process_superstate(superstate)?;
   95|       |        }
   96|       |
   97|  2.70k|        Ok(Automaton {
   98|  2.70k|            states: self.dfa_states,
   99|  2.70k|        })
  100|  2.75k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  108|  62.5k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  109|  62.5k|        if !self.superstates.contains_key(&superstate) {
  110|  28.9k|            let identifier = self
  111|  28.9k|                .superstates
  112|  28.9k|                .len()
  113|  28.9k|                .try_into()
  114|  28.9k|                .map(DfaStateId)
  115|  28.9k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  116|  28.8k|            self.superstates.insert(superstate, identifier);
  117|  28.8k|            self.active_superstates.push(superstate);
  118|  28.8k|            self.dfa_states.push(StateTable::default());
  119|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  120|  28.8k|            if superstate.contains(self.nfa.accepting_state().0) {
  121|  4.45k|                self.accepting.insert(identifier.0);
  122|  24.4k|            }
  123|  33.6k|        }
  124|       |
  125|  62.5k|        Ok(())
  126|  62.5k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_stateB6_:
  102|  46.8k|    fn rejecting_state() -> DfaStateId {
  103|  46.8k|        DfaStateId(0)
  104|  46.8k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  130|  26.4k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  131|  26.4k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  132|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  133|       |
  134|  26.4k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  135|      0|        debug!("Raw transitions: {:?}", transitions);
  136|       |
  137|  26.4k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  138|      0|        debug!("Normalized transitions: {:?}", transitions);
  139|       |
  140|       |        // Translate the transitions to the data model expected by TransitionTable.
  141|  26.4k|        let translated_transitions: SmallVec<_> = transitions
  142|  26.4k|            .labelled
  143|  26.4k|            .into_iter()
  144|  26.4k|            .map(|(label, state)| (label, self.superstates[&state]))
  145|  26.4k|            .collect();
  146|      0|        debug!("Translated transitions: {translated_transitions:?}");
  147|       |
  148|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  149|       |        // Otherwise, we set the fallback to the rejecting state.
  150|  26.4k|        let id = self.superstates[&current_superstate];
  151|  26.4k|        let fallback_state = self.superstates[&transitions.wildcard];
  152|  26.4k|        let attributes = self.build_attributes(id, &translated_transitions, fallback_state);
  153|  26.4k|        let table = &mut self.dfa_states[id.0 as usize];
  154|  26.4k|        table.transitions = translated_transitions;
  155|  26.4k|        table.fallback_state = fallback_state;
  156|  26.4k|        table.attributes = attributes;
  157|  26.4k|
  158|  26.4k|        Ok(())
  159|  26.4k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  194|  26.4k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  195|  26.4k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  196|  7.74k|            self.checkpoints.insert(superstate, nfa_state);
  197|  7.74k|            Some(nfa_state)
  198|       |        } else {
  199|  18.7k|            self.checkpoints.get(&superstate).copied()
  200|       |        }
  201|  26.4k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  307|  59.8k|    fn normalize(&self, superstate: &mut SmallSet256) {
  308|  59.8k|        let furthest_checkpoint = superstate
  309|  59.8k|            .iter()
  310|  59.8k|            .map(NfaStateId)
  311|  59.8k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  312|  59.8k|            .max();
  313|       |
  314|  59.8k|        if let Some(cutoff) = furthest_checkpoint {
  315|  56.9k|            superstate.remove_all_before(cutoff.0);
  316|  56.9k|        }
  317|  59.8k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  272|  26.4k|    fn normalize_superstate_transitions(
  273|  26.4k|        &mut self,
  274|  26.4k|        transitions: &mut SuperstateTransitionTable,
  275|  26.4k|        current_checkpoint: Option<NfaStateId>,
  276|  26.4k|    ) -> Result<(), CompilerError> {
  277|  26.4k|        fn normalize_one(
  278|  26.4k|            this: &mut Minimizer,
  279|  26.4k|            state: &mut SmallSet256,
  280|  26.4k|            current_checkpoint: Option<NfaStateId>,
  281|  26.4k|        ) -> Result<(), CompilerError> {
  282|  26.4k|            if let Some(checkpoint) = current_checkpoint {
  283|  26.4k|                state.insert(checkpoint.0);
  284|  26.4k|            }
  285|  26.4k|
  286|  26.4k|            this.normalize(state);
  287|  26.4k|            this.activate_if_new(*state)?;
  288|  26.4k|
  289|  26.4k|            if let Some(checkpoint) = current_checkpoint {
  290|  26.4k|                this.checkpoints.insert(*state, checkpoint);
  291|  26.4k|            }
  292|  26.4k|
  293|  26.4k|            Ok(())
  294|  26.4k|        }
  295|  26.4k|
  296|  26.4k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  297|  59.7k|        for (_, state) in &mut transitions.labelled {
  298|  33.3k|            normalize_one(self, state, current_checkpoint)?;
  299|       |        }
  300|       |
  301|  26.4k|        Ok(())
  302|  26.4k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  163|  26.4k|    fn build_attributes(
  164|  26.4k|        &self,
  165|  26.4k|        id: DfaStateId,
  166|  26.4k|        transitions: &[(TransitionLabel, DfaStateId)],
  167|  26.4k|        fallback: DfaStateId,
  168|  26.4k|    ) -> StateAttributes {
  169|  26.4k|        let mut attrs = StateAttributesBuilder::new();
  170|  26.4k|
  171|  26.4k|        if self.accepting.contains(id.0) {
  172|      0|            debug!("{id} is accepting");
  173|  4.16k|            attrs = attrs.accepting();
  174|  22.2k|        }
  175|  26.4k|        if id == Self::rejecting_state() {
  176|      0|            debug!("{id} is rejecting");
  177|      0|            attrs = attrs.rejecting();
  178|  26.4k|        }
  179|  26.4k|        if transitions.len() == 1 && fallback == Self::rejecting_state() {
  180|      0|            debug!("{id} is unitary");
  181|    936|            attrs = attrs.unitary();
  182|  25.5k|        }
  183|  26.4k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
  184|      0|            debug!("{id} has transitions to accepting");
  185|  5.08k|            attrs = attrs.transitions_to_accepting();
  186|  21.3k|        }
  187|       |
  188|  26.4k|        attrs.into()
  189|  26.4k|    }
_RNCNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer15activate_if_new0B8_:
  115|     47|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNvNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  277|  59.8k|        fn normalize_one(
  278|  59.8k|            this: &mut Minimizer,
  279|  59.8k|            state: &mut SmallSet256,
  280|  59.8k|            current_checkpoint: Option<NfaStateId>,
  281|  59.8k|        ) -> Result<(), CompilerError> {
  282|  59.8k|            if let Some(checkpoint) = current_checkpoint {
  283|  56.7k|                state.insert(checkpoint.0);
  284|  56.7k|            }
  285|       |
  286|  59.8k|            this.normalize(state);
  287|  59.8k|            this.activate_if_new(*state)?;
  288|       |
  289|  59.7k|            if let Some(checkpoint) = current_checkpoint {
  290|  56.7k|                this.checkpoints.insert(*state, checkpoint);
  291|  56.7k|            }
  292|       |
  293|  59.7k|            Ok(())
  294|  59.8k|        }
_RNvNtNtCs1IPNbM7K0I4_8rsonpath9automaton9minimizer8minimize:
   19|  2.75k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   20|  2.75k|    let minimizer = Minimizer {
   21|  2.75k|        nfa,
   22|  2.75k|        superstates: VecMap::new(),
   23|  2.75k|        checkpoints: VecMap::new(),
   24|  2.75k|        active_superstates: smallvec![],
   25|  2.75k|        dfa_states: vec![],
   26|  2.75k|        accepting: SmallSet256::default(),
   27|  2.75k|    };
   28|  2.75k|
   29|  2.75k|    minimizer.run()
   30|  2.75k|}

_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   51|  88.9k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   52|  88.9k|        self.0
   53|  88.9k|            .checked_add(1)
   54|  88.9k|            .ok_or(CompilerError::QueryTooComplex(None))
   55|  88.9k|            .map(Self)
   56|  88.9k|    }
_RNvMs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   68|  2.75k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   69|  2.75k|        use rsonpath_syntax::{Index, Segment, Selector};
   70|  2.75k|
   71|  2.75k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   72|  2.75k|            .segments()
   73|  2.75k|            .iter()
   74|  2.75k|            .map(|segment| match segment {
   75|       |                Segment::Child(selectors) if selectors.len() == 1 => match selectors.first() {
   76|       |                    Selector::Name(name) => Ok(Direct(Transition::Labelled(name.into()))),
   77|       |                    Selector::Wildcard => Ok(Direct(Transition::Wildcard)),
   78|       |                    Selector::Index(Index::FromStart(index)) => Ok(Direct(Transition::Labelled((*index).into()))),
   79|       |                    Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   80|       |                    Selector::Slice(_) => Err(UnsupportedFeatureError::slice_selector().into()),
   81|       |                },
   82|       |                Segment::Descendant(selectors) if selectors.len() == 1 => match selectors.first() {
   83|       |                    Selector::Name(name) => Ok(Recursive(Transition::Labelled(name.into()))),
   84|       |                    Selector::Wildcard => Ok(Recursive(Transition::Wildcard)),
   85|       |                    Selector::Index(Index::FromStart(index)) => Ok(Recursive(Transition::Labelled((*index).into()))),
   86|       |                    Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|       |                    Selector::Slice(_) => Err(UnsupportedFeatureError::slice_selector().into()),
   88|       |                },
   89|       |                _ => Err(UnsupportedFeatureError::multiple_selectors().into()),
   90|  2.75k|            })
   91|  2.75k|            .collect();
   92|  2.75k|        let mut states = states_result?;
   93|       |
   94|  2.75k|        states.push(Accepting);
   95|  2.75k|
   96|  2.75k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
   97|  2.75k|        if let Err(err) = accepting_state {
   98|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
   99|       |        } else {
  100|  2.75k|            Ok(NondeterministicAutomaton { ordered_states: states })
  101|       |        }
  102|  2.75k|    }
_RNvXst_NtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB5_10NfaStateIdNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpB9_:
   42|  8.48k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  104|  28.8k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  105|  28.8k|        // CAST: safe because of the check in `new`.
  106|  28.8k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  107|  28.8k|    }
_RNCNvMs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   74|  15.2k|            .map(|segment| match segment {
   75|  7.49k|                Segment::Child(selectors) if selectors.len() == 1 => match selectors.first() {
   76|  4.19k|                    Selector::Name(name) => Ok(Direct(Transition::Labelled(name.into()))),
   77|  2.14k|                    Selector::Wildcard => Ok(Direct(Transition::Wildcard)),
   78|  1.16k|                    Selector::Index(Index::FromStart(index)) => Ok(Direct(Transition::Labelled((*index).into()))),
   79|      0|                    Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   80|      0|                    Selector::Slice(_) => Err(UnsupportedFeatureError::slice_selector().into()),
   81|       |                },
   82|  7.75k|                Segment::Descendant(selectors) if selectors.len() == 1 => match selectors.first() {
   83|  2.17k|                    Selector::Name(name) => Ok(Recursive(Transition::Labelled(name.into()))),
   84|  1.38k|                    Selector::Wildcard => Ok(Recursive(Transition::Wildcard)),
   85|  4.19k|                    Selector::Index(Index::FromStart(index)) => Ok(Recursive(Transition::Labelled((*index).into()))),
   86|      0|                    Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|      0|                    Selector::Slice(_) => Err(UnsupportedFeatureError::slice_selector().into()),
   88|       |                },
   89|      0|                _ => Err(UnsupportedFeatureError::multiple_selectors().into()),
   90|  15.2k|            })
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  113|   395k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  114|   395k|        &self.ordered_states[index.0 as usize]
  115|   395k|    }

_RNvXs8_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  213|   498k|    fn next(&mut self) -> Option<Self::Item> {
  214|   498k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  215|   498k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   57|   177k|    fn insert(&mut self, elem: u8) {
   58|   177k|        if elem < 128 {
   59|   160k|            self.half_1.insert(elem)
   60|       |        } else {
   61|  16.5k|            self.half_2.insert(elem - 128)
   62|       |        }
   63|   177k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8is_emptyB8_:
  110|  51.9k|    fn is_empty(&self) -> bool {
  111|  51.9k|        self.bitmask == 0
  112|  51.9k|    }
_RNvXs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromB9_:
  155|  2.75k|    fn from(arr: [u8; N]) -> Self {
  156|  2.75k|        Self::from_iter(arr)
  157|  2.75k|    }
_RNvXsa_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   37|  34.7k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB6_:
   73|   112k|    fn iter(&self) -> SmallSet256Iter {
   74|   112k|        SmallSet256Iter {
   75|   112k|            half_1: self.half_1.iter(),
   76|   112k|            half_2: self.half_2.iter(),
   77|   112k|        }
   78|   112k|    }
_RNvXsl_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   43|  19.3M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNCNvXs8_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  214|   152k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   80|  26.4k|    fn singleton(&self) -> Option<u8> {
   81|  26.4k|        if self.half_1.is_empty() {
   82|  1.03k|            self.half_2.singleton().map(|x| x + 128)
   83|  25.4k|        } else if self.half_2.is_empty() {
   84|  24.7k|            self.half_1.singleton()
   85|       |        } else {
   86|    664|            None
   87|       |        }
   88|  26.4k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE9singleton:
  126|  25.8k|    fn singleton(&self) -> Option<u8> {
  127|  25.8k|        let elem = self.bitmask.trailing_zeros();
  128|  25.8k|        let elem_mask = 1_u128.wrapping_shl(elem);
  129|  25.8k|        let remainder = self.bitmask ^ elem_mask;
  130|  25.8k|
  131|  25.8k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  132|  25.8k|        (remainder == 0).then_some(elem as u8)
  133|  25.8k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE4iterB8_:
  122|   225k|    fn iter(&self) -> SmallSet128Iter {
  123|   225k|        SmallSet128Iter { bitmask: self.bitmask }
  124|   225k|    }
_RINvXs6_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  189|  2.75k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  2.75k|        let mut result = Self::default();
  191|  5.51k|        for elem in iter {
  192|  2.75k|            result.insert(elem);
  193|  2.75k|        }
  194|  2.75k|        result
  195|  2.75k|    }
_RNvXsh_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   43|  69.5k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE17remove_all_before:
  139|  56.9k|    fn remove_all_before(&mut self, cutoff: u8) {
  140|  56.9k|        let mask: u128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF << cutoff;
  141|  56.9k|        self.bitmask &= mask;
  142|  56.9k|    }
_RNCNCNvXs8_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next00Bd_:
  214|  40.1k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXs9_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  225|   650k|    fn next(&mut self) -> Option<Self::Item> {
  226|   650k|        let next_elem = self.bitmask.trailing_zeros();
  227|   650k|
  228|   650k|        if next_elem == 128 {
  229|   265k|            return None;
  230|   385k|        }
  231|   385k|
  232|   385k|        let elem_mask = 1 << next_elem;
  233|   385k|        self.bitmask ^= elem_mask;
  234|   385k|
  235|   385k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  236|   385k|        Some(next_elem as u8)
  237|   650k|    }
_RNCNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0B8_:
   82|    654|            self.half_2.singleton().map(|x| x + 128)
_RINvXs6_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  189|  26.4k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  26.4k|        let mut result = Self::default();
  191|  64.6k|        for elem in iter {
  192|  38.1k|            result.insert(elem);
  193|  38.1k|        }
  194|  26.4k|        result
  195|  26.4k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   95|  56.9k|    fn remove_all_before(&mut self, cutoff: u8) {
   96|  56.9k|        if cutoff < 128 {
   97|  54.7k|            self.half_1.remove_all_before(cutoff)
   98|  2.24k|        } else {
   99|  2.24k|            self.half_1.clear();
  100|  2.24k|            self.half_2.remove_all_before(cutoff - 128);
  101|  2.24k|        }
  102|  56.9k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE6insert:
  114|   177k|    fn insert(&mut self, elem: u8) {
  115|   177k|        self.bitmask |= 1 << elem;
  116|   177k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   65|   113k|    fn contains(&self, elem: u8) -> bool {
   66|   113k|        if elem < 128 {
   67|  84.5k|            self.half_1.contains(elem)
   68|       |        } else {
   69|  29.1k|            self.half_2.contains(elem - 128)
   70|       |        }
   71|   113k|    }
_RNvXse_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   37|  18.6M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8contains:
  118|   113k|    fn contains(&self, elem: u8) -> bool {
  119|   113k|        (self.bitmask & (1 << elem)) != 0
  120|   113k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE5clearB8_:
  135|  2.24k|    fn clear(&mut self) {
  136|  2.24k|        self.bitmask = 0;
  137|  2.24k|    }

_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  131|   303k|    fn is_set(&self, attr: StateAttribute) -> bool {
  132|   303k|        (self.0 & attr as u8) != 0
  133|   303k|    }
_RNvXsn_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  137|  52.2k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  116|  40.1k|    pub fn has_transition_to_accepting(&self) -> bool {
  117|  40.1k|        self.is_set(StateAttribute::TransitionsToAccepting)
  118|  40.1k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  108|  41.6k|    pub fn is_rejecting(&self) -> bool {
  109|  41.6k|        self.is_set(StateAttribute::Rejecting)
  110|  41.6k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  100|   195k|    pub fn is_accepting(&self) -> bool {
  101|   195k|        self.is_set(StateAttribute::Accepting)
  102|   195k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  125|  26.5k|    pub fn is_unitary(&self) -> bool {
  126|  26.5k|        self.is_set(StateAttribute::Unitary)
  127|  26.5k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5buildB6_:
   54|  29.2k|    pub(crate) fn build(self) -> StateAttributes {
   55|  29.2k|        self.attrs
   56|  29.2k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3setB6_:
   58|  12.9k|    fn set(self, attr: StateAttribute) -> Self {
   59|  12.9k|        Self {
   60|  12.9k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   61|  12.9k|        }
   62|  12.9k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB6_:
   50|  5.08k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   51|  5.08k|        self.set(StateAttribute::TransitionsToAccepting)
   52|  5.08k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   67|  29.2k|    fn from(value: StateAttributesBuilder) -> Self {
   68|  29.2k|        value.build()
   69|  29.2k|    }
_RNvXsn_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  137|  41.2k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3newB6_:
   32|  29.2k|    pub(crate) fn new() -> Self {
   33|  29.2k|        Self {
   34|  29.2k|            attrs: StateAttributes(0),
   35|  29.2k|        }
   36|  29.2k|    }
_RNvXsj_NtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   28|  28.8k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder7unitaryB6_:
   46|    936|    pub(crate) fn unitary(self) -> Self {
   47|    936|        self.set(StateAttribute::Unitary)
   48|    936|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejectingB6_:
   42|  2.75k|    pub(crate) fn rejecting(self) -> Self {
   43|  2.75k|        self.set(StateAttribute::Rejecting)
   44|  2.75k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9acceptingB6_:
   38|  4.16k|    pub(crate) fn accepting(self) -> Self {
   39|  4.16k|        self.set(StateAttribute::Accepting)
   40|  4.16k|    }

_RNCNvMNtCs1IPNbM7K0I4_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1h_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2J_5MatchEEKj40_EINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB45_E7get_idx0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   70|  4.16k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
_RNvMNtCs1IPNbM7K0I4_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1f_7padding19TwoSidesPaddedInputINtNtNtB4_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2H_5MatchEEKj40_EINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB43_E7get_idxCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   63|  4.21k|    pub(crate) fn get_idx(&self) -> usize {
   64|       |        debug!(
   65|      0|            "iter offset: {}, block idx: {:?}",
   66|      0|            self.iter.get_offset(),
   67|      0|            self.block.as_ref().map(|b| b.idx)
   68|       |        );
   69|       |
   70|  4.21k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   71|  4.21k|    }

_RINvYNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1G_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB38_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   94|    559|    fn resume<'i, I, Q>(
   95|    559|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   96|    559|        opening: BracketType,
   97|    559|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   98|    559|    where
   99|    559|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  100|    559|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  101|    559|    {
  102|    559|        let (first_block, iter) =
  103|    559|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
  104|    559|        DepthIteratorResumeOutcome(first_block, iter)
  105|    559|    }

_RNCNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E4stop0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   13|    559|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1A_7padding19TwoSidesPaddedInputINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB32_5MatchEEKj40_EINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   13|  3.06k|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E6resume0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   13|    558|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_6410new_vectorRShECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   16|  3.06k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   17|  3.06k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   18|  3.06k|    classifier: &DelimiterClassifierImpl256,
   19|  3.06k|) -> DepthVector64<'a, B> {
   20|  3.06k|    new_vector_from(bytes, classifier, 0)
   21|  3.06k|}
_RINvNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_648new_avx2RShECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   34|  3.48k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   35|  3.48k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   36|  3.48k|    classifier: &DelimiterClassifierImpl256,
   37|  3.48k|    start_idx: usize,
   38|  3.48k|) -> DepthVector64<'a, B> {
   39|  3.48k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   40|  3.48k|    let (first_block, second_block) = bytes.block.halves();
   41|  3.48k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   42|  3.48k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   43|  3.48k|
   44|  3.48k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   45|  3.48k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   46|  3.48k|
   47|  3.48k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   48|  3.48k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   49|  3.48k|
   50|  3.48k|    DepthVector64 {
   51|  3.48k|        quote_classified: bytes,
   52|  3.48k|        opening_mask,
   53|  3.48k|        closing_mask,
   54|  3.48k|        opening_count: opening_mask.count_ones(),
   55|  3.48k|        depth: 0,
   56|  3.48k|        idx: 0,
   57|  3.48k|        phantom: PhantomData,
   58|  3.48k|    }
   59|  3.48k|}
_RINvNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   24|  3.48k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   25|  3.48k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   26|  3.48k|    classifier: &DelimiterClassifierImpl256,
   27|  3.48k|    idx: usize,
   28|  3.48k|) -> DepthVector64<'a, B> {
   29|  3.48k|    // SAFETY: target_feature invariant
   30|  3.48k|    unsafe { new_avx2(bytes, classifier, idx) }
   31|  3.48k|}

_RNvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1y_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB30_5MatchEEKj40_EINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   53|  3.06k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   54|  3.06k|                let quote_classified = self.iter.next()?;
   55|  3.06k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   56|  3.06k|            }
_RNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E4stopCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   67|    559|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   68|    559|                let block_state = block.and_then(|b| {
   69|       |                    let idx = b.idx;
   70|       |                    debug!("Depth iterator stopping at index {idx}");
   71|       |                    if idx >= b.quote_classified.len() {
   72|       |                        None
   73|       |                    } else {
   74|       |                        Some(ResumeClassifierBlockState {
   75|       |                            block: b.quote_classified,
   76|       |                            idx,
   77|       |                        })
   78|       |                    }
   79|    559|                });
   80|    559|
   81|    559|                ResumeClassifierState {
   82|    559|                    iter: self.iter,
   83|    559|                    block: block_state,
   84|    559|                    are_commas_on: self.were_commas_on,
   85|    559|                    are_colons_on: self.were_colons_on,
   86|    559|                }
   87|    559|            }
_RNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E6resumeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   90|    559|            fn resume(
   91|    559|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   92|    559|                opening: BracketType,
   93|    559|            ) -> (Option<Self::Block>, Self) {
   94|    559|                let classifier = $core::new(opening);
   95|    559|                let first_block = state.block.and_then(|b| {
   96|       |                    if b.idx == $size {
   97|       |                        None
   98|       |                    } else {
   99|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
  100|       |                    }
  101|    559|                });
  102|    559|
  103|    559|                (
  104|    559|                    first_block,
  105|    559|                    $name {
  106|    559|                        iter: state.iter,
  107|    559|                        classifier,
  108|    559|                        phantom: PhantomData,
  109|    559|                        were_commas_on: state.are_commas_on,
  110|    559|                        were_colons_on: state.are_colons_on,
  111|    559|                    },
  112|    559|                )
  113|    559|            }

_RNvXNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   70|  2.92k|    fn depth_at_end(&self) -> isize {
   71|  2.92k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   72|  2.92k|        (((self.opening_count as i32) - self.closing_mask.count_ones() as i32) + self.depth) as isize
   73|  2.92k|    }
_RNvXNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   65|  2.20k|    fn get_depth(&self) -> isize {
   66|  2.20k|        self.depth as isize
   67|  2.20k|    }
_RNvXNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   31|  2.47k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   32|  2.47k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   33|  2.47k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   34|  2.47k|
   35|  2.47k|        if next_closing == SIZE {
   36|    269|            return false;
   37|  2.20k|        }
   38|       |
   39|      0|        bin_u64!("opening_mask", self.opening_mask);
   40|      0|        bin_u64!("closing_mask", self.closing_mask);
   41|       |
   42|  2.20k|        self.opening_mask >>= next_closing;
   43|  2.20k|        self.closing_mask >>= next_closing;
   44|  2.20k|        self.opening_mask >>= 1;
   45|  2.20k|        self.closing_mask >>= 1;
   46|       |
   47|      0|        bin_u64!("new opening_mask", self.opening_mask);
   48|      0|        bin_u64!("new closing_mask", self.closing_mask);
   49|       |
   50|  2.20k|        let new_opening_count = self.opening_mask.count_ones() as i32;
   51|  2.20k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   52|  2.20k|        self.opening_count = new_opening_count as u32;
   53|       |
   54|      0|        debug!("next_closing: {next_closing}");
   55|      0|        debug!("new_opening_count: {new_opening_count}");
   56|      0|        debug!("delta: {delta}");
   57|       |
   58|  2.20k|        self.depth += delta;
   59|  2.20k|        self.idx += next_closing + 1;
   60|  2.20k|
   61|  2.20k|        true
   62|  2.47k|    }
_RNvXNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   81|  3.48k|    fn estimate_lowest_possible_depth(&self) -> isize {
   82|  3.48k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   83|  3.48k|        (self.depth - self.closing_mask.count_ones() as i32) as isize
   84|  3.48k|    }
_RNvXNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   76|  3.48k|    fn add_depth(&mut self, depth: isize) {
   77|  3.48k|        self.depth += depth as i32;
   78|  3.48k|    }

_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masksCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   34|  6.96k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   35|  6.96k|        assert_eq!(32, bytes.len());
   36|       |        // SAFETY: target_feature invariant
   37|       |        unsafe {
   38|  6.96k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   39|  6.96k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   40|  6.96k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   41|  6.96k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   42|  6.96k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   43|  6.96k|
   44|  6.96k|            (opening_mask, closing_mask)
   45|  6.96k|        }
   46|  6.96k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  6.96k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  6.96k|        _mm256_set1_epi8(self.opening)
   25|  6.96k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  6.96k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  6.96k|        _mm256_set1_epi8(self.opening + 2)
   30|  6.96k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   13|    559|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    559|        let opening = match opening {
   15|     96|            BracketType::Square => b'[',
   16|    463|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    559|        Self { opening: opening as i8 }
   20|    559|    }

_RINvXNtNtCs1IPNbM7K0I4_8rsonpath14classification4maskyNtB3_4Mask6is_litjECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   11|  3.68k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  3.68k|    where
   13|  3.68k|        Self: Shl<N, Output = Self>,
   14|  3.68k|    {
   15|  3.68k|        (*self & (1 << bit)) != 0
   16|  3.68k|    }
_RNvNtNtNtCs1IPNbM7K0I4_8rsonpath14classification4mask3m6410combine_32Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   52|   104k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|   104k|        u64::from(m1) | (u64::from(m2) << 32)
   54|   104k|    }

_RNvMs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE10find_emptyCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   59|  2.63k|    unsafe fn find_empty(
   60|  2.63k|        &mut self,
   61|  2.63k|        label: &JsonString,
   62|  2.63k|        mut offset: usize,
   63|  2.63k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   64|  2.63k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   65|  2.63k|        let mut previous_block: u64 = 0;
   66|       |
   67|  6.43k|        while let Some(block) = self.iter.next().e()? {
   68|  5.76k|            let (block1, block2) = block.halves();
   69|  5.76k|            let classified1 = classifier.classify_block(block1);
   70|  5.76k|            let classified2 = classifier.classify_block(block2);
   71|  5.76k|
   72|  5.76k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   73|  5.76k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   74|  5.76k|
   75|  5.76k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   76|  7.11k|            while result != 0 {
   77|  3.31k|                let idx = result.trailing_zeros() as usize;
   78|  3.31k|                if self
   79|  3.31k|                    .input
   80|  3.31k|                    .is_member_match(offset + idx - 1, offset + idx + 1, label)
   81|  3.31k|                    .e()?
   82|       |                {
   83|  1.96k|                    return Ok(Some((offset + idx - 1, block)));
   84|  1.35k|                }
   85|  1.35k|                result &= !(1 << idx);
   86|       |            }
   87|       |
   88|  3.80k|            offset += SIZE;
   89|  3.80k|            previous_block = first_bitmask >> (SIZE - 1);
   90|       |        }
   91|       |
   92|    669|        Ok(None)
   93|  2.63k|    }
_RINvXNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   24|  6.19k|    fn memmem<'i, 'b, 'r, I, R>(
   25|  6.19k|        input: &'i I,
   26|  6.19k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
   27|  6.19k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   28|  6.19k|    where
   29|  6.19k|        I: Input,
   30|  6.19k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
   31|  6.19k|        'i: 'r,
   32|  6.19k|    {
   33|  6.19k|        Self::Classifier { input, iter }
   34|  6.19k|    }
_RNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2f_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  173|  6.19k|    fn find_label(
  174|  6.19k|        &mut self,
  175|  6.19k|        first_block: Option<I::Block<'i, SIZE>>,
  176|  6.19k|        start_idx: usize,
  177|  6.19k|        label: &JsonString,
  178|  6.19k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  179|  6.19k|        if let Some(b) = first_block {
  180|  5.19k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  181|  2.96k|                return Ok(Some(res));
  182|  2.23k|            }
  183|  1.00k|        }
  184|  3.23k|        let next_block_offset = self.iter.get_offset();
  185|  3.23k|        // SAFETY: target feature invariant
  186|  3.23k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  187|  6.19k|    }
_RNvMs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE15find_label_avx2Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  129|  3.23k|    unsafe fn find_label_avx2(
  130|  3.23k|        &mut self,
  131|  3.23k|        label: &JsonString,
  132|  3.23k|        mut offset: usize,
  133|  3.23k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  134|  3.23k|        if label.unquoted().is_empty() {
  135|  2.63k|            return self.find_empty(label, offset);
  136|    602|        } else if label.unquoted().len() == 1 {
  137|    406|            return self.find_letter(label, offset);
  138|    196|        }
  139|    196|
  140|    196|        let classifier =
  141|    196|            vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], label.unquoted().as_bytes()[1]);
  142|    196|        let mut previous_block: u64 = 0;
  143|       |
  144|  1.56k|        while let Some(block) = self.iter.next().e()? {
  145|  1.45k|            let (block1, block2) = block.halves();
  146|  1.45k|            let classified1 = classifier.classify_block(block1);
  147|  1.45k|            let classified2 = classifier.classify_block(block2);
  148|  1.45k|
  149|  1.45k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  150|  1.45k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  151|       |
  152|     80|            if let Some(res) =
  153|  1.45k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  154|       |            {
  155|     80|                return Ok(Some((res, block)));
  156|  1.37k|            }
  157|  1.37k|
  158|  1.37k|            offset += SIZE;
  159|  1.37k|            previous_block = first_bitmask >> (SIZE - 1);
  160|       |        }
  161|       |
  162|    116|        Ok(None)
  163|  3.23k|    }
_RNvMs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE11find_letterCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   99|    406|    unsafe fn find_letter(
  100|    406|        &mut self,
  101|    406|        label: &JsonString,
  102|    406|        mut offset: usize,
  103|    406|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  104|    406|        let classifier = vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], b'"');
  105|    406|        let mut previous_block: u64 = 0;
  106|       |
  107|  2.01k|        while let Some(block) = self.iter.next().e()? {
  108|  1.84k|            let (block1, block2) = block.halves();
  109|  1.84k|            let classified1 = classifier.classify_block(block1);
  110|  1.84k|            let classified2 = classifier.classify_block(block2);
  111|  1.84k|
  112|  1.84k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  113|  1.84k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  114|       |
  115|    241|            if let Some(res) =
  116|  1.84k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  117|       |            {
  118|    241|                return Ok(Some((res, block)));
  119|  1.60k|            }
  120|  1.60k|
  121|  1.60k|            offset += SIZE;
  122|  1.60k|            previous_block = first_bitmask >> (SIZE - 1);
  123|       |        }
  124|       |
  125|    165|        Ok(None)
  126|    406|    }

_RINvNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input8borrowed13BorrowedBytesKj40_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   16|  5.19k|pub(crate) fn find_label_in_first_block<'i, 'r, I, const N: usize>(
   17|  5.19k|    input: &I,
   18|  5.19k|    first_block: I::Block<'i, N>,
   19|  5.19k|    start_idx: usize,
   20|  5.19k|    label: &JsonString,
   21|  5.19k|) -> Result<Option<(usize, I::Block<'i, N>)>, InputError>
   22|  5.19k|where
   23|  5.19k|    I: Input,
   24|  5.19k|    'i: 'r,
   25|  5.19k|{
   26|  5.19k|    let block_idx = start_idx % N;
   27|  5.19k|    let label_size = label.quoted().len();
   28|       |
   29|   110k|    for (i, c) in first_block[block_idx..].iter().copied().enumerate() {
   30|   110k|        let j = start_idx + i;
   31|   110k|
   32|   110k|        if c == b'"' && input.is_member_match(j, j + label_size, label).e()? {
   33|  2.96k|            return Ok(Some((j, first_block)));
   34|   107k|        }
   35|       |    }
   36|       |
   37|  2.23k|    Ok(None)
   38|  5.19k|}

_RINvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input8borrowed13BorrowedBytesECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   11|  3.29k|pub(crate) fn find_in_mask<I: Input>(
   12|  3.29k|    input: &I,
   13|  3.29k|    label: &JsonString,
   14|  3.29k|    previous_block: u64,
   15|  3.29k|    first: u64,
   16|  3.29k|    second: u64,
   17|  3.29k|    offset: usize,
   18|  3.29k|) -> Result<Option<usize>, InputError> {
   19|  3.29k|    let label_size = label.quoted().len();
   20|  3.29k|    let mut result = (previous_block | (first << 1)) & second;
   21|  5.74k|    while result != 0 {
   22|  2.77k|        let idx = result.trailing_zeros() as usize;
   23|      0|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   24|  2.77k|        if offset + idx > 1
   25|  2.77k|            && input
   26|  2.77k|                .is_member_match(offset + idx - 2, offset + idx + label_size - 2, label)
   27|  2.77k|                .e()?
   28|       |        {
   29|    321|            return Ok(Some(offset + idx - 2));
   30|  2.44k|        }
   31|  2.44k|        result &= !(1 << idx);
   32|       |    }
   33|  2.97k|    Ok(None)
   34|  3.29k|}

_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  3.23k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  3.23k|        Self {
   15|  3.23k|            first: _mm256_set1_epi8(first as i8),
   16|  3.23k|            second: _mm256_set1_epi8(second as i8),
   17|  3.23k|        }
   18|  3.23k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  18.1k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  18.1k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  18.1k|
   24|  18.1k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  18.1k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  18.1k|
   27|  18.1k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  18.1k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  18.1k|
   30|  18.1k|        BlockClassification256 { first, second }
   31|  18.1k|    }

_RNvMNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotesINtB2_20QuoteClassifiedBlockRShyKj40_E3lenCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   85|    559|    pub fn len(&self) -> usize {
   86|    559|        self.block.len()
   87|    559|    }

_RNvMNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   21|  4.69k|    fn new() -> Self {
   22|  4.69k|        Self {
   23|  4.69k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   24|  4.69k|        }
   25|  4.69k|    }
_RINvMNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   28|  22.2k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   29|  22.2k|        block!(blocks[..64]);
   30|       |
   31|  22.2k|        let (block1, block2) = blocks.halves();
   32|  22.2k|        let classification1 = vector_256::classify_block(block1);
   33|  22.2k|        let classification2 = vector_256::classify_block(block2);
   34|  22.2k|
   35|  22.2k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   36|  22.2k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   37|  22.2k|
   38|  22.2k|        self.internal_classifier.classify(slashes, quotes)
   39|  22.2k|    }
_RNCINvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1Q_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3i_5MatchEEKj40_EE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   14|  3.68k|super::shared::quote_classifier!(Avx2QuoteClassifier64, BlockAvx2Classifier, 64, u64);

_RNvXs1_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  100|   138k|            fn get_offset(&self) -> usize {
  101|   138k|                self.iter.get_offset() - $size
  102|   138k|            }
_RINvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3d_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   20|  1.01k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  1.01k|            where
   22|  1.01k|                I: InputBlockIterator<'i, $size>,
   23|  1.01k|            {
   24|  1.01k|                Self::Classifier {
   25|  1.01k|                    iter,
   26|  1.01k|                    classifier: $core::new(),
   27|  1.01k|                    phantom: PhantomData,
   28|  1.01k|                }
   29|  1.01k|            }
_RNvXs1_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E6offsetCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  105|    311|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  106|    311|                debug_assert!(count > 0);
  107|      0|                debug!("Offsetting by {count}");
  108|       |
  109|    311|                for _ in 0..count - 1 {
  110|     59|                    self.iter.next().e()?;
  111|       |                }
  112|       |
  113|    311|                self.next()
  114|    311|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_9InnerIterB1w_E10into_innerCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  126|  3.66k|            fn into_inner(self) -> I {
  127|  3.66k|                self.iter
  128|  3.66k|            }
_RNvXs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   79|  18.7k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  18.7k|                match self.iter.next().e()? {
   81|  18.6k|                    Some(block) => {
   82|  18.6k|                        // SAFETY: target_feature invariant
   83|  18.6k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  18.6k|                        let classified_block = QuoteClassifiedBlock {
   85|  18.6k|                            block,
   86|  18.6k|                            within_quotes_mask: mask,
   87|  18.6k|                        };
   88|  18.6k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    159|                    None => Ok(None),
   91|       |                }
   92|  18.7k|            }
_RNvXs1_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E15flip_quotes_bitCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  117|  1.57k|            fn flip_quotes_bit(&mut self) {
  118|  1.57k|                self.classifier.internal_classifier.flip_prev_quote_mask();
  119|  1.57k|            }
_RINvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1O_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3g_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   33|  3.68k|            fn resume<'i, I>(
   34|  3.68k|                iter: I,
   35|  3.68k|                first_block: Option<I::Block>,
   36|  3.68k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   37|  3.68k|            where
   38|  3.68k|                I: InputBlockIterator<'i, $size>,
   39|  3.68k|            {
   40|  3.68k|                let mut s = Self::Classifier {
   41|  3.68k|                    iter,
   42|  3.68k|                    classifier: $core::new(),
   43|  3.68k|                    phantom: PhantomData,
   44|  3.68k|                };
   45|  3.68k|
   46|  3.68k|                let block = first_block.map(|b| {
   47|       |                    // SAFETY: target feature invariant
   48|       |                    let mask = unsafe { s.classifier.classify(&b) };
   49|       |                    QuoteClassifiedBlock {
   50|       |                        block: b,
   51|       |                        within_quotes_mask: mask,
   52|       |                    }
   53|  3.68k|                });
   54|  3.68k|
   55|  3.68k|                ResumedQuoteClassifier {
   56|  3.68k|                    classifier: s,
   57|  3.68k|                    first_block: block,
   58|  3.68k|                }
   59|  3.68k|            }

_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   38|  1.57k|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|  1.57k|        self.prev_block_mask ^= 0x02;
   40|  1.57k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   26|  4.69k|    pub(crate) fn new() -> Self {
   27|  4.69k|        Self { prev_block_mask: 0 }
   28|  4.69k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  36.1k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  36.1k|        u64::from(self.prev_block_mask & 0x01)
   46|  36.1k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  22.2k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  22.2k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  22.2k|    }
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  22.2k|unsafe fn all_ones128() -> __m128i {
   14|  22.2k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  22.2k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  22.2k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  22.2k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  8.41k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  13.8k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  13.8k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  13.8k|            let odd_starts = ODD & starts;
   62|  13.8k|            let even_starts = EVEN & starts;
   63|  13.8k|
   64|  13.8k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  13.8k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  13.8k|
   67|  13.8k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  13.8k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  13.8k|
   70|  13.8k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  13.8k|
   72|  13.8k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  22.2k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  22.2k|
   77|  22.2k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  22.2k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  22.2k|
   80|  22.2k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  22.2k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  22.2k|        within_quotes
   93|  22.2k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  22.2k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  22.2k|        let slash_mask = u8::from(set_slash_mask);
   33|  22.2k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  22.2k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  22.2k|    }

_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  44.5k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  44.5k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  44.5k|
   20|  44.5k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  44.5k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  44.5k|
   23|  44.5k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  44.5k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  44.5k|
   26|  44.5k|    BlockClassification256 { slashes, quotes }
   27|  44.5k|}
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  44.5k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  44.5k|    _mm256_set1_epi8(b'\\' as i8)
   14|  44.5k|}
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  44.5k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  44.5k|    _mm256_set1_epi8(b'"' as i8)
    9|  44.5k|}

_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  400|  1.01k|    fn classify_structural_characters<'i, I>(
  401|  1.01k|        self,
  402|  1.01k|        iter: Self::QuotesClassifier<'i, I>,
  403|  1.01k|    ) -> Self::StructuralClassifier<'i, I>
  404|  1.01k|    where
  405|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  406|  1.01k|    {
  407|  1.01k|        S::new(iter)
  408|  1.01k|    }
_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  434|    559|    fn resume_depth_classification<'i, I>(
  435|    559|        self,
  436|    559|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  437|    559|        opening: BracketType,
  438|    559|    ) -> DepthIteratorResumeOutcome<
  439|    559|        'i,
  440|    559|        I,
  441|    559|        Self::QuotesClassifier<'i, I>,
  442|    559|        Self::DepthClassifier<'i, I>,
  443|    559|        MaskType,
  444|    559|        BLOCK_SIZE,
  445|    559|    >
  446|    559|    where
  447|    559|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  448|    559|    {
  449|    559|        D::resume(state, opening)
  450|    559|    }
_RNvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  375|  3.99k|    fn dispatch_tag(self) -> usize {
  376|  3.99k|        TARGET
  377|  3.99k|    }
_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd6memmemNtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4I_5MatchEEECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  453|  6.19k|    fn memmem<'i, 'b, 'r, I, R>(
  454|  6.19k|        self,
  455|  6.19k|        input: &'i I,
  456|  6.19k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
  457|  6.19k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  458|  6.19k|    where
  459|  6.19k|        I: Input,
  460|  6.19k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
  461|  6.19k|        'i: 'r,
  462|  6.19k|    {
  463|  6.19k|        M::memmem(input, iter)
  464|  6.19k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  500|  1.98k|    pub(crate) fn fast_popcnt(&self) -> bool {
  501|  1.98k|        self.fast_popcnt
  502|  1.98k|    }
_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  388|  3.68k|    fn resume_quote_classification<'i, I>(
  389|  3.68k|        self,
  390|  3.68k|        iter: I,
  391|  3.68k|        first_block: Option<I::Block>,
  392|  3.68k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  393|  3.68k|    where
  394|  3.68k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  395|  3.68k|    {
  396|  3.68k|        Q::resume(iter, first_block)
  397|  3.68k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  496|  1.98k|    pub(crate) fn fast_quotes(&self) -> bool {
  497|  1.98k|        self.fast_quotes
  498|  1.98k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  492|  1.98k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  493|  1.98k|        self.highest_simd
  494|  1.98k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  343|  1.98k|    pub(crate) fn new() -> Self {
  344|  1.98k|        Self { phantom: PhantomData }
  345|  1.98k|    }
_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5R_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  380|  1.01k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  381|  1.01k|    where
  382|  1.01k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  383|  1.01k|    {
  384|  1.01k|        Q::new(iter)
  385|  1.01k|    }
_RINvXs1_NtNtCs1IPNbM7K0I4_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4w_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5Y_5MatchEEKj40_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  411|  3.95k|    fn resume_structural_classification<'i, I>(
  412|  3.95k|        self,
  413|  3.95k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  414|  3.95k|    ) -> Self::StructuralClassifier<'i, I>
  415|  3.95k|    where
  416|  3.95k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  417|  3.95k|    {
  418|  3.95k|        S::resume(state)
  419|  3.95k|    }
_RNvNtNtCs1IPNbM7K0I4_8rsonpath14classification4simd9configureCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  554|  2.70k|pub(crate) fn configure() -> SimdConfiguration {
  555|  2.70k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  556|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  557|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  558|  2.70k|    }
  559|       |
  560|       |    cfg_if! {
  561|       |        if #[cfg(not(feature = "simd"))]
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  568|       |        {
  569|  2.70k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  570|  2.70k|                SimdTag::Avx2
  571|      0|            } else if is_x86_feature_detected!("ssse3") {
  572|      0|                SimdTag::Ssse3
  573|      0|            } else if is_x86_feature_detected!("sse2") {
  574|      0|                SimdTag::Sse2
  575|       |            } else {
  576|      0|                SimdTag::Nosimd
  577|       |            };
  578|       |
  579|  2.70k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  580|  2.70k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  581|       |        }
  582|       |        else
  583|       |        {
  584|       |            let highest_simd = SimdTag::Nosimd;
  585|       |            let fast_quotes = false;
  586|       |            let fast_popcnt = false;
  587|       |        }
  588|       |    }
  589|       |
  590|  2.70k|    SimdConfiguration {
  591|  2.70k|        highest_simd,
  592|  2.70k|        fast_quotes,
  593|  2.70k|        fast_popcnt,
  594|  2.70k|    }
  595|  2.70k|}

_RNvMNtNtCs1IPNbM7K0I4_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|   128k|    pub fn offset(self, amount: usize) -> Self {
   70|   128k|        match self {
   71|  35.9k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  19.7k|            Colon(idx) => Colon(idx + amount),
   73|  51.5k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  21.2k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|   128k|    }
_RNvXs5_NtNtCs1IPNbM7K0I4_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   21|   102k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RINvYNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1S_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3k_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  195|  3.95k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  3.95k|    where
  197|  3.95k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  3.95k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  3.95k|    {
  200|  3.95k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  3.95k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  6.98k|    pub fn is_closing(&self) -> bool {
   96|  6.98k|        matches!(self, Closing(_, _))
   97|  6.98k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|  1.93k|    pub fn idx(self) -> usize {
   50|  1.93k|        match self {
   51|  1.93k|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|  1.93k|        }
   53|  1.93k|    }

_RINvMNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   29|  35.3k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   30|  35.3k|        &mut self,
   31|  35.3k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   32|  35.3k|    ) -> mask_64::StructuralsBlock<B> {
   33|  35.3k|        let (block1, block2) = quote_classified_block.block.halves();
   34|  35.3k|        let classification1 = self.internal_classifier.classify_block(block1);
   35|  35.3k|        let classification2 = self.internal_classifier.classify_block(block2);
   36|  35.3k|
   37|  35.3k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   38|  35.3k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   39|       |
   40|      0|        bin_u64!("structural", structural);
   41|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   42|       |
   43|  35.3k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   44|  35.3k|    }
_RNCNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E6resume0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   14|  3.92k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNCNvXs1_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   14|   128k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E4stop0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   14|  3.90k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   21|  4.96k|    fn new() -> Self {
   22|  4.96k|        Self {
   23|  4.96k|            // SAFETY: target feature invariant
   24|  4.96k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   25|  4.96k|        }
   26|  4.96k|    }

_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  157|  21.1k|            fn turn_commas_off(&mut self) {
  158|  21.1k|                if self.are_commas_on {
  159|  12.6k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  12.6k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|  8.41k|                }
  164|  21.1k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  179|  47.9k|            fn turn_colons_off(&mut self) {
  180|  47.9k|                if self.are_colons_on {
  181|  3.05k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  3.05k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  44.9k|                }
  186|  47.9k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E26turn_colons_and_commas_offCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  130|  16.1k|            fn turn_colons_and_commas_off(&mut self) {
  131|  16.1k|                if self.are_commas_on && self.are_colons_on {
  132|    900|                    self.are_commas_on = false;
  133|    900|                    self.are_colons_on = false;
  134|      0|                    debug!("Turning both commas and colons off.");
  135|       |                    // SAFETY: target_feature invariant
  136|    900|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  137|  15.2k|                } else if self.are_commas_on {
  138|  1.43k|                    self.turn_commas_off();
  139|  13.7k|                } else if self.are_colons_on {
  140|      0|                    self.turn_colons_off();
  141|  13.7k|                }
  142|  16.1k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E6resumeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  204|  3.95k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  205|  3.95k|                let mut classifier = $core::new();
  206|  3.95k|
  207|  3.95k|                // SAFETY: target_feature invariant
  208|  3.95k|                unsafe {
  209|  3.95k|                    if state.are_commas_on && state.are_colons_on {
  210|     91|                        classifier.internal_classifier.toggle_colons_and_commas();
  211|     91|                    } else {
  212|  3.86k|                        if state.are_commas_on {
  213|  3.16k|                            classifier.internal_classifier.toggle_commas();
  214|  3.16k|                        }
  215|  3.86k|                        if state.are_colons_on {
  216|      0|                            classifier.internal_classifier.toggle_colons();
  217|  3.86k|                        }
  218|       |                    }
  219|       |                }
  220|       |
  221|  3.95k|                let block = state.block.map(|b| {
  222|       |                    // SAFETY: target_feature invariant
  223|       |                    let mut block = unsafe { classifier.classify(b.block) };
  224|       |                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  225|       |                    block.structural_mask &= idx_mask;
  226|       |
  227|       |                    block
  228|  3.95k|                });
  229|  3.95k|
  230|  3.95k|                Self {
  231|  3.95k|                    iter: state.iter,
  232|  3.95k|                    block,
  233|  3.95k|                    classifier,
  234|  3.95k|                    are_commas_on: state.are_commas_on,
  235|  3.95k|                    are_colons_on: state.are_colons_on,
  236|  3.95k|                }
  237|  3.95k|            }
_RINvXs_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   21|  1.01k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  1.01k|            where
   23|  1.01k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  1.01k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  1.01k|            {
   26|  1.01k|                Self::Classifier {
   27|  1.01k|                    iter,
   28|  1.01k|                    classifier: $core::new(),
   29|  1.01k|                    block: None,
   30|  1.01k|                    are_commas_on: false,
   31|  1.01k|                    are_colons_on: false,
   32|  1.01k|                }
   33|  1.01k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  167|  2.23k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  2.23k|                if !self.are_colons_on {
  169|  2.23k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  2.23k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  2.23k|
  174|  2.23k|                    self.reclassify(idx);
  175|      0|                }
  176|  2.23k|            }
_RNvMs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   56|  16.4k|            fn reclassify(&mut self, idx: usize) {
   57|  16.4k|                if let Some(block) = self.block.take() {
   58|  16.4k|                    let quote_classified_block = block.quote_classified;
   59|  16.4k|                    let relevant_idx = idx + 1;
   60|  16.4k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  16.4k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  16.1k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  16.1k|                        // SAFETY: target_feature invariant
   68|  16.1k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  16.1k|                        new_block.structural_mask &= mask;
   70|  16.1k|                        self.block = Some(new_block);
   71|    310|                    }
   72|      6|                }
   73|  16.4k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E4stopCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  189|  3.92k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  190|  3.92k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  191|       |                    idx: b.get_idx() as usize,
  192|       |                    block: b.quote_classified,
  193|  3.92k|                });
  194|  3.92k|
  195|  3.92k|                ResumeClassifierState {
  196|  3.92k|                    iter: self.iter,
  197|  3.92k|                    block,
  198|  3.92k|                    are_commas_on: self.are_commas_on,
  199|  3.92k|                    are_colons_on: self.are_colons_on,
  200|  3.92k|                }
  201|  3.92k|            }
_RNvMs0_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   49|   143k|            fn current_block_is_spent(&self) -> bool {
   50|   143k|                self.block
   51|   143k|                    .as_ref()
   52|   143k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   143k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  145|  46.9k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  46.9k|                if !self.are_commas_on {
  147|  11.1k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  11.1k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  11.1k|
  152|  11.1k|                    self.reclassify(idx);
  153|  35.8k|                }
  154|  46.9k|            }
_RNvXs2_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  113|  24.2k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  24.2k|                if !self.are_commas_on && !self.are_colons_on {
  115|  3.11k|                    self.are_commas_on = true;
  116|  3.11k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  3.11k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  3.11k|
  121|  3.11k|                    self.reclassify(idx);
  122|  21.0k|                } else if !self.are_commas_on {
  123|  8.38k|                    self.turn_commas_on(idx);
  124|  12.7k|                } else if !self.are_colons_on {
  125|  2.23k|                    self.turn_colons_on(idx);
  126|  10.4k|                }
  127|  24.2k|            }
_RNvXs1_NtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   85|   128k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   143k|                while self.current_block_is_spent() {
   87|  15.3k|                    match self.iter.next() {
   88|  15.2k|                        Ok(Some(block)) => {
   89|  15.2k|                            // SAFETY: target_feature invariant
   90|  15.2k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  15.2k|                        }
   92|       |                        Ok(None) => {
   93|    159|                            self.block = None;
   94|    159|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|   128k|                Ok(self
  101|   128k|                    .block
  102|   128k|                    .as_mut()
  103|   128k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|   128k|            }

_RNvXs_NtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   38|   128k|    fn next(&mut self) -> Option<Structural> {
   39|   128k|        let idx = self.get_idx() as usize;
   40|   128k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   128k|        })
   57|   128k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   29|   132k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   132k|        self.structural_mask.trailing_zeros()
   31|   132k|    }
_RNCNvXs_NtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
   40|   128k|        (idx < SIZE).then(|| {
   41|   128k|            let bit_mask = 1 << idx;
   42|   128k|
   43|   128k|            self.structural_mask ^= bit_mask;
   44|   128k|
   45|   128k|            // The last match being a catch-all *is important*.
   46|   128k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|   128k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|   128k|            match self.quote_classified.block[idx] {
   49|  19.7k|                b':' => Structural::Colon(idx),
   50|  22.3k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  29.1k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  21.2k|                b',' => Structural::Comma(idx),
   53|  17.0k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  18.8k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   128k|        })
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   16|  35.3k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  35.3k|        Self {
   18|  35.3k|            quote_classified: block,
   19|  35.3k|            structural_mask,
   20|  35.3k|        }
   21|  35.3k|    }
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   24|   142k|    pub(crate) fn is_empty(&self) -> bool {
   25|   142k|        self.structural_mask == 0
   26|   142k|    }

_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   43|  31.0k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  31.0k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  31.0k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   80|  5.29k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  5.29k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  5.29k|    }
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   31|  70.6k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  70.6k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  70.6k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   74|  26.9k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  26.9k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  26.9k|    }
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   25|  70.6k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  70.6k|    _mm256_set1_epi8(0x0F)
   27|  70.6k|}
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   55|  4.10k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  4.10k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  4.10k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   86|  4.10k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  4.10k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  4.10k|    }
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   49|  9.39k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  9.39k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  9.39k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   92|  70.6k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  70.6k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  70.6k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  70.6k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  70.6k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  70.6k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  70.6k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  70.6k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  70.6k|
  101|  70.6k|        BlockClassification256 { structural }
  102|  70.6k|    }
_RNvNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  4.96k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  4.96k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  4.96k|}
_RNvMNtNtNtNtCs1IPNbM7K0I4_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  4.96k|    pub(crate) unsafe fn new() -> Self {
   67|  4.96k|        Self {
   68|  4.96k|            upper_nibble_mask: upper_nibble_mask(),
   69|  4.96k|        }
   70|  4.96k|    }

_RNvXs9_NtCs1IPNbM7K0I4_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs6UAlhEvAH5K_19fuzz_arbitrary_json:
    9|  49.3k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs6_NtCs1IPNbM7K0I4_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs6UAlhEvAH5K_19fuzz_arbitrary_json:
    9|   135k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs1IPNbM7K0I4_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   80|  69.4k|    fn deref(&self) -> &Self::Target {
   81|  69.4k|        &self.0
   82|  69.4k|    }
_RNvMNtCs1IPNbM7K0I4_8rsonpath5depthNtB2_5Depth9decrement:
   28|  35.9k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  35.9k|        *self = (*self - 1)?;
   30|  35.9k|        Ok(())
   31|  35.9k|    }
_RNvMNtCs1IPNbM7K0I4_8rsonpath5depthNtB2_5Depth9increment:
   21|  52.5k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  52.5k|        *self = (*self + 1)?;
   23|  52.4k|        Ok(())
   24|  52.5k|    }
_RNvXsc_NtCs1IPNbM7K0I4_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  52.5k|            fn add(self, rhs: u8) -> Self::Output {
   41|  52.5k|                self.0
   42|  52.5k|                    .checked_add(rhs)
   43|  52.5k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  52.5k|                    .map(Depth)
   45|  52.5k|            }
_RNvXsf_NtCs1IPNbM7K0I4_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  35.9k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  35.9k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  35.9k|            }

_RINvNtNtCs1IPNbM7K0I4_8rsonpath6engine11empty_query6match_NtNtNtB6_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB6_6result5MatchEECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   84|    720|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   85|    720|where
   86|    720|    I: Input,
   87|    720|    S: Sink<Match>,
   88|    720|{
   89|    720|    // For a full match we need to copy the entire input starting from first non-whitespace,
   90|    720|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   91|    720|    // padded with whitespace at start and/or end, but that's a pathological case.
   92|    720|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   93|    720|    let mut res: Vec<u8> = vec![];
   94|    720|    let mut first_significant_idx = None;
   95|    720|    let mut offset = 0;
   96|       |
   97|  12.4k|    while let Some(block) = iter.next().e()? {
   98|  11.7k|        if first_significant_idx.is_none() {
   99|       |            // Start of the root not found yet, look for it.
  100|  1.65k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
  101|       |
  102|  1.65k|            if let Some(first_idx) = first_significant_idx {
  103|    720|                // Start of the root found in this block, copy the relevant part.
  104|    720|                res.extend(&block[first_idx..]);
  105|    937|            } else {
  106|    937|                offset += block.len();
  107|    937|            }
  108|  10.0k|        } else {
  109|  10.0k|            // Start of the root was already found, now we are copying everything.
  110|  10.0k|            res.extend(&*block);
  111|  10.0k|        }
  112|       |    }
  113|       |
  114|    720|    if let Some(start) = first_significant_idx {
  115|       |        // Trim whitespace if we have a result.
  116|  76.1k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  117|  75.4k|            res.pop();
  118|  75.4k|        }
  119|       |
  120|    720|        let actual_start = start + offset - input.leading_padding_len();
  121|    720|        sink.add_match(Match::from_start_and_bytes(actual_start, res))
  122|    720|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  123|      0|    }
  124|       |
  125|    720|    Ok(())
  126|    720|}
_RNCINvNtNtCs1IPNbM7K0I4_8rsonpath6engine11empty_query6match_NtNtNtB8_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB8_6result5MatchEE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  100|  81.0k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));

_RNCINvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_Es_0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  255|  3.63k|                            first_block = classifier_state.block.map(|b| b.block.block);
_RNCINvNvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_E0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  284|  5.13k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
_RINvNvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2e_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3G_5MatchEEKB1c_EINtNtNtNtBb_14classification6quotes7avx2_6421Avx2QuoteClassifier64B29_EyKB1c_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  278|  5.13k|            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  279|  5.13k|            where
  280|  5.13k|                I: InputBlockIterator<'i, N>,
  281|  5.13k|                Q: QuoteClassifiedIterator<'i, I, M, N>,
  282|  5.13k|            {
  283|  5.13k|                let current_block_start = state.iter.get_offset();
  284|  5.13k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  285|  5.13k|                let current_idx = current_block_start + current_block_idx;
  286|       |
  287|       |                debug!(
  288|      0|                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  289|       |                );
  290|       |
  291|       |                // We want to move by this much forward, and delta > 0.
  292|  5.13k|                assert!(index > current_idx);
  293|  5.13k|                let delta = index - current_idx;
  294|  5.13k|
  295|  5.13k|                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  296|  5.13k|                // and adjust the delta to cover that distance. This makes calculations simpler.
  297|  5.13k|                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  298|  5.13k|                let remaining = delta + current_block_idx;
  299|  5.13k|                let blocks_to_skip = remaining / N;
  300|  5.13k|                let remainder = remaining % N;
  301|  5.13k|
  302|  5.13k|                match state.block.as_mut() {
  303|  5.13k|                    Some(b) if blocks_to_skip == 0 => {
  304|  4.82k|                        b.idx = remaining;
  305|  4.82k|                    }
  306|    311|                    Some(_) => {
  307|    311|                        state.block = state
  308|    311|                            .iter
  309|    311|                            .offset(blocks_to_skip as isize)?
  310|    311|                            .map(|b| ResumeClassifierBlockState {
  311|       |                                block: b,
  312|       |                                idx: remainder,
  313|    311|                            });
  314|       |                    }
  315|      0|                    None => {
  316|      0|                        state.block = state
  317|      0|                            .iter
  318|      0|                            .offset((blocks_to_skip + 1) as isize)?
  319|      0|                            .map(|b| ResumeClassifierBlockState {
  320|       |                                block: b,
  321|       |                                idx: remainder,
  322|      0|                            });
  323|       |                    }
  324|       |                }
  325|       |
  326|      0|                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  327|       |
  328|  5.13k|                Ok(())
  329|  5.13k|            }
_RINvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input8borrowed13BorrowedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1N_6quotes7avx2_6411ConstructorNtNtNtB1N_10structural7avx2_6411ConstructorNtNtNtB1N_5depth7avx2_6411ConstructorNtNtNtB1N_6memmem7avx2_6411ConstructorKj1_EKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEB1I_EB5R_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  121|    977|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  122|    977|    where
  123|    977|        'b: 'r,
  124|    977|        E: CanHeadSkip<'b, 'r, I, R, V>,
  125|    977|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  126|    977|    {
  127|    977|        dispatch_simd!(self.simd; self, engine =>
  128|       |        fn<'b, 'q, 'r, I, V, E, R>(head_skip: &HeadSkip<'b, 'q, I, V, BLOCK_SIZE>, engine: &mut E) -> Result<(), EngineError>
  129|       |        where
  130|       |            'b: 'r,
  131|       |            E: CanHeadSkip<'b, 'r, I, R, V>,
  132|       |            R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  133|       |            I: Input,
  134|       |            V: Simd
  135|       |        {
  136|       |            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  137|       |            let mut idx = 0;
  138|       |            let mut first_block = None;
  139|       |
  140|       |            loop {
  141|       |                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  142|       |                debug!("Starting memmem search from {idx}");
  143|       |
  144|       |                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  145|       |                    drop(memmem);
  146|       |
  147|       |                    first_block = Some(last_block);
  148|       |                    idx = starting_quote_idx;
  149|       |                    debug!("Needle found at {idx}");
  150|       |                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  151|       |
  152|       |                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  153|       |                    Some((colon_idx, b':')) => {
  154|       |                        let (next_idx, next_c) = head_skip
  155|       |                            .bytes
  156|       |                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  157|       |                            .ok_or(EngineError::MissingItem())?;
  158|       |
  159|       |                            let ResumedQuoteClassifier {
  160|       |                                classifier: quote_classifier,
  161|       |                                first_block: quote_classified_first_block,
  162|       |                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  163|       |
  164|       |                            // Temporarily set the index within the current block to zero.
  165|       |                            // This makes sense for the move below.
  166|       |                            let mut classifier_state = ResumeClassifierState {
  167|       |                                iter: quote_classifier,
  168|       |                                block: quote_classified_first_block
  169|       |                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  170|       |                                are_colons_on: false,
  171|       |                                are_commas_on: head_skip.is_accepting,
  172|       |                            };
  173|       |
  174|       |                            debug!("Actual match with colon at {colon_idx}");
  175|       |                            debug!("Next significant character at {next_idx}");
  176|       |                            debug!("Classifier is at {}", classifier_state.get_idx());
  177|       |                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  178|       |
  179|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  180|       |                            // and correctly points to the place the engine would expect had it found the matching key
  181|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  182|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  183|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  184|       |                            // in the output (if it happens at a block boundary).
  185|       |                            if next_c == b'{' || next_c == b'[' {
  186|       |                                forward_to(&mut classifier_state, next_idx)?;
  187|       |                                if head_skip.is_accepting {
  188|       |                                    engine.recorder().record_match(
  189|       |                                        next_idx,
  190|       |                                        Depth::ZERO,
  191|       |                                        crate::result::MatchedNodeType::Complex,
  192|       |                                    )?;
  193|       |                                }
  194|       |                                forward_to(&mut classifier_state, next_idx + 1)?;
  195|       |                            } else {
  196|       |                                forward_to(&mut classifier_state, next_idx)?;
  197|       |                            };
  198|       |
  199|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  200|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  201|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  202|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  203|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  204|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  205|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  206|       |                            if let Some(block) = classifier_state.block.as_mut() {
  207|       |                                let should_be_quoted = block.block.block[block.idx] == b'"';
  208|       |                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  209|       |                                    debug!("Mask needs flipping!");
  210|       |                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  211|       |                                    classifier_state.iter.flip_quotes_bit();
  212|       |                                }
  213|       |                            }
  214|       |
  215|       |                            classifier_state = match next_c {
  216|       |                                b'{' | b'[' => {
  217|       |                                    debug!("resuming");
  218|       |                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  219|       |                                    engine
  220|       |                                        .run_on_subtree(
  221|       |                                            Structural::Opening(
  222|       |                                                if next_c == b'{' {
  223|       |                                                    BracketType::Curly
  224|       |                                                } else {
  225|       |                                                    BracketType::Square
  226|       |                                                },
  227|       |                                                next_idx,
  228|       |                                            ),
  229|       |                                            head_skip.state,
  230|       |                                            classifier,
  231|       |                                        )?
  232|       |                                        .0
  233|       |                                }
  234|       |                                _ if head_skip.is_accepting => {
  235|       |                                    engine.recorder().record_match(
  236|       |                                        next_idx,
  237|       |                                        Depth::ZERO,
  238|       |                                        crate::result::MatchedNodeType::Atomic,
  239|       |                                    )?;
  240|       |                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  241|       |                                    let next_structural = classifier.next()?;
  242|       |
  243|       |                                    match next_structural {
  244|       |                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  245|       |                                        None => return Err(EngineError::MissingClosingCharacter()),
  246|       |                                    }
  247|       |                                    classifier.stop()
  248|       |                                }
  249|       |                                _ => classifier_state,
  250|       |                            };
  251|       |
  252|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  253|       |                            idx = classifier_state.get_idx();
  254|       |
  255|       |                            first_block = classifier_state.block.map(|b| b.block.block);
  256|       |                            input_iter = classifier_state.iter.into_inner();
  257|       |                        }
  258|       |                        _ => idx += 1,
  259|       |                    }
  260|       |                } else {
  261|       |                    debug!("No memmem matches, exiting");
  262|       |                    break;
  263|       |                }
  264|       |            }
  265|       |
  266|       |            return Ok(());
  267|       |
  268|       |            /// Move the state forward to `index`.
  269|       |            ///
  270|       |            /// # Errors
  271|       |            /// If the offset crosses block boundaries, then a new block is read from the underlying
  272|       |            /// [`Input`](crate::input::Input) implementation, which can fail.
  273|       |            ///
  274|       |            /// # Panics
  275|       |            /// If the `index` is not ahead of the current position of the state ([`get_idx`](ResumeClassifierState::get_idx)).
  276|       |            #[inline(always)]
  277|       |            #[allow(clippy::panic_in_result_fn)]
  278|       |            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  279|       |            where
  280|       |                I: InputBlockIterator<'i, N>,
  281|       |                Q: QuoteClassifiedIterator<'i, I, M, N>,
  282|       |            {
  283|       |                let current_block_start = state.iter.get_offset();
  284|       |                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  285|       |                let current_idx = current_block_start + current_block_idx;
  286|       |
  287|       |                debug!(
  288|       |                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  289|       |                );
  290|       |
  291|       |                // We want to move by this much forward, and delta > 0.
  292|       |                assert!(index > current_idx);
  293|       |                let delta = index - current_idx;
  294|       |
  295|       |                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  296|       |                // and adjust the delta to cover that distance. This makes calculations simpler.
  297|       |                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  298|       |                let remaining = delta + current_block_idx;
  299|       |                let blocks_to_skip = remaining / N;
  300|       |                let remainder = remaining % N;
  301|       |
  302|       |                match state.block.as_mut() {
  303|       |                    Some(b) if blocks_to_skip == 0 => {
  304|       |                        b.idx = remaining;
  305|       |                    }
  306|       |                    Some(_) => {
  307|       |                        state.block = state
  308|       |                            .iter
  309|       |                            .offset(blocks_to_skip as isize)?
  310|       |                            .map(|b| ResumeClassifierBlockState {
  311|       |                                block: b,
  312|       |                                idx: remainder,
  313|       |                            });
  314|       |                    }
  315|       |                    None => {
  316|       |                        state.block = state
  317|       |                            .iter
  318|       |                            .offset((blocks_to_skip + 1) as isize)?
  319|       |                            .map(|b| ResumeClassifierBlockState {
  320|       |                                block: b,
  321|       |                                idx: remainder,
  322|       |                            });
  323|       |                    }
  324|       |                }
  325|       |
  326|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  327|       |
  328|       |                Ok(())
  329|       |            }
  330|       |        })
  331|    977|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   95|  1.98k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   96|  1.98k|        let initial_state = automaton.initial_state();
   97|  1.98k|        let fallback_state = automaton[initial_state].fallback_state();
   98|  1.98k|        let transitions = automaton[initial_state].transitions();
   99|  1.98k|
  100|  1.98k|        if fallback_state == initial_state && transitions.len() == 1 {
  101|  1.29k|            let (label, target_state) = transitions[0];
  102|       |
  103|  1.29k|            if let Some(member_name) = label.get_member_name() {
  104|      0|                debug!("Automaton starts with a descendant search, using memmem heuristic.");
  105|       |
  106|    977|                return Some(Self {
  107|    977|                    bytes,
  108|    977|                    state: target_state,
  109|    977|                    is_accepting: automaton.is_accepting(target_state),
  110|    977|                    member_name,
  111|    977|                    simd,
  112|    977|                });
  113|    315|            }
  114|    697|        }
  115|       |
  116|  1.01k|        None
  117|  1.98k|    }
_RNCINvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_E0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  169|  3.68k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
_RNCINvNvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_Es_0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  310|    311|                            .map(|b| ResumeClassifierBlockState {
  311|    311|                                block: b,
  312|    311|                                idx: remainder,
  313|    311|                            });
_RINvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13head_skippingINtB5_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2D_6quotes7avx2_6411ConstructorNtNtNtB2D_10structural7avx2_6411ConstructorNtNtNtB2D_5depth7avx2_6411ConstructorNtNtNtB2D_6memmem7avx2_6411ConstructorKj1_EINtNtB7_4main8ExecutorB1V_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6n_5MatchEEB2y_EB6i_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  135|    977|        {
  136|    977|            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  137|    977|            let mut idx = 0;
  138|    977|            let mut first_block = None;
  139|       |
  140|  6.19k|            loop {
  141|  6.19k|                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  142|      0|                debug!("Starting memmem search from {idx}");
  143|       |
  144|  6.19k|                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  145|  5.24k|                    drop(memmem);
  146|  5.24k|
  147|  5.24k|                    first_block = Some(last_block);
  148|  5.24k|                    idx = starting_quote_idx;
  149|      0|                    debug!("Needle found at {idx}");
  150|  5.24k|                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  151|  5.24k|
  152|  5.24k|                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  153|  3.68k|                    Some((colon_idx, b':')) => {
  154|  3.68k|                        let (next_idx, next_c) = head_skip
  155|  3.68k|                            .bytes
  156|  3.68k|                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  157|  3.68k|                            .ok_or(EngineError::MissingItem())?;
  158|       |
  159|       |                            let ResumedQuoteClassifier {
  160|  3.68k|                                classifier: quote_classifier,
  161|  3.68k|                                first_block: quote_classified_first_block,
  162|  3.68k|                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  163|  3.68k|
  164|  3.68k|                            // Temporarily set the index within the current block to zero.
  165|  3.68k|                            // This makes sense for the move below.
  166|  3.68k|                            let mut classifier_state = ResumeClassifierState {
  167|  3.68k|                                iter: quote_classifier,
  168|  3.68k|                                block: quote_classified_first_block
  169|  3.68k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  170|  3.68k|                                are_colons_on: false,
  171|  3.68k|                                are_commas_on: head_skip.is_accepting,
  172|  3.68k|                            };
  173|       |
  174|      0|                            debug!("Actual match with colon at {colon_idx}");
  175|      0|                            debug!("Next significant character at {next_idx}");
  176|      0|                            debug!("Classifier is at {}", classifier_state.get_idx());
  177|      0|                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  178|       |
  179|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  180|       |                            // and correctly points to the place the engine would expect had it found the matching key
  181|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  182|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  183|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  184|       |                            // in the output (if it happens at a block boundary).
  185|  3.68k|                            if next_c == b'{' || next_c == b'[' {
  186|  1.45k|                                forward_to(&mut classifier_state, next_idx)?;
  187|  1.45k|                                if head_skip.is_accepting {
  188|  1.09k|                                    engine.recorder().record_match(
  189|  1.09k|                                        next_idx,
  190|  1.09k|                                        Depth::ZERO,
  191|  1.09k|                                        crate::result::MatchedNodeType::Complex,
  192|  1.09k|                                    )?;
  193|    352|                                }
  194|  1.45k|                                forward_to(&mut classifier_state, next_idx + 1)?;
  195|       |                            } else {
  196|  2.23k|                                forward_to(&mut classifier_state, next_idx)?;
  197|       |                            };
  198|       |
  199|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  200|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  201|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  202|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  203|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  204|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  205|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  206|  3.68k|                            if let Some(block) = classifier_state.block.as_mut() {
  207|  3.68k|                                let should_be_quoted = block.block.block[block.idx] == b'"';
  208|  3.68k|                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  209|      0|                                    debug!("Mask needs flipping!");
  210|  1.57k|                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  211|  1.57k|                                    classifier_state.iter.flip_quotes_bit();
  212|  2.11k|                                }
  213|      0|                            }
  214|       |
  215|  3.66k|                            classifier_state = match next_c {
  216|       |                                b'{' | b'[' => {
  217|      0|                                    debug!("resuming");
  218|  1.45k|                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  219|  1.45k|                                    engine
  220|  1.45k|                                        .run_on_subtree(
  221|  1.45k|                                            Structural::Opening(
  222|  1.45k|                                                if next_c == b'{' {
  223|  1.24k|                                                    BracketType::Curly
  224|       |                                                } else {
  225|    205|                                                    BracketType::Square
  226|       |                                                },
  227|  1.45k|                                                next_idx,
  228|  1.45k|                                            ),
  229|  1.45k|                                            head_skip.state,
  230|  1.45k|                                            classifier,
  231|     22|                                        )?
  232|       |                                        .0
  233|       |                                }
  234|  1.94k|                                _ if head_skip.is_accepting => {
  235|  1.94k|                                    engine.recorder().record_match(
  236|  1.94k|                                        next_idx,
  237|  1.94k|                                        Depth::ZERO,
  238|  1.94k|                                        crate::result::MatchedNodeType::Atomic,
  239|  1.94k|                                    )?;
  240|  1.94k|                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  241|  1.94k|                                    let next_structural = classifier.next()?;
  242|       |
  243|  1.94k|                                    match next_structural {
  244|  1.93k|                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  245|      5|                                        None => return Err(EngineError::MissingClosingCharacter()),
  246|       |                                    }
  247|  1.93k|                                    classifier.stop()
  248|       |                                }
  249|    292|                                _ => classifier_state,
  250|       |                            };
  251|       |
  252|      0|                            debug!("Quote classified up to {}", classifier_state.get_idx());
  253|  3.66k|                            idx = classifier_state.get_idx();
  254|  3.66k|
  255|  3.66k|                            first_block = classifier_state.block.map(|b| b.block.block);
  256|  3.66k|                            input_iter = classifier_state.iter.into_inner();
  257|       |                        }
  258|  1.55k|                        _ => idx += 1,
  259|       |                    }
  260|       |                } else {
  261|      0|                    debug!("No memmem matches, exiting");
  262|    950|                    break;
  263|    950|                }
  264|    950|            }
  265|    950|
  266|    950|            return Ok(());

_RINvXs_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  124|  2.70k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  125|  2.70k|    where
  126|  2.70k|        I: Input,
  127|  2.70k|        S: Sink<Match>,
  128|  2.70k|    {
  129|  2.70k|        if self.automaton.is_empty_query() {
  130|    720|            return empty_query::match_(input, sink);
  131|  1.98k|        }
  132|  1.98k|
  133|  1.98k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  134|  1.98k|        config_simd!(self.simd => |simd| {
  135|  1.98k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  136|  1.98k|            executor.run()
  137|     71|        })?;
  138|       |
  139|  1.91k|        Ok(())
  140|  2.70k|    }
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E8recorderCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  670|  5.95k|    fn recorder(&mut self) -> &'r R {
  671|  5.95k|        self.recorder
  672|  5.95k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  631|  35.9k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  632|  35.9k|        if let Some(stack_frame) = self.peek() {
  633|  30.4k|            if depth <= stack_frame.depth {
  634|  25.5k|                return self.contents.pop();
  635|  4.84k|            }
  636|  5.47k|        }
  637|  10.3k|        None
  638|  35.9k|    }
_RNCNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE12handle_colon0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  322|  6.98k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_12NodeTypeHintE4from:
  683|  25.0k|    fn from(value: NodeTypeHint) -> Self {
  684|  25.0k|        match value {
  685|  6.69k|            NodeTypeHint::Atomic => Self::Atomic,
  686|  18.3k|            NodeTypeHint::Complex(_) => Self::Complex,
  687|       |        }
  688|  25.0k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  203|  1.98k|    fn run(mut self) -> Result<(), EngineError> {
  204|  1.98k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  205|  1.98k|
  206|  1.98k|        match mb_head_skip {
  207|    977|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  208|  1.01k|            None => self.run_and_exit(),
  209|       |        }
  210|  1.98k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  534|  50.2k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  535|  50.2k|        let target_is_list = opening == BracketType::Square;
  536|  50.2k|
  537|  50.2k|        let fallback = self.automaton[self.state].fallback_state();
  538|  50.2k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  539|  50.2k|        let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  540|       |
  541|  50.2k|        if target != self.state || target_is_list != self.is_list || searching_list {
  542|       |            debug!(
  543|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  544|       |                self.state, self.array_count
  545|       |            );
  546|       |
  547|  33.5k|            self.stack.push(StackFrame {
  548|  33.5k|                depth: *self.depth,
  549|  33.5k|                state: self.state,
  550|  33.5k|                is_list: self.is_list,
  551|  33.5k|                array_count: self.array_count,
  552|  33.5k|                has_any_array_item_transition: self.has_any_array_item_transition,
  553|  33.5k|                has_any_array_item_transition_to_accepting: self.has_any_array_item_transition_to_accepting,
  554|  33.5k|            });
  555|  33.5k|            self.state = target;
  556|  16.6k|        }
  557|  50.2k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  559|  52.9k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  560|  52.9k|        if self.depth == Depth::ZERO {
  561|  2.31k|            None
  562|       |        } else {
  563|  50.6k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  564|       |
  565|  50.6k|            (char == b':').then_some(char_idx)
  566|       |        }
  567|  52.9k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE8is_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  570|  12.3k|    fn is_match(&self, idx: usize, member_name: &JsonString) -> Result<bool, EngineError> {
  571|  12.3k|        let len = member_name.quoted().len();
  572|       |
  573|  12.3k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  574|  12.3k|            Some(x) => x,
  575|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  576|       |        };
  577|       |
  578|  12.3k|        if closing_quote_idx + 1 < len {
  579|    375|            return Ok(false);
  580|  11.9k|        }
  581|  11.9k|
  582|  11.9k|        let start_idx = closing_quote_idx + 1 - len;
  583|  11.9k|        self.input
  584|  11.9k|            .is_member_match(start_idx, closing_quote_idx + 1, member_name)
  585|  11.9k|            .map_err(|x| x.into().into())
  586|  12.3k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  588|  2.39k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  589|  2.39k|        if self.depth != Depth::ZERO {
  590|      1|            Err(EngineError::MissingClosingCharacter())
  591|       |        } else {
  592|  2.39k|            Ok(())
  593|       |        }
  594|  2.39k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE25current_node_bracket_typeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  596|    150|    fn current_node_bracket_type(&self) -> BracketType {
  597|    150|        if self.is_list {
  598|      0|            BracketType::Square
  599|       |        } else {
  600|    150|            BracketType::Curly
  601|       |        }
  602|    150|    }
_RINvNtNtCs1IPNbM7K0I4_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  170|  1.98k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  171|  1.98k|    automaton: &'i Automaton<'q>,
  172|  1.98k|    input: &'i I,
  173|  1.98k|    recorder: &'r R,
  174|  1.98k|    simd: V,
  175|  1.98k|) -> Executor<'i, 'q, 'r, I, R, V>
  176|  1.98k|where
  177|  1.98k|    I: Input,
  178|  1.98k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  179|  1.98k|{
  180|  1.98k|    Executor {
  181|  1.98k|        depth: Depth::ZERO,
  182|  1.98k|        state: automaton.initial_state(),
  183|  1.98k|        stack: SmallStack::new(),
  184|  1.98k|        automaton,
  185|  1.98k|        input,
  186|  1.98k|        recorder,
  187|  1.98k|        simd,
  188|  1.98k|        next_event: None,
  189|  1.98k|        is_list: false,
  190|  1.98k|        array_count: JsonUInt::ZERO,
  191|  1.98k|        has_any_array_item_transition: false,
  192|  1.98k|        has_any_array_item_transition_to_accepting: false,
  193|  1.98k|    }
  194|  1.98k|}
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E14run_on_subtreeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  653|  1.45k|    fn run_on_subtree(
  654|  1.45k|        &mut self,
  655|  1.45k|        next_event: Structural,
  656|  1.45k|        state: State,
  657|  1.45k|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>>,
  658|  1.45k|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>, V, MaskType>, EngineError> {
  659|  1.45k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  660|  1.45k|
  661|  1.45k|        self.state = state;
  662|  1.45k|        self.next_event = Some(next_event);
  663|  1.45k|
  664|  1.45k|        self.run_on_subtree(&mut classifier)?;
  665|  1.43k|        self.verify_subtree_closed()?;
  666|       |
  667|  1.42k|        Ok(ResumeState(classifier.stop()))
  668|  1.45k|    }
_RINvNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  231|  2.46k|        {
  232|   128k|            loop {
  233|   128k|                if eng.next_event.is_none() {
  234|   119k|                    eng.next_event = match classifier.next() {
  235|   119k|                        Ok(e) => e,
  236|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  237|       |                    };
  238|  8.56k|                }
  239|   128k|                if let Some(event) = eng.next_event {
  240|      0|                    debug!("====================");
  241|      0|                    debug!("Event = {:?}", event);
  242|      0|                    debug!("Depth = {:?}", eng.depth);
  243|      0|                    debug!("Stack = {:?}", eng.stack);
  244|      0|                    debug!("State = {:?}", eng.state);
  245|      0|                    debug!("====================");
  246|       |
  247|   128k|                    eng.next_event = None;
  248|   128k|                    match event {
  249|  19.7k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  250|  19.4k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  251|  52.9k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  252|  35.9k|                        Structural::Closing(_, idx) => {
  253|  35.9k|                            eng.handle_closing(classifier, idx)?;
  254|       |
  255|  35.9k|                            if eng.depth == Depth::ZERO {
  256|  2.24k|                                break;
  257|  33.6k|                            }
  258|       |                        }
  259|       |                    }
  260|       |                } else {
  261|    154|                    break;
  262|       |                }
  263|       |            }
  264|       |
  265|  2.39k|            Ok(())
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  344|  19.4k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  345|  19.4k|        self.recorder.record_value_terminator(idx, self.depth)?;
  346|  19.4k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  347|  19.4k|            c == b'{' || c == b'['
  348|       |        } else {
  349|      0|            false
  350|       |        };
  351|       |
  352|  19.4k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  353|  19.4k|
  354|  19.4k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  355|      0|            debug!("Accepting on comma.");
  356|  2.17k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  357|  17.3k|        }
  358|       |
  359|       |        // After wildcard, check for a matching array index.
  360|       |        // If the index increment exceeds the field's limit, give up.
  361|  19.4k|        if self.is_list && self.array_count.try_increment().is_err() {
  362|      0|            return Ok(());
  363|  19.4k|        }
  364|      0|        debug!("Incremented array count to {}", self.array_count);
  365|       |
  366|  19.4k|        let match_index = self
  367|  19.4k|            .automaton
  368|  19.4k|            .has_array_index_transition_to_accepting(self.state, &self.array_count);
  369|  19.4k|
  370|  19.4k|        if self.is_list && !is_next_opening && match_index {
  371|      0|            debug!("Accepting on list item.");
  372|    826|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  373|  18.6k|        }
  374|       |
  375|  19.4k|        Ok(())
  376|  19.4k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  379|  52.9k|    fn handle_opening(
  380|  52.9k|        &mut self,
  381|  52.9k|        classifier: &mut Classifier!(),
  382|  52.9k|        bracket_type: BracketType,
  383|  52.9k|        idx: usize,
  384|  52.9k|    ) -> Result<(), EngineError> {
  385|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  386|  52.9k|        let mut any_matched = false;
  387|  52.9k|
  388|  52.9k|        let colon_idx = self.find_preceding_colon(idx);
  389|       |
  390|  52.9k|        for &(label, target) in self.automaton[self.state].transitions() {
  391|  39.9k|            match label {
  392|  22.9k|                TransitionLabel::ArrayIndex(i) => {
  393|  22.9k|                    if self.is_list && i.eq(&self.array_count) {
  394|  3.32k|                        any_matched = true;
  395|  3.32k|                        self.transition_to(target, bracket_type);
  396|  3.32k|                        if self.automaton.is_accepting(target) {
  397|      0|                            debug!("Accept {idx}");
  398|  1.78k|                            self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  399|  1.53k|                        }
  400|  3.32k|                        break;
  401|  19.6k|                    }
  402|       |                }
  403|  17.0k|                TransitionLabel::ObjectMember(member_name) => {
  404|  17.0k|                    if let Some(colon_idx) = colon_idx {
  405|  8.75k|                        if self.is_match(colon_idx, member_name)? {
  406|  5.65k|                            any_matched = true;
  407|  5.65k|                            self.transition_to(target, bracket_type);
  408|  5.65k|                            if self.automaton.is_accepting(target) {
  409|  3.35k|                                self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  410|  2.30k|                            }
  411|  5.65k|                            break;
  412|  3.10k|                        }
  413|  8.29k|                    }
  414|       |                }
  415|       |            }
  416|       |        }
  417|       |
  418|  52.9k|        if !any_matched && self.depth != Depth::ZERO {
  419|  41.6k|            let fallback = self.automaton[self.state].fallback_state();
  420|      0|            debug!("Falling back to {fallback}");
  421|       |
  422|  41.6k|            if self.automaton.is_rejecting(fallback) {
  423|    409|                let closing_idx = classifier.skip(bracket_type)?;
  424|    409|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  425|  41.2k|            } else {
  426|  41.2k|                self.transition_to(fallback, bracket_type);
  427|  41.2k|            }
  428|  41.2k|
  429|  41.2k|            if self.automaton.is_accepting(fallback) {
  430|  13.2k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  431|  28.0k|            }
  432|  11.2k|        }
  433|       |
  434|  52.5k|        self.depth
  435|  52.5k|            .increment()
  436|  52.5k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  437|       |
  438|  52.4k|        self.is_list = bracket_type == BracketType::Square;
  439|  52.4k|        let mut needs_commas = false;
  440|  52.4k|
  441|  52.4k|        if self.is_list {
  442|  29.1k|            self.has_any_array_item_transition = self.automaton.has_any_array_item_transition(self.state);
  443|  29.1k|            self.has_any_array_item_transition_to_accepting =
  444|  29.1k|                self.automaton.has_any_array_item_transition_to_accepting(self.state);
  445|  29.1k|
  446|  29.1k|            let fallback = self.automaton[self.state].fallback_state();
  447|  29.1k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  448|       |
  449|  29.1k|            let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  450|       |
  451|  29.1k|            if searching_list {
  452|  22.4k|                needs_commas = true;
  453|  22.4k|                self.array_count = JsonUInt::ZERO;
  454|      0|                debug!("Initialized array count to {}", self.array_count);
  455|       |
  456|  22.4k|                let wants_first_item =
  457|  22.4k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  458|       |
  459|  22.4k|                if wants_first_item {
  460|  13.2k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  461|       |
  462|  13.2k|                    match next {
  463|  12.1k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  464|  1.11k|                        Some((value_idx, _)) => {
  465|  1.11k|                            self.record_match_detected_at(
  466|  1.11k|                                value_idx,
  467|  1.11k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  468|  1.11k|                            )?;
  469|       |                        }
  470|      0|                        _ => (),
  471|       |                    }
  472|  9.20k|                }
  473|  6.75k|            }
  474|  23.2k|        }
  475|       |
  476|  52.4k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  477|  13.9k|            classifier.turn_colons_and_commas_on(idx);
  478|  38.5k|        } else if needs_commas {
  479|  22.4k|            classifier.turn_colons_off();
  480|  22.4k|            classifier.turn_commas_on(idx);
  481|  22.4k|        } else {
  482|  16.1k|            classifier.turn_colons_and_commas_off();
  483|  16.1k|        }
  484|       |
  485|  52.4k|        Ok(())
  486|  52.9k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  489|  35.9k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  490|      0|        debug!("Closing, decreasing depth and popping stack.");
  491|       |
  492|  35.9k|        self.depth
  493|  35.9k|            .decrement()
  494|  35.9k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  495|  35.9k|        self.recorder.record_value_terminator(idx, self.depth)?;
  496|       |
  497|  35.9k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  498|  25.5k|            self.state = stack_frame.state;
  499|  25.5k|            self.is_list = stack_frame.is_list;
  500|  25.5k|            self.array_count = stack_frame.array_count;
  501|  25.5k|            self.has_any_array_item_transition = stack_frame.has_any_array_item_transition;
  502|  25.5k|            self.has_any_array_item_transition_to_accepting = stack_frame.has_any_array_item_transition_to_accepting;
  503|       |
  504|      0|            debug!("Restored array count to {}", self.array_count);
  505|       |
  506|  25.5k|            if self.automaton.is_unitary(self.state) {
  507|    130|                let bracket_type = self.current_node_bracket_type();
  508|      0|                debug!("Skipping unique state from {bracket_type:?}");
  509|    130|                let close_idx = classifier.skip(bracket_type)?;
  510|    130|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  511|    130|                return Ok(());
  512|  25.4k|            }
  513|  10.3k|        }
  514|       |
  515|  35.7k|        if self.is_list
  516|  18.9k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  517|  12.4k|                || self.has_any_array_item_transition)
  518|  16.1k|        {
  519|  16.1k|            classifier.turn_commas_on(idx);
  520|  19.6k|        } else {
  521|  19.6k|            classifier.turn_commas_off();
  522|  19.6k|        }
  523|       |
  524|  35.7k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  525|  10.2k|            classifier.turn_colons_and_commas_on(idx);
  526|  25.5k|        } else {
  527|  25.5k|            classifier.turn_colons_off();
  528|  25.5k|        }
  529|       |
  530|  35.7k|        Ok(())
  531|  35.9k|    }
_RNCNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  436|     65|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   50|  2.75k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   51|  2.75k|        let automaton = Automaton::new(query)?;
   52|      0|        debug!("DFA:\n {}", automaton);
   53|  2.70k|        let simd = simd::configure();
   54|  2.70k|        log::info!("SIMD configuration:\n {}", simd);
   55|  2.70k|        Ok(MainEngine { automaton, simd })
   56|  2.75k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  223|  2.46k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  224|  2.46k|        dispatch_simd!(self.simd; self, classifier =>
  225|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  226|       |        where
  227|       |            'i: 'r,
  228|       |            I: Input,
  229|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  230|       |            V: Simd
  231|       |        {
  232|       |            loop {
  233|       |                if eng.next_event.is_none() {
  234|       |                    eng.next_event = match classifier.next() {
  235|       |                        Ok(e) => e,
  236|       |                        Err(err) => return Err(EngineError::InputError(err)),
  237|       |                    };
  238|       |                }
  239|       |                if let Some(event) = eng.next_event {
  240|       |                    debug!("====================");
  241|       |                    debug!("Event = {:?}", event);
  242|       |                    debug!("Depth = {:?}", eng.depth);
  243|       |                    debug!("Stack = {:?}", eng.stack);
  244|       |                    debug!("State = {:?}", eng.state);
  245|       |                    debug!("====================");
  246|       |
  247|       |                    eng.next_event = None;
  248|       |                    match event {
  249|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  250|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  251|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  252|       |                        Structural::Closing(_, idx) => {
  253|       |                            eng.handle_closing(classifier, idx)?;
  254|       |
  255|       |                            if eng.depth == Depth::ZERO {
  256|       |                                break;
  257|       |                            }
  258|       |                        }
  259|       |                    }
  260|       |                } else {
  261|       |                    break;
  262|       |                }
  263|       |            }
  264|       |
  265|       |            Ok(())
  266|       |        })
  267|  2.46k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  286|  19.7k|    fn handle_colon(
  287|  19.7k|        &mut self,
  288|  19.7k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  289|  19.7k|        idx: usize,
  290|  19.7k|    ) -> Result<(), EngineError> {
  291|      0|        debug!("Colon");
  292|       |
  293|  19.7k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  294|  19.7k|            c == b'{' || c == b'['
  295|       |        } else {
  296|      0|            false
  297|       |        };
  298|       |
  299|  19.7k|        if !is_next_opening {
  300|  6.98k|            let mut any_matched = false;
  301|       |
  302|  6.98k|            for &(label, target) in self.automaton[self.state].transitions() {
  303|  5.64k|                match label {
  304|  1.97k|                    TransitionLabel::ArrayIndex(_) => {}
  305|  3.66k|                    TransitionLabel::ObjectMember(member_name) => {
  306|  3.66k|                        if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  307|  1.17k|                            self.record_match_detected_at(
  308|  1.17k|                                idx + 1,
  309|  1.17k|                                NodeTypeHint::Atomic, /* since is_next_opening is false */
  310|  1.17k|                            )?;
  311|  1.17k|                            any_matched = true;
  312|  1.17k|                            break;
  313|  2.49k|                        }
  314|       |                    }
  315|       |                }
  316|       |            }
  317|  6.98k|            let fallback_state = self.automaton[self.state].fallback_state();
  318|  6.98k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  319|  1.40k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  320|  5.57k|            }
  321|  6.98k|            self.next_event = classifier.next()?;
  322|  6.98k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  323|  6.98k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  324|     20|                if let Some(s) = self.next_event {
  325|     20|                    match s {
  326|      0|                        Structural::Closing(_, idx) => {
  327|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  328|       |                        }
  329|     20|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  330|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  331|       |                    }
  332|      0|                }
  333|     20|                let bracket_type = self.current_node_bracket_type();
  334|      0|                debug!("Skipping unique state from {bracket_type:?}");
  335|     20|                let stop_at = classifier.skip(bracket_type)?;
  336|     20|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  337|  6.96k|            }
  338|  12.7k|        }
  339|       |
  340|  19.7k|        Ok(())
  341|  19.7k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB5_10SmallStack4pushCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  641|  33.5k|    fn push(&mut self, value: StackFrame) {
  642|  33.5k|        self.contents.push(value)
  643|  33.5k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB5_10SmallStack4peekCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  626|  35.9k|    fn peek(&mut self) -> Option<StackFrame> {
  627|  35.9k|        self.contents.last().copied()
  628|  35.9k|    }
_RNCNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  277|  25.0k|        .map(|x| x.0);
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  212|  1.01k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  213|  1.01k|        let iter = self.input.iter_blocks(self.recorder);
  214|  1.01k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  215|  1.01k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  216|  1.01k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  217|  1.01k|
  218|  1.01k|        self.run_on_subtree(&mut classifier)?;
  219|       |
  220|    968|        self.verify_subtree_closed()
  221|  1.01k|    }
_RNvMs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  269|  25.0k|    fn record_match_detected_at(&mut self, start_idx: usize, hint: NodeTypeHint) -> Result<(), EngineError> {
  270|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  271|       |
  272|  25.0k|        let index = match hint {
  273|  4.94k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  274|  13.4k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  275|  6.69k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  276|       |        }
  277|  25.0k|        .map(|x| x.0);
  278|  25.0k|
  279|  25.0k|        match index {
  280|  25.0k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  281|      0|            None => Err(EngineError::MissingItem()),
  282|       |        }
  283|  25.0k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6engine4mainNtB5_10SmallStack3new:
  621|  1.98k|    fn new() -> Self {
  622|  1.98k|        Self { contents: smallvec![] }
  623|  1.98k|    }

_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  138|   273k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   273k|        self.classifier
  140|   273k|            .as_mut()
  141|   273k|            .expect("tail skip must always hold a classifier")
  142|   273k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4stopCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  110|  1.42k|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  111|  1.42k|        self.classifier.expect("tail skip must always hold a classifier").stop()
  112|  1.42k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   28|  2.46k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  2.46k|        Self {
   30|  2.46k|            classifier: Some(classifier),
   31|  2.46k|            simd,
   32|  2.46k|            _phantom: (PhantomData, PhantomData),
   33|  2.46k|        }
   34|  2.46k|    }
_RINvNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13tail_skippingINtB5_8TailSkippINtYpNtNtNtB9_14classification4simd4Simd16QuotesClassifierpEINtYpB1d_20StructuralClassifierpEpKj40_E4skip21avx2_pclmulqdq_popcntINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB3h_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4J_5MatchEEKB2F_EINtB1f_12ResolvedSimdNtNtNtB1h_6quotes7avx2_6411ConstructorNtNtNtB1h_10structural7avx2_6411ConstructorNtNtNtB1h_5depth7avx2_6411ConstructorNtNtNtB1h_6memmem7avx2_6411ConstructorKj1_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   44|    559|        {
   45|    559|            debug!("Skipping");
   46|    559|            let mut idx = 0;
   47|    559|            let mut err = None;
   48|    559|
   49|    559|            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|    559|            tail_skip.classifier = Some('a: {
   52|    559|                let resume_state = classifier.stop();
   53|    559|                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|    559|                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|    559|                let mut current_vector = match first_vector {
   57|    416|                    Some(v) => Some(v),
   58|    143|                    None => match depth_classifier.next() {
   59|    143|                        Ok(v) => v,
   60|      0|                        Err(e) => {
   61|      0|                            err = Some(e);
   62|      0|                            let resume_state = depth_classifier.stop(None);
   63|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|    559|                let mut current_depth = 1;
   68|       |
   69|  3.48k|                'outer: while let Some(ref mut vector) = current_vector {
   70|  3.48k|                    vector.add_depth(current_depth);
   71|       |
   72|      0|                    debug!("Fetched vector, current depth is {current_depth}");
   73|      0|                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|  3.48k|                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|  2.47k|                        while vector.advance_to_next_depth_decrease() {
   77|  2.20k|                            if vector.get_depth() == 0 {
   78|      0|                                debug!("Encountered depth 0, breaking.");
   79|    559|                                break 'outer;
   80|  1.64k|                            }
   81|       |                        }
   82|  2.65k|                    }
   83|       |
   84|  2.92k|                    current_depth = vector.depth_at_end();
   85|  2.92k|                    current_vector = match depth_classifier.next() {
   86|  2.92k|                        Ok(v) => v,
   87|      0|                        Err(e) => {
   88|      0|                            err = Some(e);
   89|      0|                            let resume_state = depth_classifier.stop(None);
   90|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|      0|                debug!("Skipping complete, resuming structural classification.");
   96|    559|                let resume_state = depth_classifier.stop(current_vector);
   97|      0|                debug!("Finished at {}", resume_state.get_idx());
   98|    559|                idx = resume_state.get_idx();
   99|    559|                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|    559|            if let Some(err) = err {
  103|      0|                Err(err.into())
  104|       |            } else {
  105|    559|                Ok(idx)
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4skipCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   36|    559|    pub(crate) fn skip(&mut self, opening: BracketType) -> Result<usize, EngineError> {
   37|    559|        dispatch_simd!(self.simd; self, opening =>
   38|       |        fn <'i, I, V>(
   39|       |            tail_skip: &mut TailSkip<'i, I, V::QuotesClassifier<'i, I>, V::StructuralClassifier<'i, I>, V, BLOCK_SIZE>,
   40|       |            opening: BracketType) -> Result<usize, EngineError>
   41|       |        where
   42|       |            I: InputBlockIterator<'i, BLOCK_SIZE>,
   43|       |            V: Simd
   44|       |        {
   45|       |            debug!("Skipping");
   46|       |            let mut idx = 0;
   47|       |            let mut err = None;
   48|       |
   49|       |            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|       |            tail_skip.classifier = Some('a: {
   52|       |                let resume_state = classifier.stop();
   53|       |                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|       |                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|       |                let mut current_vector = match first_vector {
   57|       |                    Some(v) => Some(v),
   58|       |                    None => match depth_classifier.next() {
   59|       |                        Ok(v) => v,
   60|       |                        Err(e) => {
   61|       |                            err = Some(e);
   62|       |                            let resume_state = depth_classifier.stop(None);
   63|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|       |                let mut current_depth = 1;
   68|       |
   69|       |                'outer: while let Some(ref mut vector) = current_vector {
   70|       |                    vector.add_depth(current_depth);
   71|       |
   72|       |                    debug!("Fetched vector, current depth is {current_depth}");
   73|       |                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|       |                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|       |                        while vector.advance_to_next_depth_decrease() {
   77|       |                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|       |                                break 'outer;
   80|       |                            }
   81|       |                        }
   82|       |                    }
   83|       |
   84|       |                    current_depth = vector.depth_at_end();
   85|       |                    current_vector = match depth_classifier.next() {
   86|       |                        Ok(v) => v,
   87|       |                        Err(e) => {
   88|       |                            err = Some(e);
   89|       |                            let resume_state = depth_classifier.stop(None);
   90|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|       |                let resume_state = depth_classifier.stop(current_vector);
   97|       |                debug!("Finished at {}", resume_state.get_idx());
   98|       |                idx = resume_state.get_idx();
   99|       |                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|       |            if let Some(err) = err {
  103|       |                Err(err.into())
  104|       |            } else {
  105|       |                Ok(idx)
  106|       |            }
  107|       |        })
  108|    559|    }

_RINvNtCs1IPNbM7K0I4_8rsonpath5input8align_toKj80_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  226|  2.75k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  227|  2.75k|    let ptr = bytes.as_ptr();
  228|  2.75k|    let offset = ptr.align_offset(N);
  229|  2.75k|    if offset > bytes.len() {
  230|    958|        (bytes, &[], &[])
  231|       |    } else {
  232|  1.79k|        let (left, rest) = bytes.split_at(offset);
  233|  1.79k|        let middle_len = (rest.len() / N) * N;
  234|  1.79k|        let (middle, right) = rest.split_at(middle_len);
  235|  1.79k|
  236|  1.79k|        (left, middle, right)
  237|       |    }
  238|  2.75k|}
_RNvXNtCs1IPNbM7K0I4_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  207|  70.1k|    fn halves(&self) -> (&[u8], &[u8]) {
  208|  70.1k|        assert_eq!(N % 2, 0);
  209|  70.1k|        (&self[..N / 2], &self[N / 2..])
  210|  70.1k|    }

_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  174|  68.0k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  175|  68.0k|        return Ok(
  176|  68.0k|            // The hot path is when we start and end within the middle section.
  177|  68.0k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  178|  68.0k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  179|  68.0k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  180|  60.7k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  181|  60.7k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  182|     34|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  183|       |                }
  184|       |            } else {
  185|  7.31k|                self.as_padded_input().seek_non_whitespace_forward(from)
  186|       |            },
  187|       |        );
  188|       |
  189|       |        #[cold]
  190|       |        #[inline(never)]
  191|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|       |            last_block
  193|       |                .bytes()
  194|       |                .seek_non_whitespace_forward(0)
  195|       |                .map(|(x, y)| (x + offset, y))
  196|       |        }
  197|  68.0k|    }
_RINvNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathNtNtNtBc_6result5empty13EmptyRecorderKj40_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  262|  3.60k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  3.60k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  3.60k|        ) -> Option<&'a [u8]>
  265|  3.60k|        where
  266|  3.60k|            R: InputRecorder<&'a [u8]>,
  267|  3.60k|        {
  268|  3.60k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  3.60k|            if let Some(b) = block {
  271|  2.88k|                iter.recorder.record_block_start(b);
  272|  2.88k|                iter.idx += N;
  273|  2.88k|            }
  274|       |
  275|  3.60k|            block
  276|  3.60k|        }
_RINvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  147|  18.3k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  148|  18.3k|        return Ok(
  149|  18.3k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  150|  17.0k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  151|  17.0k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  152|      0|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  153|       |                }
  154|       |            } else {
  155|  1.35k|                self.as_padded_input().seek_forward(from, needles)
  156|       |            },
  157|       |        );
  158|       |
  159|       |        #[cold]
  160|       |        #[inline(never)]
  161|       |        fn handle_last<const N: usize>(
  162|       |            last_block: &PaddedBlock,
  163|       |            offset: usize,
  164|       |            needles: [u8; N],
  165|       |        ) -> Option<(usize, u8)> {
  166|       |            last_block
  167|       |                .bytes()
  168|       |                .seek_forward(0, needles)
  169|       |                .map(|(x, y)| (x + offset, y))
  170|       |        }
  171|  18.3k|    }
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input15is_member_match:
  218|  33.2k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> Result<bool, Self::Error> {
  219|  33.2k|        debug_assert!(from < to);
  220|       |        // The hot path is when we're checking fully within the middle section.
  221|       |        // This has to be as fast as possible, so the "cold" path referring to the TwoSidesPaddedInput
  222|       |        // impl is explicitly marked with #[cold].
  223|  33.2k|        if from > MAX_BLOCK_SIZE && to < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  224|       |            // This is the hot path -- do the bounds check and memcmp.
  225|  28.2k|            let bytes = self.middle_bytes;
  226|  28.2k|            let from = from - MAX_BLOCK_SIZE;
  227|  28.2k|            let to = to - MAX_BLOCK_SIZE;
  228|  28.2k|            let slice = &bytes[from..to];
  229|  28.2k|            Ok(member.quoted().as_bytes() == slice && (from == 0 || bytes[from - 1] != b'\\'))
  230|       |        } else {
  231|       |            // This is a very expensive, cold path.
  232|  5.03k|            Ok(self.as_padded_input().is_member_match(from, to, member))
  233|       |        }
  234|  33.2k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   45|  2.75k|    pub fn new(bytes: &'a [u8]) -> Self {
   46|  2.75k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   47|  2.75k|        let first_block = PaddedBlock::pad_first_block(first);
   48|  2.75k|        let last_block = PaddedBlock::pad_last_block(last);
   49|  2.75k|
   50|  2.75k|        Self {
   51|  2.75k|            middle_bytes: middle,
   52|  2.75k|            first_block,
   53|  2.75k|            last_block,
   54|  2.75k|        }
   55|  2.75k|    }
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  200|  50.6k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  201|  50.6k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  202|  47.1k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  203|  47.1k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  204|      0|                None => handle_first(&self.first_block),
  205|       |            }
  206|       |        } else {
  207|  3.48k|            self.as_padded_input().seek_non_whitespace_backward(from)
  208|       |        };
  209|       |
  210|       |        #[cold]
  211|       |        #[inline(never)]
  212|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|       |        }
  215|  50.6k|    }
_RNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  287|   141k|    fn get_offset(&self) -> usize {
  288|      0|        debug!("getting input iter {}", self.idx);
  289|   141k|        self.idx
  290|   141k|    }
_RNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputNtNtNtB9_6result5empty13EmptyRecorderKj40_EINtB7_18InputBlockIteratorKB2v_E4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  246|  12.4k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  12.4k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  8.83k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  8.83k|            // SAFETY: Bounds check above.
  251|  8.83k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  8.83k|            // By construction, middle has length divisible by N.
  253|  8.83k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  8.83k|            self.recorder.record_block_start(block);
  255|  8.83k|            self.idx += N;
  256|  8.83k|            Ok(Some(block))
  257|       |        } else {
  258|  3.60k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  12.4k|    }
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  100|  2.70k|    fn leading_padding_len(&self) -> usize {
  101|  2.70k|        self.first_block.padding_len()
  102|  2.70k|    }
_RINvNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2N_5MatchEEKj40_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  262|  8.20k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  8.20k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  8.20k|        ) -> Option<&'a [u8]>
  265|  8.20k|        where
  266|  8.20k|            R: InputRecorder<&'a [u8]>,
  267|  8.20k|        {
  268|  8.20k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  8.20k|            if let Some(b) = block {
  271|  7.09k|                iter.recorder.record_block_start(b);
  272|  7.09k|                iter.idx += N;
  273|  7.09k|            }
  274|       |
  275|  8.20k|            block
  276|  8.20k|        }
_RINvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1z_5MatchEEKj40_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  115|  1.98k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|  1.98k|    where
  117|  1.98k|        R: InputRecorder<&'b [u8]>,
  118|  1.98k|    {
  119|  1.98k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|  1.98k|
  121|  1.98k|        Self::BlockIterator {
  122|  1.98k|            idx: 0,
  123|  1.98k|            input: padded_input,
  124|  1.98k|            recorder,
  125|  1.98k|        }
  126|  1.98k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_inputCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   57|  18.7k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   58|  18.7k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   59|  18.7k|    }
_RINvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  115|    720|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|    720|    where
  117|    720|        R: InputRecorder<&'b [u8]>,
  118|    720|    {
  119|    720|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|    720|
  121|    720|        Self::BlockIterator {
  122|    720|            idx: 0,
  123|    720|            input: padded_input,
  124|    720|            recorder,
  125|    720|        }
  126|    720|    }
_RNvXs3_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  246|  28.8k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  28.8k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  20.6k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  20.6k|            // SAFETY: Bounds check above.
  251|  20.6k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  20.6k|            // By construction, middle has length divisible by N.
  253|  20.6k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  20.6k|            self.recorder.record_block_start(block);
  255|  20.6k|            self.idx += N;
  256|  20.6k|            Ok(Some(block))
  257|       |        } else {
  258|  8.20k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  28.8k|    }
_RNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input13seek_backwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  129|  12.3k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  130|  12.3k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  131|  10.7k|            match self.middle_bytes.seek_backward(from - MAX_BLOCK_SIZE, needle) {
  132|  10.7k|                Some(x) => Some(x + MAX_BLOCK_SIZE),
  133|      0|                None => handle_first(&self.first_block, needle),
  134|       |            }
  135|       |        } else {
  136|  1.60k|            self.as_padded_input().seek_backward(from, needle)
  137|       |        };
  138|       |
  139|       |        #[cold]
  140|       |        #[inline(never)]
  141|       |        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|       |            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|       |        }
  144|  12.3k|    }
_RNvNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  191|     34|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|     34|            last_block
  193|     34|                .bytes()
  194|     34|                .seek_non_whitespace_forward(0)
  195|     34|                .map(|(x, y)| (x + offset, y))
  196|     34|        }
_RNCNvNvXs2_NtNtCs1IPNbM7K0I4_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  195|     34|                .map(|(x, y)| (x + offset, y))

_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   50|  86.4k|    fn e(self) -> Result<T, InputError> {
   51|  86.4k|        self.map_err(std::convert::Into::into)
   52|  86.4k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   50|  41.2k|    fn e(self) -> Result<T, InputError> {
   51|  41.2k|        self.map_err(std::convert::Into::into)
   52|  41.2k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultbNtB2_10InfallibleEINtB2_21InputErrorConvertiblebE1eCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   50|  21.3k|    fn e(self) -> Result<T, InputError> {
   51|  21.3k|        self.map_err(std::convert::Into::into)
   52|  21.3k|    }

_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  315|  65.3k|    pub(super) fn middle(&self) -> &'a [u8] {
  316|  65.3k|        self.middle
  317|  65.3k|    }
_RINvXs0_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  127|  1.35k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  128|  1.35k|        if from < MAX_BLOCK_SIZE {
  129|    729|            self.seek_forward_from_first(from, needles)
  130|    623|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  131|      0|            self.seek_forward_from_middle(from, needles)
  132|       |        } else {
  133|    623|            self.seek_forward_from_last(from, needles)
  134|       |        }
  135|  1.35k|    }
_RINvNtNtCs1IPNbM7K0I4_8rsonpath5input7padding17seek_forward_implKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  539|  1.35k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  540|  1.35k|    let mut idx = from;
  541|  1.35k|    if idx >= bytes.len() {
  542|      0|        return None;
  543|  1.35k|    }
  544|       |
  545|  1.35k|    loop {
  546|  1.35k|        let b = bytes[idx];
  547|  1.35k|        if needles.contains(&b) {
  548|  1.35k|            return Some((idx, b));
  549|      0|        }
  550|      0|        idx += 1;
  551|      0|        if idx == bytes.len() {
  552|      0|            return None;
  553|      0|        }
  554|       |    }
  555|  1.35k|}
_RNCINvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  380|    623|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RINvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  350|    729|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  351|    729|        assert!(N > 0);
  352|    729|        debug_assert!(from < MAX_BLOCK_SIZE);
  353|    729|        let bytes = &self.first_block.bytes;
  354|    729|
  355|    729|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|       |            if self.middle.is_empty() {
  357|       |                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|       |                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|    729|        })
  362|    729|    }
_RINvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  374|    623|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  375|    623|        assert!(N > 0);
  376|    623|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  377|    623|        let bytes = &self.last_block.bytes;
  378|    623|
  379|    623|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  380|    623|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  381|    623|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_lenCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   27|  2.70k|    pub(super) fn padding_len(&self) -> usize {
   28|  2.70k|        self.padding_len
   29|  2.70k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  306|  21.5k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  307|  21.5k|        Self {
  308|  21.5k|            first_block: first,
  309|  21.5k|            middle,
  310|  21.5k|            last_block: last,
  311|  21.5k|        }
  312|  21.5k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  465|  6.38k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  466|  6.38k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  467|  6.38k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  468|  6.38k|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   35|  2.75k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   36|  2.75k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   37|  2.75k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   38|  2.75k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   39|  2.75k|
   40|  2.75k|        block_buf[block_start..].copy_from_slice(bytes);
   41|  2.75k|
   42|  2.75k|        Self {
   43|  2.75k|            bytes: block_buf,
   44|  2.75k|            padding_len: block_start,
   45|  2.75k|        }
   46|  2.75k|    }
_RNvNtNtCs1IPNbM7K0I4_8rsonpath5input7padding18seek_backward_impl:
  523|  1.60k|fn seek_backward_impl(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  524|  1.60k|    let mut idx = from;
  525|  1.60k|    assert!(idx < bytes.len());
  526|       |
  527|       |    loop {
  528|  1.60k|        if bytes[idx] == needle {
  529|  1.60k|            return Some(idx);
  530|      0|        }
  531|      0|        if idx == 0 {
  532|      0|            return None;
  533|      0|        }
  534|      0|        idx -= 1;
  535|       |    }
  536|  1.60k|}
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  410|  4.29k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB2_11PaddedBlock3lenB6_:
   23|  10.0k|    pub(super) const fn len(&self) -> usize {
   24|  10.0k|        MAX_BLOCK_SIZE
   25|  10.0k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput24seek_backward_from_first:
  319|    753|    fn seek_backward_from_first(&self, from: usize, needle: u8) -> Option<usize> {
  320|    753|        debug_assert!(from < MAX_BLOCK_SIZE);
  321|    753|        let bytes = &self.first_block.bytes;
  322|    753|
  323|    753|        seek_backward_impl(bytes, from, needle)
  324|    753|    }
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  151|  3.48k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  152|  3.48k|        if from < MAX_BLOCK_SIZE {
  153|  1.88k|            self.seek_non_whitespace_backward_from_first(from)
  154|  1.60k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  155|      0|            self.seek_non_whitespace_backward_from_middle(from)
  156|       |        } else {
  157|  1.60k|            self.seek_non_whitespace_backward_from_last(from)
  158|       |        }
  159|  3.48k|    }
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable15is_member_match:
  163|  5.03k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> bool {
  164|  5.03k|        debug_assert!(from < to);
  165|  5.03k|        let other = member.quoted().as_bytes();
  166|  5.03k|        self.cold_member_match(other, from, to)
  167|  5.03k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  413|  1.88k|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  414|  1.88k|        debug_assert!(from < MAX_BLOCK_SIZE);
  415|  1.88k|        let bytes = &self.first_block.bytes;
  416|  1.88k|
  417|  1.88k|        seek_non_whitespace_backward_impl(bytes, from)
  418|  1.88k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput17cold_member_match:
  508|  5.03k|    fn cold_member_match(&self, other: &[u8], from: usize, to: usize) -> bool {
  509|  5.03k|        let (first_self, middle_self, last_self) = self.slice_parts(from, to);
  510|  5.03k|        let first_other = &other[..first_self.len()];
  511|  5.03k|        let middle_other = &other[first_self.len()..first_self.len() + middle_self.len()];
  512|  5.03k|        let last_other = &other[first_self.len() + middle_self.len()..];
  513|  5.03k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
  514|  5.03k|
  515|  5.03k|        first_self == first_other
  516|  4.09k|            && middle_self == middle_other
  517|  3.90k|            && last_self == last_other
  518|  1.94k|            && preceding_char.map_or(true, |x| x != b'\\')
  519|  5.03k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  456|  5.41k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  457|  5.41k|        &self.first_block.bytes[start..start + len]
  458|  5.41k|    }
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  387|     15|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|     15|            if self.middle.is_empty() {
  389|      2|                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|     13|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|     15|        })
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  402|      1|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   48|  2.75k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   49|  2.75k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   50|  2.75k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   51|  2.75k|        let block_end = bytes.len();
   52|  2.75k|
   53|  2.75k|        last_block_buf[..block_end].copy_from_slice(bytes);
   54|  2.75k|
   55|  2.75k|        Self {
   56|  2.75k|            bytes: last_block_buf,
   57|  2.75k|            padding_len: MAX_BLOCK_SIZE - block_end,
   58|  2.75k|        }
   59|  2.75k|    }
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_match0Bb_:
  513|  5.03k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput23seek_backward_from_last:
  335|    849|    fn seek_backward_from_last(&self, from: usize, needle: u8) -> Option<usize> {
  336|    849|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  337|    849|        let bytes = &self.last_block.bytes;
  338|    849|
  339|    849|        seek_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needle)
  340|    849|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
  341|    849|            .or_else(|| {
  342|       |                if self.middle.is_empty() {
  343|       |                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|       |                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|    849|            })
  348|    849|    }
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable13seek_backward:
  115|  1.60k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  116|  1.60k|        if from < MAX_BLOCK_SIZE {
  117|    753|            self.seek_backward_from_first(from, needle)
  118|    849|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  119|      0|            self.seek_backward_from_middle(from, needle)
  120|       |        } else {
  121|    849|            self.seek_backward_from_last(from, needle)
  122|       |        }
  123|  1.60k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  429|  1.60k|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  430|  1.60k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  431|  1.60k|        let bytes = &self.last_block.bytes;
  432|  1.60k|
  433|  1.60k|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  434|  1.60k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  435|  1.60k|            .or_else(|| {
  436|       |                if self.middle.is_empty() {
  437|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|  1.60k|            })
  442|  1.60k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_parts:
  473|  5.03k|    fn slice_parts(&self, from: usize, to: usize) -> (&[u8], &[u8], &[u8]) {
  474|  5.03k|        use std::cmp::min;
  475|  5.03k|
  476|  5.03k|        let first_from = min(from, MAX_BLOCK_SIZE);
  477|  5.03k|        let first_to = min(to, MAX_BLOCK_SIZE);
  478|  5.03k|
  479|  5.03k|        let from = from.saturating_sub(MAX_BLOCK_SIZE);
  480|  5.03k|        let to = to.saturating_sub(MAX_BLOCK_SIZE);
  481|  5.03k|        let middle_from = min(from, self.middle.len());
  482|  5.03k|        let middle_to = min(to, self.middle.len());
  483|  5.03k|
  484|  5.03k|        let from = from.saturating_sub(self.middle.len());
  485|  5.03k|        let to = to.saturating_sub(self.middle.len());
  486|  5.03k|        let last_from = min(from, self.last_block.len());
  487|  5.03k|        let last_to = min(to, self.last_block.len());
  488|  5.03k|
  489|  5.03k|        (
  490|  5.03k|            &self.first_block.bytes[first_from..first_to],
  491|  5.03k|            &self.middle[middle_from..middle_to],
  492|  5.03k|            &self.last_block.bytes[last_from..last_to],
  493|  5.03k|        )
  494|  5.03k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  405|  4.29k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  406|  4.29k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  407|  4.29k|        let bytes = &self.last_block.bytes;
  408|  4.29k|
  409|  4.29k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  410|  4.29k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  411|  4.29k|    }
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_matchs_0Bb_:
  518|  1.94k|            && preceding_char.map_or(true, |x| x != b'\\')
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_last0Bb_:
  340|    849|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  401|     12|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6get_at:
  496|  5.03k|    fn get_at(&self, idx: usize) -> Option<u8> {
  497|  5.03k|        if idx < MAX_BLOCK_SIZE {
  498|  1.94k|            Some(self.first_block.bytes[idx])
  499|  3.08k|        } else if idx < self.middle.len() + MAX_BLOCK_SIZE {
  500|    232|            Some(self.middle[idx - MAX_BLOCK_SIZE])
  501|  2.85k|        } else if idx < self.middle.len() + 2 * MAX_BLOCK_SIZE {
  502|  2.77k|            Some(self.last_block.bytes[idx - MAX_BLOCK_SIZE - self.middle.len()])
  503|       |        } else {
  504|     83|            None
  505|       |        }
  506|  5.03k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  383|  3.02k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  384|  3.02k|        debug_assert!(from < MAX_BLOCK_SIZE);
  385|  3.02k|        let bytes = &self.first_block.bytes;
  386|  3.02k|
  387|  3.02k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|       |            if self.middle.is_empty() {
  389|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  3.02k|        })
  394|  3.02k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  396|     13|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  397|     13|        debug_assert!(from >= MAX_BLOCK_SIZE);
  398|     13|        let bytes = self.middle;
  399|     13|
  400|     13|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  401|     13|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  402|     13|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  403|     13|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesB6_:
   31|     34|    pub(super) fn bytes(&self) -> &[u8] {
   32|     34|        &self.bytes
   33|     34|    }
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  467|  4.55k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  139|  7.31k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  140|  7.31k|        if from < MAX_BLOCK_SIZE {
  141|  3.02k|            self.seek_non_whitespace_forward_from_first(from)
  142|  4.29k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  143|      0|            self.seek_non_whitespace_forward_from_middle(from)
  144|       |        } else {
  145|  4.29k|            self.seek_non_whitespace_forward_from_last(from)
  146|       |        }
  147|  7.31k|    }
_RNCNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  434|  1.60k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvNtNtCs1IPNbM7K0I4_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  577|  3.48k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  578|  3.48k|    let mut idx = from;
  579|  3.48k|    if idx >= bytes.len() {
  580|      0|        return None;
  581|  3.48k|    }
  582|       |
  583|       |    loop {
  584|  3.48k|        let b = bytes[idx];
  585|  3.48k|        if !b.is_ascii_whitespace() {
  586|  3.48k|            return Some((idx, b));
  587|      0|        }
  588|      0|        if idx == 0 {
  589|      0|            return None;
  590|      0|        }
  591|      0|        idx -= 1;
  592|       |    }
  593|  3.48k|}
_RNvNtNtCs1IPNbM7K0I4_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  558|  7.33k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  559|  7.33k|    let mut idx = from;
  560|  7.33k|    if idx >= bytes.len() {
  561|      0|        return None;
  562|  7.33k|    }
  563|       |
  564|  8.59k|    loop {
  565|  8.59k|        let b = bytes[idx];
  566|  8.59k|        if !b.is_ascii_whitespace() {
  567|  7.31k|            return Some((idx, b));
  568|  1.28k|        }
  569|  1.28k|        idx += 1;
  570|  1.28k|        if idx == bytes.len() {
  571|     17|            return None;
  572|  1.26k|        }
  573|       |    }
  574|  7.33k|}
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  444|  11.8k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  445|  11.8k|        debug_assert!(len < MAX_BLOCK_SIZE);
  446|       |
  447|  11.8k|        if start < MAX_BLOCK_SIZE {
  448|  5.41k|            Some(self.slice_first(start, len))
  449|  6.38k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  450|      0|            Some(self.slice_middle(start, len))
  451|       |        } else {
  452|  6.38k|            self.slice_last(start, len)
  453|       |        }
  454|  11.8k|    }

_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   15|  10.7k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  10.7k|        let bytes = self.as_ref();
   17|  10.7k|
   18|  10.7k|        let mut idx = from;
   19|  10.7k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|  10.7k|            if bytes[idx] == needle {
   23|  10.7k|                return Some(idx);
   24|      0|            }
   25|      0|            if idx == 0 {
   26|      0|                return None;
   27|      0|            }
   28|      0|            idx -= 1;
   29|       |        }
   30|  10.7k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   56|  60.7k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  60.7k|        let bytes = self.as_ref();
   58|  60.7k|        let mut idx = from;
   59|  60.7k|
   60|  60.7k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  60.7k|        }
   63|       |
   64|  61.7k|        loop {
   65|  61.7k|            let b = bytes[idx];
   66|  61.7k|            if !b.is_ascii_whitespace() {
   67|  60.7k|                return Some((idx, b));
   68|  1.08k|            }
   69|  1.08k|            idx += 1;
   70|  1.08k|            if idx == bytes.len() {
   71|     34|                return None;
   72|  1.04k|            }
   73|       |        }
   74|  60.7k|    }
_RINvXNtNtCs1IPNbM7K0I4_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   33|  17.0k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  17.0k|        let bytes = self.as_ref();
   35|       |
   36|  17.0k|        assert!(N > 0);
   37|  17.0k|        let mut idx = from;
   38|  17.0k|
   39|  17.0k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  17.0k|        }
   42|       |
   43|  17.0k|        loop {
   44|  17.0k|            let b = bytes[idx];
   45|  17.0k|            if needles.contains(&b) {
   46|  17.0k|                return Some((idx, b));
   47|      0|            }
   48|      0|            idx += 1;
   49|      0|            if idx == bytes.len() {
   50|      0|                return None;
   51|      0|            }
   52|       |        }
   53|  17.0k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   77|  47.1k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  47.1k|        let bytes = self.as_ref();
   79|  47.1k|        let mut idx = from;
   80|  47.1k|
   81|  47.1k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  47.1k|        }
   84|       |
   85|       |        loop {
   86|  47.1k|            let b = bytes[idx];
   87|  47.1k|            if !b.is_ascii_whitespace() {
   88|  47.1k|                return Some((idx, b));
   89|      0|            }
   90|      0|            if idx == 0 {
   91|      0|                return None;
   92|      0|            }
   93|      0|            idx -= 1;
   94|       |        }
   95|  47.1k|    }
_RNvXNtNtCs1IPNbM7K0I4_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|     34|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|     34|        let bytes = self.as_ref();
   58|     34|        let mut idx = from;
   59|     34|
   60|     34|        if idx >= bytes.len() {
   61|      0|            return None;
   62|     34|        }
   63|       |
   64|    474|        loop {
   65|    474|            let b = bytes[idx];
   66|    474|            if !b.is_ascii_whitespace() {
   67|     34|                return Some((idx, b));
   68|    440|            }
   69|    440|            idx += 1;
   70|    440|            if idx == bytes.len() {
   71|      0|                return None;
   72|    440|            }
   73|       |        }
   74|     34|    }

_RNvCs1IPNbM7K0I4_8rsonpath18is_json_whitespace:
  351|   165k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  352|   165k|    JSON_WHITESPACE_BYTES.contains(&x)
  353|   165k|}

_RNvXs2_NtCs1IPNbM7K0I4_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  144|  21.1k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  21.1k|        self.push(data);
  146|  21.1k|        Ok(())
  147|  21.1k|    }
_RNvXsa_NtCs1IPNbM7K0I4_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  189|  21.3k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvMs_NtCs1IPNbM7K0I4_8rsonpath6resultNtB4_5Match20from_start_and_bytesCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   81|    720|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   82|    720|        Self { bytes, span_start }
   83|    720|    }

_RNvXNtNtCs1IPNbM7K0I4_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCs6UAlhEvAH5K_19fuzz_arbitrary_json:
    9|  11.7k|    fn record_block_start(&self, _new_block: B) {
   10|  11.7k|        // Intentionally left empty.
   11|  11.7k|    }

_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  224|  21.3k|    fn record_block(&mut self, block: B) {
  225|  21.3k|        if let Some(finished) = self.current_block.as_ref() {
  226|  19.3k|            if let Some(node) = self.node.as_mut() {
  227|      0|                debug!("Continuing node, idx is {}", self.idx);
  228|  1.50k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  17.8k|            }
  230|       |
  231|  19.3k|            self.idx += finished.len();
  232|  1.98k|        }
  233|       |
  234|  21.3k|        self.current_block = Some(block);
  235|      0|        debug!("New block, idx = {}", self.idx);
  236|  21.3k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  268|  4.03k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  4.03k|        if self.node.is_some() {
  270|      0|            debug!("nested match detected, switching to stack");
  271|    570|            return false;
  272|  3.46k|        }
  273|  3.46k|
  274|  3.46k|        let node = SimplePartialNode {
  275|  3.46k|            start_idx: idx,
  276|  3.46k|            start_depth: depth,
  277|  3.46k|            buf: vec![],
  278|  3.46k|            ty,
  279|  3.46k|        };
  280|  3.46k|        self.node = Some(node);
  281|  3.46k|
  282|  3.46k|        true
  283|  4.03k|    }
_RNvXs_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   41|  27.7k|    fn record_block_start(&self, new_block: B) {
   42|  27.7k|        self.internal.borrow_mut().record_block(new_block)
   43|  27.7k|    }
_RNvMs3_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  352|  24.6k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  24.6k|        let node = PartialNode {
  354|  24.6k|            id: self.match_count,
  355|  24.6k|            start_idx: idx,
  356|  24.6k|            start_depth: depth,
  357|  24.6k|            buf: vec![],
  358|  24.6k|            ty,
  359|  24.6k|        };
  360|       |
  361|      0|        debug!("New node {node:?}");
  362|  24.6k|        self.match_count += 1;
  363|  24.6k|        self.stack.push(node);
  364|  24.6k|    }
_RNvNtNtCs1IPNbM7K0I4_8rsonpath6result5nodes13finalize_node:
  439|  21.3k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  440|      0|    debug!("Finalizing node");
  441|       |
  442|  21.3k|    if ty == MatchedNodeType::Atomic {
  443|       |        // Atomic nodes are finished when the next structural character is matched.
  444|       |        // The buffer includes that character and all preceding whitespace.
  445|       |        // We need to remove it before saving the result.
  446|  8.63k|        if buf.len() <= 1 {
  447|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  448|      1|            buf.truncate(0)
  449|       |        } else {
  450|  8.63k|            let mut i = buf.len() - 2;
  451|  8.67k|            while is_json_whitespace(buf[i]) {
  452|     39|                i -= 1;
  453|     39|            }
  454|       |
  455|  8.63k|            buf.truncate(i + 1);
  456|       |        }
  457|  12.7k|    }
  458|  21.3k|}
_RNvNtNtCs1IPNbM7K0I4_8rsonpath6result5nodes18append_final_block:
  425|  21.3k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|      0|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  21.3k|    debug_assert!(read_end >= src_start);
  428|  21.3k|    let in_block_start = if read_start > src_start {
  429|  10.2k|        read_start - src_start
  430|       |    } else {
  431|  11.1k|        0
  432|       |    };
  433|  21.3k|    let in_block_end = read_end - src_start;
  434|  21.3k|
  435|  21.3k|    dest.extend(&src[in_block_start..in_block_end]);
  436|  21.3k|}
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   28|  1.98k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  1.98k|        Self {
   30|  1.98k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  1.98k|        }
   32|  1.98k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  214|  1.98k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  1.98k|        Self {
  216|  1.98k|            idx: 0,
  217|  1.98k|            current_block: None,
  218|  1.98k|            node: None,
  219|  1.98k|            sink,
  220|  1.98k|            leading_padding_len,
  221|  1.98k|        }
  222|  1.98k|    }
_RNvMs3_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  338|  6.38k|    fn record_block(&mut self, block: B) {
  339|  6.38k|        if let Some(finished) = self.current_block.as_ref() {
  340|   102k|            for node in &mut self.stack {
  341|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|  95.7k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  6.38k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  6.38k|        self.current_block = Some(block);
  349|      0|        debug!("New block, idx = {}", self.idx);
  350|  6.38k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  151|  1.98k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  1.98k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  1.98k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  185|  57.7k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  57.7k|        match self {
  187|  28.2k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  29.4k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  57.7k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  285|    570|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    570|        match self.node {
  287|    570|            Some(node) => StackRecorder {
  288|    570|                idx: self.idx,
  289|    570|                match_count: 1,
  290|    570|                current_block: self.current_block,
  291|    570|                stack: vec![PartialNode {
  292|    570|                    id: 0,
  293|    570|                    start_idx: node.start_idx,
  294|    570|                    start_depth: node.start_depth,
  295|    570|                    buf: node.buf,
  296|    570|                    ty: node.ty,
  297|    570|                }],
  298|    570|                output_queue: OutputQueue::new(),
  299|    570|                sink: self.sink,
  300|    570|                leading_padding_len: self.leading_padding_len,
  301|    570|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    570|    }
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   52|  28.1k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  28.1k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  28.1k|        Ok(())
   56|  28.1k|    }
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  165|  28.1k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  28.1k|        match self {
  167|  4.03k|            Self::Simple(simple) => {
  168|  4.03k|                if !simple.try_record_match(idx, depth, ty) {
  169|    570|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    570|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    570|                    let mut stack = simple.transform_to_stack();
  174|    570|                    stack.record_match(idx, depth, ty);
  175|    570|                    *self = Self::Stack(stack);
  176|  3.46k|                }
  177|       |            }
  178|  24.0k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  28.1k|    }
_RNvNtNtCs1IPNbM7K0I4_8rsonpath6result5nodes12append_block:
  409|  97.2k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|  97.2k|    if read_start >= src_start + src.len() {
  411|    131|        return;
  412|  97.1k|    }
  413|       |
  414|  97.1k|    let to_extend = if read_start > src_start {
  415|  16.8k|        let in_block_start = read_start - src_start;
  416|  16.8k|        &src[in_block_start..]
  417|       |    } else {
  418|  80.2k|        src
  419|       |    };
  420|       |
  421|  97.1k|    dest.extend(to_extend);
  422|  97.2k|}
_RNvMs1_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  156|  27.7k|    fn record_block(&mut self, block: B) {
  157|  27.7k|        match self {
  158|  21.3k|            Self::Simple(r) => r.record_block(block),
  159|  6.38k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  27.7k|    }
_RNvMs2_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  238|  28.2k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|      0|        debug!("Value terminator at {idx}, depth {depth}");
  240|  28.2k|        if let Some(node) = self.node.as_ref() {
  241|  3.62k|            if node.start_depth >= depth {
  242|  2.88k|                let mut node = self.node.take().expect("node is Some");
  243|      0|                debug!("Mark node as ended at {}", idx + 1);
  244|       |                append_final_block(
  245|  2.88k|                    &mut node.buf,
  246|  2.88k|                    self.current_block
  247|  2.88k|                        .as_ref()
  248|  2.88k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  2.88k|                    self.idx,
  250|  2.88k|                    node.start_idx,
  251|  2.88k|                    idx + 1,
  252|  2.88k|                );
  253|  2.88k|                finalize_node(&mut node.buf, node.ty);
  254|       |
  255|      0|                debug!("Committing and outputting node");
  256|  2.88k|                self.sink
  257|  2.88k|                    .add_match(Match {
  258|  2.88k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  2.88k|                        bytes: node.buf,
  260|  2.88k|                    })
  261|  2.88k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    739|            }
  263|  24.6k|        }
  264|       |
  265|  28.2k|        Ok(())
  266|  28.2k|    }
_RNvXs0_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   59|  57.7k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  57.7k|        self.internal
   61|  57.7k|            .borrow_mut()
   62|  57.7k|            .record_value_terminator(idx, depth)
   63|  57.7k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  57.7k|    }
_RNvMs3_NtNtCs1IPNbM7K0I4_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  367|  29.4k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|      0|        debug!("Value terminator at {idx}, depth {depth}");
  369|  47.9k|        while let Some(node) = self.stack.last() {
  370|  45.7k|            if node.start_depth >= depth {
  371|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  18.5k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  18.5k|                append_final_block(
  374|  18.5k|                    &mut node.buf,
  375|  18.5k|                    self.current_block
  376|  18.5k|                        .as_ref()
  377|  18.5k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  18.5k|                    self.idx,
  379|  18.5k|                    node.start_idx,
  380|  18.5k|                    idx + 1,
  381|  18.5k|                );
  382|  18.5k|                finalize_node(&mut node.buf, node.ty);
  383|       |
  384|      0|                debug!("Committing node: {node:?}");
  385|  18.5k|                self.output_queue.insert(
  386|  18.5k|                    node.id,
  387|  18.5k|                    Match {
  388|  18.5k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  18.5k|                        bytes: node.buf,
  390|  18.5k|                    },
  391|  18.5k|                );
  392|       |            } else {
  393|  27.1k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  29.4k|        if self.stack.is_empty() {
  398|      0|            debug!("Outputting batch of nodes.");
  399|  2.28k|            self.output_queue
  400|  2.28k|                .output_to(self.sink)
  401|  2.28k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  27.1k|        }
  403|       |
  404|  29.4k|        Ok(())
  405|  29.4k|    }

_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   18|    570|    pub(super) fn new() -> Self {
   19|    570|        Self {
   20|    570|            offset: 0,
   21|    570|            nodes: vec![],
   22|    570|        }
   23|    570|    }
_RNvMNtNtCs1IPNbM7K0I4_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   29|  18.5k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  18.5k|        let actual_idx = id - self.offset;
   31|       |
   32|  42.0k|        while self.nodes.len() <= actual_idx {
   33|  23.5k|            self.nodes.push(None);
   34|  23.5k|        }
   35|       |
   36|  18.5k|        self.nodes[actual_idx] = Some(node);
   37|  18.5k|    }
_RINvMNtNtCs1IPNbM7K0I4_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   52|  2.28k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  2.28k|    where
   54|  2.28k|        S: Sink<D>,
   55|  2.28k|    {
   56|  2.28k|        self.offset += self.nodes.len();
   57|       |
   58|  17.5k|        for node in self.nodes.drain(..) {
   59|  17.5k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  2.28k|        Ok(())
   63|  2.28k|    }

_RNCINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder10child_nameNtNtB7_3str10JsonStringE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  118|  4.19k|        self.child(|x| x.name(name))
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder16descendant_indexNtNtB5_3num8JsonUIntECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  168|  4.19k|    pub fn descendant_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  169|  4.19k|        self.descendant(|x| x.index(idx))
  170|  4.19k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder14child_wildcard:
  125|  2.14k|    pub fn child_wildcard(&mut self) -> &mut Self {
  126|  2.14k|        self.child(|x| x.wildcard())
  127|  2.14k|    }
_RINvMs_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder4nameNtNtB7_3str10JsonStringECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  219|  6.36k|    pub fn name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  220|  6.36k|        self.selectors.push(Selector::Name(name.into()));
  221|  6.36k|        self
  222|  6.36k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_15descendant_nameNtNtB5_3str10JsonStringE0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  103|  2.17k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  104|  2.17k|    where
  105|  2.17k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  106|  2.17k|    {
  107|  2.17k|        let mut builder = JsonPathSelectorsBuilder::new();
  108|  2.17k|        selectors_builder(&mut builder);
  109|  2.17k|        self.segments.push(Segment::Descendant(builder.build()));
  110|  2.17k|        self
  111|  2.17k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_10child_nameNtNtB5_3str10JsonStringE0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   72|  4.19k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   73|  4.19k|    where
   74|  4.19k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   75|  4.19k|    {
   76|  4.19k|        let mut builder = JsonPathSelectorsBuilder::new();
   77|  4.19k|        selectors_builder(&mut builder);
   78|  4.19k|        self.segments.push(Segment::Child(builder.build()));
   79|  4.19k|        self
   80|  4.19k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder19descendant_wildcard:
  160|  1.38k|    pub fn descendant_wildcard(&mut self) -> &mut Self {
  161|  1.38k|        self.descendant(|x| x.wildcard())
  162|  1.38k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_16descendant_indexNtNtB5_3num8JsonUIntE0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  103|  4.19k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  104|  4.19k|    where
  105|  4.19k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  106|  4.19k|    {
  107|  4.19k|        let mut builder = JsonPathSelectorsBuilder::new();
  108|  4.19k|        selectors_builder(&mut builder);
  109|  4.19k|        self.segments.push(Segment::Descendant(builder.build()));
  110|  4.19k|        self
  111|  4.19k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCNvB2_19descendant_wildcard0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  103|  1.38k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  104|  1.38k|    where
  105|  1.38k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  106|  1.38k|    {
  107|  1.38k|        let mut builder = JsonPathSelectorsBuilder::new();
  108|  1.38k|        selectors_builder(&mut builder);
  109|  1.38k|        self.segments.push(Segment::Descendant(builder.build()));
  110|  1.38k|        self
  111|  1.38k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder8wildcard:
  294|  3.52k|    pub fn wildcard(&mut self) -> &mut Self {
  295|  3.52k|        self.selectors.push(Selector::Wildcard);
  296|  3.52k|        self
  297|  3.52k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_11child_indexNtNtB5_3num8JsonUIntE0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   72|  1.16k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   73|  1.16k|    where
   74|  1.16k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   75|  1.16k|    {
   76|  1.16k|        let mut builder = JsonPathSelectorsBuilder::new();
   77|  1.16k|        selectors_builder(&mut builder);
   78|  1.16k|        self.segments.push(Segment::Child(builder.build()));
   79|  1.16k|        self
   80|  1.16k|    }
_RNvXs1_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB7_13JsonPathQueryINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_20JsonPathQueryBuilderE4from:
  309|  2.75k|    fn from(value: JsonPathQueryBuilder) -> Self {
  310|  2.75k|        Self {
  311|  2.75k|            segments: value.segments,
  312|  2.75k|        }
  313|  2.75k|    }
_RINvMs_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder5indexNtNtB7_3num8JsonUIntECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  245|  5.35k|    pub fn index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  246|  5.35k|        let json_int: JsonInt = idx.into();
  247|  5.35k|        self.selectors.push(Selector::Index(Index::from(json_int)));
  248|  5.35k|        self
  249|  5.35k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  209|  15.2k|    fn new() -> Self {
  210|  15.2k|        Self { selectors: vec![] }
  211|  15.2k|    }
_RNCINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder15descendant_nameNtNtB7_3str10JsonStringE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  153|  2.17k|        self.descendant(|x| x.name(name))
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder11child_indexNtNtB5_3num8JsonUIntECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  133|  1.16k|    pub fn child_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  134|  1.16k|        self.child(|x| x.index(idx))
  135|  1.16k|    }
_RNCINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder16descendant_indexNtNtB7_3num8JsonUIntE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  169|  4.19k|        self.descendant(|x| x.index(idx))
_RNCINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder11child_indexNtNtB7_3num8JsonUIntE0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  134|  1.16k|        self.child(|x| x.index(idx))
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10child_nameNtNtB5_3str10JsonStringECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  117|  4.19k|    pub fn child_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  118|  4.19k|        self.child(|x| x.name(name))
  119|  4.19k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder15descendant_nameNtNtB5_3str10JsonStringECs6UAlhEvAH5K_19fuzz_arbitrary_json:
  152|  2.17k|    pub fn descendant_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  153|  2.17k|        self.descendant(|x| x.name(name))
  154|  2.17k|    }
_RINvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCNvB2_14child_wildcard0ECs6UAlhEvAH5K_19fuzz_arbitrary_json:
   72|  2.14k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   73|  2.14k|    where
   74|  2.14k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   75|  2.14k|    {
   76|  2.14k|        let mut builder = JsonPathSelectorsBuilder::new();
   77|  2.14k|        selectors_builder(&mut builder);
   78|  2.14k|        self.segments.push(Segment::Child(builder.build()));
   79|  2.14k|        self
   80|  2.14k|    }
_RNCNvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder19descendant_wildcard0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  161|  1.38k|        self.descendant(|x| x.wildcard())
_RNvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder3new:
   47|  2.75k|    pub fn new() -> Self {
   48|  2.75k|        Self { segments: vec![] }
   49|  2.75k|    }
_RNCNvMNtCsiia64awkvAv_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder14child_wildcard0Cs6UAlhEvAH5K_19fuzz_arbitrary_json:
  126|  2.14k|        self.child(|x| x.wildcard())
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder5build:
  213|  15.2k|    fn build(self) -> Selectors {
  214|  15.2k|        Selectors::many(self.selectors)
  215|  15.2k|    }

_RNvXs5_Csiia64awkvAv_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  383|  5.35k|    fn from(value: num::JsonInt) -> Self {
  384|  5.35k|        if value.as_i64() >= 0 {
  385|  5.35k|            Self::FromStart(value.abs())
  386|       |        } else {
  387|      0|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  388|       |        }
  389|  5.35k|    }
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors5firstCs1IPNbM7K0I4_8rsonpath:
  650|  15.2k|    pub fn first(&self) -> &Selector {
  651|  15.2k|        &self.inner[0]
  652|  15.2k|    }
_RNvXsi_Csiia64awkvAv_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
  741|  15.2k|    fn deref(&self) -> &Self::Target {
  742|  15.2k|        &self.inner
  743|  15.2k|    }
_RNvMsd_Csiia64awkvAv_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  579|  2.75k|    pub fn segments(&self) -> &[Segment] {
  580|  2.75k|        &self.segments
  581|  2.75k|    }
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  642|  15.2k|    pub fn many(vec: Vec<Selector>) -> Self {
  643|  15.2k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  644|  15.2k|        Self { inner: vec }
  645|  15.2k|    }

_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  167|  5.35k|    const fn new(index: i64) -> Self {
  168|  5.35k|        Self(index)
  169|  5.35k|    }
_RNvXs6_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  430|  5.35k|    fn from(value: JsonUInt) -> Self {
  431|  5.35k|        // This is always safe due to the type invariant bounds.
  432|  5.35k|        Self::new(value.0 as i64)
  433|  5.35k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3abs:
  243|  5.35k|    pub const fn abs(&self) -> JsonUInt {
  244|  5.35k|        JsonUInt(self.0.unsigned_abs())
  245|  5.35k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3numNtB4_8JsonUInt13try_incrementCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  301|  11.5k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  302|  11.5k|        let new_index = self.0 + 1;
  303|  11.5k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  304|  11.5k|            self.0 = new_index;
  305|  11.5k|            Ok(())
  306|       |        } else {
  307|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  308|       |        }
  309|  11.5k|    }
_RNvXss_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  655|  5.35k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  656|  5.35k|        let val = u.int_in_range(0..=JSON_UINT_UPPER_LIMIT)?;
  657|       |
  658|  5.35k|        Ok(Self::new(val))
  659|  5.35k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3numNtB4_8JsonUInt3newCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  281|  5.35k|    const fn new(index: u64) -> Self {
  282|  5.35k|        Self(index)
  283|  5.35k|    }
_RNvXsK_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs6UAlhEvAH5K_19fuzz_arbitrary_json:
   87|  32.5k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt6as_i64:
  211|  5.35k|    pub const fn as_i64(&self) -> i64 {
  212|  5.35k|        self.0
  213|  5.35k|    }
_RNvXsK_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs1IPNbM7K0I4_8rsonpath:
   87|  2.01k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]

_RNvMs2_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  60.3k|    pub fn unquoted(&self) -> &str {
  188|  60.3k|        let len = self.quoted.len();
  189|  60.3k|        debug_assert!(len >= 2);
  190|  60.3k|        &self.quoted[1..len - 1]
  191|  60.3k|    }
_RNvXs0_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  6.36k|    fn from(value: JsonStringBuilder) -> Self {
   59|  6.36k|        value.finish()
   60|  6.36k|    }
_RNvXs6_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryCs6UAlhEvAH5K_19fuzz_arbitrary_json:
  228|  6.36k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  6.36k|        let chars = u.arbitrary_iter()?;
  230|  6.36k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  23.0k|        for c in chars {
  236|  16.6k|            let c = c?;
  237|  16.6k|            match c {
  238|  16.6k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|  1.40k|                    builder.push('\\');
  240|  1.40k|                    builder.push(c);
  241|  1.40k|                }
  242|  15.2k|                _ => {
  243|  15.2k|                    builder.push(c);
  244|  15.2k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  6.36k|        Ok(builder.into())
  249|  6.36k|    }
_RNvMs2_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonString6quoted:
  203|  59.3k|    pub fn quoted(&self) -> &str {
  204|  59.3k|        &self.quoted
  205|  59.3k|    }
_RNvXs3_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  27.8k|    fn eq(&self, other: &Self) -> bool {
  211|  27.8k|        self.unquoted() == other.unquoted()
  212|  27.8k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  6.36k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  6.36k|        self.quoted.push('"');
   52|  6.36k|        JsonString { quoted: self.quoted }
   53|  6.36k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  18.0k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  18.0k|        self.quoted.push(char);
   47|  18.0k|        self
   48|  18.0k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  6.36k|    pub(crate) fn new() -> Self {
   40|  6.36k|        Self {
   41|  6.36k|            quoted: String::from('"'),
   42|  6.36k|        }
   43|  6.36k|    }

_RNCNvNvNvNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBd_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue7___getit0Bd_:
   84|      1|        #[derive(Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary0B6_:
   42|  1.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBc_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys_0Bc_:
   84|   168k|        #[derive(Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hint0B6_:
   15|  2.75k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   42|  1.65k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBc_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys0_0Bc_:
   84|  1.05k|        #[derive(Arbitrary)]
_RNvXs_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB4_14SupportedQueryNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
   62|  2.75k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   63|  2.75k|        let segment_count = u.arbitrary_len::<SupportedSegment>()?;
   64|  2.75k|        let mut query = JsonPathQueryBuilder::new();
   65|  2.75k|
   66|  2.75k|        for _ in 0..segment_count {
   67|  15.2k|            let segment = u.arbitrary::<SupportedSegment>()?;
   68|  15.2k|            match segment {
   69|  4.19k|                SupportedSegment::Child(SupportedSelector::Name(name)) => query.child_name(name),
   70|  2.14k|                SupportedSegment::Child(SupportedSelector::Wildcard) => query.child_wildcard(),
   71|  1.16k|                SupportedSegment::Child(SupportedSelector::Index(idx)) => query.child_index(idx),
   72|  2.17k|                SupportedSegment::Descendant(SupportedSelector::Name(name)) => query.descendant_name(name),
   73|  1.38k|                SupportedSegment::Descendant(SupportedSelector::Wildcard) => query.descendant_wildcard(),
   74|  4.19k|                SupportedSegment::Descendant(SupportedSelector::Index(idx)) => query.descendant_index(idx),
   75|       |            };
   76|       |        }
   77|       |
   78|  2.75k|        Ok(SupportedQuery(query.into()))
   79|  2.75k|    }
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   48|  1.66k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBc_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrary0Bc_:
   84|  1.05k|        #[derive(Arbitrary)]
_RNCNvNvNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector7___getit0B7_:
   48|      1|#[derive(Debug, Arbitrary)]
_RNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCs6flZAYNibw_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  8.26k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs6flZAYNibw_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.75k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary0B6_:
   48|  1.66k|#[derive(Debug, Arbitrary)]
_RNvXCs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
   56|  2.75k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   57|  2.75k|        write!(f, "{}", self.0)
   58|  2.75k|    }
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys_0B6_:
   48|  15.2k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBa_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryNtNtCscNYaBR6dW1h_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4from0Ba_:
  103|  62.3k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB5_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
   83|  2.75k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   84|  2.75k|        #[derive(Arbitrary)]
   85|  2.75k|        enum RawValue {
   86|  2.75k|            Null,
   87|  2.75k|            Bool(bool),
   88|  2.75k|            Integer(i64),
   89|  2.75k|            Float(f64),
   90|  2.75k|            String(String),
   91|  2.75k|            Array(Vec<RawValue>),
   92|  2.75k|            Object(HashMap<String, RawValue>),
   93|  2.75k|        }
   94|  2.75k|
   95|  2.75k|        impl From<RawValue> for serde_json::Value {
   96|  2.75k|            fn from(value: RawValue) -> Self {
   97|  2.75k|                match value {
   98|  2.75k|                    RawValue::Null => serde_json::Value::Null,
   99|  2.75k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  2.75k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  2.75k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  2.75k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  2.75k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  2.75k|                    RawValue::Object(obj) => {
  105|  2.75k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|  2.75k|                    }
  107|  2.75k|                }
  108|  2.75k|            }
  109|  2.75k|        }
  110|  2.75k|
  111|  2.75k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
  112|  2.75k|    }
_RNvXNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtB8_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryNtNtCscNYaBR6dW1h_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB2_8RawValueE4from:
   96|   143k|            fn from(value: RawValue) -> Self {
   97|   143k|                match value {
   98|  21.4k|                    RawValue::Null => serde_json::Value::Null,
   99|  12.8k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  5.40k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  9.05k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  6.63k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  42.2k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  46.0k|                    RawValue::Object(obj) => {
  105|  46.0k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|   143k|            }
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys_0B6_:
   42|  15.2k|#[derive(Debug, Arbitrary)]
_RNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtB4_16SupportedSegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
   42|  42.4k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBa_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryNtNtCscNYaBR6dW1h_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4froms_0Ba_:
  105|  78.6k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtB4_17SupportedSelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
   48|  42.4k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment7___getit0B7_:
   42|      1|#[derive(Debug, Arbitrary)]
_RNvXNvNvXs0_Cs6UAlhEvAH5K_19fuzz_arbitrary_jsonNtBa_4JsonNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary1__NtB4_8RawValueBT_9arbitrary:
   84|   504k|        #[derive(Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hint0B6_:
   48|  5.51k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs6UAlhEvAH5K_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hint0B6_:
   42|  2.75k|#[derive(Debug, Arbitrary)]

