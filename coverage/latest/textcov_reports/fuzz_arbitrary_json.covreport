_RNvYNtCs8ZpES7bF61F_19fuzz_arbitrary_json14SupportedQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.86k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.86k|        let _ = depth;
  279|  2.86k|        (0, None)
  280|  2.86k|    }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintCs8ZpES7bF61F_19fuzz_arbitrary_json:
  277|  5.72k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.72k|        let _ = depth;
  279|  5.72k|        (0, None)
  280|  5.72k|    }
_RNvXsf_Cs98o54wqeRSK_9arbitraryINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map7HashMapNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB28_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB2S_9arbitraryB28_:
  760|  44.5k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  761|  44.5k|        u.arbitrary_iter()?.collect()
  762|  44.5k|    }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax3num8JsonUIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintCs8ZpES7bF61F_19fuzz_arbitrary_json:
  277|  5.72k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  5.72k|        let _ = depth;
  279|  5.72k|        (0, None)
  280|  5.72k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB18_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1S_9arbitraryB18_:
  679|  40.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  40.0k|        u.arbitrary_iter()?.collect()
  681|  40.0k|    }
_RNvYNtCs8ZpES7bF61F_19fuzz_arbitrary_json4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hintB4_:
  277|  2.86k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|  2.86k|        let _ = depth;
  279|  2.86k|        (0, None)
  280|  2.86k|    }
_RNvXs1p_Cs98o54wqeRSK_9arbitraryTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB1f_4JsonNtB6_9Arbitrary9arbitrary8RawValueEB1Z_9arbitraryB1f_:
  575|  83.0k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  83.0k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  83.0k|            }
_RNvYNtCs8ZpES7bF61F_19fuzz_arbitrary_json4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_restB4_:
  189|  2.86k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|  2.86k|        Self::arbitrary(&mut u)
  191|  2.86k|    }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9size_hintCs8ZpES7bF61F_19fuzz_arbitrary_json:
  320|  8.58k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  8.58k|                    let n = mem::size_of::<$ty>();
  322|  8.58k|                    (n, Some(n))
  323|  8.58k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9size_hintB5_:
  320|  94.0k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  94.0k|                    let n = mem::size_of::<$ty>();
  322|  94.0k|                    (n, Some(n))
  323|  94.0k|                }
_RNvXs_Cs98o54wqeRSK_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   264k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   264k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   264k|    }
_RNvXsl_Cs98o54wqeRSK_9arbitraryNtNtCshJIxznpEM8j_5alloc6string6StringNtB5_9Arbitrary9arbitrary:
  874|  94.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  875|  94.0k|        <&str as Arbitrary>::arbitrary(u).map(Into::into)
  876|  94.0k|    }
_RNvXsL_Cs98o54wqeRSK_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  8.16k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  8.16k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  8.16k|                    u.fill_buffer(&mut buf)?;
  312|  8.16k|                    let mut x: $unsigned = 0;
  313|  65.3k|                    for i in 0..mem::size_of::<$ty>() {
  314|  65.3k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  65.3k|                    }
  316|  8.16k|                    Ok(x as $ty)
  317|  8.16k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   264k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   264k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   264k|                    u.fill_buffer(&mut buf)?;
  312|   264k|                    let mut x: $unsigned = 0;
  313|   264k|                    for i in 0..mem::size_of::<$ty>() {
  314|   264k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   264k|                    }
  316|   264k|                    Ok(x as $ty)
  317|   264k|                }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   194k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   194k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   194k|                    u.fill_buffer(&mut buf)?;
  312|   194k|                    let mut x: $unsigned = 0;
  313|   779k|                    for i in 0..mem::size_of::<$ty>() {
  314|   779k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   779k|                    }
  316|   194k|                    Ok(x as $ty)
  317|   194k|                }
_RNvXsV_Cs98o54wqeRSK_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  8.16k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  8.16k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  8.16k|                }
_RNvXs0_Cs98o54wqeRSK_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  14.8k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  14.8k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  14.8k|        if let Some(c) = char::from_u32(c) {
  376|  14.5k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    221|            c -= SURROGATES_START;
  380|    221|            Ok(char::from_u32(c)
  381|    221|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  14.8k|    }
_RNvXsR_Cs98o54wqeRSK_9arbitraryxNtB5_9Arbitrary9arbitrary:
  309|  6.00k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  6.00k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  6.00k|                    u.fill_buffer(&mut buf)?;
  312|  6.00k|                    let mut x: $unsigned = 0;
  313|  48.0k|                    for i in 0..mem::size_of::<$ty>() {
  314|  48.0k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  48.0k|                    }
  316|  6.00k|                    Ok(x as $ty)
  317|  6.00k|                }
_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary9arbitrary:
  857|  94.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  858|  94.0k|        let size = u.arbitrary_len::<u8>()?;
  859|  94.0k|        arbitrary_str(u, size)
  860|  94.0k|    }

_RNvNtCs98o54wqeRSK_9arbitrary9size_hint6or_allCs8ZpES7bF61F_19fuzz_arbitrary_json:
   57|  8.58k|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|  8.58k|    if let Some(head) = hints.first().copied() {
   59|  8.58k|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|  8.58k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_json1__NtB10_8FuzzDataNtB4_9Arbitrary9size_hint0EB10_:
   12|  2.86k|pub fn recursion_guard(
   13|  2.86k|    depth: usize,
   14|  2.86k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.86k|) -> (usize, Option<usize>) {
   16|  2.86k|    const MAX_DEPTH: usize = 20;
   17|  2.86k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.86k|        f(depth + 1)
   21|       |    }
   22|  2.86k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCs8ZpES7bF61F_19fuzz_arbitrary_json:
   26|  31.4k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  31.4k|    let lower = lhs.0 + rhs.0;
   28|  31.4k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  31.4k|    (lower, upper)
   30|  31.4k|}
_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   28|  28.6k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB10_17SupportedSelectorNtB4_9Arbitrary9size_hint0EB10_:
   12|  5.72k|pub fn recursion_guard(
   13|  5.72k|    depth: usize,
   14|  5.72k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  5.72k|) -> (usize, Option<usize>) {
   16|  5.72k|    const MAX_DEPTH: usize = 20;
   17|  5.72k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  5.72k|        f(depth + 1)
   21|       |    }
   22|  5.72k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCs8ZpES7bF61F_19fuzz_arbitrary_json:
   37|  25.7k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  25.7k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  25.7k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint2orCs8ZpES7bF61F_19fuzz_arbitrary_json:
   44|  14.3k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  14.3k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  14.3k|    let upper = lhs
   47|  14.3k|        .1
   48|  14.3k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  14.3k|    (lower, upper)
   50|  14.3k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB10_16SupportedSegmentNtB4_9Arbitrary9size_hint0EB10_:
   12|  2.86k|pub fn recursion_guard(
   13|  2.86k|    depth: usize,
   14|  2.86k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  2.86k|) -> (usize, Option<usize>) {
   16|  2.86k|    const MAX_DEPTH: usize = 20;
   17|  2.86k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  2.86k|        f(depth + 1)
   21|       |    }
   22|  2.86k|}

_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int7from_u8Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  821|  43.1k|                fn from_u8(b: u8) -> Self {
  822|  43.1k|                    b as Self
  823|  43.1k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCs8ZpES7bF61F_19fuzz_arbitrary_json:
  837|  6.16k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  6.16k|                    <$ty>::wrapping_sub(self, rhs)
  839|  6.16k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   85|  2.86k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.86k|        Unstructured { data }
   87|  2.86k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs8ZpES7bF61F_19fuzz_arbitrary_json16SupportedSegmentEB1c_:
  167|  16.6k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  16.6k|    where
  169|  16.6k|        A: Arbitrary<'a>,
  170|  16.6k|    {
  171|  16.6k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  16.6k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int10from_usizeCs8ZpES7bF61F_19fuzz_arbitrary_json:
  825|  49.2k|                fn from_usize(u: usize) -> Self {
  826|  49.2k|                    u as Self
  827|  49.2k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB1b_4JsonNtB6_9Arbitrary9arbitrary8RawValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1b_:
  720|   100k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   100k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   100k|        if keep_going {
  723|  60.9k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  40.0k|            None
  726|       |        }
  727|   100k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenNtCs8ZpES7bF61F_19fuzz_arbitrary_json16SupportedSegmentEB1h_:
  213|  2.86k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  2.86k|    where
  215|  2.86k|        ElementType: Arbitrary<'a>,
  216|  2.86k|    {
  217|  2.86k|        let byte_size = self.arbitrary_byte_size()?;
  218|  2.86k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  2.86k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  2.86k|        let elem_size = std::cmp::max(1, elem_size);
  221|  2.86k|        Ok(byte_size / elem_size)
  222|  2.86k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB1i_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1i_:
  167|  2.86k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  2.86k|    where
  169|  2.86k|        A: Arbitrary<'a>,
  170|  2.86k|    {
  171|  2.86k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  2.86k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangeyECs8ZpES7bF61F_19fuzz_arbitrary_json:
  293|  6.16k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  6.16k|    where
  295|  6.16k|        T: Int,
  296|  6.16k|    {
  297|  6.16k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  6.16k|        self.data = &self.data[bytes_consumed..];
  299|  6.16k|        Ok(result)
  300|  6.16k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
  108|   182k|    pub fn len(&self) -> usize {
  109|   182k|        self.data.len()
  110|   182k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCs8ZpES7bF61F_19fuzz_arbitrary_json:
  833|  6.16k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  6.16k|                    <$ty>::wrapping_add(self, rhs)
  835|  6.16k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implyINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs8ZpES7bF61F_19fuzz_arbitrary_json:
  302|  6.16k|    fn int_in_range_impl<T>(
  303|  6.16k|        range: ops::RangeInclusive<T>,
  304|  6.16k|        mut bytes: impl Iterator<Item = u8>,
  305|  6.16k|    ) -> Result<(T, usize)>
  306|  6.16k|    where
  307|  6.16k|        T: Int,
  308|  6.16k|    {
  309|  6.16k|        let start = *range.start();
  310|  6.16k|        let end = *range.end();
  311|  6.16k|        assert!(
  312|  6.16k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  6.16k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  6.16k|        }
  321|  6.16k|
  322|  6.16k|        // From here on out we work with the unsigned representation. All of the
  323|  6.16k|        // operations performed below work out just as well whether or not `T`
  324|  6.16k|        // is a signed or unsigned integer.
  325|  6.16k|        let start = start.to_unsigned();
  326|  6.16k|        let end = end.to_unsigned();
  327|  6.16k|
  328|  6.16k|        let delta = end.wrapping_sub(start);
  329|  6.16k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  6.16k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  6.16k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  49.2k|        while (bytes_consumed < mem::size_of::<T>())
  339|  49.2k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  43.1k|            let byte = match bytes.next() {
  342|     12|                None => break,
  343|  43.1k|                Some(b) => b,
  344|  43.1k|            };
  345|  43.1k|            bytes_consumed += 1;
  346|  43.1k|
  347|  43.1k|            // Combine this byte into our arbitrary integer, but avoid
  348|  43.1k|            // overflowing the shift for `u8` and `i8`.
  349|  43.1k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  43.1k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  6.16k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  6.16k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  6.16k|        let result = start.wrapping_add(offset);
  365|  6.16k|
  366|  6.16k|        // And convert back to our maybe-signed representation.
  367|  6.16k|        let result = T::from_unsigned(result);
  368|  6.16k|        debug_assert!(*range.start() <= result);
  369|  6.16k|        debug_assert!(result <= *range.end());
  370|       |
  371|  6.16k|        Ok((result, bytes_consumed))
  372|  6.16k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11to_unsignedCs8ZpES7bF61F_19fuzz_arbitrary_json:
  841|  12.3k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  12.3k|                    self as $unsigned_ty
  843|  12.3k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB1O_4JsonNtB6_9Arbitrary9arbitrary8RawValueEENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1O_:
  720|   127k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   127k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   127k|        if keep_going {
  723|  83.0k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  44.5k|            None
  726|       |        }
  727|   127k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtNtCshJIxznpEM8j_5alloc6string6StringNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB21_4JsonNtB5_9Arbitrary9arbitrary8RawValueEEB21_:
  606|  44.5k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  44.5k|        &'b mut self,
  608|  44.5k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  44.5k|        Ok(ArbitraryIter {
  610|  44.5k|            u: &mut *self,
  611|  44.5k|            _marker: PhantomData,
  612|  44.5k|        })
  613|  44.5k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs8ZpES7bF61F_19fuzz_arbitrary_json:
  167|   249k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   249k|    where
  169|   249k|        A: Arbitrary<'a>,
  170|   249k|    {
  171|   249k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   249k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int13from_unsignedCs8ZpES7bF61F_19fuzz_arbitrary_json:
  845|  6.16k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  6.16k|                    unsigned as Self
  847|  6.16k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs8ZpES7bF61F_19fuzz_arbitrary_json:
  132|   182k|    pub fn is_empty(&self) -> bool {
  133|   182k|        self.len() == 0
  134|   182k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
  720|  20.7k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  20.7k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  20.7k|        if keep_going {
  723|  14.8k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  5.97k|            None
  726|       |        }
  727|  20.7k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB1o_4JsonNtB5_9Arbitrary9arbitrary8RawValueEB1o_:
  606|  40.0k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  40.0k|        &'b mut self,
  608|  40.0k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  40.0k|        Ok(ArbitraryIter {
  610|  40.0k|            u: &mut *self,
  611|  40.0k|            _marker: PhantomData,
  612|  40.0k|        })
  613|  40.0k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECs8ZpES7bF61F_19fuzz_arbitrary_json:
  606|  5.97k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  5.97k|        &'b mut self,
  608|  5.97k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  5.97k|        Ok(ArbitraryIter {
  610|  5.97k|            u: &mut *self,
  611|  5.97k|            _marker: PhantomData,
  612|  5.97k|        })
  613|  5.97k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|   139k|                fn from_u8(b: u8) -> Self {
  822|   139k|                    b as Self
  823|   139k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  94.0k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  94.0k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  94.0k|        }
  552|  94.0k|
  553|  94.0k|        let (for_buf, rest) = self.data.split_at(size);
  554|  94.0k|        self.data = rest;
  555|  94.0k|        Ok(for_buf)
  556|  94.0k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|  69.6k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  69.6k|                    <$ty>::wrapping_sub(self, rhs)
  839|  69.6k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  69.6k|    fn int_in_range_impl<T>(
  303|  69.6k|        range: ops::RangeInclusive<T>,
  304|  69.6k|        mut bytes: impl Iterator<Item = u8>,
  305|  69.6k|    ) -> Result<(T, usize)>
  306|  69.6k|    where
  307|  69.6k|        T: Int,
  308|  69.6k|    {
  309|  69.6k|        let start = *range.start();
  310|  69.6k|        let end = *range.end();
  311|  69.6k|        assert!(
  312|  69.6k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  69.6k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  69.6k|        }
  321|  69.6k|
  322|  69.6k|        // From here on out we work with the unsigned representation. All of the
  323|  69.6k|        // operations performed below work out just as well whether or not `T`
  324|  69.6k|        // is a signed or unsigned integer.
  325|  69.6k|        let start = start.to_unsigned();
  326|  69.6k|        let end = end.to_unsigned();
  327|  69.6k|
  328|  69.6k|        let delta = end.wrapping_sub(start);
  329|  69.6k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  69.6k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  69.6k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   208k|        while (bytes_consumed < mem::size_of::<T>())
  339|   139k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   139k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|   139k|                Some(b) => b,
  344|   139k|            };
  345|   139k|            bytes_consumed += 1;
  346|   139k|
  347|   139k|            // Combine this byte into our arbitrary integer, but avoid
  348|   139k|            // overflowing the shift for `u8` and `i8`.
  349|   139k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   139k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  69.6k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  69.6k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  69.6k|        let result = start.wrapping_add(offset);
  365|  69.6k|
  366|  69.6k|        // And convert back to our maybe-signed representation.
  367|  69.6k|        let result = T::from_unsigned(result);
  368|  69.6k|        debug_assert!(*range.start() <= result);
  369|  69.6k|        debug_assert!(result <= *range.end());
  370|       |
  371|  69.6k|        Ok((result, bytes_consumed))
  372|  69.6k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|  26.6k|                fn from_u8(b: u8) -> Self {
  822|  26.6k|                    b as Self
  823|  26.6k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  96.8k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  96.8k|        if self.data.is_empty() {
  226|    396|            Ok(0)
  227|  96.4k|        } else if self.data.len() == 1 {
  228|    163|            self.data = &[];
  229|    163|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|  96.3k|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|  26.6k|                let bytes = 1;
  242|  26.6k|                let max_size = self.data.len() - bytes;
  243|  26.6k|                let (rest, for_size) = self.data.split_at(max_size);
  244|  26.6k|                self.data = rest;
  245|  26.6k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|  69.6k|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|  69.6k|                let bytes = 2;
  248|  69.6k|                let max_size = self.data.len() - bytes;
  249|  69.6k|                let (rest, for_size) = self.data.split_at(max_size);
  250|  69.6k|                self.data = rest;
  251|  69.6k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|  96.3k|            Ok(len)
  267|       |        }
  268|  96.8k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  53.3k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  53.3k|                    self as $unsigned_ty
  843|  53.3k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|  26.6k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  26.6k|                    <$ty>::wrapping_add(self, rhs)
  835|  26.6k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|  69.6k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  69.6k|                    <$ty>::checked_add(self, rhs)
  831|  69.6k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   473k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   473k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   473k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   473k|        for byte in buffer[n..].iter_mut() {
  525|  79.3k|            *byte = 0;
  526|  79.3k|        }
  527|   473k|        self.data = &self.data[n..];
  528|   473k|        Ok(())
  529|   473k|    }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|  69.6k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  69.6k|                    <$ty>::wrapping_add(self, rhs)
  835|  69.6k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|   139k|                fn from_usize(u: usize) -> Self {
  826|   139k|                    u as Self
  827|   139k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|  26.6k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  26.6k|                    <$ty>::wrapping_sub(self, rhs)
  839|  26.6k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  94.0k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  94.0k|        self.data.get(..size)
  581|  94.0k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  6.16k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  6.16k|                    <$ty>::checked_add(self, rhs)
  831|  6.16k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|  69.6k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  69.6k|                    unsigned as Self
  847|  69.6k|                }
_RNvXs2_NtCs98o54wqeRSK_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|   139k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   139k|                    self as $unsigned_ty
  843|   139k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenhEB5_:
  213|  94.0k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  94.0k|    where
  215|  94.0k|        ElementType: Arbitrary<'a>,
  216|  94.0k|    {
  217|  94.0k|        let byte_size = self.arbitrary_byte_size()?;
  218|  94.0k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  94.0k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  94.0k|        let elem_size = std::cmp::max(1, elem_size);
  221|  94.0k|        Ok(byte_size / elem_size)
  222|  94.0k|    }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|  26.6k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  26.6k|                    <$ty>::checked_add(self, rhs)
  831|  26.6k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|  26.6k|                fn from_usize(u: usize) -> Self {
  826|  26.6k|                    u as Self
  827|  26.6k|                }
_RNvXs1_NtCs98o54wqeRSK_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|  26.6k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  26.6k|                    unsigned as Self
  847|  26.6k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  26.6k|    fn int_in_range_impl<T>(
  303|  26.6k|        range: ops::RangeInclusive<T>,
  304|  26.6k|        mut bytes: impl Iterator<Item = u8>,
  305|  26.6k|    ) -> Result<(T, usize)>
  306|  26.6k|    where
  307|  26.6k|        T: Int,
  308|  26.6k|    {
  309|  26.6k|        let start = *range.start();
  310|  26.6k|        let end = *range.end();
  311|  26.6k|        assert!(
  312|  26.6k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  26.6k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  26.6k|        }
  321|  26.6k|
  322|  26.6k|        // From here on out we work with the unsigned representation. All of the
  323|  26.6k|        // operations performed below work out just as well whether or not `T`
  324|  26.6k|        // is a signed or unsigned integer.
  325|  26.6k|        let start = start.to_unsigned();
  326|  26.6k|        let end = end.to_unsigned();
  327|  26.6k|
  328|  26.6k|        let delta = end.wrapping_sub(start);
  329|  26.6k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  26.6k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  26.6k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  53.3k|        while (bytes_consumed < mem::size_of::<T>())
  339|  26.6k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  26.6k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  26.6k|                Some(b) => b,
  344|  26.6k|            };
  345|  26.6k|            bytes_consumed += 1;
  346|  26.6k|
  347|  26.6k|            // Combine this byte into our arbitrary integer, but avoid
  348|  26.6k|            // overflowing the shift for `u8` and `i8`.
  349|  26.6k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|  26.6k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  26.6k|        let offset = if delta == T::Unsigned::MAX {
  357|     48|            arbitrary_int
  358|       |        } else {
  359|  26.6k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  26.6k|        let result = start.wrapping_add(offset);
  365|  26.6k|
  366|  26.6k|        // And convert back to our maybe-signed representation.
  367|  26.6k|        let result = T::from_unsigned(result);
  368|  26.6k|        debug_assert!(*range.start() <= result);
  369|  26.6k|        debug_assert!(result <= *range.end());
  370|       |
  371|  26.6k|        Ok((result, bytes_consumed))
  372|  26.6k|    }

_RNvXsh_Cs6KAUHoa9eg5_4itoayNtNtB5_7private6Sealed5writeCs9VYNaPcKfHq_10serde_json:
  135|  3.06k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  3.06k|                let is_nonnegative = self >= 0;
  137|  3.06k|                let mut n = if is_nonnegative {
  138|  3.06k|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  141|      0|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  3.06k|                let mut curr = buf.len() as isize;
  144|  3.06k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  3.06k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  3.06k|
  147|  3.06k|                unsafe {
  148|  3.06k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  149|  3.06k|                    if mem::size_of::<$t>() >= 2 {
  150|       |                        // eagerly decode 4 characters at a time
  151|  14.1k|                        while n >= 10000 {
  152|  11.1k|                            let rem = (n % 10000) as isize;
  153|  11.1k|                            n /= 10000;
  154|  11.1k|
  155|  11.1k|                            let d1 = (rem / 100) << 1;
  156|  11.1k|                            let d2 = (rem % 100) << 1;
  157|  11.1k|                            curr -= 4;
  158|  11.1k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  11.1k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  11.1k|                        }
  161|      0|                    }
  162|       |
  163|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  164|  3.06k|                    let mut n = n as isize; // possibly reduce 64bit math
  165|  3.06k|
  166|  3.06k|                    // decode 2 more chars, if > 2 chars
  167|  3.06k|                    if n >= 100 {
  168|  2.59k|                        let d1 = (n % 100) << 1;
  169|  2.59k|                        n /= 100;
  170|  2.59k|                        curr -= 2;
  171|  2.59k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  172|  2.59k|                    }
  173|       |
  174|       |                    // decode last 1 or 2 chars
  175|  3.06k|                    if n < 10 {
  176|  2.88k|                        curr -= 1;
  177|  2.88k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  178|  2.88k|                    } else {
  179|    180|                        let d1 = n << 1;
  180|    180|                        curr -= 2;
  181|    180|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  182|    180|                    }
  183|       |
  184|  3.06k|                    if !is_nonnegative {
  185|      0|                        curr -= 1;
  186|      0|                        *buf_ptr.offset(curr) = b'-';
  187|  3.06k|                    }
  188|       |                }
  189|       |
  190|  3.06k|                let len = buf.len() - curr as usize;
  191|  3.06k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  192|  3.06k|                unsafe { str::from_utf8_unchecked(bytes) }
  193|  3.06k|            }
_RINvMs1_Cs6KAUHoa9eg5_4itoaNtB6_6Buffer6formatxECs9VYNaPcKfHq_10serde_json:
   95|  1.25k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  1.25k|        i.write(unsafe {
   97|  1.25k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  1.25k|                as *mut <I as private::Sealed>::Buffer)
   99|  1.25k|        })
  100|  1.25k|    }
_RINvMs1_Cs6KAUHoa9eg5_4itoaNtB6_6Buffer6formatyECs9VYNaPcKfHq_10serde_json:
   95|  3.06k|    pub fn format<I: Integer>(&mut self, i: I) -> &str {
   96|  3.06k|        i.write(unsafe {
   97|  3.06k|            &mut *(&mut self.bytes as *mut [MaybeUninit<u8>; I128_MAX_LEN]
   98|  3.06k|                as *mut <I as private::Sealed>::Buffer)
   99|  3.06k|        })
  100|  3.06k|    }
_RNvMs1_Cs6KAUHoa9eg5_4itoaNtB5_6Buffer3newCs9VYNaPcKfHq_10serde_json:
   87|  4.31k|    pub fn new() -> Buffer {
   88|  4.31k|        let bytes = [MaybeUninit::<u8>::uninit(); I128_MAX_LEN];
   89|  4.31k|        Buffer { bytes }
   90|  4.31k|    }
_RNvXsf_Cs6KAUHoa9eg5_4itoaxNtNtB5_7private6Sealed5writeCs9VYNaPcKfHq_10serde_json:
  135|  1.25k|            fn write(self, buf: &mut [MaybeUninit<u8>; $max_len]) -> &str {
  136|  1.25k|                let is_nonnegative = self >= 0;
  137|  1.25k|                let mut n = if is_nonnegative {
  138|      0|                    self as $conv_fn
  139|       |                } else {
  140|       |                    // convert the negative num to positive by summing 1 to it's 2 complement
  141|  1.25k|                    (!(self as $conv_fn)).wrapping_add(1)
  142|       |                };
  143|  1.25k|                let mut curr = buf.len() as isize;
  144|  1.25k|                let buf_ptr = buf.as_mut_ptr() as *mut u8;
  145|  1.25k|                let lut_ptr = DEC_DIGITS_LUT.as_ptr();
  146|  1.25k|
  147|  1.25k|                unsafe {
  148|  1.25k|                    // need at least 16 bits for the 4-characters-at-a-time to work.
  149|  1.25k|                    if mem::size_of::<$t>() >= 2 {
  150|       |                        // eagerly decode 4 characters at a time
  151|  5.67k|                        while n >= 10000 {
  152|  4.42k|                            let rem = (n % 10000) as isize;
  153|  4.42k|                            n /= 10000;
  154|  4.42k|
  155|  4.42k|                            let d1 = (rem / 100) << 1;
  156|  4.42k|                            let d2 = (rem % 100) << 1;
  157|  4.42k|                            curr -= 4;
  158|  4.42k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  159|  4.42k|                            ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);
  160|  4.42k|                        }
  161|      0|                    }
  162|       |
  163|       |                    // if we reach here numbers are <= 9999, so at most 4 chars long
  164|  1.25k|                    let mut n = n as isize; // possibly reduce 64bit math
  165|  1.25k|
  166|  1.25k|                    // decode 2 more chars, if > 2 chars
  167|  1.25k|                    if n >= 100 {
  168|  1.01k|                        let d1 = (n % 100) << 1;
  169|  1.01k|                        n /= 100;
  170|  1.01k|                        curr -= 2;
  171|  1.01k|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  172|  1.01k|                    }
  173|       |
  174|       |                    // decode last 1 or 2 chars
  175|  1.25k|                    if n < 10 {
  176|  1.12k|                        curr -= 1;
  177|  1.12k|                        *buf_ptr.offset(curr) = (n as u8) + b'0';
  178|  1.12k|                    } else {
  179|    127|                        let d1 = n << 1;
  180|    127|                        curr -= 2;
  181|    127|                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);
  182|    127|                    }
  183|       |
  184|  1.25k|                    if !is_nonnegative {
  185|  1.25k|                        curr -= 1;
  186|  1.25k|                        *buf_ptr.offset(curr) = b'-';
  187|  1.25k|                    }
  188|       |                }
  189|       |
  190|  1.25k|                let len = buf.len() - curr as usize;
  191|  1.25k|                let bytes = unsafe { slice::from_raw_parts(buf_ptr.offset(curr), len) };
  192|  1.25k|                unsafe { str::from_utf8_unchecked(bytes) }
  193|  1.25k|            }

rust_fuzzer_test_input:
  259|  2.86k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.86k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.86k|
  262|  2.86k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.86k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.86k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.86k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.86k|                // get to longer inputs that actually lead to interesting executions
  267|  2.86k|                // quicker.
  268|  2.86k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.86k|                }
  271|  2.86k|
  272|  2.86k|                let mut u = Unstructured::new(bytes);
  273|  2.86k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.86k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.86k|                }
  291|       |
  292|  2.86k|                let data = match data {
  293|  2.86k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.86k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.86k|                result.to_libfuzzer_code()
  299|  2.86k|            }
_RNvNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons_1__19___libfuzzer_sys_run:
  303|  2.86k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.86k|                $body
  305|  2.86k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs8ZpES7bF61F_19fuzz_arbitrary_json:
   40|  2.86k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.86k|        match self {
   42|  2.80k|            Corpus::Keep => 0,
   43|     60|            Corpus::Reject => -1,
   44|       |        }
   45|  2.86k|    }
LLVMFuzzerTestOneInput:
   58|  2.86k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.86k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.86k|    });
   63|  2.86k|
   64|  2.86k|    match test_input {
   65|  2.86k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.86k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.86k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.86k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.86k|        rust_fuzzer_test_input(data_slice)
   62|  2.86k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs8ZpES7bF61F_19fuzz_arbitrary_json:
  474|  3.37M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|  3.37M|        Some((*self as usize).cmp(&(*other as usize)))
  476|  3.37M|    }
_RNvCs36tL2qLycl0_3log9max_level:
 1269|  2.26M|pub fn max_level() -> LevelFilter {
 1270|  2.26M|    // Since `LevelFilter` is `repr(usize)`,
 1271|  2.26M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1272|  2.26M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1273|  2.26M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1274|  2.26M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1275|  2.26M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1276|  2.26M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1277|  2.26M|}
_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs8dUjriG0K0U_8rsonpath:
  474|  1.16M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|  1.16M|        Some((*self as usize).cmp(&(*other as usize)))
  476|  1.16M|    }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs8ZpES7bF61F_19fuzz_arbitrary_json:
   49|  2.86k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.86k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.86k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.86k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.86k|        // `SeqCst` operations on the slow path.
   54|  2.86k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.86k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs8ZpES7bF61F_19fuzz_arbitrary_json:
  963|  2.86k|        pub fn get(&self) -> Option<&T> {
  964|  2.86k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.86k|                None
  969|       |            }
  970|  2.86k|        }

_RNvMNtCs5Rryf4izwlP_3ryu6bufferNtB2_6Buffer3newCs9VYNaPcKfHq_10serde_json:
   29|  6.25k|    pub fn new() -> Self {
   30|  6.25k|        let bytes = [MaybeUninit::<u8>::uninit(); 24];
   31|  6.25k|        Buffer { bytes }
   32|  6.25k|    }
_RINvMNtCs5Rryf4izwlP_3ryu6bufferNtB3_6Buffer13format_finitedECs9VYNaPcKfHq_10serde_json:
   72|  6.25k|    pub fn format_finite<F: Float>(&mut self, f: F) -> &str {
   73|  6.25k|        unsafe {
   74|  6.25k|            let n = f.write_to_ryu_buffer(self.bytes.as_mut_ptr() as *mut u8);
   75|  6.25k|            debug_assert!(n <= self.bytes.len());
   76|  6.25k|            let slice = slice::from_raw_parts(self.bytes.as_ptr() as *const u8, n);
   77|  6.25k|            str::from_utf8_unchecked(slice)
   78|  6.25k|        }
   79|  6.25k|    }
_RNvXs5_NtCs5Rryf4izwlP_3ryu6bufferdNtB5_6Sealed19write_to_ryu_bufferCs9VYNaPcKfHq_10serde_json:
  168|  6.25k|    unsafe fn write_to_ryu_buffer(self, result: *mut u8) -> usize {
  169|  6.25k|        raw::format64(self, result)
  170|  6.25k|    }

_RNvNtCs5Rryf4izwlP_3ryu6common8pow5bits:
   64|  6.12k|pub fn pow5bits(e: i32) -> i32 /* or u32 -> u32 */ {
   65|       |    // This approximation works up to the point that the multiplication
   66|       |    // overflows at e = 3529. If the multiplication were done in 64 bits, it
   67|       |    // would fail at 5^4004 which is just greater than 2^9297.
   68|  6.12k|    debug_assert!(e >= 0);
   69|  6.12k|    debug_assert!(e <= 3528);
   70|  6.12k|    (((e as u32 * 1217359) >> 19) + 1) as i32
   71|  6.12k|}
_RNvNtCs5Rryf4izwlP_3ryu6common10log10_pow5:
   90|  4.09k|pub fn log10_pow5(e: i32) -> u32 /* or u32 -> u32 */ {
   91|       |    // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
   92|  4.09k|    debug_assert!(e >= 0);
   93|  4.09k|    debug_assert!(e <= 2620);
   94|  4.09k|    (e as u32 * 732923) >> 20
   95|  4.09k|}
_RNvNtCs5Rryf4izwlP_3ryu6common10log10_pow2:
   81|  2.02k|pub fn log10_pow2(e: i32) -> u32 /* or u32 -> u32 */ {
   82|       |    // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
   83|  2.02k|    debug_assert!(e >= 0);
   84|  2.02k|    debug_assert!(e <= 1650);
   85|  2.02k|    (e as u32 * 78913) >> 18
   86|  2.02k|}

_RNvNtCs5Rryf4izwlP_3ryu3d2s3d2d:
   91|  6.12k|pub fn d2d(ieee_mantissa: u64, ieee_exponent: u32) -> FloatingDecimal64 {
   92|  6.12k|    let (e2, m2) = if ieee_exponent == 0 {
   93|  1.09k|        (
   94|  1.09k|            // We subtract 2 so that the bounds computation has 2 additional bits.
   95|  1.09k|            1 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
   96|  1.09k|            ieee_mantissa,
   97|  1.09k|        )
   98|       |    } else {
   99|  5.03k|        (
  100|  5.03k|            ieee_exponent as i32 - DOUBLE_BIAS - DOUBLE_MANTISSA_BITS as i32 - 2,
  101|  5.03k|            (1u64 << DOUBLE_MANTISSA_BITS) | ieee_mantissa,
  102|  5.03k|        )
  103|       |    };
  104|  6.12k|    let even = (m2 & 1) == 0;
  105|  6.12k|    let accept_bounds = even;
  106|  6.12k|
  107|  6.12k|    // Step 2: Determine the interval of valid decimal representations.
  108|  6.12k|    let mv = 4 * m2;
  109|       |    // Implicit bool -> int conversion. True is 1, false is 0.
  110|  6.12k|    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
  111|       |    // We would compute mp and mm like this:
  112|       |    // uint64_t mp = 4 * m2 + 2;
  113|       |    // uint64_t mm = mv - 1 - mm_shift;
  114|       |
  115|       |    // Step 3: Convert to a decimal power base using 128-bit arithmetic.
  116|       |    let mut vr: u64;
  117|       |    let mut vp: u64;
  118|       |    let mut vm: u64;
  119|  6.12k|    let mut vp_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  120|  6.12k|    let mut vm_uninit: MaybeUninit<u64> = MaybeUninit::uninit();
  121|  6.12k|    let e10: i32;
  122|  6.12k|    let mut vm_is_trailing_zeros = false;
  123|  6.12k|    let mut vr_is_trailing_zeros = false;
  124|  6.12k|    if e2 >= 0 {
  125|       |        // I tried special-casing q == 0, but there was no effect on performance.
  126|       |        // This expression is slightly faster than max(0, log10_pow2(e2) - 1).
  127|  2.02k|        let q = log10_pow2(e2) - (e2 > 3) as u32;
  128|  2.02k|        e10 = q as i32;
  129|  2.02k|        let k = DOUBLE_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
  130|  2.02k|        let i = -e2 + q as i32 + k;
  131|  2.02k|        vr = unsafe {
  132|  2.02k|            mul_shift_all_64(
  133|  2.02k|                m2,
  134|       |                #[cfg(feature = "small")]
  135|       |                &compute_inv_pow5(q),
  136|       |                #[cfg(not(feature = "small"))]
  137|       |                {
  138|  2.02k|                    debug_assert!(q < DOUBLE_POW5_INV_SPLIT.len() as u32);
  139|  2.02k|                    DOUBLE_POW5_INV_SPLIT.get_unchecked(q as usize)
  140|  2.02k|                },
  141|  2.02k|                i as u32,
  142|  2.02k|                vp_uninit.as_mut_ptr(),
  143|  2.02k|                vm_uninit.as_mut_ptr(),
  144|  2.02k|                mm_shift,
  145|  2.02k|            )
  146|  2.02k|        };
  147|  2.02k|        vp = unsafe { vp_uninit.assume_init() };
  148|  2.02k|        vm = unsafe { vm_uninit.assume_init() };
  149|  2.02k|        if q <= 21 {
  150|       |            // This should use q <= 22, but I think 21 is also safe. Smaller values
  151|       |            // may still be safe, but it's more difficult to reason about them.
  152|       |            // Only one of mp, mv, and mm can be a multiple of 5, if any.
  153|    978|            let mv_mod5 = (mv as u32).wrapping_sub(5u32.wrapping_mul(div5(mv) as u32));
  154|    978|            if mv_mod5 == 0 {
  155|    244|                vr_is_trailing_zeros = multiple_of_power_of_5(mv, q);
  156|    734|            } else if accept_bounds {
  157|    495|                // Same as min(e2 + (~mm & 1), pow5_factor(mm)) >= q
  158|    495|                // <=> e2 + (~mm & 1) >= q && pow5_factor(mm) >= q
  159|    495|                // <=> true && pow5_factor(mm) >= q, since e2 >= q.
  160|    495|                vm_is_trailing_zeros = multiple_of_power_of_5(mv - 1 - mm_shift as u64, q);
  161|    495|            } else {
  162|    239|                // Same as min(e2 + 1, pow5_factor(mp)) >= q.
  163|    239|                vp -= multiple_of_power_of_5(mv + 2, q) as u64;
  164|    239|            }
  165|  1.04k|        }
  166|       |    } else {
  167|       |        // This expression is slightly faster than max(0, log10_pow5(-e2) - 1).
  168|  4.09k|        let q = log10_pow5(-e2) - (-e2 > 1) as u32;
  169|  4.09k|        e10 = q as i32 + e2;
  170|  4.09k|        let i = -e2 - q as i32;
  171|  4.09k|        let k = pow5bits(i) - DOUBLE_POW5_BITCOUNT;
  172|  4.09k|        let j = q as i32 - k;
  173|  4.09k|        vr = unsafe {
  174|  4.09k|            mul_shift_all_64(
  175|  4.09k|                m2,
  176|       |                #[cfg(feature = "small")]
  177|       |                &compute_pow5(i as u32),
  178|       |                #[cfg(not(feature = "small"))]
  179|       |                {
  180|  4.09k|                    debug_assert!(i < DOUBLE_POW5_SPLIT.len() as i32);
  181|  4.09k|                    DOUBLE_POW5_SPLIT.get_unchecked(i as usize)
  182|  4.09k|                },
  183|  4.09k|                j as u32,
  184|  4.09k|                vp_uninit.as_mut_ptr(),
  185|  4.09k|                vm_uninit.as_mut_ptr(),
  186|  4.09k|                mm_shift,
  187|  4.09k|            )
  188|  4.09k|        };
  189|  4.09k|        vp = unsafe { vp_uninit.assume_init() };
  190|  4.09k|        vm = unsafe { vm_uninit.assume_init() };
  191|  4.09k|        if q <= 1 {
  192|       |            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
  193|       |            // mv = 4 * m2, so it always has at least two trailing 0 bits.
  194|    615|            vr_is_trailing_zeros = true;
  195|    615|            if accept_bounds {
  196|    471|                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
  197|    471|                vm_is_trailing_zeros = mm_shift == 1;
  198|    471|            } else {
  199|    144|                // mp = mv + 2, so it always has at least one trailing 0 bit.
  200|    144|                vp -= 1;
  201|    144|            }
  202|  3.48k|        } else if q < 63 {
  203|    763|            // TODO(ulfjack): Use a tighter bound here.
  204|    763|            // We want to know if the full product has at least q trailing zeros.
  205|    763|            // We need to compute min(p2(mv), p5(mv) - e2) >= q
  206|    763|            // <=> p2(mv) >= q && p5(mv) - e2 >= q
  207|    763|            // <=> p2(mv) >= q (because -e2 >= q)
  208|    763|            vr_is_trailing_zeros = multiple_of_power_of_2(mv, q);
  209|  2.72k|        }
  210|       |    }
  211|       |
  212|       |    // Step 4: Find the shortest decimal representation in the interval of valid representations.
  213|  6.12k|    let mut removed = 0i32;
  214|  6.12k|    let mut last_removed_digit = 0u8;
  215|       |    // On average, we remove ~2 digits.
  216|  6.12k|    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
  217|       |        // General case, which happens rarely (~0.7%).
  218|       |        loop {
  219|  5.33k|            let vp_div10 = div10(vp);
  220|  5.33k|            let vm_div10 = div10(vm);
  221|  5.33k|            if vp_div10 <= vm_div10 {
  222|  1.23k|                break;
  223|  4.10k|            }
  224|  4.10k|            let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  225|  4.10k|            let vr_div10 = div10(vr);
  226|  4.10k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  227|  4.10k|            vm_is_trailing_zeros &= vm_mod10 == 0;
  228|  4.10k|            vr_is_trailing_zeros &= last_removed_digit == 0;
  229|  4.10k|            last_removed_digit = vr_mod10 as u8;
  230|  4.10k|            vr = vr_div10;
  231|  4.10k|            vp = vp_div10;
  232|  4.10k|            vm = vm_div10;
  233|  4.10k|            removed += 1;
  234|       |        }
  235|  1.23k|        if vm_is_trailing_zeros {
  236|       |            loop {
  237|    516|                let vm_div10 = div10(vm);
  238|    516|                let vm_mod10 = (vm as u32).wrapping_sub(10u32.wrapping_mul(vm_div10 as u32));
  239|    516|                if vm_mod10 != 0 {
  240|    335|                    break;
  241|    181|                }
  242|    181|                let vp_div10 = div10(vp);
  243|    181|                let vr_div10 = div10(vr);
  244|    181|                let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  245|    181|                vr_is_trailing_zeros &= last_removed_digit == 0;
  246|    181|                last_removed_digit = vr_mod10 as u8;
  247|    181|                vr = vr_div10;
  248|    181|                vp = vp_div10;
  249|    181|                vm = vm_div10;
  250|    181|                removed += 1;
  251|       |            }
  252|    898|        }
  253|  1.23k|        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
  254|      0|            // Round even if the exact number is .....50..0.
  255|      0|            last_removed_digit = 4;
  256|  1.23k|        }
  257|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  258|  1.23k|        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
  259|       |            as u64
  260|       |    } else {
  261|       |        // Specialized for the common case (~99.3%). Percentages below are relative to this.
  262|  4.89k|        let mut round_up = false;
  263|  4.89k|        let vp_div100 = div100(vp);
  264|  4.89k|        let vm_div100 = div100(vm);
  265|  4.89k|        // Optimization: remove two digits at a time (~86.2%).
  266|  4.89k|        if vp_div100 > vm_div100 {
  267|  3.45k|            let vr_div100 = div100(vr);
  268|  3.45k|            let vr_mod100 = (vr as u32).wrapping_sub(100u32.wrapping_mul(vr_div100 as u32));
  269|  3.45k|            round_up = vr_mod100 >= 50;
  270|  3.45k|            vr = vr_div100;
  271|  3.45k|            vp = vp_div100;
  272|  3.45k|            vm = vm_div100;
  273|  3.45k|            removed += 2;
  274|  3.45k|        }
  275|       |        // Loop iterations below (approximately), without optimization above:
  276|       |        // 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%, 6+: 0.02%
  277|       |        // Loop iterations below (approximately), with optimization above:
  278|       |        // 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
  279|       |        loop {
  280|  7.09k|            let vp_div10 = div10(vp);
  281|  7.09k|            let vm_div10 = div10(vm);
  282|  7.09k|            if vp_div10 <= vm_div10 {
  283|  4.89k|                break;
  284|  2.20k|            }
  285|  2.20k|            let vr_div10 = div10(vr);
  286|  2.20k|            let vr_mod10 = (vr as u32).wrapping_sub(10u32.wrapping_mul(vr_div10 as u32));
  287|  2.20k|            round_up = vr_mod10 >= 5;
  288|  2.20k|            vr = vr_div10;
  289|  2.20k|            vp = vp_div10;
  290|  2.20k|            vm = vm_div10;
  291|  2.20k|            removed += 1;
  292|       |        }
  293|       |        // We need to take vr + 1 if vr is outside bounds or we need to round up.
  294|  4.89k|        vr + (vr == vm || round_up) as u64
  295|       |    };
  296|  6.12k|    let exp = e10 + removed;
  297|  6.12k|
  298|  6.12k|    FloatingDecimal64 {
  299|  6.12k|        exponent: exp,
  300|  6.12k|        mantissa: output,
  301|  6.12k|    }
  302|  6.12k|}
_RNvNtCs5Rryf4izwlP_3ryu3d2s16decimal_length17:
   38|  6.12k|pub fn decimal_length17(v: u64) -> u32 {
   39|       |    // This is slightly faster than a loop.
   40|       |    // The average output length is 16.38 digits, so we check high-to-low.
   41|       |    // Function precondition: v is not an 18, 19, or 20-digit number.
   42|       |    // (17 digits are sufficient for round-tripping.)
   43|  6.12k|    debug_assert!(v < 100000000000000000);
   44|       |
   45|  6.12k|    if v >= 10000000000000000 {
   46|  1.94k|        17
   47|  4.18k|    } else if v >= 1000000000000000 {
   48|  2.07k|        16
   49|  2.10k|    } else if v >= 100000000000000 {
   50|    599|        15
   51|  1.50k|    } else if v >= 10000000000000 {
   52|    146|        14
   53|  1.36k|    } else if v >= 1000000000000 {
   54|    156|        13
   55|  1.20k|    } else if v >= 100000000000 {
   56|    121|        12
   57|  1.08k|    } else if v >= 10000000000 {
   58|     72|        11
   59|  1.01k|    } else if v >= 1000000000 {
   60|    222|        10
   61|    790|    } else if v >= 100000000 {
   62|     76|        9
   63|    714|    } else if v >= 10000000 {
   64|     95|        8
   65|    619|    } else if v >= 1000000 {
   66|     97|        7
   67|    522|    } else if v >= 100000 {
   68|    132|        6
   69|    390|    } else if v >= 10000 {
   70|    100|        5
   71|    290|    } else if v >= 1000 {
   72|     72|        4
   73|    218|    } else if v >= 100 {
   74|    138|        3
   75|     80|    } else if v >= 10 {
   76|     11|        2
   77|       |    } else {
   78|     69|        1
   79|       |    }
   80|  6.12k|}

_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics4div5B3_:
   24|    978|pub fn div5(x: u64) -> u64 {
   25|    978|    x / 5
   26|    978|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics11pow5_factor:
   39|    978|pub(crate) fn pow5_factor(mut value: u64) -> u32 {
   40|    978|    const M_INV_5: u64 = 14757395258967641293; // 5 * m_inv_5 = 1 (mod 2^64)
   41|    978|    const N_DIV_5: u64 = 3689348814741910323; // #{ n | n = 0 (mod 2^64) } = 2^64 / 5
   42|    978|    let mut count = 0u32;
   43|       |    loop {
   44|  2.57k|        debug_assert!(value != 0);
   45|  2.57k|        value = value.wrapping_mul(M_INV_5);
   46|  2.57k|        if value > N_DIV_5 {
   47|    978|            break;
   48|  1.59k|        }
   49|  1.59k|        count += 1;
   50|       |    }
   51|    978|    count
   52|    978|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics16mul_shift_all_64:
   78|  6.12k|pub unsafe fn mul_shift_all_64(
   79|  6.12k|    m: u64,
   80|  6.12k|    mul: &(u64, u64),
   81|  6.12k|    j: u32,
   82|  6.12k|    vp: *mut u64,
   83|  6.12k|    vm: *mut u64,
   84|  6.12k|    mm_shift: u32,
   85|  6.12k|) -> u64 {
   86|  6.12k|    ptr::write(vp, mul_shift_64(4 * m + 2, mul, j));
   87|  6.12k|    ptr::write(vm, mul_shift_64(4 * m - 1 - mm_shift as u64, mul, j));
   88|  6.12k|    mul_shift_64(4 * m, mul, j)
   89|  6.12k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics22multiple_of_power_of_5:
   56|    978|pub fn multiple_of_power_of_5(value: u64, p: u32) -> bool {
   57|    978|    // I tried a case distinction on p, but there was no performance difference.
   58|    978|    pow5_factor(value) >= p
   59|    978|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics6div100B3_:
   34|  13.2k|pub fn div100(x: u64) -> u64 {
   35|  13.2k|    x / 100
   36|  13.2k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics12mul_shift_64:
   71|  18.3k|pub fn mul_shift_64(m: u64, mul: &(u64, u64), j: u32) -> u64 {
   72|  18.3k|    let b0 = m as u128 * mul.0 as u128;
   73|  18.3k|    let b2 = m as u128 * mul.1 as u128;
   74|  18.3k|    (((b0 >> 64) + b2) >> (j - 64)) as u64
   75|  18.3k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics5div10B3_:
   29|  32.0k|pub fn div10(x: u64) -> u64 {
   30|  32.0k|    x / 10
   31|  32.0k|}
_RNvNtCs5Rryf4izwlP_3ryu14d2s_intrinsics22multiple_of_power_of_2:
   63|    763|pub fn multiple_of_power_of_2(value: u64, p: u32) -> bool {
   64|    763|    debug_assert!(value != 0);
   65|    763|    debug_assert!(p < 64);
   66|       |    // __builtin_ctzll doesn't appear to be faster here.
   67|    763|    (value & ((1u64 << p) - 1)) == 0
   68|    763|}

_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8exponent15write_exponent3:
    5|  4.89k|pub unsafe fn write_exponent3(mut k: isize, mut result: *mut u8) -> usize {
    6|  4.89k|    let sign = k < 0;
    7|  4.89k|    if sign {
    8|  2.80k|        *result = b'-';
    9|  2.80k|        result = result.offset(1);
   10|  2.80k|        k = -k;
   11|  2.80k|    }
   12|       |
   13|  4.89k|    debug_assert!(k < 1000);
   14|  4.89k|    if k >= 100 {
   15|  3.28k|        *result = b'0' + (k / 100) as u8;
   16|  3.28k|        k %= 100;
   17|  3.28k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   18|  3.28k|        ptr::copy_nonoverlapping(d, result.offset(1), 2);
   19|  3.28k|        sign as usize + 3
   20|  1.61k|    } else if k >= 10 {
   21|  1.54k|        let d = DIGIT_TABLE.as_ptr().offset(k * 2);
   22|  1.54k|        ptr::copy_nonoverlapping(d, result, 2);
   23|  1.54k|        sign as usize + 2
   24|       |    } else {
   25|     67|        *result = b'0' + k as u8;
   26|     67|        sign as usize + 1
   27|       |    }
   28|  4.89k|}

_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8mantissa19write_mantissa_long:
    5|  6.05k|pub unsafe fn write_mantissa_long(mut output: u64, mut result: *mut u8) {
    6|  6.05k|    if (output >> 32) != 0 {
    7|  5.12k|        // One expensive 64-bit division.
    8|  5.12k|        let mut output2 = (output - 100_000_000 * (output / 100_000_000)) as u32;
    9|  5.12k|        output /= 100_000_000;
   10|  5.12k|
   11|  5.12k|        let c = output2 % 10_000;
   12|  5.12k|        output2 /= 10_000;
   13|  5.12k|        let d = output2 % 10_000;
   14|  5.12k|        let c0 = (c % 100) << 1;
   15|  5.12k|        let c1 = (c / 100) << 1;
   16|  5.12k|        let d0 = (d % 100) << 1;
   17|  5.12k|        let d1 = (d / 100) << 1;
   18|  5.12k|        ptr::copy_nonoverlapping(
   19|  5.12k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   20|  5.12k|            result.offset(-2),
   21|  5.12k|            2,
   22|  5.12k|        );
   23|  5.12k|        ptr::copy_nonoverlapping(
   24|  5.12k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   25|  5.12k|            result.offset(-4),
   26|  5.12k|            2,
   27|  5.12k|        );
   28|  5.12k|        ptr::copy_nonoverlapping(
   29|  5.12k|            DIGIT_TABLE.as_ptr().offset(d0 as isize),
   30|  5.12k|            result.offset(-6),
   31|  5.12k|            2,
   32|  5.12k|        );
   33|  5.12k|        ptr::copy_nonoverlapping(
   34|  5.12k|            DIGIT_TABLE.as_ptr().offset(d1 as isize),
   35|  5.12k|            result.offset(-8),
   36|  5.12k|            2,
   37|  5.12k|        );
   38|  5.12k|        result = result.offset(-8);
   39|  5.12k|    }
   40|  6.05k|    write_mantissa(output as u32, result);
   41|  6.05k|}
_RNvNtNtCs5Rryf4izwlP_3ryu6pretty8mantissa14write_mantissa:
   44|  6.05k|pub unsafe fn write_mantissa(mut output: u32, mut result: *mut u8) {
   45|  13.9k|    while output >= 10_000 {
   46|  7.86k|        let c = output - 10_000 * (output / 10_000);
   47|  7.86k|        output /= 10_000;
   48|  7.86k|        let c0 = (c % 100) << 1;
   49|  7.86k|        let c1 = (c / 100) << 1;
   50|  7.86k|        ptr::copy_nonoverlapping(
   51|  7.86k|            DIGIT_TABLE.as_ptr().offset(c0 as isize),
   52|  7.86k|            result.offset(-2),
   53|  7.86k|            2,
   54|  7.86k|        );
   55|  7.86k|        ptr::copy_nonoverlapping(
   56|  7.86k|            DIGIT_TABLE.as_ptr().offset(c1 as isize),
   57|  7.86k|            result.offset(-4),
   58|  7.86k|            2,
   59|  7.86k|        );
   60|  7.86k|        result = result.offset(-4);
   61|  7.86k|    }
   62|  6.05k|    if output >= 100 {
   63|  3.27k|        let c = (output % 100) << 1;
   64|  3.27k|        output /= 100;
   65|  3.27k|        ptr::copy_nonoverlapping(
   66|  3.27k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   67|  3.27k|            result.offset(-2),
   68|  3.27k|            2,
   69|  3.27k|        );
   70|  3.27k|        result = result.offset(-2);
   71|  3.27k|    }
   72|  6.05k|    if output >= 10 {
   73|  2.87k|        let c = output << 1;
   74|  2.87k|        ptr::copy_nonoverlapping(
   75|  2.87k|            DIGIT_TABLE.as_ptr().offset(c as isize),
   76|  2.87k|            result.offset(-2),
   77|  2.87k|            2,
   78|  2.87k|        );
   79|  3.18k|    } else {
   80|  3.18k|        *result.offset(-1) = b'0' + output as u8;
   81|  3.18k|    }
   82|  6.05k|}

_RNvNtCs5Rryf4izwlP_3ryu6pretty8format64:
   52|  6.25k|pub unsafe fn format64(f: f64, result: *mut u8) -> usize {
   53|  6.25k|    let bits = f.to_bits();
   54|  6.25k|    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
   55|  6.25k|    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
   56|  6.25k|    let ieee_exponent =
   57|  6.25k|        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);
   58|  6.25k|
   59|  6.25k|    let mut index = 0isize;
   60|  6.25k|    if sign {
   61|  2.40k|        *result = b'-';
   62|  2.40k|        index += 1;
   63|  3.85k|    }
   64|       |
   65|  6.25k|    if ieee_exponent == 0 && ieee_mantissa == 0 {
   66|    132|        ptr::copy_nonoverlapping(b"0.0".as_ptr(), result.offset(index), 3);
   67|    132|        return sign as usize + 3;
   68|  6.12k|    }
   69|  6.12k|
   70|  6.12k|    let v = d2d(ieee_mantissa, ieee_exponent);
   71|  6.12k|
   72|  6.12k|    let length = d2s::decimal_length17(v.mantissa) as isize;
   73|  6.12k|    let k = v.exponent as isize;
   74|  6.12k|    let kk = length + k; // 10^(kk-1) <= v < 10^kk
   75|  6.12k|    debug_assert!(k >= -324);
   76|       |
   77|  6.12k|    if 0 <= k && kk <= 16 {
   78|       |        // 1234e7 -> 12340000000.0
   79|    737|        write_mantissa_long(v.mantissa, result.offset(index + length));
   80|    737|        for i in length..kk {
   81|    707|            *result.offset(index + i) = b'0';
   82|    707|        }
   83|    737|        *result.offset(index + kk) = b'.';
   84|    737|        *result.offset(index + kk + 1) = b'0';
   85|    737|        index as usize + kk as usize + 2
   86|  5.38k|    } else if 0 < kk && kk <= 16 {
   87|       |        // 1234e-2 -> 12.34
   88|     85|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
   89|     85|        ptr::copy(result.offset(index + 1), result.offset(index), kk as usize);
   90|     85|        *result.offset(index + kk) = b'.';
   91|     85|        index as usize + length as usize + 1
   92|  5.30k|    } else if -5 < kk && kk <= 0 {
   93|       |        // 1234e-6 -> 0.001234
   94|    410|        *result.offset(index) = b'0';
   95|    410|        *result.offset(index + 1) = b'.';
   96|    410|        let offset = 2 - kk;
   97|    948|        for i in 2..offset {
   98|    948|            *result.offset(index + i) = b'0';
   99|    948|        }
  100|    410|        write_mantissa_long(v.mantissa, result.offset(index + length + offset));
  101|    410|        index as usize + length as usize + offset as usize
  102|  4.89k|    } else if length == 1 {
  103|       |        // 1e30
  104|     67|        *result.offset(index) = b'0' + v.mantissa as u8;
  105|     67|        *result.offset(index + 1) = b'e';
  106|     67|        index as usize + 2 + write_exponent3(kk - 1, result.offset(index + 2))
  107|       |    } else {
  108|       |        // 1234e30 -> 1.234e33
  109|  4.82k|        write_mantissa_long(v.mantissa, result.offset(index + length + 1));
  110|  4.82k|        *result.offset(index) = *result.offset(index + 1);
  111|  4.82k|        *result.offset(index + 1) = b'.';
  112|  4.82k|        *result.offset(index + length + 1) = b'e';
  113|  4.82k|        index as usize
  114|  4.82k|            + length as usize
  115|  4.82k|            + 2
  116|  4.82k|            + write_exponent3(kk - 1, result.offset(index + length + 2))
  117|       |    }
  118|  6.25k|}

_RINvXs_NtNtCs58bv8sHjSTJ_5serde3ser5implsNtNtCshJIxznpEM8j_5alloc6string6StringNtB7_9Serialize9serializeINtNtCs9VYNaPcKfHq_10serde_json3ser16MapKeySerializerQNtNvXs_NtB1J_5valueNtB2D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB1H_16CompactFormatterEEB1J_:
   54|  67.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   55|  67.9k|    where
   56|  67.9k|        S: Serializer,
   57|  67.9k|    {
   58|  67.9k|        serializer.serialize_str(self)
   59|  67.9k|    }
_RINvXs1n_NtNtCs58bv8sHjSTJ_5serde3ser5implsINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCs9VYNaPcKfHq_10serde_json5value5ValueENtB9_9Serialize9serializeQINtNtB1g_3ser10SerializerQNtNvXs_B1e_B1c_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB1g_:
  200|  37.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  201|  37.1k|            where
  202|  37.1k|                S: Serializer,
  203|  37.1k|            {
  204|  37.1k|                serializer.collect_seq(self)
  205|  37.1k|            }
_RINvXs1H_NtNtCs58bv8sHjSTJ_5serde3ser5implsRNtNtCs9VYNaPcKfHq_10serde_json5value5ValueNtB9_9Serialize9serializeQINtNtBK_3ser10SerializerQNtNvXs_BI_BG_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEBK_:
  499|  54.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  500|  54.9k|            where
  501|  54.9k|                S: Serializer,
  502|  54.9k|            {
  503|  54.9k|                (**self).serialize(serializer)
  504|  54.9k|            }

_RINvNtCs58bv8sHjSTJ_5serde3ser17iterator_len_hintINtNtNtCslATUeuPuGvJ_4core5slice4iter4IterNtNtCs9VYNaPcKfHq_10serde_json5value5ValueEEB1v_:
 1939|  37.1k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1940|  37.1k|where
 1941|  37.1k|    I: Iterator,
 1942|  37.1k|{
 1943|  37.1k|    match iter.size_hint() {
 1944|  37.1k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1945|      0|        _ => None,
 1946|       |    }
 1947|  37.1k|}
_RNCINvYQINtNtCs9VYNaPcKfHq_10serde_json3ser10SerializerQNtNvXs_NtBb_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB1a_EE0Bb_:
 1281|  54.9k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYINtNtCs9VYNaPcKfHq_10serde_json3ser8CompoundQNtNvXs_NtB8_5valueNtBT_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeMap15serialize_entryNtNtCshJIxznpEM8j_5alloc6string6StringB14_EB8_:
 1804|  67.9k|    fn serialize_entry<K, V>(&mut self, key: &K, value: &V) -> Result<(), Self::Error>
 1805|  67.9k|    where
 1806|  67.9k|        K: ?Sized + Serialize,
 1807|  67.9k|        V: ?Sized + Serialize,
 1808|  67.9k|    {
 1809|  67.9k|        tri!(self.serialize_key(key));
 1810|  67.9k|        self.serialize_value(value)
 1811|  67.9k|    }
_RINvYQINtNtCs9VYNaPcKfHq_10serde_json3ser10SerializerQNtNvXs_NtB9_5valueNtBX_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer11collect_seqRINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EEB9_:
 1274|  37.1k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1275|  37.1k|    where
 1276|  37.1k|        I: IntoIterator,
 1277|  37.1k|        <I as IntoIterator>::Item: Serialize,
 1278|  37.1k|    {
 1279|  37.1k|        let mut iter = iter.into_iter();
 1280|  37.1k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1281|  37.1k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1282|  37.1k|        serializer.end()
 1283|  37.1k|    }

_RINvXs8_NtCs9VYNaPcKfHq_10serde_json3mapINtB6_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB8_5value5ValueEINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorTBM_B1o_EE9from_iterINtNtNtB1P_8adapters3map3MapINtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map8IntoIterBM_NtNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB4B_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary8RawValueENCNvXB4v_B1o_INtNtB1R_7convert4FromB4t_E4froms_0EEB4B_:
  487|  40.6k|    fn from_iter<T>(iter: T) -> Self
  488|  40.6k|    where
  489|  40.6k|        T: IntoIterator<Item = (String, Value)>,
  490|  40.6k|    {
  491|  40.6k|        Map {
  492|  40.6k|            map: FromIterator::from_iter(iter),
  493|  40.6k|        }
  494|  40.6k|    }
_RNvXsd_NtCs9VYNaPcKfHq_10serde_json3mapRINtB5_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB7_:
  880|  40.6k|    fn into_iter(self) -> Self::IntoIter {
  881|  40.6k|        Iter {
  882|  40.6k|            iter: self.map.iter(),
  883|  40.6k|        }
  884|  40.6k|    }
_RNvXsg_NtCs9VYNaPcKfHq_10serde_json3mapNtB5_4IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB7_:
  511|   108k|            fn next(&mut self) -> Option<Self::Item> {
  512|   108k|                self.iter.next()
  513|   108k|            }
_RNvMNtCs9VYNaPcKfHq_10serde_json3mapINtB2_3MapNtNtCshJIxznpEM8j_5alloc6string6StringNtNtB4_5value5ValueE3lenB4_:
  275|  40.6k|    pub fn len(&self) -> usize {
  276|  40.6k|        self.map.len()
  277|  40.6k|    }

_RNvXsq_NtCs9VYNaPcKfHq_10serde_json6numberNtB5_6NumberINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs8ZpES7bF61F_19fuzz_arbitrary_json:
  755|  4.31k|                fn from(i: $ty) -> Self {
  756|  4.31k|                    let n = {
  757|       |                        #[cfg(not(feature = "arbitrary_precision"))]
  758|       |                        {
  759|  4.31k|                            if i < 0 {
  760|  1.25k|                                N::NegInt(i as i64)
  761|       |                            } else {
  762|  3.06k|                                N::PosInt(i as u64)
  763|       |                            }
  764|       |                        }
  765|       |                        #[cfg(feature = "arbitrary_precision")]
  766|       |                        {
  767|       |                            itoa::Buffer::new().format(i).to_owned()
  768|       |                        }
  769|       |                    };
  770|  4.31k|                    Number { n }
  771|  4.31k|                }
_RINvXs4_NtCs9VYNaPcKfHq_10serde_json6numberNtB6_6NumberNtNtCs58bv8sHjSTJ_5serde3ser9Serialize9serializeQINtNtB8_3ser10SerializerQNtNvXs_NtB8_5valueNtB2a_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB8_:
  372|  10.5k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  373|  10.5k|    where
  374|  10.5k|        S: Serializer,
  375|  10.5k|    {
  376|  10.5k|        match self.n {
  377|  3.06k|            N::PosInt(u) => serializer.serialize_u64(u),
  378|  1.25k|            N::NegInt(i) => serializer.serialize_i64(i),
  379|  6.25k|            N::Float(f) => serializer.serialize_f64(f),
  380|       |        }
  381|  10.5k|    }
_RNvMs1_NtCs9VYNaPcKfHq_10serde_json6numberNtB5_6Number8from_f64B7_:
  264|  6.63k|    pub fn from_f64(f: f64) -> Option<Number> {
  265|  6.63k|        if f.is_finite() {
  266|  6.25k|            let n = {
  267|  6.25k|                #[cfg(not(feature = "arbitrary_precision"))]
  268|  6.25k|                {
  269|  6.25k|                    N::Float(f)
  270|  6.25k|                }
  271|  6.25k|                #[cfg(feature = "arbitrary_precision")]
  272|  6.25k|                {
  273|  6.25k|                    ryu::Buffer::new().format_finite(f).to_owned()
  274|  6.25k|                }
  275|  6.25k|            };
  276|  6.25k|            Some(Number { n })
  277|       |        } else {
  278|    373|            None
  279|       |        }
  280|  6.63k|    }

_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter14end_object_keyQNtNvXs_NtB7_5valueNtB1w_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1881|  67.9k|    fn end_object_key<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1882|  67.9k|    where
 1883|  67.9k|        W: ?Sized + io::Write,
 1884|  67.9k|    {
 1885|  67.9k|        Ok(())
 1886|  67.9k|    }
_RNvXs9_NtCs9VYNaPcKfHq_10serde_json3serINtB5_16MapKeySerializerQNtNvXs_NtB7_5valueNtB17_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_strB7_:
  800|  67.9k|    fn serialize_str(self, value: &str) -> Result<()> {
  801|  67.9k|        self.ser.serialize_str(value)
  802|  67.9k|    }
_RNvXsi_NtCs9VYNaPcKfHq_10serde_json3serNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  458|   122k|#[derive(Eq, PartialEq)]
_RNvMsa_NtCs9VYNaPcKfHq_10serde_json3serNtB5_10CharEscape17from_escape_tableB7_:
 1537|   146k|    fn from_escape_table(escape: u8, byte: u8) -> CharEscape {
 1538|   146k|        match escape {
 1539|    321|            self::BB => CharEscape::Backspace,
 1540|    635|            self::TT => CharEscape::Tab,
 1541|    882|            self::NN => CharEscape::LineFeed,
 1542|    244|            self::FF => CharEscape::FormFeed,
 1543|    692|            self::RR => CharEscape::CarriageReturn,
 1544|  10.1k|            self::QU => CharEscape::Quote,
 1545|    565|            self::BS => CharEscape::ReverseSolidus,
 1546|   133k|            self::UU => CharEscape::AsciiControl(byte),
 1547|      0|            _ => unreachable!(),
 1548|       |        }
 1549|   146k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_seqB7_:
  280|  37.1k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq> {
  281|  37.1k|        tri!(self
  282|  37.1k|            .formatter
  283|  37.1k|            .begin_array(&mut self.writer)
  284|  37.1k|            .map_err(Error::io));
  285|  37.1k|        if len == Some(0) {
  286|  2.93k|            tri!(self
  287|  2.93k|                .formatter
  288|  2.93k|                .end_array(&mut self.writer)
  289|  2.93k|                .map_err(Error::io));
  290|  2.93k|            Ok(Compound::Map {
  291|  2.93k|                ser: self,
  292|  2.93k|                state: State::Empty,
  293|  2.93k|            })
  294|       |        } else {
  295|  34.1k|            Ok(Compound::Map {
  296|  34.1k|                ser: self,
  297|  34.1k|                state: State::First,
  298|  34.1k|            })
  299|       |        }
  300|  37.1k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_u64B7_:
  138|  3.06k|    fn serialize_u64(self, value: u64) -> Result<()> {
  139|  3.06k|        self.formatter
  140|  3.06k|            .write_u64(&mut self.writer, value)
  141|  3.06k|            .map_err(Error::io)
  142|  3.06k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_f64B7_:
  165|  6.25k|    fn serialize_f64(self, value: f64) -> Result<()> {
  166|  6.25k|        match value.classify() {
  167|      0|            FpCategory::Nan | FpCategory::Infinite => self
  168|      0|                .formatter
  169|      0|                .write_null(&mut self.writer)
  170|      0|                .map_err(Error::io),
  171|  6.25k|            _ => self
  172|  6.25k|                .formatter
  173|  6.25k|                .write_f64(&mut self.writer, value)
  174|  6.25k|                .map_err(Error::io),
  175|       |        }
  176|  6.25k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter17begin_array_valueQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1824|  54.9k|    fn begin_array_value<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1825|  54.9k|    where
 1826|  54.9k|        W: ?Sized + io::Write,
 1827|  54.9k|    {
 1828|  54.9k|        if first {
 1829|  34.1k|            Ok(())
 1830|       |        } else {
 1831|  20.7k|            writer.write_all(b",")
 1832|       |        }
 1833|  54.9k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_strB7_:
  186|  75.8k|    fn serialize_str(self, value: &str) -> Result<()> {
  187|  75.8k|        format_escaped_str(&mut self.writer, &mut self.formatter, value).map_err(Error::io)
  188|  75.8k|    }
_RNvXs2_NtCs9VYNaPcKfHq_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeSeq3endB7_:
  511|  37.1k|    fn end(self) -> Result<()> {
  512|  37.1k|        match self {
  513|  37.1k|            Compound::Map { ser, state } => match state {
  514|  2.93k|                State::Empty => Ok(()),
  515|  34.1k|                _ => ser.formatter.end_array(&mut ser.writer).map_err(Error::io),
  516|       |            },
  517|       |            #[cfg(feature = "arbitrary_precision")]
  518|       |            Compound::Number { .. } => unreachable!(),
  519|       |            #[cfg(feature = "raw_value")]
  520|       |            Compound::RawValue { .. } => unreachable!(),
  521|       |        }
  522|  37.1k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter21write_string_fragmentQNtNvXs_NtB7_5valueNtB1D_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1742|  41.0k|    fn write_string_fragment<W>(&mut self, writer: &mut W, fragment: &str) -> io::Result<()>
 1743|  41.0k|    where
 1744|  41.0k|        W: ?Sized + io::Write,
 1745|  41.0k|    {
 1746|  41.0k|        writer.write_all(fragment.as_bytes())
 1747|  41.0k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter11begin_arrayQNtNvXs_NtB7_5valueNtB1t_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1804|  37.1k|    fn begin_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1805|  37.1k|    where
 1806|  37.1k|        W: ?Sized + io::Write,
 1807|  37.1k|    {
 1808|  37.1k|        writer.write_all(b"[")
 1809|  37.1k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_u64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1668|  3.06k|    fn write_u64<W>(&mut self, writer: &mut W, value: u64) -> io::Result<()>
 1669|  3.06k|    where
 1670|  3.06k|        W: ?Sized + io::Write,
 1671|  3.06k|    {
 1672|  3.06k|        let mut buffer = itoa::Buffer::new();
 1673|  3.06k|        let s = buffer.format(value);
 1674|  3.06k|        writer.write_all(s.as_bytes())
 1675|  3.06k|    }
_RNvMs0_NtCs9VYNaPcKfHq_10serde_json3serINtB5_10SerializerQNtNvXs_NtB7_5valueNtB11_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE14with_formatterB7_:
   48|  2.86k|    pub fn with_formatter(writer: W, formatter: F) -> Self {
   49|  2.86k|        Serializer { writer, formatter }
   50|  2.86k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_mapB7_:
  345|  40.6k|    fn serialize_map(self, len: Option<usize>) -> Result<Self::SerializeMap> {
  346|  40.6k|        tri!(self
  347|  40.6k|            .formatter
  348|  40.6k|            .begin_object(&mut self.writer)
  349|  40.6k|            .map_err(Error::io));
  350|  40.6k|        if len == Some(0) {
  351|  3.43k|            tri!(self
  352|  3.43k|                .formatter
  353|  3.43k|                .end_object(&mut self.writer)
  354|  3.43k|                .map_err(Error::io));
  355|  3.43k|            Ok(Compound::Map {
  356|  3.43k|                ser: self,
  357|  3.43k|                state: State::Empty,
  358|  3.43k|            })
  359|       |        } else {
  360|  37.2k|            Ok(Compound::Map {
  361|  37.2k|                ser: self,
  362|  37.2k|                state: State::First,
  363|  37.2k|            })
  364|       |        }
  365|  40.6k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter16begin_object_keyQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1866|  67.9k|    fn begin_object_key<W>(&mut self, writer: &mut W, first: bool) -> io::Result<()>
 1867|  67.9k|    where
 1868|  67.9k|        W: ?Sized + io::Write,
 1869|  67.9k|    {
 1870|  67.9k|        if first {
 1871|  37.2k|            Ok(())
 1872|       |        } else {
 1873|  30.7k|            writer.write_all(b",")
 1874|       |        }
 1875|  67.9k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_stringQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1722|  75.8k|    fn begin_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1723|  75.8k|    where
 1724|  75.8k|        W: ?Sized + io::Write,
 1725|  75.8k|    {
 1726|  75.8k|        writer.write_all(b"\"")
 1727|  75.8k|    }
_RNvMNtCs9VYNaPcKfHq_10serde_json3serINtB2_10SerializerQNtNvXs_NtB4_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterE3newB4_:
   24|  2.86k|    pub fn new(writer: W) -> Self {
   25|  2.86k|        Serializer::with_formatter(writer, CompactFormatter)
   26|  2.86k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_i64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1613|  1.25k|    fn write_i64<W>(&mut self, writer: &mut W, value: i64) -> io::Result<()>
 1614|  1.25k|    where
 1615|  1.25k|        W: ?Sized + io::Write,
 1616|  1.25k|    {
 1617|  1.25k|        let mut buffer = itoa::Buffer::new();
 1618|  1.25k|        let s = buffer.format(value);
 1619|  1.25k|        writer.write_all(s.as_bytes())
 1620|  1.25k|    }
_RINvNtCs9VYNaPcKfHq_10serde_json3ser9to_writerQNtNvXs_NtB4_5valueNtBQ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterB11_EB4_:
 2139|  2.86k|pub fn to_writer<W, T>(writer: W, value: &T) -> Result<()>
 2140|  2.86k|where
 2141|  2.86k|    W: io::Write,
 2142|  2.86k|    T: ?Sized + Serialize,
 2143|  2.86k|{
 2144|  2.86k|    let mut ser = Serializer::new(writer);
 2145|  2.86k|    value.serialize(&mut ser)
 2146|  2.86k|}
_RINvNtCs9VYNaPcKfHq_10serde_json3ser18format_escaped_strQNtNvXs_NtB4_5valueNtB10_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2051|  75.8k|fn format_escaped_str<W, F>(writer: &mut W, formatter: &mut F, value: &str) -> io::Result<()>
 2052|  75.8k|where
 2053|  75.8k|    W: ?Sized + io::Write,
 2054|  75.8k|    F: ?Sized + Formatter,
 2055|  75.8k|{
 2056|  75.8k|    tri!(formatter.begin_string(writer));
 2057|  75.8k|    tri!(format_escaped_str_contents(writer, formatter, value));
 2058|  75.8k|    formatter.end_string(writer)
 2059|  75.8k|}
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_objectQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1857|  40.6k|    fn end_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1858|  40.6k|    where
 1859|  40.6k|        W: ?Sized + io::Write,
 1860|  40.6k|    {
 1861|  40.6k|        writer.write_all(b"}")
 1862|  40.6k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter18begin_object_valueQNtNvXs_NtB7_5valueNtB1A_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1892|  67.9k|    fn begin_object_value<W>(&mut self, writer: &mut W) -> io::Result<()>
 1893|  67.9k|    where
 1894|  67.9k|        W: ?Sized + io::Write,
 1895|  67.9k|    {
 1896|  67.9k|        writer.write_all(b":")
 1897|  67.9k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter17write_char_escapeQNtNvXs_NtB7_5valueNtB1z_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1751|   146k|    fn write_char_escape<W>(&mut self, writer: &mut W, char_escape: CharEscape) -> io::Result<()>
 1752|   146k|    where
 1753|   146k|        W: ?Sized + io::Write,
 1754|   146k|    {
 1755|       |        use self::CharEscape::*;
 1756|       |
 1757|   146k|        let s = match char_escape {
 1758|  10.1k|            Quote => b"\\\"",
 1759|    565|            ReverseSolidus => b"\\\\",
 1760|      0|            Solidus => b"\\/",
 1761|    321|            Backspace => b"\\b",
 1762|    244|            FormFeed => b"\\f",
 1763|    882|            LineFeed => b"\\n",
 1764|    692|            CarriageReturn => b"\\r",
 1765|    635|            Tab => b"\\t",
 1766|   133k|            AsciiControl(byte) => {
 1767|   133k|                static HEX_DIGITS: [u8; 16] = *b"0123456789abcdef";
 1768|   133k|                let bytes = &[
 1769|   133k|                    b'\\',
 1770|   133k|                    b'u',
 1771|   133k|                    b'0',
 1772|   133k|                    b'0',
 1773|   133k|                    HEX_DIGITS[(byte >> 4) as usize],
 1774|   133k|                    HEX_DIGITS[(byte & 0xF) as usize],
 1775|   133k|                ];
 1776|   133k|                return writer.write_all(bytes);
 1777|       |            }
 1778|       |        };
 1779|       |
 1780|  13.5k|        writer.write_all(s)
 1781|   146k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer14serialize_boolB7_:
   76|  11.6k|    fn serialize_bool(self, value: bool) -> Result<()> {
   77|  11.6k|        self.formatter
   78|  11.6k|            .write_bool(&mut self.writer, value)
   79|  11.6k|            .map_err(Error::io)
   80|  11.6k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_nullQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1557|  17.8k|    fn write_null<W>(&mut self, writer: &mut W) -> io::Result<()>
 1558|  17.8k|    where
 1559|  17.8k|        W: ?Sized + io::Write,
 1560|  17.8k|    {
 1561|  17.8k|        writer.write_all(b"null")
 1562|  17.8k|    }
_RINvXs2_NtCs9VYNaPcKfHq_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeSeq17serialize_elementRB1a_EB8_:
  487|  54.9k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  488|  54.9k|    where
  489|  54.9k|        T: ?Sized + Serialize,
  490|  54.9k|    {
  491|  54.9k|        match self {
  492|  54.9k|            Compound::Map { ser, state } => {
  493|  54.9k|                tri!(ser
  494|  54.9k|                    .formatter
  495|  54.9k|                    .begin_array_value(&mut ser.writer, *state == State::First)
  496|  54.9k|                    .map_err(Error::io));
  497|  54.9k|                *state = State::Rest;
  498|  54.9k|                tri!(value.serialize(&mut **ser));
  499|  54.9k|                ser.formatter
  500|  54.9k|                    .end_array_value(&mut ser.writer)
  501|  54.9k|                    .map_err(Error::io)
  502|       |            }
  503|       |            #[cfg(feature = "arbitrary_precision")]
  504|       |            Compound::Number { .. } => unreachable!(),
  505|       |            #[cfg(feature = "raw_value")]
  506|       |            Compound::RawValue { .. } => unreachable!(),
  507|       |        }
  508|  54.9k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter9end_arrayQNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1814|  37.1k|    fn end_array<W>(&mut self, writer: &mut W) -> io::Result<()>
 1815|  37.1k|    where
 1816|  37.1k|        W: ?Sized + io::Write,
 1817|  37.1k|    {
 1818|  37.1k|        writer.write_all(b"]")
 1819|  37.1k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter12begin_objectQNtNvXs_NtB7_5valueNtB1u_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1847|  40.6k|    fn begin_object<W>(&mut self, writer: &mut W) -> io::Result<()>
 1848|  40.6k|    where
 1849|  40.6k|        W: ?Sized + io::Write,
 1850|  40.6k|    {
 1851|  40.6k|        writer.write_all(b"{")
 1852|  40.6k|    }
_RNvXs6_NtCs9VYNaPcKfHq_10serde_json3serINtB5_8CompoundQNtNvXs_NtB7_5valueNtBY_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB5_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeMap3endB7_:
  665|  40.6k|    fn end(self) -> Result<()> {
  666|  40.6k|        match self {
  667|  40.6k|            Compound::Map { ser, state } => match state {
  668|  3.43k|                State::Empty => Ok(()),
  669|  37.2k|                _ => ser.formatter.end_object(&mut ser.writer).map_err(Error::io),
  670|       |            },
  671|       |            #[cfg(feature = "arbitrary_precision")]
  672|       |            Compound::Number { .. } => unreachable!(),
  673|       |            #[cfg(feature = "raw_value")]
  674|       |            Compound::RawValue { .. } => unreachable!(),
  675|       |        }
  676|  40.6k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter15end_array_valueQNtNvXs_NtB7_5valueNtB1x_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1837|  54.9k|    fn end_array_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1838|  54.9k|    where
 1839|  54.9k|        W: ?Sized + io::Write,
 1840|  54.9k|    {
 1841|  54.9k|        Ok(())
 1842|  54.9k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter9write_f64QNtNvXs_NtB7_5valueNtB1q_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1701|  6.25k|    fn write_f64<W>(&mut self, writer: &mut W, value: f64) -> io::Result<()>
 1702|  6.25k|    where
 1703|  6.25k|        W: ?Sized + io::Write,
 1704|  6.25k|    {
 1705|  6.25k|        let mut buffer = ryu::Buffer::new();
 1706|  6.25k|        let s = buffer.format_finite(value);
 1707|  6.25k|        writer.write_all(s.as_bytes())
 1708|  6.25k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter10end_stringQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1732|  75.8k|    fn end_string<W>(&mut self, writer: &mut W) -> io::Result<()>
 1733|  75.8k|    where
 1734|  75.8k|        W: ?Sized + io::Write,
 1735|  75.8k|    {
 1736|  75.8k|        writer.write_all(b"\"")
 1737|  75.8k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer14serialize_unitB7_:
  198|  17.8k|    fn serialize_unit(self) -> Result<()> {
  199|  17.8k|        self.formatter
  200|  17.8k|            .write_null(&mut self.writer)
  201|  17.8k|            .map_err(Error::io)
  202|  17.8k|    }
_RINvXs6_NtCs9VYNaPcKfHq_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeMap15serialize_valueB1a_EB8_:
  642|  67.9k|    fn serialize_value<T>(&mut self, value: &T) -> Result<()>
  643|  67.9k|    where
  644|  67.9k|        T: ?Sized + Serialize,
  645|  67.9k|    {
  646|  67.9k|        match self {
  647|  67.9k|            Compound::Map { ser, .. } => {
  648|  67.9k|                tri!(ser
  649|  67.9k|                    .formatter
  650|  67.9k|                    .begin_object_value(&mut ser.writer)
  651|  67.9k|                    .map_err(Error::io));
  652|  67.9k|                tri!(value.serialize(&mut **ser));
  653|  67.9k|                ser.formatter
  654|  67.9k|                    .end_object_value(&mut ser.writer)
  655|  67.9k|                    .map_err(Error::io)
  656|       |            }
  657|       |            #[cfg(feature = "arbitrary_precision")]
  658|       |            Compound::Number { .. } => unreachable!(),
  659|       |            #[cfg(feature = "raw_value")]
  660|       |            Compound::RawValue { .. } => unreachable!(),
  661|       |        }
  662|  67.9k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter16end_object_valueQNtNvXs_NtB7_5valueNtB1y_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1901|  67.9k|    fn end_object_value<W>(&mut self, _writer: &mut W) -> io::Result<()>
 1902|  67.9k|    where
 1903|  67.9k|        W: ?Sized + io::Write,
 1904|  67.9k|    {
 1905|  67.9k|        Ok(())
 1906|  67.9k|    }
_RNvXs1_NtCs9VYNaPcKfHq_10serde_json3serQINtB5_10SerializerQNtNvXs_NtB7_5valueNtB12_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterENtNtCs58bv8sHjSTJ_5serde3ser10Serializer13serialize_i64B7_:
  104|  1.25k|    fn serialize_i64(self, value: i64) -> Result<()> {
  105|  1.25k|        self.formatter
  106|  1.25k|            .write_i64(&mut self.writer, value)
  107|  1.25k|            .map_err(Error::io)
  108|  1.25k|    }
_RINvYNtNtCs9VYNaPcKfHq_10serde_json3ser16CompactFormatterNtB5_9Formatter10write_boolQNtNvXs_NtB7_5valueNtB1s_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEB7_:
 1566|  11.6k|    fn write_bool<W>(&mut self, writer: &mut W, value: bool) -> io::Result<()>
 1567|  11.6k|    where
 1568|  11.6k|        W: ?Sized + io::Write,
 1569|  11.6k|    {
 1570|  11.6k|        let s = if value {
 1571|  8.90k|            b"true" as &[u8]
 1572|       |        } else {
 1573|  2.72k|            b"false" as &[u8]
 1574|       |        };
 1575|  11.6k|        writer.write_all(s)
 1576|  11.6k|    }
_RINvXs6_NtCs9VYNaPcKfHq_10serde_json3serINtB6_8CompoundQNtNvXs_NtB8_5valueNtBZ_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB6_16CompactFormatterENtNtCs58bv8sHjSTJ_5serde3ser12SerializeMap13serialize_keyNtNtCshJIxznpEM8j_5alloc6string6StringEB8_:
  616|  67.9k|    fn serialize_key<T>(&mut self, key: &T) -> Result<()>
  617|  67.9k|    where
  618|  67.9k|        T: ?Sized + Serialize,
  619|  67.9k|    {
  620|  67.9k|        match self {
  621|  67.9k|            Compound::Map { ser, state } => {
  622|  67.9k|                tri!(ser
  623|  67.9k|                    .formatter
  624|  67.9k|                    .begin_object_key(&mut ser.writer, *state == State::First)
  625|  67.9k|                    .map_err(Error::io));
  626|  67.9k|                *state = State::Rest;
  627|       |
  628|  67.9k|                tri!(key.serialize(MapKeySerializer { ser: *ser }));
  629|       |
  630|  67.9k|                ser.formatter
  631|  67.9k|                    .end_object_key(&mut ser.writer)
  632|  67.9k|                    .map_err(Error::io)
  633|       |            }
  634|       |            #[cfg(feature = "arbitrary_precision")]
  635|       |            Compound::Number { .. } => unreachable!(),
  636|       |            #[cfg(feature = "raw_value")]
  637|       |            Compound::RawValue { .. } => unreachable!(),
  638|       |        }
  639|  67.9k|    }
_RINvNtCs9VYNaPcKfHq_10serde_json3ser27format_escaped_str_contentsQNtNvXs_NtB4_5valueNtB19_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterNtB2_16CompactFormatterEB4_:
 2061|  75.8k|fn format_escaped_str_contents<W, F>(
 2062|  75.8k|    writer: &mut W,
 2063|  75.8k|    formatter: &mut F,
 2064|  75.8k|    value: &str,
 2065|  75.8k|) -> io::Result<()>
 2066|  75.8k|where
 2067|  75.8k|    W: ?Sized + io::Write,
 2068|  75.8k|    F: ?Sized + Formatter,
 2069|  75.8k|{
 2070|  75.8k|    let bytes = value.as_bytes();
 2071|  75.8k|
 2072|  75.8k|    let mut start = 0;
 2073|       |
 2074|   301k|    for (i, &byte) in bytes.iter().enumerate() {
 2075|   301k|        let escape = ESCAPE[byte as usize];
 2076|   301k|        if escape == 0 {
 2077|   155k|            continue;
 2078|   146k|        }
 2079|   146k|
 2080|   146k|        if start < i {
 2081|  23.2k|            tri!(formatter.write_string_fragment(writer, &value[start..i]));
 2082|   123k|        }
 2083|       |
 2084|   146k|        let char_escape = CharEscape::from_escape_table(escape, byte);
 2085|   146k|        tri!(formatter.write_char_escape(writer, char_escape));
 2086|       |
 2087|   146k|        start = i + 1;
 2088|       |    }
 2089|       |
 2090|  75.8k|    if start == bytes.len() {
 2091|  57.9k|        return Ok(());
 2092|  17.8k|    }
 2093|  17.8k|
 2094|  17.8k|    formatter.write_string_fragment(writer, &value[start..])
 2095|  75.8k|}

_RNvXsf_NtNtCs9VYNaPcKfHq_10serde_json5value4fromNtB7_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromxE4fromCs8ZpES7bF61F_19fuzz_arbitrary_json:
   12|  4.31k|                fn from(n: $ty) -> Self {
   13|  4.31k|                    Value::Number(n.into())
   14|  4.31k|                }
_RNvXs_NtNtCs9VYNaPcKfHq_10serde_json5value4fromNtB6_5ValueINtNtCslATUeuPuGvJ_4core7convert4FromdE4from:
   59|  6.63k|    fn from(f: f64) -> Self {
   60|  6.63k|        Number::from_f64(f).map_or(Value::Null, Value::Number)
   61|  6.63k|    }

_RNvXs_NtCs9VYNaPcKfHq_10serde_json5valueNtB4_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
  222|  2.86k|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  223|  2.86k|        struct WriterFormatter<'a, 'b: 'a> {
  224|  2.86k|            inner: &'a mut fmt::Formatter<'b>,
  225|  2.86k|        }
  226|  2.86k|
  227|  2.86k|        impl<'a, 'b> io::Write for WriterFormatter<'a, 'b> {
  228|  2.86k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|  2.86k|                // Safety: the serializer below only emits valid utf8 when using
  230|  2.86k|                // the default formatter.
  231|  2.86k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|  2.86k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|  2.86k|                Ok(buf.len())
  234|  2.86k|            }
  235|  2.86k|
  236|  2.86k|            fn flush(&mut self) -> io::Result<()> {
  237|  2.86k|                Ok(())
  238|  2.86k|            }
  239|  2.86k|        }
  240|  2.86k|
  241|  2.86k|        fn io_error(_: fmt::Error) -> io::Error {
  242|  2.86k|            // Error value does not matter because Display impl just maps it
  243|  2.86k|            // back to fmt::Error.
  244|  2.86k|            io::Error::new(io::ErrorKind::Other, "fmt error")
  245|  2.86k|        }
  246|  2.86k|
  247|  2.86k|        let alternate = f.alternate();
  248|  2.86k|        let mut wr = WriterFormatter { inner: f };
  249|  2.86k|        if alternate {
  250|       |            // {:#}
  251|      0|            super::ser::to_writer_pretty(&mut wr, self).map_err(|_| fmt::Error)
  252|       |        } else {
  253|       |            // {}
  254|  2.86k|            super::ser::to_writer(&mut wr, self).map_err(|_| fmt::Error)
  255|       |        }
  256|  2.86k|    }
_RNvXNvXs_NtCs9VYNaPcKfHq_10serde_json5valueNtB7_5ValueNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtNtB2_15WriterFormatterNtNtCs9a1gyOJxq9I_3std2io5Write5write:
  228|   654k|            fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  229|   654k|                // Safety: the serializer below only emits valid utf8 when using
  230|   654k|                // the default formatter.
  231|   654k|                let s = unsafe { str::from_utf8_unchecked(buf) };
  232|   654k|                tri!(self.inner.write_str(s).map_err(io_error));
  233|   654k|                Ok(buf.len())
  234|   654k|            }

_RINvXNtNtCs9VYNaPcKfHq_10serde_json5value3serNtB5_5ValueNtNtCs58bv8sHjSTJ_5serde3ser9Serialize9serializeQINtNtB7_3ser10SerializerQNtNvXs_B5_BH_NtNtCslATUeuPuGvJ_4core3fmt7Display3fmt15WriterFormatterEEB7_:
   13|   125k|    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
   14|   125k|    where
   15|   125k|        S: ::serde::Serializer,
   16|   125k|    {
   17|   125k|        match self {
   18|  17.8k|            Value::Null => serializer.serialize_unit(),
   19|  11.6k|            Value::Bool(b) => serializer.serialize_bool(*b),
   20|  10.5k|            Value::Number(n) => n.serialize(serializer),
   21|  7.85k|            Value::String(s) => serializer.serialize_str(s),
   22|  37.1k|            Value::Array(v) => v.serialize(serializer),
   23|       |            #[cfg(any(feature = "std", feature = "alloc"))]
   24|  40.6k|            Value::Object(m) => {
   25|       |                use serde::ser::SerializeMap;
   26|  40.6k|                let mut map = tri!(serializer.serialize_map(Some(m.len())));
   27|   108k|                for (k, v) in m {
   28|  67.9k|                    tri!(map.serialize_entry(k, v));
   29|       |                }
   30|  40.6k|                map.end()
   31|       |            }
   32|       |            #[cfg(not(any(feature = "std", feature = "alloc")))]
   33|       |            Value::Object(_) => unreachable!(),
   34|       |        }
   35|   125k|    }

_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2117|  2.06k|    fn drop(&mut self) {
 2118|  2.06k|        unsafe {
 2119|  2.06k|            if self.spilled() {
 2120|     95|                let (ptr, &mut len) = self.data.heap_mut();
 2121|     95|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  1.97k|            } else {
 2123|  1.97k|                ptr::drop_in_place(&mut self[..]);
 2124|  1.97k|            }
 2125|       |        }
 2126|  2.06k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2117|  33.6k|    fn drop(&mut self) {
 2118|  33.6k|        unsafe {
 2119|  33.6k|            if self.spilled() {
 2120|  2.96k|                let (ptr, &mut len) = self.data.heap_mut();
 2121|  2.96k|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  30.7k|            } else {
 2123|  30.7k|                ptr::drop_in_place(&mut self[..]);
 2124|  30.7k|            }
 2125|       |        }
 2126|  33.6k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8is_emptyCs8ZpES7bF61F_19fuzz_arbitrary_json:
  958|    738|    pub fn is_empty(&self) -> bool {
  959|    738|        self.len() == 0
  960|    738|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2455|  37.9k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  37.9k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  37.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
  952|    738|    pub fn len(&self) -> usize {
  953|    738|        self.triple().1
  954|    738|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7spilledCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1001|  93.9k|    pub fn spilled(&self) -> bool {
 1002|  93.9k|        self.capacity > Self::inline_capacity()
 1003|  93.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8capacityCs8ZpES7bF61F_19fuzz_arbitrary_json:
  964|     95|    pub fn capacity(&self) -> usize {
  965|     95|        self.triple().2
  966|     95|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1845|  28.7k|    fn deref(&self) -> &[A::Item] {
 1846|  28.7k|        unsafe {
 1847|  28.7k|            let (ptr, len, _) = self.triple();
 1848|  28.7k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  28.7k|        }
 1850|  28.7k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E7spilledCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1001|  98.1k|    pub fn spilled(&self) -> bool {
 1002|  98.1k|        self.capacity > Self::inline_capacity()
 1003|  98.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  641|  30.7k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  30.7k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  30.7k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E6inlineCs8ZpES7bF61F_19fuzz_arbitrary_json:
  637|  21.2k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  21.2k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  21.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E3lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
  952|    738|    pub fn len(&self) -> usize {
  953|    738|        self.triple().1
  954|    738|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2420|   162k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7spilledCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1001|   104k|    pub fn spilled(&self) -> bool {
 1002|   104k|        self.capacity > Self::inline_capacity()
 1003|   104k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE6as_ptrCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2459|  28.7k|    fn as_ptr(self) -> *const T {
 2460|  28.7k|        self.0.as_ptr()
 2461|  28.7k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
  952|    190|    pub fn len(&self) -> usize {
  953|    190|        self.triple().1
  954|    190|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2117|  33.6k|    fn drop(&mut self) {
 2118|  33.6k|        unsafe {
 2119|  33.6k|            if self.spilled() {
 2120|    383|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    383|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  33.3k|            } else {
 2123|  33.3k|                ptr::drop_in_place(&mut self[..]);
 2124|  33.3k|            }
 2125|       |        }
 2126|  33.6k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1855|  33.3k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  33.3k|        unsafe {
 1857|  33.3k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  33.3k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  33.3k|        }
 1860|  33.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E6tripleCs8ZpES7bF61F_19fuzz_arbitrary_json:
  971|  32.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  32.8k|        unsafe {
  973|  32.8k|            if self.spilled() {
  974|  11.6k|                let (ptr, len) = self.data.heap();
  975|  11.6k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  21.2k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  32.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E4pushCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1114|  35.4k|    pub fn push(&mut self, value: A::Item) {
 1115|  35.4k|        unsafe {
 1116|  35.4k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  35.4k|            if *len == cap {
 1118|     95|                self.reserve_one_unchecked();
 1119|     95|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|     95|                ptr = heap_ptr;
 1121|     95|                len = heap_len;
 1122|  35.4k|            }
 1123|  35.4k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  35.4k|            *len += 1;
 1125|  35.4k|        }
 1126|  35.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8is_emptyCs8ZpES7bF61F_19fuzz_arbitrary_json:
  958|    738|    pub fn is_empty(&self) -> bool {
  959|    738|        self.len() == 0
  960|    738|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E10inline_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  641|  42.5k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  42.5k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  42.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E4heapCs8ZpES7bF61F_19fuzz_arbitrary_json:
  655|  11.6k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  11.6k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  11.6k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2035|  1.97k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  1.97k|        &mut (&mut **self)[index]
 2037|  1.97k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8heap_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  659|    383|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|    383|        let h = &mut self.heap;
  661|    383|        (h.0, &mut h.1)
  662|    383|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  984|  30.7k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  30.7k|        unsafe {
  986|  30.7k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  30.7k|                (
  991|  30.7k|                    self.data.inline_mut(),
  992|  30.7k|                    &mut self.capacity,
  993|  30.7k|                    Self::inline_capacity(),
  994|  30.7k|                )
  995|       |            }
  996|       |        }
  997|  30.7k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1225|     95|    fn reserve_one_unchecked(&mut self) {
 1226|     95|        debug_assert_eq!(self.len(), self.capacity());
 1227|     95|        let new_cap = self.len()
 1228|     95|            .checked_add(1)
 1229|     95|            .and_then(usize::checked_next_power_of_two)
 1230|     95|            .expect("capacity overflow");
 1231|     95|        infallible(self.try_grow(new_cap))
 1232|     95|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  659|  2.96k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  2.96k|        let h = &mut self.heap;
  661|  2.96k|        (h.0, &mut h.1)
  662|  2.96k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameE6as_ptrCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2459|  32.6k|    fn as_ptr(self) -> *const T {
 2460|  32.6k|        self.0.as_ptr()
 2461|  32.6k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs8ZpES7bF61F_19fuzz_arbitrary_json:
  318|     95|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|     95|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|     95|}
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameECs8ZpES7bF61F_19fuzz_arbitrary_json:
  328|     95|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|     95|    let size = mem::size_of::<T>()
  330|     95|        .checked_mul(n)
  331|     95|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|     95|    let align = mem::align_of::<T>();
  333|     95|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|     95|}
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1855|  30.7k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  30.7k|        unsafe {
 1857|  30.7k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  30.7k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  30.7k|        }
 1860|  30.7k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2035|  33.3k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  33.3k|        &mut (&mut **self)[index]
 2037|  33.3k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFrameE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2455|  21.2k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  21.2k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  21.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6inlineCs8ZpES7bF61F_19fuzz_arbitrary_json:
  637|  37.9k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  37.9k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  37.9k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2455|  29.5k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  29.5k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  29.5k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1845|  32.6k|    fn deref(&self) -> &[A::Item] {
 1846|  32.6k|        unsafe {
 1847|  32.6k|            let (ptr, len, _) = self.triple();
 1848|  32.6k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  32.6k|        }
 1850|  32.6k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1855|  1.97k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  1.97k|        unsafe {
 1857|  1.97k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  1.97k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  1.97k|        }
 1860|  1.97k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6inlineCs8ZpES7bF61F_19fuzz_arbitrary_json:
  637|  29.5k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  29.5k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  29.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E15inline_capacityCs8ZpES7bF61F_19fuzz_arbitrary_json:
  926|   176k|    fn inline_capacity() -> usize {
  927|   176k|        if mem::size_of::<A::Item>() > 0 {
  928|   176k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   176k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10triple_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  984|  33.3k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  33.3k|        unsafe {
  986|  33.3k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  33.3k|                (
  991|  33.3k|                    self.data.inline_mut(),
  992|  33.3k|                    &mut self.capacity,
  993|  33.3k|                    Self::inline_capacity(),
  994|  33.3k|                )
  995|       |            }
  996|       |        }
  997|  33.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6tripleCs8ZpES7bF61F_19fuzz_arbitrary_json:
  971|  37.9k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  37.9k|        unsafe {
  973|  37.9k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  37.9k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  37.9k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs8ZpES7bF61F_19fuzz_arbitrary_json:
  926|   162k|    fn inline_capacity() -> usize {
  927|   162k|        if mem::size_of::<A::Item>() > 0 {
  928|   162k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   162k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E10triple_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  984|  63.1k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  63.1k|        unsafe {
  986|  63.1k|            if self.spilled() {
  987|  20.5k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  20.5k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  42.5k|                (
  991|  42.5k|                    self.data.inline_mut(),
  992|  42.5k|                    &mut self.capacity,
  993|  42.5k|                    Self::inline_capacity(),
  994|  42.5k|                )
  995|       |            }
  996|       |        }
  997|  63.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityCs8ZpES7bF61F_19fuzz_arbitrary_json:
  926|   154k|    fn inline_capacity() -> usize {
  927|   154k|        if mem::size_of::<A::Item>() > 0 {
  928|   154k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   154k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3popCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1130|  25.5k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  25.5k|        unsafe {
 1132|  25.5k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  25.5k|            let ptr: *const _ = ptr.as_ptr();
 1134|  25.5k|            if *len_ptr == 0 {
 1135|      0|                return None;
 1136|  25.5k|            }
 1137|  25.5k|            let last_index = *len_ptr - 1;
 1138|  25.5k|            *len_ptr = last_index;
 1139|  25.5k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  25.5k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2035|  30.7k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  30.7k|        &mut (&mut **self)[index]
 2037|  30.7k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8heap_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  659|  20.7k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  20.7k|        let h = &mut self.heap;
  661|  20.7k|        (h.0, &mut h.1)
  662|  20.7k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2420|   176k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E9from_heapCs8ZpES7bF61F_19fuzz_arbitrary_json:
  664|     95|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|     95|        SmallVecData { heap: (ptr, len) }
  666|     95|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6tripleCs8ZpES7bF61F_19fuzz_arbitrary_json:
  971|  29.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  29.5k|        unsafe {
  973|  29.5k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  29.5k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  29.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E8try_growCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1173|     95|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|     95|        unsafe {
 1175|     95|            let unspilled = !self.spilled();
 1176|     95|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|     95|            assert!(new_cap >= len);
 1178|     95|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|     95|            } else if new_cap != cap {
 1187|     95|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|     95|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|     95|                if unspilled {
 1191|     95|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|     95|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|     95|                        .cast();
 1194|     95|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|     95|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|     95|                self.capacity = new_cap;
 1208|      0|            }
 1209|     95|            Ok(())
 1210|       |        }
 1211|     95|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1845|  37.2k|    fn deref(&self) -> &[A::Item] {
 1846|  37.2k|        unsafe {
 1847|  37.2k|            let (ptr, len, _) = self.triple();
 1848|  37.2k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  37.2k|        }
 1850|  37.2k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE6as_ptrCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2459|  37.2k|    fn as_ptr(self) -> *const T {
 2460|  37.2k|        self.0.as_ptr()
 2461|  37.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10inline_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  641|  33.3k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  33.3k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  33.3k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeCs8ZpES7bF61F_19fuzz_arbitrary_json:
 2420|   154k|                fn size() -> usize { $size }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5H_9Minimizer18process_superstates_0EEB1F_:
 2052|  43.5k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  43.5k|        let mut v = SmallVec::new();
 2054|  43.5k|        v.extend(iterable);
 2055|  43.5k|        v
 2056|  43.5k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2459|  43.5k|    fn as_ptr(self) -> *const T {
 2460|  43.5k|        self.0.as_ptr()
 2461|  43.5k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBO_:
 2117|  2.86k|    fn drop(&mut self) {
 2118|  2.86k|        unsafe {
 2119|  2.86k|            if self.spilled() {
 2120|    229|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    229|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  2.63k|            } else {
 2123|  2.63k|                ptr::drop_in_place(&mut self[..]);
 2124|  2.63k|            }
 2125|       |        }
 2126|  2.86k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  645|  2.06k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.06k|        SmallVecData {
  647|  2.06k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.06k|        }
  649|  2.06k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E21reserve_one_uncheckedBM_:
 1225|  3.70k|    fn reserve_one_unchecked(&mut self) {
 1226|  3.70k|        debug_assert_eq!(self.len(), self.capacity());
 1227|  3.70k|        let new_cap = self.len()
 1228|  3.70k|            .checked_add(1)
 1229|  3.70k|            .and_then(usize::checked_next_power_of_two)
 1230|  3.70k|            .expect("capacity overflow");
 1231|  3.70k|        infallible(self.try_grow(new_cap))
 1232|  3.70k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEEB1z_:
  328|    795|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|    795|    let size = mem::size_of::<T>()
  330|    795|        .checked_mul(n)
  331|    795|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|    795|    let align = mem::align_of::<T>();
  333|    795|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|    795|}
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2420|   572k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  926|  2.06k|    fn inline_capacity() -> usize {
  927|  2.06k|        if mem::size_of::<A::Item>() > 0 {
  928|  2.06k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|  2.06k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE3newB1I_:
 2455|  42.7k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  42.7k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  42.7k|    }
_RNvXsP_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs8dUjriG0K0U_8rsonpath:
 2357|  87.0k|    fn drop(&mut self) {
 2358|  87.0k|        *self.len = self.local_len;
 2359|  87.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E9from_heapBR_:
  664|  3.70k|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|  3.70k|        SmallVecData { heap: (ptr, len) }
  666|  3.70k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11inline_sizeB1E_:
  946|  2.86k|    pub fn inline_size(&self) -> usize {
  947|  2.86k|        Self::inline_capacity()
  948|  2.86k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2035|  2.63k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  2.63k|        &mut (&mut **self)[index]
 2037|  2.63k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5x_9Minimizer18process_superstates_0EEB1F_:
 2060|  43.5k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  43.5k|        let mut iter = iterable.into_iter();
 2062|  43.5k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  43.5k|        self.reserve(lower_size_bound);
 2064|  43.5k|
 2065|  43.5k|        unsafe {
 2066|  43.5k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  43.5k|            let ptr = ptr.as_ptr();
 2068|  43.5k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  65.7k|            while len.get() < cap {
 2070|  61.8k|                if let Some(out) = iter.next() {
 2071|  22.2k|                    ptr::write(ptr.add(len.get()), out);
 2072|  22.2k|                    len.increment_len(1);
 2073|  22.2k|                } else {
 2074|  39.5k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|  3.92k|        for elem in iter {
 2080|      0|            self.push(elem);
 2081|      0|        }
 2082|  43.5k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2060|  43.5k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  43.5k|        let mut iter = iterable.into_iter();
 2062|  43.5k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  43.5k|        self.reserve(lower_size_bound);
 2064|  43.5k|
 2065|  43.5k|        unsafe {
 2066|  43.5k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  43.5k|            let ptr = ptr.as_ptr();
 2068|  43.5k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  83.2k|            while len.get() < cap {
 2070|  71.9k|                if let Some(out) = iter.next() {
 2071|  39.7k|                    ptr::write(ptr.add(len.get()), out);
 2072|  39.7k|                    len.increment_len(1);
 2073|  39.7k|                } else {
 2074|  32.2k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|  15.6k|        for elem in iter {
 2080|  4.40k|            self.push(elem);
 2081|  4.40k|        }
 2082|  43.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8heap_mutBR_:
  659|  5.18k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  5.18k|        let h = &mut self.heap;
  661|  5.18k|        (h.0, &mut h.1)
  662|  5.18k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBM_:
 1845|  43.5k|    fn deref(&self) -> &[A::Item] {
 1846|  43.5k|        unsafe {
 1847|  43.5k|            let (ptr, len, _) = self.triple();
 1848|  43.5k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  43.5k|        }
 1850|  43.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  779|  2.86k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.86k|        assert!(
  783|  2.86k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.86k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.86k|        SmallVec {
  787|  2.86k|            capacity: 0,
  788|  2.86k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.86k|        }
  790|  2.86k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBM_:
 1855|  58.1k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  58.1k|        unsafe {
 1857|  58.1k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  58.1k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  58.1k|        }
 1860|  58.1k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256EBJ_:
  328|  1.55k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  1.55k|    let size = mem::size_of::<T>()
  330|  1.55k|        .checked_mul(n)
  331|  1.55k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  1.55k|    let align = mem::align_of::<T>();
  333|  1.55k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  1.55k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E4heapBR_:
  655|  3.79k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  3.79k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  3.79k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2035|  58.1k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  58.1k|        &mut (&mut **self)[index]
 2037|  58.1k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E3newBS_:
 2455|    687|    fn new(ptr: *const T) -> Option<Self> {
 2456|    687|        NonNull::new(ptr as *mut T).map(Self)
 2457|    687|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1219|  43.5k|    pub fn reserve(&mut self, additional: usize) {
 1220|  43.5k|        infallible(self.try_reserve(additional))
 1221|  43.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  984|  96.0k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  96.0k|        unsafe {
  986|  96.0k|            if self.spilled() {
  987|  63.8k|                let (ptr, len_ptr) = self.data.heap_mut();
  988|  63.8k|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  32.2k|                (
  991|  32.2k|                    self.data.inline_mut(),
  992|  32.2k|                    &mut self.capacity,
  993|  32.2k|                    Self::inline_capacity(),
  994|  32.2k|                )
  995|       |            }
  996|       |        }
  997|  96.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1130|  46.3k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  46.3k|        unsafe {
 1132|  46.3k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  46.3k|            let ptr: *const _ = ptr.as_ptr();
 1134|  46.3k|            if *len_ptr == 0 {
 1135|  2.80k|                return None;
 1136|  43.5k|            }
 1137|  43.5k|            let last_index = *len_ptr - 1;
 1138|  43.5k|            *len_ptr = last_index;
 1139|  43.5k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  46.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1114|  46.1k|    pub fn push(&mut self, value: A::Item) {
 1115|  46.1k|        unsafe {
 1116|  46.1k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  46.1k|            if *len == cap {
 1118|    894|                self.reserve_one_unchecked();
 1119|    894|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|    894|                ptr = heap_ptr;
 1121|    894|                len = heap_len;
 1122|  45.2k|            }
 1123|  46.1k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  46.1k|            *len += 1;
 1125|  46.1k|        }
 1126|  46.1k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeB1p_:
 2420|   533k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8try_growBO_:
 1173|    894|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    894|        unsafe {
 1175|    894|            let unspilled = !self.spilled();
 1176|    894|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    894|            assert!(new_cap >= len);
 1178|    894|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    894|            } else if new_cap != cap {
 1187|    894|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    894|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    894|                if unspilled {
 1191|    229|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    229|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    229|                        .cast();
 1194|    229|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|    665|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|    665|                    let new_ptr =
 1201|    665|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|    665|                    new_alloc = NonNull::new(new_ptr)
 1203|    665|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|    665|                        .cast();
 1205|       |                }
 1206|    894|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    894|                self.capacity = new_cap;
 1208|      0|            }
 1209|    894|            Ok(())
 1210|       |        }
 1211|    894|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  984|   153k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   153k|        unsafe {
  986|   153k|            if self.spilled() {
  987|    792|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    792|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   152k|                (
  991|   152k|                    self.data.inline_mut(),
  992|   152k|                    &mut self.capacity,
  993|   152k|                    Self::inline_capacity(),
  994|   152k|                )
  995|       |            }
  996|       |        }
  997|   153k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefB1E_:
 1845|  43.5k|    fn deref(&self) -> &[A::Item] {
 1846|  43.5k|        unsafe {
 1847|  43.5k|            let (ptr, len, _) = self.triple();
 1848|  43.5k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  43.5k|        }
 1850|  43.5k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutB1E_:
 1855|  58.4k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  58.4k|        unsafe {
 1857|  58.4k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  58.4k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  58.4k|        }
 1860|  58.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8try_growBM_:
 1173|  3.70k|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|  3.70k|        unsafe {
 1175|  3.70k|            let unspilled = !self.spilled();
 1176|  3.70k|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|  3.70k|            assert!(new_cap >= len);
 1178|  3.70k|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|  3.70k|            } else if new_cap != cap {
 1187|  3.70k|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|  3.70k|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|  3.70k|                if unspilled {
 1191|  3.65k|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|  3.65k|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|  3.65k|                        .cast();
 1194|  3.65k|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|     45|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|     45|                    let new_ptr =
 1201|     45|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|     45|                    new_alloc = NonNull::new(new_ptr)
 1203|     45|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|     45|                        .cast();
 1205|       |                }
 1206|  3.70k|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|  3.70k|                self.capacity = new_cap;
 1208|      0|            }
 1209|  3.70k|            Ok(())
 1210|       |        }
 1211|  3.70k|    }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2052|  43.5k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  43.5k|        let mut v = SmallVec::new();
 2054|  43.5k|        v.extend(iterable);
 2055|  43.5k|        v
 2056|  43.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3lenBM_:
  952|  7.40k|    pub fn len(&self) -> usize {
  953|  7.40k|        self.triple().1
  954|  7.40k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E4heapB1J_:
  655|    795|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    795|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    795|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7reserveB1E_:
 1219|  43.5k|    pub fn reserve(&mut self, additional: usize) {
 1220|  43.5k|        infallible(self.try_reserve(additional))
 1221|  43.5k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBM_:
 2096|  46.1k|    fn default() -> SmallVec<A> {
 2097|  46.1k|        SmallVec::new()
 2098|  46.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11from_inlineB1J_:
  645|  92.5k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  92.5k|        SmallVecData {
  647|  92.5k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  92.5k|        }
  649|  92.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E3newBO_:
  779|  2.06k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  2.06k|        assert!(
  783|  2.06k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  2.06k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  2.06k|        SmallVec {
  787|  2.06k|            capacity: 0,
  788|  2.06k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  2.06k|        }
  790|  2.06k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs8dUjriG0K0U_8rsonpath:
  318|  91.5k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|  91.5k|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|  91.5k|}
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEE6as_ptrB1I_:
 2459|  43.5k|    fn as_ptr(self) -> *const T {
 2460|  43.5k|        self.0.as_ptr()
 2461|  43.5k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionEBH_:
  328|  3.74k|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|  3.74k|    let size = mem::size_of::<T>()
  330|  3.74k|        .checked_mul(n)
  331|  3.74k|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|  3.74k|    let align = mem::align_of::<T>();
  333|  3.74k|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|  3.74k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  645|  92.5k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  92.5k|        SmallVecData {
  647|  92.5k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  92.5k|        }
  649|  92.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E6inlineBT_:
  637|    687|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|    687|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|    687|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  971|  54.6k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  54.6k|        unsafe {
  973|  54.6k|            if self.spilled() {
  974|  3.79k|                let (ptr, len) = self.data.heap();
  975|  3.79k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  50.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  54.6k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E3newB1E_:
  779|  92.5k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  92.5k|        assert!(
  783|  92.5k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  92.5k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  92.5k|        SmallVec {
  787|  92.5k|            capacity: 0,
  788|  92.5k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  92.5k|        }
  790|  92.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E9from_heapB1J_:
  664|    795|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    795|        SmallVecData { heap: (ptr, len) }
  666|    795|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  641|   152k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   152k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   152k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11inline_sizeBM_:
  946|  2.86k|    pub fn inline_size(&self) -> usize {
  947|  2.86k|        Self::inline_capacity()
  948|  2.86k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E8capacityBM_:
  964|  3.70k|    pub fn capacity(&self) -> usize {
  965|  3.70k|        self.triple().2
  966|  3.70k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  946|  2.86k|    pub fn inline_size(&self) -> usize {
  947|  2.86k|        Self::inline_capacity()
  948|  2.86k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  926|   139k|    fn inline_capacity() -> usize {
  927|   139k|        if mem::size_of::<A::Item>() > 0 {
  928|   139k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   139k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E11try_reserveB1E_:
 1237|  43.5k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  43.5k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  43.5k|        // calls to it from callers.
 1240|  43.5k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  43.5k|        if cap - len >= additional {
 1242|  42.7k|            return Ok(());
 1243|    795|        }
 1244|    795|        let new_cap = len
 1245|    795|            .checked_add(additional)
 1246|    795|            .and_then(usize::checked_next_power_of_two)
 1247|    795|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|    795|        self.try_grow(new_cap)
 1249|  43.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  926|   480k|    fn inline_capacity() -> usize {
  927|   480k|        if mem::size_of::<A::Item>() > 0 {
  928|   480k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   480k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6tripleB1E_:
  971|  43.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  43.5k|        unsafe {
  973|  43.5k|            if self.spilled() {
  974|    795|                let (ptr, len) = self.data.heap();
  975|    795|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  42.7k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  43.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10inline_mutB1J_:
  641|   145k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|   145k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|   145k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropB1E_:
 2117|  58.8k|    fn drop(&mut self) {
 2118|  58.8k|        unsafe {
 2119|  58.8k|            if self.spilled() {
 2120|    412|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    412|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  58.4k|            } else {
 2123|  58.4k|                ptr::drop_in_place(&mut self[..]);
 2124|  58.4k|            }
 2125|       |        }
 2126|  58.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E21reserve_one_uncheckedBO_:
 1225|    894|    fn reserve_one_unchecked(&mut self) {
 1226|    894|        debug_assert_eq!(self.len(), self.capacity());
 1227|    894|        let new_cap = self.len()
 1228|    894|            .checked_add(1)
 1229|    894|            .and_then(usize::checked_next_power_of_two)
 1230|    894|            .expect("capacity overflow");
 1231|    894|        infallible(self.try_grow(new_cap))
 1232|    894|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutB1E_:
 2035|  58.4k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  58.4k|        &mut (&mut **self)[index]
 2037|  58.4k|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2420|  4.13k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1237|  43.5k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  43.5k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  43.5k|        // calls to it from callers.
 1240|  43.5k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  43.5k|        if cap - len >= additional {
 1242|  43.5k|            return Ok(());
 1243|      0|        }
 1244|      0|        let new_cap = len
 1245|      0|            .checked_add(additional)
 1246|      0|            .and_then(usize::checked_next_power_of_two)
 1247|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|      0|        self.try_grow(new_cap)
 1249|  43.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E15inline_capacityB1E_:
  926|   441k|    fn inline_capacity() -> usize {
  927|   441k|        if mem::size_of::<A::Item>() > 0 {
  928|   441k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   441k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E10triple_mutB1E_:
  984|   146k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|   146k|        unsafe {
  986|   146k|            if self.spilled() {
  987|    795|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    795|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|   145k|                (
  991|   145k|                    self.data.inline_mut(),
  992|   145k|                    &mut self.capacity,
  993|   145k|                    Self::inline_capacity(),
  994|   145k|                )
  995|       |            }
  996|       |        }
  997|   146k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBM_:
 2117|  58.8k|    fn drop(&mut self) {
 2118|  58.8k|        unsafe {
 2119|  58.8k|            if self.spilled() {
 2120|    691|                let (ptr, &mut len) = self.data.heap_mut();
 2121|    691|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  58.1k|            } else {
 2123|  58.1k|                ptr::drop_in_place(&mut self[..]);
 2124|  58.1k|            }
 2125|       |        }
 2126|  58.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  637|  50.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  50.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  50.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  946|  2.06k|    pub fn inline_size(&self) -> usize {
  947|  2.06k|        Self::inline_capacity()
  948|  2.06k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop13increment_lenCs8dUjriG0K0U_8rsonpath:
 2350|  61.9k|    fn increment_len(&mut self, increment: usize) {
 2351|  61.9k|        self.local_len += increment;
 2352|  61.9k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8heap_mutB1J_:
  659|  1.20k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  1.20k|        let h = &mut self.heap;
  661|  1.20k|        (h.0, &mut h.1)
  662|  1.20k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  641|  32.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  32.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  32.2k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBO_:
 1855|  2.63k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  2.63k|        unsafe {
 1857|  2.63k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  2.63k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  2.63k|        }
 1860|  2.63k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3getCs8dUjriG0K0U_8rsonpath:
 2345|   210k|    fn get(&self) -> usize {
 2346|   210k|        self.local_len
 2347|   210k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2455|  50.8k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  50.8k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  50.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E7spilledB1E_:
 1001|   249k|    pub fn spilled(&self) -> bool {
 1002|   249k|        self.capacity > Self::inline_capacity()
 1003|   249k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8heap_mutBT_:
  659|  64.9k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|  64.9k|        let h = &mut self.heap;
  661|  64.9k|        (h.0, &mut h.1)
  662|  64.9k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E4heapBT_:
  655|  1.99k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|  1.99k|        (ConstNonNull(self.heap.0), self.heap.1)
  657|  1.99k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  645|  2.86k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  2.86k|        SmallVecData {
  647|  2.86k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  2.86k|        }
  649|  2.86k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E6inlineB1J_:
  637|  42.7k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  42.7k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  42.7k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3newCs8dUjriG0K0U_8rsonpath:
 2337|  87.0k|    fn new(len: &'a mut usize) -> Self {
 2338|  87.0k|        SetLenOnDrop {
 2339|  87.0k|            local_len: *len,
 2340|  87.0k|            len,
 2341|  87.0k|        }
 2342|  87.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E9from_heapBT_:
  664|    894|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|    894|        SmallVecData { heap: (ptr, len) }
  666|    894|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E4pushBM_:
 1114|  4.40k|    pub fn push(&mut self, value: A::Item) {
 1115|  4.40k|        unsafe {
 1116|  4.40k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  4.40k|            if *len == cap {
 1118|  3.70k|                self.reserve_one_unchecked();
 1119|  3.70k|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|  3.70k|                ptr = heap_ptr;
 1121|  3.70k|                len = heap_len;
 1122|  3.70k|            }
 1123|  4.40k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  4.40k|            *len += 1;
 1125|  4.40k|        }
 1126|  4.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_E8try_growB1E_:
 1173|    795|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|    795|        unsafe {
 1175|    795|            let unspilled = !self.spilled();
 1176|    795|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|    795|            assert!(new_cap >= len);
 1178|    795|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|    795|            } else if new_cap != cap {
 1187|    795|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|    795|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|    795|                if unspilled {
 1191|    795|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|    795|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|    795|                        .cast();
 1194|    795|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|    795|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|    795|                self.capacity = new_cap;
 1208|      0|            }
 1209|    795|            Ok(())
 1210|       |        }
 1211|    795|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E6tripleBO_:
  971|  2.68k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  2.68k|        unsafe {
  973|  2.68k|            if self.spilled() {
  974|  1.99k|                let (ptr, len) = self.data.heap();
  975|  1.99k|                (ptr, len, self.capacity)
  976|       |            } else {
  977|    687|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  2.68k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E8capacityBO_:
  964|    894|    pub fn capacity(&self) -> usize {
  965|    894|        self.triple().2
  966|    894|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1001|   270k|    pub fn spilled(&self) -> bool {
 1002|   270k|        self.capacity > Self::inline_capacity()
 1003|   270k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E3lenBO_:
  952|  1.78k|    pub fn len(&self) -> usize {
  953|  1.78k|        self.triple().1
  954|  1.78k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1001|   102k|    pub fn spilled(&self) -> bool {
 1002|   102k|        self.capacity > Self::inline_capacity()
 1003|   102k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs8dUjriG0K0U_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  779|  92.5k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  92.5k|        assert!(
  783|  92.5k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  92.5k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  92.5k|        SmallVec {
  787|  92.5k|            capacity: 0,
  788|  92.5k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  92.5k|        }
  790|  92.5k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultB1E_:
 2096|  46.1k|    fn default() -> SmallVec<A> {
 2097|  46.1k|        SmallVec::new()
 2098|  46.1k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2420|   142k|                fn size() -> usize { $size }

_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE8positionBH_E0BN_:
   80|  25.1M|        self.keys.iter().position(|k| key == k)
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE12contains_keyBF_EBL_:
   83|   112k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|   112k|        self.position(key).is_some()
   85|   112k|    }
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8positionBH_E0B1C_:
   80|  18.9k|        self.keys.iter().position(|k| key == k)
_RNvXs8_CsEjgspSwkHp_10vector_mapINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1C_:
  307|  43.5k|    fn into_iter(self) -> Self::IntoIter {
  308|  43.5k|        IntoIter {
  309|  43.5k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  43.5k|        }
  311|  43.5k|    }
_RNvXsr_CsEjgspSwkHp_10vector_mapINtB5_7IterMutRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1D_:
  494|  65.8k|            fn next(&mut self) -> Option<Self::Item> {
  495|  65.8k|                self.iter.next()
  496|  65.8k|            }
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE8positionBF_EBL_:
   79|   315k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   315k|        self.keys.iter().position(|k| key == k)
   81|   315k|    }
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8positionBF_EB1A_:
   79|  49.8k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  49.8k|        self.keys.iter().position(|k| key == k)
   81|  49.8k|    }
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE8positionBF_EBL_:
   79|   150k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|   150k|        self.keys.iter().position(|k| key == k)
   81|   150k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3new0BM_:
   41|  2.86k|    #[post(ret.len() == 0)]
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBN_3nfa10NfaStateIdE3getBJ_E00BP_:
   90|  33.4k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E6insert0B1B_:
   99|  22.3k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE13with_capacity0BM_:
   49|  2.86k|    #[post(ret.len() == 0)]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE6insert0BM_:
   99|  49.0k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs7_CsEjgspSwkHp_10vector_mapQINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1D_:
  299|  43.5k|    fn into_iter(self) -> Self::IntoIter {
  300|  43.5k|        self.iter_mut()
  301|  43.5k|    }
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E7get_mutBJ_E00B1E_:
   96|  5.18k|        self.position(key).map(move |p| &mut self.values[p])
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E13with_capacity0B1B_:
   49|  43.5k|    #[post(ret.len() == 0)]
_RNvXs4_CsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBH_E5indexBN_:
  277|   153k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|   153k|        self.get(key).unwrap()
  279|   153k|    }
_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1E_:
  322|  65.7k|    fn next(&mut self) -> Option<(K, V)> {
  323|  65.7k|        self.iter.next()
  324|  65.7k|    }
_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintB1E_:
  326|  43.5k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  43.5k|        self.iter.size_hint()
  328|  43.5k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE6insert0BM_:
   99|   114k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBI_5state5StateE3lenBK_:
   60|  46.2k|    pub fn len(&self) -> usize {
   61|  46.2k|        self.keys.len()
   62|  46.2k|    }
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE8positionBH_E0BN_:
   80|  12.2M|        self.keys.iter().position(|k| key == k)
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE13with_capacity0BM_:
   49|  2.86k|    #[post(ret.len() == 0)]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E3new0B1B_:
   41|  43.5k|    #[post(ret.len() == 0)]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE3new0BM_:
   41|  2.86k|    #[post(ret.len() == 0)]
_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256E8iter_mutB1z_:
  175|  43.5k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  43.5k|        IterMut {
  177|  43.5k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  43.5k|        }
  179|  43.5k|    }
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_set11SmallSet256NtNtBN_5state5StateE3getBJ_E00BP_:
   90|   153k|        self.position(key).map(|p| &self.values[p])


_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  350|  35.2k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  351|  35.2k|        self[state].attributes.has_transition_to_accepting()
  352|  35.2k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  328|  9.58k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  329|  9.58k|        let state = &self[state];
  330|  9.58k|        state.attributes.has_array_transition_to_accepting()
  331|  4.35k|            && state
  332|  4.35k|                .array_transitions()
  333|  4.35k|                .iter()
  334|  4.35k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
  335|  9.58k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  367|  34.8k|    pub fn is_rejecting(&self, state: State) -> bool {
  368|  34.8k|        self[state].attributes.is_rejecting()
  369|  34.8k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton13initial_state:
  248|  4.13k|    pub fn initial_state(&self) -> State {
  249|  4.13k|        State(1)
  250|  4.13k|    }
_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  414|  28.7k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  415|  28.7k|        &self.array_transitions
  416|  28.7k|    }
_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  404|   141k|    pub fn fallback_state(&self) -> State {
  405|   141k|        self.fallback_state
  406|   141k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition12target_state:
  108|  88.4k|    pub(crate) fn target_state(&self) -> State {
  109|  88.4k|        self.target
  110|  88.4k|    }
_RNvMs7_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  424|  37.2k|    pub fn member_transitions(&self) -> &[MemberTransition<'q>] {
  425|  37.2k|        &self.member_transitions
  426|  37.2k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  187|  2.80k|    pub fn is_select_root_query(&self) -> bool {
  188|  2.80k|        self.states.len() == 2
  189|    738|            && self.states[1].array_transitions.is_empty()
  190|    738|            && self.states[1].member_transitions.is_empty()
  191|    738|            && self.states[1].fallback_state == State(0)
  192|    738|            && self.states[1].attributes.is_accepting()
  193|  2.80k|    }
_RNCNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB7_9Automaton39has_array_index_transition_to_accepting0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  334|  4.80k|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton45has_first_array_index_transition_to_accepting:
  307|  6.65k|    pub fn has_first_array_index_transition_to_accepting(&self, state: State) -> bool {
  308|  6.65k|        self.has_array_index_transition_to_accepting(state, &JsonUInt::ZERO)
  309|  6.65k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  161|  2.86k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  162|  2.86k|        let nfa = NondeterministicAutomaton::new(query)?;
  163|      0|        debug!("NFA: {}", nfa);
  164|  2.86k|        Automaton::minimize(nfa)
  165|  2.86k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton29has_any_array_item_transition:
  282|  47.5k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  283|  47.5k|        self[state].attributes.has_array_transition()
  284|  47.5k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  218|  2.06k|    pub fn is_empty_query(&self) -> bool {
  219|  2.06k|        self.states.len() == 2
  220|      0|            && self.states[1].array_transitions.is_empty()
  221|      0|            && self.states[1].member_transitions.is_empty()
  222|      0|            && self.states[1].fallback_state == State(0)
  223|      0|            && !self.states[1].attributes.is_accepting()
  224|  2.06k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  265|   159k|    pub fn is_accepting(&self, state: State) -> bool {
  266|   159k|        self[state].attributes.is_accepting()
  267|   159k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  388|  30.3k|    pub fn is_unitary(&self, state: State) -> bool {
  389|  30.3k|        self[state].attributes.is_unitary()
  390|  30.3k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition7matches:
  113|  11.2k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  114|  11.2k|        self.label.matches(index)
  115|  11.2k|    }
_RNvXs1_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
   97|   520k|    fn index(&self, index: State) -> &Self::Output {
   98|   520k|        &self.states[index.0 as usize]
   99|   520k|    }
_RNvMs6_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_9Automaton8minimize:
  392|  2.86k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  393|  2.86k|        minimizer::minimize(nfa)
  394|  2.86k|    }
_RNvMsa_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_11SimpleSlice3newB7_:
  516|  3.41k|    fn new(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Self {
  517|  3.41k|        Self { start, end, step }
  518|  3.41k|    }
_RNvMs3_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabel7matches:
  119|  11.2k|    pub(crate) fn matches(&self, index: JsonUInt) -> bool {
  120|  11.2k|        match self {
  121|  11.2k|            Self::Index(i) => index.eq(i),
  122|      0|            Self::Slice(s) => s.contains(index),
  123|       |        }
  124|  11.2k|    }
_RNvMs2_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_15ArrayTransition3newB7_:
  103|  44.1k|    pub(crate) fn new(label: ArrayTransitionLabel, target: State) -> Self {
  104|  44.1k|        Self { label, target }
  105|  44.1k|    }
_RNvXNtCs8dUjriG0K0U_8rsonpath9automatonNtB2_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB4_:
   64|  46.1k|    fn default() -> Self {
   65|  46.1k|        Self {
   66|  46.1k|            attributes: StateAttributes::default(),
   67|  46.1k|            member_transitions: SmallVec::default(),
   68|  46.1k|            array_transitions: SmallVec::default(),
   69|  46.1k|            fallback_state: State(0),
   70|  46.1k|        }
   71|  46.1k|    }
_RNvMs3_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabel20matches_at_most_once:
  126|    188|    fn matches_at_most_once(&self) -> bool {
  127|    188|        match self {
  128|    188|            Self::Index(_) => true,
  129|      0|            Self::Slice(slice) => {
  130|      0|                slice.step == JsonUInt::ZERO && slice.end.map_or(false, |end| slice.start.as_u64() + 1 >= end.as_u64())
  131|       |            }
  132|       |        }
  133|    188|    }
_RNvXs4_NtCs8dUjriG0K0U_8rsonpath9automatonNtB5_20ArrayTransitionLabelINtNtCslATUeuPuGvJ_4core7convert4FromNtNtCsmyidsRPtaf_15rsonpath_syntax3num8JsonUIntE4from:
  139|  6.16k|    fn from(index: JsonUInt) -> Self {
  140|  6.16k|        Self::Index(index)
  141|  6.16k|    }

_RNvXs7_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSetNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   67|  6.78k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  152|  87.6k|    fn next(&mut self) -> Option<Self::Item> {
  153|  87.6k|        let (label, transition) = self.transitions.next()?;
  154|  44.1k|        Some(match label {
  155|  40.6k|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  156|      0|            LinearSet::BoundedSlice(start, end, step) => (
  157|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  158|      0|                transition.target,
  159|      0|            ),
  160|  3.41k|            LinearSet::OpenEndedSlice(start, step) => (
  161|  3.41k|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  162|  3.41k|                transition.target,
  163|  3.41k|            ),
  164|       |        })
  165|  87.6k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet12overlap_with:
  210|  36.1k|    fn overlap_with(&self, other: &Self) -> Option<Self> {
  211|  36.1k|        // Assume the first set starts not-later, otherwise flip.
  212|  36.1k|        if self.start() > other.start() {
  213|  12.6k|            return other.overlap_with(self);
  214|  23.4k|        }
  215|  23.4k|        // Empty sets are discarded on construction.
  216|  23.4k|        assert_ne!(self.step().as_u64(), 0);
  217|  23.4k|        assert_ne!(other.step().as_u64(), 0);
  218|       |
  219|       |        // First we take both sets as if they are open-ended and linear.
  220|       |        // We can take an overlap under that assumption and then simply apply the lower of the two end constraints,
  221|       |        // if any, to obtain the ultimate result.
  222|       |        //
  223|       |        // If first_element is beyond the range of JsonUInt it will fail conversion at the end of this function,
  224|       |        // and result in an empty set (empty transition = no transition). This is correct behavior - first element
  225|       |        // out of bounds means there are no valid elements.
  226|  23.4k|        let (first_element, gcd) = find_first_element(
  227|  23.4k|            self.start().into(),
  228|  23.4k|            self.step().into(),
  229|  23.4k|            other.start().into(),
  230|  23.4k|            other.step().into(),
  231|  23.4k|        )?;
  232|       |        // Perform the min of ends where None is treated as larger than everything.
  233|  23.4k|        let end = match (self.end_exclusive(), other.end_exclusive()) {
  234|  11.4k|            (None, Some(x)) | (Some(x), None) => Some(x),
  235|  4.69k|            (None, None) => None,
  236|  7.27k|            (Some(x), Some(y)) => Some(std::cmp::min(x, y)),
  237|       |        };
  238|       |        // This can also overflow both JsonUInt and u64. We saturate and then convert to JsonUInt.
  239|       |        // A step that fails this conversion is essentially infinite, which means we need to emit a set containing only the
  240|       |        // first_element.
  241|  23.4k|        let common_step = (self.step().as_u64() / gcd).saturating_mul(other.step().as_u64());
  242|       |
  243|  23.4k|        let start = JsonUInt::try_from(first_element).ok()?;
  244|       |
  245|  23.4k|        return match JsonUInt::try_from(common_step).ok() {
  246|  23.4k|            Some(step) => Self::from_slice(start, end, step),
  247|      0|            None if end.map_or(false, |end| end <= start) => None,
  248|      0|            None => Some(Self::Singleton(start)),
  249|       |        };
  250|       |
  251|       |        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  252|       |            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  253|       |            // Clearly b \in S2 and every +l step is in S2.
  254|       |            // Now the difference between b and the next element of S1 is given by:
  255|       |            //     c = k - (b - a) mod k
  256|       |            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  257|       |            //
  258|       |            // To get a common element we need to apply +l steps until we land in S1.
  259|       |            // We get the following equation:
  260|       |            //     c + lx = 0 mod k
  261|       |            // or
  262|       |            //     lx = -c mod k
  263|       |            //
  264|       |            // This is a linear congruence which has a known algorithm using extended Euclid.
  265|       |            let c = umod(k - (b - a), k);
  266|       |            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  267|       |            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  268|       |        }
  269|  36.1k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet4stepB9_:
  285|   140k|    fn step(&self) -> JsonUInt {
  286|   140k|        match self {
  287|   137k|            Self::Singleton(_) => JsonUInt::ONE,
  288|  3.22k|            Self::BoundedSlice(_, _, s) | Self::OpenEndedSlice(_, s) => *s,
  289|       |        }
  290|   140k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet13end_exclusive:
  277|  46.8k|    fn end_exclusive(&self) -> Option<JsonUInt> {
  278|  46.8k|        match self {
  279|  45.8k|            Self::Singleton(i) => JsonUInt::try_from(i.as_u64() + 1).ok(),
  280|      0|            Self::BoundedSlice(_, i, _) => Some(*i),
  281|  1.07k|            Self::OpenEndedSlice(_, _) => None,
  282|       |        }
  283|  46.8k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set15extended_euclid:
  330|  23.4k|fn extended_euclid(a: i64, b: i64) -> (i64, i64) {
  331|  23.4k|    let (mut old_r, mut r) = (a, b);
  332|  23.4k|    let (mut old_x, mut x) = (1, 0);
  333|       |
  334|  46.8k|    while r != 0 {
  335|  23.4k|        let quotient = old_r / r;
  336|  23.4k|        (old_r, r) = (r, old_r - quotient * r);
  337|  23.4k|        (old_x, x) = (x, old_x - quotient * x);
  338|  23.4k|    }
  339|       |
  340|  23.4k|    (old_x, old_r)
  341|  23.4k|}
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set23solve_linear_congruence:
  309|  23.4k|fn solve_linear_congruence(a: i64, b: i64, m: i64) -> Option<(i64, u64)> {
  310|  23.4k|    // If gcd(a, m) does not divide b mod m, then there are no solutions.
  311|  23.4k|    // Otherwise, find the (x,y) that solve ax - my = gcd(a, m)
  312|  23.4k|    // and take x*(b/gcd(a,m)) mod (m/gcd(a,m)) as the solution.
  313|  23.4k|    //
  314|  23.4k|    // Note that there may be multiple solutions if gcd(a, m) > 1,
  315|  23.4k|    // but this always gives the smallest one.
  316|  23.4k|    let b = umod(b, m);
  317|  23.4k|    let (x, gcd) = extended_euclid(a, m);
  318|  23.4k|
  319|  23.4k|    if b % gcd != 0 {
  320|      0|        None
  321|       |    } else {
  322|       |        Some((
  323|  23.4k|            umod(x.checked_mul(b / gcd)?, m / gcd),
  324|  23.4k|            u64::try_from(gcd).expect("negative gcd"),
  325|       |        ))
  326|       |    }
  327|  23.4k|}
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_slice:
  192|  23.4k|    fn from_slice(start: JsonUInt, end: Option<JsonUInt>, step: JsonUInt) -> Option<Self> {
  193|  23.4k|        if step == JsonUInt::ZERO {
  194|      0|            None
  195|  23.4k|        } else if let Some(end) = end {
  196|  18.7k|            if start >= end {
  197|  18.1k|                None
  198|    636|            } else if start.as_u64().saturating_add(step.as_u64()) >= end.as_u64() {
  199|       |                // Only one item within the slice.
  200|    636|                Some(Self::Singleton(start))
  201|       |            } else {
  202|      0|                debug_assert!(end > JsonUInt::ZERO);
  203|      0|                Some(Self::BoundedSlice(start, end, step))
  204|       |            }
  205|       |        } else {
  206|  4.69k|            Some(Self::OpenEndedSlice(start, step))
  207|       |        }
  208|  23.4k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet5startB9_:
  271|   119k|    fn start(&self) -> JsonUInt {
  272|   119k|        match self {
  273|   119k|            Self::Singleton(i) | Self::BoundedSlice(i, _, _) | Self::OpenEndedSlice(i, _) => *i,
  274|   119k|        }
  275|   119k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   79|  43.5k|    pub(super) fn new() -> Self {
   80|  43.5k|        Self {
   81|  43.5k|            transitions: HashMap::new(),
   82|  43.5k|        }
   83|  43.5k|    }
_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  131|  43.5k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  132|  43.5k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  133|  43.5k|        Self {
  134|  43.5k|            transitions: transitions.into_iter(),
  135|  43.5k|        }
  136|  43.5k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet14add_transition0B8_:
   93|  23.4k|            .filter_map(|(other, trans)| {
   94|  23.4k|                let overlap = other.overlap_with(&label)?;
   95|  5.33k|                let priority = trans.priority + 1;
   96|  5.33k|                let mut overlap_target = target;
   97|  5.33k|                overlap_target.union(&trans.target);
   98|  5.33k|
   99|  5.33k|                Some((overlap, LinearSetTransition { priority, target }))
  100|  23.4k|            })
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_9LinearSet10from_label:
  169|  45.4k|    fn from_label(label: ArrayTransitionLabel) -> Option<Self> {
  170|  45.4k|        match label {
  171|  45.4k|            ArrayTransitionLabel::Index(idx) => Some(Self::Singleton(idx)),
  172|      0|            ArrayTransitionLabel::Slice(slice) => {
  173|      0|                if slice.step == JsonUInt::ZERO {
  174|      0|                    None
  175|      0|                } else if let Some(end) = slice.end {
  176|      0|                    if slice.start >= end {
  177|      0|                        None
  178|      0|                    } else if slice.start.as_u64().saturating_add(slice.step.as_u64()) >= end.as_u64() {
  179|       |                        // Only one item within the slice.
  180|      0|                        Some(Self::Singleton(slice.start))
  181|       |                    } else {
  182|      0|                        debug_assert!(end > JsonUInt::ZERO);
  183|      0|                        Some(Self::BoundedSlice(slice.start, end, slice.step))
  184|       |                    }
  185|       |                } else {
  186|      0|                    Some(Self::OpenEndedSlice(slice.start, slice.step))
  187|       |                }
  188|       |            }
  189|       |        }
  190|  45.4k|    }
_RINvXsc_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB6_9LinearSetNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherEBa_:
   67|  52.8k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNCNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB6_26ArrayTransitionSetIterator3new0Ba_:
  132|  16.5k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iter:
  144|  43.5k|    fn into_iter(self) -> Self::IntoIter {
  145|  43.5k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  146|  43.5k|    }
_RNvNvMs2_NtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB7_9LinearSet12overlap_with18find_first_element:
  251|  23.4k|        fn find_first_element(a: i64, k: i64, b: i64, l: i64) -> Option<(i64, u64)> {
  252|  23.4k|            // Now we have two sets, S1=[a::k] and S2=[b::l], a <= b.
  253|  23.4k|            // Clearly b \in S2 and every +l step is in S2.
  254|  23.4k|            // Now the difference between b and the next element of S1 is given by:
  255|  23.4k|            //     c = k - (b - a) mod k
  256|  23.4k|            // (note that this can be zero if b-a is a multiple of k, which makes sense)
  257|  23.4k|            //
  258|  23.4k|            // To get a common element we need to apply +l steps until we land in S1.
  259|  23.4k|            // We get the following equation:
  260|  23.4k|            //     c + lx = 0 mod k
  261|  23.4k|            // or
  262|  23.4k|            //     lx = -c mod k
  263|  23.4k|            //
  264|  23.4k|            // This is a linear congruence which has a known algorithm using extended Euclid.
  265|  23.4k|            let c = umod(k - (b - a), k);
  266|  23.4k|            let (jumps, gcd) = solve_linear_congruence(l, c, k)?;
  267|  23.4k|            Some((jumps.checked_mul(l)?.checked_add(b)?, gcd))
  268|  23.4k|        }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet14add_transition:
   85|  45.4k|    pub(super) fn add_transition(&mut self, label: ArrayTransitionLabel, target: SmallSet256) {
   86|       |        use std::collections::hash_map::Entry;
   87|  45.4k|        let Some(label) = LinearSet::from_label(label) else {
   88|      0|            return;
   89|       |        };
   90|  45.4k|        let overlaps: Vec<_> = self
   91|  45.4k|            .transitions
   92|  45.4k|            .iter()
   93|  45.4k|            .filter_map(|(other, trans)| {
   94|       |                let overlap = other.overlap_with(&label)?;
   95|       |                let priority = trans.priority + 1;
   96|       |                let mut overlap_target = target;
   97|       |                overlap_target.union(&trans.target);
   98|       |
   99|       |                Some((overlap, LinearSetTransition { priority, target }))
  100|  45.4k|            })
  101|  45.4k|            .collect();
  102|       |
  103|  50.7k|        for (label, trans) in overlaps {
  104|  5.33k|            match self.transitions.entry(label) {
  105|  1.92k|                Entry::Occupied(mut entry) => {
  106|  1.92k|                    let entry = entry.get_mut();
  107|  1.92k|                    entry.priority = std::cmp::max(entry.priority, trans.priority);
  108|  1.92k|                    entry.target.union(&trans.target);
  109|  1.92k|                }
  110|  3.41k|                Entry::Vacant(entry) => {
  111|  3.41k|                    entry.insert(trans);
  112|  3.41k|                }
  113|       |            }
  114|       |        }
  115|       |
  116|  45.4k|        match self.transitions.entry(label) {
  117|       |            // Label overlapped (entirely) with some existing label, so it is already handled.
  118|  4.68k|            Entry::Occupied(_) => (),
  119|  40.7k|            Entry::Vacant(entry) => {
  120|  40.7k|                entry.insert(LinearSetTransition { priority: 1, target });
  121|  40.7k|            }
  122|       |        }
  123|  45.4k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_set4umod:
  297|  70.3k|fn umod(x: i64, m: i64) -> i64 {
  298|  70.3k|    assert!(m > 0);
  299|  70.3k|    let k = x % m;
  300|  70.3k|    if k < 0 {
  301|      0|        m + k
  302|       |    } else {
  303|  70.3k|        k
  304|       |    }
  305|  70.3k|}
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  125|  43.5k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  126|  43.5k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  127|  43.5k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton20array_transition_setNtB4_18ArrayTransitionSet10states_mut0B8_:
  126|  44.1k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)

_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  236|  43.5k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  237|  43.5k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  238|  7.89k|            self.checkpoints.insert(superstate, nfa_state);
  239|  7.89k|            Some(nfa_state)
  240|       |        } else {
  241|  35.6k|            self.checkpoints.get(&superstate).copied()
  242|       |        }
  243|  43.5k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   83|  2.86k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   84|  2.86k|        // Rejecting state has no outgoing transitions except for a self-loop.
   85|  2.86k|        self.dfa_states.push(StateTable {
   86|  2.86k|            array_transitions: smallvec![],
   87|  2.86k|            member_transitions: smallvec![],
   88|  2.86k|            fallback_state: Self::rejecting_state(),
   89|  2.86k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   90|  2.86k|        });
   91|  2.86k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   92|  2.86k|
   93|  2.86k|        // Initial superstate is {0}.
   94|  2.86k|        let initial_superstate = [0].into();
   95|  2.86k|        self.activate_if_new(initial_superstate)?;
   96|       |
   97|  46.3k|        while let Some(superstate) = self.active_superstates.pop() {
   98|  43.5k|            self.process_superstate(superstate)?;
   99|       |        }
  100|       |
  101|  2.80k|        Ok(Automaton {
  102|  2.80k|            states: self.dfa_states,
  103|  2.80k|        })
  104|  2.86k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  259|  43.5k|    fn process_nfa_transitions(
  260|  43.5k|        &self,
  261|  43.5k|        current_superstate: SmallSet256,
  262|  43.5k|        current_checkpoint: Option<NfaStateId>,
  263|  43.5k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  264|  43.5k|        let mut wildcard_targets = current_superstate
  265|  43.5k|            .iter()
  266|  43.5k|            .map(NfaStateId)
  267|  43.5k|            .filter_map(|id| match self.nfa[id] {
  268|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  269|       |                    Some(id.next().map(|x| x.0))
  270|       |                }
  271|       |                _ => None,
  272|  43.5k|            })
  273|  43.5k|            .collect::<Result<SmallSet256, _>>()?;
  274|  43.5k|        if let Some(checkpoint) = current_checkpoint {
  275|  41.3k|            wildcard_targets.insert(checkpoint.0);
  276|  41.3k|        }
  277|       |
  278|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  279|       |
  280|  43.5k|        let mut transitions = SuperstateTransitionTable {
  281|  43.5k|            array: ArrayTransitionSet::new(),
  282|  43.5k|            member: VecMap::new(),
  283|  43.5k|            wildcard: wildcard_targets,
  284|  43.5k|        };
  285|       |
  286|   145k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  287|   145k|            match self.nfa[nfa_state] {
  288|       |                // Direct states simply have a single transition to the next state in the NFA.
  289|       |                // Recursive transitions also have a self-loop, but that is handled by the
  290|       |                // checkpoints mechanism - here we only handle the forward transition.
  291|  16.3k|                NfaState::Direct(nfa::Transition::Member(label))
  292|  11.1k|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  293|       |                    debug!(
  294|      0|                        "Considering member transition {nfa_state} --{}-> {}",
  295|      0|                        label.unquoted(),
  296|      0|                        nfa_state.next()?,
  297|       |                    );
  298|       |                    // Add the target NFA state to the target superstate, or create a singleton
  299|       |                    // set if this is the first transition via this label encountered in the loop.
  300|  27.5k|                    if let Some(target) = transitions.member.get_mut(&label) {
  301|  5.18k|                        target.insert(nfa_state.next()?.0);
  302|       |                    } else {
  303|  22.3k|                        let mut new_set = transitions.wildcard;
  304|  22.3k|                        new_set.insert(nfa_state.next()?.0);
  305|  22.3k|                        transitions.member.insert(label, new_set);
  306|       |                    }
  307|       |                }
  308|  19.0k|                NfaState::Direct(nfa::Transition::Array(label))
  309|  26.4k|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  310|       |                    // Array transitions are trickier, as they can have overlap. For example,
  311|       |                    // a transition over [5] overlaps with a transition over [3::2].
  312|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  313|       |                    // to the member case - create a new singleton set with a single transition.
  314|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  315|       |                    // Fortunately, the conflicts can be resolved one at a time.
  316|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  317|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  318|       |                    // The resolution is to have the following transitions:
  319|       |                    //   --t3--> S2+{s1}
  320|       |                    //   --(t1-t3)--> {s1}
  321|       |                    //   --(t2-t3)--> S2
  322|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  323|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  324|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  325|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  326|       |                    //   --t3--> S2+{s1}
  327|       |                    //   --t1--> {s1}
  328|       |                    //   --t2--> S2
  329|       |                    // and make sure the transition over t3 is put before the other two.
  330|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  331|       |                    debug!(
  332|      0|                        "Considering array transition {nfa_state} --{}-> {}",
  333|      0|                        label,
  334|      0|                        nfa_state.next()?,
  335|       |                    );
  336|  45.4k|                    let mut new_set = transitions.wildcard;
  337|  45.4k|                    new_set.insert(nfa_state.next()?.0);
  338|  45.4k|                    transitions.array.add_transition(label, new_set);
  339|       |                }
  340|       |                NfaState::Direct(nfa::Transition::Wildcard)
  341|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  342|  72.8k|                | NfaState::Accepting => (),
  343|       |            }
  344|       |        }
  345|       |
  346|  43.5k|        Ok(transitions)
  347|  43.5k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  351|  43.5k|    fn normalize_superstate_transitions(
  352|  43.5k|        &mut self,
  353|  43.5k|        transitions: &mut SuperstateTransitionTable,
  354|  43.5k|        current_checkpoint: Option<NfaStateId>,
  355|  43.5k|    ) -> Result<(), CompilerError> {
  356|  43.5k|        fn normalize_one(
  357|  43.5k|            this: &mut Minimizer,
  358|  43.5k|            state: &mut SmallSet256,
  359|  43.5k|            current_checkpoint: Option<NfaStateId>,
  360|  43.5k|        ) -> Result<(), CompilerError> {
  361|  43.5k|            if let Some(checkpoint) = current_checkpoint {
  362|  43.5k|                state.insert(checkpoint.0);
  363|  43.5k|            }
  364|  43.5k|
  365|  43.5k|            this.normalize(state);
  366|  43.5k|            this.activate_if_new(*state)?;
  367|  43.5k|
  368|  43.5k|            if let Some(checkpoint) = current_checkpoint {
  369|  43.5k|                this.checkpoints.insert(*state, checkpoint);
  370|  43.5k|            }
  371|  43.5k|
  372|  43.5k|            Ok(())
  373|  43.5k|        }
  374|  43.5k|
  375|  43.5k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  376|  65.8k|        for (_, state) in &mut transitions.member {
  377|  22.3k|            normalize_one(self, state, current_checkpoint)?;
  378|       |        }
  379|  44.1k|        for state in &mut transitions.array.states_mut() {
  380|  44.1k|            normalize_one(self, state, current_checkpoint)?;
  381|       |        }
  382|       |
  383|  43.5k|        Ok(())
  384|  43.5k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer15activate_if_new0B8_:
  119|     60|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess0_0B8_:
  207|  43.0k|            .any(|x| self.accepting.contains(x.target_state().0))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  112|   112k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  113|   112k|        if !self.superstates.contains_key(&superstate) {
  114|  46.2k|            let identifier = self
  115|  46.2k|                .superstates
  116|  46.2k|                .len()
  117|  46.2k|                .try_into()
  118|  46.2k|                .map(DfaStateId)
  119|  46.2k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  120|  46.1k|            self.superstates.insert(superstate, identifier);
  121|  46.1k|            self.active_superstates.push(superstate);
  122|  46.1k|            self.dfa_states.push(StateTable::default());
  123|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  124|  46.1k|            if superstate.contains(self.nfa.accepting_state().0) {
  125|  4.94k|                self.accepting.insert(identifier.0);
  126|  41.2k|            }
  127|  66.6k|        }
  128|       |
  129|   112k|        Ok(())
  130|   112k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_stateB6_:
  106|  92.7k|    fn rejecting_state() -> DfaStateId {
  107|  92.7k|        DfaStateId(0)
  108|  92.7k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributess_0B8_:
  196|  21.3k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  393|   352k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstate0B8_:
  148|  44.1k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  389|   110k|    fn normalize(&self, superstate: &mut SmallSet256) {
  390|   110k|        let furthest_checkpoint = superstate
  391|   110k|            .iter()
  392|   110k|            .map(NfaStateId)
  393|   110k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  394|   110k|            .max();
  395|       |
  396|   110k|        if let Some(cutoff) = furthest_checkpoint {
  397|   107k|            superstate.remove_all_before(cutoff.0);
  398|   107k|        }
  399|   110k|    }
_RNvNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  356|   110k|        fn normalize_one(
  357|   110k|            this: &mut Minimizer,
  358|   110k|            state: &mut SmallSet256,
  359|   110k|            current_checkpoint: Option<NfaStateId>,
  360|   110k|        ) -> Result<(), CompilerError> {
  361|   110k|            if let Some(checkpoint) = current_checkpoint {
  362|   106k|                state.insert(checkpoint.0);
  363|   106k|            }
  364|       |
  365|   110k|            this.normalize(state);
  366|   110k|            this.activate_if_new(*state)?;
  367|       |
  368|   109k|            if let Some(checkpoint) = current_checkpoint {
  369|   106k|                this.checkpoints.insert(*state, checkpoint);
  370|   106k|            }
  371|       |
  372|   109k|            Ok(())
  373|   110k|        }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  174|  43.5k|    fn build_attributes(
  175|  43.5k|        &self,
  176|  43.5k|        id: DfaStateId,
  177|  43.5k|        array_transitions: &[ArrayTransition],
  178|  43.5k|        member_transitions: &[(&JsonString, DfaStateId)],
  179|  43.5k|        fallback: DfaStateId,
  180|  43.5k|    ) -> StateAttributes {
  181|  43.5k|        let mut attrs = StateAttributesBuilder::new();
  182|  43.5k|
  183|  43.5k|        if self.accepting.contains(id.0) {
  184|      0|            debug!("{id} is accepting");
  185|  4.71k|            attrs = attrs.accepting();
  186|  38.7k|        }
  187|  43.5k|        if id == Self::rejecting_state() {
  188|      0|            debug!("{id} is rejecting");
  189|      0|            attrs = attrs.rejecting();
  190|  43.5k|        }
  191|       |
  192|  43.5k|        if self.accepting.contains(fallback.0)
  193|  41.6k|            || array_transitions
  194|  41.6k|                .iter()
  195|  41.6k|                .any(|x| self.accepting.contains(x.target_state().0))
  196|  39.8k|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  197|       |        {
  198|      0|            debug!("{id} has transitions to accepting");
  199|  6.41k|            attrs = attrs.transitions_to_accepting();
  200|  37.0k|        }
  201|  43.5k|        if !array_transitions.is_empty() {
  202|      0|            debug!("{id} has an array index transition");
  203|  28.4k|            attrs = attrs.has_array_transition();
  204|  15.0k|        }
  205|  43.5k|        if array_transitions
  206|  43.5k|            .iter()
  207|  43.5k|            .any(|x| self.accepting.contains(x.target_state().0))
  208|       |        {
  209|      0|            debug!("{id} has an accepting array index transition");
  210|  2.43k|            attrs = attrs.has_array_transition_to_accepting();
  211|  41.0k|        }
  212|       |
  213|       |        // Unitarity check:
  214|       |        // 1. Fallback rejects.
  215|       |        // 2. Only one transition that can match at most one element in a JSON, either:
  216|       |        //   a) member transition; or
  217|       |        //   b) array transition that matches only one index.
  218|  43.5k|        let is_unitary = {
  219|  43.5k|            fallback == Self::rejecting_state()
  220|  1.99k|                && ((member_transitions.len() == 1 && array_transitions.is_empty())
  221|  1.20k|                    || (array_transitions.len() == 1
  222|    188|                        && member_transitions.is_empty()
  223|    188|                        && array_transitions[0].label.matches_at_most_once()))
  224|       |        };
  225|  43.5k|        if is_unitary {
  226|      0|            debug!("{id} is unitary");
  227|    975|            attrs = attrs.unitary();
  228|  42.5k|        }
  229|       |
  230|  43.5k|        attrs.into()
  231|  43.5k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  267|   145k|            .filter_map(|id| match self.nfa[id] {
  268|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  269|  68.1k|                    Some(id.next().map(|x| x.0))
  270|       |                }
  271|  77.6k|                _ => None,
  272|   145k|            })
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer16build_attributes0B8_:
  195|  42.4k|                .any(|x| self.accepting.contains(x.target_state().0))
_RNCNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  269|  68.1k|                    Some(id.next().map(|x| x.0))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  134|  43.5k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  135|  43.5k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  136|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  137|       |
  138|  43.5k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  139|      0|        debug!("Raw transitions: {:?}", transitions);
  140|       |
  141|  43.5k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  142|      0|        debug!("Normalized transitions: {:?}", transitions);
  143|       |
  144|       |        // Translate the transitions to the data model expected by TransitionTable.
  145|  43.5k|        let array_transitions = transitions
  146|  43.5k|            .array
  147|  43.5k|            .into_iter()
  148|  43.5k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  149|  43.5k|            .collect::<SmallVec<_>>();
  150|  43.5k|        let member_transitions = transitions
  151|  43.5k|            .member
  152|  43.5k|            .into_iter()
  153|  43.5k|            .map(|(label, state)| (label, self.superstates[&state]))
  154|  43.5k|            .collect::<SmallVec<_>>();
  155|      0|        debug!("Translated transitions (array): {array_transitions:?}");
  156|      0|        debug!("Translated transitions (member): {member_transitions:?}");
  157|       |
  158|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  159|       |        // Otherwise, we set the fallback to the rejecting state.
  160|  43.5k|        let id = self.superstates[&current_superstate];
  161|  43.5k|        let fallback_state = self.superstates[&transitions.wildcard];
  162|  43.5k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  163|  43.5k|        let table = &mut self.dfa_states[id.0 as usize];
  164|  43.5k|        table.array_transitions = array_transitions;
  165|  43.5k|        table.member_transitions = member_transitions;
  166|  43.5k|        table.fallback_state = fallback_state;
  167|  43.5k|        table.attributes = attributes;
  168|  43.5k|
  169|  43.5k|        Ok(())
  170|  43.5k|    }
_RNCNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB4_9Minimizer18process_superstates_0B8_:
  153|  22.2k|            .map(|(label, state)| (label, self.superstates[&state]))
_RNvNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizer8minimize:
   21|  2.86k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   22|  2.86k|    let minimizer = Minimizer {
   23|  2.86k|        nfa,
   24|  2.86k|        superstates: VecMap::new(),
   25|  2.86k|        checkpoints: VecMap::new(),
   26|  2.86k|        active_superstates: smallvec![],
   27|  2.86k|        dfa_states: vec![],
   28|  2.86k|        accepting: SmallSet256::default(),
   29|  2.86k|    };
   30|  2.86k|
   31|  2.86k|    minimizer.run()
   32|  2.86k|}
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  247|  43.5k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  248|  43.5k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  249|  10.0k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  250|  7.89k|                return Some(single_state);
  251|  2.18k|            }
  252|  33.4k|        }
  253|       |
  254|  35.6k|        None
  255|  43.5k|    }

_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  2.86k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|  2.86k|        use rsonpath_syntax::{Index, Selector};
   72|  2.86k|
   73|  2.86k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   74|  2.86k|            .segments()
   75|  2.86k|            .iter()
   76|  2.86k|            .map(|segment| {
   77|       |                let selectors = segment.selectors();
   78|       |
   79|       |                if selectors.len() > 1 {
   80|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|       |                    let transition = match selectors.first() {
   83|       |                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|       |                        Selector::Slice(slice) => {
   88|       |                            let start = match slice.start() {
   89|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|       |                            }?;
   92|       |                            let end = match slice.end() {
   93|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|       |                                None => Ok(None),
   96|       |                            }?;
   97|       |                            let step = match slice.step() {
   98|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|       |                            }?;
  101|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  102|       |                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|       |                    }?;
  106|       |                    if segment.is_child() {
  107|       |                        Ok(Direct(transition))
  108|       |                    } else {
  109|       |                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  2.86k|            })
  113|  2.86k|            .collect();
  114|  2.86k|        let mut states = states_result?;
  115|       |
  116|  2.86k|        states.push(Accepting);
  117|  2.86k|
  118|  2.86k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  119|  2.86k|        if let Err(err) = accepting_state {
  120|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  121|       |        } else {
  122|  2.86k|            Ok(NondeterministicAutomaton { ordered_states: states })
  123|       |        }
  124|  2.86k|    }
_RNvXst_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB5_10NfaStateIdNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpB9_:
   44|  10.3k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  126|  46.1k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  127|  46.1k|        // CAST: safe because of the check in `new`.
  128|  46.1k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  129|  46.1k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|   141k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|   141k|        self.0
   55|   141k|            .checked_add(1)
   56|   141k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|   141k|            .map(Self)
   58|   141k|    }
_RNCNvMs_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   76|  16.6k|            .map(|segment| {
   77|  16.6k|                let selectors = segment.selectors();
   78|  16.6k|
   79|  16.6k|                if selectors.len() > 1 {
   80|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|  16.6k|                    let transition = match selectors.first() {
   83|  5.97k|                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|  4.47k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|  6.16k|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|      0|                        Selector::Slice(slice) => {
   88|      0|                            let start = match slice.start() {
   89|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|      0|                            }?;
   92|      0|                            let end = match slice.end() {
   93|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|      0|                                None => Ok(None),
   96|      0|                            }?;
   97|      0|                            let step = match slice.step() {
   98|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|      0|                            }?;
  101|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  102|      0|                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|      0|                    }?;
  106|  16.6k|                    if segment.is_child() {
  107|  8.69k|                        Ok(Direct(transition))
  108|       |                    } else {
  109|  7.92k|                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  16.6k|            })
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  135|   653k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  136|   653k|        &self.ordered_states[index.0 as usize]
  137|   653k|    }

_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|   107k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|   107k|        if cutoff < 128 {
  100|   103k|            self.half_1.remove_all_before(cutoff)
  101|  3.17k|        } else {
  102|  3.17k|            self.half_1.clear();
  103|  3.17k|            self.half_2.remove_all_before(cutoff - 128);
  104|  3.17k|        }
  105|   107k|    }
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5unionB9_:
  132|  14.5k|            fn union(&mut self, other: &Self) {
  133|  14.5k|                self.bitmask |= other.bitmask;
  134|  14.5k|            }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE5unionB6_:
   63|  7.25k|    fn union(&mut self, other: &Self) {
   64|  7.25k|        self.half_1.union(&other.half_1);
   65|  7.25k|        self.half_2.union(&other.half_2);
   66|  7.25k|    }
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  43.1k|            fn singleton(&self) -> Option<u8> {
  147|  43.1k|                let elem = self.bitmask.trailing_zeros();
  148|  43.1k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  43.1k|                let remainder = self.bitmask ^ elem_mask;
  150|  43.1k|
  151|  43.1k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  43.1k|                (remainder == 0).then_some(elem as u8)
  153|  43.1k|            }
_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromB8_:
  198|  2.86k|    fn from(arr: [u8; N]) -> Self {
  199|  2.86k|        Self::from_iter(arr)
  200|  2.86k|    }
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_emptyB9_:
  124|  85.7k|            fn is_empty(&self) -> bool {
  125|  85.7k|                self.bitmask == 0
  126|  85.7k|            }
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|   297k|            fn insert(&mut self, elem: u8) {
  129|   297k|                self.bitmask |= 1 << elem;
  130|   297k|            }
_RNvXs7_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   40|  52.1k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs4_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  232|  2.86k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  233|  2.86k|        let mut result = Self::default();
  234|  5.72k|        for elem in iter {
  235|  2.86k|            result.insert(elem);
  236|  2.86k|        }
  237|  2.86k|        result
  238|  2.86k|    }
_RNCNCNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB9_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next00Bd_:
  257|  13.5k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE5clearB9_:
  155|  3.17k|            fn clear(&mut self) {
  156|  3.17k|                self.bitmask = 0;
  157|  3.17k|            }
_RNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  256|   840k|    fn next(&mut self) -> Option<Self::Item> {
  257|   840k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  258|   840k|    }
_RNvXsv_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  110|  38.3M|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iterB9_:
  140|   394k|            fn iter(&self) -> $iter {
  141|   394k|                $iter {
  142|   394k|                    bitmask: self.bitmask,
  143|   394k|                }
  144|   394k|            }
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|   240k|            fn contains(&self, elem: u8) -> bool {
  137|   240k|                (self.bitmask & (1 << elem)) != 0
  138|   240k|            }
_RNvXsq_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  177|  1.05M|            fn next(&mut self) -> Option<Self::Item> {
  178|  1.05M|                let next_elem = self.bitmask.trailing_zeros();
  179|  1.05M|
  180|  1.05M|                if next_elem == $size {
  181|   407k|                    return None;
  182|   643k|                }
  183|   643k|
  184|   643k|                let elem_mask = 1 << next_elem;
  185|   643k|                self.bitmask ^= elem_mask;
  186|   643k|
  187|   643k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|   643k|                Some(next_elem as u8)
  189|  1.05M|            }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|   297k|    fn insert(&mut self, elem: u8) {
   56|   297k|        if elem < 128 {
   57|   288k|            self.half_1.insert(elem)
   58|       |        } else {
   59|  8.49k|            self.half_2.insert(elem - 128)
   60|       |        }
   61|   297k|    }
_RNCNvXs6_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  257|   210k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|   240k|    fn contains(&self, elem: u8) -> bool {
   69|   240k|        if elem < 128 {
   70|   177k|            self.half_1.contains(elem)
   71|       |        } else {
   72|  62.8k|            self.half_2.contains(elem - 128)
   73|       |        }
   74|   240k|    }
_RNvXsr_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
  110|   104k|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXso_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|   107k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|   107k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|   107k|                self.bitmask &= mask;
  162|   107k|            }
_RINvXs4_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  232|  43.5k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  233|  43.5k|        let mut result = Self::default();
  234|   111k|        for elem in iter {
  235|  68.1k|            result.insert(elem);
  236|  68.1k|        }
  237|  43.5k|        result
  238|  43.5k|    }
_RNvXsb_NtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   40|  37.4M|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNCNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB4_11SmallSet256INtB4_8SmallSethE9singleton0B8_:
   85|    728|            self.half_2.singleton().map(|x| x + 128)
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  43.5k|    fn singleton(&self) -> Option<u8> {
   84|  43.5k|        if self.half_1.is_empty() {
   85|  1.37k|            self.half_2.singleton().map(|x| x + 128)
   86|  42.1k|        } else if self.half_2.is_empty() {
   87|  41.8k|            self.half_1.singleton()
   88|       |        } else {
   89|    377|            None
   90|       |        }
   91|  43.5k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB6_:
   76|   197k|    fn iter(&self) -> SmallSet256Iter {
   77|   197k|        SmallSet256Iter {
   78|   197k|            half_1: self.half_1.iter(),
   79|   197k|            half_2: self.half_2.iter(),
   80|   197k|        }
   81|   197k|    }

_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  134|  35.2k|    pub fn has_transition_to_accepting(&self) -> bool {
  135|  35.2k|        self.is_set(StateAttribute::TransitionsToAccepting)
  136|  35.2k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  143|  30.3k|    pub fn is_unitary(&self) -> bool {
  144|  30.3k|        self.is_set(StateAttribute::Unitary)
  145|  30.3k|    }
_RNvXsn_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8ZpES7bF61F_19fuzz_arbitrary_json:
  170|  45.1k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  126|  34.8k|    pub fn is_rejecting(&self) -> bool {
  127|  34.8k|        self.is_set(StateAttribute::Rejecting)
  128|  34.8k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  164|   317k|    fn is_set(&self, attr: StateAttribute) -> bool {
  165|   317k|        (self.0 & attr as u8) != 0
  166|   317k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes33has_array_transition_to_accepting:
  158|  9.58k|    pub fn has_array_transition_to_accepting(&self) -> bool {
  159|  9.58k|        self.is_set(StateAttribute::HasArrayTransitionToAccepting)
  160|  9.58k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  118|   160k|    pub fn is_accepting(&self) -> bool {
  119|   160k|        self.is_set(StateAttribute::Accepting)
  120|   160k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributes20has_array_transition:
  150|  47.5k|    pub fn has_array_transition(&self) -> bool {
  151|  47.5k|        self.is_set(StateAttribute::HasArrayTransition)
  152|  47.5k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3newB6_:
   37|  46.3k|    pub(crate) fn new() -> Self {
   38|  46.3k|        Self {
   39|  46.3k|            attrs: StateAttributes(0),
   40|  46.3k|        }
   41|  46.3k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder33has_array_transition_to_acceptingB6_:
   63|  2.43k|    pub(crate) fn has_array_transition_to_accepting(self) -> Self {
   64|  2.43k|        self.set(StateAttribute::HasArrayTransitionToAccepting)
   65|  2.43k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3setB6_:
   71|  45.8k|    fn set(self, attr: StateAttribute) -> Self {
   72|  45.8k|        Self {
   73|  45.8k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   74|  45.8k|        }
   75|  45.8k|    }
_RNvXsn_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  170|  87.0k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejectingB6_:
   47|  2.86k|    pub(crate) fn rejecting(self) -> Self {
   48|  2.86k|        self.set(StateAttribute::Rejecting)
   49|  2.86k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder7unitaryB6_:
   51|    975|    pub(crate) fn unitary(self) -> Self {
   52|    975|        self.set(StateAttribute::Unitary)
   53|    975|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5buildB6_:
   67|  46.3k|    pub(crate) fn build(self) -> StateAttributes {
   68|  46.3k|        self.attrs
   69|  46.3k|    }
_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   80|  46.3k|    fn from(value: StateAttributesBuilder) -> Self {
   81|  46.3k|        value.build()
   82|  46.3k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9acceptingB6_:
   43|  4.71k|    pub(crate) fn accepting(self) -> Self {
   44|  4.71k|        self.set(StateAttribute::Accepting)
   45|  4.71k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder20has_array_transitionB6_:
   59|  28.4k|    pub(crate) fn has_array_transition(self) -> Self {
   60|  28.4k|        self.set(StateAttribute::HasArrayTransition)
   61|  28.4k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB6_:
   55|  6.41k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   56|  6.41k|        self.set(StateAttribute::TransitionsToAccepting)
   57|  6.41k|    }
_RNvXsj_NtNtCs8dUjriG0K0U_8rsonpath9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   33|  46.1k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]

_RNCNvMNtCs8dUjriG0K0U_8rsonpath14classificationINtB4_21ResumeClassifierStateINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1h_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2J_5MatchEEKj40_EINtNtNtB4_6quotes7avx2_6421Avx2QuoteClassifier64B1c_EyKB45_E7get_idx0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   70|  3.06k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
_RNvMNtCs8dUjriG0K0U_8rsonpath14classificationINtB2_21ResumeClassifierStateINtNtNtB4_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1f_7padding19TwoSidesPaddedInputINtNtNtB4_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2H_5MatchEEKj40_EINtNtNtB2_6quotes7avx2_6421Avx2QuoteClassifier64B1a_EyKB43_E7get_idxCs8ZpES7bF61F_19fuzz_arbitrary_json:
   63|  3.10k|    pub(crate) fn get_idx(&self) -> usize {
   64|       |        debug!(
   65|      0|            "iter offset: {}, block idx: {:?}",
   66|      0|            self.iter.get_offset(),
   67|      0|            self.block.as_ref().map(|b| b.idx)
   68|       |        );
   69|       |
   70|  3.10k|        self.iter.get_offset() + self.block.as_ref().map_or(0, |b| b.idx)
   71|  3.10k|    }

_RINvYNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6411ConstructorNtB7_9DepthImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1G_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB38_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1B_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   89|    581|    fn resume<'i, I, Q>(
   90|    581|        state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>,
   91|    581|        opening: BracketType,
   92|    581|    ) -> DepthIteratorResumeOutcome<'i, I, Q, Self::Classifier<'i, I, Q>, MaskType, BLOCK_SIZE>
   93|    581|    where
   94|    581|        I: InputBlockIterator<'i, BLOCK_SIZE>,
   95|    581|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   96|    581|    {
   97|    581|        let (first_block, iter) =
   98|    581|            <Self::Classifier<'i, I, Q> as DepthIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state, opening);
   99|    581|        DepthIteratorResumeOutcome(first_block, iter)
  100|    581|    }

_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6415new_vector_fromRShECs8ZpES7bF61F_19fuzz_arbitrary_json:
   25|  3.18k|fn new_vector_from<'a, B: InputBlock<'a, SIZE>>(
   26|  3.18k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   27|  3.18k|    classifier: &DelimiterClassifierImpl256,
   28|  3.18k|    idx: usize,
   29|  3.18k|) -> DepthVector64<'a, B> {
   30|  3.18k|    // SAFETY: target_feature invariant
   31|  3.18k|    unsafe { new_avx2(bytes, classifier, idx) }
   32|  3.18k|}
_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_648new_avx2RShECs8ZpES7bF61F_19fuzz_arbitrary_json:
   35|  3.18k|unsafe fn new_avx2<'a, B: InputBlock<'a, SIZE>>(
   36|  3.18k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   37|  3.18k|    classifier: &DelimiterClassifierImpl256,
   38|  3.18k|    start_idx: usize,
   39|  3.18k|) -> DepthVector64<'a, B> {
   40|  3.18k|    let idx_mask = 0xFFFF_FFFF_FFFF_FFFF_u64 << start_idx;
   41|  3.18k|    let (first_block, second_block) = bytes.block.halves();
   42|  3.18k|    let (first_opening_mask, first_closing_mask) = classifier.get_opening_and_closing_masks(first_block);
   43|  3.18k|    let (second_opening_mask, second_closing_mask) = classifier.get_opening_and_closing_masks(second_block);
   44|  3.18k|
   45|  3.18k|    let combined_opening_mask = m64::combine_32(first_opening_mask, second_opening_mask);
   46|  3.18k|    let combined_closing_mask = m64::combine_32(first_closing_mask, second_closing_mask);
   47|  3.18k|
   48|  3.18k|    let opening_mask = combined_opening_mask & (!bytes.within_quotes_mask) & idx_mask;
   49|  3.18k|    let closing_mask = combined_closing_mask & (!bytes.within_quotes_mask) & idx_mask;
   50|  3.18k|
   51|  3.18k|    DepthVector64 {
   52|  3.18k|        quote_classified: bytes,
   53|  3.18k|        opening_mask,
   54|  3.18k|        closing_mask,
   55|  3.18k|        opening_count: opening_mask.count_ones(),
   56|  3.18k|        depth: 0,
   57|  3.18k|        idx: 0,
   58|  3.18k|        phantom: PhantomData,
   59|  3.18k|    }
   60|  3.18k|}
_RNCNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E4stop0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   14|    581|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RNCNvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB6_20Avx2VectorIterator64INtNtNtBc_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1A_7padding19TwoSidesPaddedInputINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB32_5MatchEEKj40_EINtNtNtBa_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBc_16FallibleIterator4next0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   14|  2.73k|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);
_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_6410new_vectorRShECs8ZpES7bF61F_19fuzz_arbitrary_json:
   17|  2.73k|fn new_vector<'a, B: InputBlock<'a, SIZE>>(
   18|  2.73k|    bytes: QuoteClassifiedBlock<B, u64, SIZE>,
   19|  2.73k|    classifier: &DelimiterClassifierImpl256,
   20|  2.73k|) -> DepthVector64<'a, B> {
   21|  2.73k|    new_vector_from(bytes, classifier, 0)
   22|  2.73k|}
_RNCNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB7_20Avx2VectorIterator64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB9_13DepthIteratorB1w_B4u_yKB4p_E6resume0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   14|    578|shared::depth_classifier!(Avx2VectorIterator64, DelimiterClassifierImpl256, DepthVector64, 64, u64);

_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E4stopCs8ZpES7bF61F_19fuzz_arbitrary_json:
   51|    581|            fn stop(self, block: Option<Self::Block>) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
   52|    581|                let block_state = block.and_then(|b| {
   53|       |                    let idx = b.idx;
   54|       |                    debug!("Depth iterator stopping at index {idx}");
   55|       |                    if idx >= b.quote_classified.len() {
   56|       |                        None
   57|       |                    } else {
   58|       |                        Some(ResumeClassifierBlockState {
   59|       |                            block: b.quote_classified,
   60|       |                            idx,
   61|       |                        })
   62|       |                    }
   63|    581|                });
   64|    581|
   65|    581|                ResumeClassifierState {
   66|    581|                    iter: self.iter,
   67|    581|                    block: block_state,
   68|    581|                    are_commas_on: self.were_commas_on,
   69|    581|                    are_colons_on: self.were_colons_on,
   70|    581|                }
   71|    581|            }
_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB5_20Avx2VectorIterator64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1z_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB31_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1u_EEINtB7_13DepthIteratorB1u_B4s_yKB4n_E6resumeCs8ZpES7bF61F_19fuzz_arbitrary_json:
   74|    581|            fn resume(
   75|    581|                state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>,
   76|    581|                opening: BracketType,
   77|    581|            ) -> (Option<Self::Block>, Self) {
   78|    581|                let classifier = $core::new(opening);
   79|    581|                let first_block = state.block.and_then(|b| {
   80|       |                    if b.idx == $size {
   81|       |                        None
   82|       |                    } else {
   83|       |                        Some(new_vector_from(b.block, &classifier, b.idx))
   84|       |                    }
   85|    581|                });
   86|    581|
   87|    581|                (
   88|    581|                    first_block,
   89|    581|                    $name {
   90|    581|                        iter: state.iter,
   91|    581|                        classifier,
   92|    581|                        phantom: PhantomData,
   93|    581|                        were_commas_on: state.are_commas_on,
   94|    581|                        were_colons_on: state.are_colons_on,
   95|    581|                    },
   96|    581|                )
   97|    581|            }
_RNvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth7avx2_64INtB4_20Avx2VectorIterator64INtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1y_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB30_5MatchEEKj40_EINtNtNtB8_6quotes7avx2_6421Avx2QuoteClassifier64B1t_EENtBa_16FallibleIterator4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
   37|  2.73k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   38|  2.73k|                let quote_classified = self.iter.next()?;
   39|  2.73k|                Ok(quote_classified.map(|q| new_vector(q, &self.classifier)))
   40|  2.73k|            }

_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock12depth_at_endCs8ZpES7bF61F_19fuzz_arbitrary_json:
   70|  2.60k|    fn depth_at_end(&self) -> isize {
   71|  2.60k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   72|  2.60k|        (((self.opening_count as i32) - self.closing_mask.count_ones() as i32) + self.depth) as isize
   73|  2.60k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9get_depthCs8ZpES7bF61F_19fuzz_arbitrary_json:
   65|  1.93k|    fn get_depth(&self) -> isize {
   66|  1.93k|        self.depth as isize
   67|  1.93k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30advance_to_next_depth_decreaseCs8ZpES7bF61F_19fuzz_arbitrary_json:
   31|  2.20k|    fn advance_to_next_depth_decrease(&mut self) -> bool {
   32|  2.20k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   33|  2.20k|        let next_closing = self.closing_mask.trailing_zeros() as usize;
   34|  2.20k|
   35|  2.20k|        if next_closing == SIZE {
   36|    264|            return false;
   37|  1.93k|        }
   38|       |
   39|      0|        bin_u64!("opening_mask", self.opening_mask);
   40|      0|        bin_u64!("closing_mask", self.closing_mask);
   41|       |
   42|  1.93k|        self.opening_mask >>= next_closing;
   43|  1.93k|        self.closing_mask >>= next_closing;
   44|  1.93k|        self.opening_mask >>= 1;
   45|  1.93k|        self.closing_mask >>= 1;
   46|       |
   47|      0|        bin_u64!("new opening_mask", self.opening_mask);
   48|      0|        bin_u64!("new closing_mask", self.closing_mask);
   49|       |
   50|  1.93k|        let new_opening_count = self.opening_mask.count_ones() as i32;
   51|  1.93k|        let delta = (self.opening_count as i32) - new_opening_count - 1;
   52|  1.93k|        self.opening_count = new_opening_count as u32;
   53|       |
   54|      0|        debug!("next_closing: {next_closing}");
   55|      0|        debug!("new_opening_count: {new_opening_count}");
   56|      0|        debug!("delta: {delta}");
   57|       |
   58|  1.93k|        self.depth += delta;
   59|  1.93k|        self.idx += next_closing + 1;
   60|  1.93k|
   61|  1.93k|        true
   62|  2.20k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock30estimate_lowest_possible_depthCs8ZpES7bF61F_19fuzz_arbitrary_json:
   81|  3.18k|    fn estimate_lowest_possible_depth(&self) -> isize {
   82|  3.18k|        debug_assert!(is_x86_feature_detected!("popcnt"));
   83|  3.18k|        (self.depth - self.closing_mask.count_ones() as i32) as isize
   84|  3.18k|    }
_RNvXNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared7mask_64INtB2_13DepthVector64RShENtB6_10DepthBlock9add_depthCs8ZpES7bF61F_19fuzz_arbitrary_json:
   76|  3.18k|    fn add_depth(&mut self, depth: isize) {
   77|  3.18k|        self.depth += depth as i32;
   78|  3.18k|    }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612opening_mask:
   23|  6.37k|    unsafe fn opening_mask(&self) -> __m256i {
   24|  6.37k|        _mm256_set1_epi8(self.opening)
   25|  6.37k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25629get_opening_and_closing_masksCs8ZpES7bF61F_19fuzz_arbitrary_json:
   34|  6.37k|    pub(crate) unsafe fn get_opening_and_closing_masks(&self, bytes: &[u8]) -> (u32, u32) {
   35|  6.37k|        assert_eq!(32, bytes.len());
   36|       |        // SAFETY: target_feature invariant
   37|       |        unsafe {
   38|  6.37k|            let byte_vector = _mm256_loadu_si256(bytes.as_ptr().cast::<__m256i>());
   39|  6.37k|            let opening_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.opening_mask());
   40|  6.37k|            let closing_brace_cmp = _mm256_cmpeq_epi8(byte_vector, self.closing_mask());
   41|  6.37k|            let opening_mask = _mm256_movemask_epi8(opening_brace_cmp) as u32;
   42|  6.37k|            let closing_mask = _mm256_movemask_epi8(closing_brace_cmp) as u32;
   43|  6.37k|
   44|  6.37k|            (opening_mask, closing_mask)
   45|  6.37k|        }
   46|  6.37k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl25612closing_mask:
   28|  6.37k|    unsafe fn closing_mask(&self) -> __m256i {
   29|  6.37k|        _mm256_set1_epi8(self.opening + 2)
   30|  6.37k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification5depth6shared10vector_256NtB2_26DelimiterClassifierImpl2563newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   13|    581|    pub(crate) fn new(opening: BracketType) -> Self {
   14|    581|        let opening = match opening {
   15|     73|            BracketType::Square => b'[',
   16|    508|            BracketType::Curly => b'{',
   17|       |        };
   18|       |
   19|    581|        Self { opening: opening as i8 }
   20|    581|    }

_RNvNtNtNtCs8dUjriG0K0U_8rsonpath14classification4mask3m6410combine_32Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   52|  84.6k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  84.6k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  84.6k|    }
_RINvXNtNtCs8dUjriG0K0U_8rsonpath14classification4maskyNtB3_4Mask6is_litjECs8ZpES7bF61F_19fuzz_arbitrary_json:
   11|  2.82k|    fn is_lit<N>(&self, bit: N) -> bool
   12|  2.82k|    where
   13|  2.82k|        Self: Shl<N, Output = Self>,
   14|  2.82k|    {
   15|  2.82k|        (*self & (1 << bit)) != 0
   16|  2.82k|    }

_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB5_22Avx2MemmemClassifier64NtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2f_5MatchEEEINtB7_6MemmemB1x_Kj40_E10find_labelCs8ZpES7bF61F_19fuzz_arbitrary_json:
  168|  4.81k|    fn find_label(
  169|  4.81k|        &mut self,
  170|  4.81k|        first_block: Option<I::Block<'i, SIZE>>,
  171|  4.81k|        start_idx: usize,
  172|  4.81k|        label: &JsonString,
  173|  4.81k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  174|  4.81k|        if let Some(b) = first_block {
  175|  3.78k|            if let Some(res) = shared::find_label_in_first_block(self.input, b, start_idx, label)? {
  176|  2.28k|                return Ok(Some(res));
  177|  1.50k|            }
  178|  1.02k|        }
  179|  2.53k|        let next_block_offset = self.iter.get_offset();
  180|  2.53k|        // SAFETY: target feature invariant
  181|  2.53k|        unsafe { self.find_label_avx2(label, next_block_offset) }
  182|  4.81k|    }
_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE15find_label_avx2Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  124|  2.53k|    unsafe fn find_label_avx2(
  125|  2.53k|        &mut self,
  126|  2.53k|        label: &JsonString,
  127|  2.53k|        mut offset: usize,
  128|  2.53k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
  129|  2.53k|        if label.unquoted().is_empty() {
  130|  1.71k|            return self.find_empty(label, offset);
  131|    817|        } else if label.unquoted().len() == 1 {
  132|    586|            return self.find_letter(label, offset);
  133|    231|        }
  134|    231|
  135|    231|        let classifier =
  136|    231|            vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], label.unquoted().as_bytes()[1]);
  137|    231|        let mut previous_block: u64 = 0;
  138|       |
  139|  1.69k|        while let Some(block) = self.iter.next().e()? {
  140|  1.58k|            let (block1, block2) = block.halves();
  141|  1.58k|            let classified1 = classifier.classify_block(block1);
  142|  1.58k|            let classified2 = classifier.classify_block(block2);
  143|  1.58k|
  144|  1.58k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  145|  1.58k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  146|       |
  147|    117|            if let Some(res) =
  148|  1.58k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  149|       |            {
  150|    117|                return Ok(Some((res, block)));
  151|  1.46k|            }
  152|  1.46k|
  153|  1.46k|            offset += SIZE;
  154|  1.46k|            previous_block = first_bitmask >> (SIZE - 1);
  155|       |        }
  156|       |
  157|    114|        Ok(None)
  158|  2.53k|    }
_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE10find_emptyCs8ZpES7bF61F_19fuzz_arbitrary_json:
   54|  1.71k|    unsafe fn find_empty(
   55|  1.71k|        &mut self,
   56|  1.71k|        label: &JsonString,
   57|  1.71k|        mut offset: usize,
   58|  1.71k|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   59|  1.71k|        let classifier = vector_256::BlockClassifier256::new(b'"', b'"');
   60|  1.71k|        let mut previous_block: u64 = 0;
   61|       |
   62|  4.89k|        while let Some(block) = self.iter.next().e()? {
   63|  4.41k|            let (block1, block2) = block.halves();
   64|  4.41k|            let classified1 = classifier.classify_block(block1);
   65|  4.41k|            let classified2 = classifier.classify_block(block2);
   66|  4.41k|
   67|  4.41k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
   68|  4.41k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
   69|  4.41k|
   70|  4.41k|            let mut result = (previous_block | (first_bitmask << 1)) & second_bitmask;
   71|  5.60k|            while result != 0 {
   72|  2.42k|                let idx = result.trailing_zeros() as usize;
   73|  2.42k|                if self
   74|  2.42k|                    .input
   75|  2.42k|                    .is_member_match(offset + idx - 1, offset + idx + 1, label)
   76|  2.42k|                    .e()?
   77|       |                {
   78|  1.23k|                    return Ok(Some((offset + idx - 1, block)));
   79|  1.18k|                }
   80|  1.18k|                result &= !(1 << idx);
   81|       |            }
   82|       |
   83|  3.17k|            offset += SIZE;
   84|  3.17k|            previous_block = first_bitmask >> (SIZE - 1);
   85|       |        }
   86|       |
   87|    477|        Ok(None)
   88|  1.71k|    }
_RNvMs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64INtB4_22Avx2MemmemClassifier64NtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2e_5MatchEEE11find_letterCs8ZpES7bF61F_19fuzz_arbitrary_json:
   94|    586|    unsafe fn find_letter(
   95|    586|        &mut self,
   96|    586|        label: &JsonString,
   97|    586|        mut offset: usize,
   98|    586|    ) -> Result<Option<(usize, I::Block<'i, SIZE>)>, InputError> {
   99|    586|        let classifier = vector_256::BlockClassifier256::new(label.unquoted().as_bytes()[0], b'"');
  100|    586|        let mut previous_block: u64 = 0;
  101|       |
  102|  2.07k|        while let Some(block) = self.iter.next().e()? {
  103|  1.94k|            let (block1, block2) = block.halves();
  104|  1.94k|            let classified1 = classifier.classify_block(block1);
  105|  1.94k|            let classified2 = classifier.classify_block(block2);
  106|  1.94k|
  107|  1.94k|            let first_bitmask = m64::combine_32(classified1.first, classified2.first);
  108|  1.94k|            let second_bitmask = m64::combine_32(classified1.second, classified2.second);
  109|       |
  110|    455|            if let Some(res) =
  111|  1.94k|                mask_64::find_in_mask(self.input, label, previous_block, first_bitmask, second_bitmask, offset)?
  112|       |            {
  113|    455|                return Ok(Some((res, block)));
  114|  1.49k|            }
  115|  1.49k|
  116|  1.49k|            offset += SIZE;
  117|  1.49k|            previous_block = first_bitmask >> (SIZE - 1);
  118|       |        }
  119|       |
  120|    131|        Ok(None)
  121|    586|    }
_RINvXNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem7avx2_64NtB3_11ConstructorNtB5_10MemmemImpl6memmemNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEECs8ZpES7bF61F_19fuzz_arbitrary_json:
   19|  4.81k|    fn memmem<'i, 'b, 'r, I, R>(
   20|  4.81k|        input: &'i I,
   21|  4.81k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
   22|  4.81k|    ) -> Self::Classifier<'i, 'b, 'r, I, R>
   23|  4.81k|    where
   24|  4.81k|        I: Input,
   25|  4.81k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
   26|  4.81k|        'i: 'r,
   27|  4.81k|    {
   28|  4.81k|        Self::Classifier { input, iter }
   29|  4.81k|    }

_RINvNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared25find_label_in_first_blockNtNtNtB8_5input8borrowed13BorrowedBytesKj40_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
   16|  3.78k|pub(crate) fn find_label_in_first_block<'i, 'r, I, const N: usize>(
   17|  3.78k|    input: &I,
   18|  3.78k|    first_block: I::Block<'i, N>,
   19|  3.78k|    start_idx: usize,
   20|  3.78k|    label: &JsonString,
   21|  3.78k|) -> Result<Option<(usize, I::Block<'i, N>)>, InputError>
   22|  3.78k|where
   23|  3.78k|    I: Input,
   24|  3.78k|    'i: 'r,
   25|  3.78k|{
   26|  3.78k|    let block_idx = start_idx % N;
   27|  3.78k|    let label_size = label.quoted().len();
   28|       |
   29|  78.3k|    for (i, c) in first_block[block_idx..].iter().copied().enumerate() {
   30|  78.3k|        let j = start_idx + i;
   31|  78.3k|
   32|  78.3k|        if c == b'"' && input.is_member_match(j, j + label_size, label).e()? {
   33|  2.28k|            return Ok(Some((j, first_block)));
   34|  76.0k|        }
   35|       |    }
   36|       |
   37|  1.50k|    Ok(None)
   38|  3.78k|}

_RINvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared7mask_6412find_in_maskNtNtNtBa_5input8borrowed13BorrowedBytesECs8ZpES7bF61F_19fuzz_arbitrary_json:
   11|  3.52k|pub(crate) fn find_in_mask<I: Input>(
   12|  3.52k|    input: &I,
   13|  3.52k|    label: &JsonString,
   14|  3.52k|    previous_block: u64,
   15|  3.52k|    first: u64,
   16|  3.52k|    second: u64,
   17|  3.52k|    offset: usize,
   18|  3.52k|) -> Result<Option<usize>, InputError> {
   19|  3.52k|    let label_size = label.quoted().len();
   20|  3.52k|    let mut result = (previous_block | (first << 1)) & second;
   21|  5.14k|    while result != 0 {
   22|  2.18k|        let idx = result.trailing_zeros() as usize;
   23|      0|        debug!("{offset} + {idx} - 2 to {offset} + {idx} + {label_size} - 3");
   24|  2.18k|        if offset + idx > 1
   25|  2.18k|            && input
   26|  2.18k|                .is_member_match(offset + idx - 2, offset + idx + label_size - 2, label)
   27|  2.18k|                .e()?
   28|       |        {
   29|    572|            return Ok(Some(offset + idx - 2));
   30|  1.61k|        }
   31|  1.61k|        result &= !(1 << idx);
   32|       |    }
   33|  2.95k|    Ok(None)
   34|  3.52k|}

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier2563new:
   13|  2.53k|    pub(crate) unsafe fn new(first: u8, second: u8) -> Self {
   14|  2.53k|        Self {
   15|  2.53k|            first: _mm256_set1_epi8(first as i8),
   16|  2.53k|            second: _mm256_set1_epi8(second as i8),
   17|  2.53k|        }
   18|  2.53k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6memmem6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   21|  15.8k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   22|  15.8k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   23|  15.8k|
   24|  15.8k|        let first_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.first);
   25|  15.8k|        let second_cmp_vector = _mm256_cmpeq_epi8(byte_vector, self.second);
   26|  15.8k|
   27|  15.8k|        let first = _mm256_movemask_epi8(first_cmp_vector) as u32;
   28|  15.8k|        let second = _mm256_movemask_epi8(second_cmp_vector) as u32;
   29|  15.8k|
   30|  15.8k|        BlockClassification256 { first, second }
   31|  15.8k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification6quotesINtB2_20QuoteClassifiedBlockRShyKj40_E3lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
   85|    581|    pub fn len(&self) -> usize {
   86|    581|        self.block.len()
   87|    581|    }

_RINvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs8ZpES7bF61F_19fuzz_arbitrary_json:
   22|  19.6k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  19.6k|        block!(blocks[..64]);
   24|       |
   25|  19.6k|        let (block1, block2) = blocks.halves();
   26|  19.6k|        let classification1 = vector_256::classify_block(block1);
   27|  19.6k|        let classification2 = vector_256::classify_block(block2);
   28|  19.6k|
   29|  19.6k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  19.6k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  19.6k|
   32|  19.6k|        self.internal_classifier.classify(slashes, quotes)
   33|  19.6k|    }
_RNvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   15|  3.86k|    fn new() -> Self {
   16|  3.86k|        Self {
   17|  3.86k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  3.86k|        }
   19|  3.86k|    }
_RNCINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB7_11ConstructorNtB9_10QuotesImpl6resumeINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1Q_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3i_5MatchEEKj40_EE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
    8|  2.82k|super::shared::quote_classifier!(Avx2QuoteClassifier64, BlockAvx2Classifier, 64, u64);

_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3d_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   20|  1.03k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  1.03k|            where
   22|  1.03k|                I: InputBlockIterator<'i, $size>,
   23|  1.03k|            {
   24|  1.03k|                Self::Classifier {
   25|  1.03k|                    iter,
   26|  1.03k|                    classifier: $core::new(),
   27|  1.03k|                    phantom: PhantomData,
   28|  1.03k|                }
   29|  1.03k|            }
_RNvXs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
   79|  17.2k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  17.2k|                match self.iter.next().e()? {
   81|  16.8k|                    Some(block) => {
   82|  16.8k|                        // SAFETY: target_feature invariant
   83|  16.8k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  16.8k|                        let classified_block = QuoteClassifiedBlock {
   85|  16.8k|                            block,
   86|  16.8k|                            within_quotes_mask: mask,
   87|  16.8k|                        };
   88|  16.8k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    494|                    None => Ok(None),
   91|       |                }
   92|  17.2k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E6offsetCs8ZpES7bF61F_19fuzz_arbitrary_json:
  105|    268|            fn offset(&mut self, count: isize) -> QuoteIterResult<I::Block, $mask_ty, $size> {
  106|    268|                debug_assert!(count > 0);
  107|      0|                debug!("Offsetting by {count}");
  108|       |
  109|    268|                for _ in 0..count - 1 {
  110|     97|                    self.iter.next().e()?;
  111|       |                }
  112|       |
  113|    268|                self.next()
  114|    268|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_9InnerIterB1w_E10into_innerCs8ZpES7bF61F_19fuzz_arbitrary_json:
  126|  2.52k|            fn into_inner(self) -> I {
  127|  2.52k|                self.iter
  128|  2.52k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E15flip_quotes_bitCs8ZpES7bF61F_19fuzz_arbitrary_json:
  117|  1.35k|            fn flip_quotes_bit(&mut self) {
  118|  1.35k|                self.classifier.internal_classifier.flip_prev_quote_mask();
  119|  1.35k|            }
_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1O_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3g_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   33|  2.82k|            fn resume<'i, I>(
   34|  2.82k|                iter: I,
   35|  2.82k|                first_block: Option<I::Block>,
   36|  2.82k|            ) -> ResumedQuoteClassifier<Self::Classifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
   37|  2.82k|            where
   38|  2.82k|                I: InputBlockIterator<'i, $size>,
   39|  2.82k|            {
   40|  2.82k|                let mut s = Self::Classifier {
   41|  2.82k|                    iter,
   42|  2.82k|                    classifier: $core::new(),
   43|  2.82k|                    phantom: PhantomData,
   44|  2.82k|                };
   45|  2.82k|
   46|  2.82k|                let block = first_block.map(|b| {
   47|       |                    // SAFETY: target feature invariant
   48|       |                    let mask = unsafe { s.classifier.classify(&b) };
   49|       |                    QuoteClassifiedBlock {
   50|       |                        block: b,
   51|       |                        within_quotes_mask: mask,
   52|       |                    }
   53|  2.82k|                });
   54|  2.82k|
   55|  2.82k|                ResumedQuoteClassifier {
   56|  2.82k|                    classifier: s,
   57|  2.82k|                    first_block: block,
   58|  2.82k|                }
   59|  2.82k|            }
_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCs8ZpES7bF61F_19fuzz_arbitrary_json:
  100|   129k|            fn get_offset(&self) -> usize {
  101|   129k|                self.iter.get_offset() - $size
  102|   129k|            }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit20flip_prev_quote_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   38|  1.35k|    pub(crate) fn flip_prev_quote_mask(&mut self) {
   39|  1.35k|        self.prev_block_mask ^= 0x02;
   40|  1.35k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   26|  3.86k|    pub(crate) fn new() -> Self {
   27|  3.86k|        Self { prev_block_mask: 0 }
   28|  3.86k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  31.5k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  31.5k|        u64::from(self.prev_block_mask & 0x01)
   46|  31.5k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  19.6k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  19.6k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  19.6k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  19.6k|unsafe fn all_ones128() -> __m128i {
   14|  19.6k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  19.6k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  19.6k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  19.6k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  7.68k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|  11.9k|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|  11.9k|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|  11.9k|            let odd_starts = ODD & starts;
   62|  11.9k|            let even_starts = EVEN & starts;
   63|  11.9k|
   64|  11.9k|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|  11.9k|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|  11.9k|
   67|  11.9k|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|  11.9k|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|  11.9k|
   70|  11.9k|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|  11.9k|
   72|  11.9k|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  19.6k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  19.6k|
   77|  19.6k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  19.6k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  19.6k|
   80|  19.6k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  19.6k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  19.6k|        within_quotes
   93|  19.6k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  19.6k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  19.6k|        let slash_mask = u8::from(set_slash_mask);
   33|  19.6k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  19.6k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  19.6k|    }

_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  39.2k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  39.2k|    _mm256_set1_epi8(b'\\' as i8)
   14|  39.2k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  39.2k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  39.2k|    _mm256_set1_epi8(b'"' as i8)
    9|  39.2k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  39.2k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  39.2k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  39.2k|
   20|  39.2k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  39.2k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  39.2k|
   23|  39.2k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  39.2k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  39.2k|
   26|  39.2k|    BlockClassification256 { slashes, quotes }
   27|  39.2k|}

_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  334|  2.06k|    pub(crate) fn new() -> Self {
  335|  2.06k|        Self { phantom: PhantomData }
  336|  2.06k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  391|  1.03k|    fn classify_structural_characters<'i, I>(
  392|  1.03k|        self,
  393|  1.03k|        iter: Self::QuotesClassifier<'i, I>,
  394|  1.03k|    ) -> Self::StructuralClassifier<'i, I>
  395|  1.03k|    where
  396|  1.03k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  397|  1.03k|    {
  398|  1.03k|        S::new(iter)
  399|  1.03k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd32resume_structural_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4w_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5Y_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  402|  3.14k|    fn resume_structural_classification<'i, I>(
  403|  3.14k|        self,
  404|  3.14k|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  405|  3.14k|    ) -> Self::StructuralClassifier<'i, I>
  406|  3.14k|    where
  407|  3.14k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  408|  3.14k|    {
  409|  3.14k|        S::resume(state)
  410|  3.14k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs8ZpES7bF61F_19fuzz_arbitrary_json:
  475|  2.06k|    pub(crate) fn fast_quotes(&self) -> bool {
  476|  2.06k|        self.fast_quotes
  477|  2.06k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs8ZpES7bF61F_19fuzz_arbitrary_json:
  471|  2.06k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  472|  2.06k|        self.highest_simd
  473|  2.06k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath14classification4simd9configureCs8ZpES7bF61F_19fuzz_arbitrary_json:
  533|  2.80k|pub(crate) fn configure() -> SimdConfiguration {
  534|  2.80k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  535|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  536|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  537|  2.80k|    }
  538|       |
  539|       |    cfg_if! {
  540|       |        if #[cfg(not(feature = "simd"))]
  541|       |        {
  542|       |            let highest_simd = SimdTag::Nosimd;
  543|       |            let fast_quotes = false;
  544|       |            let fast_popcnt = false;
  545|       |        }
  546|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  547|       |        {
  548|  2.80k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  549|  2.80k|                SimdTag::Avx2
  550|      0|            } else if is_x86_feature_detected!("ssse3") {
  551|      0|                SimdTag::Ssse3
  552|      0|            } else if is_x86_feature_detected!("sse2") {
  553|      0|                SimdTag::Sse2
  554|       |            } else {
  555|      0|                SimdTag::Nosimd
  556|       |            };
  557|       |
  558|  2.80k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  559|  2.80k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  560|       |        }
  561|       |        else
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |    }
  568|       |
  569|  2.80k|    SimdConfiguration {
  570|  2.80k|        highest_simd,
  571|  2.80k|        fast_quotes,
  572|  2.80k|        fast_popcnt,
  573|  2.80k|    }
  574|  2.80k|}
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_depth_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  413|    581|    fn resume_depth_classification<'i, I>(
  414|    581|        self,
  415|    581|        state: ResumeClassifierState<'i, I, Self::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE>,
  416|    581|        opening: BracketType,
  417|    581|    ) -> DepthIteratorResumeOutcome<
  418|    581|        'i,
  419|    581|        I,
  420|    581|        Self::QuotesClassifier<'i, I>,
  421|    581|        Self::DepthClassifier<'i, I>,
  422|    581|        MaskType,
  423|    581|        BLOCK_SIZE,
  424|    581|    >
  425|    581|    where
  426|    581|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  427|    581|    {
  428|    581|        D::resume(state, opening)
  429|    581|    }
_RNvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs8ZpES7bF61F_19fuzz_arbitrary_json:
  366|  3.95k|    fn dispatch_tag(self) -> usize {
  367|  3.95k|        TARGET
  368|  3.95k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd6memmemNtNtNtBa_5input8borrowed13BorrowedBytesINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4I_5MatchEEECs8ZpES7bF61F_19fuzz_arbitrary_json:
  432|  4.81k|    fn memmem<'i, 'b, 'r, I, R>(
  433|  4.81k|        self,
  434|  4.81k|        input: &'i I,
  435|  4.81k|        iter: &'b mut <I as Input>::BlockIterator<'i, 'r, R, BLOCK_SIZE>,
  436|  4.81k|    ) -> Self::MemmemClassifier<'i, 'b, 'r, I, R>
  437|  4.81k|    where
  438|  4.81k|        I: Input,
  439|  4.81k|        R: InputRecorder<<I as Input>::Block<'i, BLOCK_SIZE>>,
  440|  4.81k|        'i: 'r,
  441|  4.81k|    {
  442|  4.81k|        M::memmem(input, iter)
  443|  4.81k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs8ZpES7bF61F_19fuzz_arbitrary_json:
  479|  2.06k|    pub(crate) fn fast_popcnt(&self) -> bool {
  480|  2.06k|        self.fast_popcnt
  481|  2.06k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5R_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  371|  1.03k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  372|  1.03k|    where
  373|  1.03k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  374|  1.03k|    {
  375|  1.03k|        Q::new(iter)
  376|  1.03k|    }
_RINvXs1_NtNtCs8dUjriG0K0U_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd27resume_quote_classificationINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4r_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5T_5MatchEEKj40_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  379|  2.82k|    fn resume_quote_classification<'i, I>(
  380|  2.82k|        self,
  381|  2.82k|        iter: I,
  382|  2.82k|        first_block: Option<I::Block>,
  383|  2.82k|    ) -> ResumedQuoteClassifier<Self::QuotesClassifier<'i, I>, I::Block, MaskType, BLOCK_SIZE>
  384|  2.82k|    where
  385|  2.82k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  386|  2.82k|    {
  387|  2.82k|        Q::resume(iter, first_block)
  388|  2.82k|    }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|   122k|    pub fn offset(self, amount: usize) -> Self {
   70|   122k|        match self {
   71|  32.5k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  26.5k|            Colon(idx) => Colon(idx + amount),
   73|  43.5k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  19.6k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|   122k|    }
_RNvXs5_NtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8ZpES7bF61F_19fuzz_arbitrary_json:
   21|  86.7k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RINvYNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_6411ConstructorNtB7_14StructuralImpl6resumeINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1S_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3k_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1N_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  195|  3.14k|    fn resume<'i, I, Q>(state: ResumeClassifierState<'i, I, Q, MaskType, BLOCK_SIZE>) -> Self::Classifier<'i, I, Q>
  196|  3.14k|    where
  197|  3.14k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  198|  3.14k|        Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
  199|  3.14k|    {
  200|  3.14k|        <Self::Classifier<'i, I, Q> as StructuralIterator<'i, I, Q, MaskType, BLOCK_SIZE>>::resume(state)
  201|  3.14k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath14classification10structuralNtB2_10Structural3idx:
   49|  1.24k|    pub fn idx(self) -> usize {
   50|  1.24k|        match self {
   51|  1.24k|            Closing(_, idx) | Colon(idx) | Opening(_, idx) | Comma(idx) => idx,
   52|  1.24k|        }
   53|  1.24k|    }

_RNCNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E4stop0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   13|  2.83k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1D_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB35_5MatchEEKj40_EINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EEINtB9_18StructuralIteratorB1y_B4w_yKB4r_E6resume0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   13|  3.10k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RINvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs8ZpES7bF61F_19fuzz_arbitrary_json:
   28|  23.0k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  23.0k|        &mut self,
   30|  23.0k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  23.0k|    ) -> mask_64::StructuralsBlock<B> {
   32|  23.0k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  23.0k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  23.0k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  23.0k|
   36|  23.0k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  23.0k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|       |
   39|      0|        bin_u64!("structural", structural);
   40|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|       |
   42|  23.0k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  23.0k|    }
_RNCNCNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   13|   122k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  4.18k|    fn new() -> Self {
   21|  4.18k|        Self {
   22|  4.18k|            // SAFETY: target feature invariant
   23|  4.18k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  4.18k|        }
   25|  4.18k|    }

_RNvXs1_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
   85|   122k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   136k|                while self.current_block_is_spent() {
   87|  14.2k|                    match self.iter.next() {
   88|  13.8k|                        Ok(Some(block)) => {
   89|  13.8k|                            // SAFETY: target_feature invariant
   90|  13.8k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  13.8k|                        }
   92|       |                        Ok(None) => {
   93|    494|                            self.block = None;
   94|    494|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|   122k|                Ok(self
  101|   122k|                    .block
  102|   122k|                    .as_mut()
  103|   122k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|   122k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E26turn_colons_and_commas_offCs8ZpES7bF61F_19fuzz_arbitrary_json:
  130|  11.3k|            fn turn_colons_and_commas_off(&mut self) {
  131|  11.3k|                if self.are_commas_on && self.are_colons_on {
  132|  1.58k|                    self.are_commas_on = false;
  133|  1.58k|                    self.are_colons_on = false;
  134|      0|                    debug!("Turning both commas and colons off.");
  135|       |                    // SAFETY: target_feature invariant
  136|  1.58k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  137|  9.79k|                } else if self.are_commas_on {
  138|    968|                    self.turn_commas_off();
  139|  8.82k|                } else if self.are_colons_on {
  140|    184|                    self.turn_colons_off();
  141|  8.64k|                }
  142|  11.3k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCs8ZpES7bF61F_19fuzz_arbitrary_json:
  179|  25.4k|            fn turn_colons_off(&mut self) {
  180|  25.4k|                if self.are_colons_on {
  181|  1.52k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  1.52k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  23.8k|                }
  186|  25.4k|            }
_RINvXs_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   21|  1.03k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  1.03k|            where
   23|  1.03k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  1.03k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  1.03k|            {
   26|  1.03k|                Self::Classifier {
   27|  1.03k|                    iter,
   28|  1.03k|                    classifier: $core::new(),
   29|  1.03k|                    block: None,
   30|  1.03k|                    are_commas_on: false,
   31|  1.03k|                    are_colons_on: false,
   32|  1.03k|                }
   33|  1.03k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCs8ZpES7bF61F_19fuzz_arbitrary_json:
  157|  4.11k|            fn turn_commas_off(&mut self) {
  158|  4.11k|                if self.are_commas_on {
  159|  1.78k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  1.78k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|  2.32k|                }
  164|  4.11k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E4stopCs8ZpES7bF61F_19fuzz_arbitrary_json:
  189|  2.83k|            fn stop(self) -> ResumeClassifierState<'a, I, Q, $mask_ty, $size> {
  190|  2.83k|                let block = self.block.map(|b| ResumeClassifierBlockState {
  191|       |                    idx: b.get_idx() as usize,
  192|       |                    block: b.quote_classified,
  193|  2.83k|                });
  194|  2.83k|
  195|  2.83k|                ResumeClassifierState {
  196|  2.83k|                    iter: self.iter,
  197|  2.83k|                    block,
  198|  2.83k|                    are_commas_on: self.are_commas_on,
  199|  2.83k|                    are_colons_on: self.are_colons_on,
  200|  2.83k|                }
  201|  2.83k|            }
_RNvMs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCs8ZpES7bF61F_19fuzz_arbitrary_json:
   56|  6.26k|            fn reclassify(&mut self, idx: usize) {
   57|  6.26k|                if let Some(block) = self.block.take() {
   58|  6.26k|                    let quote_classified_block = block.quote_classified;
   59|  6.26k|                    let relevant_idx = idx + 1;
   60|  6.26k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  6.26k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  6.17k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  6.17k|                        // SAFETY: target_feature invariant
   68|  6.17k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  6.17k|                        new_block.structural_mask &= mask;
   70|  6.17k|                        self.block = Some(new_block);
   71|     88|                    }
   72|      5|                }
   73|  6.26k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCs8ZpES7bF61F_19fuzz_arbitrary_json:
  167|  2.24k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  2.24k|                if !self.are_colons_on {
  169|  2.24k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  2.24k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  2.24k|
  174|  2.24k|                    self.reclassify(idx);
  175|      0|                }
  176|  2.24k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCs8ZpES7bF61F_19fuzz_arbitrary_json:
  145|  34.7k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  34.7k|                if !self.are_commas_on {
  147|  1.75k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  1.75k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  1.75k|
  152|  1.75k|                    self.reclassify(idx);
  153|  32.9k|                }
  154|  34.7k|            }
_RNvMs0_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCs8ZpES7bF61F_19fuzz_arbitrary_json:
   49|   136k|            fn current_block_is_spent(&self) -> bool {
   50|   136k|                self.block
   51|   136k|                    .as_ref()
   52|   136k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   136k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCs8ZpES7bF61F_19fuzz_arbitrary_json:
  113|  22.9k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  22.9k|                if !self.are_commas_on && !self.are_colons_on {
  115|  2.27k|                    self.are_commas_on = true;
  116|  2.27k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  2.27k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  2.27k|
  121|  2.27k|                    self.reclassify(idx);
  122|  20.6k|                } else if !self.are_commas_on {
  123|    557|                    self.turn_commas_on(idx);
  124|  20.1k|                } else if !self.are_colons_on {
  125|  2.24k|                    self.turn_colons_on(idx);
  126|  17.8k|                }
  127|  22.9k|            }
_RNvXs2_NtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E6resumeCs8ZpES7bF61F_19fuzz_arbitrary_json:
  204|  3.14k|            fn resume(state: ResumeClassifierState<'a, I, Q, $mask_ty, $size>) -> Self {
  205|  3.14k|                let mut classifier = $core::new();
  206|  3.14k|
  207|  3.14k|                // SAFETY: target_feature invariant
  208|  3.14k|                unsafe {
  209|  3.14k|                    if state.are_commas_on && state.are_colons_on {
  210|     99|                        classifier.internal_classifier.toggle_colons_and_commas();
  211|     99|                    } else {
  212|  3.04k|                        if state.are_commas_on {
  213|  2.48k|                            classifier.internal_classifier.toggle_commas();
  214|  2.48k|                        }
  215|  3.04k|                        if state.are_colons_on {
  216|     42|                            classifier.internal_classifier.toggle_colons();
  217|  3.00k|                        }
  218|       |                    }
  219|       |                }
  220|       |
  221|  3.14k|                let block = state.block.map(|b| {
  222|       |                    // SAFETY: target_feature invariant
  223|       |                    let mut block = unsafe { classifier.classify(b.block) };
  224|       |                    let idx_mask = <$mask_ty>::MAX.checked_shl(b.idx as u32).unwrap_or(0);
  225|       |                    block.structural_mask &= idx_mask;
  226|       |
  227|       |                    block
  228|  3.14k|                });
  229|  3.14k|
  230|  3.14k|                Self {
  231|  3.14k|                    iter: state.iter,
  232|  3.14k|                    block,
  233|  3.14k|                    classifier,
  234|  3.14k|                    are_commas_on: state.are_commas_on,
  235|  3.14k|                    are_colons_on: state.are_colons_on,
  236|  3.14k|                }
  237|  3.14k|            }

_RNCNvXs_NtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
   40|   122k|        (idx < SIZE).then(|| {
   41|   122k|            let bit_mask = 1 << idx;
   42|   122k|
   43|   122k|            self.structural_mask ^= bit_mask;
   44|   122k|
   45|   122k|            // The last match being a catch-all *is important*.
   46|   122k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|   122k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|   122k|            match self.quote_classified.block[idx] {
   49|  26.5k|                b':' => Structural::Colon(idx),
   50|  19.2k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  24.2k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  19.6k|                b',' => Structural::Comma(idx),
   53|  14.4k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  18.1k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   122k|        })
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs8ZpES7bF61F_19fuzz_arbitrary_json:
   24|   135k|    pub(crate) fn is_empty(&self) -> bool {
   25|   135k|        self.structural_mask == 0
   26|   135k|    }
_RNvXs_NtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
   38|   122k|    fn next(&mut self) -> Option<Structural> {
   39|   122k|        let idx = self.get_idx() as usize;
   40|   122k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   122k|        })
   57|   122k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs8ZpES7bF61F_19fuzz_arbitrary_json:
   29|   125k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   125k|        self.structural_mask.trailing_zeros()
   31|   125k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   16|  23.0k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  23.0k|        Self {
   18|  23.0k|            quote_classified: block,
   19|  23.0k|            structural_mask,
   20|  23.0k|        }
   21|  23.0k|    }

_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs8ZpES7bF61F_19fuzz_arbitrary_json:
   74|  6.01k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  6.01k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  6.01k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   55|  3.95k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  3.95k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  3.95k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   25|  46.1k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  46.1k|    _mm256_set1_epi8(0x0F)
   27|  46.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   31|  46.1k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  46.1k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  46.1k|}
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   49|  7.76k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  7.76k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  7.76k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs8ZpES7bF61F_19fuzz_arbitrary_json:
   80|  3.80k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  3.80k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  3.80k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs8ZpES7bF61F_19fuzz_arbitrary_json:
   43|  9.97k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  9.97k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  9.97k|}
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs8ZpES7bF61F_19fuzz_arbitrary_json:
   92|  46.1k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  46.1k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  46.1k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  46.1k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  46.1k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  46.1k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  46.1k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  46.1k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  46.1k|
  101|  46.1k|        BlockClassification256 { structural }
  102|  46.1k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs8ZpES7bF61F_19fuzz_arbitrary_json:
   86|  3.95k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  3.95k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  3.95k|    }
_RNvMNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  4.18k|    pub(crate) unsafe fn new() -> Self {
   67|  4.18k|        Self {
   68|  4.18k|            upper_nibble_mask: upper_nibble_mask(),
   69|  4.18k|        }
   70|  4.18k|    }
_RNvNtNtNtNtCs8dUjriG0K0U_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  4.18k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  4.18k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  4.18k|}

_RNvXs6_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8ZpES7bF61F_19fuzz_arbitrary_json:
    9|  93.3k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs9_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs8ZpES7bF61F_19fuzz_arbitrary_json:
    9|  51.1k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs8ZpES7bF61F_19fuzz_arbitrary_json:
   80|  68.1k|    fn deref(&self) -> &Self::Target {
   81|  68.1k|        &self.0
   82|  68.1k|    }
_RNvMNtCs8dUjriG0K0U_8rsonpath5depthNtB2_5Depth9decrement:
   28|  32.6k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  32.6k|        *self = (*self - 1)?;
   30|  32.6k|        Ok(())
   31|  32.6k|    }
_RNvXsf_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  32.6k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  32.6k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  32.6k|            }
_RNvMNtCs8dUjriG0K0U_8rsonpath5depthNtB2_5Depth9increment:
   21|  44.4k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  44.4k|        *self = (*self + 1)?;
   23|  44.4k|        Ok(())
   24|  44.4k|    }
_RNvXsc_NtCs8dUjriG0K0U_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  44.4k|            fn add(self, rhs: u8) -> Self::Output {
   41|  44.4k|                self.0
   42|  44.4k|                    .checked_add(rhs)
   43|  44.4k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  44.4k|                    .map(Depth)
   45|  44.4k|            }

_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   95|  2.06k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   96|  2.06k|        let initial_state = automaton.initial_state();
   97|  2.06k|        let fallback_state = automaton[initial_state].fallback_state();
   98|  2.06k|        let transitions = automaton[initial_state].member_transitions();
   99|  2.06k|
  100|  2.06k|        if fallback_state == initial_state
  101|  1.36k|            && transitions.len() == 1
  102|  1.02k|            && automaton[initial_state].array_transitions().is_empty()
  103|       |        {
  104|  1.02k|            let (member_name, target_state) = transitions[0];
  105|      0|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  106|  1.02k|            return Some(Self {
  107|  1.02k|                bytes,
  108|  1.02k|                state: target_state,
  109|  1.02k|                is_accepting: automaton.is_accepting(target_state),
  110|  1.02k|                member_name,
  111|  1.02k|                simd,
  112|  1.02k|            });
  113|  1.03k|        }
  114|  1.03k|
  115|  1.03k|        None
  116|  2.06k|    }
_RNCINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  283|  4.13k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
_RINvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB3_8HeadSkipNtNtNtB7_5input8borrowed13BorrowedBytesINtNtNtB7_14classification4simd12ResolvedSimdNtNtNtB1N_6quotes7avx2_6411ConstructorNtNtNtB1N_10structural7avx2_6411ConstructorNtNtNtB1N_5depth7avx2_6411ConstructorNtNtNtB1N_6memmem7avx2_6411ConstructorKj1_EKj40_E17run_head_skippingINtNtB5_4main8ExecutorB15_INtNtNtB7_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEB1I_EB5R_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  120|  1.02k|    pub(super) fn run_head_skipping<'r, E, R>(&self, engine: &mut E) -> Result<(), EngineError>
  121|  1.02k|    where
  122|  1.02k|        'b: 'r,
  123|  1.02k|        E: CanHeadSkip<'b, 'r, I, R, V>,
  124|  1.02k|        R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  125|  1.02k|    {
  126|  1.02k|        dispatch_simd!(self.simd; self, engine =>
  127|       |        fn<'b, 'q, 'r, I, V, E, R>(head_skip: &HeadSkip<'b, 'q, I, V, BLOCK_SIZE>, engine: &mut E) -> Result<(), EngineError>
  128|       |        where
  129|       |            'b: 'r,
  130|       |            E: CanHeadSkip<'b, 'r, I, R, V>,
  131|       |            R: Recorder<I::Block<'b, BLOCK_SIZE>> + 'r,
  132|       |            I: Input,
  133|       |            V: Simd
  134|       |        {
  135|       |            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|       |            let mut idx = 0;
  137|       |            let mut first_block = None;
  138|       |
  139|       |            loop {
  140|       |                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|       |                debug!("Starting memmem search from {idx}");
  142|       |
  143|       |                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|       |                    drop(memmem);
  145|       |
  146|       |                    first_block = Some(last_block);
  147|       |                    idx = starting_quote_idx;
  148|       |                    debug!("Needle found at {idx}");
  149|       |                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|       |
  151|       |                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|       |                    Some((colon_idx, b':')) => {
  153|       |                        let (next_idx, next_c) = head_skip
  154|       |                            .bytes
  155|       |                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|       |                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|       |                                classifier: quote_classifier,
  160|       |                                first_block: quote_classified_first_block,
  161|       |                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|       |
  163|       |                            // Temporarily set the index within the current block to zero.
  164|       |                            // This makes sense for the move below.
  165|       |                            let mut classifier_state = ResumeClassifierState {
  166|       |                                iter: quote_classifier,
  167|       |                                block: quote_classified_first_block
  168|       |                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|       |                                are_colons_on: false,
  170|       |                                are_commas_on: head_skip.is_accepting,
  171|       |                            };
  172|       |
  173|       |                            debug!("Actual match with colon at {colon_idx}");
  174|       |                            debug!("Next significant character at {next_idx}");
  175|       |                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|       |                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|       |                            if next_c == b'{' || next_c == b'[' {
  185|       |                                forward_to(&mut classifier_state, next_idx)?;
  186|       |                                if head_skip.is_accepting {
  187|       |                                    engine.recorder().record_match(
  188|       |                                        next_idx,
  189|       |                                        Depth::ZERO,
  190|       |                                        crate::result::MatchedNodeType::Complex,
  191|       |                                    )?;
  192|       |                                }
  193|       |                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|       |                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|       |                            if let Some(block) = classifier_state.block.as_mut() {
  206|       |                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|       |                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|       |                                    debug!("Mask needs flipping!");
  209|       |                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|       |                                    classifier_state.iter.flip_quotes_bit();
  211|       |                                }
  212|       |                            }
  213|       |
  214|       |                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|       |                                    debug!("resuming");
  217|       |                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|       |                                    engine
  219|       |                                        .run_on_subtree(
  220|       |                                            Structural::Opening(
  221|       |                                                if next_c == b'{' {
  222|       |                                                    BracketType::Curly
  223|       |                                                } else {
  224|       |                                                    BracketType::Square
  225|       |                                                },
  226|       |                                                next_idx,
  227|       |                                            ),
  228|       |                                            head_skip.state,
  229|       |                                            classifier,
  230|       |                                        )?
  231|       |                                        .0
  232|       |                                }
  233|       |                                _ if head_skip.is_accepting => {
  234|       |                                    engine.recorder().record_match(
  235|       |                                        next_idx,
  236|       |                                        Depth::ZERO,
  237|       |                                        crate::result::MatchedNodeType::Atomic,
  238|       |                                    )?;
  239|       |                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|       |                                    let next_structural = classifier.next()?;
  241|       |
  242|       |                                    match next_structural {
  243|       |                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|       |                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|       |                                    classifier.stop()
  247|       |                                }
  248|       |                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|       |                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|       |                            idx = classifier_state.get_idx();
  253|       |
  254|       |                            first_block = classifier_state.block.map(|b| b.block.block);
  255|       |                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|       |                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|       |                    debug!("No memmem matches, exiting");
  261|       |                    break;
  262|       |                }
  263|       |            }
  264|       |
  265|       |            return Ok(());
  266|       |
  267|       |            /// Move the state forward to `index`.
  268|       |            ///
  269|       |            /// # Errors
  270|       |            /// If the offset crosses block boundaries, then a new block is read from the underlying
  271|       |            /// [`Input`](crate::input::Input) implementation, which can fail.
  272|       |            ///
  273|       |            /// # Panics
  274|       |            /// If the `index` is not ahead of the current position of the state ([`get_idx`](ResumeClassifierState::get_idx)).
  275|       |            #[inline(always)]
  276|       |            #[allow(clippy::panic_in_result_fn)]
  277|       |            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|       |            where
  279|       |                I: InputBlockIterator<'i, N>,
  280|       |                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|       |            {
  282|       |                let current_block_start = state.iter.get_offset();
  283|       |                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|       |                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|       |                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|       |                assert!(index > current_idx);
  292|       |                let delta = index - current_idx;
  293|       |
  294|       |                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|       |                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|       |                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|       |                let remaining = delta + current_block_idx;
  298|       |                let blocks_to_skip = remaining / N;
  299|       |                let remainder = remaining % N;
  300|       |
  301|       |                match state.block.as_mut() {
  302|       |                    Some(b) if blocks_to_skip == 0 => {
  303|       |                        b.idx = remaining;
  304|       |                    }
  305|       |                    Some(_) => {
  306|       |                        state.block = state
  307|       |                            .iter
  308|       |                            .offset(blocks_to_skip as isize)?
  309|       |                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|       |                            });
  313|       |                    }
  314|       |                    None => {
  315|       |                        state.block = state
  316|       |                            .iter
  317|       |                            .offset((blocks_to_skip + 1) as isize)?
  318|       |                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|       |                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|       |                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|       |                Ok(())
  328|       |            }
  329|       |        })
  330|  1.02k|    }
_RINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB5_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2D_6quotes7avx2_6411ConstructorNtNtNtB2D_10structural7avx2_6411ConstructorNtNtNtB2D_5depth7avx2_6411ConstructorNtNtNtB2D_6memmem7avx2_6411ConstructorKj1_EINtNtB7_4main8ExecutorB1V_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6n_5MatchEEB2y_EB6i_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  134|  1.02k|        {
  135|  1.02k|            let mut input_iter = head_skip.bytes.iter_blocks(engine.recorder());
  136|  1.02k|            let mut idx = 0;
  137|  1.02k|            let mut first_block = None;
  138|       |
  139|  4.81k|            loop {
  140|  4.81k|                let mut memmem = head_skip.simd.memmem(head_skip.bytes, &mut input_iter);
  141|      0|                debug!("Starting memmem search from {idx}");
  142|       |
  143|  4.81k|                if let Some((starting_quote_idx, last_block)) = memmem.find_label(first_block, idx, head_skip.member_name)? {
  144|  4.09k|                    drop(memmem);
  145|  4.09k|
  146|  4.09k|                    first_block = Some(last_block);
  147|  4.09k|                    idx = starting_quote_idx;
  148|      0|                    debug!("Needle found at {idx}");
  149|  4.09k|                    let seek_start_idx = idx + head_skip.member_name.quoted().len();
  150|  4.09k|
  151|  4.09k|                match head_skip.bytes.seek_non_whitespace_forward(seek_start_idx).e()? {
  152|  2.82k|                    Some((colon_idx, b':')) => {
  153|  2.82k|                        let (next_idx, next_c) = head_skip
  154|  2.82k|                            .bytes
  155|  2.82k|                            .seek_non_whitespace_forward(colon_idx + 1).e()?
  156|  2.82k|                            .ok_or(EngineError::MissingItem())?;
  157|       |
  158|       |                            let ResumedQuoteClassifier {
  159|  2.82k|                                classifier: quote_classifier,
  160|  2.82k|                                first_block: quote_classified_first_block,
  161|  2.82k|                            } = head_skip.simd.resume_quote_classification(input_iter, first_block);
  162|  2.82k|
  163|  2.82k|                            // Temporarily set the index within the current block to zero.
  164|  2.82k|                            // This makes sense for the move below.
  165|  2.82k|                            let mut classifier_state = ResumeClassifierState {
  166|  2.82k|                                iter: quote_classifier,
  167|  2.82k|                                block: quote_classified_first_block
  168|  2.82k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
  169|  2.82k|                                are_colons_on: false,
  170|  2.82k|                                are_commas_on: head_skip.is_accepting,
  171|  2.82k|                            };
  172|       |
  173|      0|                            debug!("Actual match with colon at {colon_idx}");
  174|      0|                            debug!("Next significant character at {next_idx}");
  175|      0|                            debug!("Classifier is at {}", classifier_state.get_idx());
  176|      0|                            debug!("We will forward to {colon_idx} first, then to {next_idx}",);
  177|       |
  178|       |                            // Now we want to move the entire iterator state so that the current block is quote-classified,
  179|       |                            // and correctly points to the place the engine would expect had it found the matching key
  180|       |                            // in the regular loop. If the value is atomic, we handle it ourselves. If the value is complex,
  181|       |                            // the engine wants to start one byte *after* the opening character. However, the match report
  182|       |                            // has to happen before we advance one more byte, or else the opening character might be lost
  183|       |                            // in the output (if it happens at a block boundary).
  184|  2.82k|                            if next_c == b'{' || next_c == b'[' {
  185|  1.31k|                                forward_to(&mut classifier_state, next_idx)?;
  186|  1.31k|                                if head_skip.is_accepting {
  187|  1.07k|                                    engine.recorder().record_match(
  188|  1.07k|                                        next_idx,
  189|  1.07k|                                        Depth::ZERO,
  190|  1.07k|                                        crate::result::MatchedNodeType::Complex,
  191|  1.07k|                                    )?;
  192|    241|                                }
  193|  1.31k|                                forward_to(&mut classifier_state, next_idx + 1)?;
  194|       |                            } else {
  195|  1.51k|                                forward_to(&mut classifier_state, next_idx)?;
  196|       |                            };
  197|       |
  198|       |                            // We now have the block where we want and we ran quote classification, but during the `forward_to`
  199|       |                            // call we lose all the flow-through quote information that usually is passed from one block to the next.
  200|       |                            // We need to manually verify the soundness of the classification. Fortunately:
  201|       |                            // 1. we know that resume_idx is either the start of a value, or one byte after an opening -
  202|       |                            //    in a valid JSON this character can be within quotes if and only if it is itself a quote;
  203|       |                            // 2. the only way the mask can be wrong is if it is flipped - marks chars within quotes
  204|       |                            //    as outside and vice versa - so it suffices to flip it if it is wrong.
  205|  2.82k|                            if let Some(block) = classifier_state.block.as_mut() {
  206|  2.82k|                                let should_be_quoted = block.block.block[block.idx] == b'"';
  207|  2.82k|                                if block.block.within_quotes_mask.is_lit(block.idx) != should_be_quoted {
  208|      0|                                    debug!("Mask needs flipping!");
  209|  1.35k|                                    block.block.within_quotes_mask = !block.block.within_quotes_mask;
  210|  1.35k|                                    classifier_state.iter.flip_quotes_bit();
  211|  1.46k|                                }
  212|      0|                            }
  213|       |
  214|  2.52k|                            classifier_state = match next_c {
  215|       |                                b'{' | b'[' => {
  216|      0|                                    debug!("resuming");
  217|  1.31k|                                    let classifier = head_skip.simd.resume_structural_classification(classifier_state);
  218|  1.31k|                                    engine
  219|  1.31k|                                        .run_on_subtree(
  220|  1.31k|                                            Structural::Opening(
  221|  1.31k|                                                if next_c == b'{' {
  222|  1.15k|                                                    BracketType::Curly
  223|       |                                                } else {
  224|    158|                                                    BracketType::Square
  225|       |                                                },
  226|  1.31k|                                                next_idx,
  227|  1.31k|                                            ),
  228|  1.31k|                                            head_skip.state,
  229|  1.31k|                                            classifier,
  230|    299|                                        )?
  231|       |                                        .0
  232|       |                                }
  233|  1.25k|                                _ if head_skip.is_accepting => {
  234|  1.25k|                                    engine.recorder().record_match(
  235|  1.25k|                                        next_idx,
  236|  1.25k|                                        Depth::ZERO,
  237|  1.25k|                                        crate::result::MatchedNodeType::Atomic,
  238|  1.25k|                                    )?;
  239|  1.25k|                                    let mut classifier = head_skip.simd.resume_structural_classification(classifier_state);
  240|  1.25k|                                    let next_structural = classifier.next()?;
  241|       |
  242|  1.25k|                                    match next_structural {
  243|  1.24k|                                        Some(s) => engine.recorder().record_value_terminator(s.idx(), Depth::ZERO)?,
  244|      7|                                        None => return Err(EngineError::MissingClosingCharacter()),
  245|       |                                    }
  246|  1.24k|                                    classifier.stop()
  247|       |                                }
  248|    265|                                _ => classifier_state,
  249|       |                            };
  250|       |
  251|      0|                            debug!("Quote classified up to {}", classifier_state.get_idx());
  252|  2.52k|                            idx = classifier_state.get_idx();
  253|  2.52k|
  254|  2.52k|                            first_block = classifier_state.block.map(|b| b.block.block);
  255|  2.52k|                            input_iter = classifier_state.iter.into_inner();
  256|       |                        }
  257|  1.26k|                        _ => idx += 1,
  258|       |                    }
  259|       |                } else {
  260|      0|                    debug!("No memmem matches, exiting");
  261|    722|                    break;
  262|    722|                }
  263|    722|            }
  264|    722|
  265|    722|            return Ok(());
_RNCINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  168|  2.82k|                                    .map(|b| ResumeClassifierBlockState { block: b, idx: 0 }),
_RNCINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB9_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2g_7padding19TwoSidesPaddedInputINtNtNtBd_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3I_5MatchEEKB1e_EINtNtNtNtBd_14classification6quotes7avx2_6421Avx2QuoteClassifier64B2b_EyKB1e_Es_0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  309|    268|                            .map(|b| ResumeClassifierBlockState {
  310|    268|                                block: b,
  311|    268|                                idx: remainder,
  312|    268|                            });
_RNCINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcntNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB2F_6quotes7avx2_6411ConstructorNtNtNtB2F_10structural7avx2_6411ConstructorNtNtNtB2F_5depth7avx2_6411ConstructorNtNtNtB2F_6memmem7avx2_6411ConstructorKj1_EINtNtB9_4main8ExecutorB1X_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6p_5MatchEEB2A_EB6k_Es_0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  254|  2.52k|                            first_block = classifier_state.block.map(|b| b.block.block);
_RINvNvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13head_skippingINtB7_8HeadSkipppKj40_E17run_head_skipping21avx2_pclmulqdq_popcnt10forward_toINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB2e_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3G_5MatchEEKB1c_EINtNtNtNtBb_14classification6quotes7avx2_6421Avx2QuoteClassifier64B29_EyKB1c_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  277|  4.13k|            fn forward_to<'i, I, Q, M, const N: usize>(state: &mut ResumeClassifierState<'i, I, Q, M, N>, index: usize) -> Result<(), InputError>
  278|  4.13k|            where
  279|  4.13k|                I: InputBlockIterator<'i, N>,
  280|  4.13k|                Q: QuoteClassifiedIterator<'i, I, M, N>,
  281|  4.13k|            {
  282|  4.13k|                let current_block_start = state.iter.get_offset();
  283|  4.13k|                let current_block_idx = state.block.as_ref().map_or(0, |b| b.idx);
  284|  4.13k|                let current_idx = current_block_start + current_block_idx;
  285|       |
  286|       |                debug!(
  287|      0|                    "Calling forward_to({index}) when the inner iter offset is {current_block_start} and block idx is {current_block_idx:?}"
  288|       |                );
  289|       |
  290|       |                // We want to move by this much forward, and delta > 0.
  291|  4.13k|                assert!(index > current_idx);
  292|  4.13k|                let delta = index - current_idx;
  293|  4.13k|
  294|  4.13k|                // First we virtually pretend to move *backward*, setting the index of the current block to zero,
  295|  4.13k|                // and adjust the delta to cover that distance. This makes calculations simpler.
  296|  4.13k|                // Then we need to skip zero or more blocks and set our self.block to the last one we visit.
  297|  4.13k|                let remaining = delta + current_block_idx;
  298|  4.13k|                let blocks_to_skip = remaining / N;
  299|  4.13k|                let remainder = remaining % N;
  300|  4.13k|
  301|  4.13k|                match state.block.as_mut() {
  302|  4.13k|                    Some(b) if blocks_to_skip == 0 => {
  303|  3.87k|                        b.idx = remaining;
  304|  3.87k|                    }
  305|    268|                    Some(_) => {
  306|    268|                        state.block = state
  307|    268|                            .iter
  308|    268|                            .offset(blocks_to_skip as isize)?
  309|    268|                            .map(|b| ResumeClassifierBlockState {
  310|       |                                block: b,
  311|       |                                idx: remainder,
  312|    268|                            });
  313|       |                    }
  314|      0|                    None => {
  315|      0|                        state.block = state
  316|      0|                            .iter
  317|      0|                            .offset((blocks_to_skip + 1) as isize)?
  318|      0|                            .map(|b| ResumeClassifierBlockState {
  319|       |                                block: b,
  320|       |                                idx: remainder,
  321|      0|                            });
  322|       |                    }
  323|       |                }
  324|       |
  325|      0|                debug!("forward_to({index}) results in idx moved to {}", state.get_idx());
  326|       |
  327|  4.13k|                Ok(())
  328|  4.13k|            }

_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack4peekCs8ZpES7bF61F_19fuzz_arbitrary_json:
  734|  32.6k|    fn peek(&mut self) -> Option<StackFrame> {
  735|  32.6k|        self.contents.last().copied()
  736|  32.6k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs8ZpES7bF61F_19fuzz_arbitrary_json:
  695|  2.30k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  696|  2.30k|        if self.depth != Depth::ZERO {
  697|    294|            Err(EngineError::MissingClosingCharacter())
  698|       |        } else {
  699|  2.01k|            Ok(())
  700|       |        }
  701|  2.30k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE8is_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
  656|  20.1k|    fn is_match(&self, idx: usize, member_name: &JsonString) -> Result<bool, EngineError> {
  657|  20.1k|        let len = member_name.quoted().len();
  658|       |
  659|       |        // The colon can be preceded by whitespace before the actual label.
  660|  20.1k|        let closing_quote_idx = match self.input.seek_backward(idx - 1, b'"') {
  661|  20.1k|            Some(x) => x,
  662|      0|            None => return Err(EngineError::MalformedStringQuotes(idx - 1)),
  663|       |        };
  664|       |
  665|       |        // First check if the length matches.
  666|  20.1k|        if closing_quote_idx + 1 < len {
  667|    390|            return Ok(false);
  668|  19.7k|        }
  669|  19.7k|
  670|  19.7k|        // Do the expensive memcmp.
  671|  19.7k|        let start_idx = closing_quote_idx + 1 - len;
  672|  19.7k|        self.input
  673|  19.7k|            .is_member_match(start_idx, closing_quote_idx + 1, member_name)
  674|  19.7k|            .map_err(|x| x.into().into())
  675|  20.1k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs8ZpES7bF61F_19fuzz_arbitrary_json:
  644|  21.4k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  645|  21.4k|        if self.depth == Depth::ZERO {
  646|  2.06k|            None
  647|       |        } else {
  648|  19.3k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  649|       |
  650|  19.3k|            (char == b':').then_some(char_idx)
  651|       |        }
  652|  21.4k|    }
_RINvXs_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECs8ZpES7bF61F_19fuzz_arbitrary_json:
  174|  2.80k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  175|  2.80k|    where
  176|  2.80k|        I: Input,
  177|  2.80k|        S: Sink<Match>,
  178|  2.80k|    {
  179|  2.80k|        if self.automaton.is_select_root_query() {
  180|    738|            return select_root_query::match_(input, sink);
  181|  2.06k|        }
  182|  2.06k|        if self.automaton.is_empty_query() {
  183|      0|            return Ok(());
  184|  2.06k|        }
  185|  2.06k|
  186|  2.06k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  187|  2.06k|        config_simd!(self.simd => |simd| {
  188|  2.06k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  189|  2.06k|            executor.run()
  190|    345|        })?;
  191|       |
  192|  1.72k|        Ok(())
  193|  2.80k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs8ZpES7bF61F_19fuzz_arbitrary_json:
  346|  26.5k|    fn handle_colon(
  347|  26.5k|        &mut self,
  348|  26.5k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  349|  26.5k|        idx: usize,
  350|  26.5k|    ) -> Result<(), EngineError> {
  351|      0|        debug!("Colon");
  352|       |
  353|       |        // Lookahead to see if the next character is an opening.
  354|       |        // If yes, the logic will be handled in handle_opening and we bail.
  355|  26.5k|        if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  356|  26.5k|            if c == b'{' || c == b'[' {
  357|  12.8k|                return Ok(());
  358|  13.7k|            }
  359|      0|        }
  360|       |
  361|       |        // Atomic values are only relevant if the automaton accepts.
  362|       |        // Look at accepting transitions and try to match them with the label.
  363|  13.7k|        let mut any_matched = false;
  364|       |
  365|  13.7k|        for &(member_name, target) in self.automaton[self.state].member_transitions() {
  366|  11.8k|            if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  367|  4.81k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  368|  4.81k|                any_matched = true;
  369|  4.81k|                break;
  370|  6.99k|            }
  371|       |        }
  372|       |        // Alternatively, match consider the fallback transition if it accepts.
  373|  13.7k|        let fallback_state = self.automaton[self.state].fallback_state();
  374|  13.7k|        if !any_matched && self.automaton.is_accepting(fallback_state) {
  375|  1.26k|            self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  376|  12.4k|        }
  377|       |
  378|       |        // Tail skipping.
  379|       |        // If we are in a unitary state and have matched a transition, we can skip the rest of the subtree,
  380|       |        // since member names are unique.
  381|  13.7k|        if any_matched && self.automaton.is_unitary(self.state) {
  382|       |            // We need to look ahead for some bookkeeping.
  383|       |            // 1. If the next event is closing then there's no reason to spin up the skipping machinery,
  384|       |            //    since it would exit immediately anyway.
  385|       |            // 2. If the next character is a comma then we need to notify the recorder.
  386|       |            // 3. Realistically, a colon should never happen. An opening is not interesting and will be skipped.
  387|     53|            self.next_event = classifier.next()?;
  388|     53|            match self.next_event {
  389|       |                None | Some(Structural::Closing(_, _)) => {
  390|     18|                    return Ok(());
  391|       |                }
  392|     35|                Some(Structural::Comma(idx)) => self.recorder.record_value_terminator(idx, self.depth)?,
  393|      0|                Some(Structural::Colon(_) | Structural::Opening(_, _)) => (),
  394|       |            }
  395|     35|            let bracket_type = self.current_node_bracket_type();
  396|      0|            debug!("Skipping unique state from {bracket_type:?}");
  397|     35|            let stop_at = classifier.skip(bracket_type)?;
  398|       |            // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  399|       |            // handle a closing, so we set the lookahead to the correct character.
  400|     35|            self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  401|  13.7k|        }
  402|       |
  403|  13.7k|        Ok(())
  404|  26.5k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs8ZpES7bF61F_19fuzz_arbitrary_json:
  296|  2.34k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  297|  2.34k|        dispatch_simd!(self.simd; self, classifier =>
  298|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  299|       |        where
  300|       |            'i: 'r,
  301|       |            I: Input,
  302|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  303|       |            V: Simd
  304|       |        {
  305|       |            loop {
  306|       |                // Fetch the next element only if the lookahead is empty.
  307|       |                if eng.next_event.is_none() {
  308|       |                    eng.next_event = match classifier.next() {
  309|       |                        Ok(e) => e,
  310|       |                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|       |                }
  313|       |                if let Some(event) = eng.next_event.take() {
  314|       |                    debug!("====================");
  315|       |                    debug!("Event = {:?}", event);
  316|       |                    debug!("Depth = {:?}", eng.depth);
  317|       |                    debug!("Stack = {:?}", eng.stack);
  318|       |                    debug!("State = {:?}", eng.state);
  319|       |                    debug!("====================");
  320|       |
  321|       |                    match event {
  322|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|       |                        Structural::Closing(_, idx) => {
  326|       |                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|       |                            if eng.depth == Depth::ZERO {
  329|       |                                break;
  330|       |                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|       |                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|       |            Ok(())
  339|       |        })
  340|  2.34k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs8ZpES7bF61F_19fuzz_arbitrary_json:
  570|  32.6k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  571|      0|        debug!("Closing, decreasing depth and popping stack.");
  572|       |
  573|  32.6k|        self.depth
  574|  32.6k|            .decrement()
  575|  32.6k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  576|  32.6k|        self.recorder.record_value_terminator(idx, self.depth)?;
  577|       |
  578|       |        // Restore the state from the stack if the transition was not a loop.
  579|  32.6k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  580|  25.5k|            self.state = stack_frame.state;
  581|  25.5k|            self.is_list = stack_frame.is_list;
  582|  25.5k|            self.array_count = stack_frame.array_count;
  583|       |
  584|      0|            debug!("Restored array count to {}", self.array_count);
  585|       |
  586|       |            // We have taken a transition when entering the just-closed subtree. If the state is unitary
  587|       |            // we can just skip the rest of the current subtree.
  588|  25.5k|            if self.automaton.is_unitary(self.state) {
  589|    180|                let bracket_type = self.current_node_bracket_type();
  590|      0|                debug!("Skipping unique state from {bracket_type:?}");
  591|    180|                let close_idx = classifier.skip(bracket_type)?;
  592|       |                // Skipping stops at the closing character *and consumes it*. We still need the main loop to properly
  593|       |                // handle a closing, so we set the lookahead to the correct character.
  594|    180|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  595|    180|                return Ok(());
  596|  25.3k|            }
  597|  7.03k|        }
  598|       |
  599|  32.4k|        if self.is_list {
  600|  17.2k|            if self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  601|  9.34k|                || self.automaton.has_any_array_item_transition(self.state)
  602|  14.1k|            {
  603|  14.1k|                classifier.turn_commas_on(idx);
  604|  14.1k|            } else {
  605|  3.14k|                classifier.turn_commas_off();
  606|  3.14k|            }
  607|  15.1k|        } else if self.automaton.has_transition_to_accepting(self.state) {
  608|  9.97k|            classifier.turn_colons_and_commas_on(idx);
  609|  9.97k|        } else {
  610|  5.18k|            classifier.turn_colons_off();
  611|  5.18k|        }
  612|       |
  613|  32.4k|        Ok(())
  614|  32.6k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs8ZpES7bF61F_19fuzz_arbitrary_json:
  739|  32.6k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  740|  32.6k|        if let Some(stack_frame) = self.peek() {
  741|  30.1k|            if depth <= stack_frame.depth {
  742|  25.5k|                return self.contents.pop();
  743|  4.54k|            }
  744|  2.49k|        }
  745|  7.03k|        None
  746|  32.6k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE25current_node_bracket_typeCs8ZpES7bF61F_19fuzz_arbitrary_json:
  704|    215|    fn current_node_bracket_type(&self) -> BracketType {
  705|    215|        if self.is_list {
  706|      1|            BracketType::Square
  707|       |        } else {
  708|    214|            BracketType::Curly
  709|       |        }
  710|    215|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E14run_on_subtreeCs8ZpES7bF61F_19fuzz_arbitrary_json:
  761|  1.31k|    fn run_on_subtree(
  762|  1.31k|        &mut self,
  763|  1.31k|        next_event: Structural,
  764|  1.31k|        state: State,
  765|  1.31k|        structural_classifier: V::StructuralClassifier<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>>,
  766|  1.31k|    ) -> Result<ResumeState<'i, I::BlockIterator<'i, 'r, R, BLOCK_SIZE>, V, MaskType>, EngineError> {
  767|  1.31k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  768|  1.31k|
  769|  1.31k|        self.state = state;
  770|  1.31k|        self.next_event = Some(next_event);
  771|  1.31k|
  772|  1.31k|        self.run_on_subtree(&mut classifier)?;
  773|  1.30k|        self.verify_subtree_closed()?;
  774|       |
  775|  1.01k|        Ok(ResumeState(classifier.stop()))
  776|  1.31k|    }
_RINvNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  304|  2.34k|        {
  305|   122k|            loop {
  306|   122k|                // Fetch the next element only if the lookahead is empty.
  307|   122k|                if eng.next_event.is_none() {
  308|   121k|                    eng.next_event = match classifier.next() {
  309|   121k|                        Ok(e) => e,
  310|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  311|       |                    };
  312|  1.54k|                }
  313|   122k|                if let Some(event) = eng.next_event.take() {
  314|      0|                    debug!("====================");
  315|      0|                    debug!("Event = {:?}", event);
  316|      0|                    debug!("Depth = {:?}", eng.depth);
  317|      0|                    debug!("Stack = {:?}", eng.stack);
  318|      0|                    debug!("State = {:?}", eng.state);
  319|      0|                    debug!("====================");
  320|       |
  321|   122k|                    match event {
  322|  26.5k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  323|  18.4k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  324|  44.8k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  325|  32.6k|                        Structural::Closing(_, idx) => {
  326|  32.6k|                            eng.handle_closing(classifier, idx)?;
  327|       |
  328|  32.6k|                            if eng.depth == Depth::ZERO {
  329|  1.81k|                                break;
  330|  30.7k|                            }
  331|       |                        }
  332|       |                    }
  333|       |                } else {
  334|    487|                    break;
  335|       |                }
  336|       |            }
  337|       |
  338|  2.30k|            Ok(())
_RINvNtNtCs8dUjriG0K0U_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
  237|  2.06k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  238|  2.06k|    automaton: &'i Automaton<'q>,
  239|  2.06k|    input: &'i I,
  240|  2.06k|    recorder: &'r R,
  241|  2.06k|    simd: V,
  242|  2.06k|) -> Executor<'i, 'q, 'r, I, R, V>
  243|  2.06k|where
  244|  2.06k|    I: Input,
  245|  2.06k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  246|  2.06k|{
  247|  2.06k|    Executor {
  248|  2.06k|        depth: Depth::ZERO,
  249|  2.06k|        state: automaton.initial_state(),
  250|  2.06k|        stack: SmallStack::new(),
  251|  2.06k|        automaton,
  252|  2.06k|        input,
  253|  2.06k|        recorder,
  254|  2.06k|        simd,
  255|  2.06k|        next_event: None,
  256|  2.06k|        is_list: false,
  257|  2.06k|        array_count: JsonUInt::ZERO,
  258|  2.06k|    }
  259|  2.06k|}
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs8ZpES7bF61F_19fuzz_arbitrary_json:
  619|  42.2k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  620|  42.2k|        let target_is_list = opening == BracketType::Square;
  621|  42.2k|
  622|  42.2k|        let fallback = self.automaton[self.state].fallback_state();
  623|  42.2k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  624|  42.2k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  625|       |
  626|       |        // To keep the stack small, we only push if the state only changes in any meaningful way.
  627|  42.2k|        if target != self.state || target_is_list != self.is_list || searching_list {
  628|       |            debug!(
  629|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  630|       |                self.state, self.array_count
  631|       |            );
  632|       |
  633|  35.4k|            self.stack.push(StackFrame {
  634|  35.4k|                depth: *self.depth,
  635|  35.4k|                state: self.state,
  636|  35.4k|                is_list: self.is_list,
  637|  35.4k|                array_count: self.array_count,
  638|  35.4k|            });
  639|  35.4k|            self.state = target;
  640|  6.80k|        }
  641|  42.2k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   81|  2.86k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   82|  2.86k|        let automaton = Automaton::new(query)?;
   83|      0|        debug!("DFA:\n {}", automaton);
   84|  2.80k|        let simd = simd::configure();
   85|  2.80k|        log::info!("SIMD configuration:\n {}", simd);
   86|  2.80k|        Ok(MainEngine { automaton, simd })
   87|  2.86k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs8ZpES7bF61F_19fuzz_arbitrary_json:
  447|  44.8k|    fn handle_opening(
  448|  44.8k|        &mut self,
  449|  44.8k|        classifier: &mut Classifier!(),
  450|  44.8k|        bracket_type: BracketType,
  451|  44.8k|        idx: usize,
  452|  44.8k|    ) -> Result<(), EngineError> {
  453|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  454|       |
  455|       |        // Check all transitions relevant to the current subtree - array if in list, member if not.
  456|  44.8k|        let mut any_matched = false;
  457|  44.8k|        if self.is_list {
  458|  23.4k|            for trans in self.automaton[self.state].array_transitions() {
  459|  6.93k|                if trans.matches(self.array_count) {
  460|  2.95k|                    let target = trans.target_state();
  461|  2.95k|                    any_matched = true;
  462|  2.95k|                    self.transition_to(target, bracket_type);
  463|  2.95k|                    if self.automaton.is_accepting(target) {
  464|      0|                        debug!("Accept {idx}");
  465|  1.51k|                        self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  466|  1.43k|                    }
  467|  2.95k|                    break;
  468|  3.98k|                }
  469|       |            }
  470|       |        } else {
  471|  21.4k|            let colon_idx = self.find_preceding_colon(idx);
  472|       |
  473|  21.4k|            for &(member_name, target) in self.automaton[self.state].member_transitions() {
  474|  10.1k|                if let Some(colon_idx) = colon_idx {
  475|  8.70k|                    if self.is_match(colon_idx, member_name)? {
  476|  4.84k|                        any_matched = true;
  477|  4.84k|                        self.transition_to(target, bracket_type);
  478|  4.84k|                        if self.automaton.is_accepting(target) {
  479|      0|                            debug!("Accept {idx}");
  480|  2.99k|                            self.record_match_detected_at(colon_idx + 1, NodeType::Complex(bracket_type))?;
  481|  1.85k|                        }
  482|  4.84k|                        break;
  483|  3.85k|                    }
  484|  1.44k|                }
  485|       |            }
  486|       |        }
  487|       |
  488|       |        // If nothing matched trigger the fallback transition.
  489|  44.8k|        if !any_matched && self.depth != Depth::ZERO {
  490|  34.8k|            let fallback = self.automaton[self.state].fallback_state();
  491|      0|            debug!("Falling back to {fallback}");
  492|       |
  493|  34.8k|            if self.automaton.is_rejecting(fallback) {
  494|       |                // Tail skipping. Skip the entire subtree. The skipping consumes the closing character.
  495|       |                // We still need to notify the recorder - in case the value being skipped was actually accepted.
  496|    366|                let closing_idx = classifier.skip(bracket_type)?;
  497|    366|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  498|  34.4k|            } else {
  499|  34.4k|                self.transition_to(fallback, bracket_type);
  500|  34.4k|            }
  501|  34.4k|
  502|  34.4k|            if self.automaton.is_accepting(fallback) {
  503|  14.5k|                self.record_match_detected_at(idx, NodeType::Complex(bracket_type))?;
  504|  19.9k|            }
  505|  9.95k|        }
  506|       |
  507|       |        // At this point we will be actually digging into the subtree.
  508|  44.4k|        self.depth
  509|  44.4k|            .increment()
  510|  44.4k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  511|       |
  512|  44.4k|        self.is_list = bracket_type == BracketType::Square;
  513|  44.4k|        let mut needs_commas = false;
  514|  44.4k|
  515|  44.4k|        // If we're starting a list, there's a very hairy problem of accepting the first element in the list,
  516|  44.4k|        // if it is atomic. We process objects and arrays on their opening character, and atomics on their preceding comma.
  517|  44.4k|        // The first element doesn't have a preceding comma, so if it needs to be accepted we need to handle it now.
  518|  44.4k|        //
  519|  44.4k|        // Additionally, whether to enable commas or not depends on whether an item of the list can ever be accepted.
  520|  44.4k|        if self.is_list {
  521|  24.2k|            let fallback = self.automaton[self.state].fallback_state();
  522|  24.2k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  523|  24.2k|
  524|  24.2k|            if is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state) {
  525|  20.0k|                needs_commas = true;
  526|  20.0k|                self.array_count = JsonUInt::ZERO;
  527|      0|                debug!("Initialized array count to {}", self.array_count);
  528|       |
  529|  20.0k|                let wants_first_item =
  530|  20.0k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  531|       |
  532|  20.0k|                if wants_first_item {
  533|  15.1k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  534|       |
  535|       |                    // We only handle the match if it exists and is atomic. The possible cases
  536|       |                    // in a well-formed JSON for the next character are:
  537|       |                    // - '[', for an array value
  538|       |                    // - '{' for an object value
  539|       |                    // - ']' if the list was empty and has no values
  540|       |                    // - otherwise it's the first character of an atomic value.
  541|  15.1k|                    match next {
  542|  13.2k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  543|  1.88k|                        Some((value_idx, _)) => {
  544|  1.88k|                            self.record_match_detected_at(value_idx, NodeType::Atomic)?;
  545|       |                        }
  546|      0|                        _ => (),
  547|       |                    }
  548|  4.91k|                }
  549|  4.23k|            }
  550|  20.1k|        }
  551|       |
  552|       |        // Decide which structural characters need to be handled in this subtree.
  553|  44.4k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  554|  12.9k|            // When accepting values in an object we need colons for the member names,
  555|  12.9k|            // and commas to report where atomic values end (for the Recorder).
  556|  12.9k|            // This is the only case that needs colons.
  557|  12.9k|            classifier.turn_colons_and_commas_on(idx);
  558|  31.4k|        } else if needs_commas {
  559|  20.0k|            classifier.turn_colons_off();
  560|  20.0k|            classifier.turn_commas_on(idx);
  561|  20.0k|        } else {
  562|  11.3k|            classifier.turn_colons_and_commas_off();
  563|  11.3k|        }
  564|       |
  565|  44.4k|        Ok(())
  566|  44.8k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack4pushCs8ZpES7bF61F_19fuzz_arbitrary_json:
  749|  35.4k|    fn push(&mut self, value: StackFrame) {
  750|  35.4k|        self.contents.push(value)
  751|  35.4k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs8ZpES7bF61F_19fuzz_arbitrary_json:
  282|  1.03k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  283|  1.03k|        let iter = self.input.iter_blocks(self.recorder);
  284|  1.03k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  285|  1.03k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  286|  1.03k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  287|  1.03k|
  288|  1.03k|        self.run_on_subtree(&mut classifier)?;
  289|       |
  290|    998|        self.verify_subtree_closed()
  291|  1.03k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs8ZpES7bF61F_19fuzz_arbitrary_json:
  410|  18.4k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  411|      0|        debug!("Comma");
  412|       |
  413|  18.4k|        self.recorder.record_value_terminator(idx, self.depth)?;
  414|       |
  415|  18.4k|        if self.is_list {
  416|       |            // If the index increment exceeds the field's limit, give up.
  417|  10.5k|            if self.array_count.try_increment().is_err() {
  418|      0|                return Ok(());
  419|  10.5k|            }
  420|       |
  421|       |            // Lookahead to see if the next character is an opening.
  422|       |            // If yes, the logic will be handled in handle_opening and we bail.
  423|  10.5k|            if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  424|  10.5k|                if c == b'{' || c == b'[' {
  425|  3.83k|                    return Ok(());
  426|  6.74k|                }
  427|      0|            }
  428|       |
  429|       |            // Check the fallback transition first since it's cheap, then check for the specific index.
  430|  6.74k|            let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  431|  6.74k|
  432|  6.74k|            if is_fallback_accepting
  433|  2.92k|                || self
  434|  2.92k|                    .automaton
  435|  2.92k|                    .has_array_index_transition_to_accepting(self.state, &self.array_count)
  436|       |            {
  437|      0|                debug!("Accepting list item on comma.");
  438|  3.97k|                self.record_match_detected_at(idx + 1, NodeType::Atomic)?;
  439|  2.77k|            }
  440|  7.87k|        }
  441|       |
  442|  14.6k|        Ok(())
  443|  18.4k|    }
_RNCNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  686|  30.9k|        .map(|x| x.0);
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCs8ZpES7bF61F_19fuzz_arbitrary_json:
  268|  2.06k|    fn run(mut self) -> Result<(), EngineError> {
  269|  2.06k|        // First we check if head-skipping is possible for a given query automaton.
  270|  2.06k|        // If yes, delegate the control to HeadSkip and give it full access to this Executor.
  271|  2.06k|        // Otherwise, we run our normal one-shot engine.
  272|  2.06k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  273|  2.06k|
  274|  2.06k|        match mb_head_skip {
  275|  1.02k|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  276|  1.03k|            None => self.run_and_exit(),
  277|       |        }
  278|  2.06k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EEINtNtB7_13head_skipping11CanHeadSkipBX_B1A_B30_E8recorderCs8ZpES7bF61F_19fuzz_arbitrary_json:
  778|  4.59k|    fn recorder(&mut self) -> &'r R {
  779|  4.59k|        self.recorder
  780|  4.59k|    }
_RNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs8ZpES7bF61F_19fuzz_arbitrary_json:
  678|  30.9k|    fn record_match_detected_at(&mut self, start_idx: usize, ty: NodeType) -> Result<(), EngineError> {
  679|      0|        debug!("Reporting result somewhere after {start_idx} with node type {ty:?}");
  680|       |
  681|  30.9k|        let index = match ty {
  682|  4.01k|            NodeType::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  683|  15.0k|            NodeType::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  684|  11.9k|            NodeType::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  685|       |        }
  686|  30.9k|        .map(|x| x.0);
  687|  30.9k|
  688|  30.9k|        match index {
  689|  30.9k|            Some(idx) => self.recorder.record_match(idx, self.depth, ty.into()),
  690|      0|            None => Err(EngineError::MissingItem()),
  691|       |        }
  692|  30.9k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8NodeTypeE4from:
  791|  30.9k|    fn from(value: NodeType) -> Self {
  792|  30.9k|        match value {
  793|  11.9k|            NodeType::Atomic => Self::Atomic,
  794|  19.0k|            NodeType::Complex(_) => Self::Complex,
  795|       |        }
  796|  30.9k|    }
_RNCNvMs0_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  510|     44|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6engine4mainNtB5_10SmallStack3new:
  729|  2.06k|    fn new() -> Self {
  730|  2.06k|        Self { contents: smallvec![] }
  731|  2.06k|    }

_RNCINvNtNtCs8dUjriG0K0U_8rsonpath6engine17select_root_query6match_NtNtNtB8_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB8_6result5MatchEE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  100|  83.5k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
_RINvNtNtCs8dUjriG0K0U_8rsonpath6engine17select_root_query6match_NtNtNtB6_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB6_6result5MatchEECs8ZpES7bF61F_19fuzz_arbitrary_json:
   84|    738|pub(super) fn match_<I, S>(input: &I, sink: &mut S) -> Result<(), EngineError>
   85|    738|where
   86|    738|    I: Input,
   87|    738|    S: Sink<Match>,
   88|    738|{
   89|    738|    // For a full match we need to copy the entire input starting from first non-whitespace,
   90|    738|    // and then trim the whitespace from the end. This might be slow if the document is excessively
   91|    738|    // padded with whitespace at start and/or end, but that's a pathological case.
   92|    738|    let mut iter = input.iter_blocks::<_, BLOCK_SIZE>(&EmptyRecorder);
   93|    738|    let mut res: Vec<u8> = vec![];
   94|    738|    let mut first_significant_idx = None;
   95|    738|    let mut offset = 0;
   96|       |
   97|  10.4k|    while let Some(block) = iter.next().e()? {
   98|  9.74k|        if first_significant_idx.is_none() {
   99|       |            // Start of the root not found yet, look for it.
  100|  1.69k|            first_significant_idx = block.iter().position(|&x| !is_json_whitespace(x));
  101|       |
  102|  1.69k|            if let Some(first_idx) = first_significant_idx {
  103|    738|                // Start of the root found in this block, copy the relevant part.
  104|    738|                res.extend(&block[first_idx..]);
  105|    958|            } else {
  106|    958|                offset += block.len();
  107|    958|            }
  108|  8.04k|        } else {
  109|  8.04k|            // Start of the root was already found, now we are copying everything.
  110|  8.04k|            res.extend(&*block);
  111|  8.04k|        }
  112|       |    }
  113|       |
  114|    738|    if let Some(start) = first_significant_idx {
  115|       |        // Trim whitespace if we have a result.
  116|  78.7k|        while !res.is_empty() && is_json_whitespace(res[res.len() - 1]) {
  117|  78.0k|            res.pop();
  118|  78.0k|        }
  119|       |
  120|    738|        let actual_start = start + offset - input.leading_padding_len();
  121|    738|        sink.add_match(Match::from_start_and_bytes(actual_start, res))
  122|    738|            .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  123|      0|    }
  124|       |
  125|    738|    Ok(())
  126|    738|}

_RINvNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB5_8TailSkippINtYpNtNtNtB9_14classification4simd4Simd16QuotesClassifierpEINtYpB1d_20StructuralClassifierpEpKj40_E4skip21avx2_pclmulqdq_popcntINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB3h_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4J_5MatchEEKB2F_EINtB1f_12ResolvedSimdNtNtNtB1h_6quotes7avx2_6411ConstructorNtNtNtB1h_10structural7avx2_6411ConstructorNtNtNtB1h_5depth7avx2_6411ConstructorNtNtNtB1h_6memmem7avx2_6411ConstructorKj1_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   44|    581|        {
   45|    581|            debug!("Skipping");
   46|    581|            let mut idx = 0;
   47|    581|            let mut err = None;
   48|    581|
   49|    581|            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|    581|            tail_skip.classifier = Some('a: {
   52|    581|                let resume_state = classifier.stop();
   53|    581|                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|    581|                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|    581|                let mut current_vector = match first_vector {
   57|    452|                    Some(v) => Some(v),
   58|    129|                    None => match depth_classifier.next() {
   59|    129|                        Ok(v) => v,
   60|      0|                        Err(e) => {
   61|      0|                            err = Some(e);
   62|      0|                            let resume_state = depth_classifier.stop(None);
   63|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|    581|                let mut current_depth = 1;
   68|       |
   69|  3.18k|                'outer: while let Some(ref mut vector) = current_vector {
   70|  3.18k|                    vector.add_depth(current_depth);
   71|       |
   72|      0|                    debug!("Fetched vector, current depth is {current_depth}");
   73|      0|                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|  3.18k|                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|  2.20k|                        while vector.advance_to_next_depth_decrease() {
   77|  1.93k|                            if vector.get_depth() == 0 {
   78|      0|                                debug!("Encountered depth 0, breaking.");
   79|    581|                                break 'outer;
   80|  1.35k|                            }
   81|       |                        }
   82|  2.34k|                    }
   83|       |
   84|  2.60k|                    current_depth = vector.depth_at_end();
   85|  2.60k|                    current_vector = match depth_classifier.next() {
   86|  2.60k|                        Ok(v) => v,
   87|      0|                        Err(e) => {
   88|      0|                            err = Some(e);
   89|      0|                            let resume_state = depth_classifier.stop(None);
   90|      0|                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|      0|                debug!("Skipping complete, resuming structural classification.");
   96|    581|                let resume_state = depth_classifier.stop(current_vector);
   97|      0|                debug!("Finished at {}", resume_state.get_idx());
   98|    581|                idx = resume_state.get_idx();
   99|    581|                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|    581|            if let Some(err) = err {
  103|      0|                Err(err.into())
  104|       |            } else {
  105|    581|                Ok(idx)
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   28|  2.34k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  2.34k|        Self {
   30|  2.34k|            classifier: Some(classifier),
   31|  2.34k|            simd,
   32|  2.34k|            _phantom: (PhantomData, PhantomData),
   33|  2.34k|        }
   34|  2.34k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs8ZpES7bF61F_19fuzz_arbitrary_json:
  138|   218k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   218k|        self.classifier
  140|   218k|            .as_mut()
  141|   218k|            .expect("tail skip must always hold a classifier")
  142|   218k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4skipCs8ZpES7bF61F_19fuzz_arbitrary_json:
   36|    581|    pub(crate) fn skip(&mut self, opening: BracketType) -> Result<usize, EngineError> {
   37|    581|        dispatch_simd!(self.simd; self, opening =>
   38|       |        fn <'i, I, V>(
   39|       |            tail_skip: &mut TailSkip<'i, I, V::QuotesClassifier<'i, I>, V::StructuralClassifier<'i, I>, V, BLOCK_SIZE>,
   40|       |            opening: BracketType) -> Result<usize, EngineError>
   41|       |        where
   42|       |            I: InputBlockIterator<'i, BLOCK_SIZE>,
   43|       |            V: Simd
   44|       |        {
   45|       |            debug!("Skipping");
   46|       |            let mut idx = 0;
   47|       |            let mut err = None;
   48|       |
   49|       |            let classifier = tail_skip.classifier.take().expect("tail skip must always hold a classifier");
   50|       |
   51|       |            tail_skip.classifier = Some('a: {
   52|       |                let resume_state = classifier.stop();
   53|       |                let DepthIteratorResumeOutcome(first_vector, mut depth_classifier) =
   54|       |                    tail_skip.simd.resume_depth_classification(resume_state, opening);
   55|       |
   56|       |                let mut current_vector = match first_vector {
   57|       |                    Some(v) => Some(v),
   58|       |                    None => match depth_classifier.next() {
   59|       |                        Ok(v) => v,
   60|       |                        Err(e) => {
   61|       |                            err = Some(e);
   62|       |                            let resume_state = depth_classifier.stop(None);
   63|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   64|       |                        }
   65|       |                    },
   66|       |                };
   67|       |                let mut current_depth = 1;
   68|       |
   69|       |                'outer: while let Some(ref mut vector) = current_vector {
   70|       |                    vector.add_depth(current_depth);
   71|       |
   72|       |                    debug!("Fetched vector, current depth is {current_depth}");
   73|       |                    debug!("Estimate: {}", vector.estimate_lowest_possible_depth());
   74|       |
   75|       |                    if vector.estimate_lowest_possible_depth() <= 0 {
   76|       |                        while vector.advance_to_next_depth_decrease() {
   77|       |                            if vector.get_depth() == 0 {
   78|       |                                debug!("Encountered depth 0, breaking.");
   79|       |                                break 'outer;
   80|       |                            }
   81|       |                        }
   82|       |                    }
   83|       |
   84|       |                    current_depth = vector.depth_at_end();
   85|       |                    current_vector = match depth_classifier.next() {
   86|       |                        Ok(v) => v,
   87|       |                        Err(e) => {
   88|       |                            err = Some(e);
   89|       |                            let resume_state = depth_classifier.stop(None);
   90|       |                            break 'a tail_skip.simd.resume_structural_classification(resume_state);
   91|       |                        }
   92|       |                    };
   93|       |                }
   94|       |
   95|       |                debug!("Skipping complete, resuming structural classification.");
   96|       |                let resume_state = depth_classifier.stop(current_vector);
   97|       |                debug!("Finished at {}", resume_state.get_idx());
   98|       |                idx = resume_state.get_idx();
   99|       |                tail_skip.simd.resume_structural_classification(resume_state)
  100|       |            });
  101|       |
  102|       |            if let Some(err) = err {
  103|       |                Err(err.into())
  104|       |            } else {
  105|       |                Ok(idx)
  106|       |            }
  107|       |        })
  108|    581|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E4stopCs8ZpES7bF61F_19fuzz_arbitrary_json:
  110|  1.01k|    pub(crate) fn stop(self) -> ResumeClassifierState<'i, I, V::QuotesClassifier<'i, I>, MaskType, BLOCK_SIZE> {
  111|  1.01k|        self.classifier.expect("tail skip must always hold a classifier").stop()
  112|  1.01k|    }

_RNvXNtCs8dUjriG0K0U_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs8ZpES7bF61F_19fuzz_arbitrary_json:
  207|  53.8k|    fn halves(&self) -> (&[u8], &[u8]) {
  208|  53.8k|        assert_eq!(N % 2, 0);
  209|  53.8k|        (&self[..N / 2], &self[N / 2..])
  210|  53.8k|    }
_RINvNtCs8dUjriG0K0U_8rsonpath5input8align_toKj80_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  226|  2.86k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  227|  2.86k|    let ptr = bytes.as_ptr();
  228|  2.86k|    let offset = ptr.align_offset(N);
  229|  2.86k|    if offset > bytes.len() {
  230|  1.12k|        (bytes, &[], &[])
  231|       |    } else {
  232|  1.74k|        let (left, rest) = bytes.split_at(offset);
  233|  1.74k|        let middle_len = (rest.len() / N) * N;
  234|  1.74k|        let (middle, right) = rest.split_at(middle_len);
  235|  1.74k|
  236|  1.74k|        (left, middle, right)
  237|       |    }
  238|  2.86k|}

_RINvNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathNtNtNtBc_6result5empty13EmptyRecorderKj40_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  262|  3.69k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  3.69k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  3.69k|        ) -> Option<&'a [u8]>
  265|  3.69k|        where
  266|  3.69k|            R: InputRecorder<&'a [u8]>,
  267|  3.69k|        {
  268|  3.69k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  3.69k|            if let Some(b) = block {
  271|  2.95k|                iter.recorder.record_block_start(b);
  272|  2.95k|                iter.idx += N;
  273|  2.95k|            }
  274|       |
  275|  3.69k|            block
  276|  3.69k|        }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   45|  2.86k|    pub fn new(bytes: &'a [u8]) -> Self {
   46|  2.86k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   47|  2.86k|        let first_block = PaddedBlock::pad_first_block(first);
   48|  2.86k|        let last_block = PaddedBlock::pad_last_block(last);
   49|  2.86k|
   50|  2.86k|        Self {
   51|  2.86k|            middle_bytes: middle,
   52|  2.86k|            first_block,
   53|  2.86k|            last_block,
   54|  2.86k|        }
   55|  2.86k|    }
_RINvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB8_13BorrowedBytesNtBa_5Input12seek_forward11handle_lastKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  161|     11|        fn handle_last<const N: usize>(
  162|     11|            last_block: &PaddedBlock,
  163|     11|            offset: usize,
  164|     11|            needles: [u8; N],
  165|     11|        ) -> Option<(usize, u8)> {
  166|     11|            last_block
  167|     11|                .bytes()
  168|     11|                .seek_forward(0, needles)
  169|     11|                .map(|(x, y)| (x + offset, y))
  170|     11|        }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksNtNtNtBa_6result5empty13EmptyRecorderKj40_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  115|    738|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|    738|    where
  117|    738|        R: InputRecorder<&'b [u8]>,
  118|    738|    {
  119|    738|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|    738|
  121|    738|        Self::BlockIterator {
  122|    738|            idx: 0,
  123|    738|            input: padded_input,
  124|    738|            recorder,
  125|    738|        }
  126|    738|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
  174|  71.1k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  175|  71.1k|        return Ok(
  176|  71.1k|            // The hot path is when we start and end within the middle section.
  177|  71.1k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  178|  71.1k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  179|  71.1k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  180|  59.1k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  181|  59.0k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  182|     39|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  183|       |                }
  184|       |            } else {
  185|  12.0k|                self.as_padded_input().seek_non_whitespace_forward(from)
  186|       |            },
  187|       |        );
  188|       |
  189|       |        #[cold]
  190|       |        #[inline(never)]
  191|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|       |            last_block
  193|       |                .bytes()
  194|       |                .seek_non_whitespace_forward(0)
  195|       |                .map(|(x, y)| (x + offset, y))
  196|       |        }
  197|  71.1k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
  200|  19.3k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  201|  19.3k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  202|  17.6k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  203|  17.6k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  204|     13|                None => handle_first(&self.first_block),
  205|       |            }
  206|       |        } else {
  207|  1.70k|            self.as_padded_input().seek_non_whitespace_backward(from)
  208|       |        };
  209|       |
  210|       |        #[cold]
  211|       |        #[inline(never)]
  212|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|       |        }
  215|  19.3k|    }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1z_5MatchEEKj40_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  115|  2.06k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|  2.06k|    where
  117|  2.06k|        R: InputRecorder<&'b [u8]>,
  118|  2.06k|    {
  119|  2.06k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|  2.06k|
  121|  2.06k|        Self::BlockIterator {
  122|  2.06k|            idx: 0,
  123|  2.06k|            input: padded_input,
  124|  2.06k|            recorder,
  125|  2.06k|        }
  126|  2.06k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input15is_member_match:
  218|  35.8k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> Result<bool, Self::Error> {
  219|  35.8k|        debug_assert!(from < to);
  220|       |        // The hot path is when we're checking fully within the middle section.
  221|       |        // This has to be as fast as possible, so the "cold" path referring to the TwoSidesPaddedInput
  222|       |        // impl is explicitly marked with #[cold].
  223|  35.8k|        if from > MAX_BLOCK_SIZE && to < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  224|       |            // This is the hot path -- do the bounds check and memcmp.
  225|  25.5k|            let bytes = self.middle_bytes;
  226|  25.5k|            let from = from - MAX_BLOCK_SIZE;
  227|  25.5k|            let to = to - MAX_BLOCK_SIZE;
  228|  25.5k|            let slice = &bytes[from..to];
  229|  25.5k|            Ok(member.quoted().as_bytes() == slice && (from == 0 || bytes[from - 1] != b'\\'))
  230|       |        } else {
  231|       |            // This is a very expensive, cold path.
  232|  10.3k|            Ok(self.as_padded_input().is_member_match(from, to, member))
  233|       |        }
  234|  35.8k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCs8ZpES7bF61F_19fuzz_arbitrary_json:
  287|   132k|    fn get_offset(&self) -> usize {
  288|      0|        debug!("getting input iter {}", self.idx);
  289|   132k|        self.idx
  290|   132k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input13seek_backwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
  129|  20.1k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  130|  20.1k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  131|  15.0k|            match self.middle_bytes.seek_backward(from - MAX_BLOCK_SIZE, needle) {
  132|  12.4k|                Some(x) => Some(x + MAX_BLOCK_SIZE),
  133|  2.65k|                None => handle_first(&self.first_block, needle),
  134|       |            }
  135|       |        } else {
  136|  5.10k|            self.as_padded_input().seek_backward(from, needle)
  137|       |        };
  138|       |
  139|       |        #[cold]
  140|       |        #[inline(never)]
  141|       |        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|       |            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|       |        }
  144|  20.1k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
  246|  26.0k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  26.0k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  17.5k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  17.5k|            // SAFETY: Bounds check above.
  251|  17.5k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  17.5k|            // By construction, middle has length divisible by N.
  253|  17.5k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  17.5k|            self.recorder.record_block_start(block);
  255|  17.5k|            self.idx += N;
  256|  17.5k|            Ok(Some(block))
  257|       |        } else {
  258|  8.56k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  26.0k|    }
_RINvNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2N_5MatchEEKj40_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  262|  8.56k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  8.56k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  8.56k|        ) -> Option<&'a [u8]>
  265|  8.56k|        where
  266|  8.56k|            R: InputRecorder<&'a [u8]>,
  267|  8.56k|        {
  268|  8.56k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  8.56k|            if let Some(b) = block {
  271|  7.34k|                iter.recorder.record_block_start(b);
  272|  7.34k|                iter.idx += N;
  273|  7.34k|            }
  274|       |
  275|  8.56k|            block
  276|  8.56k|        }
_RNCINvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtBa_13BorrowedBytesNtBc_5Input12seek_forward11handle_lastKj1_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  169|     11|                .map(|(x, y)| (x + offset, y))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_inputCs8ZpES7bF61F_19fuzz_arbitrary_json:
   57|  30.3k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   58|  30.3k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   59|  30.3k|    }
_RINvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  147|  19.0k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  148|  19.0k|        return Ok(
  149|  19.0k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  150|  17.8k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  151|  17.8k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  152|     11|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  153|       |                }
  154|       |            } else {
  155|  1.19k|                self.as_padded_input().seek_forward(from, needles)
  156|       |            },
  157|       |        );
  158|       |
  159|       |        #[cold]
  160|       |        #[inline(never)]
  161|       |        fn handle_last<const N: usize>(
  162|       |            last_block: &PaddedBlock,
  163|       |            offset: usize,
  164|       |            needles: [u8; N],
  165|       |        ) -> Option<(usize, u8)> {
  166|       |            last_block
  167|       |                .bytes()
  168|       |                .seek_forward(0, needles)
  169|       |                .map(|(x, y)| (x + offset, y))
  170|       |        }
  171|  19.0k|    }
_RNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  100|  2.80k|    fn leading_padding_len(&self) -> usize {
  101|  2.80k|        self.first_block.padding_len()
  102|  2.80k|    }
_RNvXs3_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputNtNtNtB9_6result5empty13EmptyRecorderKj40_EINtB7_18InputBlockIteratorKB2v_E4nextCs8ZpES7bF61F_19fuzz_arbitrary_json:
  246|  10.4k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  10.4k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  6.78k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  6.78k|            // SAFETY: Bounds check above.
  251|  6.78k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  6.78k|            // By construction, middle has length divisible by N.
  253|  6.78k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  6.78k|            self.recorder.record_block_start(block);
  255|  6.78k|            self.idx += N;
  256|  6.78k|            Ok(Some(block))
  257|       |        } else {
  258|  3.69k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  10.4k|    }
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  212|     13|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|     13|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|     13|        }
_RNCNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  195|     39|                .map(|(x, y)| (x + offset, y))
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input13seek_backward12handle_first:
  141|  2.65k|        fn handle_first(first_block: &PaddedBlock, needle: u8) -> Option<usize> {
  142|  2.65k|            first_block.bytes().seek_backward(first_block.len() - 1, needle)
  143|  2.65k|        }
_RNvNvXs2_NtNtCs8dUjriG0K0U_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  191|     39|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|     39|            last_block
  193|     39|                .bytes()
  194|     39|                .seek_non_whitespace_forward(0)
  195|     39|                .map(|(x, y)| (x + offset, y))
  196|     39|        }

_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs8ZpES7bF61F_19fuzz_arbitrary_json:
   50|  36.5k|    fn e(self) -> Result<T, InputError> {
   51|  36.5k|        self.map_err(std::convert::Into::into)
   52|  36.5k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultbNtB2_10InfallibleEINtB2_21InputErrorConvertiblebE1eCs8ZpES7bF61F_19fuzz_arbitrary_json:
   50|  16.0k|    fn e(self) -> Result<T, InputError> {
   51|  16.0k|        self.map_err(std::convert::Into::into)
   52|  16.0k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs8ZpES7bF61F_19fuzz_arbitrary_json:
   50|  90.1k|    fn e(self) -> Result<T, InputError> {
   51|  90.1k|        self.map_err(std::convert::Into::into)
   52|  90.1k|    }

_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  350|    705|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  351|    705|        assert!(N > 0);
  352|    705|        debug_assert!(from < MAX_BLOCK_SIZE);
  353|    705|        let bytes = &self.first_block.bytes;
  354|    705|
  355|    705|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|       |            if self.middle.is_empty() {
  357|       |                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|       |                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|    705|        })
  362|    705|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_lenCs8ZpES7bF61F_19fuzz_arbitrary_json:
   27|  2.80k|    pub(super) fn padding_len(&self) -> usize {
   28|  2.80k|        self.padding_len
   29|  2.80k|    }
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput23seek_forward_from_firstKj1_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  355|     22|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|     22|            if self.middle.is_empty() {
  357|     10|                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|     12|                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|     22|        })
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  370|     10|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput24seek_forward_from_middleKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  364|     12|    fn seek_forward_from_middle<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  365|     12|        assert!(N > 0);
  366|     12|        debug_assert!(from >= MAX_BLOCK_SIZE);
  367|     12|        let bytes = self.middle;
  368|     12|
  369|     12|        seek_forward_impl(bytes, from - MAX_BLOCK_SIZE, needles)
  370|     12|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  371|     12|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
  372|     12|    }
_RINvNtNtCs8dUjriG0K0U_8rsonpath5input7padding17seek_forward_implKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  539|  1.22k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  540|  1.22k|    let mut idx = from;
  541|  1.22k|    if idx >= bytes.len() {
  542|      0|        return None;
  543|  1.22k|    }
  544|       |
  545|  2.21k|    loop {
  546|  2.21k|        let b = bytes[idx];
  547|  2.21k|        if needles.contains(&b) {
  548|  1.19k|            return Some((idx, b));
  549|  1.01k|        }
  550|  1.01k|        idx += 1;
  551|  1.01k|        if idx == bytes.len() {
  552|     24|            return None;
  553|    994|        }
  554|       |    }
  555|  1.22k|}
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  315|  55.2k|    pub(super) fn middle(&self) -> &'a [u8] {
  316|  55.2k|        self.middle
  317|  55.2k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  306|  33.1k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  307|  33.1k|        Self {
  308|  33.1k|            first_block: first,
  309|  33.1k|            middle,
  310|  33.1k|            last_block: last,
  311|  33.1k|        }
  312|  33.1k|    }
_RINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  374|    505|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  375|    505|        assert!(N > 0);
  376|    505|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  377|    505|        let bytes = &self.last_block.bytes;
  378|    505|
  379|    505|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  380|    505|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  381|    505|    }
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  380|    505|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesCs8ZpES7bF61F_19fuzz_arbitrary_json:
   31|     11|    pub(super) fn bytes(&self) -> &[u8] {
   32|     11|        &self.bytes
   33|     11|    }
_RINvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  127|  1.19k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  128|  1.19k|        if from < MAX_BLOCK_SIZE {
  129|    705|            self.seek_forward_from_first(from, needles)
  130|    493|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  131|      0|            self.seek_forward_from_middle(from, needles)
  132|       |        } else {
  133|    493|            self.seek_forward_from_last(from, needles)
  134|       |        }
  135|  1.19k|    }
_RNCINvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput24seek_forward_from_middleKj1_Es_0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  371|      2|            .or_else(|| self.seek_forward_from_last(bytes.len() + MAX_BLOCK_SIZE, needles))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput25seek_backward_from_middle:
  326|    843|    fn seek_backward_from_middle(&self, from: usize, needle: u8) -> Option<usize> {
  327|    843|        debug_assert!(from >= MAX_BLOCK_SIZE);
  328|    843|        let bytes = self.middle;
  329|    843|
  330|    843|        seek_backward_impl(bytes, from - MAX_BLOCK_SIZE, needle)
  331|    843|            .map(|x| x + MAX_BLOCK_SIZE)
  332|    843|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
  333|    843|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  387|     40|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|     40|            if self.middle.is_empty() {
  389|     19|                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|     21|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|     40|        })
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_matchs_0Bb_:
  518|  4.70k|            && preceding_char.map_or(true, |x| x != b'\\')
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   48|  2.86k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   49|  2.86k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   50|  2.86k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   51|  2.86k|        let block_end = bytes.len();
   52|  2.86k|
   53|  2.86k|        last_block_buf[..block_end].copy_from_slice(bytes);
   54|  2.86k|
   55|  2.86k|        Self {
   56|  2.86k|            bytes: last_block_buf,
   57|  2.86k|            padding_len: MAX_BLOCK_SIZE - block_end,
   58|  2.86k|        }
   59|  2.86k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   35|  2.86k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   36|  2.86k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   37|  2.86k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   38|  2.86k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   39|  2.86k|
   40|  2.86k|        block_buf[block_start..].copy_from_slice(bytes);
   41|  2.86k|
   42|  2.86k|        Self {
   43|  2.86k|            bytes: block_buf,
   44|  2.86k|            padding_len: block_start,
   45|  2.86k|        }
   46|  2.86k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding18seek_backward_impl:
  523|  7.12k|fn seek_backward_impl(bytes: &[u8], from: usize, needle: u8) -> Option<usize> {
  524|  7.12k|    let mut idx = from;
  525|  7.12k|    assert!(idx < bytes.len());
  526|       |
  527|       |    loop {
  528|   227k|        if bytes[idx] == needle {
  529|  5.10k|            return Some(idx);
  530|   222k|        }
  531|   222k|        if idx == 0 {
  532|  2.02k|            return None;
  533|   219k|        }
  534|   219k|        idx -= 1;
  535|       |    }
  536|  7.12k|}
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  456|  5.60k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  457|  5.60k|        &self.first_block.bytes[start..start + len]
  458|  5.60k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  410|  6.08k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  444|  12.2k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  445|  12.2k|        debug_assert!(len < MAX_BLOCK_SIZE);
  446|       |
  447|  12.2k|        if start < MAX_BLOCK_SIZE {
  448|  5.60k|            Some(self.slice_first(start, len))
  449|  6.64k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  450|      0|            Some(self.slice_middle(start, len))
  451|       |        } else {
  452|  6.64k|            self.slice_last(start, len)
  453|       |        }
  454|  12.2k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  383|  5.98k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  384|  5.98k|        debug_assert!(from < MAX_BLOCK_SIZE);
  385|  5.98k|        let bytes = &self.first_block.bytes;
  386|  5.98k|
  387|  5.98k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|       |            if self.middle.is_empty() {
  389|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  5.98k|        })
  394|  5.98k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_lasts_0Bb_:
  341|  1.54k|            .or_else(|| {
  342|  1.54k|                if self.middle.is_empty() {
  343|    701|                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|    843|                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  1.54k|            })
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  401|     17|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  467|  4.69k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesB6_:
   31|  2.70k|    pub(super) fn bytes(&self) -> &[u8] {
   32|  2.70k|        &self.bytes
   33|  2.70k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  465|  6.64k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  466|  6.64k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  467|  6.64k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  468|  6.64k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable13seek_backward:
  115|  5.10k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
  116|  5.10k|        if from < MAX_BLOCK_SIZE {
  117|  2.51k|            self.seek_backward_from_first(from, needle)
  118|  2.58k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  119|      0|            self.seek_backward_from_middle(from, needle)
  120|       |        } else {
  121|  2.58k|            self.seek_backward_from_last(from, needle)
  122|       |        }
  123|  5.10k|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  426|      8|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  396|     21|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  397|     21|        debug_assert!(from >= MAX_BLOCK_SIZE);
  398|     21|        let bytes = self.middle;
  399|     21|
  400|     21|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  401|     21|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  402|     21|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  403|     21|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  405|  6.08k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  406|  6.08k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  407|  6.08k|        let bytes = &self.last_block.bytes;
  408|  6.08k|
  409|  6.08k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  410|  6.08k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  411|  6.08k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  558|  12.0k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  559|  12.0k|    let mut idx = from;
  560|  12.0k|    if idx >= bytes.len() {
  561|      0|        return None;
  562|  12.0k|    }
  563|       |
  564|  15.3k|    loop {
  565|  15.3k|        let b = bytes[idx];
  566|  15.3k|        if !b.is_ascii_whitespace() {
  567|  12.0k|            return Some((idx, b));
  568|  3.31k|        }
  569|  3.31k|        idx += 1;
  570|  3.31k|        if idx == bytes.len() {
  571|     45|            return None;
  572|  3.26k|        }
  573|       |    }
  574|  12.0k|}
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  425|     13|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  434|    798|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  402|      4|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middle0Bb_:
  331|    363|            .map(|x| x + MAX_BLOCK_SIZE)
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput23seek_backward_from_last0Bb_:
  340|  1.04k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  151|  1.70k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  152|  1.70k|        if from < MAX_BLOCK_SIZE {
  153|    876|            self.seek_non_whitespace_backward_from_first(from)
  154|    831|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  155|      0|            self.seek_non_whitespace_backward_from_middle(from)
  156|       |        } else {
  157|    831|            self.seek_non_whitespace_backward_from_last(from)
  158|       |        }
  159|  1.70k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6get_at:
  496|  10.3k|    fn get_at(&self, idx: usize) -> Option<u8> {
  497|  10.3k|        if idx < MAX_BLOCK_SIZE {
  498|  7.47k|            Some(self.first_block.bytes[idx])
  499|  2.82k|        } else if idx < self.middle.len() + MAX_BLOCK_SIZE {
  500|    200|            Some(self.middle[idx - MAX_BLOCK_SIZE])
  501|  2.62k|        } else if idx < self.middle.len() + 2 * MAX_BLOCK_SIZE {
  502|  2.58k|            Some(self.last_block.bytes[idx - MAX_BLOCK_SIZE - self.middle.len()])
  503|       |        } else {
  504|     41|            None
  505|       |        }
  506|  10.3k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  139|  12.0k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  140|  12.0k|        if from < MAX_BLOCK_SIZE {
  141|  5.98k|            self.seek_non_whitespace_forward_from_first(from)
  142|  6.06k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  143|      0|            self.seek_non_whitespace_forward_from_middle(from)
  144|       |        } else {
  145|  6.06k|            self.seek_non_whitespace_forward_from_last(from)
  146|       |        }
  147|  12.0k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  577|  1.74k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  578|  1.74k|    let mut idx = from;
  579|  1.74k|    if idx >= bytes.len() {
  580|      0|        return None;
  581|  1.74k|    }
  582|       |
  583|       |    loop {
  584|  3.85k|        let b = bytes[idx];
  585|  3.85k|        if !b.is_ascii_whitespace() {
  586|  1.70k|            return Some((idx, b));
  587|  2.14k|        }
  588|  2.14k|        if idx == 0 {
  589|     41|            return None;
  590|  2.10k|        }
  591|  2.10k|        idx -= 1;
  592|       |    }
  593|  1.74k|}
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  435|     33|            .or_else(|| {
  436|     33|                if self.middle.is_empty() {
  437|     12|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|     21|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|     33|            })
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable15is_member_match:
  163|  10.3k|    fn is_member_match(&self, from: usize, to: usize, member: &JsonString) -> bool {
  164|  10.3k|        debug_assert!(from < to);
  165|  10.3k|        let other = member.quoted().as_bytes();
  166|  10.3k|        self.cold_member_match(other, from, to)
  167|  10.3k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB2_11PaddedBlock3lenB6_:
   23|  23.2k|    pub(super) const fn len(&self) -> usize {
   24|  23.2k|        MAX_BLOCK_SIZE
   25|  23.2k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_parts:
  473|  10.3k|    fn slice_parts(&self, from: usize, to: usize) -> (&[u8], &[u8], &[u8]) {
  474|  10.3k|        use std::cmp::min;
  475|  10.3k|
  476|  10.3k|        let first_from = min(from, MAX_BLOCK_SIZE);
  477|  10.3k|        let first_to = min(to, MAX_BLOCK_SIZE);
  478|  10.3k|
  479|  10.3k|        let from = from.saturating_sub(MAX_BLOCK_SIZE);
  480|  10.3k|        let to = to.saturating_sub(MAX_BLOCK_SIZE);
  481|  10.3k|        let middle_from = min(from, self.middle.len());
  482|  10.3k|        let middle_to = min(to, self.middle.len());
  483|  10.3k|
  484|  10.3k|        let from = from.saturating_sub(self.middle.len());
  485|  10.3k|        let to = to.saturating_sub(self.middle.len());
  486|  10.3k|        let last_from = min(from, self.last_block.len());
  487|  10.3k|        let last_to = min(to, self.last_block.len());
  488|  10.3k|
  489|  10.3k|        (
  490|  10.3k|            &self.first_block.bytes[first_from..first_to],
  491|  10.3k|            &self.middle[middle_from..middle_to],
  492|  10.3k|            &self.last_block.bytes[last_from..last_to],
  493|  10.3k|        )
  494|  10.3k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput17cold_member_match:
  508|  10.3k|    fn cold_member_match(&self, other: &[u8], from: usize, to: usize) -> bool {
  509|  10.3k|        let (first_self, middle_self, last_self) = self.slice_parts(from, to);
  510|  10.3k|        let first_other = &other[..first_self.len()];
  511|  10.3k|        let middle_other = &other[first_self.len()..first_self.len() + middle_self.len()];
  512|  10.3k|        let last_other = &other[first_self.len() + middle_self.len()..];
  513|  10.3k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));
  514|  10.3k|
  515|  10.3k|        first_self == first_other
  516|  6.67k|            && middle_self == middle_other
  517|  6.39k|            && last_self == last_other
  518|  4.70k|            && preceding_char.map_or(true, |x| x != b'\\')
  519|  10.3k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  420|     21|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  421|     21|        debug_assert!(from >= MAX_BLOCK_SIZE);
  422|     21|        let bytes = self.middle;
  423|     21|
  424|     21|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  425|     21|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  426|     21|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  427|     21|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput23seek_backward_from_last:
  335|  2.58k|    fn seek_backward_from_last(&self, from: usize, needle: u8) -> Option<usize> {
  336|  2.58k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  337|  2.58k|        let bytes = &self.last_block.bytes;
  338|  2.58k|
  339|  2.58k|        seek_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needle)
  340|  2.58k|            .map(|x| x + self.middle.len() + MAX_BLOCK_SIZE)
  341|  2.58k|            .or_else(|| {
  342|       |                if self.middle.is_empty() {
  343|       |                    self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle)
  344|       |                } else {
  345|       |                    self.seek_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1, needle)
  346|       |                }
  347|  2.58k|            })
  348|  2.58k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  429|    831|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  430|    831|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  431|    831|        let bytes = &self.last_block.bytes;
  432|    831|
  433|    831|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  434|    831|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  435|    831|            .or_else(|| {
  436|       |                if self.middle.is_empty() {
  437|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|    831|            })
  442|    831|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput24seek_backward_from_first:
  319|  3.69k|    fn seek_backward_from_first(&self, from: usize, needle: u8) -> Option<usize> {
  320|  3.69k|        debug_assert!(from < MAX_BLOCK_SIZE);
  321|  3.69k|        let bytes = &self.first_block.bytes;
  322|  3.69k|
  323|  3.69k|        seek_backward_impl(bytes, from, needle)
  324|  3.69k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  413|    896|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  414|    896|        debug_assert!(from < MAX_BLOCK_SIZE);
  415|    896|        let bytes = &self.first_block.bytes;
  416|    896|
  417|    896|        seek_non_whitespace_backward_impl(bytes, from)
  418|    896|    }
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput25seek_backward_from_middles_0Bb_:
  332|    480|            .or_else(|| self.seek_backward_from_first(MAX_BLOCK_SIZE - 1, needle))
_RNCNvMs2_NtNtCs8dUjriG0K0U_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput17cold_member_match0Bb_:
  513|  10.3k|        let preceding_char = from.checked_sub(1).and_then(|x| self.get_at(x));

_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
   56|  59.1k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  59.1k|        let bytes = self.as_ref();
   58|  59.1k|        let mut idx = from;
   59|  59.1k|
   60|  59.1k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  59.1k|        }
   63|       |
   64|  61.0k|        loop {
   65|  61.0k|            let b = bytes[idx];
   66|  61.0k|            if !b.is_ascii_whitespace() {
   67|  59.0k|                return Some((idx, b));
   68|  1.95k|            }
   69|  1.95k|            idx += 1;
   70|  1.95k|            if idx == bytes.len() {
   71|     39|                return None;
   72|  1.91k|            }
   73|       |        }
   74|  59.1k|    }
_RINvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECs8ZpES7bF61F_19fuzz_arbitrary_json:
   33|  17.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  17.8k|        let bytes = self.as_ref();
   35|       |
   36|  17.8k|        assert!(N > 0);
   37|  17.8k|        let mut idx = from;
   38|  17.8k|
   39|  17.8k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  17.8k|        }
   42|       |
   43|  18.6k|        loop {
   44|  18.6k|            let b = bytes[idx];
   45|  18.6k|            if needles.contains(&b) {
   46|  17.8k|                return Some((idx, b));
   47|    785|            }
   48|    785|            idx += 1;
   49|    785|            if idx == bytes.len() {
   50|     11|                return None;
   51|    774|            }
   52|       |        }
   53|  17.8k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
   15|  15.0k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  15.0k|        let bytes = self.as_ref();
   17|  15.0k|
   18|  15.0k|        let mut idx = from;
   19|  15.0k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|   280k|            if bytes[idx] == needle {
   23|  12.4k|                return Some(idx);
   24|   267k|            }
   25|   267k|            if idx == 0 {
   26|  2.65k|                return None;
   27|   264k|            }
   28|   264k|            idx -= 1;
   29|       |        }
   30|  15.0k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardCs8ZpES7bF61F_19fuzz_arbitrary_json:
   77|  17.6k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  17.6k|        let bytes = self.as_ref();
   79|  17.6k|        let mut idx = from;
   80|  17.6k|
   81|  17.6k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  17.6k|        }
   84|       |
   85|       |        loop {
   86|  18.2k|            let b = bytes[idx];
   87|  18.2k|            if !b.is_ascii_whitespace() {
   88|  17.6k|                return Some((idx, b));
   89|    602|            }
   90|    602|            if idx == 0 {
   91|     13|                return None;
   92|    589|            }
   93|    589|            idx -= 1;
   94|       |        }
   95|  17.6k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|     13|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|     13|        let bytes = self.as_ref();
   79|     13|        let mut idx = from;
   80|     13|
   81|     13|        if idx >= bytes.len() {
   82|      0|            return None;
   83|     13|        }
   84|       |
   85|       |        loop {
   86|    178|            let b = bytes[idx];
   87|    178|            if !b.is_ascii_whitespace() {
   88|     13|                return Some((idx, b));
   89|    165|            }
   90|    165|            if idx == 0 {
   91|      0|                return None;
   92|    165|            }
   93|    165|            idx -= 1;
   94|       |        }
   95|     13|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable13seek_backwardB6_:
   15|  2.65k|    fn seek_backward(&self, from: usize, needle: u8) -> Option<usize> {
   16|  2.65k|        let bytes = self.as_ref();
   17|  2.65k|
   18|  2.65k|        let mut idx = from;
   19|  2.65k|        assert!(idx < bytes.len());
   20|       |
   21|       |        loop {
   22|  60.0k|            if bytes[idx] == needle {
   23|  2.65k|                return Some(idx);
   24|  57.4k|            }
   25|  57.4k|            if idx == 0 {
   26|      0|                return None;
   27|  57.4k|            }
   28|  57.4k|            idx -= 1;
   29|       |        }
   30|  2.65k|    }
_RNvXNtNtCs8dUjriG0K0U_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|     39|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|     39|        let bytes = self.as_ref();
   58|     39|        let mut idx = from;
   59|     39|
   60|     39|        if idx >= bytes.len() {
   61|      0|            return None;
   62|     39|        }
   63|       |
   64|  1.19k|        loop {
   65|  1.19k|            let b = bytes[idx];
   66|  1.19k|            if !b.is_ascii_whitespace() {
   67|     39|                return Some((idx, b));
   68|  1.15k|            }
   69|  1.15k|            idx += 1;
   70|  1.15k|            if idx == bytes.len() {
   71|      0|                return None;
   72|  1.15k|            }
   73|       |        }
   74|     39|    }

_RNvCs8dUjriG0K0U_8rsonpath18is_json_whitespace:
  351|   172k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  352|   172k|    JSON_WHITESPACE_BYTES.contains(&x)
  353|   172k|}

_RNvXs2_NtCs8dUjriG0K0U_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
  144|  22.4k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  22.4k|        self.push(data);
  146|  22.4k|        Ok(())
  147|  22.4k|    }
_RNvMs_NtCs8dUjriG0K0U_8rsonpath6resultNtB4_5Match20from_start_and_bytesCs8ZpES7bF61F_19fuzz_arbitrary_json:
   81|    738|    pub(crate) fn from_start_and_bytes(span_start: usize, bytes: Vec<u8>) -> Self {
   82|    738|        Self { bytes, span_start }
   83|    738|    }
_RNvXsa_NtCs8dUjriG0K0U_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8ZpES7bF61F_19fuzz_arbitrary_json:
  189|  23.0k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]

_RNvXNtNtCs8dUjriG0K0U_8rsonpath6result5emptyNtB2_13EmptyRecorderINtB4_13InputRecorderRShE18record_block_startCs8ZpES7bF61F_19fuzz_arbitrary_json:
    9|  9.74k|    fn record_block_start(&self, _new_block: B) {
   10|  9.74k|        // Intentionally left empty.
   11|  9.74k|    }

_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs8ZpES7bF61F_19fuzz_arbitrary_json:
  238|  23.5k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|      0|        debug!("Value terminator at {idx}, depth {depth}");
  240|  23.5k|        if let Some(node) = self.node.as_ref() {
  241|  4.76k|            if node.start_depth >= depth {
  242|  3.95k|                let mut node = self.node.take().expect("node is Some");
  243|      0|                debug!("Mark node as ended at {}", idx + 1);
  244|       |                append_final_block(
  245|  3.95k|                    &mut node.buf,
  246|  3.95k|                    self.current_block
  247|  3.95k|                        .as_ref()
  248|  3.95k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  3.95k|                    self.idx,
  250|  3.95k|                    node.start_idx,
  251|  3.95k|                    idx + 1,
  252|  3.95k|                );
  253|  3.95k|                finalize_node(&mut node.buf, node.ty);
  254|       |
  255|      0|                debug!("Committing and outputting node");
  256|  3.95k|                self.sink
  257|  3.95k|                    .add_match(Match {
  258|  3.95k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  3.95k|                        bytes: node.buf,
  260|  3.95k|                    })
  261|  3.95k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    805|            }
  263|  18.7k|        }
  264|       |
  265|  23.5k|        Ok(())
  266|  23.5k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs8ZpES7bF61F_19fuzz_arbitrary_json:
  285|    701|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|    701|        match self.node {
  287|    701|            Some(node) => StackRecorder {
  288|    701|                idx: self.idx,
  289|    701|                match_count: 1,
  290|    701|                current_block: self.current_block,
  291|    701|                stack: vec![PartialNode {
  292|    701|                    id: 0,
  293|    701|                    start_idx: node.start_idx,
  294|    701|                    start_depth: node.start_depth,
  295|    701|                    buf: node.buf,
  296|    701|                    ty: node.ty,
  297|    701|                }],
  298|    701|                output_queue: OutputQueue::new(),
  299|    701|                sink: self.sink,
  300|    701|                leading_padding_len: self.leading_padding_len,
  301|    701|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|    701|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCs8ZpES7bF61F_19fuzz_arbitrary_json:
   59|  52.7k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  52.7k|        self.internal
   61|  52.7k|            .borrow_mut()
   62|  52.7k|            .record_value_terminator(idx, depth)
   63|  52.7k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  52.7k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
  165|  33.2k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  33.2k|        match self {
  167|  5.42k|            Self::Simple(simple) => {
  168|  5.42k|                if !simple.try_record_match(idx, depth, ty) {
  169|    701|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    701|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    701|                    let mut stack = simple.transform_to_stack();
  174|    701|                    stack.record_match(idx, depth, ty);
  175|    701|                    *self = Self::Stack(stack);
  176|  4.72k|                }
  177|       |            }
  178|  27.8k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  33.2k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes18append_final_block:
  425|  23.0k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|      0|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  23.0k|    debug_assert!(read_end >= src_start);
  428|  23.0k|    let in_block_start = if read_start > src_start {
  429|  12.0k|        read_start - src_start
  430|       |    } else {
  431|  10.9k|        0
  432|       |    };
  433|  23.0k|    let in_block_end = read_end - src_start;
  434|  23.0k|
  435|  23.0k|    dest.extend(&src[in_block_start..in_block_end]);
  436|  23.0k|}
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes12append_block:
  409|   107k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|   107k|    if read_start >= src_start + src.len() {
  411|    235|        return;
  412|   107k|    }
  413|       |
  414|   107k|    let to_extend = if read_start > src_start {
  415|  19.9k|        let in_block_start = read_start - src_start;
  416|  19.9k|        &src[in_block_start..]
  417|       |    } else {
  418|  87.4k|        src
  419|       |    };
  420|       |
  421|   107k|    dest.extend(to_extend);
  422|   107k|}
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs8ZpES7bF61F_19fuzz_arbitrary_json:
  185|  52.7k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  52.7k|        match self {
  187|  23.5k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  29.1k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  52.7k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs8ZpES7bF61F_19fuzz_arbitrary_json:
  156|  24.8k|    fn record_block(&mut self, block: B) {
  157|  24.8k|        match self {
  158|  18.5k|            Self::Simple(r) => r.record_block(block),
  159|  6.31k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  24.8k|    }
_RNvXs0_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
   52|  33.2k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  33.2k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  33.2k|        Ok(())
   56|  33.2k|    }
_RNvXs_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCs8ZpES7bF61F_19fuzz_arbitrary_json:
   41|  24.8k|    fn record_block_start(&self, new_block: B) {
   42|  24.8k|        self.internal.borrow_mut().record_block(new_block)
   43|  24.8k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  214|  2.06k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  2.06k|        Self {
  216|  2.06k|            idx: 0,
  217|  2.06k|            current_block: None,
  218|  2.06k|            node: None,
  219|  2.06k|            sink,
  220|  2.06k|            leading_padding_len,
  221|  2.06k|        }
  222|  2.06k|    }
_RNvMs1_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  151|  2.06k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  2.06k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  2.06k|    }
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs8ZpES7bF61F_19fuzz_arbitrary_json:
  367|  29.1k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|      0|        debug!("Value terminator at {idx}, depth {depth}");
  369|  48.2k|        while let Some(node) = self.stack.last() {
  370|  46.3k|            if node.start_depth >= depth {
  371|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  19.0k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  19.0k|                append_final_block(
  374|  19.0k|                    &mut node.buf,
  375|  19.0k|                    self.current_block
  376|  19.0k|                        .as_ref()
  377|  19.0k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  19.0k|                    self.idx,
  379|  19.0k|                    node.start_idx,
  380|  19.0k|                    idx + 1,
  381|  19.0k|                );
  382|  19.0k|                finalize_node(&mut node.buf, node.ty);
  383|       |
  384|      0|                debug!("Committing node: {node:?}");
  385|  19.0k|                self.output_queue.insert(
  386|  19.0k|                    node.id,
  387|  19.0k|                    Match {
  388|  19.0k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  19.0k|                        bytes: node.buf,
  390|  19.0k|                    },
  391|  19.0k|                );
  392|       |            } else {
  393|  27.2k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  29.1k|        if self.stack.is_empty() {
  398|      0|            debug!("Outputting batch of nodes.");
  399|  1.92k|            self.output_queue
  400|  1.92k|                .output_to(self.sink)
  401|  1.92k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  27.2k|        }
  403|       |
  404|  29.1k|        Ok(())
  405|  29.1k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs8ZpES7bF61F_19fuzz_arbitrary_json:
   28|  2.06k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  2.06k|        Self {
   30|  2.06k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  2.06k|        }
   32|  2.06k|    }
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
  352|  28.5k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  28.5k|        let node = PartialNode {
  354|  28.5k|            id: self.match_count,
  355|  28.5k|            start_idx: idx,
  356|  28.5k|            start_depth: depth,
  357|  28.5k|            buf: vec![],
  358|  28.5k|            ty,
  359|  28.5k|        };
  360|       |
  361|      0|        debug!("New node {node:?}");
  362|  28.5k|        self.match_count += 1;
  363|  28.5k|        self.stack.push(node);
  364|  28.5k|    }
_RNvNtNtCs8dUjriG0K0U_8rsonpath6result5nodes13finalize_node:
  439|  23.0k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  440|      0|    debug!("Finalizing node");
  441|       |
  442|  23.0k|    if ty == MatchedNodeType::Atomic {
  443|       |        // Atomic nodes are finished when the next structural character is matched.
  444|       |        // The buffer includes that character and all preceding whitespace.
  445|       |        // We need to remove it before saving the result.
  446|  9.84k|        if buf.len() <= 1 {
  447|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  448|     61|            buf.truncate(0)
  449|       |        } else {
  450|  9.78k|            let mut i = buf.len() - 2;
  451|  10.6k|            while is_json_whitespace(buf[i]) {
  452|    872|                i -= 1;
  453|    872|            }
  454|       |
  455|  9.78k|            buf.truncate(i + 1);
  456|       |        }
  457|  13.1k|    }
  458|  23.0k|}
_RNvMs3_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs8ZpES7bF61F_19fuzz_arbitrary_json:
  338|  6.31k|    fn record_block(&mut self, block: B) {
  339|  6.31k|        if let Some(finished) = self.current_block.as_ref() {
  340|   112k|            for node in &mut self.stack {
  341|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|   105k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  6.31k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  6.31k|        self.current_block = Some(block);
  349|      0|        debug!("New block, idx = {}", self.idx);
  350|  6.31k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs8ZpES7bF61F_19fuzz_arbitrary_json:
  224|  18.5k|    fn record_block(&mut self, block: B) {
  225|  18.5k|        if let Some(finished) = self.current_block.as_ref() {
  226|  16.4k|            if let Some(node) = self.node.as_mut() {
  227|      0|                debug!("Continuing node, idx is {}", self.idx);
  228|  1.68k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  14.7k|            }
  230|       |
  231|  16.4k|            self.idx += finished.len();
  232|  2.06k|        }
  233|       |
  234|  18.5k|        self.current_block = Some(block);
  235|      0|        debug!("New block, idx = {}", self.idx);
  236|  18.5k|    }
_RNvMs2_NtNtCs8dUjriG0K0U_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs8ZpES7bF61F_19fuzz_arbitrary_json:
  268|  5.42k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  5.42k|        if self.node.is_some() {
  270|      0|            debug!("nested match detected, switching to stack");
  271|    701|            return false;
  272|  4.72k|        }
  273|  4.72k|
  274|  4.72k|        let node = SimplePartialNode {
  275|  4.72k|            start_idx: idx,
  276|  4.72k|            start_depth: depth,
  277|  4.72k|            buf: vec![],
  278|  4.72k|            ty,
  279|  4.72k|        };
  280|  4.72k|        self.node = Some(node);
  281|  4.72k|
  282|  4.72k|        true
  283|  5.42k|    }

_RINvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EECs8ZpES7bF61F_19fuzz_arbitrary_json:
   52|  1.92k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.92k|    where
   54|  1.92k|        S: Sink<D>,
   55|  1.92k|    {
   56|  1.92k|        self.offset += self.nodes.len();
   57|       |
   58|  17.7k|        for node in self.nodes.drain(..) {
   59|  17.7k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.92k|        Ok(())
   63|  1.92k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs8ZpES7bF61F_19fuzz_arbitrary_json:
   29|  19.0k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  19.0k|        let actual_idx = id - self.offset;
   31|       |
   32|  43.0k|        while self.nodes.len() <= actual_idx {
   33|  23.9k|            self.nodes.push(None);
   34|  23.9k|        }
   35|       |
   36|  19.0k|        self.nodes[actual_idx] = Some(node);
   37|  19.0k|    }
_RNvMNtNtCs8dUjriG0K0U_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
   18|    701|    pub(super) fn new() -> Self {
   19|    701|        Self {
   20|    701|            offset: 0,
   21|    701|            nodes: vec![],
   22|    701|        }
   23|    701|    }

_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder19descendant_wildcard:
  178|  1.31k|    pub fn descendant_wildcard(&mut self) -> &mut Self {
  179|  1.31k|        self.descendant(|x| x.wildcard())
  180|  1.31k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10child_nameNtNtB5_3str10JsonStringECs8ZpES7bF61F_19fuzz_arbitrary_json:
  124|  4.07k|    pub fn child_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  125|  4.07k|        self.child(|x| x.name(name))
  126|  4.07k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  238|  16.6k|    fn new() -> Self {
  239|  16.6k|        Self { selectors: vec![] }
  240|  16.6k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder16descendant_indexNtNtB7_3num8JsonUIntE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  187|  4.71k|        self.descendant(|x| x.index(idx))
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_11child_indexNtNtB5_3num8JsonUIntE0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
   79|  1.45k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  1.45k|    where
   81|  1.45k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  1.45k|    {
   83|  1.45k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  1.45k|        selectors_builder(&mut builder);
   85|  1.45k|        self.segments.push(Segment::Child(builder.build()));
   86|  1.45k|        self
   87|  1.45k|    }
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder14child_wildcard:
  132|  3.16k|    pub fn child_wildcard(&mut self) -> &mut Self {
  133|  3.16k|        self.child(|x| x.wildcard())
  134|  3.16k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder10child_nameNtNtB7_3str10JsonStringE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  125|  4.07k|        self.child(|x| x.name(name))
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder15descendant_nameNtNtB7_3str10JsonStringE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  171|  1.89k|        self.descendant(|x| x.name(name))
_RNvXs1_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB7_13JsonPathQueryINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_20JsonPathQueryBuilderE4from:
  399|  2.86k|    fn from(value: JsonPathQueryBuilder) -> Self {
  400|  2.86k|        Self {
  401|  2.86k|            segments: value.segments,
  402|  2.86k|        }
  403|  2.86k|    }
_RNCNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder19descendant_wildcard0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  179|  1.31k|        self.descendant(|x| x.wildcard())
_RNCNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_20JsonPathQueryBuilder14child_wildcard0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  133|  3.16k|        self.child(|x| x.wildcard())
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCNvB2_14child_wildcard0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
   79|  3.16k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  3.16k|    where
   81|  3.16k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  3.16k|    {
   83|  3.16k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  3.16k|        selectors_builder(&mut builder);
   85|  3.16k|        self.segments.push(Segment::Child(builder.build()));
   86|  3.16k|        self
   87|  3.16k|    }
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB2_20JsonPathQueryBuilder3new:
   54|  2.86k|    pub fn new() -> Self {
   55|  2.86k|        Self { segments: vec![] }
   56|  2.86k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder16descendant_indexNtNtB5_3num8JsonUIntECs8ZpES7bF61F_19fuzz_arbitrary_json:
  186|  4.71k|    pub fn descendant_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  187|  4.71k|        self.descendant(|x| x.index(idx))
  188|  4.71k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCNvB2_19descendant_wildcard0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  110|  1.31k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.31k|    where
  112|  1.31k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.31k|    {
  114|  1.31k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.31k|        selectors_builder(&mut builder);
  116|  1.31k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.31k|        self
  118|  1.31k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_15descendant_nameNtNtB5_3str10JsonStringE0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  110|  1.89k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  1.89k|    where
  112|  1.89k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  1.89k|    {
  114|  1.89k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  1.89k|        selectors_builder(&mut builder);
  116|  1.89k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  1.89k|        self
  118|  1.89k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder8wildcard:
  371|  4.47k|    pub fn wildcard(&mut self) -> &mut Self {
  372|  4.47k|        self.selectors.push(Selector::Wildcard);
  373|  4.47k|        self
  374|  4.47k|    }
_RNCINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_20JsonPathQueryBuilder11child_indexNtNtB7_3num8JsonUIntE0Cs8ZpES7bF61F_19fuzz_arbitrary_json:
  141|  1.45k|        self.child(|x| x.index(idx))
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder15descendant_nameNtNtB5_3str10JsonStringECs8ZpES7bF61F_19fuzz_arbitrary_json:
  170|  1.89k|    pub fn descendant_name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  171|  1.89k|        self.descendant(|x| x.name(name))
  172|  1.89k|    }
_RINvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder5indexNtNtB7_3num8JsonUIntECs8ZpES7bF61F_19fuzz_arbitrary_json:
  289|  6.16k|    pub fn index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  290|  6.16k|        let json_int: JsonInt = idx.into();
  291|  6.16k|        self.selectors.push(Selector::Index(Index::from(json_int)));
  292|  6.16k|        self
  293|  6.16k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder5childNCINvB2_10child_nameNtNtB5_3str10JsonStringE0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
   79|  4.07k|    pub fn child<F>(&mut self, selectors_builder: F) -> &mut Self
   80|  4.07k|    where
   81|  4.07k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
   82|  4.07k|    {
   83|  4.07k|        let mut builder = JsonPathSelectorsBuilder::new();
   84|  4.07k|        selectors_builder(&mut builder);
   85|  4.07k|        self.segments.push(Segment::Child(builder.build()));
   86|  4.07k|        self
   87|  4.07k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder10descendantNCINvB2_16descendant_indexNtNtB5_3num8JsonUIntE0ECs8ZpES7bF61F_19fuzz_arbitrary_json:
  110|  4.71k|    pub fn descendant<F>(&mut self, selectors_builder: F) -> &mut Self
  111|  4.71k|    where
  112|  4.71k|        F: FnOnce(&mut JsonPathSelectorsBuilder) -> &mut JsonPathSelectorsBuilder,
  113|  4.71k|    {
  114|  4.71k|        let mut builder = JsonPathSelectorsBuilder::new();
  115|  4.71k|        selectors_builder(&mut builder);
  116|  4.71k|        self.segments.push(Segment::Descendant(builder.build()));
  117|  4.71k|        self
  118|  4.71k|    }
_RINvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB5_24JsonPathSelectorsBuilder4nameNtNtB7_3str10JsonStringECs8ZpES7bF61F_19fuzz_arbitrary_json:
  263|  5.97k|    pub fn name<S: Into<JsonString>>(&mut self, name: S) -> &mut Self {
  264|  5.97k|        self.selectors.push(Selector::Name(name.into()));
  265|  5.97k|        self
  266|  5.97k|    }
_RINvMNtCsmyidsRPtaf_15rsonpath_syntax7builderNtB3_20JsonPathQueryBuilder11child_indexNtNtB5_3num8JsonUIntECs8ZpES7bF61F_19fuzz_arbitrary_json:
  140|  1.45k|    pub fn child_index<N: Into<JsonInt>>(&mut self, idx: N) -> &mut Self {
  141|  1.45k|        self.child(|x| x.index(idx))
  142|  1.45k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax7builderNtB4_24JsonPathSelectorsBuilder5build:
  242|  16.6k|    fn build(self) -> Selectors {
  243|  16.6k|        Selectors::many(self.selectors)
  244|  16.6k|    }

_RNvXs9_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromCs8ZpES7bF61F_19fuzz_arbitrary_json:
  474|  6.16k|    fn from(value: N) -> Self {
  475|  6.16k|        let value = value.into();
  476|  6.16k|        if value.as_i64() >= 0 {
  477|  6.16k|            Self::FromStart(value.abs())
  478|       |        } else {
  479|      0|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  480|       |        }
  481|  6.16k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment9selectors:
  874|  16.6k|    pub fn selectors(&self) -> &Selectors {
  875|  16.6k|        match self {
  876|  16.6k|            Self::Child(s) | Self::Descendant(s) => s,
  877|  16.6k|        }
  878|  16.6k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstCs8dUjriG0K0U_8rsonpath:
  955|  16.6k|    pub fn first(&self) -> &Selector {
  956|  16.6k|        &self.inner[0]
  957|  16.6k|    }
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1108|  16.6k|    fn deref(&self) -> &Self::Target {
 1109|  16.6k|        &self.inner
 1110|  16.6k|    }
_RNvMsr_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  865|  2.86k|    pub fn segments(&self) -> &[Segment] {
  866|  2.86k|        &self.segments
  867|  2.86k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment8is_child:
  890|  16.6k|    pub fn is_child(&self) -> bool {
  891|  16.6k|        matches!(self, Self::Child(_))
  892|  16.6k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  947|  16.6k|    pub fn many(vec: Vec<Selector>) -> Self {
  948|  16.6k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  949|  16.6k|        Self { inner: vec }
  950|  16.6k|    }

_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  286|  6.16k|    const fn new(index: i64) -> Self {
  287|  6.16k|        Self(index)
  288|  6.16k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  6.16k|    pub const fn abs(&self) -> JsonUInt {
  363|  6.16k|        JsonUInt(self.0.unsigned_abs())
  364|  6.16k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCs8ZpES7bF61F_19fuzz_arbitrary_json:
  420|  10.5k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  421|  10.5k|        let new_index = self.0 + 1;
  422|  10.5k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  423|  10.5k|            self.0 = new_index;
  424|  10.5k|            Ok(())
  425|       |        } else {
  426|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  427|       |        }
  428|  10.5k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newCs8ZpES7bF61F_19fuzz_arbitrary_json:
  400|  6.16k|    const fn new(index: u64) -> Self {
  401|  6.16k|        Self(index)
  402|  6.16k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  6.16k|    pub const fn as_i64(&self) -> i64 {
  331|  6.16k|        self.0
  332|  6.16k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt6as_u64:
  455|   141k|    pub const fn as_u64(&self) -> u64 {
  456|   141k|        self.0
  457|   141k|    }
_RNvXsh_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  652|  6.16k|    fn from(value: JsonUInt) -> Self {
  653|  6.16k|        // This is always safe due to the type invariant bounds.
  654|  6.16k|        Self::new(value.0 as i64)
  655|  6.16k|    }
_RNvXsN_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryCs8ZpES7bF61F_19fuzz_arbitrary_json:
 1073|  6.16k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1074|  6.16k|        let val = u.int_in_range(0..=JSON_UINT_UPPER_LIMIT)?;
 1075|       |
 1076|  6.16k|        Ok(Self::new(val))
 1077|  6.16k|    }
_RINvXs19_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB7_8JsonUIntNtNtCslATUeuPuGvJ_4core4hash4Hash4hashNtNtNtNtCs9a1gyOJxq9I_3std11collections4hash3map13DefaultHasherECs8dUjriG0K0U_8rsonpath:
   87|  57.6k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsj_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromCs8dUjriG0K0U_8rsonpath:
  674|  92.7k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  675|  92.7k|        if value > JSON_UINT_UPPER_LIMIT {
  676|  19.7k|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  677|       |        } else {
  678|  72.9k|            Ok(Self::new(value))
  679|       |        }
  680|  92.7k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newCs8dUjriG0K0U_8rsonpath:
  400|  72.9k|    const fn new(index: u64) -> Self {
  401|  72.9k|        Self(index)
  402|  72.9k|    }
_RNvXsk_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromCs8dUjriG0K0U_8rsonpath:
  687|  23.4k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  688|  23.4k|        if value < 0 {
  689|      0|            Err(JsonIntOverflowError::negative_uint(value))
  690|       |        } else {
  691|  23.4k|            Self::try_from(value as u64)
  692|       |        }
  693|  23.4k|    }
_RNvXs1a_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs8dUjriG0K0U_8rsonpath:
   87|  54.8k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs16_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs8dUjriG0K0U_8rsonpath:
   87|  42.7k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1b_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp3Ord3cmpCs8dUjriG0K0U_8rsonpath:
   87|  7.27k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXso_NtCsmyidsRPtaf_15rsonpath_syntax3numxINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_8JsonUIntE4from:
  726|  93.7k|    fn from(value: JsonUInt) -> Self {
  727|  93.7k|        // Safe cast since JsonUInt::MAX is lower than i64::MAX.
  728|  93.7k|        value.0 as Self
  729|  93.7k|    }

_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError17uint_pos_overflowCs8dUjriG0K0U_8rsonpath:
   57|  19.7k|    pub(crate) fn uint_pos_overflow(src: u64) -> Self {
   58|  19.7k|        Self {
   59|  19.7k|            kind: JsonIntOverflowKind::UIntPos(src),
   60|  19.7k|        }
   61|  19.7k|    }

_RNvXs0_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  5.97k|    fn from(value: JsonStringBuilder) -> Self {
   59|  5.97k|        value.finish()
   60|  5.97k|    }
_RNvXs6_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryCs8ZpES7bF61F_19fuzz_arbitrary_json:
  228|  5.97k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  5.97k|        let chars = u.arbitrary_iter()?;
  230|  5.97k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  20.7k|        for c in chars {
  236|  14.8k|            let c = c?;
  237|  14.8k|            match c {
  238|  14.8k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|    995|                    builder.push('\\');
  240|    995|                    builder.push(c);
  241|    995|                }
  242|  13.8k|                _ => {
  243|  13.8k|                    builder.push(c);
  244|  13.8k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  5.97k|        Ok(builder.into())
  249|  5.97k|    }
_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString6quoted:
  203|  67.4k|    pub fn quoted(&self) -> &str {
  204|  67.4k|        &self.quoted
  205|  67.4k|    }
_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  42.3k|    pub fn unquoted(&self) -> &str {
  188|  42.3k|        let len = self.quoted.len();
  189|  42.3k|        debug_assert!(len >= 2);
  190|  42.3k|        &self.quoted[1..len - 1]
  191|  42.3k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  18.9k|    fn eq(&self, other: &Self) -> bool {
  211|  18.9k|        self.unquoted() == other.unquoted()
  212|  18.9k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  5.97k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  5.97k|        self.quoted.push('"');
   52|  5.97k|        JsonString { quoted: self.quoted }
   53|  5.97k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  5.97k|    pub(crate) fn new() -> Self {
   40|  5.97k|        Self {
   41|  5.97k|            quoted: String::from('"'),
   42|  5.97k|        }
   43|  5.97k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  15.7k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  15.7k|        self.quoted.push(char);
   47|  15.7k|        self
   48|  15.7k|    }

_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
   48|  1.36k|#[derive(Debug, Arbitrary)]
_RNvXNvNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB4_8RawValueBT_9arbitrary:
   84|   438k|        #[derive(Arbitrary)]
_RNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_json1__NtB4_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  8.58k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
   42|  16.6k|#[derive(Debug, Arbitrary)]
_RNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB4_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   42|  47.1k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__33RECURSIVE_COUNT_SupportedSelector7___getit0B7_:
   48|      1|#[derive(Debug, Arbitrary)]
_RNCNvXNvNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys_0Bc_:
   84|   146k|        #[derive(Arbitrary)]
_RNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB4_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   48|  47.1k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   42|  2.86k|#[derive(Debug, Arbitrary)]
_RNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB5_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   83|  2.86k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   84|  2.86k|        #[derive(Arbitrary)]
   85|  2.86k|        enum RawValue {
   86|  2.86k|            Null,
   87|  2.86k|            Bool(bool),
   88|  2.86k|            Integer(i64),
   89|  2.86k|            Float(f64),
   90|  2.86k|            String(String),
   91|  2.86k|            Array(Vec<RawValue>),
   92|  2.86k|            Object(HashMap<String, RawValue>),
   93|  2.86k|        }
   94|  2.86k|
   95|  2.86k|        impl From<RawValue> for serde_json::Value {
   96|  2.86k|            fn from(value: RawValue) -> Self {
   97|  2.86k|                match value {
   98|  2.86k|                    RawValue::Null => serde_json::Value::Null,
   99|  2.86k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  2.86k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  2.86k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  2.86k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  2.86k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  2.86k|                    RawValue::Object(obj) => {
  105|  2.86k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|  2.86k|                    }
  107|  2.86k|                }
  108|  2.86k|            }
  109|  2.86k|        }
  110|  2.86k|
  111|  2.86k|        Ok(Json(u.arbitrary::<RawValue>()?.into()))
  112|  2.86k|    }
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   48|  5.72k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
   42|  1.35k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__32RECURSIVE_COUNT_SupportedSegment7___getit0B7_:
   42|      1|#[derive(Debug, Arbitrary)]
_RNvXCs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB2_4JsonNtNtCslATUeuPuGvJ_4core3fmt7Display3fmt:
   56|  2.86k|    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   57|  2.86k|        write!(f, "{}", self.0)
   58|  2.86k|    }
_RNCNvNvNvNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBd_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__24RECURSIVE_COUNT_RawValue7___getit0Bd_:
   84|      1|        #[derive(Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   15|  2.86k|#[derive(Debug, Arbitrary)]
_RNvXNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB8_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCs9VYNaPcKfHq_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB2_8RawValueE4from:
   96|   125k|            fn from(value: RawValue) -> Self {
   97|   125k|                match value {
   98|  17.5k|                    RawValue::Null => serde_json::Value::Null,
   99|  11.6k|                    RawValue::Bool(b) => serde_json::Value::Bool(b),
  100|  4.31k|                    RawValue::Integer(n) => serde_json::Value::from(n),
  101|  6.63k|                    RawValue::Float(f) => serde_json::Value::from(f),
  102|  7.85k|                    RawValue::String(s) => serde_json::Value::String(s),
  103|  37.1k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
  104|  40.6k|                    RawValue::Object(obj) => {
  105|  40.6k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
  106|       |                    }
  107|       |                }
  108|   125k|            }
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons0_1__NtB6_16SupportedSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   42|  1.35k|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtB4_14SupportedQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
   62|  2.86k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   63|  2.86k|        let segment_count = u.arbitrary_len::<SupportedSegment>()?;
   64|  2.86k|        let mut query = JsonPathQueryBuilder::new();
   65|  2.86k|
   66|  2.86k|        for _ in 0..segment_count {
   67|  16.6k|            let segment = u.arbitrary::<SupportedSegment>()?;
   68|  16.6k|            match segment {
   69|  4.07k|                SupportedSegment::Child(SupportedSelector::Name(name)) => query.child_name(name),
   70|  3.16k|                SupportedSegment::Child(SupportedSelector::Wildcard) => query.child_wildcard(),
   71|  1.45k|                SupportedSegment::Child(SupportedSelector::Index(idx)) => query.child_index(idx),
   72|  1.89k|                SupportedSegment::Descendant(SupportedSelector::Name(name)) => query.descendant_name(name),
   73|  1.31k|                SupportedSegment::Descendant(SupportedSelector::Wildcard) => query.descendant_wildcard(),
   74|  4.71k|                SupportedSegment::Descendant(SupportedSelector::Index(idx)) => query.descendant_index(idx),
   75|       |            };
   76|       |        }
   77|       |
   78|  2.86k|        Ok(SupportedQuery(query.into()))
   79|  2.86k|    }
_RNCNvXNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCs9VYNaPcKfHq_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4froms_0Ba_:
  105|  67.9k|                        serde_json::Value::Object(obj.into_iter().map(|x| (x.0, x.1.into())).collect())
_RNCNvXNvNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrary0Bc_:
   84|  1.03k|        #[derive(Arbitrary)]
_RNCNvXNvNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBc_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary1__NtB6_8RawValueBV_9arbitrarys0_0Bc_:
   84|  1.03k|        #[derive(Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
   48|  1.36k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_json1__NtB6_8FuzzDataNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   15|  2.86k|#[derive(Debug, Arbitrary)]
_RNCNvXNvXs0_Cs8ZpES7bF61F_19fuzz_arbitrary_jsonNtBa_4JsonNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryNtNtCs9VYNaPcKfHq_10serde_json5value5ValueINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_8RawValueE4from0Ba_:
  103|  54.9k|                    RawValue::Array(arr) => serde_json::Value::Array(arr.into_iter().map(|x| x.into()).collect()),
_RNCNvXNvCs8ZpES7bF61F_19fuzz_arbitrary_jsons1_1__NtB6_17SupportedSelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
   48|  16.6k|#[derive(Debug, Arbitrary)]

