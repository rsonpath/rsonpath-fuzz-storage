_RNvXs9_Cs98o54wqeRSK_9arbitraryRShNtB5_9Arbitrary19arbitrary_take_restCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  668|  9.40k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  669|  9.40k|        Ok(u.take_rest())
  670|  9.40k|    }
_RNvXs9_Cs98o54wqeRSK_9arbitraryRShNtB5_9Arbitrary9size_hintCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  673|  9.40k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  674|  9.40k|        (0, None)
  675|  9.40k|    }

_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   26|  9.40k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  9.40k|    let lower = lhs.0 + rhs.0;
   28|  9.40k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  9.40k|    (lower, upper)
   30|  9.40k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   37|  9.40k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  9.40k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  9.40k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs1YeCzuuop0X_20fuzz_arbitrary_bytess_1__NtB10_16DisplayableBytesNtB4_9Arbitrary9size_hint0EB10_:
   12|  9.40k|pub fn recursion_guard(
   13|  9.40k|    depth: usize,
   14|  9.40k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  9.40k|) -> (usize, Option<usize>) {
   16|  9.40k|    const MAX_DEPTH: usize = 20;
   17|  9.40k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  9.40k|        f(depth + 1)
   21|       |    }
   22|  9.40k|}
_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   28|  9.40k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured9take_restCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  598|  9.40k|    pub fn take_rest(mut self) -> &'a [u8] {
  599|  9.40k|        mem::take(&mut self.data)
  600|  9.40k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  132|  9.40k|    pub fn is_empty(&self) -> bool {
  133|  9.40k|        self.len() == 0
  134|  9.40k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   85|  9.40k|    pub fn new(data: &'a [u8]) -> Self {
   86|  9.40k|        Unstructured { data }
   87|  9.40k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  108|  9.40k|    pub fn len(&self) -> usize {
  109|  9.40k|        self.data.len()
  110|  9.40k|    }

_RNvNvCs1YeCzuuop0X_20fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  9.40k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  9.40k|                $body
  305|  9.40k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   40|  9.40k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  9.40k|        match self {
   42|  9.40k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  9.40k|    }
rust_fuzzer_test_input:
  259|  9.40k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  9.40k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  9.40k|
  262|  9.40k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  9.40k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  9.40k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  9.40k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  9.40k|                // get to longer inputs that actually lead to interesting executions
  267|  9.40k|                // quicker.
  268|  9.40k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  9.40k|                }
  271|  9.40k|
  272|  9.40k|                let mut u = Unstructured::new(bytes);
  273|  9.40k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  9.40k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  9.40k|                }
  291|       |
  292|  9.40k|                let data = match data {
  293|  9.40k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  9.40k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  9.40k|                result.to_libfuzzer_code()
  299|  9.40k|            }
_RNvXCsfeQOFZTz9nJ_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   30|  9.40k|    fn from(_: ()) -> Self {
   31|  9.40k|        Self::Keep
   32|  9.40k|    }
LLVMFuzzerTestOneInput:
   58|  9.40k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  9.40k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  9.40k|    });
   63|  9.40k|
   64|  9.40k|    match test_input {
   65|  9.40k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  9.40k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  9.40k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  9.40k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  9.40k|        rust_fuzzer_test_input(data_slice)
   62|  9.40k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  474|  3.46M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|  3.46M|        Some((*self as usize).cmp(&(*other as usize)))
  476|  3.46M|    }
_RNvCs36tL2qLycl0_3log9max_level:
 1269|  2.21M|pub fn max_level() -> LevelFilter {
 1270|  2.21M|    // Since `LevelFilter` is `repr(usize)`,
 1271|  2.21M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1272|  2.21M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1273|  2.21M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1274|  2.21M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1275|  2.21M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1276|  2.21M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1277|  2.21M|}
_RNvXs_Cs36tL2qLycl0_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs4sJFyKPpo5j_8rsonpath:
  474|   977k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  475|   977k|        Some((*self as usize).cmp(&(*other as usize)))
  476|   977k|    }

_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2f_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2f_E0EINtB5_3AltB1Z_B2f_B2u_E6choiceBD_:
  134|  9.40k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  9.40k|        match self.0.parse(input.clone()) {
  136|  9.40k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  9.40k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1N_s_0NCINvB1P_14failed_segmentBz_E0EEBB_:
   47|  9.40k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  9.40k|  mut l: List,
   49|  9.40k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  9.40k|}
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1T_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  9.40k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  9.40k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  9.40k|          res => res,
  138|       |        }
  139|  9.40k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0BD_:
   50|  9.40k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EEBB_:
   47|  9.40k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  9.40k|  mut l: List,
   49|  9.40k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  9.40k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1P_s_0NCINvB1R_14failed_segmentBB_E0EE0BD_:
   50|  9.40k|  move |i: I| l.choice(i)

_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|  18.8k|  move |i: Input| {
   40|  18.8k|    let tag_len = tag.input_len();
   41|  18.8k|    let t = tag.clone();
   42|  18.8k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  18.8k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|      0|        let e: ErrorKind = ErrorKind::Tag;
   46|      0|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  18.8k|    res
   50|  18.8k|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  18.8k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  18.8k|  tag: T,
   34|  18.8k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  18.8k|where
   36|  18.8k|  Input: InputTake + Compare<T>,
   37|  18.8k|  T: InputLength + Clone,
   38|  18.8k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  18.8k|}

_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsmyidsRPtaf_15rsonpath_syntax:
   37|  9.40k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  9.40k|    let b = t.as_char() == c;
   39|  9.40k|    (&c, b)
   40|  9.40k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  9.40k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  9.40k|where
   34|  9.40k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  9.40k|  <I as InputIter>::Item: AsChar,
   36|  9.40k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  9.40k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|  9.40k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  9.40k|    let b = t.as_char() == c;
   39|  9.40k|    (&c, b)
   40|  9.40k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsmyidsRPtaf_15rsonpath_syntax:
   32|  9.40k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  9.40k|where
   34|  9.40k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  9.40k|  <I as InputIter>::Item: AsChar,
   36|  9.40k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  9.40k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsmyidsRPtaf_15rsonpath_syntax:
   37|  9.40k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  9.40k|  }) {
   41|  9.40k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|      0|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  9.40k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|  9.40k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  9.40k|  }) {
   41|      0|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  9.40k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  9.40k|  }

_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1x_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1x_NvB4m_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBE_E0EE0E0E0NcNtB1k_10Descendant0EBG_:
   73|  9.40k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  9.40k|where
   75|  9.40k|  F: Parser<I, O1, E>,
   76|  9.40k|  G: FnMut(O1) -> O2,
   77|  9.40k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  9.40k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1m_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1m_NvB2t_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2t_21member_name_shorthandNCINvB2t_14failed_segmentBG_E0EE0E0BI_:
  635|  9.40k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  9.40k|    rest => rest,
  638|  9.40k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1z_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1z_NvB4o_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4o_21member_name_shorthandNCINvB4o_14failed_segmentBG_E0EE0E0E0NcNtB1m_10Descendant0E0BI_:
   78|  9.40k|  move |input: I| {
   79|  9.40k|    let (input, o1) = parser.parse(input)?;
   80|  9.40k|    Ok((input, f(o1)))
   81|  9.40k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1o_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  9.40k|  move |input: I| {
   79|  9.40k|    let (input, o1) = parser.parse(input)?;
   80|  9.40k|    Ok((input, f(o1)))
   81|  9.40k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvB2r_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2r_21member_name_shorthandNCINvB2r_14failed_segmentBE_E0EE0EBG_:
  631|  9.40k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  9.40k|where
  633|  9.40k|  F: Parser<I, O, E>,
  634|  9.40k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  9.40k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMst_BI_B1l_3oneE0BI_:
   78|  9.40k|  move |input: I| {
   79|  9.40k|    let (input, o1) = parser.parse(input)?;
   80|  9.40k|    Ok((input, f(o1)))
   81|  9.40k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1j_3oneEBG_:
   73|  9.40k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  9.40k|where
   75|  9.40k|  F: Parser<I, O1, E>,
   76|  9.40k|  G: FnMut(O1) -> O2,
   77|  9.40k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  9.40k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1m_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  9.40k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  9.40k|where
   75|  9.40k|  F: Parser<I, O1, E>,
   76|  9.40k|  G: FnMut(O1) -> O2,
   77|  9.40k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  9.40k|}

_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|  9.40k|  fn from_char(input: I, _: char) -> Self {
   27|  9.40k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  9.40k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
   73|  9.40k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  9.40k|    Error { input, code: kind }
   75|  9.40k|  }

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B1Z_E6finishB1c_:
   36|  9.40k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  9.40k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1M_E0NCINvNtB7_10combinator3cutB10_B16_B1M_NCINvNtB7_6branch3altB10_B16_B1M_TNCNvNtB18_6parser18descendant_segment0NCINvB38_3mapB10_NtB18_8SelectorB16_B1M_NvB4h_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4h_21member_name_shorthandNCINvB4h_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1M_E5parseB18_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsmyidsRPtaf_15rsonpath_syntax:
   36|  9.40k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  9.40k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|  18.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.8k|    self(i)
  326|  18.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMst_B12_B1F_3oneE0INtB5_6ParserBY_B1F_B1V_E5parseB12_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1G_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1G_NvB2P_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2P_21member_name_shorthandNCINvB2P_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1G_E5parseB12_:
  324|  9.40k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.40k|    self(i)
  326|  9.40k|  }

_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1r_E0NCINvNtB6_10combinator3cutBG_BL_B1r_NCINvNtB6_6branch3altBG_BL_B1r_TNCNvNtBN_6parser18descendant_segment0NCINvB2K_3mapBG_NtBN_8SelectorBL_B1r_NvB3P_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3P_21member_name_shorthandNCINvB3P_14failed_segmentBL_E0EE0E0E0BN_:
   71|  9.40k|  move |input: I| {
   72|  9.40k|    let (input, _) = first.parse(input)?;
   73|  9.40k|    second.parse(input)
   74|  9.40k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1p_E0NCINvNtB4_10combinator3cutBE_BJ_B1p_NCINvNtB4_6branch3altBE_BJ_B1p_TNCNvNtBL_6parser18descendant_segment0NCINvB2I_3mapBE_NtBL_8SelectorBJ_B1p_NvB3N_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3N_21member_name_shorthandNCINvB3N_14failed_segmentBJ_E0EE0E0EBL_:
   63|  9.40k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  9.40k|  mut first: F,
   65|  9.40k|  mut second: G,
   66|  9.40k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  9.40k|where
   68|  9.40k|  F: Parser<I, O1, E>,
   69|  9.40k|  G: Parser<I, O2, E>,
   70|  9.40k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  9.40k|}

_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  272|  9.40k|  fn as_char(self) -> char {
  273|  9.40k|    *self
  274|  9.40k|  }
_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0CsmyidsRPtaf_15rsonpath_syntax:
  740|  28.2k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCsmyidsRPtaf_15rsonpath_syntax:
   33|  18.8k|  fn input_len(&self) -> usize {
   34|  18.8k|    self.len()
   35|  18.8k|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  18.8k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  18.8k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  18.8k|
  742|  18.8k|    match pos {
  743|      0|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  18.8k|        if self.len() >= t.len() {
  746|  18.8k|          CompareResult::Ok
  747|       |        } else {
  748|      0|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  18.8k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  18.8k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  18.8k|    self.as_bytes().compare(t.as_bytes())
  841|  18.8k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  296|  9.40k|  fn len(self) -> usize {
  297|  9.40k|    self.len_utf8()
  298|  9.40k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  241|  18.8k|  fn as_char(self) -> char {
  242|  18.8k|    self
  243|  18.8k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCsmyidsRPtaf_15rsonpath_syntax:
  424|  18.8k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  18.8k|    let (prefix, suffix) = self.split_at(count);
  426|  18.8k|    (suffix, prefix)
  427|  18.8k|  }
_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCsmyidsRPtaf_15rsonpath_syntax:
  386|  18.8k|  fn iter_elements(&self) -> Self::IterElem {
  387|  18.8k|    self.chars()
  388|  18.8k|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  18.8k|  fn as_bytes(&self) -> &[u8] {
   98|  18.8k|    (*self).as_bytes()
   99|  18.8k|  }
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|  9.40k|    fn slice(&self, range: $ty) -> Self {
 1014|  9.40k|      &self[range]
 1015|  9.40k|    }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   49|  9.40k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  9.40k|        // An `Acquire` load is enough because that makes all the initialization
   51|  9.40k|        // operations visible to us, and, this being a fast path, weaker
   52|  9.40k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  9.40k|        // `SeqCst` operations on the slow path.
   54|  9.40k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  9.40k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  963|  9.40k|        pub fn get(&self) -> Option<&T> {
  964|  9.40k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  9.40k|                None
  969|       |            }
  970|  9.40k|        }

_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  641|  28.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  28.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  28.2k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFrameE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2455|  10.1k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  10.1k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  10.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1225|     21|    fn reserve_one_unchecked(&mut self) {
 1226|     21|        debug_assert_eq!(self.len(), self.capacity());
 1227|     21|        let new_cap = self.len()
 1228|     21|            .checked_add(1)
 1229|     21|            .and_then(usize::checked_next_power_of_two)
 1230|     21|            .expect("capacity overflow");
 1231|     21|        infallible(self.try_grow(new_cap))
 1232|     21|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E6inlineCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  637|  21.3k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  21.3k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  21.3k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1845|  47.5k|    fn deref(&self) -> &[A::Item] {
 1846|  47.5k|        unsafe {
 1847|  47.5k|            let (ptr, len, _) = self.triple();
 1848|  47.5k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  47.5k|        }
 1850|  47.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E10inline_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  641|  28.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  28.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  28.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E9from_heapCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  664|     21|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  665|     21|        SmallVecData { heap: (ptr, len) }
  666|     21|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFrameE6as_ptrCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2459|  10.2k|    fn as_ptr(self) -> *const T {
 2460|  10.2k|        self.0.as_ptr()
 2461|  10.2k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1855|  9.38k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  9.38k|        unsafe {
 1857|  9.38k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  9.38k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  9.38k|        }
 1860|  9.38k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2035|  28.2k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  28.2k|        &mut (&mut **self)[index]
 2037|  28.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E15inline_capacityCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  926|   179k|    fn inline_capacity() -> usize {
  927|   179k|        if mem::size_of::<A::Item>() > 0 {
  928|   179k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   179k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E10triple_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  984|  28.2k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  28.2k|        unsafe {
  986|  28.2k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  28.2k|                (
  991|  28.2k|                    self.data.inline_mut(),
  992|  28.2k|                    &mut self.capacity,
  993|  28.2k|                    Self::inline_capacity(),
  994|  28.2k|                )
  995|       |            }
  996|       |        }
  997|  28.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  926|   153k|    fn inline_capacity() -> usize {
  927|   153k|        if mem::size_of::<A::Item>() > 0 {
  928|   153k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   153k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E6tripleCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  971|  10.3k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  10.3k|        unsafe {
  973|  10.3k|            if self.spilled() {
  974|    197|                let (ptr, len) = self.data.heap();
  975|    197|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  10.1k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  10.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E10triple_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  984|  62.0k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  62.0k|        unsafe {
  986|  62.0k|            if self.spilled() {
  987|    883|                let (ptr, len_ptr) = self.data.heap_mut();
  988|    883|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  61.1k|                (
  991|  61.1k|                    self.data.inline_mut(),
  992|  61.1k|                    &mut self.capacity,
  993|  61.1k|                    Self::inline_capacity(),
  994|  61.1k|                )
  995|       |            }
  996|       |        }
  997|  62.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E4pushCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1114|  42.4k|    pub fn push(&mut self, value: A::Item) {
 1115|  42.4k|        unsafe {
 1116|  42.4k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  42.4k|            if *len == cap {
 1118|     21|                self.reserve_one_unchecked();
 1119|     21|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|     21|                ptr = heap_ptr;
 1121|     21|                len = heap_len;
 1122|  42.4k|            }
 1123|  42.4k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  42.4k|            *len += 1;
 1125|  42.4k|        }
 1126|  42.4k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2420|   127k|                fn size() -> usize { $size }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1845|  21.3k|    fn deref(&self) -> &[A::Item] {
 1846|  21.3k|        unsafe {
 1847|  21.3k|            let (ptr, len, _) = self.triple();
 1848|  21.3k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  21.3k|        }
 1850|  21.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E3lenCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  952|     42|    pub fn len(&self) -> usize {
  953|     42|        self.triple().1
  954|     42|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1855|  28.2k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  28.2k|        unsafe {
 1857|  28.2k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  28.2k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  28.2k|        }
 1860|  28.2k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2455|  21.3k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  21.3k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  21.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E7spilledCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1001|  77.8k|    pub fn spilled(&self) -> bool {
 1002|  77.8k|        self.capacity > Self::inline_capacity()
 1003|  77.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E6tripleCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  971|  21.3k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  21.3k|        unsafe {
  973|  21.3k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  21.3k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  21.3k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E3popCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1130|  10.1k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  10.1k|        unsafe {
 1132|  10.1k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  10.1k|            let ptr: *const _ = ptr.as_ptr();
 1134|  10.1k|            if *len_ptr == 0 {
 1135|      0|                return None;
 1136|  10.1k|            }
 1137|  10.1k|            let last_index = *len_ptr - 1;
 1138|  10.1k|            *len_ptr = last_index;
 1139|  10.1k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  10.1k|    }
_RINvCsb0rT3YSfk9o_8smallvec12layout_arrayNtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFrameECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  328|     21|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  329|     21|    let size = mem::size_of::<T>()
  330|     21|        .checked_mul(n)
  331|     21|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  332|     21|    let align = mem::align_of::<T>();
  333|     21|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  334|     21|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E6inlineCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  637|  47.5k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  47.5k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  47.5k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2035|  28.2k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  28.2k|        &mut (&mut **self)[index]
 2037|  28.2k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2117|  28.2k|    fn drop(&mut self) {
 2118|  28.2k|        unsafe {
 2119|  28.2k|            if self.spilled() {
 2120|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2121|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  28.2k|            } else {
 2123|  28.2k|                ptr::drop_in_place(&mut self[..]);
 2124|  28.2k|            }
 2125|       |        }
 2126|  28.2k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1855|  28.2k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  28.2k|        unsafe {
 1857|  28.2k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  28.2k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  28.2k|        }
 1860|  28.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E6tripleCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  971|  47.5k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  47.5k|        unsafe {
  973|  47.5k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  47.5k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  47.5k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E6inlineCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  637|  10.1k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  10.1k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  10.1k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E8heap_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  659|    925|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  660|    925|        let h = &mut self.heap;
  661|    925|        (h.0, &mut h.1)
  662|    925|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2420|   179k|                fn size() -> usize { $size }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E10inline_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  641|  61.1k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  61.1k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  61.1k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  926|   127k|    fn inline_capacity() -> usize {
  927|   127k|        if mem::size_of::<A::Item>() > 0 {
  928|   127k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   127k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  318|     21|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|     21|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|     21|}
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  984|  28.2k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  28.2k|        unsafe {
  986|  28.2k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  28.2k|                (
  991|  28.2k|                    self.data.inline_mut(),
  992|  28.2k|                    &mut self.capacity,
  993|  28.2k|                    Self::inline_capacity(),
  994|  28.2k|                )
  995|       |            }
  996|       |        }
  997|  28.2k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2035|  9.38k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  9.38k|        &mut (&mut **self)[index]
 2037|  9.38k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E7spilledCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1001|  81.7k|    pub fn spilled(&self) -> bool {
 1002|  81.7k|        self.capacity > Self::inline_capacity()
 1003|  81.7k|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2420|   153k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E7spilledCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1001|   104k|    pub fn spilled(&self) -> bool {
 1002|   104k|        self.capacity > Self::inline_capacity()
 1003|   104k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2117|  9.40k|    fn drop(&mut self) {
 2118|  9.40k|        unsafe {
 2119|  9.40k|            if self.spilled() {
 2120|     21|                let (ptr, &mut len) = self.data.heap_mut();
 2121|     21|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  9.38k|            } else {
 2123|  9.38k|                ptr::drop_in_place(&mut self[..]);
 2124|  9.38k|            }
 2125|       |        }
 2126|  9.40k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1845|  10.2k|    fn deref(&self) -> &[A::Item] {
 1846|  10.2k|        unsafe {
 1847|  10.2k|            let (ptr, len, _) = self.triple();
 1848|  10.2k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  10.2k|        }
 1850|  10.2k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E4heapCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  655|    197|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  656|    197|        (ConstNonNull(self.heap.0), self.heap.1)
  657|    197|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2455|  47.5k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  47.5k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  47.5k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionE6as_ptrCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2459|  21.3k|    fn as_ptr(self) -> *const T {
 2460|  21.3k|        self.0.as_ptr()
 2461|  21.3k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEE6as_ptrCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2459|  47.5k|    fn as_ptr(self) -> *const T {
 2460|  47.5k|        self.0.as_ptr()
 2461|  47.5k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E8capacityCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  964|     21|    pub fn capacity(&self) -> usize {
  965|     21|        self.triple().2
  966|     21|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 2117|  28.2k|    fn drop(&mut self) {
 2118|  28.2k|        unsafe {
 2119|  28.2k|            if self.spilled() {
 2120|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2121|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  28.2k|            } else {
 2123|  28.2k|                ptr::drop_in_place(&mut self[..]);
 2124|  28.2k|            }
 2125|       |        }
 2126|  28.2k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E8try_growCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
 1173|     21|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1174|     21|        unsafe {
 1175|     21|            let unspilled = !self.spilled();
 1176|     21|            let (ptr, &mut len, cap) = self.triple_mut();
 1177|     21|            assert!(new_cap >= len);
 1178|     21|            if new_cap <= Self::inline_capacity() {
 1179|      0|                if unspilled {
 1180|      0|                    return Ok(());
 1181|      0|                }
 1182|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1183|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1184|      0|                self.capacity = len;
 1185|      0|                deallocate(ptr, cap);
 1186|     21|            } else if new_cap != cap {
 1187|     21|                let layout = layout_array::<A::Item>(new_cap)?;
 1188|     21|                debug_assert!(layout.size() > 0);
 1189|       |                let new_alloc;
 1190|     21|                if unspilled {
 1191|     21|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1192|     21|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1193|     21|                        .cast();
 1194|     21|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1195|       |                } else {
 1196|       |                    // This should never fail since the same succeeded
 1197|       |                    // when previously allocating `ptr`.
 1198|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1199|       |
 1200|      0|                    let new_ptr =
 1201|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1202|      0|                    new_alloc = NonNull::new(new_ptr)
 1203|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1204|      0|                        .cast();
 1205|       |                }
 1206|     21|                self.data = SmallVecData::from_heap(new_alloc, len);
 1207|     21|                self.capacity = new_cap;
 1208|      0|            }
 1209|     21|            Ok(())
 1210|       |        }
 1211|     21|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionE3newBQ_:
 2455|  18.8k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  18.8k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E7reserveB1E_:
 1219|  18.8k|    pub fn reserve(&mut self, additional: usize) {
 1220|  18.8k|        infallible(self.try_reserve(additional))
 1221|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E15inline_capacityBM_:
  926|   178k|    fn inline_capacity() -> usize {
  927|   178k|        if mem::size_of::<A::Item>() > 0 {
  928|   178k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   178k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E10triple_mutBM_:
  984|  56.4k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  56.4k|        unsafe {
  986|  56.4k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  56.4k|                (
  991|  56.4k|                    self.data.inline_mut(),
  992|  56.4k|                    &mut self.capacity,
  993|  56.4k|                    Self::inline_capacity(),
  994|  56.4k|                )
  995|       |            }
  996|       |        }
  997|  56.4k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropB1E_:
 2117|  18.8k|    fn drop(&mut self) {
 2118|  18.8k|        unsafe {
 2119|  18.8k|            if self.spilled() {
 2120|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2121|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  18.8k|            } else {
 2123|  18.8k|                ptr::drop_in_place(&mut self[..]);
 2124|  18.8k|            }
 2125|       |        }
 2126|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E7reserveBM_:
 1219|  18.8k|    pub fn reserve(&mut self, additional: usize) {
 1220|  18.8k|        infallible(self.try_reserve(additional))
 1221|  18.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E11from_inlineBR_:
  645|  47.0k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  47.0k|        SmallVecData {
  647|  47.0k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  47.0k|        }
  649|  47.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E11inline_sizeBO_:
  946|  9.40k|    pub fn inline_size(&self) -> usize {
  947|  9.40k|        Self::inline_capacity()
  948|  9.40k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefB1E_:
 1845|  18.8k|    fn deref(&self) -> &[A::Item] {
 1846|  18.8k|        unsafe {
 1847|  18.8k|            let (ptr, len, _) = self.triple();
 1848|  18.8k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  18.8k|        }
 1850|  18.8k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutB1E_:
 1855|  18.8k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  18.8k|        unsafe {
 1857|  18.8k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  18.8k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  18.8k|        }
 1860|  18.8k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_NtB5_5Array4sizeBx_:
 2420|   225k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  926|  9.40k|    fn inline_capacity() -> usize {
  927|  9.40k|        if mem::size_of::<A::Item>() > 0 {
  928|  9.40k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E6tripleB1E_:
  971|  18.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  18.8k|        unsafe {
  973|  18.8k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  18.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  18.8k|    }
_RNvXsf_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBM_:
 1845|  18.8k|    fn deref(&self) -> &[A::Item] {
 1846|  18.8k|        unsafe {
 1847|  18.8k|            let (ptr, len, _) = self.triple();
 1848|  18.8k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1849|  18.8k|        }
 1850|  18.8k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBM_:
 1855|  18.8k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  18.8k|        unsafe {
 1857|  18.8k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  18.8k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  18.8k|        }
 1860|  18.8k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2x_5range9RangeFullE9index_mutB1E_:
 2035|  18.8k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  18.8k|        &mut (&mut **self)[index]
 2037|  18.8k|    }
_RNvXs1v_Csb0rT3YSfk9o_8smallvecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2420|  18.8k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E11inline_sizeB1E_:
  946|  9.40k|    pub fn inline_size(&self) -> usize {
  947|  9.40k|        Self::inline_capacity()
  948|  9.40k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3getCs4sJFyKPpo5j_8rsonpath:
 2345|  37.6k|    fn get(&self) -> usize {
 2346|  37.6k|        self.local_len
 2347|  37.6k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultB1E_:
 2096|  18.8k|    fn default() -> SmallVec<A> {
 2097|  18.8k|        SmallVec::new()
 2098|  18.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E10inline_mutBT_:
  641|  56.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  56.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  56.4k|    }
_RNvXsg_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBO_:
 1855|  9.40k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1856|  9.40k|        unsafe {
 1857|  9.40k|            let (ptr, &mut len, _) = self.triple_mut();
 1858|  9.40k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1859|  9.40k|        }
 1860|  9.40k|    }
_RNvMsO_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDrop3newCs4sJFyKPpo5j_8rsonpath:
 2337|  37.6k|    fn new(len: &'a mut usize) -> Self {
 2338|  37.6k|        SetLenOnDrop {
 2339|  37.6k|            local_len: *len,
 2340|  37.6k|            len,
 2341|  37.6k|        }
 2342|  37.6k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBz_:
 2420|   141k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E3newBM_:
  779|  47.0k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  47.0k|        assert!(
  783|  47.0k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  47.0k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  47.0k|        SmallVec {
  787|  47.0k|            capacity: 0,
  788|  47.0k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  47.0k|        }
  790|  47.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E6inlineB1J_:
  637|  18.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  18.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  18.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E10inline_mutB1J_:
  641|  56.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  56.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  56.4k|    }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorBJ_E9from_iterINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4l_9Minimizer18process_superstate0EEBN_:
 2052|  18.8k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  18.8k|        let mut v = SmallVec::new();
 2054|  18.8k|        v.extend(iterable);
 2055|  18.8k|        v
 2056|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E7spilledBM_:
 1001|  94.0k|    pub fn spilled(&self) -> bool {
 1002|  94.0k|        self.capacity > Self::inline_capacity()
 1003|  94.0k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E11from_inlineB1J_:
  645|  47.0k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  47.0k|        SmallVecData {
  647|  47.0k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  47.0k|        }
  649|  47.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E15inline_capacityB1E_:
  926|   178k|    fn inline_capacity() -> usize {
  927|   178k|        if mem::size_of::<A::Item>() > 0 {
  928|   178k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   178k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E3newBO_:
  779|  9.40k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  9.40k|        assert!(
  783|  9.40k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  9.40k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  9.40k|        SmallVec {
  787|  9.40k|            capacity: 0,
  788|  9.40k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  9.40k|        }
  790|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E10triple_mutB1E_:
  984|  56.4k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  56.4k|        unsafe {
  986|  56.4k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  56.4k|                (
  991|  56.4k|                    self.data.inline_mut(),
  992|  56.4k|                    &mut self.capacity,
  993|  56.4k|                    Self::inline_capacity(),
  994|  56.4k|                )
  995|       |            }
  996|       |        }
  997|  56.4k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E10inline_mutBR_:
  641|  56.4k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  642|  56.4k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  643|  56.4k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBM_:
 2117|  18.8k|    fn drop(&mut self) {
 2118|  18.8k|        unsafe {
 2119|  18.8k|            if self.spilled() {
 2120|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2121|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  18.8k|            } else {
 2123|  18.8k|                ptr::drop_in_place(&mut self[..]);
 2124|  18.8k|            }
 2125|       |        }
 2126|  18.8k|    }
_RNvXsP_Csb0rT3YSfk9o_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs4sJFyKPpo5j_8rsonpath:
 2357|  37.6k|    fn drop(&mut self) {
 2358|  37.6k|        *self.len = self.local_len;
 2359|  37.6k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutBM_:
 2035|  18.8k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  18.8k|        &mut (&mut **self)[index]
 2037|  18.8k|    }
_RNvXsX_Csb0rT3YSfk9o_8smallvecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_NtB5_5Array4sizeB1p_:
 2420|   225k|                fn size() -> usize { $size }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E6tripleBM_:
  971|  18.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  972|  18.8k|        unsafe {
  973|  18.8k|            if self.spilled() {
  974|      0|                let (ptr, len) = self.data.heap();
  975|      0|                (ptr, len, self.capacity)
  976|       |            } else {
  977|  18.8k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  978|       |            }
  979|       |        }
  980|  18.8k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEE3newB1I_:
 2455|  18.8k|    fn new(ptr: *const T) -> Option<Self> {
 2456|  18.8k|        NonNull::new(ptr as *mut T).map(Self)
 2457|  18.8k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5x_9Minimizer18process_superstates_0EEB1F_:
 2060|  18.8k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  18.8k|        let mut iter = iterable.into_iter();
 2062|  18.8k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  18.8k|        self.reserve(lower_size_bound);
 2064|  18.8k|
 2065|  18.8k|        unsafe {
 2066|  18.8k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  18.8k|            let ptr = ptr.as_ptr();
 2068|  18.8k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  18.8k|            while len.get() < cap {
 2070|  18.8k|                if let Some(out) = iter.next() {
 2071|      0|                    ptr::write(ptr.add(len.get()), out);
 2072|      0|                    len.increment_len(1);
 2073|      0|                } else {
 2074|  18.8k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|      0|        for elem in iter {
 2080|      0|            self.push(elem);
 2081|      0|        }
 2082|  18.8k|    }
_RINvXss_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendBJ_E6extendINtNtNtB1M_8adapters3map3MapNtNtBL_20array_transition_set26ArrayTransitionSetIteratorNCNvMNtBL_9minimizerNtB4b_9Minimizer18process_superstate0EEBN_:
 2060|  18.8k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2061|  18.8k|        let mut iter = iterable.into_iter();
 2062|  18.8k|        let (lower_size_bound, _) = iter.size_hint();
 2063|  18.8k|        self.reserve(lower_size_bound);
 2064|  18.8k|
 2065|  18.8k|        unsafe {
 2066|  18.8k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2067|  18.8k|            let ptr = ptr.as_ptr();
 2068|  18.8k|            let mut len = SetLenOnDrop::new(len_ptr);
 2069|  18.8k|            while len.get() < cap {
 2070|  18.8k|                if let Some(out) = iter.next() {
 2071|      0|                    ptr::write(ptr.add(len.get()), out);
 2072|      0|                    len.increment_len(1);
 2073|      0|                } else {
 2074|  18.8k|                    return;
 2075|       |                }
 2076|       |            }
 2077|       |        }
 2078|       |
 2079|      0|        for elem in iter {
 2080|      0|            self.push(elem);
 2081|      0|        }
 2082|  18.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E11from_inlineBT_:
  645|  9.40k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  9.40k|        SmallVecData {
  647|  9.40k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  9.40k|        }
  649|  9.40k|    }
_RNvXsp_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1R_5range9RangeFullE9index_mutBO_:
 2035|  9.40k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2036|  9.40k|        &mut (&mut **self)[index]
 2037|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E15inline_capacityBO_:
  926|   131k|    fn inline_capacity() -> usize {
  927|   131k|        if mem::size_of::<A::Item>() > 0 {
  928|   131k|            A::size()
  929|       |        } else {
  930|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  931|       |            // Therefore all items are at the same address,
  932|       |            // and any array size has capacity for infinitely many items.
  933|       |            // The capacity is limited by the bit width of the length field.
  934|       |            //
  935|       |            // `Vec` also does this:
  936|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  937|       |            //
  938|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  939|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  940|      0|            core::usize::MAX
  941|       |        }
  942|   131k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E3newBO_:
  779|  9.40k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  9.40k|        assert!(
  783|  9.40k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  9.40k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  9.40k|        SmallVec {
  787|  9.40k|            capacity: 0,
  788|  9.40k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  9.40k|        }
  790|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E10triple_mutBO_:
  984|  56.4k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  985|  56.4k|        unsafe {
  986|  56.4k|            if self.spilled() {
  987|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  988|      0|                (ptr, len_ptr, self.capacity)
  989|       |            } else {
  990|  56.4k|                (
  991|  56.4k|                    self.data.inline_mut(),
  992|  56.4k|                    &mut self.capacity,
  993|  56.4k|                    Self::inline_capacity(),
  994|  56.4k|                )
  995|       |            }
  996|       |        }
  997|  56.4k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E4pushBO_:
 1114|  18.8k|    pub fn push(&mut self, value: A::Item) {
 1115|  18.8k|        unsafe {
 1116|  18.8k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1117|  18.8k|            if *len == cap {
 1118|      0|                self.reserve_one_unchecked();
 1119|      0|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1120|      0|                ptr = heap_ptr;
 1121|      0|                len = heap_len;
 1122|  18.8k|            }
 1123|  18.8k|            ptr::write(ptr.as_ptr().add(*len), value);
 1124|  18.8k|            *len += 1;
 1125|  18.8k|        }
 1126|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E7spilledBO_:
 1001|  65.8k|    pub fn spilled(&self) -> bool {
 1002|  65.8k|        self.capacity > Self::inline_capacity()
 1003|  65.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_E3popBO_:
 1130|  28.2k|    pub fn pop(&mut self) -> Option<A::Item> {
 1131|  28.2k|        unsafe {
 1132|  28.2k|            let (ptr, len_ptr, _) = self.triple_mut();
 1133|  28.2k|            let ptr: *const _ = ptr.as_ptr();
 1134|  28.2k|            if *len_ptr == 0 {
 1135|  9.40k|                return None;
 1136|  18.8k|            }
 1137|  18.8k|            let last_index = *len_ptr - 1;
 1138|  18.8k|            *len_ptr = last_index;
 1139|  18.8k|            Some(ptr::read(ptr.add(last_index)))
 1140|       |        }
 1141|  28.2k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullTRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEE6as_ptrB1I_:
 2459|  18.8k|    fn as_ptr(self) -> *const T {
 2460|  18.8k|        self.0.as_ptr()
 2461|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E11inline_sizeBM_:
  946|  9.40k|    pub fn inline_size(&self) -> usize {
  947|  9.40k|        Self::inline_capacity()
  948|  9.40k|    }
_RNvMsR_Csb0rT3YSfk9o_8smallvecINtB5_12ConstNonNullNtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionE6as_ptrBQ_:
 2459|  18.8k|    fn as_ptr(self) -> *const T {
 2460|  18.8k|        self.0.as_ptr()
 2461|  18.8k|    }
_RNvXsv_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBO_:
 2117|  9.40k|    fn drop(&mut self) {
 2118|  9.40k|        unsafe {
 2119|  9.40k|            if self.spilled() {
 2120|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2121|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2122|  9.40k|            } else {
 2123|  9.40k|                ptr::drop_in_place(&mut self[..]);
 2124|  9.40k|            }
 2125|       |        }
 2126|  9.40k|    }
_RINvXsr_Csb0rT3YSfk9o_8smallvecINtB6_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2A_8adapters3map3MapINtCsEjgspSwkHp_10vector_map8IntoIterBK_NtNtB1D_9small_set11SmallSet256ENCNvMNtB1D_9minimizerNtB5H_9Minimizer18process_superstates_0EEB1F_:
 2052|  18.8k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2053|  18.8k|        let mut v = SmallVec::new();
 2054|  18.8k|        v.extend(iterable);
 2055|  18.8k|        v
 2056|  18.8k|    }
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  645|  9.40k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  646|  9.40k|        SmallVecData {
  647|  9.40k|            inline: core::mem::ManuallyDrop::new(inline),
  648|  9.40k|        }
  649|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E11try_reserveBM_:
 1237|  18.8k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  18.8k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  18.8k|        // calls to it from callers.
 1240|  18.8k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  18.8k|        if cap - len >= additional {
 1242|  18.8k|            return Ok(());
 1243|      0|        }
 1244|      0|        let new_cap = len
 1245|      0|            .checked_add(additional)
 1246|      0|            .and_then(usize::checked_next_power_of_two)
 1247|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|      0|        self.try_grow(new_cap)
 1249|  18.8k|    }
_RNvXsu_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBM_:
 2096|  18.8k|    fn default() -> SmallVec<A> {
 2097|  18.8k|        SmallVec::new()
 2098|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E3newB1E_:
  779|  47.0k|    pub fn new() -> SmallVec<A> {
  780|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  781|       |        // this check should be optimized away entirely for valid ones.
  782|  47.0k|        assert!(
  783|  47.0k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  784|  47.0k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  785|       |        );
  786|  47.0k|        SmallVec {
  787|  47.0k|            capacity: 0,
  788|  47.0k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  789|  47.0k|        }
  790|  47.0k|    }
_RINvCsb0rT3YSfk9o_8smallvec10infallibleuECs4sJFyKPpo5j_8rsonpath:
  318|  37.6k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  319|      0|    match result {
  320|  37.6k|        Ok(x) => x,
  321|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  322|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  323|       |    }
  324|  37.6k|}
_RNvMs9_Csb0rT3YSfk9o_8smallvecINtB5_12SmallVecDataANtNtCs4sJFyKPpo5j_8rsonpath9automaton15ArrayTransitionj2_E6inlineBR_:
  637|  18.8k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  638|  18.8k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  639|  18.8k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecANtNtNtCs4sJFyKPpo5j_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  946|  9.40k|    pub fn inline_size(&self) -> usize {
  947|  9.40k|        Self::inline_capacity()
  948|  9.40k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E7spilledB1E_:
 1001|  94.0k|    pub fn spilled(&self) -> bool {
 1002|  94.0k|        self.capacity > Self::inline_capacity()
 1003|  94.0k|    }
_RNvMsc_Csb0rT3YSfk9o_8smallvecINtB5_8SmallVecATRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton5state5StateEj2_E11try_reserveB1E_:
 1237|  18.8k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1238|  18.8k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1239|  18.8k|        // calls to it from callers.
 1240|  18.8k|        let (_, &mut len, cap) = self.triple_mut();
 1241|  18.8k|        if cap - len >= additional {
 1242|  18.8k|            return Ok(());
 1243|      0|        }
 1244|      0|        let new_cap = len
 1245|      0|            .checked_add(additional)
 1246|      0|            .and_then(usize::checked_next_power_of_two)
 1247|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1248|      0|        self.try_grow(new_cap)
 1249|  18.8k|    }

_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256E8iter_mutB1z_:
  175|  18.8k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  18.8k|        IterMut {
  177|  18.8k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  18.8k|        }
  179|  18.8k|    }
_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintB1E_:
  326|  18.8k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  18.8k|        self.iter.size_hint()
  328|  18.8k|    }
_RNvXsr_CsEjgspSwkHp_10vector_mapINtB5_7IterMutRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1D_:
  494|  18.8k|            fn next(&mut self) -> Option<Self::Item> {
  495|  18.8k|                self.iter.next()
  496|  18.8k|            }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3new0BM_:
   41|  9.40k|    #[post(ret.len() == 0)]
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE8positionBF_EBL_:
   79|  37.6k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  37.6k|        self.keys.iter().position(|k| key == k)
   81|  37.6k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE13with_capacity0BM_:
   49|  9.40k|    #[post(ret.len() == 0)]
_RNvXs4_CsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBH_E5indexBN_:
  277|  37.6k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  37.6k|        self.get(key).unwrap()
  279|  37.6k|    }
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBN_5state5StateE3getBJ_E00BP_:
   90|  37.6k|        self.position(key).map(|p| &self.values[p])
_RNvXs8_CsEjgspSwkHp_10vector_mapINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1C_:
  307|  18.8k|    fn into_iter(self) -> Self::IntoIter {
  308|  18.8k|        IntoIter {
  309|  18.8k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  18.8k|        }
  311|  18.8k|    }
_RNvMCsEjgspSwkHp_10vector_mapINtB2_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBI_5state5StateE3lenBK_:
   60|  18.8k|    pub fn len(&self) -> usize {
   61|  18.8k|        self.keys.len()
   62|  18.8k|    }
_RNvXs7_CsEjgspSwkHp_10vector_mapQINtB5_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterB1D_:
  299|  18.8k|    fn into_iter(self) -> Self::IntoIter {
  300|  18.8k|        self.iter_mut()
  301|  18.8k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256E3new0B1B_:
   41|  18.8k|    #[post(ret.len() == 0)]
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE12contains_keyBF_EBL_:
   83|  28.2k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  28.2k|        self.position(key).is_some()
   85|  28.2k|    }
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE8positionBH_E0BN_:
   80|  47.0k|        self.keys.iter().position(|k| key == k)
_RNCNCINvMCsEjgspSwkHp_10vector_mapINtB7_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBN_3nfa10NfaStateIdE3getBJ_E00BP_:
   90|  9.40k|        self.position(key).map(|p| &self.values[p])
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE6insert0BM_:
   99|  28.2k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE13with_capacity0BM_:
   49|  9.40k|    #[post(ret.len() == 0)]
_RNvXs9_CsEjgspSwkHp_10vector_mapINtB5_8IntoIterRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1E_:
  322|  18.8k|    fn next(&mut self) -> Option<(K, V)> {
  323|  18.8k|        self.iter.next()
  324|  18.8k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE6insert0BM_:
   99|  28.2k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RINvMCsEjgspSwkHp_10vector_mapINtB3_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBJ_5state5StateE8positionBF_EBL_:
   79|  94.0k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  94.0k|        self.keys.iter().position(|k| key == k)
   81|  94.0k|    }
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapRNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256E13with_capacity0B1B_:
   49|  18.8k|    #[post(ret.len() == 0)]
_RNCINvMCsEjgspSwkHp_10vector_mapINtB5_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBL_5state5StateE8positionBH_E0BN_:
   80|   188k|        self.keys.iter().position(|k| key == k)
_RNCNvMCsEjgspSwkHp_10vector_mapINtB4_6VecMapNtNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_set11SmallSet256NtNtBK_5state5StateE3new0BM_:
   41|  9.40k|    #[post(ret.len() == 0)]

_RNvMs7_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_10StateTable18member_transitions:
  415|  47.5k|    pub fn member_transitions(&self) -> &[MemberTransition<'q>] {
  416|  47.5k|        &self.member_transitions
  417|  47.5k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton27has_transition_to_accepting:
  341|  31.3k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  342|  31.3k|        self[state].attributes.has_transition_to_accepting()
  343|  31.3k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton12is_rejecting:
  358|  42.4k|    pub fn is_rejecting(&self, state: State) -> bool {
  359|  42.4k|        self[state].attributes.is_rejecting()
  360|  42.4k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton13initial_state:
  239|  18.8k|    pub fn initial_state(&self) -> State {
  240|  18.8k|        State(1)
  241|  18.8k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton10is_unitary:
  379|  10.1k|    pub fn is_unitary(&self, state: State) -> bool {
  380|  10.1k|        self[state].attributes.is_unitary()
  381|  10.1k|    }
_RNvXs1_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
   97|   459k|    fn index(&self, index: State) -> &Self::Output {
   98|   459k|        &self.states[index.0 as usize]
   99|   459k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  152|  9.40k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  153|  9.40k|        let nfa = NondeterministicAutomaton::new(query)?;
  154|      0|        debug!("NFA: {}", nfa);
  155|  9.40k|        Automaton::minimize(nfa)
  156|  9.40k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  319|  14.1k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &JsonUInt) -> bool {
  320|  14.1k|        let state = &self[state];
  321|  14.1k|        state.attributes.has_array_transition_to_accepting()
  322|      0|            && state
  323|      0|                .array_transitions()
  324|      0|                .iter()
  325|      0|                .any(|trans| self.is_accepting(trans.target) && trans.matches(*match_index))
  326|  14.1k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton20is_select_root_query:
  178|  9.40k|    pub fn is_select_root_query(&self) -> bool {
  179|  9.40k|        self.states.len() == 2
  180|      0|            && self.states[1].array_transitions.is_empty()
  181|      0|            && self.states[1].member_transitions.is_empty()
  182|      0|            && self.states[1].fallback_state == State(0)
  183|      0|            && self.states[1].attributes.is_accepting()
  184|  9.40k|    }
_RNvMs7_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_10StateTable14fallback_state:
  395|   151k|    pub fn fallback_state(&self) -> State {
  396|   151k|        self.fallback_state
  397|   151k|    }
_RNvMs7_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_10StateTable17array_transitions:
  405|  21.3k|    pub fn array_transitions(&self) -> &[ArrayTransition] {
  406|  21.3k|        &self.array_transitions
  407|  21.3k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton14is_empty_query:
  209|  9.40k|    pub fn is_empty_query(&self) -> bool {
  210|  9.40k|        self.states.len() == 2
  211|      0|            && self.states[1].array_transitions.is_empty()
  212|      0|            && self.states[1].member_transitions.is_empty()
  213|      0|            && self.states[1].fallback_state == State(0)
  214|      0|            && !self.states[1].attributes.is_accepting()
  215|  9.40k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton12is_accepting:
  256|   141k|    pub fn is_accepting(&self, state: State) -> bool {
  257|   141k|        self[state].attributes.is_accepting()
  258|   141k|    }
_RNvMs6_NtCs4sJFyKPpo5j_8rsonpath9automatonNtB5_9Automaton8minimize:
  383|  9.40k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  384|  9.40k|        minimizer::minimize(nfa)
  385|  9.40k|    }
_RNvXNtCs4sJFyKPpo5j_8rsonpath9automatonNtB2_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB4_:
   64|  18.8k|    fn default() -> Self {
   65|  18.8k|        Self {
   66|  18.8k|            attributes: StateAttributes::default(),
   67|  18.8k|            member_transitions: SmallVec::default(),
   68|  18.8k|            array_transitions: SmallVec::default(),
   69|  18.8k|            fallback_state: State(0),
   70|  18.8k|        }
   71|  18.8k|    }

_RNvXs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton20array_transition_setNtB5_26ArrayTransitionSetIteratorNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  152|  18.8k|    fn next(&mut self) -> Option<Self::Item> {
  153|  18.8k|        let (label, transition) = self.transitions.next()?;
  154|      0|        Some(match label {
  155|      0|            LinearSet::Singleton(idx) => (ArrayTransitionLabel::Index(idx), transition.target),
  156|      0|            LinearSet::BoundedSlice(start, end, step) => (
  157|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, Some(end), step)),
  158|      0|                transition.target,
  159|      0|            ),
  160|      0|            LinearSet::OpenEndedSlice(start, step) => (
  161|      0|                ArrayTransitionLabel::Slice(SimpleSlice::new(start, None, step)),
  162|      0|                transition.target,
  163|      0|            ),
  164|       |        })
  165|  18.8k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet3new:
   79|  18.8k|    pub(super) fn new() -> Self {
   80|  18.8k|        Self {
   81|  18.8k|            transitions: HashMap::new(),
   82|  18.8k|        }
   83|  18.8k|    }
_RNvMs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton20array_transition_setNtB4_26ArrayTransitionSetIterator3new:
  131|  18.8k|    fn new(mut transitions: Vec<(LinearSet, LinearSetTransition)>) -> Self {
  132|  18.8k|        transitions.sort_by(|(_, x), (_, y)| x.priority.cmp(&y.priority).reverse());
  133|  18.8k|        Self {
  134|  18.8k|            transitions: transitions.into_iter(),
  135|  18.8k|        }
  136|  18.8k|    }
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath9automaton20array_transition_setNtB5_18ArrayTransitionSetNtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iter:
  144|  18.8k|    fn into_iter(self) -> Self::IntoIter {
  145|  18.8k|        ArrayTransitionSetIterator::new(self.transitions.into_iter().collect())
  146|  18.8k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton20array_transition_setNtB2_18ArrayTransitionSet10states_mut:
  125|  18.8k|    pub(super) fn states_mut(&mut self) -> impl Iterator<Item = &mut SmallSet256> {
  126|  18.8k|        self.transitions.iter_mut().map(|(_, trans)| &mut trans.target)
  127|  18.8k|    }

_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer18process_superstate:
  134|  18.8k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  135|  18.8k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  136|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  137|       |
  138|  18.8k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  139|      0|        debug!("Raw transitions: {:?}", transitions);
  140|       |
  141|  18.8k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  142|      0|        debug!("Normalized transitions: {:?}", transitions);
  143|       |
  144|       |        // Translate the transitions to the data model expected by TransitionTable.
  145|  18.8k|        let array_transitions = transitions
  146|  18.8k|            .array
  147|  18.8k|            .into_iter()
  148|  18.8k|            .map(|(label, state)| ArrayTransition::new(label, self.superstates[&state]))
  149|  18.8k|            .collect::<SmallVec<_>>();
  150|  18.8k|        let member_transitions = transitions
  151|  18.8k|            .member
  152|  18.8k|            .into_iter()
  153|  18.8k|            .map(|(label, state)| (label, self.superstates[&state]))
  154|  18.8k|            .collect::<SmallVec<_>>();
  155|      0|        debug!("Translated transitions (array): {array_transitions:?}");
  156|      0|        debug!("Translated transitions (member): {member_transitions:?}");
  157|       |
  158|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  159|       |        // Otherwise, we set the fallback to the rejecting state.
  160|  18.8k|        let id = self.superstates[&current_superstate];
  161|  18.8k|        let fallback_state = self.superstates[&transitions.wildcard];
  162|  18.8k|        let attributes = self.build_attributes(id, &array_transitions, &member_transitions, fallback_state);
  163|  18.8k|        let table = &mut self.dfa_states[id.0 as usize];
  164|  18.8k|        table.array_transitions = array_transitions;
  165|  18.8k|        table.member_transitions = member_transitions;
  166|  18.8k|        table.fallback_state = fallback_state;
  167|  18.8k|        table.attributes = attributes;
  168|  18.8k|
  169|  18.8k|        Ok(())
  170|  18.8k|    }
_RNCNCNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Ba_:
  255|  18.8k|                    Some(id.next().map(|x| x.0))
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  233|  18.8k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  234|  18.8k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  235|  9.40k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  236|  9.40k|                return Some(single_state);
  237|      0|            }
  238|  9.40k|        }
  239|       |
  240|  9.40k|        None
  241|  18.8k|    }
_RNvNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  342|  18.8k|        fn normalize_one(
  343|  18.8k|            this: &mut Minimizer,
  344|  18.8k|            state: &mut SmallSet256,
  345|  18.8k|            current_checkpoint: Option<NfaStateId>,
  346|  18.8k|        ) -> Result<(), CompilerError> {
  347|  18.8k|            if let Some(checkpoint) = current_checkpoint {
  348|  18.8k|                state.insert(checkpoint.0);
  349|  18.8k|            }
  350|       |
  351|  18.8k|            this.normalize(state);
  352|  18.8k|            this.activate_if_new(*state)?;
  353|       |
  354|  18.8k|            if let Some(checkpoint) = current_checkpoint {
  355|  18.8k|                this.checkpoints.insert(*state, checkpoint);
  356|  18.8k|            }
  357|       |
  358|  18.8k|            Ok(())
  359|  18.8k|        }
_RNCNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB4_9Minimizer9normalize0B8_:
  379|  37.6k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNCNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0B8_:
  253|  28.2k|            .filter_map(|id| match self.nfa[id] {
  254|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  255|  18.8k|                    Some(id.next().map(|x| x.0))
  256|       |                }
  257|  9.40k|                _ => None,
  258|  28.2k|            })
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  222|  18.8k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  223|  18.8k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  224|  9.40k|            self.checkpoints.insert(superstate, nfa_state);
  225|  9.40k|            Some(nfa_state)
  226|       |        } else {
  227|  9.40k|            self.checkpoints.get(&superstate).copied()
  228|       |        }
  229|  18.8k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer3run:
   83|  9.40k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   84|  9.40k|        // Rejecting state has no outgoing transitions except for a self-loop.
   85|  9.40k|        self.dfa_states.push(StateTable {
   86|  9.40k|            array_transitions: smallvec![],
   87|  9.40k|            member_transitions: smallvec![],
   88|  9.40k|            fallback_state: Self::rejecting_state(),
   89|  9.40k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   90|  9.40k|        });
   91|  9.40k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   92|  9.40k|
   93|  9.40k|        // Initial superstate is {0}.
   94|  9.40k|        let initial_superstate = [0].into();
   95|  9.40k|        self.activate_if_new(initial_superstate)?;
   96|       |
   97|  28.2k|        while let Some(superstate) = self.active_superstates.pop() {
   98|  18.8k|            self.process_superstate(superstate)?;
   99|       |        }
  100|       |
  101|  9.40k|        Ok(Automaton {
  102|  9.40k|            states: self.dfa_states,
  103|  9.40k|        })
  104|  9.40k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  245|  18.8k|    fn process_nfa_transitions(
  246|  18.8k|        &self,
  247|  18.8k|        current_superstate: SmallSet256,
  248|  18.8k|        current_checkpoint: Option<NfaStateId>,
  249|  18.8k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  250|  18.8k|        let mut wildcard_targets = current_superstate
  251|  18.8k|            .iter()
  252|  18.8k|            .map(NfaStateId)
  253|  18.8k|            .filter_map(|id| match self.nfa[id] {
  254|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  255|       |                    Some(id.next().map(|x| x.0))
  256|       |                }
  257|       |                _ => None,
  258|  18.8k|            })
  259|  18.8k|            .collect::<Result<SmallSet256, _>>()?;
  260|  18.8k|        if let Some(checkpoint) = current_checkpoint {
  261|  18.8k|            wildcard_targets.insert(checkpoint.0);
  262|  18.8k|        }
  263|       |
  264|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  265|       |
  266|  18.8k|        let mut transitions = SuperstateTransitionTable {
  267|  18.8k|            array: ArrayTransitionSet::new(),
  268|  18.8k|            member: VecMap::new(),
  269|  18.8k|            wildcard: wildcard_targets,
  270|  18.8k|        };
  271|       |
  272|  28.2k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  273|  28.2k|            match self.nfa[nfa_state] {
  274|       |                // Direct states simply have a single transition to the next state in the NFA.
  275|       |                // Recursive transitions also have a self-loop, but that is handled by the
  276|       |                // checkpoints mechanism - here we only handle the forward transition.
  277|      0|                NfaState::Direct(nfa::Transition::Member(label))
  278|      0|                | NfaState::Recursive(nfa::Transition::Member(label)) => {
  279|       |                    debug!(
  280|      0|                        "Considering member transition {nfa_state} --{}-> {}",
  281|      0|                        label.unquoted(),
  282|      0|                        nfa_state.next()?,
  283|       |                    );
  284|       |                    // Add the target NFA state to the target superstate, or create a singleton
  285|       |                    // set if this is the first transition via this label encountered in the loop.
  286|      0|                    if let Some(target) = transitions.member.get_mut(&label) {
  287|      0|                        target.insert(nfa_state.next()?.0);
  288|       |                    } else {
  289|      0|                        let mut new_set = transitions.wildcard;
  290|      0|                        new_set.insert(nfa_state.next()?.0);
  291|      0|                        transitions.member.insert(label, new_set);
  292|       |                    }
  293|       |                }
  294|      0|                NfaState::Direct(nfa::Transition::Array(label))
  295|      0|                | NfaState::Recursive(nfa::Transition::Array(label)) => {
  296|       |                    // Array transitions are trickier, as they can have overlap. For example,
  297|       |                    // a transition over [5] overlaps with a transition over [3::2].
  298|       |                    // If the incoming transition does not overlap with anything then it's easy and analogous
  299|       |                    // to the member case - create a new singleton set with a single transition.
  300|       |                    // Otherwise we need to solve conflicts with - potentially many! - existing transitions.
  301|       |                    // Fortunately, the conflicts can be resolved one at a time.
  302|       |                    // Assume we're processing --t1--> {s1} and there already is a --t2-->S2 (where S2 is a superstate),
  303|       |                    // such that t1 overlaps with t2 (overlap(t1, t2) = t3).
  304|       |                    // The resolution is to have the following transitions:
  305|       |                    //   --t3--> S2+{s1}
  306|       |                    //   --(t1-t3)--> {s1}
  307|       |                    //   --(t2-t3)--> S2
  308|       |                    // If t1 and t2 are slices then t3 is easy to compute and is also a slice.
  309|       |                    // This is not the case for (t1-t3) or (t2-t3). Turns out this is actually a hard problem to solve.
  310|       |                    // We can do away with a trick, however. As long as the engine always processes transitions in order
  311|       |                    // and takes the first one that matches, it is enough for the procedure here to emit
  312|       |                    //   --t3--> S2+{s1}
  313|       |                    //   --t1--> {s1}
  314|       |                    //   --t2--> S2
  315|       |                    // and make sure the transition over t3 is put before the other two.
  316|       |                    // The ArrayTransitionTable does that by assigning priorities to transitions and sorting them accordingly.
  317|       |                    debug!(
  318|      0|                        "Considering array transition {nfa_state} --{}-> {}",
  319|      0|                        label,
  320|      0|                        nfa_state.next()?,
  321|       |                    );
  322|      0|                    let mut new_set = transitions.wildcard;
  323|      0|                    new_set.insert(nfa_state.next()?.0);
  324|      0|                    transitions.array.add_transition(label, new_set);
  325|       |                }
  326|       |                NfaState::Direct(nfa::Transition::Wildcard)
  327|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  328|  28.2k|                | NfaState::Accepting => (),
  329|       |            }
  330|       |        }
  331|       |
  332|  18.8k|        Ok(transitions)
  333|  18.8k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizer8minimize:
   21|  9.40k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   22|  9.40k|    let minimizer = Minimizer {
   23|  9.40k|        nfa,
   24|  9.40k|        superstates: VecMap::new(),
   25|  9.40k|        checkpoints: VecMap::new(),
   26|  9.40k|        active_superstates: smallvec![],
   27|  9.40k|        dfa_states: vec![],
   28|  9.40k|        accepting: SmallSet256::default(),
   29|  9.40k|    };
   30|  9.40k|
   31|  9.40k|    minimizer.run()
   32|  9.40k|}
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  337|  18.8k|    fn normalize_superstate_transitions(
  338|  18.8k|        &mut self,
  339|  18.8k|        transitions: &mut SuperstateTransitionTable,
  340|  18.8k|        current_checkpoint: Option<NfaStateId>,
  341|  18.8k|    ) -> Result<(), CompilerError> {
  342|  18.8k|        fn normalize_one(
  343|  18.8k|            this: &mut Minimizer,
  344|  18.8k|            state: &mut SmallSet256,
  345|  18.8k|            current_checkpoint: Option<NfaStateId>,
  346|  18.8k|        ) -> Result<(), CompilerError> {
  347|  18.8k|            if let Some(checkpoint) = current_checkpoint {
  348|  18.8k|                state.insert(checkpoint.0);
  349|  18.8k|            }
  350|  18.8k|
  351|  18.8k|            this.normalize(state);
  352|  18.8k|            this.activate_if_new(*state)?;
  353|  18.8k|
  354|  18.8k|            if let Some(checkpoint) = current_checkpoint {
  355|  18.8k|                this.checkpoints.insert(*state, checkpoint);
  356|  18.8k|            }
  357|  18.8k|
  358|  18.8k|            Ok(())
  359|  18.8k|        }
  360|  18.8k|
  361|  18.8k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  362|  18.8k|        for (_, state) in &mut transitions.member {
  363|      0|            normalize_one(self, state, current_checkpoint)?;
  364|       |        }
  365|  18.8k|        for state in &mut transitions.array.states_mut() {
  366|      0|            normalize_one(self, state, current_checkpoint)?;
  367|       |        }
  368|       |
  369|  18.8k|        Ok(())
  370|  18.8k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  112|  28.2k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  113|  28.2k|        if !self.superstates.contains_key(&superstate) {
  114|  18.8k|            let identifier = self
  115|  18.8k|                .superstates
  116|  18.8k|                .len()
  117|  18.8k|                .try_into()
  118|  18.8k|                .map(DfaStateId)
  119|  18.8k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  120|  18.8k|            self.superstates.insert(superstate, identifier);
  121|  18.8k|            self.active_superstates.push(superstate);
  122|  18.8k|            self.dfa_states.push(StateTable::default());
  123|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  124|  18.8k|            if superstate.contains(self.nfa.accepting_state().0) {
  125|  9.40k|                self.accepting.insert(identifier.0);
  126|  9.40k|            }
  127|  9.40k|        }
  128|       |
  129|  28.2k|        Ok(())
  130|  28.2k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer15rejecting_stateB6_:
  106|  37.6k|    fn rejecting_state() -> DfaStateId {
  107|  37.6k|        DfaStateId(0)
  108|  37.6k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer9normalize:
  375|  18.8k|    fn normalize(&self, superstate: &mut SmallSet256) {
  376|  18.8k|        let furthest_checkpoint = superstate
  377|  18.8k|            .iter()
  378|  18.8k|            .map(NfaStateId)
  379|  18.8k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  380|  18.8k|            .max();
  381|       |
  382|  18.8k|        if let Some(cutoff) = furthest_checkpoint {
  383|  18.8k|            superstate.remove_all_before(cutoff.0);
  384|  18.8k|        }
  385|  18.8k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton9minimizerNtB2_9Minimizer16build_attributes:
  174|  18.8k|    fn build_attributes(
  175|  18.8k|        &self,
  176|  18.8k|        id: DfaStateId,
  177|  18.8k|        array_transitions: &[ArrayTransition],
  178|  18.8k|        member_transitions: &[(&JsonString, DfaStateId)],
  179|  18.8k|        fallback: DfaStateId,
  180|  18.8k|    ) -> StateAttributes {
  181|  18.8k|        let mut attrs = StateAttributesBuilder::new();
  182|  18.8k|
  183|  18.8k|        if self.accepting.contains(id.0) {
  184|      0|            debug!("{id} is accepting");
  185|  9.40k|            attrs = attrs.accepting();
  186|  9.40k|        }
  187|  18.8k|        if id == Self::rejecting_state() {
  188|      0|            debug!("{id} is rejecting");
  189|      0|            attrs = attrs.rejecting();
  190|  18.8k|        }
  191|  18.8k|        if array_transitions.len() + member_transitions.len() == 1 && fallback == Self::rejecting_state() {
  192|      0|            debug!("{id} is unitary");
  193|      0|            attrs = attrs.unitary();
  194|  18.8k|        }
  195|  18.8k|        if self.accepting.contains(fallback.0)
  196|      0|            || array_transitions
  197|      0|                .iter()
  198|      0|                .any(|x| self.accepting.contains(x.target_state().0))
  199|      0|            || member_transitions.iter().any(|(_, s)| self.accepting.contains(s.0))
  200|       |        {
  201|      0|            debug!("{id} has transitions to accepting");
  202|  18.8k|            attrs = attrs.transitions_to_accepting();
  203|      0|        }
  204|  18.8k|        if !array_transitions.is_empty() {
  205|      0|            debug!("{id} has an array index transition");
  206|      0|            attrs = attrs.has_array_transition();
  207|  18.8k|        }
  208|  18.8k|        if array_transitions
  209|  18.8k|            .iter()
  210|  18.8k|            .any(|x| self.accepting.contains(x.target_state().0))
  211|       |        {
  212|      0|            debug!("{id} has an accepting array index transition");
  213|      0|            attrs = attrs.has_array_transition_to_accepting();
  214|  18.8k|        }
  215|       |
  216|  18.8k|        attrs.into()
  217|  18.8k|    }

_RNCNvMs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton3nfaNtB6_25NondeterministicAutomaton3new0Ba_:
   76|  9.40k|            .map(|segment| {
   77|  9.40k|                let selectors = segment.selectors();
   78|  9.40k|
   79|  9.40k|                if selectors.len() > 1 {
   80|      0|                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|  9.40k|                    let transition = match selectors.first() {
   83|      0|                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|  9.40k|                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|      0|                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|      0|                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|      0|                        Selector::Slice(slice) => {
   88|      0|                            let start = match slice.start() {
   89|      0|                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|      0|                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|      0|                            }?;
   92|      0|                            let end = match slice.end() {
   93|      0|                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|      0|                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|      0|                                None => Ok(None),
   96|      0|                            }?;
   97|      0|                            let step = match slice.step() {
   98|      0|                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|      0|                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|      0|                            }?;
  101|      0|                            let simple_slice = SimpleSlice::new(start, end, step);
  102|      0|                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|      0|                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|      0|                    }?;
  106|  9.40k|                    if segment.is_child() {
  107|      0|                        Ok(Direct(transition))
  108|       |                    } else {
  109|  9.40k|                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  9.40k|            })
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  135|   103k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  136|   103k|        &self.ordered_states[index.0 as usize]
  137|   103k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton3nfaNtB2_10NfaStateId4next:
   53|  18.8k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   54|  18.8k|        self.0
   55|  18.8k|            .checked_add(1)
   56|  18.8k|            .ok_or(CompilerError::QueryTooComplex(None))
   57|  18.8k|            .map(Self)
   58|  18.8k|    }
_RNvMs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   70|  9.40k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   71|  9.40k|        use rsonpath_syntax::{Index, Selector};
   72|  9.40k|
   73|  9.40k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   74|  9.40k|            .segments()
   75|  9.40k|            .iter()
   76|  9.40k|            .map(|segment| {
   77|       |                let selectors = segment.selectors();
   78|       |
   79|       |                if selectors.len() > 1 {
   80|       |                    Err(UnsupportedFeatureError::multiple_selectors().into())
   81|       |                } else {
   82|       |                    let transition = match selectors.first() {
   83|       |                        Selector::Name(name) => Ok::<_, CompilerError>(Transition::Member(name)),
   84|       |                        Selector::Wildcard => Ok(Transition::Wildcard),
   85|       |                        Selector::Index(Index::FromStart(index)) => Ok(Transition::Array((*index).into())),
   86|       |                        Selector::Index(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   87|       |                        Selector::Slice(slice) => {
   88|       |                            let start = match slice.start() {
   89|       |                                Index::FromStart(idx) => Ok::<_, CompilerError>(idx),
   90|       |                                Index::FromEnd(_) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   91|       |                            }?;
   92|       |                            let end = match slice.end() {
   93|       |                                Some(Index::FromStart(idx)) => Ok::<_, CompilerError>(Some(idx)),
   94|       |                                Some(Index::FromEnd(_)) => Err(UnsupportedFeatureError::indexing_from_end().into()),
   95|       |                                None => Ok(None),
   96|       |                            }?;
   97|       |                            let step = match slice.step() {
   98|       |                                Step::Forward(step) => Ok::<_, CompilerError>(step),
   99|       |                                Step::Backward(_) => Err(UnsupportedFeatureError::slice_with_backward_step().into()),
  100|       |                            }?;
  101|       |                            let simple_slice = SimpleSlice::new(start, end, step);
  102|       |                            Ok(Transition::Array(simple_slice.into()))
  103|       |                        }
  104|       |                        Selector::Filter(_) => Err(UnsupportedFeatureError::filter_selector().into()),
  105|       |                    }?;
  106|       |                    if segment.is_child() {
  107|       |                        Ok(Direct(transition))
  108|       |                    } else {
  109|       |                        Ok(Recursive(transition))
  110|       |                    }
  111|       |                }
  112|  9.40k|            })
  113|  9.40k|            .collect();
  114|  9.40k|        let mut states = states_result?;
  115|       |
  116|  9.40k|        states.push(Accepting);
  117|  9.40k|
  118|  9.40k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
  119|  9.40k|        if let Err(err) = accepting_state {
  120|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
  121|       |        } else {
  122|  9.40k|            Ok(NondeterministicAutomaton { ordered_states: states })
  123|       |        }
  124|  9.40k|    }
_RNvMs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
  126|  18.8k|    pub(super) fn accepting_state(&self) -> NfaStateId {
  127|  18.8k|        // CAST: safe because of the check in `new`.
  128|  18.8k|        NfaStateId((self.ordered_states.len() - 1) as u8)
  129|  18.8k|    }

_RNvXNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   98|  18.8k|    fn remove_all_before(&mut self, cutoff: u8) {
   99|  18.8k|        if cutoff < 128 {
  100|  18.8k|            self.half_1.remove_all_before(cutoff)
  101|      0|        } else {
  102|      0|            self.half_1.clear();
  103|      0|            self.half_2.remove_all_before(cutoff - 128);
  104|      0|        }
  105|  18.8k|    }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8contains:
  136|  56.4k|            fn contains(&self, elem: u8) -> bool {
  137|  56.4k|                (self.bitmask & (1 << elem)) != 0
  138|  56.4k|            }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE6insert:
  128|  75.2k|            fn insert(&mut self, elem: u8) {
  129|  75.2k|                self.bitmask |= 1 << elem;
  130|  75.2k|            }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE8is_emptyB9_:
  124|  37.6k|            fn is_empty(&self) -> bool {
  125|  37.6k|                self.bitmask == 0
  126|  37.6k|            }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE17remove_all_before:
  159|  18.8k|            fn remove_all_before(&mut self, cutoff: u8) {
  160|  18.8k|                let mask: $mask = <$mask>::MAX << cutoff;
  161|  18.8k|                self.bitmask &= mask;
  162|  18.8k|            }
_RNvXs6_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  256|   150k|    fn next(&mut self) -> Option<Self::Item> {
  257|   150k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  258|   150k|    }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE9singleton:
  146|  18.8k|            fn singleton(&self) -> Option<u8> {
  147|  18.8k|                let elem = self.bitmask.trailing_zeros();
  148|  18.8k|                let elem_mask = (1 as $mask).wrapping_shl(elem);
  149|  18.8k|                let remainder = self.bitmask ^ elem_mask;
  150|  18.8k|
  151|  18.8k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  152|  18.8k|                (remainder == 0).then_some(elem as u8)
  153|  18.8k|            }
_RNvXso_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128INtB5_8SmallSethE4iterB9_:
  140|   112k|            fn iter(&self) -> $iter {
  141|   112k|                $iter {
  142|   112k|                    bitmask: self.bitmask,
  143|   112k|                }
  144|   112k|            }
_RNvXs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB4_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromB8_:
  198|  9.40k|    fn from(arr: [u8; N]) -> Self {
  199|  9.40k|        Self::from_iter(arr)
  200|  9.40k|    }
_RNvXsq_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  177|   206k|            fn next(&mut self) -> Option<Self::Item> {
  178|   206k|                let next_elem = self.bitmask.trailing_zeros();
  179|   206k|
  180|   206k|                if next_elem == $size {
  181|   112k|                    return None;
  182|  94.0k|                }
  183|  94.0k|
  184|  94.0k|                let elem_mask = 1 << next_elem;
  185|  94.0k|                self.bitmask ^= elem_mask;
  186|  94.0k|
  187|  94.0k|                // CAST: trivially safe as bitmask can have at most 128 zeroes.
  188|  94.0k|                Some(next_elem as u8)
  189|   206k|            }
_RNCNvXs6_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bb_:
  257|  56.4k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXsv_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  110|   300k|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   55|  75.2k|    fn insert(&mut self, elem: u8) {
   56|  75.2k|        if elem < 128 {
   57|  75.2k|            self.half_1.insert(elem)
   58|       |        } else {
   59|      0|            self.half_2.insert(elem - 128)
   60|       |        }
   61|  75.2k|    }
_RNvXsb_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
   40|   235k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   68|  56.4k|    fn contains(&self, elem: u8) -> bool {
   69|  56.4k|        if elem < 128 {
   70|  56.4k|            self.half_1.contains(elem)
   71|       |        } else {
   72|      0|            self.half_2.contains(elem - 128)
   73|       |        }
   74|  56.4k|    }
_RNvXsr_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
  110|  94.0k|        #[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs4_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1g_8adapters12GenericShuntINtNtB2o_10filter_map9FilterMapINtNtB2o_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4v_9Minimizer23process_nfa_transitions0EINtNtB1i_6result6ResultNtNtB1i_7convert10InfallibleNtNtB8_5error13CompilerErrorEEEBa_:
  232|  18.8k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  233|  18.8k|        let mut result = Self::default();
  234|  37.6k|        for elem in iter {
  235|  18.8k|            result.insert(elem);
  236|  18.8k|        }
  237|  18.8k|        result
  238|  18.8k|    }
_RINvXs4_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBa_:
  232|  9.40k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  233|  9.40k|        let mut result = Self::default();
  234|  18.8k|        for elem in iter {
  235|  9.40k|            result.insert(elem);
  236|  9.40k|        }
  237|  9.40k|        result
  238|  9.40k|    }
_RNvXs7_NtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   40|  47.0k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   83|  18.8k|    fn singleton(&self) -> Option<u8> {
   84|  18.8k|        if self.half_1.is_empty() {
   85|      0|            self.half_2.singleton().map(|x| x + 128)
   86|  18.8k|        } else if self.half_2.is_empty() {
   87|  18.8k|            self.half_1.singleton()
   88|       |        } else {
   89|      0|            None
   90|       |        }
   91|  18.8k|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB6_:
   76|  56.4k|    fn iter(&self) -> SmallSet256Iter {
   77|  56.4k|        SmallSet256Iter {
   78|  56.4k|            half_1: self.half_1.iter(),
   79|  56.4k|            half_2: self.half_2.iter(),
   80|  56.4k|        }
   81|  56.4k|    }

_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  134|  31.3k|    pub fn has_transition_to_accepting(&self) -> bool {
  135|  31.3k|        self.is_set(StateAttribute::TransitionsToAccepting)
  136|  31.3k|    }
_RNvXsn_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  170|  51.8k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes10is_unitary:
  143|  10.1k|    pub fn is_unitary(&self) -> bool {
  144|  10.1k|        self.is_set(StateAttribute::Unitary)
  145|  10.1k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes12is_rejecting:
  126|  42.4k|    pub fn is_rejecting(&self) -> bool {
  127|  42.4k|        self.is_set(StateAttribute::Rejecting)
  128|  42.4k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes6is_set:
  164|   239k|    fn is_set(&self, attr: StateAttribute) -> bool {
  165|   239k|        (self.0 & attr as u8) != 0
  166|   239k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes33has_array_transition_to_accepting:
  158|  14.1k|    pub fn has_array_transition_to_accepting(&self) -> bool {
  159|  14.1k|        self.is_set(StateAttribute::HasArrayTransitionToAccepting)
  160|  14.1k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributes12is_accepting:
  118|   141k|    pub fn is_accepting(&self) -> bool {
  119|   141k|        self.is_set(StateAttribute::Accepting)
  120|   141k|    }
_RNvXsj_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
   33|  18.8k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvXsn_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB9_:
  170|  18.8k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3newB6_:
   37|  28.2k|    pub(crate) fn new() -> Self {
   38|  28.2k|        Self {
   39|  28.2k|            attrs: StateAttributes(0),
   40|  28.2k|        }
   41|  28.2k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder3setB6_:
   71|  37.6k|    fn set(self, attr: StateAttribute) -> Self {
   72|  37.6k|        Self {
   73|  37.6k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   74|  37.6k|        }
   75|  37.6k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9rejectingB6_:
   47|  9.40k|    pub(crate) fn rejecting(self) -> Self {
   48|  9.40k|        self.set(StateAttribute::Rejecting)
   49|  9.40k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder5buildB6_:
   67|  28.2k|    pub(crate) fn build(self) -> StateAttributes {
   68|  28.2k|        self.attrs
   69|  28.2k|    }
_RNvXs_NtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   80|  28.2k|    fn from(value: StateAttributesBuilder) -> Self {
   81|  28.2k|        value.build()
   82|  28.2k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder9acceptingB6_:
   43|  9.40k|    pub(crate) fn accepting(self) -> Self {
   44|  9.40k|        self.set(StateAttribute::Accepting)
   45|  9.40k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB6_:
   55|  18.8k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   56|  18.8k|        self.set(StateAttribute::TransitionsToAccepting)
   57|  18.8k|    }

_RNvNtNtNtCs4sJFyKPpo5j_8rsonpath14classification4mask3m6410combine_32Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   52|   146k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|   146k|        u64::from(m1) | (u64::from(m2) << 32)
   54|   146k|    }

_RNvMNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   15|  9.40k|    fn new() -> Self {
   16|  9.40k|        Self {
   17|  9.40k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   18|  9.40k|        }
   19|  9.40k|    }
_RINvMNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   22|  41.1k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   23|  41.1k|        block!(blocks[..64]);
   24|       |
   25|  41.1k|        let (block1, block2) = blocks.halves();
   26|  41.1k|        let classification1 = vector_256::classify_block(block1);
   27|  41.1k|        let classification2 = vector_256::classify_block(block2);
   28|  41.1k|
   29|  41.1k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   30|  41.1k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   31|  41.1k|
   32|  41.1k|        self.internal_classifier.classify(slashes, quotes)
   33|  41.1k|    }

_RNvXs0_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EENtBb_16FallibleIterator4nextCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   79|  49.9k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  49.9k|                match self.iter.next().e()? {
   81|  41.1k|                    Some(block) => {
   82|  41.1k|                        // SAFETY: target_feature invariant
   83|  41.1k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  41.1k|                        let classified_block = QuoteClassifiedBlock {
   85|  41.1k|                            block,
   86|  41.1k|                            within_quotes_mask: mask,
   87|  41.1k|                        };
   88|  41.1k|                        Ok(Some(classified_block))
   89|       |                    }
   90|  8.83k|                    None => Ok(None),
   91|       |                }
   92|  49.9k|            }
_RNvXs1_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EEINtB7_23QuoteClassifiedIteratorB1w_yKB4p_E10get_offsetCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  100|  91.4k|            fn get_offset(&self) -> usize {
  101|  91.4k|                self.iter.get_offset() - $size
  102|  91.4k|            }
_RINvXs_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1L_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3d_5MatchEEKj40_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   20|  9.40k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  9.40k|            where
   22|  9.40k|                I: InputBlockIterator<'i, $size>,
   23|  9.40k|            {
   24|  9.40k|                Self::Classifier {
   25|  9.40k|                    iter,
   26|  9.40k|                    classifier: $core::new(),
   27|  9.40k|                    phantom: PhantomData,
   28|  9.40k|                }
   29|  9.40k|            }

_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   26|  9.40k|    pub(crate) fn new() -> Self {
   27|  9.40k|        Self { prev_block_mask: 0 }
   28|  9.40k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  41.1k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  41.1k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  40.4k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|    719|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|    719|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|    719|            let odd_starts = ODD & starts;
   62|    719|            let even_starts = EVEN & starts;
   63|    719|
   64|    719|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|    719|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|    719|
   67|    719|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|    719|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|    719|
   70|    719|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|    719|
   72|    719|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  41.1k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  41.1k|
   77|  41.1k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  41.1k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  41.1k|
   80|  41.1k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  41.1k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  41.1k|        within_quotes
   93|  41.1k|    }
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  41.1k|unsafe fn all_ones128() -> __m128i {
   14|  41.1k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  41.1k|}
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  41.1k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  41.1k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  41.1k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  41.8k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  41.8k|        u64::from(self.prev_block_mask & 0x01)
   46|  41.8k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  41.1k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  41.1k|        let slash_mask = u8::from(set_slash_mask);
   33|  41.1k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  41.1k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  41.1k|    }

_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  82.2k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  82.2k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  82.2k|
   20|  82.2k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  82.2k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  82.2k|
   23|  82.2k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  82.2k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  82.2k|
   26|  82.2k|    BlockClassification256 { slashes, quotes }
   27|  82.2k|}
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  82.2k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  82.2k|    _mm256_set1_epi8(b'\\' as i8)
   14|  82.2k|}
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  82.2k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  82.2k|    _mm256_set1_epi8(b'"' as i8)
    9|  82.2k|}

_RINvXs1_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4p_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5R_5MatchEEKj40_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  371|  9.40k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  372|  9.40k|    where
  373|  9.40k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  374|  9.40k|    {
  375|  9.40k|        Q::new(iter)
  376|  9.40k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  479|  9.40k|    pub(crate) fn fast_popcnt(&self) -> bool {
  480|  9.40k|        self.fast_popcnt
  481|  9.40k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  475|  9.40k|    pub(crate) fn fast_quotes(&self) -> bool {
  476|  9.40k|        self.fast_quotes
  477|  9.40k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  471|  9.40k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  472|  9.40k|        self.highest_simd
  473|  9.40k|    }
_RNvXs1_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  366|  9.40k|    fn dispatch_tag(self) -> usize {
  367|  9.40k|        TARGET
  368|  9.40k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  334|  9.40k|    pub(crate) fn new() -> Self {
  335|  9.40k|        Self { phantom: PhantomData }
  336|  9.40k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath14classification4simd9configureCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  533|  9.40k|pub(crate) fn configure() -> SimdConfiguration {
  534|  9.40k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  535|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  536|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  537|  9.40k|    }
  538|       |
  539|       |    cfg_if! {
  540|       |        if #[cfg(not(feature = "simd"))]
  541|       |        {
  542|       |            let highest_simd = SimdTag::Nosimd;
  543|       |            let fast_quotes = false;
  544|       |            let fast_popcnt = false;
  545|       |        }
  546|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  547|       |        {
  548|  9.40k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  549|  9.40k|                SimdTag::Avx2
  550|      0|            } else if is_x86_feature_detected!("ssse3") {
  551|      0|                SimdTag::Ssse3
  552|      0|            } else if is_x86_feature_detected!("sse2") {
  553|      0|                SimdTag::Sse2
  554|       |            } else {
  555|      0|                SimdTag::Nosimd
  556|       |            };
  557|       |
  558|  9.40k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  559|  9.40k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  560|       |        }
  561|       |        else
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |    }
  568|       |
  569|  9.40k|    SimdConfiguration {
  570|  9.40k|        highest_simd,
  571|  9.40k|        fast_quotes,
  572|  9.40k|        fast_popcnt,
  573|  9.40k|    }
  574|  9.40k|}
_RINvXs1_NtNtCs4sJFyKPpo5j_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorNtNtB4u_7padding19TwoSidesPaddedInputINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5W_5MatchEEKj40_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  391|  9.40k|    fn classify_structural_characters<'i, I>(
  392|  9.40k|        self,
  393|  9.40k|        iter: Self::QuotesClassifier<'i, I>,
  394|  9.40k|    ) -> Self::StructuralClassifier<'i, I>
  395|  9.40k|    where
  396|  9.40k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  397|  9.40k|    {
  398|  9.40k|        S::new(iter)
  399|  9.40k|    }

_RNvMNtNtCs4sJFyKPpo5j_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  91.1k|    pub fn offset(self, amount: usize) -> Self {
   70|  91.1k|        match self {
   71|  10.2k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  10.6k|            Colon(idx) => Colon(idx + amount),
   73|  51.7k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  18.3k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  91.1k|    }
_RNvXs5_NtNtCs4sJFyKPpo5j_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   21|  94.2k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  6.78k|    pub fn is_closing(&self) -> bool {
   96|  6.78k|        matches!(self, Closing(_, _))
   97|  6.78k|    }

_RINvMNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   28|  63.8k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   29|  63.8k|        &mut self,
   30|  63.8k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   31|  63.8k|    ) -> mask_64::StructuralsBlock<B> {
   32|  63.8k|        let (block1, block2) = quote_classified_block.block.halves();
   33|  63.8k|        let classification1 = self.internal_classifier.classify_block(block1);
   34|  63.8k|        let classification2 = self.internal_classifier.classify_block(block2);
   35|  63.8k|
   36|  63.8k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   37|  63.8k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   38|       |
   39|      0|        bin_u64!("structural", structural);
   40|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   41|       |
   42|  63.8k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   43|  63.8k|    }
_RNCNCNvXs1_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1F_7padding19TwoSidesPaddedInputINtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB37_5MatchEEKj40_EINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   13|  91.1k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   20|  9.40k|    fn new() -> Self {
   21|  9.40k|        Self {
   22|  9.40k|            // SAFETY: target feature invariant
   23|  9.40k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   24|  9.40k|        }
   25|  9.40k|    }

_RNvXs1_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   85|  99.9k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   141k|                while self.current_block_is_spent() {
   87|  49.9k|                    match self.iter.next() {
   88|  41.1k|                        Ok(Some(block)) => {
   89|  41.1k|                            // SAFETY: target_feature invariant
   90|  41.1k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  41.1k|                        }
   92|       |                        Ok(None) => {
   93|  8.83k|                            self.block = None;
   94|  8.83k|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|  99.9k|                Ok(self
  101|  99.9k|                    .block
  102|  99.9k|                    .as_mut()
  103|  99.9k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|  99.9k|            }
_RNvMs0_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   49|   141k|            fn current_block_is_spent(&self) -> bool {
   50|   141k|                self.block
   51|   141k|                    .as_ref()
   52|   141k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   141k|            }
_RNvXs2_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E25turn_colons_and_commas_onCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  113|  31.3k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  31.3k|                if !self.are_commas_on && !self.are_colons_on {
  115|  4.79k|                    self.are_commas_on = true;
  116|  4.79k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  4.79k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  4.79k|
  121|  4.79k|                    self.reclassify(idx);
  122|  26.5k|                } else if !self.are_commas_on {
  123|  5.02k|                    self.turn_commas_on(idx);
  124|  21.5k|                } else if !self.are_colons_on {
  125|  7.29k|                    self.turn_colons_on(idx);
  126|  14.2k|                }
  127|  31.3k|            }
_RNvXs2_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_commas_offCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  157|  6.41k|            fn turn_commas_off(&mut self) {
  158|  6.41k|                if self.are_commas_on {
  159|  6.41k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  6.41k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|      0|                }
  164|  6.41k|            }
_RNvXs2_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_commas_onCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  145|  35.7k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  35.7k|                if !self.are_commas_on {
  147|  10.9k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  10.9k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  10.9k|
  152|  10.9k|                    self.reclassify(idx);
  153|  24.7k|                }
  154|  35.7k|            }
_RINvXs_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1U_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB3m_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   21|  9.40k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  9.40k|            where
   23|  9.40k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  9.40k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  9.40k|            {
   26|  9.40k|                Self::Classifier {
   27|  9.40k|                    iter,
   28|  9.40k|                    classifier: $core::new(),
   29|  9.40k|                    block: None,
   30|  9.40k|                    are_commas_on: false,
   31|  9.40k|                    are_colons_on: false,
   32|  9.40k|                }
   33|  9.40k|            }
_RNvMs0_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   56|  23.0k|            fn reclassify(&mut self, idx: usize) {
   57|  23.0k|                if let Some(block) = self.block.take() {
   58|  23.0k|                    let quote_classified_block = block.quote_classified;
   59|  23.0k|                    let relevant_idx = idx + 1;
   60|  23.0k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  23.0k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  22.7k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  22.7k|                        // SAFETY: target_feature invariant
   68|  22.7k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  22.7k|                        new_block.structural_mask &= mask;
   70|  22.7k|                        self.block = Some(new_block);
   71|    355|                    }
   72|      0|                }
   73|  23.0k|            }
_RNvXs2_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E14turn_colons_onCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  167|  7.29k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  7.29k|                if !self.are_colons_on {
  169|  7.29k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  7.29k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  7.29k|
  174|  7.29k|                    self.reclassify(idx);
  175|      0|                }
  176|  7.29k|            }
_RNvXs2_NtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1B_7padding19TwoSidesPaddedInputINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB33_5MatchEEKj40_EINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B4u_yKB4p_E15turn_colons_offCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  179|  30.7k|            fn turn_colons_off(&mut self) {
  180|  30.7k|                if self.are_colons_on {
  181|  9.66k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  9.66k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  21.0k|                }
  186|  30.7k|            }

_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   29|  91.1k|    pub(crate) fn get_idx(&self) -> u32 {
   30|  91.1k|        self.structural_mask.trailing_zeros()
   31|  91.1k|    }
_RNCNvXs_NtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   40|  91.1k|        (idx < SIZE).then(|| {
   41|  91.1k|            let bit_mask = 1 << idx;
   42|  91.1k|
   43|  91.1k|            self.structural_mask ^= bit_mask;
   44|  91.1k|
   45|  91.1k|            // The last match being a catch-all *is important*.
   46|  91.1k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  91.1k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  91.1k|            match self.quote_classified.block[idx] {
   49|  10.6k|                b':' => Structural::Colon(idx),
   50|  24.9k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  26.8k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  18.3k|                b',' => Structural::Comma(idx),
   53|  2.52k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  7.76k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  91.1k|        })
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   24|   130k|    pub(crate) fn is_empty(&self) -> bool {
   25|   130k|        self.structural_mask == 0
   26|   130k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   16|  63.8k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  63.8k|        Self {
   18|  63.8k|            quote_classified: block,
   19|  63.8k|            structural_mask,
   20|  63.8k|        }
   21|  63.8k|    }
_RNvXs_NtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   38|  91.1k|    fn next(&mut self) -> Option<Structural> {
   39|  91.1k|        let idx = self.get_idx() as usize;
   40|  91.1k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  91.1k|        })
   57|  91.1k|    }

_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   25|   127k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|   127k|    _mm256_set1_epi8(0x0F)
   27|   127k|}
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   49|  21.7k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  21.7k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  21.7k|}
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   74|  17.3k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  17.3k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  17.3k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   86|  4.79k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  4.79k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  4.79k|    }
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   80|  16.9k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  16.9k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  16.9k|    }
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   43|  22.1k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  22.1k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  22.1k|}
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   31|   127k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|   127k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|   127k|}
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   92|   127k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|   127k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|   127k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|   127k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|   127k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|   127k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|   127k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|   127k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|   127k|
  101|   127k|        BlockClassification256 { structural }
  102|   127k|    }
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   55|  4.79k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  4.79k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  4.79k|}
_RNvNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|  9.40k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|  9.40k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|  9.40k|}
_RNvMNtNtNtNtCs4sJFyKPpo5j_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|  9.40k|    pub(crate) unsafe fn new() -> Self {
   67|  9.40k|        Self {
   68|  9.40k|            upper_nibble_mask: upper_nibble_mask(),
   69|  9.40k|        }
   70|  9.40k|    }

_RNvXs9_NtCs4sJFyKPpo5j_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
    9|  44.5k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs4sJFyKPpo5j_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   80|  52.7k|    fn deref(&self) -> &Self::Target {
   81|  52.7k|        &self.0
   82|  52.7k|    }
_RNvXs6_NtCs4sJFyKPpo5j_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
    9|   100k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvMNtCs4sJFyKPpo5j_8rsonpath5depthNtB2_5Depth9decrement:
   28|  10.2k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  10.2k|        *self = (*self - 1)?;
   30|  10.2k|        Ok(())
   31|  10.2k|    }
_RNvMNtCs4sJFyKPpo5j_8rsonpath5depthNtB2_5Depth9increment:
   21|  51.7k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  51.7k|        *self = (*self + 1)?;
   23|  51.7k|        Ok(())
   24|  51.7k|    }
_RNvXsf_NtCs4sJFyKPpo5j_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  10.2k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  10.2k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  10.2k|            }
_RNvXsc_NtCs4sJFyKPpo5j_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  51.7k|            fn add(self, rhs: u8) -> Self::Output {
   41|  51.7k|                self.0
   42|  51.7k|                    .checked_add(rhs)
   43|  51.7k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  51.7k|                    .map(Depth)
   45|  51.7k|            }

_RNvMNtNtCs4sJFyKPpo5j_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1M_6quotes7avx2_6411ConstructorNtNtNtB1M_10structural7avx2_6411ConstructorNtNtNtB1M_5depth7avx2_6411ConstructorNtNtNtB1M_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   95|  9.40k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   96|  9.40k|        let initial_state = automaton.initial_state();
   97|  9.40k|        let fallback_state = automaton[initial_state].fallback_state();
   98|  9.40k|        let transitions = automaton[initial_state].member_transitions();
   99|  9.40k|
  100|  9.40k|        if fallback_state == initial_state
  101|      0|            && transitions.len() == 1
  102|      0|            && automaton[initial_state].array_transitions().is_empty()
  103|       |        {
  104|      0|            let (member_name, target_state) = transitions[0];
  105|      0|            debug!("Automaton starts with a descendant search, using memmem heuristic.");
  106|      0|            return Some(Self {
  107|      0|                bytes,
  108|      0|                state: target_state,
  109|      0|                is_accepting: automaton.is_accepting(target_state),
  110|      0|                member_name,
  111|      0|                simd,
  112|      0|            });
  113|  9.40k|        }
  114|  9.40k|
  115|  9.40k|        None
  116|  9.40k|    }

_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE3runCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  208|  9.40k|    fn run(mut self) -> Result<(), EngineError> {
  209|  9.40k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  210|  9.40k|
  211|  9.40k|        match mb_head_skip {
  212|      0|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  213|  9.40k|            None => self.run_and_exit(),
  214|       |        }
  215|  9.40k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  274|  77.7k|    fn record_match_detected_at(&mut self, start_idx: usize, hint: NodeTypeHint) -> Result<(), EngineError> {
  275|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  276|       |
  277|  77.7k|        let index = match hint {
  278|  21.5k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{']).e()?,
  279|  20.9k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'[']).e()?,
  280|  35.3k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx).e()?,
  281|       |        }
  282|  77.7k|        .map(|x| x.0);
  283|  77.7k|
  284|  77.7k|        match index {
  285|  76.7k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  286|  1.06k|            None => Err(EngineError::MissingItem()),
  287|       |        }
  288|  77.7k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  622|  10.2k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  623|  10.2k|        if let Some(stack_frame) = self.peek() {
  624|  10.1k|            if depth <= stack_frame.depth {
  625|  10.1k|                return self.contents.pop();
  626|      0|            }
  627|    119|        }
  628|    119|        None
  629|  10.2k|    }
_RNCNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  282|  76.7k|        .map(|x| x.0);
_RINvNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input8borrowed13BorrowedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2p_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3P_6quotes7avx2_6411ConstructorNtNtNtB3P_10structural7avx2_6411ConstructorNtNtNtB3P_5depth7avx2_6411ConstructorNtNtNtB3P_6memmem7avx2_6411ConstructorKj1_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  236|  9.40k|        {
  237|  99.3k|            loop {
  238|  99.3k|                if eng.next_event.is_none() {
  239|  92.5k|                    eng.next_event = match classifier.next() {
  240|  92.5k|                        Ok(e) => e,
  241|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  242|       |                    };
  243|  6.78k|                }
  244|  99.3k|                if let Some(event) = eng.next_event {
  245|      0|                    debug!("====================");
  246|      0|                    debug!("Event = {:?}", event);
  247|      0|                    debug!("Depth = {:?}", eng.depth);
  248|      0|                    debug!("Stack = {:?}", eng.stack);
  249|      0|                    debug!("State = {:?}", eng.state);
  250|      0|                    debug!("====================");
  251|       |
  252|  91.1k|                    eng.next_event = None;
  253|  91.1k|                    match event {
  254|  10.6k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  255|  18.3k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  256|  51.7k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  257|  10.2k|                        Structural::Closing(_, idx) => {
  258|  10.2k|                            eng.handle_closing(classifier, idx)?;
  259|       |
  260|  10.2k|                            if eng.depth == Depth::ZERO {
  261|    119|                                break;
  262|  10.1k|                            }
  263|       |                        }
  264|       |                    }
  265|       |                } else {
  266|  8.21k|                    break;
  267|       |                }
  268|       |            }
  269|       |
  270|  8.33k|            Ok(())
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  344|  18.3k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  345|  18.3k|        self.recorder.record_value_terminator(idx, self.depth)?;
  346|  18.3k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  347|  17.5k|            c == b'{' || c == b'['
  348|       |        } else {
  349|    868|            false
  350|       |        };
  351|       |
  352|  18.3k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  353|  18.3k|
  354|  18.3k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  355|      0|            debug!("Accepting on comma.");
  356|  14.8k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  357|  3.55k|        }
  358|       |
  359|       |        // After wildcard, check for a matching array index.
  360|       |        // If the index increment exceeds the field's limit, give up.
  361|  17.6k|        if self.is_list && self.array_count.try_increment().is_err() {
  362|      0|            return Ok(());
  363|  17.6k|        }
  364|      0|        debug!("Incremented array count to {}", self.array_count);
  365|       |
  366|  17.6k|        if self.is_list
  367|  15.0k|            && !is_next_opening
  368|  14.1k|            && self
  369|  14.1k|                .automaton
  370|  14.1k|                .has_array_index_transition_to_accepting(self.state, &self.array_count)
  371|       |        {
  372|      0|            debug!("Accepting on list item.");
  373|      0|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  374|  17.6k|        }
  375|       |
  376|  17.6k|        Ok(())
  377|  18.3k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  581|  8.33k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  582|  8.33k|        if self.depth != Depth::ZERO {
  583|  8.16k|            Err(EngineError::MissingClosingCharacter())
  584|       |        } else {
  585|    172|            Ok(())
  586|       |        }
  587|  8.33k|    }
_RNCNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  437|      2|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  291|  10.6k|    fn handle_colon(
  292|  10.6k|        &mut self,
  293|  10.6k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  294|  10.6k|        idx: usize,
  295|  10.6k|    ) -> Result<(), EngineError> {
  296|      0|        debug!("Colon");
  297|       |
  298|  10.6k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1).e()? {
  299|  10.2k|            c == b'{' || c == b'['
  300|       |        } else {
  301|    371|            false
  302|       |        };
  303|       |
  304|  10.6k|        if !is_next_opening {
  305|  7.77k|            let mut any_matched = false;
  306|       |
  307|  7.77k|            for &(member_name, target) in self.automaton[self.state].member_transitions() {
  308|      0|                if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  309|      0|                    self.record_match_detected_at(
  310|      0|                        idx + 1,
  311|      0|                        NodeTypeHint::Atomic, /* since is_next_opening is false */
  312|      0|                    )?;
  313|      0|                    any_matched = true;
  314|      0|                    break;
  315|      0|                }
  316|       |            }
  317|  7.77k|            let fallback_state = self.automaton[self.state].fallback_state();
  318|  7.77k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  319|  7.77k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  320|      0|            }
  321|  7.40k|            self.next_event = classifier.next()?;
  322|  7.40k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  323|  7.40k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  324|      0|                if let Some(s) = self.next_event {
  325|      0|                    match s {
  326|      0|                        Structural::Closing(_, idx) => {
  327|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  328|       |                        }
  329|      0|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  330|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  331|       |                    }
  332|      0|                }
  333|      0|                let bracket_type = self.current_node_bracket_type();
  334|      0|                debug!("Skipping unique state from {bracket_type:?}");
  335|      0|                let stop_at = classifier.skip(bracket_type)?;
  336|      0|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  337|  7.40k|            }
  338|  2.88k|        }
  339|       |
  340|  10.2k|        Ok(())
  341|  10.6k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  380|  51.7k|    fn handle_opening(
  381|  51.7k|        &mut self,
  382|  51.7k|        classifier: &mut Classifier!(),
  383|  51.7k|        bracket_type: BracketType,
  384|  51.7k|        idx: usize,
  385|  51.7k|    ) -> Result<(), EngineError> {
  386|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  387|  51.7k|        let mut any_matched = false;
  388|  51.7k|
  389|  51.7k|        if self.is_list {
  390|  21.3k|            for trans in self.automaton[self.state].array_transitions() {
  391|      0|                if trans.matches(self.array_count) {
  392|      0|                    let target = trans.target_state();
  393|      0|                    any_matched = true;
  394|      0|                    self.transition_to(target, bracket_type);
  395|      0|                    if self.automaton.is_accepting(target) {
  396|      0|                        debug!("Accept {idx}");
  397|      0|                        self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  398|      0|                    }
  399|      0|                    break;
  400|      0|                }
  401|       |            }
  402|       |        } else {
  403|  30.4k|            let colon_idx = self.find_preceding_colon(idx);
  404|       |
  405|  30.4k|            for &(member_name, target) in self.automaton[self.state].member_transitions() {
  406|      0|                if let Some(colon_idx) = colon_idx {
  407|      0|                    if self.is_match(colon_idx, member_name)? {
  408|      0|                        any_matched = true;
  409|      0|                        self.transition_to(target, bracket_type);
  410|      0|                        if self.automaton.is_accepting(target) {
  411|      0|                            self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  412|      0|                        }
  413|      0|                        break;
  414|      0|                    }
  415|      0|                }
  416|       |            }
  417|       |        }
  418|       |
  419|  51.7k|        if !any_matched && self.depth != Depth::ZERO {
  420|  42.4k|            let fallback = self.automaton[self.state].fallback_state();
  421|      0|            debug!("Falling back to {fallback}");
  422|       |
  423|  42.4k|            if self.automaton.is_rejecting(fallback) {
  424|      0|                let closing_idx = classifier.skip(bracket_type)?;
  425|      0|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  426|  42.4k|            } else {
  427|  42.4k|                self.transition_to(fallback, bracket_type);
  428|  42.4k|            }
  429|  42.4k|
  430|  42.4k|            if self.automaton.is_accepting(fallback) {
  431|  42.4k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  432|      0|            }
  433|  9.34k|        }
  434|       |
  435|  51.7k|        self.depth
  436|  51.7k|            .increment()
  437|  51.7k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  438|       |
  439|  51.7k|        self.is_list = bracket_type == BracketType::Square;
  440|  51.7k|        let mut needs_commas = false;
  441|  51.7k|
  442|  51.7k|        if self.is_list {
  443|  26.8k|            let fallback = self.automaton[self.state].fallback_state();
  444|  26.8k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  445|       |
  446|  26.8k|            let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  447|       |
  448|  26.8k|            if searching_list {
  449|  26.8k|                needs_commas = true;
  450|  26.8k|                self.array_count = JsonUInt::ZERO;
  451|      0|                debug!("Initialized array count to {}", self.array_count);
  452|       |
  453|  26.8k|                let wants_first_item =
  454|  26.8k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  455|       |
  456|  26.8k|                if wants_first_item {
  457|  26.8k|                    let next = self.input.seek_non_whitespace_forward(idx + 1).e()?;
  458|       |
  459|  26.8k|                    match next {
  460|  10.1k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  461|  12.7k|                        Some((value_idx, _)) => {
  462|  12.7k|                            self.record_match_detected_at(
  463|  12.7k|                                value_idx,
  464|  12.7k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  465|  12.7k|                            )?;
  466|       |                        }
  467|  3.99k|                        _ => (),
  468|       |                    }
  469|      0|                }
  470|      0|            }
  471|  24.9k|        }
  472|       |
  473|  51.7k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  474|  24.9k|            classifier.turn_colons_and_commas_on(idx);
  475|  26.8k|        } else if needs_commas {
  476|  26.8k|            classifier.turn_colons_off();
  477|  26.8k|            classifier.turn_commas_on(idx);
  478|  26.8k|        } else {
  479|      0|            classifier.turn_colons_and_commas_off();
  480|      0|        }
  481|       |
  482|  51.7k|        Ok(())
  483|  51.7k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB5_10SmallStack4peekCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  617|  10.2k|    fn peek(&mut self) -> Option<StackFrame> {
  618|  10.2k|        self.contents.last().copied()
  619|  10.2k|    }
_RNCNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE14handle_closing0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  491|      2|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  486|  10.2k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  487|      0|        debug!("Closing, decreasing depth and popping stack.");
  488|       |
  489|  10.2k|        self.depth
  490|  10.2k|            .decrement()
  491|  10.2k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  492|  10.2k|        self.recorder.record_value_terminator(idx, self.depth)?;
  493|       |
  494|  10.2k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  495|  10.1k|            self.state = stack_frame.state;
  496|  10.1k|            self.is_list = stack_frame.is_list;
  497|  10.1k|            self.array_count = stack_frame.array_count;
  498|       |
  499|      0|            debug!("Restored array count to {}", self.array_count);
  500|       |
  501|  10.1k|            if self.automaton.is_unitary(self.state) {
  502|      0|                let bracket_type = self.current_node_bracket_type();
  503|      0|                debug!("Skipping unique state from {bracket_type:?}");
  504|      0|                let close_idx = classifier.skip(bracket_type)?;
  505|      0|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  506|      0|                return Ok(());
  507|  10.1k|            }
  508|    119|        }
  509|       |
  510|  10.2k|        if self.is_list
  511|  3.87k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  512|      0|                || self.automaton.has_any_array_item_transition(self.state))
  513|  3.87k|        {
  514|  3.87k|            classifier.turn_commas_on(idx);
  515|  6.41k|        } else {
  516|  6.41k|            classifier.turn_commas_off();
  517|  6.41k|        }
  518|       |
  519|  10.2k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  520|  6.41k|            classifier.turn_colons_and_commas_on(idx);
  521|  6.41k|        } else {
  522|  3.87k|            classifier.turn_colons_off();
  523|  3.87k|        }
  524|       |
  525|  10.2k|        Ok(())
  526|  10.2k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB5_10SmallStack4pushCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  632|  42.4k|    fn push(&mut self, value: StackFrame) {
  633|  42.4k|        self.contents.push(value)
  634|  42.4k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  552|  30.4k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  553|  30.4k|        if self.depth == Depth::ZERO {
  554|  9.34k|            None
  555|       |        } else {
  556|  21.0k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  557|       |
  558|  21.0k|            (char == b':').then_some(char_idx)
  559|       |        }
  560|  30.4k|    }
_RINvXs_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input8borrowed13BorrowedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  130|  9.40k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  131|  9.40k|    where
  132|  9.40k|        I: Input,
  133|  9.40k|        S: Sink<Match>,
  134|  9.40k|    {
  135|  9.40k|        if self.automaton.is_select_root_query() {
  136|      0|            return select_root_query::match_(input, sink);
  137|  9.40k|        }
  138|  9.40k|        if self.automaton.is_empty_query() {
  139|      0|            return Ok(());
  140|  9.40k|        }
  141|  9.40k|
  142|  9.40k|        let recorder = NodesRecorder::build_recorder(sink, input.leading_padding_len());
  143|  9.40k|        config_simd!(self.simd => |simd| {
  144|  9.40k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  145|  9.40k|            executor.run()
  146|  9.23k|        })?;
  147|       |
  148|    172|        Ok(())
  149|  9.40k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  529|  42.4k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  530|  42.4k|        let target_is_list = opening == BracketType::Square;
  531|  42.4k|
  532|  42.4k|        let fallback = self.automaton[self.state].fallback_state();
  533|  42.4k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  534|  42.4k|        let searching_list = is_fallback_accepting || self.automaton.has_any_array_item_transition(self.state);
  535|       |
  536|  42.4k|        if target != self.state || target_is_list != self.is_list || searching_list {
  537|       |            debug!(
  538|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  539|       |                self.state, self.array_count
  540|       |            );
  541|       |
  542|  42.4k|            self.stack.push(StackFrame {
  543|  42.4k|                depth: *self.depth,
  544|  42.4k|                state: self.state,
  545|  42.4k|                is_list: self.is_list,
  546|  42.4k|                array_count: self.array_count,
  547|  42.4k|            });
  548|  42.4k|            self.state = target;
  549|      0|        }
  550|  42.4k|    }
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  217|  9.40k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  218|  9.40k|        let iter = self.input.iter_blocks(self.recorder);
  219|  9.40k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  220|  9.40k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  221|  9.40k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  222|  9.40k|
  223|  9.40k|        self.run_on_subtree(&mut classifier)?;
  224|       |
  225|  8.33k|        self.verify_subtree_closed()
  226|  9.40k|    }
_RNvXs3_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_12NodeTypeHintE4from:
  674|  76.7k|    fn from(value: NodeTypeHint) -> Self {
  675|  76.7k|        match value {
  676|  34.2k|            NodeTypeHint::Atomic => Self::Atomic,
  677|  42.4k|            NodeTypeHint::Complex(_) => Self::Complex,
  678|       |        }
  679|  76.7k|    }
_RINvNtNtCs4sJFyKPpo5j_8rsonpath6engine4main14query_executorNtNtNtB6_5input8borrowed13BorrowedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1D_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB33_6quotes7avx2_6411ConstructorNtNtNtB33_10structural7avx2_6411ConstructorNtNtNtB33_5depth7avx2_6411ConstructorNtNtNtB33_6memmem7avx2_6411ConstructorKj1_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  177|  9.40k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  178|  9.40k|    automaton: &'i Automaton<'q>,
  179|  9.40k|    input: &'i I,
  180|  9.40k|    recorder: &'r R,
  181|  9.40k|    simd: V,
  182|  9.40k|) -> Executor<'i, 'q, 'r, I, R, V>
  183|  9.40k|where
  184|  9.40k|    I: Input,
  185|  9.40k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  186|  9.40k|{
  187|  9.40k|    Executor {
  188|  9.40k|        depth: Depth::ZERO,
  189|  9.40k|        state: automaton.initial_state(),
  190|  9.40k|        stack: SmallStack::new(),
  191|  9.40k|        automaton,
  192|  9.40k|        input,
  193|  9.40k|        recorder,
  194|  9.40k|        simd,
  195|  9.40k|        next_event: None,
  196|  9.40k|        is_list: false,
  197|  9.40k|        array_count: JsonUInt::ZERO,
  198|  9.40k|    }
  199|  9.40k|}
_RNCNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input8borrowed13BorrowedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1H_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB37_6quotes7avx2_6411ConstructorNtNtNtB37_10structural7avx2_6411ConstructorNtNtNtB37_5depth7avx2_6411ConstructorNtNtNtB37_6memmem7avx2_6411ConstructorKj1_EE12handle_colon0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  322|  6.78k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNvMs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input8borrowed13BorrowedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1F_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB35_6quotes7avx2_6411ConstructorNtNtNtB35_10structural7avx2_6411ConstructorNtNtNtB35_5depth7avx2_6411ConstructorNtNtNtB35_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  228|  9.40k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  229|  9.40k|        dispatch_simd!(self.simd; self, classifier =>
  230|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  231|       |        where
  232|       |            'i: 'r,
  233|       |            I: Input,
  234|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  235|       |            V: Simd
  236|       |        {
  237|       |            loop {
  238|       |                if eng.next_event.is_none() {
  239|       |                    eng.next_event = match classifier.next() {
  240|       |                        Ok(e) => e,
  241|       |                        Err(err) => return Err(EngineError::InputError(err)),
  242|       |                    };
  243|       |                }
  244|       |                if let Some(event) = eng.next_event {
  245|       |                    debug!("====================");
  246|       |                    debug!("Event = {:?}", event);
  247|       |                    debug!("Depth = {:?}", eng.depth);
  248|       |                    debug!("Stack = {:?}", eng.stack);
  249|       |                    debug!("State = {:?}", eng.state);
  250|       |                    debug!("====================");
  251|       |
  252|       |                    eng.next_event = None;
  253|       |                    match event {
  254|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  255|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  256|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  257|       |                        Structural::Closing(_, idx) => {
  258|       |                            eng.handle_closing(classifier, idx)?;
  259|       |
  260|       |                            if eng.depth == Depth::ZERO {
  261|       |                                break;
  262|       |                            }
  263|       |                        }
  264|       |                    }
  265|       |                } else {
  266|       |                    break;
  267|       |                }
  268|       |            }
  269|       |
  270|       |            Ok(())
  271|       |        })
  272|  9.40k|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   47|  9.40k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   48|  9.40k|        let automaton = Automaton::new(query)?;
   49|      0|        debug!("DFA:\n {}", automaton);
   50|  9.40k|        let simd = simd::configure();
   51|  9.40k|        log::info!("SIMD configuration:\n {}", simd);
   52|  9.40k|        Ok(MainEngine { automaton, simd })
   53|  9.40k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6engine4mainNtB5_10SmallStack3new:
  612|  9.40k|    fn new() -> Self {
  613|  9.40k|        Self { contents: smallvec![] }
  614|  9.40k|    }

_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorNtNtB1c_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2E_5MatchEEKj40_EINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB4c_10structural7avx2_6416Avx2Classifier64B17_B45_EINtNtB4c_4simd12ResolvedSimdNtB48_11ConstructorNtB5h_11ConstructorNtNtNtB4c_5depth7avx2_6411ConstructorNtNtNtB4c_6memmem7avx2_6411ConstructorKj1_EKB40_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  138|   199k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|   199k|        self.classifier
  140|   199k|            .as_mut()
  141|   199k|            .expect("tail skip must always hold a classifier")
  142|   199k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorNtNtB19_7padding19TwoSidesPaddedInputINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2B_5MatchEEKj40_EINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB49_10structural7avx2_6416Avx2Classifier64B14_B42_EINtNtB49_4simd12ResolvedSimdNtB45_11ConstructorNtB5e_11ConstructorNtNtNtB49_5depth7avx2_6411ConstructorNtNtNtB49_6memmem7avx2_6411ConstructorKj1_EKB3X_E3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   28|  9.40k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  9.40k|        Self {
   30|  9.40k|            classifier: Some(classifier),
   31|  9.40k|            simd,
   32|  9.40k|            _phantom: (PhantomData, PhantomData),
   33|  9.40k|        }
   34|  9.40k|    }

_RINvNtCs4sJFyKPpo5j_8rsonpath5input8align_toKj80_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  226|  9.40k|fn align_to<const N: usize>(bytes: &[u8]) -> (&[u8], &[u8], &[u8]) {
  227|  9.40k|    let ptr = bytes.as_ptr();
  228|  9.40k|    let offset = ptr.align_offset(N);
  229|  9.40k|    if offset > bytes.len() {
  230|  3.10k|        (bytes, &[], &[])
  231|       |    } else {
  232|  6.29k|        let (left, rest) = bytes.split_at(offset);
  233|  6.29k|        let middle_len = (rest.len() / N) * N;
  234|  6.29k|        let (middle, right) = rest.split_at(middle_len);
  235|  6.29k|
  236|  6.29k|        (left, middle, right)
  237|       |    }
  238|  9.40k|}
_RNvXNtCs4sJFyKPpo5j_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  207|   104k|    fn halves(&self) -> (&[u8], &[u8]) {
  208|   104k|        assert_eq!(N % 2, 0);
  209|   104k|        (&self[..N / 2], &self[N / 2..])
  210|   104k|    }

_RINvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input12seek_forwardKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  147|  42.4k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, Infallible> {
  148|  42.4k|        return Ok(
  149|  42.4k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  150|  9.57k|                match self.middle_bytes.seek_forward(from - MAX_BLOCK_SIZE, needles) {
  151|  9.57k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  152|      0|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len(), needles),
  153|       |                }
  154|       |            } else {
  155|  32.8k|                self.as_padded_input().seek_forward(from, needles)
  156|       |            },
  157|       |        );
  158|       |
  159|       |        #[cold]
  160|       |        #[inline(never)]
  161|       |        fn handle_last<const N: usize>(
  162|       |            last_block: &PaddedBlock,
  163|       |            offset: usize,
  164|       |            needles: [u8; N],
  165|       |        ) -> Option<(usize, u8)> {
  166|       |            last_block
  167|       |                .bytes()
  168|       |                .seek_forward(0, needles)
  169|       |                .map(|(x, y)| (x + offset, y))
  170|       |        }
  171|  42.4k|    }
_RNvXs3_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E10get_offsetCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  287|  91.4k|    fn get_offset(&self) -> usize {
  288|      0|        debug!("getting input iter {}", self.idx);
  289|  91.4k|        self.idx
  290|  91.4k|    }
_RNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input19leading_padding_len:
  100|  9.40k|    fn leading_padding_len(&self) -> usize {
  101|  9.40k|        self.first_block.padding_len()
  102|  9.40k|    }
_RNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input27seek_non_whitespace_forwardCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  174|  91.2k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, Infallible> {
  175|  91.2k|        return Ok(
  176|  91.2k|            // The hot path is when we start and end within the middle section.
  177|  91.2k|            // We use the regular slice path for that scenario, and fall back to the very expensive
  178|  91.2k|            // TwoSidesPaddedInput with all bells and whistles only when that doesn't work.
  179|  91.2k|            if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  180|  32.8k|                match self.middle_bytes.seek_non_whitespace_forward(from - MAX_BLOCK_SIZE) {
  181|  31.8k|                    Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  182|    947|                    None => handle_last(&self.last_block, MAX_BLOCK_SIZE + self.middle_bytes.len()),
  183|       |                }
  184|       |            } else {
  185|  58.4k|                self.as_padded_input().seek_non_whitespace_forward(from)
  186|       |            },
  187|       |        );
  188|       |
  189|       |        #[cold]
  190|       |        #[inline(never)]
  191|       |        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|       |            last_block
  193|       |                .bytes()
  194|       |                .seek_non_whitespace_forward(0)
  195|       |                .map(|(x, y)| (x + offset, y))
  196|       |        }
  197|  91.2k|    }
_RNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB5_13BorrowedBytesNtB7_5Input28seek_non_whitespace_backwardCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  200|  21.0k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  201|  21.0k|        return if from >= MAX_BLOCK_SIZE && from < self.middle_bytes.len() + MAX_BLOCK_SIZE {
  202|  4.48k|            match self.middle_bytes.seek_non_whitespace_backward(from - MAX_BLOCK_SIZE) {
  203|  4.35k|                Some((x, y)) => Some((x + MAX_BLOCK_SIZE, y)),
  204|    135|                None => handle_first(&self.first_block),
  205|       |            }
  206|       |        } else {
  207|  16.5k|            self.as_padded_input().seek_non_whitespace_backward(from)
  208|       |        };
  209|       |
  210|       |        #[cold]
  211|       |        #[inline(never)]
  212|       |        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|       |            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|       |        }
  215|  21.0k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB2_13BorrowedBytes3new:
   45|  9.40k|    pub fn new(bytes: &'a [u8]) -> Self {
   46|  9.40k|        let (first, middle, last) = align_to::<MAX_BLOCK_SIZE>(bytes);
   47|  9.40k|        let first_block = PaddedBlock::pad_first_block(first);
   48|  9.40k|        let last_block = PaddedBlock::pad_last_block(last);
   49|  9.40k|
   50|  9.40k|        Self {
   51|  9.40k|            middle_bytes: middle,
   52|  9.40k|            first_block,
   53|  9.40k|            last_block,
   54|  9.40k|        }
   55|  9.40k|    }
_RNvXs3_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorNtNtB7_7padding19TwoSidesPaddedInputINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1Y_5MatchEEKj40_EINtB7_18InputBlockIteratorKB3k_E4nextCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  246|  49.9k|    fn next(&mut self) -> Result<Option<Self::Block>, Self::Error> {
  247|      0|        debug!("next!");
  248|  49.9k|        return if self.idx >= MAX_BLOCK_SIZE && self.idx < self.input.middle().len() + MAX_BLOCK_SIZE {
  249|  5.30k|            let start = self.idx - MAX_BLOCK_SIZE;
  250|  5.30k|            // SAFETY: Bounds check above.
  251|  5.30k|            // self.idx >= MBS => start >= 0, and self.idx < middle.len + MBS => self.idx < middle.len
  252|  5.30k|            // By construction, middle has length divisible by N.
  253|  5.30k|            let block = unsafe { self.input.middle().get_unchecked(start..start + N) };
  254|  5.30k|            self.recorder.record_block_start(block);
  255|  5.30k|            self.idx += N;
  256|  5.30k|            Ok(Some(block))
  257|       |        } else {
  258|  44.6k|            Ok(cold_path(self))
  259|       |        };
  260|       |
  261|       |        #[cold]
  262|       |        fn cold_path<'a, 'r, R, const N: usize>(
  263|       |            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|       |        ) -> Option<&'a [u8]>
  265|       |        where
  266|       |            R: InputRecorder<&'a [u8]>,
  267|       |        {
  268|       |            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|       |            if let Some(b) = block {
  271|       |                iter.recorder.record_block_start(b);
  272|       |                iter.idx += N;
  273|       |            }
  274|       |
  275|       |            block
  276|       |        }
  277|  49.9k|    }
_RINvNvXs3_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedINtB8_26BorrowedBytesBlockIteratorNtNtBa_7padding19TwoSidesPaddedInputpKpEINtBa_18InputBlockIteratorKpE4next9cold_pathINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2N_5MatchEEKj40_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  262|  44.6k|        fn cold_path<'a, 'r, R, const N: usize>(
  263|  44.6k|            iter: &mut BorrowedBytesBlockIterator<'r, TwoSidesPaddedInput<'a>, R, N>,
  264|  44.6k|        ) -> Option<&'a [u8]>
  265|  44.6k|        where
  266|  44.6k|            R: InputRecorder<&'a [u8]>,
  267|  44.6k|        {
  268|  44.6k|            let block = iter.input.try_slice(iter.idx, N);
  269|       |
  270|  44.6k|            if let Some(b) = block {
  271|  35.8k|                iter.recorder.record_block_start(b);
  272|  35.8k|                iter.idx += N;
  273|  35.8k|            }
  274|       |
  275|  44.6k|            block
  276|  44.6k|        }
_RINvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB6_13BorrowedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1z_5MatchEEKj40_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  115|  9.40k|    fn iter_blocks<'b, 'r, R, const N: usize>(&'b self, recorder: &'r R) -> Self::BlockIterator<'b, 'r, R, N>
  116|  9.40k|    where
  117|  9.40k|        R: InputRecorder<&'b [u8]>,
  118|  9.40k|    {
  119|  9.40k|        let padded_input = TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block);
  120|  9.40k|
  121|  9.40k|        Self::BlockIterator {
  122|  9.40k|            idx: 0,
  123|  9.40k|            input: padded_input,
  124|  9.40k|            recorder,
  125|  9.40k|        }
  126|  9.40k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB2_13BorrowedBytes15as_padded_inputCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   57|   107k|    pub(super) fn as_padded_input(&self) -> TwoSidesPaddedInput {
   58|   107k|        TwoSidesPaddedInput::new(&self.first_block, self.middle_bytes, &self.last_block)
   59|   107k|    }
_RNvNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input28seek_non_whitespace_backward12handle_first:
  212|    135|        fn handle_first(first_block: &PaddedBlock) -> Option<(usize, u8)> {
  213|    135|            first_block.bytes().seek_non_whitespace_backward(first_block.len() - 1)
  214|    135|        }
_RNCNvNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB9_13BorrowedBytesNtBb_5Input27seek_non_whitespace_forward11handle_last0Bd_:
  195|    534|                .map(|(x, y)| (x + offset, y))
_RNvNvXs2_NtNtCs4sJFyKPpo5j_8rsonpath5input8borrowedNtB7_13BorrowedBytesNtB9_5Input27seek_non_whitespace_forward11handle_last:
  191|    947|        fn handle_last(last_block: &PaddedBlock, offset: usize) -> Option<(usize, u8)> {
  192|    947|            last_block
  193|    947|                .bytes()
  194|    947|                .seek_non_whitespace_forward(0)
  195|    947|                .map(|(x, y)| (x + offset, y))
  196|    947|        }

_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionTjhEENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   50|   133k|    fn e(self) -> Result<T, InputError> {
   51|   133k|        self.map_err(std::convert::Into::into)
   52|   133k|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5errorINtNtCslATUeuPuGvJ_4core6result6ResultINtNtBK_6option6OptionRShENtB2_10InfallibleEINtB2_21InputErrorConvertibleB1h_E1eCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   50|  49.9k|    fn e(self) -> Result<T, InputError> {
   51|  49.9k|        self.map_err(std::convert::Into::into)
   52|  49.9k|    }

_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  306|   117k|    pub(super) fn new(first: &'a PaddedBlock, middle: &'a [u8], last: &'a PaddedBlock) -> Self {
  307|   117k|        Self {
  308|   117k|            first_block: first,
  309|   117k|            middle,
  310|   117k|            last_block: last,
  311|   117k|        }
  312|   117k|    }
_RINvXs0_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInputNtB8_13SliceSeekable12seek_forwardKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  127|  32.8k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  128|  32.8k|        if from < MAX_BLOCK_SIZE {
  129|  19.2k|            self.seek_forward_from_first(from, needles)
  130|  13.6k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  131|      0|            self.seek_forward_from_middle(from, needles)
  132|       |        } else {
  133|  13.6k|            self.seek_forward_from_last(from, needles)
  134|       |        }
  135|  32.8k|    }
_RINvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput23seek_forward_from_firstKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  350|  19.2k|    fn seek_forward_from_first<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  351|  19.2k|        assert!(N > 0);
  352|  19.2k|        debug_assert!(from < MAX_BLOCK_SIZE);
  353|  19.2k|        let bytes = &self.first_block.bytes;
  354|  19.2k|
  355|  19.2k|        seek_forward_impl(bytes, from, needles).or_else(|| {
  356|       |            if self.middle.is_empty() {
  357|       |                self.seek_forward_from_last(bytes.len(), needles)
  358|       |            } else {
  359|       |                self.seek_forward_from_middle(bytes.len(), needles)
  360|       |            }
  361|  19.2k|        })
  362|  19.2k|    }
_RINvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB6_19TwoSidesPaddedInput22seek_forward_from_lastKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  374|  13.6k|    fn seek_forward_from_last<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  375|  13.6k|        assert!(N > 0);
  376|  13.6k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  377|  13.6k|        let bytes = &self.last_block.bytes;
  378|  13.6k|
  379|  13.6k|        seek_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE, needles)
  380|  13.6k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  381|  13.6k|    }
_RINvNtNtCs4sJFyKPpo5j_8rsonpath5input7padding17seek_forward_implKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  539|  32.8k|fn seek_forward_impl<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  540|  32.8k|    let mut idx = from;
  541|  32.8k|    if idx >= bytes.len() {
  542|      0|        return None;
  543|  32.8k|    }
  544|       |
  545|  32.8k|    loop {
  546|  32.8k|        let b = bytes[idx];
  547|  32.8k|        if needles.contains(&b) {
  548|  32.8k|            return Some((idx, b));
  549|      0|        }
  550|      0|        idx += 1;
  551|      0|        if idx == bytes.len() {
  552|      0|            return None;
  553|      0|        }
  554|       |    }
  555|  32.8k|}
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput6middle:
  315|  36.4k|    pub(super) fn middle(&self) -> &'a [u8] {
  316|  36.4k|        self.middle
  317|  36.4k|    }
_RNCINvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB8_19TwoSidesPaddedInput22seek_forward_from_lastKj1_E0Cs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  380|  13.6k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB2_11PaddedBlock11padding_lenCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   27|  9.40k|    pub(super) fn padding_len(&self) -> usize {
   28|  9.40k|        self.padding_len
   29|  9.40k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_backward_from_first:
  413|  10.9k|    fn seek_non_whitespace_backward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  414|  10.9k|        debug_assert!(from < MAX_BLOCK_SIZE);
  415|  10.9k|        let bytes = &self.first_block.bytes;
  416|  10.9k|
  417|  10.9k|        seek_non_whitespace_backward_impl(bytes, from)
  418|  10.9k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput10slice_last:
  465|  25.8k|    fn slice_last(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  466|  25.8k|        let start = start - self.middle.len() - MAX_BLOCK_SIZE;
  467|  25.8k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
  468|  25.8k|    }
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle0Bb_:
  425|    316|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_lasts_0Bb_:
  435|  1.08k|            .or_else(|| {
  436|  1.08k|                if self.middle.is_empty() {
  437|    552|                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|    534|                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|  1.08k|            })
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB2_11PaddedBlock5bytesB6_:
   31|  1.08k|    pub(super) fn bytes(&self) -> &[u8] {
   32|  1.08k|        &self.bytes
   33|  1.08k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last:
  405|  26.4k|    fn seek_non_whitespace_forward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  406|  26.4k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  407|  26.4k|        let bytes = &self.last_block.bytes;
  408|  26.4k|
  409|  26.4k|        seek_non_whitespace_forward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  410|  26.4k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  411|  26.4k|    }
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput10slice_last0Bb_:
  467|  17.0k|        (start < MAX_BLOCK_SIZE).then(|| &self.last_block.bytes[start..start + len])
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable28seek_non_whitespace_backward:
  151|  16.5k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  152|  16.5k|        if from < MAX_BLOCK_SIZE {
  153|  10.1k|            self.seek_non_whitespace_backward_from_first(from)
  154|  6.38k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  155|      0|            self.seek_non_whitespace_backward_from_middle(from)
  156|       |        } else {
  157|  6.38k|            self.seek_non_whitespace_backward_from_last(from)
  158|       |        }
  159|  16.5k|    }
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInputNtB7_13SliceSeekable27seek_non_whitespace_forward:
  139|  58.4k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
  140|  58.4k|        if from < MAX_BLOCK_SIZE {
  141|  34.1k|            self.seek_non_whitespace_forward_from_first(from)
  142|  24.2k|        } else if from < self.middle.len() + MAX_BLOCK_SIZE {
  143|      0|            self.seek_non_whitespace_forward_from_middle(from)
  144|       |        } else {
  145|  24.2k|            self.seek_non_whitespace_forward_from_last(from)
  146|       |        }
  147|  58.4k|    }
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle0Bb_:
  401|    259|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last0Bb_:
  434|  5.29k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB2_11PaddedBlock3lenB6_:
   23|    135|    pub(super) const fn len(&self) -> usize {
   24|    135|        MAX_BLOCK_SIZE
   25|    135|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB2_11PaddedBlock14pad_last_block:
   48|  9.40k|    pub(super) fn pad_last_block(bytes: &[u8]) -> Self {
   49|  9.40k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   50|  9.40k|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   51|  9.40k|        let block_end = bytes.len();
   52|  9.40k|
   53|  9.40k|        last_block_buf[..block_end].copy_from_slice(bytes);
   54|  9.40k|
   55|  9.40k|        Self {
   56|  9.40k|            bytes: last_block_buf,
   57|  9.40k|            padding_len: MAX_BLOCK_SIZE - block_end,
   58|  9.40k|        }
   59|  9.40k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middle:
  420|    534|    fn seek_non_whitespace_backward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  421|    534|        debug_assert!(from >= MAX_BLOCK_SIZE);
  422|    534|        let bytes = self.middle;
  423|    534|
  424|    534|        seek_non_whitespace_backward_impl(bytes, from - MAX_BLOCK_SIZE)
  425|    534|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  426|    534|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
  427|    534|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB2_11PaddedBlock15pad_first_block:
   35|  9.40k|    pub(super) fn pad_first_block(bytes: &[u8]) -> Self {
   36|  9.40k|        assert!(bytes.len() <= MAX_BLOCK_SIZE);
   37|  9.40k|        let mut block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
   38|  9.40k|        let block_start = MAX_BLOCK_SIZE - bytes.len();
   39|  9.40k|
   40|  9.40k|        block_buf[block_start..].copy_from_slice(bytes);
   41|  9.40k|
   42|  9.40k|        Self {
   43|  9.40k|            bytes: block_buf,
   44|  9.40k|            padding_len: block_start,
   45|  9.40k|        }
   46|  9.40k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath5input7padding32seek_non_whitespace_forward_impl:
  558|  61.1k|fn seek_non_whitespace_forward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  559|  61.1k|    let mut idx = from;
  560|  61.1k|    if idx >= bytes.len() {
  561|      0|        return None;
  562|  61.1k|    }
  563|       |
  564|   914k|    loop {
  565|   914k|        let b = bytes[idx];
  566|   914k|        if !b.is_ascii_whitespace() {
  567|  52.5k|            return Some((idx, b));
  568|   862k|        }
  569|   862k|        idx += 1;
  570|   862k|        if idx == bytes.len() {
  571|  8.63k|            return None;
  572|   853k|        }
  573|       |    }
  574|  61.1k|}
_RNvNtNtCs4sJFyKPpo5j_8rsonpath5input7padding33seek_non_whitespace_backward_impl:
  577|  17.8k|fn seek_non_whitespace_backward_impl(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  578|  17.8k|    let mut idx = from;
  579|  17.8k|    if idx >= bytes.len() {
  580|      0|        return None;
  581|  17.8k|    }
  582|       |
  583|       |    loop {
  584|   186k|        let b = bytes[idx];
  585|   186k|        if !b.is_ascii_whitespace() {
  586|  16.5k|            return Some((idx, b));
  587|   170k|        }
  588|   170k|        if idx == 0 {
  589|  1.30k|            return None;
  590|   168k|        }
  591|   168k|        idx -= 1;
  592|       |    }
  593|  17.8k|}
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_backward_from_last:
  429|  6.38k|    fn seek_non_whitespace_backward_from_last(&self, from: usize) -> Option<(usize, u8)> {
  430|  6.38k|        debug_assert!(from >= self.middle.len() + MAX_BLOCK_SIZE);
  431|  6.38k|        let bytes = &self.last_block.bytes;
  432|  6.38k|
  433|  6.38k|        seek_non_whitespace_backward_impl(bytes, from - self.middle.len() - MAX_BLOCK_SIZE)
  434|  6.38k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
  435|  6.38k|            .or_else(|| {
  436|       |                if self.middle.is_empty() {
  437|       |                    self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1)
  438|       |                } else {
  439|       |                    self.seek_non_whitespace_backward_from_middle(self.middle.len() + MAX_BLOCK_SIZE - 1)
  440|       |                }
  441|  6.38k|            })
  442|  6.38k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first:
  383|  34.1k|    fn seek_non_whitespace_forward_from_first(&self, from: usize) -> Option<(usize, u8)> {
  384|  34.1k|        debug_assert!(from < MAX_BLOCK_SIZE);
  385|  34.1k|        let bytes = &self.first_block.bytes;
  386|  34.1k|
  387|  34.1k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|       |            if self.middle.is_empty() {
  389|       |                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|       |                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  34.1k|        })
  394|  34.1k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middle:
  396|    521|    fn seek_non_whitespace_forward_from_middle(&self, from: usize) -> Option<(usize, u8)> {
  397|    521|        debug_assert!(from >= MAX_BLOCK_SIZE);
  398|    521|        let bytes = self.middle;
  399|    521|
  400|    521|        seek_non_whitespace_forward_impl(bytes, from - MAX_BLOCK_SIZE)
  401|    521|            .map(|(x, y)| (x + MAX_BLOCK_SIZE, y))
  402|    521|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
  403|    521|    }
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput38seek_non_whitespace_forward_from_first0Bb_:
  387|  2.48k|        seek_non_whitespace_forward_impl(bytes, from).or_else(|| {
  388|  2.48k|            if self.middle.is_empty() {
  389|  1.96k|                self.seek_non_whitespace_forward_from_last(bytes.len())
  390|       |            } else {
  391|    521|                self.seek_non_whitespace_forward_from_middle(bytes.len())
  392|       |            }
  393|  2.48k|        })
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput11slice_first:
  456|  18.7k|    fn slice_first(&self, start: usize, len: usize) -> &'a [u8] {
  457|  18.7k|        &self.first_block.bytes[start..start + len]
  458|  18.7k|    }
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput39seek_non_whitespace_forward_from_middles_0Bb_:
  402|    262|            .or_else(|| self.seek_non_whitespace_forward_from_last(bytes.len() + MAX_BLOCK_SIZE))
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput40seek_non_whitespace_backward_from_middles_0Bb_:
  426|    218|            .or_else(|| self.seek_non_whitespace_backward_from_first(MAX_BLOCK_SIZE - 1))
_RNCNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB7_19TwoSidesPaddedInput37seek_non_whitespace_forward_from_last0Bb_:
  410|  20.5k|            .map(|(x, y)| (x + self.middle.len() + MAX_BLOCK_SIZE, y))
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath5input7paddingNtB5_19TwoSidesPaddedInput9try_slice:
  444|  44.6k|    pub(super) fn try_slice(&self, start: usize, len: usize) -> Option<&'a [u8]> {
  445|  44.6k|        debug_assert!(len < MAX_BLOCK_SIZE);
  446|       |
  447|  44.6k|        if start < MAX_BLOCK_SIZE {
  448|  18.7k|            Some(self.slice_first(start, len))
  449|  25.8k|        } else if start < self.middle.len() + MAX_BLOCK_SIZE {
  450|      0|            Some(self.slice_middle(start, len))
  451|       |        } else {
  452|  25.8k|            self.slice_last(start, len)
  453|       |        }
  454|  44.6k|    }

_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   56|  32.8k|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|  32.8k|        let bytes = self.as_ref();
   58|  32.8k|        let mut idx = from;
   59|  32.8k|
   60|  32.8k|        if idx >= bytes.len() {
   61|      0|            return None;
   62|  32.8k|        }
   63|       |
   64|   126k|        loop {
   65|   126k|            let b = bytes[idx];
   66|   126k|            if !b.is_ascii_whitespace() {
   67|  31.8k|                return Some((idx, b));
   68|  94.2k|            }
   69|  94.2k|            idx += 1;
   70|  94.2k|            if idx == bytes.len() {
   71|    947|                return None;
   72|  93.3k|            }
   73|       |        }
   74|  32.8k|    }
_RINvXNtNtCs4sJFyKPpo5j_8rsonpath5input5sliceRShNtB5_13SliceSeekable12seek_forwardKj1_ECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   33|  9.57k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
   34|  9.57k|        let bytes = self.as_ref();
   35|       |
   36|  9.57k|        assert!(N > 0);
   37|  9.57k|        let mut idx = from;
   38|  9.57k|
   39|  9.57k|        if idx >= bytes.len() {
   40|      0|            return None;
   41|  9.57k|        }
   42|       |
   43|  9.57k|        loop {
   44|  9.57k|            let b = bytes[idx];
   45|  9.57k|            if needles.contains(&b) {
   46|  9.57k|                return Some((idx, b));
   47|      0|            }
   48|      0|            idx += 1;
   49|      0|            if idx == bytes.len() {
   50|      0|                return None;
   51|      0|            }
   52|       |        }
   53|  9.57k|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   77|  4.48k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|  4.48k|        let bytes = self.as_ref();
   79|  4.48k|        let mut idx = from;
   80|  4.48k|
   81|  4.48k|        if idx >= bytes.len() {
   82|      0|            return None;
   83|  4.48k|        }
   84|       |
   85|       |        loop {
   86|  20.1k|            let b = bytes[idx];
   87|  20.1k|            if !b.is_ascii_whitespace() {
   88|  4.35k|                return Some((idx, b));
   89|  15.7k|            }
   90|  15.7k|            if idx == 0 {
   91|    135|                return None;
   92|  15.6k|            }
   93|  15.6k|            idx -= 1;
   94|       |        }
   95|  4.48k|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5sliceRShNtB4_13SliceSeekable27seek_non_whitespace_forwardB6_:
   56|    947|    fn seek_non_whitespace_forward(&self, from: usize) -> Option<(usize, u8)> {
   57|    947|        let bytes = self.as_ref();
   58|    947|        let mut idx = from;
   59|    947|
   60|    947|        if idx >= bytes.len() {
   61|      0|            return None;
   62|    947|        }
   63|       |
   64|  69.4k|        loop {
   65|  69.4k|            let b = bytes[idx];
   66|  69.4k|            if !b.is_ascii_whitespace() {
   67|    534|                return Some((idx, b));
   68|  68.9k|            }
   69|  68.9k|            idx += 1;
   70|  68.9k|            if idx == bytes.len() {
   71|    413|                return None;
   72|  68.4k|            }
   73|       |        }
   74|    947|    }
_RNvXNtNtCs4sJFyKPpo5j_8rsonpath5input5sliceRShNtB4_13SliceSeekable28seek_non_whitespace_backwardB6_:
   77|    135|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
   78|    135|        let bytes = self.as_ref();
   79|    135|        let mut idx = from;
   80|    135|
   81|    135|        if idx >= bytes.len() {
   82|      0|            return None;
   83|    135|        }
   84|       |
   85|       |        loop {
   86|  4.15k|            let b = bytes[idx];
   87|  4.15k|            if !b.is_ascii_whitespace() {
   88|    135|                return Some((idx, b));
   89|  4.02k|            }
   90|  4.02k|            if idx == 0 {
   91|      0|                return None;
   92|  4.02k|            }
   93|  4.02k|            idx -= 1;
   94|       |        }
   95|    135|    }

_RNvCs4sJFyKPpo5j_8rsonpath18is_json_whitespace:
  351|  16.9k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  352|  16.9k|    JSON_WHITESPACE_BYTES.contains(&x)
  353|  16.9k|}

_RNvXs2_NtCs4sJFyKPpo5j_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  144|  15.5k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  15.5k|        self.push(data);
  146|  15.5k|        Ok(())
  147|  15.5k|    }
_RNvXsa_NtCs4sJFyKPpo5j_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  189|  28.6k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]

_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  238|  11.5k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  239|      0|        debug!("Value terminator at {idx}, depth {depth}");
  240|  11.5k|        if let Some(node) = self.node.as_ref() {
  241|  10.8k|            if node.start_depth >= depth {
  242|  10.3k|                let mut node = self.node.take().expect("node is Some");
  243|      0|                debug!("Mark node as ended at {}", idx + 1);
  244|       |                append_final_block(
  245|  10.3k|                    &mut node.buf,
  246|  10.3k|                    self.current_block
  247|  10.3k|                        .as_ref()
  248|  10.3k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  249|  10.3k|                    self.idx,
  250|  10.3k|                    node.start_idx,
  251|  10.3k|                    idx + 1,
  252|  10.3k|                );
  253|  10.3k|                finalize_node(&mut node.buf, node.ty);
  254|       |
  255|      0|                debug!("Committing and outputting node");
  256|  10.3k|                self.sink
  257|  10.3k|                    .add_match(Match {
  258|  10.3k|                        span_start: node.start_idx - self.leading_padding_len,
  259|  10.3k|                        bytes: node.buf,
  260|  10.3k|                    })
  261|  10.3k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  262|    501|            }
  263|    629|        }
  264|       |
  265|  11.5k|        Ok(())
  266|  11.5k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  285|  7.11k|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  286|  7.11k|        match self.node {
  287|  7.11k|            Some(node) => StackRecorder {
  288|  7.11k|                idx: self.idx,
  289|  7.11k|                match_count: 1,
  290|  7.11k|                current_block: self.current_block,
  291|  7.11k|                stack: vec![PartialNode {
  292|  7.11k|                    id: 0,
  293|  7.11k|                    start_idx: node.start_idx,
  294|  7.11k|                    start_depth: node.start_depth,
  295|  7.11k|                    buf: node.buf,
  296|  7.11k|                    ty: node.ty,
  297|  7.11k|                }],
  298|  7.11k|                output_queue: OutputQueue::new(),
  299|  7.11k|                sink: self.sink,
  300|  7.11k|                leading_padding_len: self.leading_padding_len,
  301|  7.11k|            },
  302|      0|            None => StackRecorder {
  303|      0|                idx: self.idx,
  304|      0|                match_count: 0,
  305|      0|                current_block: self.current_block,
  306|      0|                stack: vec![],
  307|      0|                output_queue: OutputQueue::new(),
  308|      0|                sink: self.sink,
  309|      0|                leading_padding_len: self.leading_padding_len,
  310|      0|            },
  311|       |        }
  312|  7.11k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  268|  26.4k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  269|  26.4k|        if self.node.is_some() {
  270|      0|            debug!("nested match detected, switching to stack");
  271|  7.11k|            return false;
  272|  19.3k|        }
  273|  19.3k|
  274|  19.3k|        let node = SimplePartialNode {
  275|  19.3k|            start_idx: idx,
  276|  19.3k|            start_depth: depth,
  277|  19.3k|            buf: vec![],
  278|  19.3k|            ty,
  279|  19.3k|        };
  280|  19.3k|        self.node = Some(node);
  281|  19.3k|
  282|  19.3k|        true
  283|  26.4k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath6result5nodes13finalize_node:
  439|  28.6k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  440|      0|    debug!("Finalizing node");
  441|       |
  442|  28.6k|    if ty == MatchedNodeType::Atomic {
  443|       |        // Atomic nodes are finished when the next structural character is matched.
  444|       |        // The buffer includes that character and all preceding whitespace.
  445|       |        // We need to remove it before saving the result.
  446|  18.5k|        if buf.len() <= 1 {
  447|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  448|  10.9k|            buf.truncate(0)
  449|       |        } else {
  450|  7.51k|            let mut i = buf.len() - 2;
  451|  16.9k|            while is_json_whitespace(buf[i]) {
  452|  9.47k|                i -= 1;
  453|  9.47k|            }
  454|       |
  455|  7.51k|            buf.truncate(i + 1);
  456|       |        }
  457|  10.1k|    }
  458|  28.6k|}
_RNvXs_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   41|  41.1k|    fn record_block_start(&self, new_block: B) {
   42|  41.1k|        self.internal.borrow_mut().record_block(new_block)
   43|  41.1k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath6result5nodes18append_final_block:
  425|  28.6k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  426|      0|    debug!("src_start: {src_start}, read_start: {read_start}, read_end: {read_end}");
  427|  28.6k|    debug_assert!(read_end >= src_start);
  428|  28.6k|    let in_block_start = if read_start > src_start {
  429|  24.5k|        read_start - src_start
  430|       |    } else {
  431|  4.10k|        0
  432|       |    };
  433|  28.6k|    let in_block_end = read_end - src_start;
  434|  28.6k|
  435|  28.6k|    dest.extend(&src[in_block_start..in_block_end]);
  436|  28.6k|}
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   28|  9.40k|    pub(crate) fn build_recorder(sink: &'s mut S, leading_padding_len: usize) -> Self {
   29|  9.40k|        Self {
   30|  9.40k|            internal: RefCell::new(InternalRecorder::new(sink, leading_padding_len)),
   31|  9.40k|        }
   32|  9.40k|    }
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   52|  76.7k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  76.7k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  76.7k|        Ok(())
   56|  76.7k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  224|  27.4k|    fn record_block(&mut self, block: B) {
  225|  27.4k|        if let Some(finished) = self.current_block.as_ref() {
  226|  18.0k|            if let Some(node) = self.node.as_mut() {
  227|      0|                debug!("Continuing node, idx is {}", self.idx);
  228|  5.42k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  229|  12.6k|            }
  230|       |
  231|  18.0k|            self.idx += finished.len();
  232|  9.40k|        }
  233|       |
  234|  27.4k|        self.current_block = Some(block);
  235|      0|        debug!("New block, idx = {}", self.idx);
  236|  27.4k|    }
_RNvMs2_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  214|  9.40k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  215|  9.40k|        Self {
  216|  9.40k|            idx: 0,
  217|  9.40k|            current_block: None,
  218|  9.40k|            node: None,
  219|  9.40k|            sink,
  220|  9.40k|            leading_padding_len,
  221|  9.40k|        }
  222|  9.40k|    }
_RNvNtNtCs4sJFyKPpo5j_8rsonpath6result5nodes12append_block:
  409|   128k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  410|   128k|    if read_start >= src_start + src.len() {
  411|  1.70k|        return;
  412|   126k|    }
  413|       |
  414|   126k|    let to_extend = if read_start > src_start {
  415|  46.7k|        let in_block_start = read_start - src_start;
  416|  46.7k|        &src[in_block_start..]
  417|       |    } else {
  418|  79.6k|        src
  419|       |    };
  420|       |
  421|   126k|    dest.extend(to_extend);
  422|   128k|}
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  151|  9.40k|    fn new(sink: &'s mut S, leading_padding_len: usize) -> Self {
  152|  9.40k|        Self::Simple(SimpleRecorder::new(sink, leading_padding_len))
  153|  9.40k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  185|  28.6k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  28.6k|        match self {
  187|  11.5k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  17.1k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  28.6k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  165|  76.7k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  76.7k|        match self {
  167|  26.4k|            Self::Simple(simple) => {
  168|  26.4k|                if !simple.try_record_match(idx, depth, ty) {
  169|  7.11k|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|  7.11k|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|  7.11k|                    let mut stack = simple.transform_to_stack();
  174|  7.11k|                    stack.record_match(idx, depth, ty);
  175|  7.11k|                    *self = Self::Stack(stack);
  176|  19.3k|                }
  177|       |            }
  178|  50.2k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  76.7k|    }
_RNvMs3_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  338|  13.6k|    fn record_block(&mut self, block: B) {
  339|  13.6k|        if let Some(finished) = self.current_block.as_ref() {
  340|   136k|            for node in &mut self.stack {
  341|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  342|   122k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  343|       |            }
  344|       |
  345|  13.6k|            self.idx += finished.len();
  346|      0|        }
  347|       |
  348|  13.6k|        self.current_block = Some(block);
  349|      0|        debug!("New block, idx = {}", self.idx);
  350|  13.6k|    }
_RNvMs3_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  367|  17.1k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  368|      0|        debug!("Value terminator at {idx}, depth {depth}");
  369|  35.4k|        while let Some(node) = self.stack.last() {
  370|  33.6k|            if node.start_depth >= depth {
  371|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  372|  18.2k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  373|  18.2k|                append_final_block(
  374|  18.2k|                    &mut node.buf,
  375|  18.2k|                    self.current_block
  376|  18.2k|                        .as_ref()
  377|  18.2k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  378|  18.2k|                    self.idx,
  379|  18.2k|                    node.start_idx,
  380|  18.2k|                    idx + 1,
  381|  18.2k|                );
  382|  18.2k|                finalize_node(&mut node.buf, node.ty);
  383|       |
  384|      0|                debug!("Committing node: {node:?}");
  385|  18.2k|                self.output_queue.insert(
  386|  18.2k|                    node.id,
  387|  18.2k|                    Match {
  388|  18.2k|                        span_start: node.start_idx - self.leading_padding_len,
  389|  18.2k|                        bytes: node.buf,
  390|  18.2k|                    },
  391|  18.2k|                );
  392|       |            } else {
  393|  15.3k|                break;
  394|       |            }
  395|       |        }
  396|       |
  397|  17.1k|        if self.stack.is_empty() {
  398|      0|            debug!("Outputting batch of nodes.");
  399|  1.78k|            self.output_queue
  400|  1.78k|                .output_to(self.sink)
  401|  1.78k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  402|  15.3k|        }
  403|       |
  404|  17.1k|        Ok(())
  405|  17.1k|    }
_RNvXs0_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   59|  28.6k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  28.6k|        self.internal
   61|  28.6k|            .borrow_mut()
   62|  28.6k|            .record_value_terminator(idx, depth)
   63|  28.6k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  28.6k|    }
_RNvMs3_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  352|  57.3k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  353|  57.3k|        let node = PartialNode {
  354|  57.3k|            id: self.match_count,
  355|  57.3k|            start_idx: idx,
  356|  57.3k|            start_depth: depth,
  357|  57.3k|            buf: vec![],
  358|  57.3k|            ty,
  359|  57.3k|        };
  360|       |
  361|      0|        debug!("New node {node:?}");
  362|  57.3k|        self.match_count += 1;
  363|  57.3k|        self.stack.push(node);
  364|  57.3k|    }
_RNvMs1_NtNtCs4sJFyKPpo5j_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  156|  41.1k|    fn record_block(&mut self, block: B) {
  157|  41.1k|        match self {
  158|  27.4k|            Self::Simple(r) => r.record_block(block),
  159|  13.6k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  41.1k|    }

_RINvMNtNtCs4sJFyKPpo5j_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB18_EECs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   52|  1.78k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.78k|    where
   54|  1.78k|        S: Sink<D>,
   55|  1.78k|    {
   56|  1.78k|        self.offset += self.nodes.len();
   57|       |
   58|  5.20k|        for node in self.nodes.drain(..) {
   59|  5.20k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.78k|        Ok(())
   63|  1.78k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   29|  18.2k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  18.2k|        let actual_idx = id - self.offset;
   31|       |
   32|  52.4k|        while self.nodes.len() <= actual_idx {
   33|  34.1k|            self.nodes.push(None);
   34|  34.1k|        }
   35|       |
   36|  18.2k|        self.nodes[actual_idx] = Some(node);
   37|  18.2k|    }
_RNvMNtNtCs4sJFyKPpo5j_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
   18|  7.11k|    pub(super) fn new() -> Self {
   19|  7.11k|        Self {
   20|  7.11k|            offset: 0,
   21|  7.11k|            nodes: vec![],
   22|  7.11k|        }
   23|  7.11k|    }

_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  462|  9.40k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|  9.40k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|  9.40k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3newB6_:
   47|  9.40k|    pub(crate) fn new() -> Self {
   48|  9.40k|        Self { syntax_errors: vec![] }
   49|  9.40k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_emptyB6_:
   59|  9.40k|    pub(crate) fn is_empty(&self) -> bool {
   60|  9.40k|        self.syntax_errors.is_empty()
   61|  9.40k|    }

_RNvXsP_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  181|  9.40k|#[derive(Debug, Clone, Default)]
_RNvMs2_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6Parser5parseCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  358|  9.40k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  359|  9.40k|        crate::parser::parse_with_options(str, &self.options)
  360|  9.40k|    }
_RNvCsmyidsRPtaf_15rsonpath_syntax5parseCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  334|  9.40k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  335|  9.40k|    Parser::default().parse(str)
  336|  9.40k|}
_RNvXs0_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  283|  9.40k|    fn default() -> Self {
  284|  9.40k|        Self {
  285|  9.40k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  286|  9.40k|            relaxed_whitespace: false,
  287|  9.40k|        }
  288|  9.40k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment9selectors:
  874|  9.40k|    pub fn selectors(&self) -> &Selectors {
  875|  9.40k|        match self {
  876|  9.40k|            Self::Child(s) | Self::Descendant(s) => s,
  877|  9.40k|        }
  878|  9.40k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstCs4sJFyKPpo5j_8rsonpath:
  955|  9.40k|    pub fn first(&self) -> &Selector {
  956|  9.40k|        &self.inner[0]
  957|  9.40k|    }
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1108|  9.40k|    fn deref(&self) -> &Self::Target {
 1109|  9.40k|        &self.inner
 1110|  9.40k|    }
_RNvMsr_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  865|  9.40k|    pub fn segments(&self) -> &[Segment] {
  866|  9.40k|        &self.segments
  867|  9.40k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment8is_child:
  890|  9.40k|    pub fn is_child(&self) -> bool {
  891|  9.40k|        matches!(self, Self::Child(_))
  892|  9.40k|    }
_RNvMs_CsmyidsRPtaf_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  276|  9.40k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  277|  9.40k|        self.relaxed_whitespace
  278|  9.40k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors3one:
  932|  9.40k|    pub fn one(selector: Selector) -> Self {
  933|  9.40k|        Self { inner: vec![selector] }
  934|  9.40k|    }

_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt13try_incrementCs1YeCzuuop0X_20fuzz_arbitrary_bytes:
  420|  15.0k|    pub fn try_increment(&mut self) -> Result<(), JsonIntOverflowError> {
  421|  15.0k|        let new_index = self.0 + 1;
  422|  15.0k|        if new_index <= JSON_UINT_UPPER_LIMIT {
  423|  15.0k|            self.0 = new_index;
  424|  15.0k|            Ok(())
  425|       |        } else {
  426|      0|            Err(JsonIntOverflowError::uint_pos_overflow(new_index))
  427|       |        }
  428|  15.0k|    }

_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0B5_:
  145|  9.40k|        |q| descendant_segment(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment:
  151|  9.40k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  9.40k|    map(
  153|  9.40k|        preceded(
  154|  9.40k|            tag(".."),
  155|  9.40k|            cut(alt((
  156|  9.40k|                |q| bracketed_selection(q, ctx),
  157|  9.40k|                map(wildcard_selector, Selectors::one),
  158|  9.40k|                member_name_shorthand,
  159|  9.40k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  9.40k|            ))),
  161|  9.40k|        ),
  162|  9.40k|        Segment::Descendant,
  163|  9.40k|    )(q)
  164|  9.40k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector:
  290|  9.40k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  9.40k|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  9.40k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19bracketed_selection:
  193|  9.40k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  9.40k|    let (mut q, _) = char('[')(q)?;
  195|      0|    let mut selectors = vec![];
  196|      0|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|      0|        match selector(q, ctx).finish() {
  200|      0|            Ok((rest, selector)) => {
  201|      0|                selectors.push(selector);
  202|      0|                q = rest;
  203|      0|            }
  204|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|      0|                syntax_errors.push(err);
  206|      0|                q = rest;
  207|      0|            }
  208|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|      0|                syntax_errors.append(&mut errs);
  210|      0|                q = rest;
  211|      0|            }
  212|      0|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|      0|        q = skip_whitespace(q);
  215|      0|
  216|      0|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|      0|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|      0|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|      0|                    q = rest;
  221|      0|                    break;
  222|      0|                } else if q.is_empty() {
  223|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|      0|                    break;
  225|       |                } else {
  226|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|      0|    if syntax_errors.is_empty() {
  233|      0|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  9.40k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|  9.40k|                |q| bracketed_selection(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_json_path_query:
   66|  9.40k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  9.40k|    let original_input = q;
   68|  9.40k|    let mut parse_error = ParseErrorBuilder::new();
   69|  9.40k|    let mut segments = vec![];
   70|  9.40k|    let q = skip_whitespace(q);
   71|  9.40k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  9.40k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|      0|        parse_error.add(SyntaxError::new(
   74|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|      0|            original_input.len(),
   76|      0|            leading_whitespace_len,
   77|      0|        ));
   78|  9.40k|    }
   79|  9.40k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|  9.40k|        Ok((q, _)) => skip_whitespace(q),
   81|      0|        Err(e) => {
   82|      0|            parse_error.add(SyntaxError::new(
   83|      0|                SyntaxErrorKind::MissingRootIdentifier,
   84|      0|                e.input.len(),
   85|      0|                q.chars().next().map_or(1, char::len_utf8),
   86|      0|            ));
   87|      0|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  9.40k|    let mut q = q;
   92|  18.8k|    while !q.is_empty() {
   93|  9.40k|        q = match segment(q, ctx).finish() {
   94|  9.40k|            Ok((rest, segment)) => {
   95|  9.40k|                segments.push(segment);
   96|  9.40k|                rest
   97|       |            }
   98|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|      0|                parse_error.add(err);
  100|      0|                rest
  101|       |            }
  102|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|      0|                parse_error.add_many(errs);
  104|      0|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|      0|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|      0|                    original_input.to_owned(),
  109|      0|                    ctx.options
  110|      0|                        .recursion_limit
  111|      0|                        .expect("recursion limit should exists when exceeded"),
  112|      0|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  9.40k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  9.40k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  9.40k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  9.40k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  9.40k|        if trailing_whitespace_len > 0 {
  127|      0|            parse_error.add(SyntaxError::new(
  128|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|      0|                trailing_whitespace_len,
  130|      0|                trailing_whitespace_len,
  131|      0|            ));
  132|  9.40k|        }
  133|      0|    }
  134|       |
  135|  9.40k|    if parse_error.is_empty() {
  136|  9.40k|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|      0|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  9.40k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18parse_with_options:
   62|  9.40k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  9.40k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  9.40k|}
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  9.40k|    fn new(options: &'a ParserOptions) -> Self {
   45|  9.40k|        Self {
   46|  9.40k|            options,
   47|  9.40k|            current_nesting: 0,
   48|  9.40k|        }
   49|  9.40k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  9.40k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15skip_whitespace:
   13|  28.2k|fn skip_whitespace(q: &str) -> &str {
   14|  28.2k|    q.trim_start_matches(WHITESPACE)
   15|  28.2k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment:
  142|  9.40k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  9.40k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  9.40k|    alt((
  145|  9.40k|        |q| descendant_segment(q, ctx),
  146|  9.40k|        |q| child_segment(q, ctx),
  147|  9.40k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  9.40k|    ))(q)
  149|  9.40k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  9.40k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  9.40k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|  9.40k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  9.40k|}

_RNvXNvCs1YeCzuuop0X_20fuzz_arbitrary_bytess_1__NtB4_16DisplayableBytesNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
   17|  28.2k|#[derive(Arbitrary)]
_RNCNvXNvCs1YeCzuuop0X_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0B6_:
   17|  9.40k|#[derive(Arbitrary)]
_RNCNvXNvCs1YeCzuuop0X_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   17|  9.40k|#[derive(Arbitrary)]

