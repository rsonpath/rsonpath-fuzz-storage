_RNvXs9_Cs6FPSiCtfwLi_9arbitraryRShNtB5_9Arbitrary19arbitrary_take_restCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  668|    505|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  669|    505|        Ok(u.take_rest())
  670|    505|    }
_RNvXs9_Cs6FPSiCtfwLi_9arbitraryRShNtB5_9Arbitrary9size_hintCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  673|    505|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  674|    505|        (0, None)
  675|    505|    }

_RNvNtCs6FPSiCtfwLi_9arbitrary9size_hint3andCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   26|    505|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    505|    let lower = lhs.0 + rhs.0;
   28|    505|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    505|    (lower, upper)
   30|    505|}
_RINvNtCs6FPSiCtfwLi_9arbitrary9size_hint15recursion_guardNCNvXNvCs5uWuaGWaM8W_20fuzz_arbitrary_bytess_1__NtB10_16DisplayableBytesNtB4_9Arbitrary9size_hint0EB10_:
   12|    505|pub fn recursion_guard(
   13|    505|    depth: usize,
   14|    505|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    505|) -> (usize, Option<usize>) {
   16|    505|    const MAX_DEPTH: usize = 20;
   17|    505|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    505|        f(depth + 1)
   21|       |    }
   22|    505|}
_RNvNtCs6FPSiCtfwLi_9arbitrary9size_hint7and_allCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   37|    505|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    505|    hints.iter().copied().fold((0, Some(0)), and)
   39|    505|}
_RNCNvNtCs6FPSiCtfwLi_9arbitrary9size_hint3and0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   28|    505|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs6FPSiCtfwLi_9arbitrary12unstructuredNtB2_12Unstructured3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   85|    505|    pub fn new(data: &'a [u8]) -> Self {
   86|    505|        Unstructured { data }
   87|    505|    }
_RNvMNtCs6FPSiCtfwLi_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  132|    505|    pub fn is_empty(&self) -> bool {
  133|    505|        self.len() == 0
  134|    505|    }
_RNvMNtCs6FPSiCtfwLi_9arbitrary12unstructuredNtB2_12Unstructured3lenCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  108|    505|    pub fn len(&self) -> usize {
  109|    505|        self.data.len()
  110|    505|    }
_RNvMNtCs6FPSiCtfwLi_9arbitrary12unstructuredNtB2_12Unstructured9take_restCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  598|    505|    pub fn take_rest(mut self) -> &'a [u8] {
  599|    505|        mem::take(&mut self.data)
  600|    505|    }

_RNvMs_CshWBdTIgKjYO_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   40|    505|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    505|        match self {
   42|    505|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    505|    }
_RNvXCshWBdTIgKjYO_13libfuzzer_sysNtB2_6CorpusINtNtCsf30vbYEHCOR_4core7convert4FromuE4fromCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   30|    505|    fn from(_: ()) -> Self {
   31|    505|        Self::Keep
   32|    505|    }
_RNvNvCs5uWuaGWaM8W_20fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|    505|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    505|                $body
  305|    505|            }
rust_fuzzer_test_input:
  259|    505|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    505|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    505|
  262|    505|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    505|                // implementation. This helps the fuzzer avoid exploring all the
  264|    505|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    505|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    505|                // get to longer inputs that actually lead to interesting executions
  267|    505|                // quicker.
  268|    505|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    505|                }
  271|    505|
  272|    505|                let mut u = Unstructured::new(bytes);
  273|    505|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    505|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    505|                }
  291|       |
  292|    505|                let data = match data {
  293|    505|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    505|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    505|                result.to_libfuzzer_code()
  299|    505|            }
LLVMFuzzerTestOneInput:
   58|    505|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    505|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    505|    });
   63|    505|
   64|    505|    match test_input {
   65|    505|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    505|}
_RNCNvCshWBdTIgKjYO_13libfuzzer_sys15test_input_wrap0B3_:
   59|    505|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    505|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    505|        rust_fuzzer_test_input(data_slice)
   62|    505|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_Csgh3VLM4oWLY_3logNtB4_5LevelINtNtCsf30vbYEHCOR_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  464|   834k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|   834k|        Some((*self as usize).cmp(&(*other as usize)))
  466|   834k|    }
_RNvCsgh3VLM4oWLY_3log9max_level:
 1270|   440k|pub fn max_level() -> LevelFilter {
 1271|   440k|    // Since `LevelFilter` is `repr(usize)`,
 1272|   440k|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1273|   440k|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1274|   440k|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1275|   440k|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1276|   440k|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1277|   440k|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1278|   440k|}
_RNvXs_Csgh3VLM4oWLY_3logNtB4_5LevelINtNtCsf30vbYEHCOR_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs5PViJFkd9Wt_8rsonpath:
  464|  46.8k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|  46.8k|        Some((*self as usize).cmp(&(*other as usize)))
  466|  46.8k|    }

_RNvXs_NtCsgRMR9ooWG6a_3nom6branchTNCINvNtB6_8sequence8precededReccINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B12_E0B1q_E0NCINvBB_9delimitedBY_cccB12_B1q_B1q_B1q_E0EINtB4_3AltBY_cB12_E6choiceCs5PViJFkd9Wt_8rsonpath:
  134|  1.01k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.01k|        match self.0.parse(input.clone()) {
  136|  1.01k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.01k|      }
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_NtBB_12MemberStringBz_B1l_NCIB0_Bx_B2d_B1l_TNCIB1N_Bx_Bx_B2d_B1l_NCINvB1P_9recognizeBx_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1l_NCINvNtB4_8sequence4pairBx_cB3E_B1l_NCINvB1P_6verifyBx_ccB1l_INvNtNtB4_9character8complete7anycharBx_B1l_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1l_NCIB4V_Bx_ccB1l_B5h_NCNvBB_16member_character0E0E0E0E0NcNtB2d_8Borrowed0E0NCINvB4n_9delimitedBx_cB2d_cB1l_NCINvB5k_4charBx_B1l_E0NCIB0_Bx_B2d_B1l_TNCIB87_Bx_cB2d_cB1l_B8A_NCIB1N_Bx_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB3J_6string6StringEB2d_B1l_NCINvB1P_3optBx_Bap_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1l_NCIB1N_Bx_IB3F_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1l_NCINvB6t_5many1Bx_Bco_B1l_NCIB0_Bx_Bco_B1l_TNCIB1N_Bx_cBco_B1l_NCIB4V_Bx_ccB1l_NCINvB5k_7none_ofBx_Bx_B1l_E0NCNvBB_9unescaped0E0NcNtBco_4Char0E0NCIB1N_Bx_cBco_B1l_B8A_NcNtBco_7Escaped0E0EE0E0NcBcM_0E0NCIB0_Bx_Bx_B1l_TNCIB0_Bx_Bx_B1l_TNCINvB1P_5valueBx_Bx_Bx_B1l_NCINvBbn_3tagBx_Bx_B1l_E0E0Bh2_Bh2_Bh2_Bh2_Bh2_Bh2_EE0Bh2_EE0BcM_Bx_cBap_E0E0NvYB2d_INtNtB9S_7convert4FromB9N_E4fromE0B8A_E0NCIB87_Bx_cB2d_cB1l_B8A_NCIB1N_Bx_B9N_B2d_B1l_NCIBaX_Bx_Bap_B1l_NCIBbl_Bx_B1l_NCIB3j_Bx_B3E_B1l_NCIBdj_Bx_cB1l_NCIB0_Bx_cB1l_TBeh_B8A_EE0E0E0Bgu_Bx_Bx_cBap_E0E0BiJ_E0B8A_E0EE0B8A_E0EE0NcNtBz_10Descendant0E0NCIB1N_Bx_NtNtBD_23nonnegative_array_index21NonNegativeArrayIndexBz_B1l_NCIB87_Bx_cBmY_cB1l_B8A_NCINvB1P_7map_resBx_yBmY_B1l_NtNtBD_5error15ArrayIndexErrorNCIBop_Bx_Bx_yB1l_NtNtNtB9S_3num5error13ParseIntErrorNCIBop_Bx_Bx_Bx_B1l_BoP_INvB5k_6digit1Bx_B1l_ENCNvBB_26length_limited_array_index0E0INvMNtB9S_3stre5parseyEE0NvYyINtBiT_7TryIntoBmY_E8try_intoE0B8A_E0NcNtBz_20ArrayIndexDescendant0E0EEBF_:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}
_RNvXs_NtCsgRMR9ooWG6a_3nom6branchTNCINvNtNtB6_9character8complete4charReINtNtB6_5error5ErrorB16_EE0NCINvNtB6_8sequence9delimitedB16_cccB18_Bw_Bw_Bw_E0EINtB4_3AltB16_cB18_E6choiceCs5PViJFkd9Wt_8rsonpath:
  134|    505|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|    505|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    505|          res => res,
  138|       |        }
  139|    505|      }
_RNvXs2_NtCsgRMR9ooWG6a_3nom6branchTNCINvNtB7_10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvB5_3altBX_cB1M_TNCINvNtB7_8sequence8precededBX_ccB1M_NCINvNtNtB7_9character8complete4charBX_B1M_E0B36_E0NCINvB2A_9delimitedBX_cccB1M_B36_B36_B36_E0EE0NCNvB12_23wildcard_child_selector0E0NCIBA_BX_NtB12_12MemberStringB10_B1M_NCIB2d_BX_B5o_B1M_TNCIB2y_BX_cB5o_B1M_B36_NCIBA_BX_BX_B5o_B1M_NCINvBC_9recognizeBX_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1M_NCINvB2A_4pairBX_cB7d_B1M_NCINvBC_6verifyBX_ccB1M_INvB3b_7anycharBX_B1M_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BX_cB1M_NCIB8k_BX_ccB1M_B8F_NCNvB12_16member_character0E0E0E0E0NcNtB5o_8Borrowed0E0E0NCIB3Y_BX_cB5o_cB1M_B36_NCIB2d_BX_B5o_B1M_TNCIB3Y_BX_cB5o_cB1M_B36_NCIBA_BX_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7i_6string6StringEB5o_B1M_NCINvBC_3optBX_Bd0_B1M_NCINvNtNtB7_5bytes8complete17escaped_transformBX_B1M_NCIBA_BX_IB7e_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB1M_NCINvB9w_5many1BX_BeX_B1M_NCIB2d_BX_BeX_B1M_TNCIBA_BX_cBeX_B1M_NCIB8k_BX_ccB1M_NCINvB3b_7none_ofBX_BX_B1M_E0NCNvB12_9unescaped0E0NcNtBeX_4Char0E0NCIBA_BX_cBeX_B1M_B36_NcNtBeX_7Escaped0E0EE0E0NcBfm_0E0NCIB2d_BX_BX_B1M_TNCIB2d_BX_BX_B1M_TNCINvBC_5valueBX_BX_BX_B1M_NCINvBdX_3tagBX_BX_B1M_E0E0BjF_BjF_BjF_BjF_BjF_BjF_EE0BjF_EE0Bfm_BX_cBd0_E0E0NvYB5o_INtNtBct_7convert4FromBco_E4fromE0B36_E0NCIB3Y_BX_cB5o_cB1M_B36_NCIBA_BX_Bco_B5o_B1M_NCIBdy_BX_Bd0_B1M_NCIBdV_BX_B1M_NCIB6T_BX_B7d_B1M_NCIBfU_BX_cB1M_NCIB2d_BX_cB1M_TBgS_B36_EE0E0E0Bj5_BX_BX_cBd0_E0E0Bll_E0B36_E0EE0B36_E0EE0NcNtB10_5Child0E0NCIBA_BX_NtNtB14_23nonnegative_array_index21NonNegativeArrayIndexB10_B1M_NCIB3Y_BX_cBpu_cB1M_B36_NCINvBC_7map_resBX_yBpu_B1M_NtNtB14_5error15ArrayIndexErrorNCIBqX_BX_BX_yB1M_NtNtNtBct_3num5error13ParseIntErrorNCIBqX_BX_BX_BX_B1M_Brm_INvB3b_6digit1BX_B1M_ENCNvB12_26length_limited_array_index0E0INvMNtBct_3stre5parseyEE0NvYyINtBlv_7TryIntoBpu_E8try_intoE0B36_E0NcNtB10_15ArrayIndexChild0E0NCIBA_BX_cB10_B1M_NCIB2y_BX_BX_cB1M_Bk6_NCIB2d_BX_cB1M_TB36_B3V_EE0E0NCNvB12_28wildcard_descendant_selector0E0NCIB2y_BX_BX_B10_B1M_Bk6_NCIB2d_BX_B10_B1M_TNCIBA_BX_B5o_B10_B1M_NCIB2d_BX_B5o_B1M_TB6w_Bba_EE0NcNtB10_10Descendant0E0NCIBA_BX_Bpu_B10_B1M_Bqw_NcNtB10_20ArrayIndexDescendant0E0EE0E0EINtB5_3AltBX_B10_B1M_E6choiceB16_:
  134|  1.01k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.01k|        match self.0.parse(input.clone()) {
  136|  1.01k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.01k|      }
_RNCINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_cBB_B1n_NCIB2_Bz_cB1n_TNCINvNtB6_8sequence8precededBz_ccB1n_NCINvNtNtB6_9character8complete4charBz_B1n_E0B3d_E0NCINvB2H_9delimitedBz_cccB1n_B3d_B3d_B3d_E0EE0NCNvBD_23wildcard_child_selector0E0NCIB1P_Bz_NtBD_12MemberStringBB_B1n_NCIB2_Bz_B5v_B1n_TNCIB2F_Bz_cB5v_B1n_B3d_NCIB1P_Bz_Bz_B5v_B1n_NCINvB1R_9recognizeBz_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1n_NCINvB2H_4pairBz_cB7j_B1n_NCINvB1R_6verifyBz_ccB1n_INvB3i_7anycharBz_B1n_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1n_NCIB8q_Bz_ccB1n_B8M_NCNvBD_16member_character0E0E0E0E0NcNtB5v_8Borrowed0E0E0NCIB45_Bz_cB5v_cB1n_B3d_NCIB2_Bz_B5v_B1n_TNCIB45_Bz_cB5v_cB1n_B3d_NCIB1P_Bz_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7o_6string6StringEB5v_B1n_NCINvB1R_3optBz_Bd5_B1n_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1n_NCIB1P_Bz_IB7k_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1n_NCINvB9C_5many1Bz_Bf4_B1n_NCIB2_Bz_Bf4_B1n_TNCIB1P_Bz_cBf4_B1n_NCIB8q_Bz_ccB1n_NCINvB3i_7none_ofBz_Bz_B1n_E0NCNvBD_9unescaped0E0NcNtBf4_4Char0E0NCIB1P_Bz_cBf4_B1n_B3d_NcNtBf4_7Escaped0E0EE0E0NcBfs_0E0NCIB2_Bz_Bz_B1n_TNCIB2_Bz_Bz_B1n_TNCINvB1R_5valueBz_Bz_Bz_B1n_NCINvBe3_3tagBz_Bz_B1n_E0E0BjI_BjI_BjI_BjI_BjI_BjI_EE0BjI_EE0Bfs_Bz_cBd5_E0E0NvYB5v_INtNtBcy_7convert4FromBct_E4fromE0B3d_E0NCIB45_Bz_cB5v_cB1n_B3d_NCIB1P_Bz_Bct_B5v_B1n_NCIBdD_Bz_Bd5_B1n_NCIBe1_Bz_B1n_NCIB6Y_Bz_B7j_B1n_NCIBfZ_Bz_cB1n_NCIB2_Bz_cB1n_TBgX_B3d_EE0E0E0Bja_Bz_Bz_cBd5_E0E0Blp_E0B3d_E0EE0B3d_E0EE0NcNtBB_5Child0E0NCIB1P_Bz_NtNtBF_23nonnegative_array_index21NonNegativeArrayIndexBB_B1n_NCIB45_Bz_cBpy_cB1n_B3d_NCINvB1R_7map_resBz_yBpy_B1n_NtNtBF_5error15ArrayIndexErrorNCIBqZ_Bz_Bz_yB1n_NtNtNtBcy_3num5error13ParseIntErrorNCIBqZ_Bz_Bz_Bz_B1n_Brp_INvB3i_6digit1Bz_B1n_ENCNvBD_26length_limited_array_index0E0INvMNtBcy_3stre5parseyEE0NvYyINtBlz_7TryIntoBpy_E8try_intoE0B3d_E0NcNtBB_15ArrayIndexChild0E0NCIB1P_Bz_cBB_B1n_NCIB2F_Bz_Bz_cB1n_Bka_NCIB2_Bz_cB1n_TB3d_B42_EE0E0NCNvBD_28wildcard_descendant_selector0E0NCIB2F_Bz_Bz_BB_B1n_Bka_NCIB2_Bz_BB_B1n_TNCIB1P_Bz_B5v_BB_B1n_NCIB2_Bz_B5v_B1n_TB6A_Bbf_EE0NcNtBB_10Descendant0E0NCIB1P_Bz_Bpy_BB_B1n_Bqy_NcNtBB_20ArrayIndexDescendant0E0EE0E0EE0BH_:
   50|  1.01k|  move |i: I| l.choice(i)
_RINvNtCsgRMR9ooWG6a_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator6verifyBx_ccBA_NCINvNtNtB4_9character8complete7none_ofBx_Bx_BA_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0E0NCINvB1F_4charBx_BA_E0EEB2w_:
   47|  1.01k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.01k|  mut l: List,
   49|  1.01k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCIB0_Bx_Bx_BC_TNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B1h_B1h_B1h_B1h_B1h_B1h_EE0B1h_EECs5PViJFkd9Wt_8rsonpath:
   47|  2.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.02k|  mut l: List,
   49|  2.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.02k|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence9delimitedBx_cBz_cB1t_NCINvNtNtB4_9character8complete4charBx_B1t_E0NCINvNtB4_10combinator3mapBx_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEBz_B1t_NCINvB3l_3optBx_B4l_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB3j_Bx_INtNtB4p_3vec3VecNtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvNtB4_5multi5many1Bx_B6L_B1t_NCIB0_Bx_B6L_B1t_TNCIB3j_Bx_cB6L_B1t_NCINvB3l_6verifyBx_ccB1t_NCINvB2C_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtB6L_4Char0E0NCIB3j_Bx_cB6L_B1t_B2x_NcNtB6L_7Escaped0E0EE0E0NcB79_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB3l_5valueBx_Bx_Bx_B1t_NCINvB5y_3tagBx_Bx_B1t_E0E0BbF_BbF_BbF_BbF_BbF_BbF_EE0BbF_EE0B79_Bx_cB4l_E0E0NvYBz_INtNtB3O_7convert4FromB3J_E4fromE0B2x_E0NCIB1V_Bx_cBz_cB1t_B2x_NCIB3j_Bx_B3J_Bz_B1t_NCIB58_Bx_B4l_B1t_NCIB5w_Bx_B1t_NCINvB3l_9recognizeBx_IB6v_cEB1t_NCIB7G_Bx_cB1t_NCIB0_Bx_cB1t_TB8L_B2x_EE0E0E0Bb7_Bx_Bx_cB4l_E0E0Bdm_E0B2x_E0EEBF_:
   47|  1.01k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.01k|  mut l: List,
   49|  1.01k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1x_NCINvB21_6verifyBx_ccB1x_NCINvNtNtB4_9character8complete7none_ofBx_Bx_B1x_E0NCNvBB_9unescaped0E0NcNtBz_4Char0E0NCIB1Z_Bx_cBz_B1x_NCINvB31_4charBx_B1x_E0NcNtBz_7Escaped0E0EEBF_:
   47|  1.01k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.01k|  mut l: List,
   49|  1.01k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtNtB6_9character8complete4charBz_BC_E0NCINvNtB6_8sequence9delimitedBz_cccBC_B11_B11_B11_E0EE0Cs5PViJFkd9Wt_8rsonpath:
   50|    505|  move |i: I| l.choice(i)
_RINvNtCsgRMR9ooWG6a_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_ccBA_NCINvNtNtB4_9character8complete4charBx_BA_E0B1z_E0NCINvB14_9delimitedBx_cccBA_B1z_B1z_B1z_E0EECs5PViJFkd9Wt_8rsonpath:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B11_B11_B11_B11_B11_B11_EECs5PViJFkd9Wt_8rsonpath:
   47|  2.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.02k|  mut l: List,
   49|  2.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.02k|}
_RNCINvNtCsgRMR9ooWG6a_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_ccBC_NCINvNtNtB6_9character8complete4charBz_BC_E0B1B_E0NCINvB16_9delimitedBz_cccBC_B1B_B1B_B1B_E0EE0Cs5PViJFkd9Wt_8rsonpath:
   50|  1.01k|  move |i: I| l.choice(i)
_RNCINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_cBB_B1v_NCINvNtNtB6_9character8complete4charBz_B1v_E0NCINvNtB6_10combinator3mapBz_Bz_BB_B1v_NCINvB3l_9recognizeBz_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1v_NCINvB1Z_4pairBz_cB4h_B1v_NCINvB3l_6verifyBz_ccB1v_INvB2C_7anycharBz_B1v_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1v_NCIB5o_Bz_ccB1v_B5K_NCNvBD_16member_character0E0E0E0E0NcNtBB_8Borrowed0E0E0NCINvB1Z_9delimitedBz_cBB_cB1v_B2x_NCIB2_Bz_BB_B1v_TNCIB8f_Bz_cBB_cB1v_B2x_NCIB3j_Bz_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB4m_6string6StringEBB_B1v_NCINvB3l_3optBz_Bab_B1v_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1v_NCIB3j_Bz_IB4i_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1v_NCINvB6A_5many1Bz_Bc9_B1v_NCIB2_Bz_Bc9_B1v_TNCIB3j_Bz_cBc9_B1v_NCIB5o_Bz_ccB1v_NCINvB2C_7none_ofBz_Bz_B1v_E0NCNvBD_9unescaped0E0NcNtBc9_4Char0E0NCIB3j_Bz_cBc9_B1v_B2x_NcNtBc9_7Escaped0E0EE0E0NcBcx_0E0NCIB2_Bz_Bz_B1v_TNCIB2_Bz_Bz_B1v_TNCINvB3l_5valueBz_Bz_Bz_B1v_NCINvBb8_3tagBz_Bz_B1v_E0E0BgN_BgN_BgN_BgN_BgN_BgN_EE0BgN_EE0Bcx_Bz_cBab_E0E0NvYBB_INtNtB9E_7convert4FromB9z_E4fromE0B2x_E0NCIB8f_Bz_cBB_cB1v_B2x_NCIB3j_Bz_B9z_BB_B1v_NCIBaI_Bz_Bab_B1v_NCIBb6_Bz_B1v_NCIB3W_Bz_B4h_B1v_NCIBd4_Bz_cB1v_NCIB2_Bz_cB1v_TBe2_B2x_EE0E0E0Bgf_Bz_Bz_cBab_E0E0Biu_E0B2x_E0EE0B2x_E0EE0BH_:
   50|  1.01k|  move |i: I| l.choice(i)
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_Bx_Bz_B1t_NCINvB1X_9recognizeBx_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1t_NCINvNtB4_8sequence4pairBx_cB2T_B1t_NCINvB1X_6verifyBx_ccB1t_INvNtNtB4_9character8complete7anycharBx_B1t_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1t_NCIB4a_Bx_ccB1t_B4w_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0NCINvB3C_9delimitedBx_cBz_cB1t_NCINvB4z_4charBx_B1t_E0NCIB0_Bx_Bz_B1t_TNCIB7l_Bx_cBz_cB1t_B7N_NCIB1V_Bx_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB2Y_6string6StringEBz_B1t_NCINvB1X_3optBx_B9A_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB1V_Bx_IB2U_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvB5I_5many1Bx_Bby_B1t_NCIB0_Bx_Bby_B1t_TNCIB1V_Bx_cBby_B1t_NCIB4a_Bx_ccB1t_NCINvB4z_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtBby_4Char0E0NCIB1V_Bx_cBby_B1t_B7N_NcNtBby_7Escaped0E0EE0E0NcBbW_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB1X_5valueBx_Bx_Bx_B1t_NCINvBax_3tagBx_Bx_B1t_E0E0Bgc_Bgc_Bgc_Bgc_Bgc_Bgc_EE0Bgc_EE0BbW_Bx_cB9A_E0E0NvYBz_INtNtB93_7convert4FromB8Y_E4fromE0B7N_E0NCIB7l_Bx_cBz_cB1t_B7N_NCIB1V_Bx_B8Y_Bz_B1t_NCIBa7_Bx_B9A_B1t_NCIBav_Bx_B1t_NCIB2y_Bx_B2T_B1t_NCIBct_Bx_cB1t_NCIB0_Bx_cB1t_TBdr_B7N_EE0E0E0BfE_Bx_Bx_cB9A_E0E0BhT_E0B7N_E0EE0B7N_E0EEBF_:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtNtB4_9character8complete4charBx_BA_E0NCINvNtB4_8sequence9delimitedBx_cccBA_BZ_BZ_BZ_E0EECs5PViJFkd9Wt_8rsonpath:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_cBz_B1t_NCINvNtNtB4_9character8complete4charBx_B1t_E0NCINvNtB4_10combinator3mapBx_Bx_Bz_B1t_NCINvB3j_9recognizeBx_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1t_NCINvB1X_4pairBx_cB4f_B1t_NCINvB3j_6verifyBx_ccB1t_INvB2A_7anycharBx_B1t_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1t_NCIB5m_Bx_ccB1t_B5I_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0E0NCINvB1X_9delimitedBx_cBz_cB1t_B2v_NCIB0_Bx_Bz_B1t_TNCIB8d_Bx_cBz_cB1t_B2v_NCIB3h_Bx_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB4k_6string6StringEBz_B1t_NCINvB3j_3optBx_Ba9_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB3h_Bx_IB4g_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvB6y_5many1Bx_Bc7_B1t_NCIB0_Bx_Bc7_B1t_TNCIB3h_Bx_cBc7_B1t_NCIB5m_Bx_ccB1t_NCINvB2A_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtBc7_4Char0E0NCIB3h_Bx_cBc7_B1t_B2v_NcNtBc7_7Escaped0E0EE0E0NcBcv_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB3j_5valueBx_Bx_Bx_B1t_NCINvBb6_3tagBx_Bx_B1t_E0E0BgL_BgL_BgL_BgL_BgL_BgL_EE0BgL_EE0Bcv_Bx_cBa9_E0E0NvYBz_INtNtB9C_7convert4FromB9x_E4fromE0B2v_E0NCIB8d_Bx_cBz_cB1t_B2v_NCIB3h_Bx_B9x_Bz_B1t_NCIBaG_Bx_Ba9_B1t_NCIBb4_Bx_B1t_NCIB3U_Bx_B4f_B1t_NCIBd2_Bx_cB1t_NCIB0_Bx_cB1t_TBe0_B2v_EE0E0E0Bgd_Bx_Bx_cBa9_E0E0Bis_E0B2v_E0EE0B2v_E0EEBF_:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}
_RNvXs_NtCsgRMR9ooWG6a_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B1V_E0NCINvNtB6_10combinator3mapBY_BY_B11_B1V_NCINvB37_9recognizeBY_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1V_NCINvBB_4pairBY_cB44_B1V_NCINvB37_6verifyBY_ccB1V_INvB2o_7anycharBY_B1V_ENCNvB13_12member_first0E0NCINvNtB6_5multi5many0BY_cB1V_NCIB5a_BY_ccB1V_B5w_NCNvB13_16member_character0E0E0E0E0NcNtB11_8Borrowed0E0E0NCINvBB_9delimitedBY_cB11_cB1V_B2j_NCINvB4_3altBY_B11_B1V_TNCIB84_BY_cB11_cB1V_B2j_NCIB35_BY_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB49_6string6StringEB11_B1V_NCINvB37_3optBY_Ba8_B1V_NCINvNtNtB6_5bytes8complete17escaped_transformBY_B1V_NCIB35_BY_IB45_NtB13_16MaybeEscapedCharENtB13_19MaybeEscapedCharVecB1V_NCINvB6n_5many1BY_Bc7_B1V_NCIB8D_BY_Bc7_B1V_TNCIB35_BY_cBc7_B1V_NCIB5a_BY_ccB1V_NCINvB2o_7none_ofBY_BY_B1V_E0NCNvB13_9unescaped0E0NcNtBc7_4Char0E0NCIB35_BY_cBc7_B1V_B2j_NcNtBc7_7Escaped0E0EE0E0NcBcw_0E0NCIB8D_BY_BY_B1V_TNCIB8D_BY_BY_B1V_TNCINvB37_5valueBY_BY_BY_B1V_NCINvBb6_3tagBY_BY_B1V_E0E0BgR_BgR_BgR_BgR_BgR_BgR_EE0BgR_EE0Bcw_BY_cBa8_E0E0NvYB11_INtNtB9B_7convert4FromB9w_E4fromE0B2j_E0NCIB84_BY_cB11_cB1V_B2j_NCIB35_BY_B9w_B11_B1V_NCIBaG_BY_Ba8_B1V_NCIBb4_BY_B1V_NCIB3J_BY_B44_B1V_NCIBd4_BY_cB1V_NCIB8D_BY_cB1V_TBe3_B2j_EE0E0E0Bgh_BY_BY_cBa8_E0E0Biy_E0B2j_E0EE0B2j_E0EINtB4_3AltBY_B11_B1V_E6choiceB17_:
  134|  1.01k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.01k|        match self.0.parse(input.clone()) {
  136|  1.01k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.01k|      }
_RINvNtCsgRMR9ooWG6a_3nom6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1l_NCIB0_Bx_cB1l_TNCINvNtB4_8sequence8precededBx_ccB1l_NCINvNtNtB4_9character8complete4charBx_B1l_E0B3b_E0NCINvB2F_9delimitedBx_cccB1l_B3b_B3b_B3b_E0EE0NCNvBB_23wildcard_child_selector0E0NCIB1N_Bx_NtBB_12MemberStringBz_B1l_NCIB0_Bx_B5t_B1l_TNCIB2D_Bx_cB5t_B1l_B3b_NCIB1N_Bx_Bx_B5t_B1l_NCINvB1P_9recognizeBx_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1l_NCINvB2F_4pairBx_cB7h_B1l_NCINvB1P_6verifyBx_ccB1l_INvB3g_7anycharBx_B1l_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1l_NCIB8o_Bx_ccB1l_B8K_NCNvBB_16member_character0E0E0E0E0NcNtB5t_8Borrowed0E0E0NCIB43_Bx_cB5t_cB1l_B3b_NCIB0_Bx_B5t_B1l_TNCIB43_Bx_cB5t_cB1l_B3b_NCIB1N_Bx_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7m_6string6StringEB5t_B1l_NCINvB1P_3optBx_Bd3_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1l_NCIB1N_Bx_IB7i_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1l_NCINvB9A_5many1Bx_Bf2_B1l_NCIB0_Bx_Bf2_B1l_TNCIB1N_Bx_cBf2_B1l_NCIB8o_Bx_ccB1l_NCINvB3g_7none_ofBx_Bx_B1l_E0NCNvBB_9unescaped0E0NcNtBf2_4Char0E0NCIB1N_Bx_cBf2_B1l_B3b_NcNtBf2_7Escaped0E0EE0E0NcBfq_0E0NCIB0_Bx_Bx_B1l_TNCIB0_Bx_Bx_B1l_TNCINvB1P_5valueBx_Bx_Bx_B1l_NCINvBe1_3tagBx_Bx_B1l_E0E0BjG_BjG_BjG_BjG_BjG_BjG_EE0BjG_EE0Bfq_Bx_cBd3_E0E0NvYB5t_INtNtBcw_7convert4FromBcr_E4fromE0B3b_E0NCIB43_Bx_cB5t_cB1l_B3b_NCIB1N_Bx_Bcr_B5t_B1l_NCIBdB_Bx_Bd3_B1l_NCIBdZ_Bx_B1l_NCIB6W_Bx_B7h_B1l_NCIBfX_Bx_cB1l_NCIB0_Bx_cB1l_TBgV_B3b_EE0E0E0Bj8_Bx_Bx_cBd3_E0E0Bln_E0B3b_E0EE0B3b_E0EE0NcNtBz_5Child0E0NCIB1N_Bx_NtNtBD_23nonnegative_array_index21NonNegativeArrayIndexBz_B1l_NCIB43_Bx_cBpw_cB1l_B3b_NCINvB1P_7map_resBx_yBpw_B1l_NtNtBD_5error15ArrayIndexErrorNCIBqX_Bx_Bx_yB1l_NtNtNtBcw_3num5error13ParseIntErrorNCIBqX_Bx_Bx_Bx_B1l_Brn_INvB3g_6digit1Bx_B1l_ENCNvBB_26length_limited_array_index0E0INvMNtBcw_3stre5parseyEE0NvYyINtBlx_7TryIntoBpw_E8try_intoE0B3b_E0NcNtBz_15ArrayIndexChild0E0NCIB1N_Bx_cBz_B1l_NCIB2D_Bx_Bx_cB1l_Bk8_NCIB0_Bx_cB1l_TB3b_B40_EE0E0NCNvBB_28wildcard_descendant_selector0E0NCIB2D_Bx_Bx_Bz_B1l_Bk8_NCIB0_Bx_Bz_B1l_TNCIB1N_Bx_B5t_Bz_B1l_NCIB0_Bx_B5t_B1l_TB6y_Bbd_EE0NcNtBz_10Descendant0E0NCIB1N_Bx_Bpw_Bz_B1l_Bqw_NcNtBz_20ArrayIndexDescendant0E0EE0E0EEBF_:
   47|    505|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    505|  mut l: List,
   49|    505|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    505|}

_RNCINvNtNtCsgRMR9ooWG6a_3nom5bytes8complete3tagReBJ_INtNtB8_5error5ErrorBJ_EE0Cs5PViJFkd9Wt_8rsonpath:
   39|  1.51k|  move |i: Input| {
   40|  1.51k|    let tag_len = tag.input_len();
   41|  1.51k|    let t = tag.clone();
   42|  1.51k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|    505|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  1.01k|        let e: ErrorKind = ErrorKind::Tag;
   46|  1.01k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  1.51k|    res
   50|  1.51k|  }
_RINvNtNtCsgRMR9ooWG6a_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator3mapBW_INtNtCsdNMYO4au7V3_5alloc3vec3VecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharENtB2o_19MaybeEscapedCharVecBY_NCINvNtB6_5multi5many1BW_B2m_BY_NCINvNtB6_6branch3altBW_B2m_BY_TNCIB1p_BW_cB2m_BY_NCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvB2o_9unescaped0E0NcNtB2m_4Char0E0NCIB1p_BW_cB2m_BY_NCINvB5C_4charBW_BY_E0NcNtB2m_7Escaped0E0EE0E0NcB3l_0E0NCIB4o_BW_BW_BY_TNCIB4o_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B8F_B8F_B8F_B8F_B8F_B8F_EE0B8F_EE0B3l_BW_cNtNtB1U_6string6StringEB2s_:
  623|  1.01k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  1.01k|  mut normal: F,
  625|  1.01k|  control_char: char,
  626|  1.01k|  mut transform: G,
  627|  1.01k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  1.01k|where
  629|  1.01k|  Input: Clone
  630|  1.01k|    + crate::traits::Offset
  631|  1.01k|    + InputLength
  632|  1.01k|    + InputTake
  633|  1.01k|    + InputTakeAtPosition
  634|  1.01k|    + Slice<RangeFrom<usize>>
  635|  1.01k|    + InputIter,
  636|  1.01k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  1.01k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  1.01k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  1.01k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  1.01k|  F: Parser<Input, O1, Error>,
  641|  1.01k|  G: Parser<Input, O2, Error>,
  642|  1.01k|  Error: ParseError<Input>,
  643|  1.01k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  1.01k|}
_RINvNtNtCsgRMR9ooWG6a_3nom5bytes8complete3tagReBH_INtNtB6_5error5ErrorBH_EECs5PViJFkd9Wt_8rsonpath:
   32|  17.1k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  17.1k|  tag: T,
   34|  17.1k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  17.1k|where
   36|  17.1k|  Input: InputTake + Compare<T>,
   37|  17.1k|  T: InputLength + Clone,
   38|  17.1k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  17.1k|}
_RINvNtNtCsgRMR9ooWG6a_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator9recognizeBW_INtNtCsdNMYO4au7V3_5alloc3vec3VeccEBY_NCINvNtB6_5multi5many1BW_cBY_NCINvNtB6_6branch3altBW_cBY_TNCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0E0NCINvB3W_4charBW_BY_E0EE0E0E0NCIB33_BW_BW_BY_TNCIB33_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B6B_B6B_B6B_B6B_B6B_B6B_EE0B6B_EE0BW_BW_cNtNtB20_6string6StringEB4N_:
  623|  1.01k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  1.01k|  mut normal: F,
  625|  1.01k|  control_char: char,
  626|  1.01k|  mut transform: G,
  627|  1.01k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  1.01k|where
  629|  1.01k|  Input: Clone
  630|  1.01k|    + crate::traits::Offset
  631|  1.01k|    + InputLength
  632|  1.01k|    + InputTake
  633|  1.01k|    + InputTakeAtPosition
  634|  1.01k|    + Slice<RangeFrom<usize>>
  635|  1.01k|    + InputIter,
  636|  1.01k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  1.01k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  1.01k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  1.01k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  1.01k|  F: Parser<Input, O1, Error>,
  641|  1.01k|  G: Parser<Input, O2, Error>,
  642|  1.01k|  Error: ParseError<Input>,
  643|  1.01k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  1.01k|}

_RNCNCINvNtNtCsgRMR9ooWG6a_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Cs5PViJFkd9Wt_8rsonpath:
   37|  4.04k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  4.04k|    let b = t.as_char() == c;
   39|  4.04k|    (&c, b)
   40|  4.04k|  }) {
_RINvNtNtCsgRMR9ooWG6a_3nom9character8complete7anycharReINtNtB6_5error5ErrorBP_EECs5PViJFkd9Wt_8rsonpath:
  309|    505|pub fn anychar<T, E: ParseError<T>>(input: T) -> IResult<T, char, E>
  310|    505|where
  311|    505|  T: InputIter + InputLength + Slice<RangeFrom<usize>>,
  312|    505|  <T as InputIter>::Item: AsChar,
  313|    505|{
  314|    505|  let mut it = input.iter_indices();
  315|    505|  match it.next() {
  316|      0|    None => Err(Err::Error(E::from_error_kind(input, ErrorKind::Eof))),
  317|    505|    Some((_, c)) => match it.next() {
  318|      0|      None => Ok((input.slice(input.input_len()..), c.as_char())),
  319|    505|      Some((idx, _)) => Ok((input.slice(idx..), c.as_char())),
  320|       |    },
  321|       |  }
  322|    505|}
_RINvNtNtCsgRMR9ooWG6a_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs5PViJFkd9Wt_8rsonpath:
   32|  15.6k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  15.6k|where
   34|  15.6k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  15.6k|  <I as InputIter>::Item: AsChar,
   36|  15.6k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  15.6k|}
_RINvNtNtCsgRMR9ooWG6a_3nom9character8complete7none_ofReBP_INtNtB6_5error5ErrorBP_EECs5PViJFkd9Wt_8rsonpath:
  113|  2.02k|pub fn none_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
  114|  2.02k|where
  115|  2.02k|  I: Slice<RangeFrom<usize>> + InputIter,
  116|  2.02k|  <I as InputIter>::Item: AsChar + Copy,
  117|  2.02k|  T: FindToken<<I as InputIter>::Item>,
  118|  2.02k|{
  119|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {
  120|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
  121|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::NoneOf))),
  122|       |  }
  123|  2.02k|}
_RNCINvNtNtCsgRMR9ooWG6a_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs5PViJFkd9Wt_8rsonpath:
   37|  6.56k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  6.56k|  }) {
   41|  2.02k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  4.54k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  6.56k|  }

_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB2j_NCINvNtNtB4_9character8complete4charBC_B2j_E0NCINvB2_7map_resBC_yBE_B2j_NtNtBI_5error15ArrayIndexErrorNCIB48_BC_BC_yB2j_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB48_BC_BC_BC_B2j_B4w_INvB3r_6digit1BC_B2j_ENCNvB21_26length_limited_array_index0E0INvMNtB5o_3stre5parseyEE0NvYyINtNtB5o_7convert7TryIntoBE_E8try_intoE0B3m_E0NcNtB1Z_20ArrayIndexDescendant0EBK_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator9recognizeReTcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEINtNtB4_5error5ErrorBI_ENCINvNtB4_8sequence4pairBI_cBM_B1m_NCINvB2_6verifyBI_ccB1m_INvNtNtB4_9character8complete7anycharBI_B1m_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0BI_cB1m_NCIB2m_BI_ccB1m_B2H_NCNvB3u_16member_character0E0E0E0EB3y_:
  506|  1.01k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  1.01k|  mut parser: F,
  508|  1.01k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  1.01k|where
  510|  1.01k|  F: Parser<I, O, E>,
  511|  1.01k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator7map_resReBG_yINtNtB4_5error5ErrorBG_ENtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB0_BG_BG_BG_BM_NtNtNtCs5PViJFkd9Wt_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BG_BM_ENCNvNtB2k_6parser26length_limited_array_index0E0INvMNtB1g_3stre5parseyEEB2m_:
  104|  1.01k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.01k|  mut parser: F,
  106|  1.01k|  mut f: G,
  107|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.01k|where
  109|  1.01k|  F: Parser<I, O1, E>,
  110|  1.01k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.01k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBK_6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence9delimitedBE_cBG_cB2l_NCINvNtNtB6_9character8complete4charBE_B2l_E0NCINvB4_7map_resBE_yBG_B2l_NtNtBK_5error15ArrayIndexErrorNCIB4a_BE_BE_yB2l_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB4a_BE_BE_BE_B2l_B4y_INvB3t_6digit1BE_B2l_ENCNvB23_26length_limited_array_index0E0INvMNtB5q_3stre5parseyEE0NvYyINtNtB5q_7convert7TryIntoBG_E8try_intoE0B3o_E0NcNtB21_15ArrayIndexChild0E0BM_:
   78|  1.01k|  move |input: I| {
   79|  1.01k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.01k|  }
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_cB1t_TNCINvNtB6_8sequence8precededBE_ccB1t_NCINvNtNtB6_9character8complete4charBE_B1t_E0B2W_E0NCINvB2q_9delimitedBE_cccB1t_B2W_B2W_B2W_E0EE0NCNvBJ_23wildcard_child_selector0E0BN_:
   78|  1.01k|  move |input: I| {
   79|  1.01k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.01k|  }
_RINvNtCsgRMR9ooWG6a_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0EB1X_:
  417|  1.01k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  1.01k|  mut first: F,
  419|  1.01k|  second: G,
  420|  1.01k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  1.01k|where
  422|  1.01k|  F: Parser<I, O1, E>,
  423|  1.01k|  G: Fn(&O2) -> bool,
  424|  1.01k|  O1: Borrow<O2>,
  425|  1.01k|  O2: ?Sized,
  426|  1.01k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReINtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringENtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2N_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2N_NCIB0_BC_INtNtB1k_3vec3VecNtB1V_16MaybeEscapedCharENtB1V_19MaybeEscapedCharVecB2N_NCINvNtB4_5multi5many1BC_B4P_B2N_NCINvNtB4_6branch3altBC_B4P_B2N_TNCIB0_BC_cB4P_B2N_NCINvB2_6verifyBC_ccB2N_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2N_E0NCNvB1V_9unescaped0E0NcNtB4P_4Char0E0NCIB0_BC_cB4P_B2N_NCINvB7y_4charBC_B2N_E0NcNtB4P_7Escaped0E0EE0E0NcB5e_0E0NCIB6j_BC_BC_B2N_TNCIB6j_BC_BC_B2N_TNCINvB2_5valueBC_BC_BC_B2N_NCINvB3D_3tagBC_BC_B2N_E0E0BaF_BaF_BaF_BaF_BaF_BaF_EE0BaF_EE0B5e_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1Z_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator9recognizeReINtNtCsdNMYO4au7V3_5alloc3vec3VeccEINtNtB4_5error5ErrorBI_ENCINvNtB4_5multi5many1BI_cB1j_NCINvNtB4_6branch3altBI_cB1j_TNCINvB2_6verifyBI_ccB1j_NCINvNtNtB4_9character8complete7none_ofBI_BI_B1j_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0E0NCINvB38_4charBI_B1j_E0EE0E0EB40_:
  506|  1.01k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  1.01k|  mut parser: F,
  508|  1.01k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  1.01k|where
  510|  1.01k|  F: Parser<I, O, E>,
  511|  1.01k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvB2_6verifyBC_ccB1D_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1D_E0NCNvBH_9unescaped0E0NcNtBF_4Char0EBL_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReBC_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_9recognizeBC_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1B_NCINvNtB4_8sequence4pairBC_cB2m_B1B_NCINvB2_6verifyBC_ccB1B_INvNtNtB4_9character8complete7anycharBC_B1B_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BC_cB1B_NCIB3D_BC_ccB1B_B3Y_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0EBN_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringNtBI_5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_BG_B1L_TNCINvNtB6_8sequence8precededBE_cBG_B1L_NCINvNtNtB6_9character8complete4charBE_B1L_E0NCIB2_BE_BE_BG_B1L_NCINvB4_9recognizeBE_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1L_NCINvB2K_4pairBE_cB4H_B1L_NCINvB4_6verifyBE_ccB1L_INvB3n_7anycharBE_B1L_ENCNvBI_12member_first0E0NCINvNtB6_5multi5many0BE_cB1L_NCIB5O_BE_ccB1L_B69_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0E0E0NCINvB2K_9delimitedBE_cBG_cB1L_B3i_NCIB2c_BE_BG_B1L_TNCIB8E_BE_cBG_cB1L_B3i_NCIB2_BE_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB4M_6string6StringEBG_B1L_NCINvB4_3optBE_BaA_B1L_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B1L_NCIB2_BE_IB4I_NtBI_16MaybeEscapedCharENtBI_19MaybeEscapedCharVecB1L_NCINvB6Z_5many1BE_Bcw_B1L_NCIB2c_BE_Bcw_B1L_TNCIB2_BE_cBcw_B1L_NCIB5O_BE_ccB1L_NCINvB3n_7none_ofBE_BE_B1L_E0NCNvBI_9unescaped0E0NcNtBcw_4Char0E0NCIB2_BE_cBcw_B1L_B3i_NcNtBcw_7Escaped0E0EE0E0NcBcU_0E0NCIB2c_BE_BE_B1L_TNCIB2c_BE_BE_B1L_TNCINvB4_5valueBE_BE_BE_B1L_NCINvBbw_3tagBE_BE_B1L_E0E0Bhb_Bhb_Bhb_Bhb_Bhb_Bhb_EE0Bhb_EE0BcU_BE_cBaA_E0E0NvYBG_INtNtBa3_7convert4FromB9Y_E4fromE0B3i_E0NCIB8E_BE_cBG_cB1L_B3i_NCIB2_BE_B9Y_BG_B1L_NCIBb7_BE_BaA_B1L_NCIBbu_BE_B1L_NCIB4n_BE_B4H_B1L_NCIBdr_BE_cB1L_NCIB2c_BE_cB1L_TBep_B3i_EE0E0E0BgB_BE_BE_cBaA_E0E0BiR_E0B3i_E0EE0B3i_E0EE0NcNtB1A_5Child0E0BM_:
   78|  1.01k|  move |input: I| {
   79|  1.01k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.01k|  }
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtNtB6_9character8complete4charBE_B1t_E0NCNvBJ_8jsonpath0E0BN_:
   78|    505|  move |input: I| {
   79|    505|    let (input, o1) = parser.parse(input)?;
   80|    505|    Ok((input, f(o1)))
   81|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete7none_ofBF_BF_BJ_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0EB23_:
  417|  2.02k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  2.02k|  mut first: F,
  419|  2.02k|  second: G,
  420|  2.02k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  2.02k|where
  422|  2.02k|  F: Parser<I, O1, E>,
  423|  2.02k|  G: Fn(&O2) -> bool,
  424|  2.02k|  O1: Borrow<O2>,
  425|  2.02k|  O2: ?Sized,
  426|  2.02k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  2.02k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReINtNtCsdNMYO4au7V3_5alloc3vec3VecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharENtB1d_19MaybeEscapedCharVecINtNtB4_5error5ErrorBC_ENCINvNtB4_5multi5many1BC_B1b_B2B_NCINvNtB4_6branch3altBC_B1b_B2B_TNCIB0_BC_cB1b_B2B_NCINvB2_6verifyBC_ccB2B_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2B_E0NCNvB1d_9unescaped0E0NcNtB1b_4Char0E0NCIB0_BC_cB1b_B2B_NCINvB4O_4charBC_B2B_E0NcNtB1b_7Escaped0E0EE0E0NcB2a_0EB1h_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapReBE_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBE_ENCINvB4_9recognizeBE_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1D_NCINvNtB6_8sequence4pairBE_cB2o_B1D_NCINvB4_6verifyBE_ccB1D_INvNtNtB6_9character8complete7anycharBE_B1D_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BE_cB1D_NCIB3F_BE_ccB1D_B40_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0BP_:
   78|    505|  move |input: I| {
   79|    505|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1r_E0NCNvBH_8jsonpath0EBL_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence8precededBC_BC_cB1r_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1r_E0NCINvNtB4_6branch3altBC_cB1r_TNCINvNtNtB4_9character8complete4charBC_B1r_E0NCINvB1U_9delimitedBC_cccB1r_B3D_B3D_B3D_E0EE0E0NCNvBH_28wildcard_descendant_selector0EBL_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1J_TNCIB0_BC_BC_BE_B1J_NCINvB2_9recognizeBC_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1J_NCINvNtB4_8sequence4pairBC_cB3j_B1J_NCINvB2_6verifyBC_ccB1J_INvNtNtB4_9character8complete7anycharBC_B1J_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1J_NCIB4A_BC_ccB1J_B4V_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0NCINvB42_9delimitedBC_cBE_cB1J_NCINvB4Y_4charBC_B1J_E0NCIB2a_BC_BE_B1J_TNCIB7K_BC_cBE_cB1J_B8c_NCIB0_BC_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB3o_6string6StringEBE_B1J_NCINvB2_3optBC_B9Z_B1J_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1J_NCIB0_BC_IB3k_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1J_NCINvB67_5many1BC_BbV_B1J_NCIB2a_BC_BbV_B1J_TNCIB0_BC_cBbV_B1J_NCIB4A_BC_ccB1J_NCINvB4Y_7none_ofBC_BC_B1J_E0NCNvBG_9unescaped0E0NcNtBbV_4Char0E0NCIB0_BC_cBbV_B1J_B8c_NcNtBbV_7Escaped0E0EE0E0NcBcj_0E0NCIB2a_BC_BC_B1J_TNCIB2a_BC_BC_B1J_TNCINvB2_5valueBC_BC_BC_B1J_NCINvBaV_3tagBC_BC_B1J_E0E0BgA_BgA_BgA_BgA_BgA_BgA_EE0BgA_EE0Bcj_BC_cB9Z_E0E0NvYBE_INtNtB9s_7convert4FromB9n_E4fromE0B8c_E0NCIB7K_BC_cBE_cB1J_B8c_NCIB0_BC_B9n_BE_B1J_NCIBaw_BC_B9Z_B1J_NCIBaT_BC_B1J_NCIB2Z_BC_B3j_B1J_NCIBcQ_BC_cB1J_NCIB2a_BC_cB1J_TBdO_B8c_EE0E0E0Bg0_BC_BC_cB9Z_E0E0Big_E0B8c_E0EE0B8c_E0EE0NcNtB1y_10Descendant0EBK_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator7map_resReBG_BG_INtNtB4_5error5ErrorBG_ENtNtNtCs5PViJFkd9Wt_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BG_BO_ENCNvNtB1g_6parser26length_limited_array_index0EB1i_:
  104|  1.01k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.01k|  mut parser: F,
  106|  1.01k|  mut f: G,
  107|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.01k|where
  109|  1.01k|  F: Parser<I, O1, E>,
  110|  1.01k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.01k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3optReNtNtCsdNMYO4au7V3_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_9recognizeBC_INtNtBI_3vec3VeccEB1g_NCINvNtB4_5multi5many1BC_cB1g_NCINvNtB4_6branch3altBC_cB1g_TNCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0E0NCINvB4D_4charBC_B1g_E0EE0E0E0NCIB3J_BC_BC_B1g_TNCIB3J_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B7m_B7m_B7m_B7m_B7m_B7m_EE0B7m_EE0BC_BC_cBE_E0EB5v_:
  239|  1.01k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.01k|where
  241|  1.01k|  F: Parser<I, O, E>,
  242|  1.01k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3optReNtNtCsdNMYO4au7V3_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_3mapBC_INtNtBI_3vec3VecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharENtB32_19MaybeEscapedCharVecB1g_NCINvNtB4_5multi5many1BC_B30_B1g_NCINvNtB4_6branch3altBC_B30_B1g_TNCIB2y_BC_cB30_B1g_NCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvB32_9unescaped0E0NcNtB30_4Char0E0NCIB2y_BC_cB30_B1g_NCINvB6k_4charBC_B1g_E0NcNtB30_7Escaped0E0EE0E0NcB3Z_0E0NCIB54_BC_BC_B1g_TNCIB54_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B9s_B9s_B9s_B9s_B9s_B9s_EE0B9s_EE0B3Z_BC_cBE_E0EB36_:
  239|  1.01k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.01k|where
  241|  1.01k|  F: Parser<I, O, E>,
  242|  1.01k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator9recognizeReTcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEINtNtB6_5error5ErrorBK_ENCINvNtB6_8sequence4pairBK_cBO_B1o_NCINvB4_6verifyBK_ccB1o_INvNtNtB6_9character8complete7anycharBK_B1o_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BK_cB1o_NCIB2o_BK_ccB1o_B2J_NCNvB3w_16member_character0E0E0E0E0B3A_:
  512|    505|  move |input: I| {
  513|    505|    let i = input.clone();
  514|    505|    match parser.parse(i) {
  515|      0|      Ok((i, _)) => {
  516|      0|        let index = input.offset(&i);
  517|      0|        Ok((i, input.slice(..index)))
  518|       |      }
  519|    505|      Err(e) => Err(e),
  520|       |    }
  521|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1J_TNCINvNtB4_8sequence8precededBC_cBE_B1J_NCINvNtNtB4_9character8complete4charBC_B1J_E0NCIB0_BC_BC_BE_B1J_NCINvB2_9recognizeBC_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1J_NCINvB2I_4pairBC_cB4F_B1J_NCINvB2_6verifyBC_ccB1J_INvB3l_7anycharBC_B1J_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1J_NCIB5M_BC_ccB1J_B67_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0E0NCINvB2I_9delimitedBC_cBE_cB1J_B3g_NCIB2a_BC_BE_B1J_TNCIB8C_BC_cBE_cB1J_B3g_NCIB0_BC_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB4K_6string6StringEBE_B1J_NCINvB2_3optBC_Bay_B1J_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1J_NCIB0_BC_IB4G_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1J_NCINvB6X_5many1BC_Bcu_B1J_NCIB2a_BC_Bcu_B1J_TNCIB0_BC_cBcu_B1J_NCIB5M_BC_ccB1J_NCINvB3l_7none_ofBC_BC_B1J_E0NCNvBG_9unescaped0E0NcNtBcu_4Char0E0NCIB0_BC_cBcu_B1J_B3g_NcNtBcu_7Escaped0E0EE0E0NcBcS_0E0NCIB2a_BC_BC_B1J_TNCIB2a_BC_BC_B1J_TNCINvB2_5valueBC_BC_BC_B1J_NCINvBbu_3tagBC_BC_B1J_E0E0Bh9_Bh9_Bh9_Bh9_Bh9_Bh9_EE0Bh9_EE0BcS_BC_cBay_E0E0NvYBE_INtNtBa1_7convert4FromB9W_E4fromE0B3g_E0NCIB8C_BC_cBE_cB1J_B3g_NCIB0_BC_B9W_BE_B1J_NCIBb5_BC_Bay_B1J_NCIBbs_BC_B1J_NCIB4l_BC_B4F_B1J_NCIBdp_BC_cB1J_NCIB2a_BC_cB1J_TBen_B3g_EE0E0E0Bgz_BC_BC_cBay_E0E0BiP_E0B3g_E0EE0B3g_E0EE0NcNtB1y_5Child0EBK_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1D_E0NcNtBF_7Escaped0EBL_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB2j_NCINvNtNtB4_9character8complete4charBC_B2j_E0NCINvB2_7map_resBC_yBE_B2j_NtNtBI_5error15ArrayIndexErrorNCIB48_BC_BC_yB2j_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB48_BC_BC_BC_B2j_B4w_INvB3r_6digit1BC_B2j_ENCNvB21_26length_limited_array_index0E0INvMNtB5o_3stre5parseyEE0NvYyINtNtB5o_7convert7TryIntoBE_E8try_intoE0B3m_E0NcNtB1Z_15ArrayIndexChild0EBK_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16member_character0EB1X_:
  417|  1.01k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  1.01k|  mut first: F,
  419|  1.01k|  second: G,
  420|  1.01k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  1.01k|where
  422|  1.01k|  F: Parser<I, O1, E>,
  423|  1.01k|  G: Fn(&O2) -> bool,
  424|  1.01k|  O1: Borrow<O2>,
  425|  1.01k|  O2: ?Sized,
  426|  1.01k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_cB1r_TNCINvNtB4_8sequence8precededBC_ccB1r_NCINvNtNtB4_9character8complete4charBC_B1r_E0B2U_E0NCINvB2o_9delimitedBC_cccB1r_B2U_B2U_B2U_E0EE0NCNvBH_23wildcard_child_selector0EBL_:
   73|    505|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    505|where
   75|    505|  F: Parser<I, O1, E>,
   76|    505|  G: FnMut(O1) -> O2,
   77|    505|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator7map_resReyNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexINtNtB4_5error5ErrorBG_ENtNtBN_5error15ArrayIndexErrorNCIB0_BG_BG_yB24_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB0_BG_BG_BG_B24_B2s_INvNtNtB4_9character8complete6digit1BG_B24_ENCNvNtBN_6parser26length_limited_array_index0E0INvMNtB3j_3stre5parseyEE0NvYyINtNtB3j_7convert7TryIntoBJ_E8try_intoEBP_:
  104|  1.01k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.01k|  mut parser: F,
  106|  1.01k|  mut f: G,
  107|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.01k|where
  109|  1.01k|  F: Parser<I, O1, E>,
  110|  1.01k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.01k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3optReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvB4_3mapBE_cBG_B1s_NCINvNtNtB6_9character8complete4charBE_B1s_E0NCNvBI_8jsonpath0E0E0BM_:
  243|    505|  move |input: I| {
  244|    505|    let i = input.clone();
  245|    505|    match f.parse(input) {
  246|    505|      Ok((i, o)) => Ok((i, Some(o))),
  247|      0|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|    505|  }
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator6verifyReccINtNtB6_5error5ErrorBH_EINvNtNtB6_9character8complete7anycharBH_BL_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0B1Z_:
  427|    505|  move |input: I| {
  428|    505|    let i = input.clone();
  429|    505|    let (input, o) = first.parse(input)?;
  430|       |
  431|    505|    if second(o.borrow()) {
  432|      0|      Ok((input, o))
  433|       |    } else {
  434|    505|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom10combinator5valueReBE_BE_INtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BM_E0ECs5PViJFkd9Wt_8rsonpath:
  453|  16.1k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  16.1k|  val: O1,
  455|  16.1k|  mut parser: F,
  456|  16.1k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  16.1k|where
  458|  16.1k|  F: Parser<I, O2, E>,
  459|  16.1k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  16.1k|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3optReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvB2_3mapBC_cBE_B1q_NCINvNtNtB4_9character8complete4charBC_B1q_E0NCNvBG_8jsonpath0E0EBK_:
  239|    505|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|    505|where
  241|    505|  F: Parser<I, O, E>,
  242|    505|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|    505|}
_RINvNtCsgRMR9ooWG6a_3nom10combinator3mapReINtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringENtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2N_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2N_NCINvB2_9recognizeBC_INtNtB1k_3vec3VeccEB2N_NCINvNtB4_5multi5many1BC_cB2N_NCINvNtB4_6branch3altBC_cB2N_TNCINvB2_6verifyBC_ccB2N_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2N_E0NCNvB1V_9unescaped0E0NCINvB6y_4charBC_B2N_E0EE0E0E0NCIB5E_BC_BC_B2N_TNCIB5E_BC_BC_B2N_TNCINvB2_5valueBC_BC_BC_B2N_NCINvB3D_3tagBC_BC_B2N_E0E0B8H_B8H_B8H_B8H_B8H_B8H_EE0B8H_EE0BC_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1Z_:
   73|  1.01k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.01k|where
   75|  1.01k|  F: Parser<I, O1, E>,
   76|  1.01k|  G: FnMut(O1) -> O2,
   77|  1.01k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence8precededBE_BE_cB1t_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1t_E0NCINvNtB6_6branch3altBE_cB1t_TNCINvNtNtB6_9character8complete4charBE_B1t_E0NCINvB1W_9delimitedBE_cccB1t_B3F_B3F_B3F_E0EE0E0NCNvBJ_28wildcard_descendant_selector0E0BN_:
   78|  1.01k|  move |input: I| {
   79|  1.01k|    let (input, o1) = parser.parse(input)?;
   80|    505|    Ok((input, f(o1)))
   81|  1.01k|  }

_RNvXs_NtCsgRMR9ooWG6a_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs5PViJFkd9Wt_8rsonpath:
   73|  6.06k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  6.06k|    Error { input, code: kind }
   75|  6.06k|  }
_RNvYINtNtCsgRMR9ooWG6a_3nom5error5ErrorReEINtB5_10ParseErrorBB_E2orCs5PViJFkd9Wt_8rsonpath:
   32|  5.05k|  fn or(self, other: Self) -> Self {
   33|  5.05k|    other
   34|  5.05k|  }
_RNvXs_NtCsgRMR9ooWG6a_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCs5PViJFkd9Wt_8rsonpath:
   77|  2.52k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  2.52k|    other
   79|  2.52k|  }
_RNvYINtNtCsgRMR9ooWG6a_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCs5PViJFkd9Wt_8rsonpath:
   26|  4.54k|  fn from_char(input: I, _: char) -> Self {
   27|  4.54k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  4.54k|  }

_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3optReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvBD_3mapBY_cB10_B1M_NCINvNtNtB7_9character8complete4charBY_B1M_E0NCNvB12_8jsonpath0E0E0INtB5_6ParserBY_INtNtCsf30vbYEHCOR_4core6option6OptionB10_EB1M_E5parseB16_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence4pairRecINtNtCsdNMYO4au7V3_5alloc3vec3VeccEINtNtB7_5error5ErrorBW_ENCINvNtB7_10combinator6verifyBW_ccB1y_INvNtNtB7_9character8complete7anycharBW_B1y_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0BW_cB1y_NCIB1Z_BW_ccB1y_B2y_NCNvB3l_16member_character0E0E0E0INtB5_6ParserBW_TcBZ_EB1y_E5parseB3p_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator9recognizeReTcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEINtNtB7_5error5ErrorB14_ENCINvNtB7_8sequence4pairB14_cB18_B1I_NCINvBD_6verifyB14_ccB1I_INvNtNtB7_9character8complete7anycharB14_B1I_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0B14_cB1I_NCIB2L_B14_ccB1I_B37_NCNvB3V_16member_character0E0E0E0E0INtB5_6ParserB14_B14_B1I_E5parseB3Z_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtNtB7_9character8complete4charBT_BW_E0NCINvNtB7_8sequence9delimitedBT_cccBW_B1l_B1l_B1l_E0EE0INtB5_6ParserBT_cBW_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence9delimitedRecccINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B16_E0B1v_B1v_E0INtB5_6ParserB11_cB16_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtNtB7_9character8complete4charReINtNtB7_5error5ErrorB18_EE0INtB5_6ParserB18_cB1a_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  6.56k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.56k|    self(i)
  326|  6.56k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_cB1N_TNCINvNtB7_8sequence8precededBY_ccB1N_NCINvNtNtB7_9character8complete4charBY_B1N_E0B3g_E0NCINvB2K_9delimitedBY_cccB1N_B3g_B3g_B3g_E0EE0NCNvB13_23wildcard_child_selector0E0INtB5_6ParserBY_B11_B1N_E5parseB17_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_5multi5many0ReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBU_ENCINvNtB7_6branch3altBU_BW_B1I_TNCINvNtB7_10combinator3mapBU_cBW_B1I_NCIB29_BU_cB1I_TNCINvNtB7_8sequence8precededBU_ccB1I_NCINvNtNtB7_9character8complete4charBU_B1I_E0B44_E0NCINvB3y_9delimitedBU_cccB1I_B44_B44_B44_E0EE0NCNvBY_23wildcard_child_selector0E0NCIB2F_BU_NtBY_12MemberStringBW_B1I_NCIB29_BU_B6m_B1I_TNCIB3w_BU_cB6m_B1I_B44_NCIB2F_BU_BU_B6m_B1I_NCINvB2H_9recognizeBU_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1I_NCINvB3y_4pairBU_cB8b_B1I_NCINvB2H_6verifyBU_ccB1I_INvB49_7anycharBU_B1I_ENCNvBY_12member_first0E0NCIBB_BU_cB1I_NCIB9i_BU_ccB1I_B9E_NCNvBY_16member_character0E0E0E0E0NcNtB6m_8Borrowed0E0E0NCIB4W_BU_cB6m_cB1I_B44_NCIB29_BU_B6m_B1I_TNCIB4W_BU_cB6m_cB1I_B44_NCIB2F_BU_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB8g_6string6StringEB6m_B1I_NCINvB2H_3optBU_BdI_B1I_NCINvNtNtB7_5bytes8complete17escaped_transformBU_B1I_NCIB2F_BU_IB8c_NtBY_16MaybeEscapedCharENtBY_19MaybeEscapedCharVecB1I_NCINvBD_5many1BU_BfH_B1I_NCIB29_BU_BfH_B1I_TNCIB2F_BU_cBfH_B1I_NCIB9i_BU_ccB1I_NCINvB49_7none_ofBU_BU_B1I_E0NCNvBY_9unescaped0E0NcNtBfH_4Char0E0NCIB2F_BU_cBfH_B1I_B44_NcNtBfH_7Escaped0E0EE0E0NcBg5_0E0NCIB29_BU_BU_B1I_TNCIB29_BU_BU_B1I_TNCINvB2H_5valueBU_BU_BU_B1I_NCINvBeG_3tagBU_BU_B1I_E0E0Bkn_Bkn_Bkn_Bkn_Bkn_Bkn_EE0Bkn_EE0Bg5_BU_cBdI_E0E0NvYB6m_INtNtBdb_7convert4FromBd6_E4fromE0B44_E0NCIB4W_BU_cB6m_cB1I_B44_NCIB2F_BU_Bd6_B6m_B1I_NCIBeg_BU_BdI_B1I_NCIBeE_BU_B1I_NCIB7Q_BU_B8b_B1I_NCIBgC_BU_cB1I_NCIB29_BU_cB1I_TBhA_B44_EE0E0E0BjN_BU_BU_cBdI_E0E0Bm4_E0B44_E0EE0B44_E0EE0NcNtBW_5Child0E0NCIB2F_BU_NtNtB10_23nonnegative_array_index21NonNegativeArrayIndexBW_B1I_NCIB4W_BU_cBqe_cB1I_B44_NCINvB2H_7map_resBU_yBqe_B1I_NtNtB10_5error15ArrayIndexErrorNCIBrG_BU_BU_yB1I_NtNtNtBdb_3num5error13ParseIntErrorNCIBrG_BU_BU_BU_B1I_Bs6_INvB49_6digit1BU_B1I_ENCNvBY_26length_limited_array_index0E0INvMNtBdb_3stre5parseyEE0NvYyINtBme_7TryIntoBqe_E8try_intoE0B44_E0NcNtBW_15ArrayIndexChild0E0NCIB2F_BU_cBW_B1I_NCIB3w_BU_BU_cB1I_BkP_NCIB29_BU_cB1I_TB44_B4T_EE0E0NCNvBY_28wildcard_descendant_selector0E0NCIB3w_BU_BU_BW_B1I_BkP_NCIB29_BU_BW_B1I_TNCIB2F_BU_B6m_BW_B1I_NCIB29_BU_B6m_B1I_TB7s_BbR_EE0NcNtBW_10Descendant0E0NCIB2F_BU_Bqe_BW_B1I_Brf_NcNtBW_20ArrayIndexDescendant0E0EE0E0EE0E0INtB5_6ParserBU_IB8c_BW_EB1I_E5parseB12_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_cBV_B1P_NCINvNtNtB7_9character8complete4charBT_B1P_E0NCINvNtB7_10combinator3mapBT_BT_BV_B1P_NCINvB3F_9recognizeBT_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1P_NCINvB2j_4pairBT_cB4B_B1P_NCINvB3F_6verifyBT_ccB1P_INvB2W_7anycharBT_B1P_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1P_NCIB5I_BT_ccB1P_B64_NCNvBX_16member_character0E0E0E0E0NcNtBV_8Borrowed0E0E0NCINvB2j_9delimitedBT_cBV_cB1P_B2R_NCIBB_BT_BV_B1P_TNCIB8z_BT_cBV_cB1P_B2R_NCIB3D_BT_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB4G_6string6StringEBV_B1P_NCINvB3F_3optBT_Bav_B1P_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1P_NCIB3D_BT_IB4C_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1P_NCINvB6U_5many1BT_Bct_B1P_NCIBB_BT_Bct_B1P_TNCIB3D_BT_cBct_B1P_NCIB5I_BT_ccB1P_NCINvB2W_7none_ofBT_BT_B1P_E0NCNvBX_9unescaped0E0NcNtBct_4Char0E0NCIB3D_BT_cBct_B1P_B2R_NcNtBct_7Escaped0E0EE0E0NcBcR_0E0NCIBB_BT_BT_B1P_TNCIBB_BT_BT_B1P_TNCINvB3F_5valueBT_BT_BT_B1P_NCINvBbs_3tagBT_BT_B1P_E0E0Bh7_Bh7_Bh7_Bh7_Bh7_Bh7_EE0Bh7_EE0BcR_BT_cBav_E0E0NvYBV_INtNtB9Y_7convert4FromB9T_E4fromE0B2R_E0NCIB8z_BT_cBV_cB1P_B2R_NCIB3D_BT_B9T_BV_B1P_NCIBb2_BT_Bav_B1P_NCIBbq_BT_B1P_NCIB4g_BT_B4B_B1P_NCIBdo_BT_cB1P_NCIBB_BT_cB1P_TBem_B2R_EE0E0E0Bgz_BT_BT_cBav_E0E0BiO_E0B2R_E0EE0B2R_E0EE0INtB5_6ParserBT_BV_B1P_E5parseB11_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence8precededReB10_cINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B17_E0NCINvNtB7_6branch3altB10_cB17_TNCINvNtNtB7_9character8complete4charB10_B17_E0NCINvBD_9delimitedB10_cccB17_B2K_B2K_B2K_E0EE0E0INtB5_6ParserB10_cB17_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtNtB7_9character8complete4charBY_B1N_E0NCNvB13_8jsonpath0E0INtB5_6ParserBY_B11_B1N_E5parseB17_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence8precededReccINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B14_E0B1t_E0INtB5_6ParserB10_cB14_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalINvNtNtB7_9character8complete7anycharReINtNtB7_5error5ErrorB19_EEINtB5_6ParserB19_cB1b_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtB14_6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence9delimitedBY_cB10_cB2G_NCINvNtNtB7_9character8complete4charBY_B2G_E0NCINvBD_7map_resBY_yB10_B2G_NtNtB14_5error15ArrayIndexErrorNCIB4w_BY_BY_yB2G_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB4w_BY_BY_BY_B2G_B4V_INvB3P_6digit1BY_B2G_ENCNvB2n_26length_limited_array_index0E0INvMNtB5O_3stre5parseyEE0NvYyINtNtB5O_7convert7TryIntoB10_E8try_intoE0B3K_E0NcNtB2l_15ArrayIndexChild0E0INtB5_6ParserBY_B2l_B2G_E5parseB16_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B2q_E0NCINvNtB7_10combinator7map_resB11_yB14_B2q_NtNtB18_5error15ArrayIndexErrorNCIB3C_B11_B11_yB2q_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB3C_B11_B11_B11_B2q_B4g_INvB2U_6digit1B11_B2q_ENCNvNtB18_6parser26length_limited_array_index0E0INvMNtB5b_3stre5parseyEE0NvYyINtNtB5b_7convert7TryIntoB14_E8try_intoE0B2P_E0INtB5_6ParserB11_B14_B2q_E5parseB1a_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXNtCsgRMR9ooWG6a_3nom8internalINtNtCsf30vbYEHCOR_4core6result6ResultTReTINtNtBA_6option6OptionNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenEINtNtCsdNMYO4au7V3_5alloc3vec3VecB1x_EEEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_B1a_B38_E6finishB1D_:
   36|    505|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|    505|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB11_EINvNtNtB7_9character8complete7anycharB11_B15_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0INtB5_6ParserB11_cB15_E5parseB2m_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence8precededRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B1X_E0NCINvNtB7_10combinator3mapB10_B10_B13_B1X_NCINvB3b_9recognizeB10_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1X_NCINvBD_4pairB10_cB4b_B1X_NCINvB3b_6verifyB10_ccB1X_INvB2r_7anycharB10_B1X_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0B10_cB1X_NCIB5i_B10_ccB1X_B5F_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0E0INtB5_6ParserB10_B13_B1X_E5parseB19_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringNtB12_5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_B10_B26_TNCINvNtB7_8sequence8precededBY_cB10_B26_NCINvNtNtB7_9character8complete4charBY_B26_E0NCIBB_BY_BY_B10_B26_NCINvBD_9recognizeBY_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB26_NCINvB36_4pairBY_cB55_B26_NCINvBD_6verifyBY_ccB26_INvB3K_7anycharBY_B26_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BY_cB26_NCIB6c_BY_ccB26_B6x_NCNvB12_16member_character0E0E0E0E0NcNtB10_8Borrowed0E0E0NCINvB36_9delimitedBY_cB10_cB26_B3F_NCIB2x_BY_B10_B26_TNCIB95_BY_cB10_cB26_B3F_NCIBB_BY_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB5a_6string6StringEB10_B26_NCINvBD_3optBY_Bb4_B26_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B26_NCIBB_BY_IB56_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB26_NCINvB7o_5many1BY_Bd1_B26_NCIB2x_BY_Bd1_B26_TNCIBB_BY_cBd1_B26_NCIB6c_BY_ccB26_NCINvB3K_7none_ofBY_BY_B26_E0NCNvB12_9unescaped0E0NcNtBd1_4Char0E0NCIBB_BY_cBd1_B26_B3F_NcNtBd1_7Escaped0E0EE0E0NcBdq_0E0NCIB2x_BY_BY_B26_TNCIB2x_BY_BY_B26_TNCINvBD_5valueBY_BY_BY_B26_NCINvBc1_3tagBY_BY_B26_E0E0BhJ_BhJ_BhJ_BhJ_BhJ_BhJ_EE0BhJ_EE0Bdq_BY_cBb4_E0E0NvYB10_INtNtBax_7convert4FromBas_E4fromE0B3F_E0NCIB95_BY_cB10_cB26_B3F_NCIBB_BY_Bas_B10_B26_NCIBbC_BY_Bb4_B26_NCIBbZ_BY_B26_NCIB4L_BY_B55_B26_NCIBdY_BY_cB26_NCIB2x_BY_cB26_TBeW_B3F_EE0E0E0Bh9_BY_BY_cBb4_E0E0Bjp_E0B3F_E0EE0B3F_E0EE0NcNtB1U_5Child0E0INtB5_6ParserBY_B1U_B26_E5parseB16_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence8precededBY_BY_cB1N_NCINvNtNtB7_5bytes8complete3tagBY_BY_B1N_E0NCINvNtB7_6branch3altBY_cB1N_TNCINvNtNtB7_9character8complete4charBY_B1N_E0NCINvB2g_9delimitedBY_cccB1N_B3Z_B3Z_B3Z_E0EE0E0NCNvB13_28wildcard_descendant_selector0E0INtB5_6ParserBY_B11_B1N_E5parseB17_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_10combinator3mapReBY_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBY_ENCINvBD_9recognizeBY_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1X_NCINvNtB7_8sequence4pairBY_cB2I_B1X_NCINvBD_6verifyBY_ccB1X_INvNtNtB7_9character8complete7anycharBY_B1X_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0BY_cB1X_NCIB3Z_BY_ccB1X_B4k_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0INtB5_6ParserBY_B13_B1X_E5parseB19_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1Z_E0NCINvNtB7_6branch3altB11_B14_B1Z_TNCIBB_B11_cB14_cB1Z_B2o_NCINvNtB7_10combinator3mapB11_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEB14_B1Z_NCINvB49_3optB11_B5a_B1Z_NCINvNtNtB7_5bytes8complete17escaped_transformB11_B1Z_NCIB47_B11_INtNtB5e_3vec3VecNtB16_16MaybeEscapedCharENtB16_19MaybeEscapedCharVecB1Z_NCINvNtB7_5multi5many1B11_B7E_B1Z_NCIB3b_B11_B7E_B1Z_TNCIB47_B11_cB7E_B1Z_NCINvB49_6verifyB11_ccB1Z_NCINvB2t_7none_ofB11_B11_B1Z_E0NCNvB16_9unescaped0E0NcNtB7E_4Char0E0NCIB47_B11_cB7E_B1Z_B2o_NcNtB7E_7Escaped0E0EE0E0NcB83_0E0NCIB3b_B11_B11_B1Z_TNCIB3b_B11_B11_B1Z_TNCINvB49_5valueB11_B11_B11_B1Z_NCINvB6p_3tagB11_B11_B1Z_E0E0BcP_BcP_BcP_BcP_BcP_BcP_EE0BcP_EE0B83_B11_cB5a_E0E0NvYB14_INtNtB4D_7convert4FromB4y_E4fromE0B2o_E0NCIBB_B11_cB14_cB1Z_B2o_NCIB47_B11_B4y_B14_B1Z_NCIB5Y_B11_B5a_B1Z_NCIB6n_B11_B1Z_NCINvB49_9recognizeB11_IB7o_cEB1Z_NCIB8B_B11_cB1Z_NCIB3b_B11_cB1Z_TB9K_B2o_EE0E0E0Bcb_B11_B11_cB5a_E0E0BeC_E0B2o_E0EE0B2o_E0INtB5_6ParserB11_B14_B1Z_E5parseB1a_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_8sequence8precededReB10_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B1S_E0NCINvNtB7_6branch3altB10_B16_B1S_TNCINvNtB7_10combinator3mapB10_NtB18_12MemberStringB16_B1S_NCIB33_B10_B42_B1S_TNCIB3B_B10_B10_B42_B1S_NCINvB3D_9recognizeB10_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1S_NCINvBD_4pairB10_cB5A_B1S_NCINvB3D_6verifyB10_ccB1S_INvNtNtB7_9character8complete7anycharB10_B1S_ENCNvB18_12member_first0E0NCINvNtB7_5multi5many0B10_cB1S_NCIB6H_B10_ccB1S_B74_NCNvB18_16member_character0E0E0E0E0NcNtB42_8Borrowed0E0NCINvBD_9delimitedB10_cB42_cB1S_NCINvB77_4charB10_B1S_E0NCIB33_B10_B42_B1S_TNCIB9Z_B10_cB42_cB1S_Bas_NCIB3B_B10_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB5F_6string6StringEB42_B1S_NCINvB3D_3optB10_Bcm_B1S_NCINvB2m_17escaped_transformB10_B1S_NCIB3B_B10_IB5B_NtB18_16MaybeEscapedCharENtB18_19MaybeEscapedCharVecB1S_NCINvB8i_5many1B10_Be6_B1S_NCIB33_B10_Be6_B1S_TNCIB3B_B10_cBe6_B1S_NCIB6H_B10_ccB1S_NCINvB77_7none_ofB10_B10_B1S_E0NCNvB18_9unescaped0E0NcNtBe6_4Char0E0NCIB3B_B10_cBe6_B1S_Bas_NcNtBe6_7Escaped0E0EE0E0NcBev_0E0NCIB33_B10_B10_B1S_TNCIB33_B10_B10_B1S_TNCINvB3D_5valueB10_B10_B10_B1S_B2h_E0Bj1_Bj1_Bj1_Bj1_Bj1_Bj1_EE0Bj1_EE0Bev_B10_cBcm_E0E0NvYB42_INtNtBbP_7convert4FromBbK_E4fromE0Bas_E0NCIB9Z_B10_cB42_cB1S_Bas_NCIB3B_B10_BbK_B42_B1S_NCIBcU_B10_Bcm_B1S_NCIBdj_B10_B1S_NCIB5e_B10_B5A_B1S_NCIBf3_B10_cB1S_NCIB33_B10_cB1S_TBg5_Bas_EE0E0E0Bin_B10_B10_cBcm_E0E0Bkr_E0Bas_E0EE0Bas_E0EE0NcNtB16_10Descendant0E0NCIB3B_B10_NtNtB1a_23nonnegative_array_index21NonNegativeArrayIndexB16_B1S_NCIB9Z_B10_cBoS_cB1S_Bas_NCINvB3D_7map_resB10_yBoS_B1S_NtNtB1a_5error15ArrayIndexErrorNCIBqm_B10_B10_yB1S_NtNtNtBbP_3num5error13ParseIntErrorNCIBqm_B10_B10_B10_B1S_BqN_INvB77_6digit1B10_B1S_ENCNvB18_26length_limited_array_index0E0INvMNtBbP_3stre5parseyEE0NvYyINtBkB_7TryIntoBoS_E8try_intoE0Bas_E0NcNtB16_20ArrayIndexDescendant0E0EE0E0INtB5_6ParserB10_B16_B1S_E5parseB1c_:
  324|    505|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    505|    self(i)
  326|    505|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_6branch3altReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_cBV_B1H_NCIBB_BT_cB1H_TNCINvNtB7_8sequence8precededBT_ccB1H_NCINvNtNtB7_9character8complete4charBT_B1H_E0B3x_E0NCINvB31_9delimitedBT_cccB1H_B3x_B3x_B3x_E0EE0NCNvBX_23wildcard_child_selector0E0NCIB29_BT_NtBX_12MemberStringBV_B1H_NCIBB_BT_B5P_B1H_TNCIB2Z_BT_cB5P_B1H_B3x_NCIB29_BT_BT_B5P_B1H_NCINvB2b_9recognizeBT_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1H_NCINvB31_4pairBT_cB7D_B1H_NCINvB2b_6verifyBT_ccB1H_INvB3C_7anycharBT_B1H_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1H_NCIB8K_BT_ccB1H_B96_NCNvBX_16member_character0E0E0E0E0NcNtB5P_8Borrowed0E0E0NCIB4p_BT_cB5P_cB1H_B3x_NCIBB_BT_B5P_B1H_TNCIB4p_BT_cB5P_cB1H_B3x_NCIB29_BT_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7I_6string6StringEB5P_B1H_NCINvB2b_3optBT_Bdp_B1H_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1H_NCIB29_BT_IB7E_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1H_NCINvB9W_5many1BT_Bfo_B1H_NCIBB_BT_Bfo_B1H_TNCIB29_BT_cBfo_B1H_NCIB8K_BT_ccB1H_NCINvB3C_7none_ofBT_BT_B1H_E0NCNvBX_9unescaped0E0NcNtBfo_4Char0E0NCIB29_BT_cBfo_B1H_B3x_NcNtBfo_7Escaped0E0EE0E0NcBfM_0E0NCIBB_BT_BT_B1H_TNCIBB_BT_BT_B1H_TNCINvB2b_5valueBT_BT_BT_B1H_NCINvBen_3tagBT_BT_B1H_E0E0Bk2_Bk2_Bk2_Bk2_Bk2_Bk2_EE0Bk2_EE0BfM_BT_cBdp_E0E0NvYB5P_INtNtBcS_7convert4FromBcN_E4fromE0B3x_E0NCIB4p_BT_cB5P_cB1H_B3x_NCIB29_BT_BcN_B5P_B1H_NCIBdX_BT_Bdp_B1H_NCIBel_BT_B1H_NCIB7i_BT_B7D_B1H_NCIBgj_BT_cB1H_NCIBB_BT_cB1H_TBhh_B3x_EE0E0E0Bju_BT_BT_cBdp_E0E0BlJ_E0B3x_E0EE0B3x_E0EE0NcNtBV_5Child0E0NCIB29_BT_NtNtBZ_23nonnegative_array_index21NonNegativeArrayIndexBV_B1H_NCIB4p_BT_cBpS_cB1H_B3x_NCINvB2b_7map_resBT_yBpS_B1H_NtNtBZ_5error15ArrayIndexErrorNCIBrj_BT_BT_yB1H_NtNtNtBcS_3num5error13ParseIntErrorNCIBrj_BT_BT_BT_B1H_BrJ_INvB3C_6digit1BT_B1H_ENCNvBX_26length_limited_array_index0E0INvMNtBcS_3stre5parseyEE0NvYyINtBlT_7TryIntoBpS_E8try_intoE0B3x_E0NcNtBV_15ArrayIndexChild0E0NCIB29_BT_cBV_B1H_NCIB2Z_BT_BT_cB1H_Bku_NCIBB_BT_cB1H_TB3x_B4m_EE0E0NCNvBX_28wildcard_descendant_selector0E0NCIB2Z_BT_BT_BV_B1H_Bku_NCIBB_BT_BV_B1H_TNCIB29_BT_B5P_BV_B1H_NCIBB_BT_B5P_B1H_TB6U_Bbz_EE0NcNtBV_10Descendant0E0NCIB29_BT_BpS_BV_B1H_BqS_NcNtBV_20ArrayIndexDescendant0E0EE0E0EE0INtB5_6ParserBT_BV_B1H_E5parseB11_:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_INtNtB7_5error5ErrorB13_EE0INtB5_6ParserB13_B13_B19_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  1.51k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.51k|    self(i)
  326|  1.51k|  }
_RNvXsa_NtCsgRMR9ooWG6a_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_ccBW_NCINvNtNtB7_9character8complete4charBT_BW_E0B1V_E0NCINvB1q_9delimitedBT_cccBW_B1V_B1V_B1V_E0EE0INtB5_6ParserBT_cBW_E5parseCs5PViJFkd9Wt_8rsonpath:
  324|  1.01k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01k|    self(i)
  326|  1.01k|  }

_RINvNtCsgRMR9ooWG6a_3nom5multi5many1ReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1y_TNCINvNtB4_10combinator3mapBy_cBA_B1y_NCINvB2x_6verifyBy_ccB1y_NCINvNtNtB4_9character8complete7none_ofBy_By_B1y_E0NCNvBC_9unescaped0E0NcNtBA_4Char0E0NCIB2v_By_cBA_B1y_NCINvB3x_4charBy_B1y_E0NcNtBA_7Escaped0E0EE0EBG_:
  108|  1.01k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  1.01k|where
  110|  1.01k|  I: Clone + InputLength,
  111|  1.01k|  F: Parser<I, O, E>,
  112|  1.01k|  E: ParseError<I>,
  113|  1.01k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom5multi5many1RecINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_cBB_TNCINvNtB4_10combinator6verifyBy_ccBB_NCINvNtNtB4_9character8complete7none_ofBy_By_BB_E0NCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescaped0E0NCINvB28_4charBy_BB_E0EE0EB2Z_:
  108|  1.01k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  1.01k|where
  110|  1.01k|  I: Clone + InputLength,
  111|  1.01k|  F: Parser<I, O, E>,
  112|  1.01k|  E: ParseError<I>,
  113|  1.01k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom5multi5many0ReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1m_TNCINvNtB4_10combinator3mapBy_cBA_B1m_NCIB1N_By_cB1m_TNCINvNtB4_8sequence8precededBy_ccB1m_NCINvNtNtB4_9character8complete4charBy_B1m_E0B3I_E0NCINvB3c_9delimitedBy_cccB1m_B3I_B3I_B3I_E0EE0NCNvBC_23wildcard_child_selector0E0NCIB2j_By_NtBC_12MemberStringBA_B1m_NCIB1N_By_B60_B1m_TNCIB3a_By_cB60_B1m_B3I_NCIB2j_By_By_B60_B1m_NCINvB2l_9recognizeBy_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1m_NCINvB3c_4pairBy_cB7P_B1m_NCINvB2l_6verifyBy_ccB1m_INvB3N_7anycharBy_B1m_ENCNvBC_12member_first0E0NCIB0_By_cB1m_NCIB8W_By_ccB1m_B9i_NCNvBC_16member_character0E0E0E0E0NcNtB60_8Borrowed0E0E0NCIB4A_By_cB60_cB1m_B3I_NCIB1N_By_B60_B1m_TNCIB4A_By_cB60_cB1m_B3I_NCIB2j_By_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7U_6string6StringEB60_B1m_NCINvB2l_3optBy_Bdm_B1m_NCINvNtNtB4_5bytes8complete17escaped_transformBy_B1m_NCIB2j_By_IB7Q_NtBC_16MaybeEscapedCharENtBC_19MaybeEscapedCharVecB1m_NCINvB2_5many1By_Bfl_B1m_NCIB1N_By_Bfl_B1m_TNCIB2j_By_cBfl_B1m_NCIB8W_By_ccB1m_NCINvB3N_7none_ofBy_By_B1m_E0NCNvBC_9unescaped0E0NcNtBfl_4Char0E0NCIB2j_By_cBfl_B1m_B3I_NcNtBfl_7Escaped0E0EE0E0NcBfJ_0E0NCIB1N_By_By_B1m_TNCIB1N_By_By_B1m_TNCINvB2l_5valueBy_By_By_B1m_NCINvBek_3tagBy_By_B1m_E0E0Bk1_Bk1_Bk1_Bk1_Bk1_Bk1_EE0Bk1_EE0BfJ_By_cBdm_E0E0NvYB60_INtNtBcP_7convert4FromBcK_E4fromE0B3I_E0NCIB4A_By_cB60_cB1m_B3I_NCIB2j_By_BcK_B60_B1m_NCIBdU_By_Bdm_B1m_NCIBei_By_B1m_NCIB7u_By_B7P_B1m_NCIBgg_By_cB1m_NCIB1N_By_cB1m_TBhe_B3I_EE0E0E0Bjr_By_By_cBdm_E0E0BlI_E0B3I_E0EE0B3I_E0EE0NcNtBA_5Child0E0NCIB2j_By_NtNtBE_23nonnegative_array_index21NonNegativeArrayIndexBA_B1m_NCIB4A_By_cBpS_cB1m_B3I_NCINvB2l_7map_resBy_yBpS_B1m_NtNtBE_5error15ArrayIndexErrorNCIBrj_By_By_yB1m_NtNtNtBcP_3num5error13ParseIntErrorNCIBrj_By_By_By_B1m_BrJ_INvB3N_6digit1By_B1m_ENCNvBC_26length_limited_array_index0E0INvMNtBcP_3stre5parseyEE0NvYyINtBlS_7TryIntoBpS_E8try_intoE0B3I_E0NcNtBA_15ArrayIndexChild0E0NCIB2j_By_cBA_B1m_NCIB3a_By_By_cB1m_Bkt_NCIB1N_By_cB1m_TB3I_B4x_EE0E0NCNvBC_28wildcard_descendant_selector0E0NCIB3a_By_By_BA_B1m_Bkt_NCIB1N_By_BA_B1m_TNCIB2j_By_B60_BA_B1m_NCIB1N_By_B60_B1m_TB76_Bbv_EE0NcNtBA_10Descendant0E0NCIB2j_By_BpS_BA_B1m_BqS_NcNtBA_20ArrayIndexDescendant0E0EE0E0EE0EBG_:
   53|    505|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|    505|where
   55|    505|  I: Clone + InputLength,
   56|    505|  F: Parser<I, O, E>,
   57|    505|  E: ParseError<I>,
   58|    505|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|    505|}
_RNCINvNtCsgRMR9ooWG6a_3nom5multi5many0ReNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBA_ENCINvNtB6_6branch3altBA_BC_B1o_TNCINvNtB6_10combinator3mapBA_cBC_B1o_NCIB1P_BA_cB1o_TNCINvNtB6_8sequence8precededBA_ccB1o_NCINvNtNtB6_9character8complete4charBA_B1o_E0B3K_E0NCINvB3e_9delimitedBA_cccB1o_B3K_B3K_B3K_E0EE0NCNvBE_23wildcard_child_selector0E0NCIB2l_BA_NtBE_12MemberStringBC_B1o_NCIB1P_BA_B62_B1o_TNCIB3c_BA_cB62_B1o_B3K_NCIB2l_BA_BA_B62_B1o_NCINvB2n_9recognizeBA_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1o_NCINvB3e_4pairBA_cB7R_B1o_NCINvB2n_6verifyBA_ccB1o_INvB3P_7anycharBA_B1o_ENCNvBE_12member_first0E0NCIB2_BA_cB1o_NCIB8Y_BA_ccB1o_B9k_NCNvBE_16member_character0E0E0E0E0NcNtB62_8Borrowed0E0E0NCIB4C_BA_cB62_cB1o_B3K_NCIB1P_BA_B62_B1o_TNCIB4C_BA_cB62_cB1o_B3K_NCIB2l_BA_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB7W_6string6StringEB62_B1o_NCINvB2n_3optBA_Bdo_B1o_NCINvNtNtB6_5bytes8complete17escaped_transformBA_B1o_NCIB2l_BA_IB7S_NtBE_16MaybeEscapedCharENtBE_19MaybeEscapedCharVecB1o_NCINvB4_5many1BA_Bfn_B1o_NCIB1P_BA_Bfn_B1o_TNCIB2l_BA_cBfn_B1o_NCIB8Y_BA_ccB1o_NCINvB3P_7none_ofBA_BA_B1o_E0NCNvBE_9unescaped0E0NcNtBfn_4Char0E0NCIB2l_BA_cBfn_B1o_B3K_NcNtBfn_7Escaped0E0EE0E0NcBfL_0E0NCIB1P_BA_BA_B1o_TNCIB1P_BA_BA_B1o_TNCINvB2n_5valueBA_BA_BA_B1o_NCINvBem_3tagBA_BA_B1o_E0E0Bk3_Bk3_Bk3_Bk3_Bk3_Bk3_EE0Bk3_EE0BfL_BA_cBdo_E0E0NvYB62_INtNtBcR_7convert4FromBcM_E4fromE0B3K_E0NCIB4C_BA_cB62_cB1o_B3K_NCIB2l_BA_BcM_B62_B1o_NCIBdW_BA_Bdo_B1o_NCIBek_BA_B1o_NCIB7w_BA_B7R_B1o_NCIBgi_BA_cB1o_NCIB1P_BA_cB1o_TBhg_B3K_EE0E0E0Bjt_BA_BA_cBdo_E0E0BlK_E0B3K_E0EE0B3K_E0EE0NcNtBC_5Child0E0NCIB2l_BA_NtNtBG_23nonnegative_array_index21NonNegativeArrayIndexBC_B1o_NCIB4C_BA_cBpU_cB1o_B3K_NCINvB2n_7map_resBA_yBpU_B1o_NtNtBG_5error15ArrayIndexErrorNCIBrl_BA_BA_yB1o_NtNtNtBcR_3num5error13ParseIntErrorNCIBrl_BA_BA_BA_B1o_BrL_INvB3P_6digit1BA_B1o_ENCNvBE_26length_limited_array_index0E0INvMNtBcR_3stre5parseyEE0NvYyINtBlU_7TryIntoBpU_E8try_intoE0B3K_E0NcNtBC_15ArrayIndexChild0E0NCIB2l_BA_cBC_B1o_NCIB3c_BA_BA_cB1o_Bkv_NCIB1P_BA_cB1o_TB3K_B4z_EE0E0NCNvBE_28wildcard_descendant_selector0E0NCIB3c_BA_BA_BC_B1o_Bkv_NCIB1P_BA_BC_B1o_TNCIB2l_BA_B62_BC_B1o_NCIB1P_BA_B62_B1o_TB78_Bbx_EE0NcNtBC_10Descendant0E0NCIB2l_BA_BpU_BC_B1o_BqU_NcNtBC_20ArrayIndexDescendant0E0EE0E0EE0E0BI_:
   59|    505|  move |mut i: I| {
   60|    505|    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|  1.01k|    loop {
   62|  1.01k|      let len = i.input_len();
   63|  1.01k|      match f.parse(i.clone()) {
   64|    505|        Err(Err::Error(_)) => return Ok((i, acc)),
   65|      0|        Err(e) => return Err(e),
   66|    505|        Ok((i1, o)) => {
   67|    505|          // infinite loop check: the parser must always consume
   68|    505|          if i1.input_len() == len {
   69|      0|            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|    505|          }
   71|    505|
   72|    505|          i = i1;
   73|    505|          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom5multi5many0RecINtNtB4_5error5ErrorBy_ENCINvNtB4_10combinator6verifyBy_ccBB_INvNtNtB4_9character8complete7anycharBy_BB_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16member_character0E0EB2q_:
   53|  1.01k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|  1.01k|where
   55|  1.01k|  I: Clone + InputLength,
   56|  1.01k|  F: Parser<I, O, E>,
   57|  1.01k|  E: ParseError<I>,
   58|  1.01k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|  1.01k|}

_RINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_6branch3altBF_BI_B1D_TNCIB0_BF_cBI_cB1D_B21_NCINvNtB4_10combinator3mapBF_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEBI_B1D_NCINvB3H_3optBF_B4H_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCIB3F_BF_INtNtB4L_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1D_NCINvNtB4_5multi5many1BF_B77_B1D_NCIB2N_BF_B77_B1D_TNCIB3F_BF_cB77_B1D_NCINvB3H_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0NcNtB77_4Char0E0NCIB3F_BF_cB77_B1D_B21_NcNtB77_7Escaped0E0EE0E0NcB7v_0E0NCIB2N_BF_BF_B1D_TNCIB2N_BF_BF_B1D_TNCINvB3H_5valueBF_BF_BF_B1D_NCINvB5U_3tagBF_BF_B1D_E0E0Bc4_Bc4_Bc4_Bc4_Bc4_Bc4_EE0Bc4_EE0B7v_BF_cB4H_E0E0NvYBI_INtNtB4a_7convert4FromB45_E4fromE0B21_E0NCIB0_BF_cBI_cB1D_B21_NCIB3F_BF_B45_BI_B1D_NCIB5u_BF_B4H_B1D_NCIB5S_BF_B1D_NCINvB3H_9recognizeBF_IB6R_cEB1D_NCIB82_BF_cB1D_NCIB2N_BF_cB1D_TB98_B21_EE0E0E0Bbu_BF_BF_cB4H_E0E0BdL_E0B21_E0EE0B21_EBO_:
  172|  1.01k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.01k|  mut first: F,
  174|  1.01k|  mut second: G,
  175|  1.01k|  mut third: H,
  176|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.01k|where
  178|  1.01k|  F: Parser<I, O1, E>,
  179|  1.01k|  G: Parser<I, O2, E>,
  180|  1.01k|  H: Parser<I, O3, E>,
  181|  1.01k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_10combinator3mapBF_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEBI_B1D_NCINvB2P_3optBF_B3P_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCIB2N_BF_INtNtB3T_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1D_NCINvNtB4_5multi5many1BF_B6f_B1D_NCINvNtB4_6branch3altBF_B6f_B1D_TNCIB2N_BF_cB6f_B1D_NCINvB2P_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0NcNtB6f_4Char0E0NCIB2N_BF_cB6f_B1D_B21_NcNtB6f_7Escaped0E0EE0E0NcB6D_0E0NCIB7H_BF_BF_B1D_TNCIB7H_BF_BF_B1D_TNCINvB2P_5valueBF_BF_BF_B1D_NCINvB52_3tagBF_BF_B1D_E0E0Bbq_Bbq_Bbq_Bbq_Bbq_Bbq_EE0Bbq_EE0B6D_BF_cB3P_E0E0NvYBI_INtNtB3i_7convert4FromB3d_E4fromE0B21_EBO_:
  172|  1.01k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.01k|  mut first: F,
  174|  1.01k|  mut second: G,
  175|  1.01k|  mut third: H,
  176|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.01k|where
  178|  1.01k|  F: Parser<I, O1, E>,
  179|  1.01k|  G: Parser<I, O2, E>,
  180|  1.01k|  H: Parser<I, O3, E>,
  181|  1.01k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.01k|}
_RINvNtCsgRMR9ooWG6a_3nom8sequence8precededReccINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_BI_E0B16_ECs5PViJFkd9Wt_8rsonpath:
   63|    505|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    505|  mut first: F,
   65|    505|  mut second: G,
   66|    505|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    505|where
   68|    505|  F: Parser<I, O1, E>,
   69|    505|  G: Parser<I, O2, E>,
   70|    505|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    505|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence4pairRecINtNtCsdNMYO4au7V3_5alloc3vec3VeccEINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator6verifyBC_ccB1e_INvNtNtB6_9character8complete7anycharBC_B1e_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BC_cB1e_NCIB1F_BC_ccB1e_B2e_NCNvB31_16member_character0E0E0E0B35_:
   37|    505|  move |input: I| {
   38|    505|    let (input, o1) = first.parse(input)?;
   39|      0|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|    505|  }
_RINvNtCsgRMR9ooWG6a_3nom8sequence8precededRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1B_E0NCINvNtB4_10combinator3mapBE_BE_BH_B1B_NCINvB2N_9recognizeBE_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1B_NCINvB2_4pairBE_cB3J_B1B_NCINvB2N_6verifyBE_ccB1B_INvB24_7anycharBE_B1B_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BE_cB1B_NCIB4P_BE_ccB1B_B5b_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0E0EBN_:
   63|    505|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    505|  mut first: F,
   65|    505|  mut second: G,
   66|    505|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    505|where
   68|    505|  F: Parser<I, O1, E>,
   69|    505|  G: Parser<I, O2, E>,
   70|    505|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    505|}
_RINvNtCsgRMR9ooWG6a_3nom8sequence4pairRecINtNtCsdNMYO4au7V3_5alloc3vec3VeccEINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator6verifyBA_ccB1c_INvNtNtB4_9character8complete7anycharBA_B1c_ENCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0BA_cB1c_NCIB1D_BA_ccB1c_B2c_NCNvB2Z_16member_character0E0E0EB33_:
   29|  1.01k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|  1.01k|  mut first: F,
   31|  1.01k|  mut second: G,
   32|  1.01k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|  1.01k|where
   34|  1.01k|  F: Parser<I, O1, E>,
   35|  1.01k|  G: Parser<I, O2, E>,
   36|  1.01k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence8precededReccINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_BK_E0B18_E0Cs5PViJFkd9Wt_8rsonpath:
   71|  1.01k|  move |input: I| {
   72|  1.01k|    let (input, _) = first.parse(input)?;
   73|    505|    second.parse(input)
   74|  1.01k|  }
_RINvNtCsgRMR9ooWG6a_3nom8sequence8precededReBE_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_B1v_E0NCINvNtB4_6branch3altBE_BJ_B1v_TNCINvNtB4_10combinator3mapBE_NtBL_12MemberStringBJ_B1v_NCIB2D_BE_B3z_B1v_TNCIB39_BE_BE_B3z_B1v_NCINvB3b_9recognizeBE_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1v_NCINvB2_4pairBE_cB51_B1v_NCINvB3b_6verifyBE_ccB1v_INvNtNtB4_9character8complete7anycharBE_B1v_ENCNvBL_12member_first0E0NCINvNtB4_5multi5many0BE_cB1v_NCIB67_BE_ccB1v_B6t_NCNvBL_16member_character0E0E0E0E0NcNtB3z_8Borrowed0E0NCINvB2_9delimitedBE_cB3z_cB1v_NCINvB6w_4charBE_B1v_E0NCIB2D_BE_B3z_B1v_TNCIB9j_BE_cB3z_cB1v_B9L_NCIB39_BE_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB56_6string6StringEB3z_B1v_NCINvB3b_3optBE_BbB_B1v_NCINvB1Y_17escaped_transformBE_B1v_NCIB39_BE_IB52_NtBL_16MaybeEscapedCharENtBL_19MaybeEscapedCharVecB1v_NCINvB7F_5many1BE_Bdi_B1v_NCIB2D_BE_Bdi_B1v_TNCIB39_BE_cBdi_B1v_NCIB67_BE_ccB1v_NCINvB6w_7none_ofBE_BE_B1v_E0NCNvBL_9unescaped0E0NcNtBdi_4Char0E0NCIB39_BE_cBdi_B1v_B9L_NcNtBdi_7Escaped0E0EE0E0NcBdG_0E0NCIB2D_BE_BE_B1v_TNCIB2D_BE_BE_B1v_TNCINvB3b_5valueBE_BE_BE_B1v_B1T_E0BhZ_BhZ_BhZ_BhZ_BhZ_BhZ_EE0BhZ_EE0BdG_BE_cBbB_E0E0NvYB3z_INtNtBb4_7convert4FromBaZ_E4fromE0B9L_E0NCIB9j_BE_cB3z_cB1v_B9L_NCIB39_BE_BaZ_B3z_B1v_NCIBc9_BE_BbB_B1v_NCIBcx_BE_B1v_NCIB4G_BE_B51_B1v_NCIBed_BE_cB1v_NCIB2D_BE_cB1v_TBfc_B9L_EE0E0E0Bhp_BE_BE_cBbB_E0E0Bjl_E0B9L_E0EE0B9L_E0EE0NcNtBJ_10Descendant0E0NCIB39_BE_NtNtBN_23nonnegative_array_index21NonNegativeArrayIndexBJ_B1v_NCIB9j_BE_cBnB_cB1v_B9L_NCINvB3b_7map_resBE_yBnB_B1v_NtNtBN_5error15ArrayIndexErrorNCIBp2_BE_BE_yB1v_NtNtNtBb4_3num5error13ParseIntErrorNCIBp2_BE_BE_BE_B1v_Bps_INvB6w_6digit1BE_B1v_ENCNvBL_26length_limited_array_index0E0INvMNtBb4_3stre5parseyEE0NvYyINtBjv_7TryIntoBnB_E8try_intoE0B9L_E0NcNtBJ_20ArrayIndexDescendant0E0EE0EBP_:
   63|    505|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    505|  mut first: F,
   65|    505|  mut second: G,
   66|    505|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    505|where
   68|    505|  F: Parser<I, O1, E>,
   69|    505|  G: Parser<I, O2, E>,
   70|    505|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    505|}
_RINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B24_E0NCINvNtB4_10combinator7map_resBF_yBI_B24_NtNtBM_5error15ArrayIndexErrorNCIB3e_BF_BF_yB24_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB3e_BF_BF_BF_B24_B3Q_INvB2x_6digit1BF_B24_ENCNvNtBM_6parser26length_limited_array_index0E0INvMNtB4I_3stre5parseyEE0NvYyINtNtB4I_7convert7TryIntoBI_E8try_intoE0B2s_EBO_:
  172|  1.01k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.01k|  mut first: F,
  174|  1.01k|  mut second: G,
  175|  1.01k|  mut third: H,
  176|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.01k|where
  178|  1.01k|  F: Parser<I, O1, E>,
  179|  1.01k|  G: Parser<I, O2, E>,
  180|  1.01k|  H: Parser<I, O3, E>,
  181|  1.01k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence8precededReBG_cINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_BM_E0NCINvNtB6_6branch3altBG_cBM_TNCINvNtNtB6_9character8complete4charBG_BM_E0NCINvB4_9delimitedBG_cccBM_B2j_B2j_B2j_E0EE0E0Cs5PViJFkd9Wt_8rsonpath:
   71|  1.01k|  move |input: I| {
   72|  1.01k|    let (input, _) = first.parse(input)?;
   73|    505|    second.parse(input)
   74|  1.01k|  }
_RINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_BK_E0B18_B18_ECs5PViJFkd9Wt_8rsonpath:
  172|  1.01k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.01k|  mut first: F,
  174|  1.01k|  mut second: G,
  175|  1.01k|  mut third: H,
  176|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.01k|where
  178|  1.01k|  F: Parser<I, O1, E>,
  179|  1.01k|  G: Parser<I, O2, E>,
  180|  1.01k|  H: Parser<I, O3, E>,
  181|  1.01k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecccINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_BM_E0B1a_B1a_E0Cs5PViJFkd9Wt_8rsonpath:
  182|  1.01k|  move |input: I| {
  183|  1.01k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.01k|  }
_RNCNCINvNtCsgRMR9ooWG6a_3nom8sequence4pairReINtNtCsf30vbYEHCOR_4core6option6OptionNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenEINtNtCsdNMYO4au7V3_5alloc3vec3VecB1i_EINtNtB8_5error5ErrorBE_ENCINvNtB8_10combinator3optBE_B1i_B2H_NCINvB3a_3mapBE_cB1i_B2H_NCINvNtNtB8_9character8complete4charBE_B2H_E0NCNvB1k_8jsonpath0E0E0NCINvNtB8_5multi5many0BE_B1i_B2H_NCINvNtB8_6branch3altBE_B1i_B2H_TNCIB3J_BE_cB1i_B2H_NCIB5K_BE_cB2H_TNCINvB6_8precededBE_ccB2H_B45_B45_E0NCINvB6_9delimitedBE_cccB2H_B45_B45_B45_E0EE0NCNvB1k_23wildcard_child_selector0E0NCIB3J_BE_NtB1k_12MemberStringB1i_B2H_NCIB5K_BE_B8Q_B2H_TNCIB6Q_BE_cB8Q_B2H_B45_NCIB3J_BE_BE_B8Q_B2H_NCINvB3a_9recognizeBE_TcIB26_cEEB2H_NCIB4_BE_cBaH_B2H_NCINvB3a_6verifyBE_ccB2H_INvB4a_7anycharBE_B2H_ENCNvB1k_12member_first0E0NCIB5d_BE_cB2H_NCIBbe_BE_ccB2H_BbA_NCNvB1k_16member_character0E0E0E0E0NcNtB8Q_8Borrowed0E0E0NCIB7q_BE_cB8Q_cB2H_B45_NCIB5K_BE_B8Q_B2H_TNCIB7q_BE_cB8Q_cB2H_B45_NCIB3J_BE_IBH_NtNtB2a_6string6StringEB8Q_B2H_NCIB38_BE_Bf9_B2H_NCINvNtNtB8_5bytes8complete17escaped_transformBE_B2H_NCIB3J_BE_IB26_NtB1k_16MaybeEscapedCharENtB1k_19MaybeEscapedCharVecB2H_NCINvB5f_5many1BE_Bh2_B2H_NCIB5K_BE_Bh2_B2H_TNCIB3J_BE_cBh2_B2H_NCIBbe_BE_ccB2H_NCINvB4a_7none_ofBE_BE_B2H_E0NCNvB1k_9unescaped0E0NcNtBh2_4Char0E0NCIB3J_BE_cBh2_B2H_B45_NcNtBh2_7Escaped0E0EE0E0NcBhr_0E0NCIB5K_BE_BE_B2H_TNCIB5K_BE_BE_B2H_TNCINvB3a_5valueBE_BE_BE_B2H_NCINvBg1_3tagBE_BE_B2H_E0E0BlM_BlM_BlM_BlM_BlM_BlM_EE0BlM_EE0Bhr_BE_cBf9_E0E0NvYB8Q_INtNtBL_7convert4FromBf5_E4fromE0B45_E0NCIB7q_BE_cB8Q_cB2H_B45_NCIB3J_BE_Bf5_B8Q_B2H_NCIB38_BE_Bf9_B2H_NCIBfZ_BE_B2H_NCIBam_BE_BaH_B2H_NCIBhZ_BE_cB2H_NCIB5K_BE_cB2H_TBiY_B45_EE0E0E0Blc_BE_BE_cBf9_E0E0Bnt_E0B45_E0EE0B45_E0EE0NcNtB1i_5Child0E0NCIB3J_BE_NtNtB1m_23nonnegative_array_index21NonNegativeArrayIndexB1i_B2H_NCIB7q_BE_cBrD_cB2H_B45_NCINvB3a_7map_resBE_yBrD_B2H_NtNtB1m_5error15ArrayIndexErrorNCIBt6_BE_BE_yB2H_NtNtNtBL_3num5error13ParseIntErrorNCIBt6_BE_BE_BE_B2H_Btw_INvB4a_6digit1BE_B2H_ENCNvB1k_26length_limited_array_index0E0INvMNtBL_3stre5parseyEE0NvYyINtBnD_7TryIntoBrD_E8try_intoE0B45_E0NcNtB1i_15ArrayIndexChild0E0NCIB3J_BE_cB1i_B2H_NCIB6Q_BE_BE_cB2H_Bme_NCIB5K_BE_cB2H_TB45_B7n_EE0E0NCNvB1k_28wildcard_descendant_selector0E0NCIB6Q_BE_BE_B1i_B2H_Bme_NCIB5K_BE_B1i_B2H_TNCIB3J_BE_B8Q_B1i_B2H_NCIB5K_BE_B8Q_B2H_TB9Y_BdQ_EE0NcNtB1i_10Descendant0E0NCIB3J_BE_BrD_B1i_B2H_BsF_NcNtB1i_20ArrayIndexDescendant0E0EE0E0EE0E0E00B1o_:
   39|    505|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
_RINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_10combinator3mapBF_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEBI_B1D_NCINvB2P_3optBF_B3P_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCINvB2P_9recognizeBF_INtNtB3T_3vec3VeccEB1D_NCINvNtB4_5multi5many1BF_cB1D_NCINvNtB4_6branch3altBF_cB1D_TNCINvB2P_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0B21_EE0E0E0NCIB74_BF_BF_B1D_TNCIB74_BF_BF_B1D_TNCINvB2P_5valueBF_BF_BF_B1D_NCINvB52_3tagBF_BF_B1D_E0E0B9s_B9s_B9s_B9s_B9s_B9s_EE0B9s_EE0BF_BF_cB3P_E0E0NvYBI_INtNtB3i_7convert4FromB3d_E4fromE0B21_EBO_:
  172|  1.01k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.01k|  mut first: F,
  174|  1.01k|  mut second: G,
  175|  1.01k|  mut third: H,
  176|  1.01k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.01k|where
  178|  1.01k|  F: Parser<I, O1, E>,
  179|  1.01k|  G: Parser<I, O2, E>,
  180|  1.01k|  H: Parser<I, O3, E>,
  181|  1.01k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.01k|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B26_E0NCINvNtB6_10combinator7map_resBH_yBK_B26_NtNtBO_5error15ArrayIndexErrorNCIB3g_BH_BH_yB26_NtNtNtCsf30vbYEHCOR_4core3num5error13ParseIntErrorNCIB3g_BH_BH_BH_B26_B3S_INvB2z_6digit1BH_B26_ENCNvNtBO_6parser26length_limited_array_index0E0INvMNtB4K_3stre5parseyEE0NvYyINtNtB4K_7convert7TryIntoBK_E8try_intoE0B2u_E0BQ_:
  182|  1.01k|  move |input: I| {
  183|  1.01k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.01k|  }
_RINvNtCsgRMR9ooWG6a_3nom8sequence4pairReINtNtCsf30vbYEHCOR_4core6option6OptionNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenEINtNtCsdNMYO4au7V3_5alloc3vec3VecB1e_EINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator3optBA_B1e_B2D_NCINvB36_3mapBA_cB1e_B2D_NCINvNtNtB4_9character8complete4charBA_B2D_E0NCNvB1g_8jsonpath0E0E0NCINvNtB4_5multi5many0BA_B1e_B2D_NCINvNtB4_6branch3altBA_B1e_B2D_TNCIB3F_BA_cB1e_B2D_NCIB5G_BA_cB2D_TNCINvB2_8precededBA_ccB2D_B41_B41_E0NCINvB2_9delimitedBA_cccB2D_B41_B41_B41_E0EE0NCNvB1g_23wildcard_child_selector0E0NCIB3F_BA_NtB1g_12MemberStringB1e_B2D_NCIB5G_BA_B8M_B2D_TNCIB6M_BA_cB8M_B2D_B41_NCIB3F_BA_BA_B8M_B2D_NCINvB36_9recognizeBA_TcIB22_cEEB2D_NCIB0_BA_cBaD_B2D_NCINvB36_6verifyBA_ccB2D_INvB46_7anycharBA_B2D_ENCNvB1g_12member_first0E0NCIB59_BA_cB2D_NCIBba_BA_ccB2D_Bbw_NCNvB1g_16member_character0E0E0E0E0NcNtB8M_8Borrowed0E0E0NCIB7m_BA_cB8M_cB2D_B41_NCIB5G_BA_B8M_B2D_TNCIB7m_BA_cB8M_cB2D_B41_NCIB3F_BA_IBD_NtNtB26_6string6StringEB8M_B2D_NCIB34_BA_Bf5_B2D_NCINvNtNtB4_5bytes8complete17escaped_transformBA_B2D_NCIB3F_BA_IB22_NtB1g_16MaybeEscapedCharENtB1g_19MaybeEscapedCharVecB2D_NCINvB5b_5many1BA_BgY_B2D_NCIB5G_BA_BgY_B2D_TNCIB3F_BA_cBgY_B2D_NCIBba_BA_ccB2D_NCINvB46_7none_ofBA_BA_B2D_E0NCNvB1g_9unescaped0E0NcNtBgY_4Char0E0NCIB3F_BA_cBgY_B2D_B41_NcNtBgY_7Escaped0E0EE0E0NcBhn_0E0NCIB5G_BA_BA_B2D_TNCIB5G_BA_BA_B2D_TNCINvB36_5valueBA_BA_BA_B2D_NCINvBfX_3tagBA_BA_B2D_E0E0BlI_BlI_BlI_BlI_BlI_BlI_EE0BlI_EE0Bhn_BA_cBf5_E0E0NvYB8M_INtNtBH_7convert4FromBf1_E4fromE0B41_E0NCIB7m_BA_cB8M_cB2D_B41_NCIB3F_BA_Bf1_B8M_B2D_NCIB34_BA_Bf5_B2D_NCIBfV_BA_B2D_NCIBai_BA_BaD_B2D_NCIBhV_BA_cB2D_NCIB5G_BA_cB2D_TBiU_B41_EE0E0E0Bl8_BA_BA_cBf5_E0E0Bnp_E0B41_E0EE0B41_E0EE0NcNtB1e_5Child0E0NCIB3F_BA_NtNtB1i_23nonnegative_array_index21NonNegativeArrayIndexB1e_B2D_NCIB7m_BA_cBrz_cB2D_B41_NCINvB36_7map_resBA_yBrz_B2D_NtNtB1i_5error15ArrayIndexErrorNCIBt2_BA_BA_yB2D_NtNtNtBH_3num5error13ParseIntErrorNCIBt2_BA_BA_BA_B2D_Bts_INvB46_6digit1BA_B2D_ENCNvB1g_26length_limited_array_index0E0INvMNtBH_3stre5parseyEE0NvYyINtBnz_7TryIntoBrz_E8try_intoE0B41_E0NcNtB1e_15ArrayIndexChild0E0NCIB3F_BA_cB1e_B2D_NCIB6M_BA_BA_cB2D_Bma_NCIB5G_BA_cB2D_TB41_B7j_EE0E0NCNvB1g_28wildcard_descendant_selector0E0NCIB6M_BA_BA_B1e_B2D_Bma_NCIB5G_BA_B1e_B2D_TNCIB3F_BA_B8M_B1e_B2D_NCIB5G_BA_B8M_B2D_TB9U_BdM_EE0NcNtB1e_10Descendant0E0NCIB3F_BA_Brz_B1e_B2D_BsB_NcNtB1e_20ArrayIndexDescendant0E0EE0E0EE0E0EB1k_:
   29|    505|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|    505|  mut first: F,
   31|    505|  mut second: G,
   32|    505|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|    505|where
   34|    505|  F: Parser<I, O1, E>,
   35|    505|  G: Parser<I, O2, E>,
   36|    505|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|    505|}
_RINvNtCsgRMR9ooWG6a_3nom8sequence8precededReBE_cINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BK_E0NCINvNtB4_6branch3altBE_cBK_TNCINvNtNtB4_9character8complete4charBE_BK_E0NCINvB2_9delimitedBE_cccBK_B2h_B2h_B2h_E0EE0ECs5PViJFkd9Wt_8rsonpath:
   63|    505|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    505|  mut first: F,
   65|    505|  mut second: G,
   66|    505|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    505|where
   68|    505|  F: Parser<I, O1, E>,
   69|    505|  G: Parser<I, O2, E>,
   70|    505|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    505|}
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence8precededReBG_NtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_B1x_E0NCINvNtB6_6branch3altBG_BL_B1x_TNCINvNtB6_10combinator3mapBG_NtBN_12MemberStringBL_B1x_NCIB2F_BG_B3B_B1x_TNCIB3b_BG_BG_B3B_B1x_NCINvB3d_9recognizeBG_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1x_NCINvB4_4pairBG_cB53_B1x_NCINvB3d_6verifyBG_ccB1x_INvNtNtB6_9character8complete7anycharBG_B1x_ENCNvBN_12member_first0E0NCINvNtB6_5multi5many0BG_cB1x_NCIB69_BG_ccB1x_B6v_NCNvBN_16member_character0E0E0E0E0NcNtB3B_8Borrowed0E0NCINvB4_9delimitedBG_cB3B_cB1x_NCINvB6y_4charBG_B1x_E0NCIB2F_BG_B3B_B1x_TNCIB9l_BG_cB3B_cB1x_B9N_NCIB3b_BG_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtB58_6string6StringEB3B_B1x_NCINvB3d_3optBG_BbD_B1x_NCINvB20_17escaped_transformBG_B1x_NCIB3b_BG_IB54_NtBN_16MaybeEscapedCharENtBN_19MaybeEscapedCharVecB1x_NCINvB7H_5many1BG_Bdk_B1x_NCIB2F_BG_Bdk_B1x_TNCIB3b_BG_cBdk_B1x_NCIB69_BG_ccB1x_NCINvB6y_7none_ofBG_BG_B1x_E0NCNvBN_9unescaped0E0NcNtBdk_4Char0E0NCIB3b_BG_cBdk_B1x_B9N_NcNtBdk_7Escaped0E0EE0E0NcBdI_0E0NCIB2F_BG_BG_B1x_TNCIB2F_BG_BG_B1x_TNCINvB3d_5valueBG_BG_BG_B1x_B1V_E0Bi1_Bi1_Bi1_Bi1_Bi1_Bi1_EE0Bi1_EE0BdI_BG_cBbD_E0E0NvYB3B_INtNtBb6_7convert4FromBb1_E4fromE0B9N_E0NCIB9l_BG_cB3B_cB1x_B9N_NCIB3b_BG_Bb1_B3B_B1x_NCIBcb_BG_BbD_B1x_NCIBcz_BG_B1x_NCIB4I_BG_B53_B1x_NCIBef_BG_cB1x_NCIB2F_BG_cB1x_TBfe_B9N_EE0E0E0Bhr_BG_BG_cBbD_E0E0Bjn_E0B9N_E0EE0B9N_E0EE0NcNtBL_10Descendant0E0NCIB3b_BG_NtNtBP_23nonnegative_array_index21NonNegativeArrayIndexBL_B1x_NCIB9l_BG_cBnD_cB1x_B9N_NCINvB3d_7map_resBG_yBnD_B1x_NtNtBP_5error15ArrayIndexErrorNCIBp4_BG_BG_yB1x_NtNtNtBb6_3num5error13ParseIntErrorNCIBp4_BG_BG_BG_B1x_Bpu_INvB6y_6digit1BG_B1x_ENCNvBN_26length_limited_array_index0E0INvMNtBb6_3stre5parseyEE0NvYyINtBjx_7TryIntoBnD_E8try_intoE0B9N_E0NcNtBL_20ArrayIndexDescendant0E0EE0E0BR_:
   71|    505|  move |input: I| {
   72|    505|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|    505|  }
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence4pairReINtNtCsf30vbYEHCOR_4core6option6OptionNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser5TokenEINtNtCsdNMYO4au7V3_5alloc3vec3VecB1g_EINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator3optBC_B1g_B2F_NCINvB38_3mapBC_cB1g_B2F_NCINvNtNtB6_9character8complete4charBC_B2F_E0NCNvB1i_8jsonpath0E0E0NCINvNtB6_5multi5many0BC_B1g_B2F_NCINvNtB6_6branch3altBC_B1g_B2F_TNCIB3H_BC_cB1g_B2F_NCIB5I_BC_cB2F_TNCINvB4_8precededBC_ccB2F_B43_B43_E0NCINvB4_9delimitedBC_cccB2F_B43_B43_B43_E0EE0NCNvB1i_23wildcard_child_selector0E0NCIB3H_BC_NtB1i_12MemberStringB1g_B2F_NCIB5I_BC_B8O_B2F_TNCIB6O_BC_cB8O_B2F_B43_NCIB3H_BC_BC_B8O_B2F_NCINvB38_9recognizeBC_TcIB24_cEEB2F_NCIB2_BC_cBaF_B2F_NCINvB38_6verifyBC_ccB2F_INvB48_7anycharBC_B2F_ENCNvB1i_12member_first0E0NCIB5b_BC_cB2F_NCIBbc_BC_ccB2F_Bby_NCNvB1i_16member_character0E0E0E0E0NcNtB8O_8Borrowed0E0E0NCIB7o_BC_cB8O_cB2F_B43_NCIB5I_BC_B8O_B2F_TNCIB7o_BC_cB8O_cB2F_B43_NCIB3H_BC_IBF_NtNtB28_6string6StringEB8O_B2F_NCIB36_BC_Bf7_B2F_NCINvNtNtB6_5bytes8complete17escaped_transformBC_B2F_NCIB3H_BC_IB24_NtB1i_16MaybeEscapedCharENtB1i_19MaybeEscapedCharVecB2F_NCINvB5d_5many1BC_Bh0_B2F_NCIB5I_BC_Bh0_B2F_TNCIB3H_BC_cBh0_B2F_NCIBbc_BC_ccB2F_NCINvB48_7none_ofBC_BC_B2F_E0NCNvB1i_9unescaped0E0NcNtBh0_4Char0E0NCIB3H_BC_cBh0_B2F_B43_NcNtBh0_7Escaped0E0EE0E0NcBhp_0E0NCIB5I_BC_BC_B2F_TNCIB5I_BC_BC_B2F_TNCINvB38_5valueBC_BC_BC_B2F_NCINvBfZ_3tagBC_BC_B2F_E0E0BlK_BlK_BlK_BlK_BlK_BlK_EE0BlK_EE0Bhp_BC_cBf7_E0E0NvYB8O_INtNtBJ_7convert4FromBf3_E4fromE0B43_E0NCIB7o_BC_cB8O_cB2F_B43_NCIB3H_BC_Bf3_B8O_B2F_NCIB36_BC_Bf7_B2F_NCIBfX_BC_B2F_NCIBak_BC_BaF_B2F_NCIBhX_BC_cB2F_NCIB5I_BC_cB2F_TBiW_B43_EE0E0E0Bla_BC_BC_cBf7_E0E0Bnr_E0B43_E0EE0B43_E0EE0NcNtB1g_5Child0E0NCIB3H_BC_NtNtB1k_23nonnegative_array_index21NonNegativeArrayIndexB1g_B2F_NCIB7o_BC_cBrB_cB2F_B43_NCINvB38_7map_resBC_yBrB_B2F_NtNtB1k_5error15ArrayIndexErrorNCIBt4_BC_BC_yB2F_NtNtNtBJ_3num5error13ParseIntErrorNCIBt4_BC_BC_BC_B2F_Btu_INvB48_6digit1BC_B2F_ENCNvB1i_26length_limited_array_index0E0INvMNtBJ_3stre5parseyEE0NvYyINtBnB_7TryIntoBrB_E8try_intoE0B43_E0NcNtB1g_15ArrayIndexChild0E0NCIB3H_BC_cB1g_B2F_NCIB6O_BC_BC_cB2F_Bmc_NCIB5I_BC_cB2F_TB43_B7l_EE0E0NCNvB1i_28wildcard_descendant_selector0E0NCIB6O_BC_BC_B1g_B2F_Bmc_NCIB5I_BC_B1g_B2F_TNCIB3H_BC_B8O_B1g_B2F_NCIB5I_BC_B8O_B2F_TB9W_BdO_EE0NcNtB1g_10Descendant0E0NCIB3H_BC_BrB_B1g_B2F_BsD_NcNtB1g_20ArrayIndexDescendant0E0EE0E0EE0E0E0B1m_:
   37|    505|  move |input: I| {
   38|    505|    let (input, o1) = first.parse(input)?;
   39|    505|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|    505|  }
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence9delimitedRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1F_E0NCINvNtB6_6branch3altBH_BK_B1F_TNCIB2_BH_cBK_cB1F_B23_NCINvNtB6_10combinator3mapBH_INtNtCsf30vbYEHCOR_4core6option6OptionNtNtCsdNMYO4au7V3_5alloc6string6StringEBK_B1F_NCINvB3J_3optBH_B4J_B1F_NCINvNtNtB6_5bytes8complete17escaped_transformBH_B1F_NCIB3H_BH_INtNtB4N_3vec3VecNtBM_16MaybeEscapedCharENtBM_19MaybeEscapedCharVecB1F_NCINvNtB6_5multi5many1BH_B79_B1F_NCIB2P_BH_B79_B1F_TNCIB3H_BH_cB79_B1F_NCINvB3J_6verifyBH_ccB1F_NCINvB28_7none_ofBH_BH_B1F_E0NCNvBM_9unescaped0E0NcNtB79_4Char0E0NCIB3H_BH_cB79_B1F_B23_NcNtB79_7Escaped0E0EE0E0NcB7x_0E0NCIB2P_BH_BH_B1F_TNCIB2P_BH_BH_B1F_TNCINvB3J_5valueBH_BH_BH_B1F_NCINvB5W_3tagBH_BH_B1F_E0E0Bc6_Bc6_Bc6_Bc6_Bc6_Bc6_EE0Bc6_EE0B7x_BH_cB4J_E0E0NvYBK_INtNtB4c_7convert4FromB47_E4fromE0B23_E0NCIB2_BH_cBK_cB1F_B23_NCIB3H_BH_B47_BK_B1F_NCIB5w_BH_B4J_B1F_NCIB5U_BH_B1F_NCINvB3J_9recognizeBH_IB6T_cEB1F_NCIB84_BH_cB1F_NCIB2P_BH_cB1F_TB9a_B23_EE0E0E0Bbw_BH_BH_cB4J_E0E0BdN_E0B23_E0EE0B23_E0BQ_:
  182|  1.01k|  move |input: I| {
  183|  1.01k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.01k|  }
_RNCINvNtCsgRMR9ooWG6a_3nom8sequence8precededRecNtNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_B1D_E0NCINvNtB6_10combinator3mapBG_BG_BJ_B1D_NCINvB2P_9recognizeBG_TcINtNtCsdNMYO4au7V3_5alloc3vec3VeccEEB1D_NCINvB4_4pairBG_cB3L_B1D_NCINvB2P_6verifyBG_ccB1D_INvB26_7anycharBG_B1D_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BG_cB1D_NCIB4R_BG_ccB1D_B5d_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0E0BP_:
   71|  1.01k|  move |input: I| {
   72|  1.01k|    let (input, _) = first.parse(input)?;
   73|    505|    second.parse(input)
   74|  1.01k|  }

_RNvXsf_NtCsgRMR9ooWG6a_3nom6traitsReNtB5_9InputIter12iter_indicesCs5PViJFkd9Wt_8rsonpath:
  382|    505|  fn iter_indices(&self) -> Self::Iter {
  383|    505|    self.char_indices()
  384|    505|  }
_RNvXsn_NtCsgRMR9ooWG6a_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  1.51k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  1.51k|    self.as_bytes().compare(t.as_bytes())
  841|  1.51k|  }
_RNvXsb_NtCsgRMR9ooWG6a_3nom6traitscNtB5_6AsChar7as_charCs5PViJFkd9Wt_8rsonpath:
  241|  4.54k|  fn as_char(self) -> char {
  242|  4.54k|    self
  243|  4.54k|  }
_RNvXsc_NtCsgRMR9ooWG6a_3nom6traitsRcNtB5_6AsChar3lenCs5PViJFkd9Wt_8rsonpath:
  296|  2.02k|  fn len(self) -> usize {
  297|  2.02k|    self.len_utf8()
  298|  2.02k|  }
_RNvXsk_NtCsgRMR9ooWG6a_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  1.51k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  1.51k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  1.51k|
  742|  1.51k|    match pos {
  743|      0|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  1.51k|        if self.len() >= t.len() {
  746|    505|          CompareResult::Ok
  747|       |        } else {
  748|  1.01k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  1.51k|  }
_RNvXs_NtCsgRMR9ooWG6a_3nom6traitsReNtB4_11InputLength9input_lenCs5PViJFkd9Wt_8rsonpath:
   33|  3.03k|  fn input_len(&self) -> usize {
   34|  3.03k|    self.len()
   35|  3.03k|  }
_RNvXsc_NtCsgRMR9ooWG6a_3nom6traitsRcNtB5_6AsChar7as_charCs5PViJFkd9Wt_8rsonpath:
  272|  2.02k|  fn as_char(self) -> char {
  273|  2.02k|    *self
  274|  2.02k|  }
_RNCNvXsk_NtCsgRMR9ooWG6a_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs5PViJFkd9Wt_8rsonpath:
  740|  1.01k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsg_NtCsgRMR9ooWG6a_3nom6traitsReNtB5_9InputTake10take_splitCs5PViJFkd9Wt_8rsonpath:
  424|    505|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|    505|    let (prefix, suffix) = self.split_at(count);
  426|    505|    (suffix, prefix)
  427|    505|  }
_RNvXs5_NtCsgRMR9ooWG6a_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  1.51k|  fn as_bytes(&self) -> &[u8] {
   98|  1.51k|    (*self).as_bytes()
   99|  1.51k|  }
_RNvXsb_NtCsgRMR9ooWG6a_3nom6traitscNtB5_6AsChar8is_alphaCs5PViJFkd9Wt_8rsonpath:
  245|    505|  fn is_alpha(self) -> bool {
  246|    505|    self.is_ascii_alphabetic()
  247|    505|  }
_RNvXsf_NtCsgRMR9ooWG6a_3nom6traitsReNtB5_9InputIter13iter_elementsCs5PViJFkd9Wt_8rsonpath:
  386|  6.56k|  fn iter_elements(&self) -> Self::IterElem {
  387|  6.56k|    self.chars()
  388|  6.56k|  }
_RNvXs24_NtCsgRMR9ooWG6a_3nom6traitsReINtB6_5SliceINtNtNtCsf30vbYEHCOR_4core3ops5range9RangeFromjEE5slice:
 1013|  2.52k|    fn slice(&self, range: $ty) -> Self {
 1014|  2.52k|      &self[range]
 1015|  2.52k|    }

_RNvMs2_NtCs2z0QJU1fwm8_9once_cell3impINtB5_8OnceCellNtNtCsdNMYO4au7V3_5alloc6string6StringE14is_initializedCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   49|    505|    pub(crate) fn is_initialized(&self) -> bool {
   50|    505|        // An `Acquire` load is enough because that makes all the initialization
   51|    505|        // operations visible to us, and, this being a fast path, weaker
   52|    505|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    505|        // `SeqCst` operations on the slow path.
   54|    505|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    505|    }

_RNvMs4_NtCs2z0QJU1fwm8_9once_cell4syncINtB5_8OnceCellNtNtCsdNMYO4au7V3_5alloc6string6StringE3getCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  965|    505|        pub fn get(&self) -> Option<&T> {
  966|    505|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    505|                None
  971|       |            }
  972|    505|        }

_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullNtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFrameE6as_ptrCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2451|  2.87k|    fn as_ptr(self) -> *const T {
 2452|  2.87k|        self.0.as_ptr()
 2453|  2.87k|    }
_RINvCsluo5RPr7p8N_8smallvec12layout_arrayNtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFrameECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  332|     24|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|     24|    let size = mem::size_of::<T>()
  334|     24|        .checked_mul(n)
  335|     24|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|     24|    let align = mem::align_of::<T>();
  337|     24|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|     24|}
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  930|  27.3k|    fn inline_capacity() -> usize {
  931|  27.3k|        if mem::size_of::<A::Item>() > 0 {
  932|  27.3k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  27.3k|    }
_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullNtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFrameE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2447|  2.56k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  2.56k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  2.56k|    }
_RNvXsX_Csluo5RPr7p8N_8smallvecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2412|  63.8k|                fn size() -> usize { $size }
_RNvXsp_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCsf30vbYEHCOR_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2041|  1.51k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.51k|        &mut (&mut **self)[index]
 2043|  1.51k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  930|  63.8k|    fn inline_capacity() -> usize {
  931|  63.8k|        if mem::size_of::<A::Item>() > 0 {
  932|  63.8k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  63.8k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  641|  29.6k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  29.6k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  29.6k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E6inlineCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  641|  2.56k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  2.56k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  2.56k|    }
_RNvXsf_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops5deref5Deref5derefCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1851|  29.6k|    fn deref(&self) -> &[A::Item] {
 1852|  29.6k|        unsafe {
 1853|  29.6k|            let (ptr, len, _) = self.triple();
 1854|  29.6k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  29.6k|        }
 1856|  29.6k|    }
_RNvXsv_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2123|  1.51k|    fn drop(&mut self) {
 2124|  1.51k|        unsafe {
 2125|  1.51k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.51k|            } else {
 2129|  1.51k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.51k|            }
 2131|       |        }
 2132|  1.51k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E8try_growCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1178|     24|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|     24|        unsafe {
 1180|     24|            let unspilled = !self.spilled();
 1181|     24|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|     24|            assert!(new_cap >= len);
 1183|     24|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|     24|            } else if new_cap != cap {
 1192|     24|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|     24|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|     24|                if unspilled {
 1196|     24|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|     24|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|     24|                        .cast();
 1199|     24|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|      0|                    let new_ptr =
 1206|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|      0|                    new_alloc = NonNull::new(new_ptr)
 1208|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|      0|                        .cast();
 1210|       |                }
 1211|     24|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|     24|                self.capacity = new_cap;
 1213|      0|            }
 1214|     24|            Ok(())
 1215|       |        }
 1216|     24|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E3lenCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  956|     48|    pub fn len(&self) -> usize {
  957|     48|        self.triple().1
  958|     48|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E6tripleCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  975|  2.94k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  2.94k|        unsafe {
  977|  2.94k|            if self.spilled() {
  978|    383|                let (ptr, len) = self.data.heap();
  979|    383|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  2.56k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  2.94k|    }
_RNvXsf_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_ENtNtNtCsf30vbYEHCOR_4core3ops5deref5Deref5derefCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1851|  2.87k|    fn deref(&self) -> &[A::Item] {
 1852|  2.87k|        unsafe {
 1853|  2.87k|            let (ptr, len, _) = self.triple();
 1854|  2.87k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  2.87k|        }
 1856|  2.87k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E10inline_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  645|  9.92k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  9.92k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  9.92k|    }
_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullTNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2447|  29.6k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  29.6k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  29.6k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E4heapCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  659|    383|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|    383|        (ConstNonNull(self.heap.0), self.heap.1)
  661|    383|    }
_RINvCsluo5RPr7p8N_8smallvec10infallibleuECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  322|     24|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|     24|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|     24|}
_RNvXs1v_Csluo5RPr7p8N_8smallvecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2412|  27.3k|                fn size() -> usize { $size }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1005|  32.6k|    pub fn spilled(&self) -> bool {
 1006|  32.6k|        self.capacity > Self::inline_capacity()
 1007|  32.6k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E8heap_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  663|  1.47k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  1.47k|        let h = &mut self.heap;
  665|  1.47k|        (h.0, &mut h.1)
  666|  1.47k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1230|     24|    fn reserve_one_unchecked(&mut self) {
 1231|     24|        debug_assert_eq!(self.len(), self.capacity());
 1232|     24|        let new_cap = self.len()
 1233|     24|            .checked_add(1)
 1234|     24|            .and_then(usize::checked_next_power_of_two)
 1235|     24|            .expect("capacity overflow");
 1236|     24|        infallible(self.try_grow(new_cap))
 1237|     24|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E8capacityCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  968|     24|    pub fn capacity(&self) -> usize {
  969|     24|        self.triple().2
  970|     24|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  988|  1.51k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  1.51k|        unsafe {
  990|  1.51k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  1.51k|                (
  995|  1.51k|                    self.data.inline_mut(),
  996|  1.51k|                    &mut self.capacity,
  997|  1.51k|                    Self::inline_capacity(),
  998|  1.51k|                )
  999|       |            }
 1000|       |        }
 1001|  1.51k|    }
_RNvXsv_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_ENtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2123|    505|    fn drop(&mut self) {
 2124|    505|        unsafe {
 2125|    505|            if self.spilled() {
 2126|     24|                let (ptr, &mut len) = self.data.heap_mut();
 2127|     24|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|    481|            } else {
 2129|    481|                ptr::drop_in_place(&mut self[..]);
 2130|    481|            }
 2131|       |        }
 2132|    505|    }
_RNvXsg_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_ENtNtNtCsf30vbYEHCOR_4core3ops5deref8DerefMut9deref_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1861|    481|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|    481|        unsafe {
 1863|    481|            let (ptr, &mut len, _) = self.triple_mut();
 1864|    481|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|    481|        }
 1866|    481|    }
_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullTNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2451|  29.6k|    fn as_ptr(self) -> *const T {
 2452|  29.6k|        self.0.as_ptr()
 2453|  29.6k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  975|  29.6k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  29.6k|        unsafe {
  977|  29.6k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  29.6k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  29.6k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E10triple_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  988|  11.3k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  11.3k|        unsafe {
  990|  11.3k|            if self.spilled() {
  991|  1.42k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  1.42k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  9.92k|                (
  995|  9.92k|                    self.data.inline_mut(),
  996|  9.92k|                    &mut self.capacity,
  997|  9.92k|                    Self::inline_capacity(),
  998|  9.92k|                )
  999|       |            }
 1000|       |        }
 1001|  11.3k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  645|  1.51k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  1.51k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  1.51k|    }
_RNvXsg_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops5deref8DerefMut9deref_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1861|  1.51k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.51k|        unsafe {
 1863|  1.51k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.51k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.51k|        }
 1866|  1.51k|    }
_RNvXsp_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_EINtNtNtCsf30vbYEHCOR_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 2041|    481|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|    481|        &mut (&mut **self)[index]
 2043|    481|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E3popCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1135|  2.84k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  2.84k|        unsafe {
 1137|  2.84k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  2.84k|            let ptr: *const _ = ptr.as_ptr();
 1139|  2.84k|            if *len_ptr == 0 {
 1140|      0|                return None;
 1141|  2.84k|            }
 1142|  2.84k|            let last_index = *len_ptr - 1;
 1143|  2.84k|            *len_ptr = last_index;
 1144|  2.84k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  2.84k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E7spilledCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1005|  14.8k|    pub fn spilled(&self) -> bool {
 1006|  14.8k|        self.capacity > Self::inline_capacity()
 1007|  14.8k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E9from_heapCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  668|     24|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|     24|        SmallVecData { heap: (ptr, len) }
  670|     24|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E4pushCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
 1119|  8.00k|    pub fn push(&mut self, value: A::Item) {
 1120|  8.00k|        unsafe {
 1121|  8.00k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  8.00k|            if *len == cap {
 1123|     24|                self.reserve_one_unchecked();
 1124|     24|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|     24|                ptr = heap_ptr;
 1126|     24|                len = heap_len;
 1127|  7.97k|            }
 1128|  8.00k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  8.00k|            *len += 1;
 1130|  8.00k|        }
 1131|  8.00k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E7spilledBQ_:
 1005|  3.53k|    pub fn spilled(&self) -> bool {
 1006|  3.53k|        self.capacity > Self::inline_capacity()
 1007|  3.53k|    }
_RINvXss_Csluo5RPr7p8N_8smallvecINtB6_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2f_8adapters3map3MapINtCscwFbtJt7RHO_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5c_9Minimizer18process_superstate0EEBQ_:
 2066|  1.01k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2067|  1.01k|        let mut iter = iterable.into_iter();
 2068|  1.01k|        let (lower_size_bound, _) = iter.size_hint();
 2069|  1.01k|        self.reserve(lower_size_bound);
 2070|  1.01k|
 2071|  1.01k|        unsafe {
 2072|  1.01k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2073|  1.01k|            let ptr = ptr.as_ptr();
 2074|  1.01k|            let mut len = SetLenOnDrop::new(len_ptr);
 2075|  1.01k|            while len.get() < cap {
 2076|  1.01k|                if let Some(out) = iter.next() {
 2077|      0|                    ptr::write(ptr.add(len.get()), out);
 2078|      0|                    len.increment_len(1);
 2079|      0|                } else {
 2080|  1.01k|                    return;
 2081|       |                }
 2082|       |            }
 2083|       |        }
 2084|       |
 2085|      0|        for elem in iter {
 2086|      0|            self.push(elem);
 2087|      0|        }
 2088|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7reserveBP_:
 1224|  1.01k|    pub fn reserve(&mut self, additional: usize) {
 1225|  1.01k|        infallible(self.try_reserve(additional))
 1226|  1.01k|    }
_RNvMsO_Csluo5RPr7p8N_8smallvecNtB5_12SetLenOnDrop3getCs5PViJFkd9Wt_8rsonpath:
 2351|  1.01k|    fn get(&self) -> usize {
 2352|  1.01k|        self.local_len
 2353|  1.01k|    }
_RNvXsv_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropBQ_:
 2123|    505|    fn drop(&mut self) {
 2124|    505|        unsafe {
 2125|    505|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|    505|            } else {
 2129|    505|                ptr::drop_in_place(&mut self[..]);
 2130|    505|            }
 2131|       |        }
 2132|    505|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  649|    505|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|    505|        SmallVecData {
  651|    505|            inline: core::mem::ManuallyDrop::new(inline),
  652|    505|        }
  653|    505|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E11from_inlineBV_:
  649|    505|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|    505|        SmallVecData {
  651|    505|            inline: core::mem::ManuallyDrop::new(inline),
  652|    505|        }
  653|    505|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleBP_:
  975|  1.01k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  1.01k|        unsafe {
  977|  1.01k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  1.01k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  1.01k|    }
_RNvXsp_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_EINtNtNtCsf30vbYEHCOR_4core3ops5index8IndexMutNtNtB1Z_5range9RangeFullE9index_mutBQ_:
 2041|    505|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|    505|        &mut (&mut **self)[index]
 2043|    505|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11inline_sizeBP_:
  950|    505|    pub fn inline_size(&self) -> usize {
  951|    505|        Self::inline_capacity()
  952|    505|    }
_RNvXsg_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops5deref8DerefMut9deref_mutBP_:
 1861|  1.01k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.01k|        unsafe {
 1863|  1.01k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.01k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.01k|        }
 1866|  1.01k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutBU_:
  645|  3.03k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  3.03k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  3.03k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E3popBQ_:
 1135|  1.51k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  1.51k|        unsafe {
 1137|  1.51k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  1.51k|            let ptr: *const _ = ptr.as_ptr();
 1139|  1.51k|            if *len_ptr == 0 {
 1140|    505|                return None;
 1141|  1.01k|            }
 1142|  1.01k|            let last_index = *len_ptr - 1;
 1143|  1.01k|            *len_ptr = last_index;
 1144|  1.01k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  1.51k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E11from_inlineBU_:
  649|  2.52k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  2.52k|        SmallVecData {
  651|  2.52k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  2.52k|        }
  653|  2.52k|    }
_RNvMsO_Csluo5RPr7p8N_8smallvecNtB5_12SetLenOnDrop3newCs5PViJFkd9Wt_8rsonpath:
 2343|  1.01k|    fn new(len: &'a mut usize) -> Self {
 2344|  1.01k|        SetLenOnDrop {
 2345|  1.01k|            local_len: *len,
 2346|  1.01k|            len,
 2347|  1.01k|        }
 2348|  1.01k|    }
_RNvXsP_Csluo5RPr7p8N_8smallvecNtB5_12SetLenOnDropNtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropCs5PViJFkd9Wt_8rsonpath:
 2363|  1.01k|    fn drop(&mut self) {
 2364|  1.01k|        *self.len = self.local_len;
 2365|  1.01k|    }
_RNvXsf_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops5deref5Deref5derefBP_:
 1851|  1.01k|    fn deref(&self) -> &[A::Item] {
 1852|  1.01k|        unsafe {
 1853|  1.01k|            let (ptr, len, _) = self.triple();
 1854|  1.01k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  1.01k|        }
 1856|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  930|    505|    fn inline_capacity() -> usize {
  931|    505|        if mem::size_of::<A::Item>() > 0 {
  932|    505|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|    505|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E15inline_capacityBQ_:
  930|  7.07k|    fn inline_capacity() -> usize {
  931|  7.07k|        if mem::size_of::<A::Item>() > 0 {
  932|  7.07k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  7.07k|    }
_RNvXsp_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCsf30vbYEHCOR_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutBP_:
 2041|  1.01k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.01k|        &mut (&mut **self)[index]
 2043|  1.01k|    }
_RINvCsluo5RPr7p8N_8smallvec10infallibleuECs5PViJFkd9Wt_8rsonpath:
  322|  1.01k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|  1.01k|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|  1.01k|}
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutBP_:
  988|  3.03k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  3.03k|        unsafe {
  990|  3.03k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  3.03k|                (
  995|  3.03k|                    self.data.inline_mut(),
  996|  3.03k|                    &mut self.capacity,
  997|  3.03k|                    Self::inline_capacity(),
  998|  3.03k|                )
  999|       |            }
 1000|       |        }
 1001|  3.03k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E4pushBQ_:
 1119|  1.01k|    pub fn push(&mut self, value: A::Item) {
 1120|  1.01k|        unsafe {
 1121|  1.01k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  1.01k|            if *len == cap {
 1123|      0|                self.reserve_one_unchecked();
 1124|      0|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|      0|                ptr = heap_ptr;
 1126|      0|                len = heap_len;
 1127|  1.01k|            }
 1128|  1.01k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  1.01k|            *len += 1;
 1130|  1.01k|        }
 1131|  1.01k|    }
_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullTNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrBT_:
 2451|  1.01k|    fn as_ptr(self) -> *const T {
 2452|  1.01k|        self.0.as_ptr()
 2453|  1.01k|    }
_RINvXsr_Csluo5RPr7p8N_8smallvecINtB6_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2f_8adapters3map3MapINtCscwFbtJt7RHO_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5m_9Minimizer18process_superstate0EEBQ_:
 2058|  1.01k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2059|  1.01k|        let mut v = SmallVec::new();
 2060|  1.01k|        v.extend(iterable);
 2061|  1.01k|        v
 2062|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityBP_:
  930|  9.59k|    fn inline_capacity() -> usize {
  931|  9.59k|        if mem::size_of::<A::Item>() > 0 {
  932|  9.59k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  9.59k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E3newBP_:
  783|  2.52k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  2.52k|        assert!(
  787|  2.52k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  2.52k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  2.52k|        SmallVec {
  791|  2.52k|            capacity: 0,
  792|  2.52k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  2.52k|        }
  794|  2.52k|    }
_RNvXsg_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCsf30vbYEHCOR_4core3ops5deref8DerefMut9deref_mutBQ_:
 1861|    505|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|    505|        unsafe {
 1863|    505|            let (ptr, &mut len, _) = self.triple_mut();
 1864|    505|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|    505|        }
 1866|    505|    }
_RNvXsu_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtCsf30vbYEHCOR_4core7default7Default7defaultBP_:
 2102|  1.01k|    fn default() -> SmallVec<A> {
 2103|  1.01k|        SmallVec::new()
 2104|  1.01k|    }
_RNvMsR_Csluo5RPr7p8N_8smallvecINtB5_12ConstNonNullTNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newBT_:
 2447|  1.01k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  1.01k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  1.01k|    }
_RNvXsv_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropBP_:
 2123|  1.01k|    fn drop(&mut self) {
 2124|  1.01k|        unsafe {
 2125|  1.01k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.01k|            } else {
 2129|  1.01k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.01k|            }
 2131|       |        }
 2132|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  950|    505|    pub fn inline_size(&self) -> usize {
  951|    505|        Self::inline_capacity()
  952|    505|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E11inline_sizeBQ_:
  950|    505|    pub fn inline_size(&self) -> usize {
  951|    505|        Self::inline_capacity()
  952|    505|    }
_RNvXsX_Csluo5RPr7p8N_8smallvecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBB_:
 2412|  7.57k|                fn size() -> usize { $size }
_RNvXs1v_Csluo5RPr7p8N_8smallvecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2412|  1.01k|                fn size() -> usize { $size }
_RNvXsX_Csluo5RPr7p8N_8smallvecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeBA_:
 2412|  12.1k|                fn size() -> usize { $size }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11try_reserveBP_:
 1242|  1.01k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1243|  1.01k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1244|  1.01k|        // calls to it from callers.
 1245|  1.01k|        let (_, &mut len, cap) = self.triple_mut();
 1246|  1.01k|        if cap - len >= additional {
 1247|  1.01k|            return Ok(());
 1248|      0|        }
 1249|      0|        let new_cap = len
 1250|      0|            .checked_add(additional)
 1251|      0|            .and_then(usize::checked_next_power_of_two)
 1252|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1253|      0|        self.try_grow(new_cap)
 1254|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledBP_:
 1005|  5.05k|    pub fn spilled(&self) -> bool {
 1006|  5.05k|        self.capacity > Self::inline_capacity()
 1007|  5.05k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataATNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineBU_:
  641|  1.01k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  1.01k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  1.01k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E10triple_mutBQ_:
  988|  3.03k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  3.03k|        unsafe {
  990|  3.03k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  3.03k|                (
  995|  3.03k|                    self.data.inline_mut(),
  996|  3.03k|                    &mut self.capacity,
  997|  3.03k|                    Self::inline_capacity(),
  998|  3.03k|                )
  999|       |            }
 1000|       |        }
 1001|  3.03k|    }
_RNvMs9_Csluo5RPr7p8N_8smallvecINtB5_12SmallVecDataANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E10inline_mutBV_:
  645|  3.03k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  3.03k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  3.03k|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtCs5PViJFkd9Wt_8rsonpath6engine4main10StackFramej80_E3newBO_:
  783|    505|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|    505|        assert!(
  787|    505|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|    505|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|    505|        SmallVec {
  791|    505|            capacity: 0,
  792|    505|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|    505|        }
  794|    505|    }
_RNvMsc_Csluo5RPr7p8N_8smallvecINtB5_8SmallVecANtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256j2_E3newBQ_:
  783|    505|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|    505|        assert!(
  787|    505|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|    505|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|    505|        SmallVec {
  791|    505|            capacity: 0,
  792|    505|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|    505|        }
  794|    505|    }

_RNvMCscwFbtJt7RHO_10vector_mapINtB2_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBN_:
   60|  1.01k|    pub fn len(&self) -> usize {
   61|  1.01k|        self.keys.len()
   62|  1.01k|    }
_RNvXs9_CscwFbtJt7RHO_10vector_mapINtB5_8IntoIterNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator9size_hintBQ_:
  326|  1.01k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  1.01k|        self.iter.size_hint()
  328|  1.01k|    }
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E13with_capacity0BN_:
   49|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E3new0BN_:
   41|  1.01k|    #[post(ret.len() == 0)]
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BP_:
   49|    505|    #[post(ret.len() == 0)]
_RINvMCscwFbtJt7RHO_10vector_mapINtB3_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBO_:
   83|  1.51k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  1.51k|        self.position(key).is_some()
   85|  1.51k|    }
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BP_:
   41|    505|    #[post(ret.len() == 0)]
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BP_:
   49|    505|    #[post(ret.len() == 0)]
_RINvMCscwFbtJt7RHO_10vector_mapINtB3_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBO_:
   79|  2.02k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  2.02k|        self.keys.iter().position(|k| key == k)
   81|  2.02k|    }
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BP_:
   99|  1.51k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCINvMCscwFbtJt7RHO_10vector_mapINtB5_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BQ_:
   80|  10.1k|        self.keys.iter().position(|k| key == k)
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BP_:
   99|  1.51k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCINvMCscwFbtJt7RHO_10vector_mapINtB5_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BQ_:
   80|  2.52k|        self.keys.iter().position(|k| key == k)
_RNvXs4_CscwFbtJt7RHO_10vector_mapINtB5_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCsf30vbYEHCOR_4core3ops5index5IndexRBI_E5indexBQ_:
  277|  2.02k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  2.02k|        self.get(key).unwrap()
  279|  2.02k|    }
_RNvXs8_CscwFbtJt7RHO_10vector_mapINtB5_6VecMapNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256ENtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect12IntoIterator9into_iterBO_:
  307|  1.01k|    fn into_iter(self) -> Self::IntoIter {
  308|  1.01k|        IntoIter {
  309|  1.01k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  1.01k|        }
  311|  1.01k|    }
_RNvXsr_CscwFbtJt7RHO_10vector_mapINtB5_7IterMutNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4nextBP_:
  494|  1.01k|            fn next(&mut self) -> Option<Self::Item> {
  495|  1.01k|                self.iter.next()
  496|  1.01k|            }
_RNCNCINvMCscwFbtJt7RHO_10vector_mapINtB7_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BS_:
   90|    505|        self.position(key).map(|p| &self.values[p])
_RNCNCINvMCscwFbtJt7RHO_10vector_mapINtB7_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BS_:
   90|  2.02k|        self.position(key).map(|p| &self.values[p])
_RNvXs9_CscwFbtJt7RHO_10vector_mapINtB5_8IntoIterNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4nextBQ_:
  322|  1.01k|    fn next(&mut self) -> Option<(K, V)> {
  323|  1.01k|        self.iter.next()
  324|  1.01k|    }
_RNCNvMCscwFbtJt7RHO_10vector_mapINtB4_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BP_:
   41|    505|    #[post(ret.len() == 0)]
_RINvMCscwFbtJt7RHO_10vector_mapINtB3_6VecMapNtNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBO_:
   79|  5.05k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  5.05k|        self.keys.iter().position(|k| key == k)
   81|  5.05k|    }
_RNvMCscwFbtJt7RHO_10vector_mapINtB2_6VecMapNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E8iter_mutBL_:
  175|  1.01k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  1.01k|        IterMut {
  177|  1.01k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  1.01k|        }
  179|  1.01k|    }
_RNvXs7_CscwFbtJt7RHO_10vector_mapQINtB5_6VecMapNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect12IntoIterator9into_iterBP_:
  299|  1.01k|    fn into_iter(self) -> Self::IntoIter {
  300|  1.01k|        self.iter_mut()
  301|  1.01k|    }

_RNvNtNtNtCs5PViJFkd9Wt_8rsonpath14classification4mask3m6410combine_32Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   52|  9.14k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  9.14k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  9.14k|    }

_RINvMNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   28|  1.91k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   29|  1.91k|        block!(blocks[..64]);
   30|       |
   31|  1.91k|        let (block1, block2) = blocks.halves();
   32|  1.91k|        let classification1 = vector_256::classify_block(block1);
   33|  1.91k|        let classification2 = vector_256::classify_block(block2);
   34|  1.91k|
   35|  1.91k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   36|  1.91k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   37|  1.91k|
   38|  1.91k|        self.internal_classifier.classify(slashes, quotes)
   39|  1.91k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   21|    505|    fn new() -> Self {
   22|    505|        Self {
   23|    505|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   24|    505|        }
   25|    505|    }

_RNvXs0_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEENtBb_16FallibleIterator4nextCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   80|  2.24k|                match self.iter.next()? {
   81|  1.91k|                    Some(block) => {
   82|  1.91k|                        // SAFETY: target_feature invariant
   83|  1.91k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  1.91k|                        let classified_block = QuoteClassifiedBlock {
   85|  1.91k|                            block,
   86|  1.91k|                            within_quotes_mask: mask,
   87|  1.91k|                        };
   88|  1.91k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    328|                    None => Ok(None),
   91|       |                }
   92|  2.24k|            }
_RINvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2H_5MatchEEEECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   20|    505|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|    505|            where
   22|    505|                I: InputBlockIterator<'i, $size>,
   23|    505|            {
   24|    505|                Self::Classifier {
   25|    505|                    iter,
   26|    505|                    classifier: $core::new(),
   27|    505|                    phantom: PhantomData,
   28|    505|                }
   29|    505|            }
_RNvXs1_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1w_yKB2o_E10get_offsetCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  100|  24.2k|            fn get_offset(&self) -> usize {
  101|  24.2k|                self.iter.get_offset() - $size
  102|  24.2k|            }

_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   26|    505|    pub(crate) fn new() -> Self {
   27|    505|        Self { prev_block_mask: 0 }
   28|    505|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  1.91k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  1.91k|        let slash_mask = u8::from(set_slash_mask);
   33|  1.91k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  1.91k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  1.91k|    }
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  1.91k|unsafe fn all_ones128() -> __m128i {
   14|  1.91k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  1.91k|}
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  1.91k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  1.91k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  1.84k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|     70|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|     70|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|     70|            let odd_starts = ODD & starts;
   62|     70|            let even_starts = EVEN & starts;
   63|     70|
   64|     70|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|     70|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|     70|
   67|     70|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|     70|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|     70|
   70|     70|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|     70|
   72|     70|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  1.91k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  1.91k|
   77|  1.91k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  1.91k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  1.91k|
   80|  1.91k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  1.91k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  1.91k|        within_quotes
   93|  1.91k|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  1.91k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  1.91k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  1.91k|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  1.98k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  1.98k|        u64::from(self.prev_block_mask & 0x01)
   46|  1.98k|    }

_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  3.83k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  3.83k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  3.83k|
   20|  3.83k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  3.83k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  3.83k|
   23|  3.83k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  3.83k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  3.83k|
   26|  3.83k|    BlockClassification256 { slashes, quotes }
   27|  3.83k|}
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  3.83k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  3.83k|    _mm256_set1_epi8(b'\\' as i8)
   14|  3.83k|}
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  3.83k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  3.83k|    _mm256_set1_epi8(b'"' as i8)
    9|  3.83k|}

_RINvXs1_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB5l_5MatchEEEECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  380|    505|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  381|    505|    where
  382|    505|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  383|    505|    {
  384|    505|        Q::new(iter)
  385|    505|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  500|    505|    pub(crate) fn fast_popcnt(&self) -> bool {
  501|    505|        self.fast_popcnt
  502|    505|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  343|    505|    pub(crate) fn new() -> Self {
  344|    505|        Self { phantom: PhantomData }
  345|    505|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  492|    505|    pub(crate) fn highest_simd(&self) -> SimdTag {
  493|    505|        self.highest_simd
  494|    505|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath14classification4simd9configureCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  555|    505|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  556|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  557|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  558|    505|    }
  559|       |
  560|       |    cfg_if! {
  561|       |        if #[cfg(not(feature = "simd"))]
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  568|       |        {
  569|    505|            let highest_simd = if is_x86_feature_detected!("avx2") {
  570|    505|                SimdTag::Avx2
  571|      0|            } else if is_x86_feature_detected!("ssse3") {
  572|      0|                SimdTag::Ssse3
  573|      0|            } else if is_x86_feature_detected!("sse2") {
  574|      0|                SimdTag::Sse2
  575|       |            } else {
  576|      0|                SimdTag::Nosimd
  577|       |            };
  578|       |
  579|    505|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  580|    505|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  581|       |        }
  582|       |        else
  583|       |        {
  584|       |            let highest_simd = SimdTag::Nosimd;
  585|       |            let fast_quotes = false;
  586|       |            let fast_popcnt = false;
  587|       |        }
  588|       |    }
  589|       |
  590|    505|    SimdConfiguration {
  591|    505|        highest_simd,
  592|    505|        fast_quotes,
  593|    505|        fast_popcnt,
  594|    505|    }
  595|    505|}
_RNvXs1_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  375|    505|    fn dispatch_tag(self) -> usize {
  376|    505|        TARGET
  377|    505|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  496|    505|    pub(crate) fn fast_quotes(&self) -> bool {
  497|    505|        self.fast_quotes
  498|    505|    }
_RINvXs1_NtNtCs5PViJFkd9Wt_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB5q_5MatchEEEECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  400|    505|    fn classify_structural_characters<'i, I>(
  401|    505|        self,
  402|    505|        iter: Self::QuotesClassifier<'i, I>,
  403|    505|    ) -> Self::StructuralClassifier<'i, I>
  404|    505|    where
  405|    505|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  406|    505|    {
  407|    505|        S::new(iter)
  408|    505|    }

_RNvMNtNtCs5PViJFkd9Wt_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  3.06k|    pub fn is_closing(&self) -> bool {
   96|  3.06k|        matches!(self, Closing(_, _))
   97|  3.06k|    }
_RNvXs5_NtNtCs5PViJFkd9Wt_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   21|  16.4k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  24.1k|    pub fn offset(self, amount: usize) -> Self {
   70|  24.1k|        match self {
   71|  2.87k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  3.65k|            Colon(idx) => Colon(idx + amount),
   73|  8.49k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  9.16k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  24.1k|    }

_RNCNCNvXs1_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBf_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2B_5MatchEEEINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   14|  24.1k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RINvMNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   29|  5.30k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   30|  5.30k|        &mut self,
   31|  5.30k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   32|  5.30k|    ) -> mask_64::StructuralsBlock<B> {
   33|  5.30k|        let (block1, block2) = quote_classified_block.block.halves();
   34|  5.30k|        let classification1 = self.internal_classifier.classify_block(block1);
   35|  5.30k|        let classification2 = self.internal_classifier.classify_block(block2);
   36|  5.30k|
   37|  5.30k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   38|  5.30k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   39|       |
   40|      0|        bin_u64!("structural", structural);
   41|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   42|       |
   43|  5.30k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   44|  5.30k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   21|    505|    fn new() -> Self {
   22|    505|        Self {
   23|    505|            // SAFETY: target feature invariant
   24|    505|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   25|    505|        }
   26|    505|    }

_RNvXs2_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_colons_onCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  167|  1.12k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  1.12k|                if !self.are_colons_on {
  169|  1.12k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  1.12k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  1.12k|
  174|  1.12k|                    self.reclassify(idx);
  175|      0|                }
  176|  1.12k|            }
_RNvXs2_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_colons_offCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  179|  5.27k|            fn turn_colons_off(&mut self) {
  180|  5.27k|                if self.are_colons_on {
  181|  2.10k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  2.10k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  3.16k|                }
  186|  5.27k|            }
_RNvMs0_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   49|  26.4k|            fn current_block_is_spent(&self) -> bool {
   50|  26.4k|                self.block
   51|  26.4k|                    .as_ref()
   52|  26.4k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|  26.4k|            }
_RNvMs0_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   57|  3.46k|                if let Some(block) = self.block.take() {
   58|  3.46k|                    let quote_classified_block = block.quote_classified;
   59|  3.46k|                    let relevant_idx = idx + 1;
   60|  3.46k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  3.46k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  3.39k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  3.39k|                        // SAFETY: target_feature invariant
   68|  3.39k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  3.39k|                        new_block.structural_mask &= mask;
   70|  3.39k|                        self.block = Some(new_block);
   71|     69|                    }
   72|      0|                }
   73|  3.46k|            }
_RNvXs2_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_commas_onCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  145|  6.14k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  6.14k|                if !self.are_commas_on {
  147|  1.15k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  1.15k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  1.15k|
  152|  1.15k|                    self.reclassify(idx);
  153|  4.98k|                }
  154|  6.14k|            }
_RNvXs2_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E25turn_colons_and_commas_onCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  113|  6.09k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  6.09k|                if !self.are_commas_on && !self.are_colons_on {
  115|  1.18k|                    self.are_commas_on = true;
  116|  1.18k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  1.18k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  1.18k|
  121|  1.18k|                    self.reclassify(idx);
  122|  4.90k|                } else if !self.are_commas_on {
  123|    867|                    self.turn_commas_on(idx);
  124|  4.04k|                } else if !self.are_colons_on {
  125|  1.12k|                    self.turn_colons_on(idx);
  126|  2.91k|                }
  127|  6.09k|            }
_RNvXs2_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_commas_offCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  157|  1.84k|            fn turn_commas_off(&mut self) {
  158|  1.84k|                if self.are_commas_on {
  159|  1.84k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  1.84k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|      0|                }
  164|  1.84k|            }
_RINvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2Q_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   21|    505|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|    505|            where
   23|    505|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|    505|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|    505|            {
   26|    505|                Self::Classifier {
   27|    505|                    iter,
   28|    505|                    classifier: $core::new(),
   29|    505|                    block: None,
   30|    505|                    are_commas_on: false,
   31|    505|                    are_colons_on: false,
   32|    505|                }
   33|    505|            }
_RNvXs1_NtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   85|  24.5k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|  26.4k|                while self.current_block_is_spent() {
   87|  2.24k|                    match self.iter.next() {
   88|  1.91k|                        Ok(Some(block)) => {
   89|  1.91k|                            // SAFETY: target_feature invariant
   90|  1.91k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  1.91k|                        }
   92|       |                        Ok(None) => {
   93|    328|                            self.block = None;
   94|    328|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|  24.5k|                Ok(self
  101|  24.5k|                    .block
  102|  24.5k|                    .as_mut()
  103|  24.5k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|  24.5k|            }

_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   29|  24.1k|    pub(crate) fn get_idx(&self) -> u32 {
   30|  24.1k|        self.structural_mask.trailing_zeros()
   31|  24.1k|    }
_RNvXs_NtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4nextCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   38|  24.1k|    fn next(&mut self) -> Option<Structural> {
   39|  24.1k|        let idx = self.get_idx() as usize;
   40|  24.1k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  24.1k|        })
   57|  24.1k|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   24|  25.8k|    pub(crate) fn is_empty(&self) -> bool {
   25|  25.8k|        self.structural_mask == 0
   26|  25.8k|    }
_RNCNvXs_NtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4next0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   40|  24.1k|        (idx < SIZE).then(|| {
   41|  24.1k|            let bit_mask = 1 << idx;
   42|  24.1k|
   43|  24.1k|            self.structural_mask ^= bit_mask;
   44|  24.1k|
   45|  24.1k|            // The last match being a catch-all *is important*.
   46|  24.1k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  24.1k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  24.1k|            match self.quote_classified.block[idx] {
   49|  3.65k|                b':' => Structural::Colon(idx),
   50|  4.25k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  4.24k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  9.16k|                b',' => Structural::Comma(idx),
   53|    388|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  2.48k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  24.1k|        })
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   16|  5.30k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  5.30k|        Self {
   18|  5.30k|            quote_classified: block,
   19|  5.30k|            structural_mask,
   20|  5.30k|        }
   21|  5.30k|    }

_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   74|  2.99k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  2.99k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  2.99k|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   80|  3.23k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  3.23k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  3.23k|    }
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   31|  10.6k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  10.6k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  10.6k|}
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   25|  10.6k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  10.6k|    _mm256_set1_epi8(0x0F)
   27|  10.6k|}
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   49|  4.41k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  4.41k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  4.41k|}
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   55|  1.18k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  1.18k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  1.18k|}
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   86|  1.18k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  1.18k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  1.18k|    }
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   43|  4.17k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  4.17k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  4.17k|}
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   92|  10.6k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  10.6k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  10.6k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  10.6k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  10.6k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  10.6k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  10.6k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  10.6k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  10.6k|
  101|  10.6k|        BlockClassification256 { structural }
  102|  10.6k|    }
_RNvMNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|    505|    pub(crate) unsafe fn new() -> Self {
   67|    505|        Self {
   68|    505|            upper_nibble_mask: upper_nibble_mask(),
   69|    505|        }
   70|    505|    }
_RNvNtNtNtNtCs5PViJFkd9Wt_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|    505|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|    505|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|    505|}

_RNvXs6_NtCs5PViJFkd9Wt_8rsonpath5depthNtB5_5DepthNtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
    9|  20.1k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCs5PViJFkd9Wt_8rsonpath5depthNtB5_5DepthNtNtNtCsf30vbYEHCOR_4core3ops5deref5Deref5derefCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   80|  10.8k|    fn deref(&self) -> &Self::Target {
   81|  10.8k|        &self.0
   82|  10.8k|    }
_RNvXs9_NtCs5PViJFkd9Wt_8rsonpath5depthNtB5_5DepthNtNtCsf30vbYEHCOR_4core3cmp10PartialOrd11partial_cmpCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
    9|  17.7k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXsc_NtCs5PViJFkd9Wt_8rsonpath5depthNtB5_5DepthINtNtNtCsf30vbYEHCOR_4core3ops5arith3AddhE3addB7_:
   40|  8.49k|            fn add(self, rhs: u8) -> Self::Output {
   41|  8.49k|                self.0
   42|  8.49k|                    .checked_add(rhs)
   43|  8.49k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  8.49k|                    .map(Depth)
   45|  8.49k|            }
_RNvXsf_NtCs5PViJFkd9Wt_8rsonpath5depthNtB5_5DepthINtNtNtCsf30vbYEHCOR_4core3ops5arith3SubhE3subB7_:
   56|  2.87k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  2.87k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  2.87k|            }
_RNvMNtCs5PViJFkd9Wt_8rsonpath5depthNtB2_5Depth9decrement:
   28|  2.87k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  2.87k|        *self = (*self - 1)?;
   30|  2.87k|        Ok(())
   31|  2.87k|    }
_RNvMNtCs5PViJFkd9Wt_8rsonpath5depthNtB2_5Depth9increment:
   21|  8.49k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  8.49k|        *self = (*self + 1)?;
   23|  8.49k|        Ok(())
   24|  8.49k|    }

_RNvMNtNtCs5PViJFkd9Wt_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1G_6quotes7avx2_6411ConstructorNtNtNtB1G_10structural7avx2_6411ConstructorNtNtNtB1G_5depth7avx2_6411ConstructorNtNtNtB1G_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   94|    505|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   95|    505|        let initial_state = automaton.initial_state();
   96|    505|        let fallback_state = automaton[initial_state].fallback_state();
   97|    505|        let transitions = automaton[initial_state].transitions();
   98|    505|
   99|    505|        if fallback_state == initial_state && transitions.len() == 1 {
  100|      0|            let (label, target_state) = transitions[0];
  101|       |
  102|      0|            if let Some(member_name) = label.get_member_name() {
  103|      0|                debug!("Automaton starts with a descendant search, using memmem heuristic.");
  104|       |
  105|      0|                return Some(Self {
  106|      0|                    bytes,
  107|      0|                    state: target_state,
  108|      0|                    is_accepting: automaton.is_accepting(target_state),
  109|      0|                    member_name,
  110|      0|                    simd,
  111|      0|                });
  112|      0|            }
  113|    505|        }
  114|       |
  115|    505|        None
  116|    505|    }

_RINvXs_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input5owned10OwnedBytesINtNtCsdNMYO4au7V3_5alloc3vec3VecNtNtB9_6result5MatchEECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  126|    505|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  127|    505|    where
  128|    505|        I: Input,
  129|    505|        S: Sink<Match>,
  130|    505|    {
  131|    505|        let recorder = NodesRecorder::build_recorder(sink);
  132|    505|
  133|    505|        if self.automaton.is_empty_query() {
  134|      0|            return empty_query::match_(input, sink);
  135|    505|        }
  136|    505|
  137|    505|        config_simd!(self.simd => |simd| {
  138|    505|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  139|    505|            executor.run()?;
  140|       |        });
  141|       |
  142|     30|        Ok(())
  143|    505|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB5_10SmallStack4pushCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  637|  8.00k|    fn push(&mut self, value: StackFrame) {
  638|  8.00k|        self.contents.push(value)
  639|  8.00k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  273|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  274|       |
  275|  20.4k|        let index = match hint {
  276|  4.04k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{'])?,
  277|  3.95k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'['])?,
  278|  12.4k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx)?,
  279|       |        }
  280|  20.4k|        .map(|x| x.0);
  281|  20.4k|
  282|  20.4k|        match index {
  283|  20.2k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  284|    168|            None => Err(EngineError::MissingItem()),
  285|       |        }
  286|  20.4k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  215|    505|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  216|    505|        let iter = self.input.iter_blocks(self.recorder);
  217|    505|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  218|    505|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  219|    505|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  220|    505|
  221|    505|        self.run_on_subtree(&mut classifier)?;
  222|       |
  223|    333|        self.verify_subtree_closed()
  224|    505|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  558|  8.49k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  559|  8.49k|        if self.depth == Depth::ZERO {
  560|    495|            None
  561|       |        } else {
  562|  8.00k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  563|       |
  564|  8.00k|            (char == b':').then_some(char_idx)
  565|       |        }
  566|  8.49k|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  628|  2.87k|        if let Some(stack_frame) = self.peek() {
  629|  2.84k|            if depth <= stack_frame.depth {
  630|  2.84k|                return self.contents.pop();
  631|      0|            }
  632|     22|        }
  633|     22|        None
  634|  2.87k|    }
_RNvXNtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   49|    505|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   50|    505|        let automaton = Automaton::new(query)?;
   51|      0|        debug!("DFA:\n {}", automaton);
   52|    505|        let simd = simd::configure();
   53|    505|        log::info!("SIMD configuration:\n {}", simd);
   54|    505|        Ok(MainEngine { automaton, simd })
   55|    505|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  385|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  386|  8.49k|        let mut any_matched = false;
  387|  8.49k|
  388|  8.49k|        let colon_idx = self.find_preceding_colon(idx);
  389|       |
  390|  8.49k|        for &(label, target) in self.automaton[self.state].transitions() {
  391|      0|            match label {
  392|      0|                TransitionLabel::ArrayIndex(i) => {
  393|      0|                    if self.is_list && i.eq(&self.array_count) {
  394|      0|                        any_matched = true;
  395|      0|                        self.transition_to(target, bracket_type);
  396|      0|                        if self.automaton.is_accepting(target) {
  397|      0|                            debug!("Accept {idx}");
  398|      0|                            self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  399|      0|                        }
  400|      0|                        break;
  401|      0|                    }
  402|       |                }
  403|      0|                TransitionLabel::ObjectMember(member_name) => {
  404|      0|                    if let Some(colon_idx) = colon_idx {
  405|      0|                        if self.is_match(colon_idx, member_name)? {
  406|      0|                            any_matched = true;
  407|      0|                            self.transition_to(target, bracket_type);
  408|      0|                            if self.automaton.is_accepting(target) {
  409|      0|                                self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  410|      0|                            }
  411|      0|                            break;
  412|      0|                        }
  413|      0|                    }
  414|       |                }
  415|       |            }
  416|       |        }
  417|       |
  418|  8.49k|        if !any_matched && self.depth != Depth::ZERO {
  419|  8.00k|            let fallback = self.automaton[self.state].fallback_state();
  420|      0|            debug!("Falling back to {fallback}");
  421|       |
  422|  8.00k|            if self.automaton.is_rejecting(fallback) {
  423|      0|                let closing_idx = classifier.skip(bracket_type)?;
  424|      0|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  425|  8.00k|            } else {
  426|  8.00k|                self.transition_to(fallback, bracket_type);
  427|  8.00k|            }
  428|  8.00k|
  429|  8.00k|            if self.automaton.is_accepting(fallback) {
  430|  8.00k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  431|      0|            }
  432|    495|        }
  433|       |
  434|  8.49k|        self.depth
  435|  8.49k|            .increment()
  436|  8.49k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  437|       |
  438|  8.49k|        self.is_list = bracket_type == BracketType::Square;
  439|  8.49k|        let mut needs_commas = false;
  440|  8.49k|
  441|  8.49k|        if self.is_list {
  442|  4.24k|            self.has_any_array_item_transition = self.automaton.has_any_array_item_transition(self.state);
  443|  4.24k|            self.has_any_array_item_transition_to_accepting =
  444|  4.24k|                self.automaton.has_any_array_item_transition_to_accepting(self.state);
  445|  4.24k|
  446|  4.24k|            let fallback = self.automaton[self.state].fallback_state();
  447|  4.24k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  448|       |
  449|  4.24k|            let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  450|       |
  451|  4.24k|            if searching_list {
  452|  4.24k|                needs_commas = true;
  453|  4.24k|                self.array_count = NonNegativeArrayIndex::ZERO;
  454|      0|                debug!("Initialized array count to {}", self.array_count);
  455|       |
  456|  4.24k|                let wants_first_item =
  457|  4.24k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  458|       |
  459|  4.24k|                if wants_first_item {
  460|  4.24k|                    let next = self.input.seek_non_whitespace_forward(idx + 1)?;
  461|       |
  462|  4.24k|                    match next {
  463|  2.97k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  464|  1.19k|                        Some((value_idx, _)) => {
  465|  1.19k|                            self.record_match_detected_at(
  466|  1.19k|                                value_idx,
  467|  1.19k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  468|  1.19k|                            )?;
  469|       |                        }
  470|     77|                        _ => (),
  471|       |                    }
  472|      0|                }
  473|      0|            }
  474|  4.24k|        }
  475|       |
  476|  8.49k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  477|  4.24k|            classifier.turn_colons_and_commas_on(idx);
  478|  4.24k|        } else if needs_commas {
  479|  4.24k|            classifier.turn_colons_off();
  480|  4.24k|            classifier.turn_commas_on(idx);
  481|  4.24k|        } else {
  482|      0|            classifier.turn_colons_and_commas_off();
  483|      0|        }
  484|       |
  485|  8.49k|        Ok(())
  486|  8.49k|    }
_RNCNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  436|      2|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNCNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorKj1_EE12handle_colon0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  324|  3.06k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNCNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  280|  20.2k|        .map(|x| x.0);
_RINvNtNtCs5PViJFkd9Wt_8rsonpath6engine4main14query_executorNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1x_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB2X_6quotes7avx2_6411ConstructorNtNtNtB2X_10structural7avx2_6411ConstructorNtNtNtB2X_5depth7avx2_6411ConstructorNtNtNtB2X_6memmem7avx2_6411ConstructorKj1_EECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  173|    505|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  174|    505|    automaton: &'i Automaton<'q>,
  175|    505|    input: &'i I,
  176|    505|    recorder: &'r R,
  177|    505|    simd: V,
  178|    505|) -> Executor<'i, 'q, 'r, I, R, V>
  179|    505|where
  180|    505|    I: Input,
  181|    505|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  182|    505|{
  183|    505|    Executor {
  184|    505|        depth: Depth::ZERO,
  185|    505|        state: automaton.initial_state(),
  186|    505|        stack: SmallStack::new(),
  187|    505|        automaton,
  188|    505|        input,
  189|    505|        recorder,
  190|    505|        simd,
  191|    505|        next_event: None,
  192|    505|        is_list: false,
  193|    505|        array_count: NonNegativeArrayIndex::ZERO,
  194|    505|        has_any_array_item_transition: false,
  195|    505|        has_any_array_item_transition_to_accepting: false,
  196|    505|    }
  197|    505|}
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB5_10SmallStack4peekCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  622|  2.87k|    fn peek(&mut self) -> Option<StackFrame> {
  623|  2.87k|        self.contents.last().copied()
  624|  2.87k|    }
_RINvNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input5owned10OwnedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB2j_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3J_6quotes7avx2_6411ConstructorNtNtNtB3J_10structural7avx2_6411ConstructorNtNtNtB3J_5depth7avx2_6411ConstructorNtNtNtB3J_6memmem7avx2_6411ConstructorKj1_EECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  234|    505|        {
  235|  24.4k|            loop {
  236|  24.4k|                if eng.next_event.is_none() {
  237|  21.4k|                    eng.next_event = match classifier.next() {
  238|  21.4k|                        Ok(e) => e,
  239|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  240|       |                    };
  241|  3.06k|                }
  242|  24.4k|                if let Some(event) = eng.next_event {
  243|      0|                    debug!("====================");
  244|      0|                    debug!("Event = {:?}", event);
  245|      0|                    debug!("Depth = {:?}", eng.depth);
  246|      0|                    debug!("Stack = {:?}", eng.stack);
  247|      0|                    debug!("State = {:?}", eng.state);
  248|      0|                    debug!("====================");
  249|       |
  250|  24.1k|                    eng.next_event = None;
  251|  24.1k|                    match event {
  252|  3.65k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  253|  9.16k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  254|  8.49k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  255|  2.87k|                        Structural::Closing(_, idx) => {
  256|  2.87k|                            eng.handle_closing(classifier, idx)?;
  257|       |
  258|  2.87k|                            if eng.depth == Depth::ZERO {
  259|     22|                                break;
  260|  2.84k|                            }
  261|       |                        }
  262|       |                    }
  263|       |                } else {
  264|    311|                    break;
  265|       |                }
  266|       |            }
  267|       |
  268|    333|            Ok(())
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  226|    505|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  227|    505|        dispatch_simd!(self.simd; self, classifier =>
  228|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  229|       |        where
  230|       |            'i: 'r,
  231|       |            I: Input,
  232|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  233|       |            V: Simd
  234|       |        {
  235|       |            loop {
  236|       |                if eng.next_event.is_none() {
  237|       |                    eng.next_event = match classifier.next() {
  238|       |                        Ok(e) => e,
  239|       |                        Err(err) => return Err(EngineError::InputError(err)),
  240|       |                    };
  241|       |                }
  242|       |                if let Some(event) = eng.next_event {
  243|       |                    debug!("====================");
  244|       |                    debug!("Event = {:?}", event);
  245|       |                    debug!("Depth = {:?}", eng.depth);
  246|       |                    debug!("Stack = {:?}", eng.stack);
  247|       |                    debug!("State = {:?}", eng.state);
  248|       |                    debug!("====================");
  249|       |
  250|       |                    eng.next_event = None;
  251|       |                    match event {
  252|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  253|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  254|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  255|       |                        Structural::Closing(_, idx) => {
  256|       |                            eng.handle_closing(classifier, idx)?;
  257|       |
  258|       |                            if eng.depth == Depth::ZERO {
  259|       |                                break;
  260|       |                            }
  261|       |                        }
  262|       |                    }
  263|       |                } else {
  264|       |                    break;
  265|       |                }
  266|       |            }
  267|       |
  268|       |            Ok(())
  269|       |        })
  270|    505|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE3runCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  206|    505|    fn run(mut self) -> Result<(), EngineError> {
  207|    505|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  208|    505|
  209|    505|        match mb_head_skip {
  210|      0|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  211|    505|            None => self.run_and_exit(),
  212|       |        }
  213|    505|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  293|      0|        debug!("Colon");
  294|       |
  295|  3.65k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  296|  3.61k|            c == b'{' || c == b'['
  297|       |        } else {
  298|     41|            false
  299|       |        };
  300|       |
  301|  3.65k|        if !is_next_opening {
  302|  3.12k|            let mut any_matched = false;
  303|       |
  304|  3.12k|            for &(label, target) in self.automaton[self.state].transitions() {
  305|      0|                match label {
  306|      0|                    TransitionLabel::ArrayIndex(_) => {}
  307|      0|                    TransitionLabel::ObjectMember(member_name) => {
  308|      0|                        if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  309|      0|                            self.record_match_detected_at(
  310|      0|                                idx + 1,
  311|      0|                                NodeTypeHint::Atomic, /* since is_next_opening is false */
  312|      0|                            )?;
  313|      0|                            any_matched = true;
  314|      0|                            break;
  315|      0|                        }
  316|       |                    }
  317|       |                }
  318|       |            }
  319|  3.12k|            let fallback_state = self.automaton[self.state].fallback_state();
  320|  3.12k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  321|  3.12k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  322|      0|            }
  323|  3.08k|            self.next_event = classifier.next()?;
  324|  3.08k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  325|  3.08k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  326|      0|                if let Some(s) = self.next_event {
  327|      0|                    match s {
  328|      0|                        Structural::Closing(_, idx) => {
  329|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  330|       |                        }
  331|      0|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  332|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  333|       |                    }
  334|      0|                }
  335|      0|                let bracket_type = self.current_node_bracket_type();
  336|      0|                debug!("Skipping unique state from {bracket_type:?}");
  337|      0|                let stop_at = classifier.skip(bracket_type)?;
  338|      0|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  339|  3.08k|            }
  340|    534|        }
  341|       |
  342|  3.61k|        Ok(())
  343|  3.65k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  489|      0|        debug!("Closing, decreasing depth and popping stack.");
  490|       |
  491|  2.87k|        self.depth
  492|  2.87k|            .decrement()
  493|  2.87k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  494|  2.87k|        self.recorder.record_value_terminator(idx, self.depth)?;
  495|       |
  496|  2.87k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  497|  2.84k|            self.state = stack_frame.state;
  498|  2.84k|            self.is_list = stack_frame.is_list;
  499|  2.84k|            self.array_count = stack_frame.array_count;
  500|  2.84k|            self.has_any_array_item_transition = stack_frame.has_any_array_item_transition;
  501|  2.84k|            self.has_any_array_item_transition_to_accepting = stack_frame.has_any_array_item_transition_to_accepting;
  502|       |
  503|      0|            debug!("Restored array count to {}", self.array_count);
  504|       |
  505|  2.84k|            if self.automaton.is_unitary(self.state) {
  506|      0|                let bracket_type = self.current_node_bracket_type();
  507|      0|                debug!("Skipping unique state from {bracket_type:?}");
  508|      0|                let close_idx = classifier.skip(bracket_type)?;
  509|      0|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  510|      0|                return Ok(());
  511|  2.84k|            }
  512|     22|        }
  513|       |
  514|  2.87k|        if self.is_list
  515|  1.02k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  516|      0|                || self.has_any_array_item_transition)
  517|  1.02k|        {
  518|  1.02k|            classifier.turn_commas_on(idx);
  519|  1.84k|        } else {
  520|  1.84k|            classifier.turn_commas_off();
  521|  1.84k|        }
  522|       |
  523|  2.87k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  524|  1.84k|            classifier.turn_colons_and_commas_on(idx);
  525|  1.84k|        } else {
  526|  1.02k|            classifier.turn_colons_off();
  527|  1.02k|        }
  528|       |
  529|  2.87k|        Ok(())
  530|  2.87k|    }
_RNCNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorKj1_EE14handle_closing0Cs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  493|      2|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  346|  9.16k|        self.recorder.record_value_terminator(idx, self.depth)?;
  347|  9.16k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  348|  8.98k|            c == b'{' || c == b'['
  349|       |        } else {
  350|    173|            false
  351|       |        };
  352|       |
  353|  9.16k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  354|  9.16k|
  355|  9.16k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  356|      0|            debug!("Accepting on comma.");
  357|  8.08k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  358|  1.07k|        }
  359|       |
  360|       |        // After wildcard, check for a matching array index.
  361|       |        // If the index increment exceeds the field's limit, give up.
  362|  9.03k|        if self.is_list && self.array_count.try_increment().is_err() {
  363|      0|            return Ok(());
  364|  9.03k|        }
  365|      0|        debug!("Incremented array count to {}", self.array_count);
  366|       |
  367|  9.03k|        let match_index = self
  368|  9.03k|            .automaton
  369|  9.03k|            .has_array_index_transition_to_accepting(self.state, &self.array_count);
  370|  9.03k|
  371|  9.03k|        if self.is_list && !is_next_opening && match_index {
  372|      0|            debug!("Accepting on list item.");
  373|      0|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  374|  9.03k|        }
  375|       |
  376|  9.03k|        Ok(())
  377|  9.16k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  533|  8.00k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  534|  8.00k|        let target_is_list = opening == BracketType::Square;
  535|  8.00k|
  536|  8.00k|        let fallback = self.automaton[self.state].fallback_state();
  537|  8.00k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  538|  8.00k|        let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  539|       |
  540|  8.00k|        if target != self.state || target_is_list != self.is_list || searching_list {
  541|       |            debug!(
  542|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  543|       |                self.state, self.array_count
  544|       |            );
  545|       |
  546|  8.00k|            self.stack.push(StackFrame {
  547|  8.00k|                depth: *self.depth,
  548|  8.00k|                state: self.state,
  549|  8.00k|                is_list: self.is_list,
  550|  8.00k|                array_count: self.array_count,
  551|  8.00k|                has_any_array_item_transition: self.has_any_array_item_transition,
  552|  8.00k|                has_any_array_item_transition_to_accepting: self.has_any_array_item_transition_to_accepting,
  553|  8.00k|            });
  554|  8.00k|            self.state = target;
  555|      0|        }
  556|  8.00k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  584|    333|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  585|    333|        if self.depth != Depth::ZERO {
  586|    303|            Err(EngineError::MissingClosingCharacter())
  587|       |        } else {
  588|     30|            Ok(())
  589|       |        }
  590|    333|    }
_RNvXs3_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCsf30vbYEHCOR_4core7convert4FromNtB5_12NodeTypeHintE4from:
  679|  20.2k|    fn from(value: NodeTypeHint) -> Self {
  680|  20.2k|        match value {
  681|  12.2k|            NodeTypeHint::Atomic => Self::Atomic,
  682|  8.00k|            NodeTypeHint::Complex(_) => Self::Complex,
  683|       |        }
  684|  20.2k|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6engine4mainNtB5_10SmallStack3new:
  617|    505|    fn new() -> Self {
  618|    505|        Self { contents: smallvec![] }
  619|    505|    }

_RNvMNtNtCs5PViJFkd9Wt_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB25_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB3y_10structural7avx2_6416Avx2Classifier64B14_B3r_EINtNtB3y_4simd12ResolvedSimdNtB3u_11ConstructorNtB4D_11ConstructorNtNtNtB3y_5depth7avx2_6411ConstructorNtNtNtB3y_6memmem7avx2_6411ConstructorKj1_EKB1W_E3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   28|    505|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|    505|        Self {
   30|    505|            classifier: Some(classifier),
   31|    505|            simd,
   32|    505|            _phantom: (PhantomData, PhantomData),
   33|    505|        }
   34|    505|    }
_RNvXs0_NtNtCs5PViJFkd9Wt_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB28_5MatchEEEINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB3B_10structural7avx2_6416Avx2Classifier64B17_B3u_EINtNtB3B_4simd12ResolvedSimdNtB3x_11ConstructorNtB4G_11ConstructorNtNtNtB3B_5depth7avx2_6411ConstructorNtNtNtB3B_6memmem7avx2_6411ConstructorKj1_EKB1Z_ENtNtNtCsf30vbYEHCOR_4core3ops5deref8DerefMut9deref_mutCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  138|  42.9k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|  42.9k|        self.classifier
  140|  42.9k|            .as_mut()
  141|  42.9k|            .expect("tail skip must always hold a classifier")
  142|  42.9k|    }

_RNvXNtCs5PViJFkd9Wt_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  166|  7.22k|    fn halves(&self) -> (&[u8], &[u8]) {
  167|  7.22k|        assert_eq!(N % 2, 0);
  168|  7.22k|        (&self[..N / 2], &self[N / 2..])
  169|  7.22k|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5input8in_slice27seek_non_whitespace_forwardCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  233|  29.4k|    pub(super) fn seek_non_whitespace_forward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  234|  29.4k|        let mut idx = from;
  235|  29.4k|
  236|  29.4k|        if idx >= bytes.len() {
  237|      4|            return None;
  238|  29.4k|        }
  239|       |
  240|  86.3k|        loop {
  241|  86.3k|            let b = bytes[idx];
  242|  86.3k|            if !b.is_ascii_whitespace() {
  243|  29.0k|                return Some((idx, b));
  244|  57.3k|            }
  245|  57.3k|            idx += 1;
  246|  57.3k|            if idx == bytes.len() {
  247|    455|                return None;
  248|  56.9k|            }
  249|       |        }
  250|  29.4k|    }
_RINvNtNtCs5PViJFkd9Wt_8rsonpath5input8in_slice12seek_forwardKj1_ECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  212|  8.00k|    pub(super) fn seek_forward<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  213|  8.00k|        assert!(N > 0);
  214|  8.00k|        let mut idx = from;
  215|  8.00k|
  216|  8.00k|        if idx >= bytes.len() {
  217|      0|            return None;
  218|  8.00k|        }
  219|       |
  220|  8.00k|        loop {
  221|  8.00k|            let b = bytes[idx];
  222|  8.00k|            if needles.contains(&b) {
  223|  8.00k|                return Some((idx, b));
  224|      0|            }
  225|      0|            idx += 1;
  226|      0|            if idx == bytes.len() {
  227|      0|                return None;
  228|      0|            }
  229|       |        }
  230|  8.00k|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5input8in_slice28seek_non_whitespace_backwardCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  253|  8.00k|    pub(super) fn seek_non_whitespace_backward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  254|  8.00k|        let mut idx = from;
  255|  8.00k|
  256|  8.00k|        if idx >= bytes.len() {
  257|      0|            return None;
  258|  8.00k|        }
  259|       |
  260|       |        loop {
  261|  9.21k|            let b = bytes[idx];
  262|  9.21k|            if !b.is_ascii_whitespace() {
  263|  8.00k|                return Some((idx, b));
  264|  1.21k|            }
  265|  1.21k|            if idx == 0 {
  266|      0|                return None;
  267|  1.21k|            }
  268|  1.21k|            idx -= 1;
  269|       |        }
  270|  8.00k|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5input8in_slice14pad_last_blockB5_:
  182|    505|    pub(super) fn pad_last_block(bytes: &[u8]) -> LastBlock {
  183|    505|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
  184|    505|        let last_block_start = (bytes.len() / MAX_BLOCK_SIZE) * MAX_BLOCK_SIZE;
  185|    505|        let last_block_slice = &bytes[last_block_start..];
  186|    505|
  187|    505|        last_block_buf[..last_block_slice.len()].copy_from_slice(last_block_slice);
  188|    505|
  189|    505|        LastBlock {
  190|    505|            bytes: last_block_buf,
  191|    505|            absolute_start: last_block_start,
  192|    505|        }
  193|    505|    }

_RNvXs3_NtNtCs5PViJFkd9Wt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1t_5MatchEEEINtB7_18InputBlockIteratorKB1k_E10get_offsetCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  189|      0|        debug!("getting input iter {}", self.idx);
  190|  24.2k|        self.idx
  191|  24.2k|    }
_RNvXs2_NtNtCs5PViJFkd9Wt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1t_5MatchEEENtB9_16FallibleIterator4nextCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  151|      0|        debug!("next!");
  152|       |
  153|  2.24k|        if self.idx >= self.input.len() {
  154|    328|            Ok(None)
  155|  1.91k|        } else if self.idx >= self.last_block.absolute_start {
  156|      0|            let i = self.idx - self.last_block.absolute_start;
  157|      0|            self.idx += N;
  158|      0|            let block = &self.last_block.bytes[i..i + N];
  159|      0|
  160|      0|            self.recorder.record_block_start(block);
  161|      0|
  162|      0|            Ok(Some(block))
  163|       |        } else {
  164|  1.91k|            let block = &self.input[self.idx..self.idx + N];
  165|  1.91k|            self.idx += N;
  166|  1.91k|
  167|  1.91k|            self.recorder.record_block_start(block);
  168|  1.91k|
  169|  1.91k|            Ok(Some(block))
  170|       |        }
  171|  2.24k|    }
_RNvMs0_NtNtCs5PViJFkd9Wt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1t_5MatchEEE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   81|    505|    pub(super) fn new(bytes: &'a [u8], last_block: &'a LastBlock, recorder: &'r R) -> Self {
   82|    505|        Self {
   83|    505|            input: bytes,
   84|    505|            idx: 0,
   85|    505|            last_block,
   86|    505|            recorder,
   87|    505|        }
   88|    505|    }

_RNvXs5_NtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input27seek_non_whitespace_forwardCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  252|  29.4k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, InputError> {
  253|  29.4k|        Ok(in_slice::seek_non_whitespace_forward(self.as_slice(), from))
  254|  29.4k|    }
_RINvXs5_NtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB1t_5MatchEEKj40_ECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  234|    505|    fn iter_blocks<'a, 'r, R, const N: usize>(&'a self, recorder: &'r R) -> Self::BlockIterator<'a, 'r, N, R>
  235|    505|    where
  236|    505|        R: InputRecorder<&'a [u8]>,
  237|    505|    {
  238|    505|        BorrowedBytesBlockIterator::new(self.as_slice(), &self.last_block, recorder)
  239|    505|    }
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB2_10OwnedBytes8as_slice:
   51|  45.9k|    pub fn as_slice(&self) -> &[u8] {
   52|  45.9k|        // SAFETY: Pointer is not null and its validity is an internal invariant.
   53|  45.9k|        unsafe { slice::from_raw_parts(self.bytes_ptr.as_ptr(), self.len) }
   54|  45.9k|    }
_RNvXs5_NtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input28seek_non_whitespace_backwardCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  257|  8.00k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  258|  8.00k|        in_slice::seek_non_whitespace_backward(self.as_slice(), from)
  259|  8.00k|    }
_RINvXs5_NtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input12seek_forwardKj1_ECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  247|  8.00k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, InputError> {
  248|  8.00k|        Ok(in_slice::seek_forward(self.as_slice(), from, needles))
  249|  8.00k|    }
_RNvXs4_NtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB5_10OwnedBytesNtNtNtCsf30vbYEHCOR_4core3ops4drop4Drop4dropCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  205|    505|    fn drop(&mut self) {
  206|    505|        if self.len == 0 {
  207|      0|            return;
  208|    505|        }
  209|    505|
  210|    505|        // This should never happen and if it did it would cause a memory leak.
  211|    505|        #[allow(clippy::expect_used)]
  212|    505|        let layout = Self::get_layout(self.capacity).expect("layout for existing OwnedBytes must never change");
  213|    505|
  214|    505|        // SAFETY:
  215|    505|        // `ptr` is allocated in `new` and layout is constructed using the same function
  216|    505|        // and size.
  217|    505|        // This relies on self.capacity not being mutated ever.
  218|    505|        unsafe { alloc::dealloc(self.bytes_ptr.as_ptr(), layout) }
  219|    505|    }
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB2_10OwnedBytes10get_layout:
  154|  1.01k|    fn get_layout(size: usize) -> Result<alloc::Layout, InputError> {
  155|  1.01k|        alloc::Layout::from_size_align(size, MAX_BLOCK_SIZE).map_err(|_err| InputError::AllocationSizeExceeded)
  156|  1.01k|    }
_RINvMNtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB3_10OwnedBytes3newRShECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   97|    505|    pub fn new<T: AsRef<[u8]>>(src: &T) -> Result<Self, InputError> {
   98|    505|        let slice = src.as_ref();
   99|    505|        let rem = slice.len() % MAX_BLOCK_SIZE;
  100|    505|        let pad = if rem == 0 { 0 } else { MAX_BLOCK_SIZE - rem };
  101|    505|        let size = slice.len() + pad;
  102|    505|
  103|    505|        if size == 0 {
  104|       |            // SAFETY: For len and cap 0 the dangling ptr always works.
  105|      0|            return Ok(unsafe { Self::finalize_new(ptr::NonNull::dangling(), 0, 0) });
  106|    505|        }
  107|       |
  108|       |        // Size overflow check happens in get_layout.
  109|    505|        let layout = Self::get_layout(size)?;
  110|       |
  111|       |        // SAFETY:
  112|       |        // Layout is guaranteed to be of non-zero size at this point.
  113|    505|        let raw_ptr = unsafe { alloc::alloc(layout) };
  114|    505|        let ptr = ptr::NonNull::new(raw_ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));
  115|    505|
  116|    505|        // SAFETY:
  117|    505|        unsafe {
  118|    505|            ptr::copy_nonoverlapping(slice.as_ptr(), ptr.as_ptr(), slice.len());
  119|    505|            ptr::write_bytes(ptr.as_ptr().add(slice.len()), JSON_SPACE_BYTE, pad);
  120|    505|        };
  121|    505|
  122|    505|        // SAFETY: At this point we allocated and initialized exactly `size` bytes.
  123|    505|        Ok(unsafe { Self::finalize_new(ptr, size, size) })
  124|    505|    }
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath5input5ownedNtB2_10OwnedBytes12finalize_new:
   36|    505|    unsafe fn finalize_new(ptr: ptr::NonNull<u8>, len: usize, cap: usize) -> Self {
   37|    505|        let slice = slice::from_raw_parts(ptr.as_ptr(), len);
   38|    505|        let last_block = in_slice::pad_last_block(slice);
   39|    505|
   40|    505|        Self {
   41|    505|            bytes_ptr: ptr,
   42|    505|            len,
   43|    505|            capacity: cap,
   44|    505|            last_block,
   45|    505|        }
   46|    505|    }

_RNvCs5PViJFkd9Wt_8rsonpath18is_json_whitespace:
  357|  6.44k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  358|  6.44k|    JSON_WHITESPACE_BYTES.contains(&x)
  359|  6.44k|}

_RNvMs0_NtCs5PViJFkd9Wt_8rsonpath5queryNtB5_13JsonPathQuery5parse:
  140|    505|    pub fn parse(query_string: &str) -> Result<Self, ParserError> {
  141|    505|        self::parser::parse_json_path_query(query_string)
  142|    505|    }
_RNvMNtCs5PViJFkd9Wt_8rsonpath5queryNtB2_17JsonPathQueryNode4iter:
   89|    505|    pub fn iter(&self) -> JsonPathQueryIterator {
   90|    505|        JsonPathQueryIterator { node: Some(self) }
   91|    505|    }
_RNvMNtCs5PViJFkd9Wt_8rsonpath5queryNtB2_17JsonPathQueryNode5child:
   73|  1.01k|    pub fn child(&self) -> Option<&Self> {
   74|  1.01k|        match self {
   75|    505|            Root(node)
   76|      0|            | Child(_, node)
   77|      0|            | AnyChild(node)
   78|      0|            | Descendant(_, node)
   79|    505|            | AnyDescendant(node)
   80|      0|            | ArrayIndexChild(_, node)
   81|  1.01k|            | ArrayIndexDescendant(_, node) => node.as_deref(),
   82|  1.01k|        }
   83|  1.01k|    }
_RNvXs3_NtCs5PViJFkd9Wt_8rsonpath5queryNtB5_17JsonPathQueryNodeNtB5_21JsonPathQueryNodeType7is_root:
  219|  1.51k|    fn is_root(&self) -> bool {
  220|  1.51k|        matches!(self, Root(_))
  221|  1.51k|    }
_RNvXs_NtCs5PViJFkd9Wt_8rsonpath5queryNtB4_21JsonPathQueryIteratorNtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4nextB6_:
  110|  1.51k|    fn next(&mut self) -> Option<Self::Item> {
  111|  1.51k|        let result = self.node;
  112|       |
  113|  1.51k|        if let Some(node) = result {
  114|  1.01k|            self.node = node.child()
  115|    505|        }
  116|       |
  117|  1.51k|        result
  118|  1.51k|    }
_RNvMs0_NtCs5PViJFkd9Wt_8rsonpath5queryNtB5_13JsonPathQuery3newB7_:
  150|    505|    pub fn new(node: Box<JsonPathQueryNode>) -> Self {
  151|    505|        let root = if node.is_root() {
  152|    505|            node
  153|       |        } else {
  154|      0|            info!("Implicitly using the Root expression (`$`) at the start of the query.");
  155|      0|            Box::new(Root(Some(node)))
  156|       |        };
  157|       |
  158|    505|        Self { root }
  159|    505|    }
_RNvMs0_NtCs5PViJFkd9Wt_8rsonpath5queryNtB5_13JsonPathQuery4root:
  128|  1.01k|    pub fn root(&self) -> &JsonPathQueryNode {
  129|  1.01k|        self.root.as_ref()
  130|  1.01k|    }

_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton42has_any_array_item_transition_to_accepting:
  259|  4.24k|    pub fn has_any_array_item_transition_to_accepting(&self, state: State) -> bool {
  260|  4.24k|        self[state].transitions().iter().any(|t| match t {
  261|       |            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  262|       |            _ => false,
  263|  4.24k|        })
  264|  4.24k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton12is_rejecting:
  349|  8.00k|    pub fn is_rejecting(&self, state: State) -> bool {
  350|  8.00k|        self[state].attributes.is_rejecting()
  351|  8.00k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  310|  9.03k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &NonNegativeArrayIndex) -> bool {
  311|  9.03k|        self[state].transitions().iter().any(|t| match t {
  312|       |            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  313|       |            _ => false,
  314|  9.03k|        })
  315|  9.03k|    }
_RNvXs5_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9AutomatonINtNtNtCsf30vbYEHCOR_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  134|   114k|    fn index(&self, index: State) -> &Self::Output {
  135|   114k|        &self.states[index.0 as usize]
  136|   114k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  148|    505|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  149|    505|        let nfa = NondeterministicAutomaton::new(query)?;
  150|      0|        debug!("NFA: {}", nfa);
  151|    505|        Automaton::minimize(nfa)
  152|    505|    }
_RNvMs7_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_10StateTable11transitions:
  397|  29.6k|    pub fn transitions(&self) -> &[Transition<'q>] {
  398|  29.6k|        &self.transitions
  399|  29.6k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton29has_any_array_item_transition:
  238|  4.24k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  239|  4.24k|        self[state]
  240|  4.24k|            .transitions()
  241|  4.24k|            .iter()
  242|  4.24k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
  243|  4.24k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton27has_transition_to_accepting:
  331|  6.09k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  332|  6.09k|        self[state].attributes.has_transition_to_accepting()
  333|  6.09k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton10is_unitary:
  371|  2.84k|    pub fn is_unitary(&self, state: State) -> bool {
  372|  2.84k|        self[state].attributes.is_unitary()
  373|  2.84k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton14is_empty_query:
  176|    505|    pub fn is_empty_query(&self) -> bool {
  177|    505|        self.states.len() == 2
  178|    505|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton12is_accepting:
  220|  33.5k|    pub fn is_accepting(&self, state: State) -> bool {
  221|  33.5k|        self[state].attributes.is_accepting()
  222|  33.5k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton13initial_state:
  202|  1.01k|    pub fn initial_state(&self) -> State {
  203|  1.01k|        State(1)
  204|  1.01k|    }
_RNvMs7_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_10StateTable14fallback_state:
  387|  34.0k|    pub fn fallback_state(&self) -> State {
  388|  34.0k|        self.fallback_state
  389|  34.0k|    }
_RNvMs6_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_9Automaton8minimize:
  375|    505|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  376|    505|        minimizer::minimize(nfa)
  377|    505|    }
_RNvXs2_NtNtCs5PViJFkd9Wt_8rsonpath5query9automatonNtB5_10StateTableNtNtCsf30vbYEHCOR_4core7default7Default7defaultB9_:
  108|  1.01k|    fn default() -> Self {
  109|  1.01k|        Self {
  110|  1.01k|            attributes: StateAttributes::default(),
  111|  1.01k|            transitions: Default::default(),
  112|  1.01k|            fallback_state: State(0),
  113|  1.01k|        }
  114|  1.01k|    }

_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  204|  1.01k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  205|    505|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  206|    505|                return Some(single_state);
  207|      0|            }
  208|    505|        }
  209|       |
  210|    505|        None
  211|  1.01k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  193|  1.01k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  194|    505|            self.checkpoints.insert(superstate, nfa_state);
  195|    505|            Some(nfa_state)
  196|       |        } else {
  197|    505|            self.checkpoints.get(&superstate).copied()
  198|       |        }
  199|  1.01k|    }
_RNvNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  280|  1.01k|            if let Some(checkpoint) = current_checkpoint {
  281|  1.01k|                state.insert(checkpoint.0);
  282|  1.01k|            }
  283|       |
  284|  1.01k|            this.normalize(state);
  285|  1.01k|            this.activate_if_new(*state)?;
  286|       |
  287|  1.01k|            if let Some(checkpoint) = current_checkpoint {
  288|  1.01k|                this.checkpoints.insert(*state, checkpoint);
  289|  1.01k|            }
  290|       |
  291|  1.01k|            Ok(())
  292|  1.01k|        }
_RNCNCNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Bc_:
  225|  1.01k|                    Some(id.next().map(|x| x.0))
_RNCNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0Ba_:
  223|  1.51k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|  1.01k|                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|    505|                _ => None,
  228|  1.51k|            })
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  106|  1.51k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  107|  1.51k|        if !self.superstates.contains_key(&superstate) {
  108|  1.01k|            let identifier = self
  109|  1.01k|                .superstates
  110|  1.01k|                .len()
  111|  1.01k|                .try_into()
  112|  1.01k|                .map(DfaStateId)
  113|  1.01k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  114|  1.01k|            self.superstates.insert(superstate, identifier);
  115|  1.01k|            self.active_superstates.push(superstate);
  116|  1.01k|            self.dfa_states.push(StateTable::default());
  117|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  118|  1.01k|            if superstate.contains(self.nfa.accepting_state().0) {
  119|    505|                self.accepting.insert(identifier.0);
  120|    505|            }
  121|    505|        }
  122|       |
  123|  1.51k|        Ok(())
  124|  1.51k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  294|  1.01k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  295|  1.01k|        for (_, state) in &mut transitions.labelled {
  296|      0|            normalize_one(self, state, current_checkpoint)?;
  297|       |        }
  298|       |
  299|  1.01k|        Ok(())
  300|  1.01k|    }
_RNvNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizer8minimize:
   17|    505|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   18|    505|    let minimizer = Minimizer {
   19|    505|        nfa,
   20|    505|        superstates: VecMap::new(),
   21|    505|        checkpoints: VecMap::new(),
   22|    505|        active_superstates: smallvec![],
   23|    505|        dfa_states: vec![],
   24|    505|        accepting: SmallSet256::default(),
   25|    505|    };
   26|    505|
   27|    505|    minimizer.run()
   28|    505|}
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer16build_attributes:
  161|  1.01k|    fn build_attributes(
  162|  1.01k|        &self,
  163|  1.01k|        id: DfaStateId,
  164|  1.01k|        transitions: &[(TransitionLabel, DfaStateId)],
  165|  1.01k|        fallback: DfaStateId,
  166|  1.01k|    ) -> StateAttributes {
  167|  1.01k|        let mut attrs = StateAttributesBuilder::new();
  168|  1.01k|
  169|  1.01k|        if self.accepting.contains(id.0) {
  170|      0|            debug!("{id} is accepting");
  171|    505|            attrs = attrs.accepting();
  172|    505|        }
  173|  1.01k|        if id == Self::rejecting_state() {
  174|      0|            debug!("{id} is rejecting");
  175|      0|            attrs = attrs.rejecting();
  176|  1.01k|        }
  177|  1.01k|        if transitions.len() == 1 && fallback == Self::rejecting_state() {
  178|      0|            debug!("{id} is unitary");
  179|      0|            attrs = attrs.unitary();
  180|  1.01k|        }
  181|  1.01k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
  182|      0|            debug!("{id} has transitions to accepting");
  183|  1.01k|            attrs = attrs.transitions_to_accepting();
  184|      0|        }
  185|       |
  186|  1.01k|        attrs.into()
  187|  1.01k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15rejecting_stateB8_:
  100|  2.02k|    fn rejecting_state() -> DfaStateId {
  101|  2.02k|        DfaStateId(0)
  102|  2.02k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  215|  1.01k|    fn process_nfa_transitions(
  216|  1.01k|        &self,
  217|  1.01k|        current_superstate: SmallSet256,
  218|  1.01k|        current_checkpoint: Option<NfaStateId>,
  219|  1.01k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  220|  1.01k|        let mut wildcard_targets = current_superstate
  221|  1.01k|            .iter()
  222|  1.01k|            .map(NfaStateId)
  223|  1.01k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|       |                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|       |                _ => None,
  228|  1.01k|            })
  229|  1.01k|            .collect::<Result<SmallSet256, _>>()?;
  230|  1.01k|        if let Some(checkpoint) = current_checkpoint {
  231|  1.01k|            wildcard_targets.insert(checkpoint.0);
  232|  1.01k|        }
  233|       |
  234|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  235|       |
  236|  1.01k|        let mut transitions = SuperstateTransitionTable {
  237|  1.01k|            labelled: VecMap::new(),
  238|  1.01k|            wildcard: wildcard_targets,
  239|  1.01k|        };
  240|       |
  241|  1.51k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  242|  1.51k|            match self.nfa[nfa_state] {
  243|       |                // Direct states simply have a single transition to the next state in the NFA.
  244|       |                // Recursive transitions also have a self-loop, but that is handled by the
  245|       |                // checkpoints mechanism - here we only handle the forward transition.
  246|      0|                NfaState::Direct(nfa::Transition::Labelled(label))
  247|      0|                | NfaState::Recursive(nfa::Transition::Labelled(label)) => {
  248|      0|                    debug!("Considering transition {nfa_state} --{}-> {}", label, nfa_state.next()?,);
  249|       |                    // Add the target NFA state to the target superstate, or create a singleton
  250|       |                    // set if this is the first transition via this label encountered in the loop.
  251|      0|                    if let Some(target) = transitions.labelled.get_mut(&label) {
  252|      0|                        target.insert(nfa_state.next()?.0);
  253|       |                    } else {
  254|      0|                        let mut new_set = transitions.wildcard;
  255|      0|                        new_set.insert(nfa_state.next()?.0);
  256|      0|                        transitions.labelled.insert(label, new_set);
  257|       |                    }
  258|       |                }
  259|       |                NfaState::Direct(nfa::Transition::Wildcard)
  260|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  261|  1.51k|                | NfaState::Accepting => (),
  262|       |            }
  263|       |        }
  264|       |
  265|  1.01k|        Ok(transitions)
  266|  1.01k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer3run:
   78|    505|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   79|    505|        // Rejecting state has no outgoing transitions except for a self-loop.
   80|    505|        self.dfa_states.push(StateTable {
   81|    505|            transitions: smallvec![],
   82|    505|            fallback_state: Self::rejecting_state(),
   83|    505|            attributes: StateAttributesBuilder::new().rejecting().into(),
   84|    505|        });
   85|    505|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   86|    505|
   87|    505|        // Initial superstate is {0}.
   88|    505|        let initial_superstate = [0].into();
   89|    505|        self.activate_if_new(initial_superstate)?;
   90|       |
   91|  1.51k|        while let Some(superstate) = self.active_superstates.pop() {
   92|  1.01k|            self.process_superstate(superstate)?;
   93|       |        }
   94|       |
   95|    505|        Ok(Automaton {
   96|    505|            states: self.dfa_states,
   97|    505|        })
   98|    505|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer18process_superstate:
  128|  1.01k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  129|  1.01k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  130|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  131|       |
  132|  1.01k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  133|      0|        debug!("Raw transitions: {:?}", transitions);
  134|       |
  135|  1.01k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  136|      0|        debug!("Normalized transitions: {:?}", transitions);
  137|       |
  138|       |        // Translate the transitions to the data model expected by TransitionTable.
  139|  1.01k|        let translated_transitions: SmallVec<_> = transitions
  140|  1.01k|            .labelled
  141|  1.01k|            .into_iter()
  142|  1.01k|            .map(|(label, state)| (label, self.superstates[&state]))
  143|  1.01k|            .collect();
  144|      0|        debug!("Translated transitions: {translated_transitions:?}");
  145|       |
  146|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  147|       |        // Otherwise, we set the fallback to the rejecting state.
  148|  1.01k|        let id = self.superstates[&current_superstate];
  149|  1.01k|        let fallback_state = self.superstates[&transitions.wildcard];
  150|  1.01k|        let attributes = self.build_attributes(id, &translated_transitions, fallback_state);
  151|  1.01k|        let table = &mut self.dfa_states[id.0 as usize];
  152|  1.01k|        table.transitions = translated_transitions;
  153|  1.01k|        table.fallback_state = fallback_state;
  154|  1.01k|        table.attributes = attributes;
  155|  1.01k|
  156|  1.01k|        Ok(())
  157|  1.01k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer9normalize:
  305|  1.01k|    fn normalize(&self, superstate: &mut SmallSet256) {
  306|  1.01k|        let furthest_checkpoint = superstate
  307|  1.01k|            .iter()
  308|  1.01k|            .map(NfaStateId)
  309|  1.01k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  310|  1.01k|            .max();
  311|       |
  312|  1.01k|        if let Some(cutoff) = furthest_checkpoint {
  313|  1.01k|            superstate.remove_all_before(cutoff.0);
  314|  1.01k|        }
  315|  1.01k|    }
_RNCNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer9normalize0Ba_:
  309|  2.02k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))

_RNvMs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
   93|  1.01k|    pub(super) fn accepting_state(&self) -> NfaStateId {
   94|  1.01k|        // CAST: safe because of the check in `new`.
   95|  1.01k|        NfaStateId((self.ordered_states.len() - 1) as u8)
   96|  1.01k|    }
_RNvXs0_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCsf30vbYEHCOR_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  102|  5.55k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  103|  5.55k|        &self.ordered_states[index.0 as usize]
  104|  5.55k|    }
_RNCNvMs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton3nfaNtB6_25NondeterministicAutomaton3new0Bc_:
   69|  1.01k|            .filter_map(|node| match node {
   70|    505|                JsonPathQueryNode::Root(_) => None,
   71|      0|                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|      0|                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|      0|                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|    505|                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|      0|                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|      0|                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|      0|                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  1.01k|            })
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton3nfaNtB2_10NfaStateId4next:
   49|  1.01k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   50|  1.01k|        self.0
   51|  1.01k|            .checked_add(1)
   52|  1.01k|            .ok_or(CompilerError::QueryTooComplex(None))
   53|  1.01k|            .map(Self)
   54|  1.01k|    }
_RNvMs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   63|    505|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   64|    505|        debug_assert!(query.root().is_root());
   65|       |
   66|    505|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   67|    505|            .root()
   68|    505|            .iter()
   69|    505|            .filter_map(|node| match node {
   70|       |                JsonPathQueryNode::Root(_) => None,
   71|       |                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|       |                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|       |                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|       |                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|       |                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|       |                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|       |                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|    505|            })
   80|    505|            .collect();
   81|    505|        let mut states = states_result?;
   82|       |
   83|    505|        states.push(Accepting);
   84|    505|
   85|    505|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
   86|    505|        if let Err(err) = accepting_state {
   87|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
   88|       |        } else {
   89|    505|            Ok(NondeterministicAutomaton { ordered_states: states })
   90|       |        }
   91|    505|    }

_RINvXs6_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBc_:
  189|    505|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|    505|        let mut result = Self::default();
  191|  1.01k|        for elem in iter {
  192|    505|            result.insert(elem);
  193|    505|        }
  194|    505|        result
  195|    505|    }
_RNvXNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB8_:
   73|  3.03k|    fn iter(&self) -> SmallSet256Iter {
   74|  3.03k|        SmallSet256Iter {
   75|  3.03k|            half_1: self.half_1.iter(),
   76|  3.03k|            half_2: self.half_2.iter(),
   77|  3.03k|        }
   78|  3.03k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE4iterBa_:
  122|  6.06k|    fn iter(&self) -> SmallSet128Iter {
  123|  6.06k|        SmallSet128Iter { bitmask: self.bitmask }
  124|  6.06k|    }
_RNvXsa_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCsf30vbYEHCOR_4core7default7Default7defaultBb_:
   37|  2.52k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqBb_:
   37|  12.6k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNCNvXs8_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4next0Bd_:
  214|  3.03k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   65|  3.03k|    fn contains(&self, elem: u8) -> bool {
   66|  3.03k|        if elem < 128 {
   67|  3.03k|            self.half_1.contains(elem)
   68|       |        } else {
   69|      0|            self.half_2.contains(elem - 128)
   70|       |        }
   71|  3.03k|    }
_RNvXsl_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqBb_:
   43|  16.1k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256INtNtCsf30vbYEHCOR_4core7convert4FromAhj1_E4fromBb_:
  155|    505|    fn from(arr: [u8; N]) -> Self {
  156|    505|        Self::from_iter(arr)
  157|    505|    }
_RNvXNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   95|  1.01k|    fn remove_all_before(&mut self, cutoff: u8) {
   96|  1.01k|        if cutoff < 128 {
   97|  1.01k|            self.half_1.remove_all_before(cutoff)
   98|      0|        } else {
   99|      0|            self.half_1.clear();
  100|      0|            self.half_2.remove_all_before(cutoff - 128);
  101|      0|        }
  102|  1.01k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8contains:
  118|  3.03k|    fn contains(&self, elem: u8) -> bool {
  119|  3.03k|        (self.bitmask & (1 << elem)) != 0
  120|  3.03k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8is_emptyBa_:
  110|  2.02k|    fn is_empty(&self) -> bool {
  111|  2.02k|        self.bitmask == 0
  112|  2.02k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE17remove_all_before:
  139|  1.01k|    fn remove_all_before(&mut self, cutoff: u8) {
  140|  1.01k|        let mask: u128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF << cutoff;
  141|  1.01k|        self.bitmask &= mask;
  142|  1.01k|    }
_RNvXNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   57|  4.04k|    fn insert(&mut self, elem: u8) {
   58|  4.04k|        if elem < 128 {
   59|  4.04k|            self.half_1.insert(elem)
   60|       |        } else {
   61|      0|            self.half_2.insert(elem - 128)
   62|       |        }
   63|  4.04k|    }
_RNvXsh_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCsf30vbYEHCOR_4core7default7Default7defaultBb_:
   43|  5.05k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   80|  1.01k|    fn singleton(&self) -> Option<u8> {
   81|  1.01k|        if self.half_1.is_empty() {
   82|      0|            self.half_2.singleton().map(|x| x + 128)
   83|  1.01k|        } else if self.half_2.is_empty() {
   84|  1.01k|            self.half_1.singleton()
   85|       |        } else {
   86|      0|            None
   87|       |        }
   88|  1.01k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE6insert:
  114|  4.04k|    fn insert(&mut self, elem: u8) {
  115|  4.04k|        self.bitmask |= 1 << elem;
  116|  4.04k|    }
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE9singleton:
  126|  1.01k|    fn singleton(&self) -> Option<u8> {
  127|  1.01k|        let elem = self.bitmask.trailing_zeros();
  128|  1.01k|        let elem_mask = 1_u128.wrapping_shl(elem);
  129|  1.01k|        let remainder = self.bitmask ^ elem_mask;
  130|  1.01k|
  131|  1.01k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  132|  1.01k|        (remainder == 0).then_some(elem as u8)
  133|  1.01k|    }
_RNvXs9_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4next:
  225|  11.1k|    fn next(&mut self) -> Option<Self::Item> {
  226|  11.1k|        let next_elem = self.bitmask.trailing_zeros();
  227|  11.1k|
  228|  11.1k|        if next_elem == 128 {
  229|  6.06k|            return None;
  230|  5.05k|        }
  231|  5.05k|
  232|  5.05k|        let elem_mask = 1 << next_elem;
  233|  5.05k|        self.bitmask ^= elem_mask;
  234|  5.05k|
  235|  5.05k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  236|  5.05k|        Some(next_elem as u8)
  237|  11.1k|    }
_RINvXs6_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCsf30vbYEHCOR_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1o_8adapters12GenericShuntINtNtB2w_10filter_map9FilterMapINtNtB2w_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4D_9Minimizer23process_nfa_transitions0EINtNtB1q_6result6ResultNtNtB1q_7convert10InfallibleNtNtBa_5error13CompilerErrorEEEBc_:
  189|  1.01k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  1.01k|        let mut result = Self::default();
  191|  2.02k|        for elem in iter {
  192|  1.01k|            result.insert(elem);
  193|  1.01k|        }
  194|  1.01k|        result
  195|  1.01k|    }
_RNvXs8_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCsf30vbYEHCOR_4core4iter6traits8iterator8Iterator4next:
  213|  8.08k|    fn next(&mut self) -> Option<Self::Item> {
  214|  8.08k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  215|  8.08k|    }

_RNvXsn_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_5StateNtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  137|  8.50k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_rejecting:
  108|  8.00k|    pub fn is_rejecting(&self) -> bool {
  109|  8.00k|        self.is_set(StateAttribute::Rejecting)
  110|  8.00k|    }
_RNvMs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_accepting:
  100|  33.5k|    pub fn is_accepting(&self) -> bool {
  101|  33.5k|        self.is_set(StateAttribute::Accepting)
  102|  33.5k|    }
_RNvMs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributes6is_set:
  131|  50.4k|    fn is_set(&self, attr: StateAttribute) -> bool {
  132|  50.4k|        (self.0 & attr as u8) != 0
  133|  50.4k|    }
_RNvMs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  116|  6.09k|    pub fn has_transition_to_accepting(&self) -> bool {
  117|  6.09k|        self.is_set(StateAttribute::TransitionsToAccepting)
  118|  6.09k|    }
_RNvMs1_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributes10is_unitary:
  125|  2.84k|    pub fn is_unitary(&self) -> bool {
  126|  2.84k|        self.is_set(StateAttribute::Unitary)
  127|  2.84k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder5buildB8_:
   54|  1.51k|    pub(crate) fn build(self) -> StateAttributes {
   55|  1.51k|        self.attrs
   56|  1.51k|    }
_RNvXsj_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_15StateAttributesNtNtCsf30vbYEHCOR_4core7default7Default7defaultBb_:
   28|  1.01k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvXsn_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB5_5StateNtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqBb_:
  137|  1.01k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvXs_NtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB4_15StateAttributesINtNtCsf30vbYEHCOR_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   67|  1.51k|    fn from(value: StateAttributesBuilder) -> Self {
   68|  1.51k|        value.build()
   69|  1.51k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9acceptingB8_:
   38|    505|    pub(crate) fn accepting(self) -> Self {
   39|    505|        self.set(StateAttribute::Accepting)
   40|    505|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3setB8_:
   58|  2.02k|    fn set(self, attr: StateAttribute) -> Self {
   59|  2.02k|        Self {
   60|  2.02k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   61|  2.02k|        }
   62|  2.02k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9rejectingB8_:
   42|    505|    pub(crate) fn rejecting(self) -> Self {
   43|    505|        self.set(StateAttribute::Rejecting)
   44|    505|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3newB8_:
   32|  1.51k|    pub(crate) fn new() -> Self {
   33|  1.51k|        Self {
   34|  1.51k|            attrs: StateAttributes(0),
   35|  1.51k|        }
   36|  1.51k|    }
_RNvMNtNtNtCs5PViJFkd9Wt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB8_:
   50|  1.01k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   51|  1.01k|        self.set(StateAttribute::TransitionsToAccepting)
   52|  1.01k|    }

_RNvMs_NtNtCs5PViJFkd9Wt_8rsonpath5query23nonnegative_array_indexNtB4_21NonNegativeArrayIndex13try_incrementCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   53|  8.31k|    pub fn try_increment(&mut self) -> Result<(), ArrayIndexError> {
   54|  8.31k|        let new_index = self.0 + 1;
   55|  8.31k|        if new_index <= JSON_NUMBER_ULIMIT {
   56|  8.31k|            self.0 = new_index;
   57|  8.31k|            Ok(())
   58|       |        } else {
   59|      0|            Err(ArrayIndexError::ExceedsUpperLimitError(new_index.to_string()))
   60|       |        }
   61|  8.31k|    }

_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser20double_quoted_member:
  285|  1.01k|fn double_quoted_member<'a>() -> impl Parser<'a, String> {
  286|  1.01k|    escaped_transform(
  287|  1.01k|        recognize(many1(alt((unescaped(), char('\''))))),
  288|  1.01k|        '\\',
  289|  1.01k|        // If ["\""] is parsed the string must be \". Same reason as in single_quoted_member.
  290|  1.01k|        alt((escaped(), value("\\\"", tag("\"")))),
  291|  1.01k|    )
  292|  1.01k|}
_RNCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_first0B7_:
  216|    505|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser8jsonpath:
  149|    505|fn jsonpath<'a>() -> impl Parser<'a, (Option<Token<'a>>, Vec<Token<'a>>)> {
  150|    505|    pair(
  151|    505|        opt(map(char('$'), |_| Token::Root)), // root selector
  152|    505|        non_root(),
  153|    505|    )
  154|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser23wildcard_child_selectorB5_:
  166|    505|fn wildcard_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  167|    505|    map(alt((dot_wildcard_selector(), index_wildcard_selector())), |_| {
  168|       |        Token::WildcardChild()
  169|    505|    })
  170|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser19descendant_selector:
  184|    505|fn descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  185|    505|    preceded(
  186|    505|        tag(".."),
  187|    505|        alt((
  188|    505|            map(alt((member(), index_selector())), Token::Descendant),
  189|    505|            array_index_descendant_selector(),
  190|    505|        )),
  191|    505|    )
  192|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser14index_selector:
  200|  1.01k|fn index_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  201|  1.01k|    delimited(char('['), quoted_member(), char(']'))
  202|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser16member_characterB5_:
  219|  1.01k|fn member_character<'a>() -> impl Parser<'a, char> {
  220|  1.01k|    verify(anychar, |&x| x.is_alphanumeric() || x == '_' || !x.is_ascii())
  221|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser18parsed_array_indexB5_:
  239|  1.01k|fn parsed_array_index<'a>() -> impl Parser<'a, u64> {
  240|  1.01k|    map_res(length_limited_array_index(), str::parse)
  241|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser26length_limited_array_indexB5_:
  244|  1.01k|fn length_limited_array_index<'a>() -> impl Parser<'a, &'a str> {
  245|  1.01k|    map_res(digit1, |cs: &str| {
  246|       |        if cs.len() > (ARRAY_INDEX_ULIMIT_BASE_10_DIGIT_COUNT + 1) {
  247|       |            Err(ArrayIndexError::ExceedsUpperLimitError(cs.to_owned()))
  248|       |        } else {
  249|       |            Ok(cs)
  250|       |        }
  251|  1.01k|    })
  252|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser20single_quoted_member:
  269|  1.01k|fn single_quoted_member<'a>() -> impl Parser<'a, String> {
  270|  1.01k|    escaped_transform(
  271|  1.01k|        // If ['"'] is parsed, we want the string to be \", not ", since
  272|  1.01k|        // in a valid JSON document the only way to represent a double quote in a string is with an escape.
  273|  1.01k|        map(
  274|  1.01k|            many1(alt((
  275|  1.01k|                map(unescaped(), MaybeEscapedChar::Char),
  276|  1.01k|                map(char('"'), MaybeEscapedChar::Escaped),
  277|  1.01k|            ))),
  278|  1.01k|            MaybeEscapedCharVec,
  279|  1.01k|        ),
  280|  1.01k|        '\\',
  281|  1.01k|        alt((escaped(), value("'", tag("'")))),
  282|  1.01k|    )
  283|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser6memberB5_:
  208|  1.01k|fn member<'a>() -> impl Parser<'a, MemberString<'a>> {
  209|  1.01k|    map(
  210|  1.01k|        recognize(pair(member_first(), many0(member_character()))),
  211|  1.01k|        MemberString::Borrowed,
  212|  1.01k|    )
  213|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser23nonnegative_array_indexB5_:
  235|  1.01k|fn nonnegative_array_index<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  236|  1.01k|    map_res(parsed_array_index(), TryInto::try_into)
  237|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser7escapedB5_:
  294|  2.02k|fn escaped<'a>() -> impl Parser<'a, &'a str> {
  295|  2.02k|    alt((
  296|  2.02k|        value("\\b", tag("b")),
  297|  2.02k|        value("\\f", tag("f")),
  298|  2.02k|        value("\\n", tag("n")),
  299|  2.02k|        value("\\r", tag("r")),
  300|  2.02k|        value("\\t", tag("t")),
  301|  2.02k|        value("\\\\", tag("\\")),
  302|  2.02k|        value("/", tag("/")),
  303|  2.02k|    ))
  304|  2.02k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser8non_root:
  156|    505|fn non_root<'a>() -> impl Parser<'a, Vec<Token<'a>>> {
  157|    505|    many0(alt((
  158|    505|        wildcard_child_selector(),
  159|    505|        child_selector(),
  160|    505|        array_index_child_selector(),
  161|    505|        wildcard_descendant_selector(),
  162|    505|        descendant_selector(),
  163|    505|    )))
  164|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser14child_selector:
  172|    505|fn child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  173|    505|    map(alt((dot_selector(), index_selector())), Token::Child)
  174|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser28wildcard_descendant_selectorB5_:
  194|    505|fn wildcard_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  195|    505|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|       |        Token::WildcardDescendant()
  197|    505|    })
  198|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser31array_index_descendant_selectorB5_:
  227|    505|fn array_index_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  228|    505|    map(array_index_selector(), Token::ArrayIndexDescendant)
  229|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser26array_index_child_selectorB5_:
  223|    505|fn array_index_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  224|    505|    map(array_index_selector(), Token::ArrayIndexChild)
  225|    505|}
_RNCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser28wildcard_descendant_selector0B7_:
  195|    505|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|    505|        Token::WildcardDescendant()
  197|    505|    })
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser21dot_wildcard_selectorB5_:
  180|    505|fn dot_wildcard_selector<'a>() -> impl Parser<'a, char> {
  181|    505|    preceded(char('.'), char('*'))
  182|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12dot_selectorB5_:
  176|    505|fn dot_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  177|    505|    preceded(char('.'), member())
  178|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser23index_wildcard_selectorB5_:
  204|  1.01k|fn index_wildcard_selector<'a>() -> impl Parser<'a, char> {
  205|  1.01k|    delimited(char('['), char('*'), char(']'))
  206|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser20array_index_selectorB5_:
  231|  1.01k|fn array_index_selector<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  232|  1.01k|    delimited(char('['), nonnegative_array_index(), char(']'))
  233|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser13quoted_member:
  254|  1.01k|fn quoted_member<'a>() -> impl Parser<'a, MemberString<'a>> {
  255|  1.01k|    alt((
  256|  1.01k|        delimited(
  257|  1.01k|            char('\''),
  258|  1.01k|            map(opt(single_quoted_member()), MemberString::from),
  259|  1.01k|            char('\''),
  260|  1.01k|        ),
  261|  1.01k|        delimited(
  262|  1.01k|            char('"'),
  263|  1.01k|            map(opt(double_quoted_member()), MemberString::from),
  264|  1.01k|            char('"'),
  265|  1.01k|        ),
  266|  1.01k|    ))
  267|  1.01k|}
_RNCNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser8jsonpath0B7_:
  151|    505|        opt(map(char('$'), |_| Token::Root)), // root selector
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser12member_firstB5_:
  215|  1.01k|fn member_first<'a>() -> impl Parser<'a, char> {
  216|  1.01k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
  217|  1.01k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser21parse_json_path_query:
   68|    505|pub(crate) fn parse_json_path_query(query_string: &str) -> Result<JsonPathQuery, ParserError> {
   69|    505|    let tokens_result = jsonpath()(query_string);
   70|    505|    let finished = tokens_result.finish();
   71|    505|
   72|    505|    match finished {
   73|    505|        Ok(("", (_root_token, tokens))) => {
   74|      0|            debug!("Parsed tokens: {}", {
   75|      0|                use fmt::Write;
   76|      0|                _root_token.map_or(String::new(), |x| format!("{x}"))
   77|      0|                    + &tokens.iter().fold(String::new(), |mut out, x| {
   78|       |                        write!(out, "({x:?})").expect("infallible");
   79|       |                        out
   80|      0|                    })
   81|       |            });
   82|    505|            let node = tokens_to_node(&mut tokens.into_iter())?;
   83|    505|            Ok(match node {
   84|      0|                None => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(None))),
   85|    505|                Some(node) if node.is_root() => JsonPathQuery::new(Box::new(node)),
   86|    505|                Some(node) => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(Some(Box::new(node))))),
   87|       |            })
   88|       |        }
   89|       |        _ => {
   90|      0|            let mut parse_errors = ParseErrorReport::new();
   91|      0|            let mut continuation = finished.map(|x| x.0);
   92|      0|            loop {
   93|      0|                match continuation {
   94|      0|                    Ok("") => return Err(ParserError::SyntaxError { report: parse_errors }),
   95|      0|                    Ok(remaining) => {
   96|      0|                        let error_character_index = query_string.len() - remaining.len();
   97|      0|                        parse_errors.record_at(error_character_index);
   98|      0|                        let next_char_boundary = (1..=4)
   99|      0|                            .find(|x| remaining.is_char_boundary(*x))
  100|      0|                            .expect("longest UTF8 char is 4 bytes");
  101|      0|                        continuation = non_root()(&remaining[next_char_boundary..]).finish().map(|x| x.0);
  102|      0|                    }
  103|      0|                    Err(e) => return Err(nom::error::Error::new(query_string.to_owned(), e.code).into()),
  104|       |                }
  105|       |            }
  106|       |        }
  107|       |    }
  108|    505|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser9unescapedB5_:
  306|  2.02k|fn unescaped<'a>() -> impl Parser<'a, char> {
  307|  2.02k|    verify(none_of(r#"'"\"#), |&c| u32::from(c) >= 0x20)
  308|  2.02k|}
_RINvNtNtCs5PViJFkd9Wt_8rsonpath5query6parser14tokens_to_nodeINtNtNtCsdNMYO4au7V3_5alloc3vec9into_iter8IntoIterNtB2_5TokenEEB6_:
  110|  1.01k|fn tokens_to_node<'a, I: Iterator<Item = Token<'a>>>(tokens: &mut I) -> Result<Option<JsonPathQueryNode>, ParserError> {
  111|  1.01k|    match tokens.next() {
  112|    505|        Some(token) => {
  113|    505|            let child_node = tokens_to_node(tokens)?.map(Box::new);
  114|    505|            match token {
  115|      0|                Token::Root => Ok(Some(JsonPathQueryNode::Root(child_node))),
  116|      0|                Token::Child(member) => Ok(Some(JsonPathQueryNode::Child(
  117|      0|                    JsonString::new(member.borrow()),
  118|      0|                    child_node,
  119|      0|                ))),
  120|      0|                Token::ArrayIndexChild(i) => Ok(Some(JsonPathQueryNode::ArrayIndexChild(i, child_node))),
  121|      0|                Token::WildcardChild() => Ok(Some(JsonPathQueryNode::AnyChild(child_node))),
  122|      0|                Token::Descendant(member) => Ok(Some(JsonPathQueryNode::Descendant(
  123|      0|                    JsonString::new(member.borrow()),
  124|      0|                    child_node,
  125|      0|                ))),
  126|      0|                Token::ArrayIndexDescendant(i) => Ok(Some(JsonPathQueryNode::ArrayIndexDescendant(i, child_node))),
  127|    505|                Token::WildcardDescendant() => Ok(Some(JsonPathQueryNode::AnyDescendant(child_node))),
  128|       |            }
  129|       |        }
  130|    505|        _ => Ok(None),
  131|       |    }
  132|  1.01k|}

_RNvXs2_NtCs5PViJFkd9Wt_8rsonpath6resultINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  144|  9.16k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  9.16k|        self.push(data);
  146|  9.16k|        Ok(())
  147|  9.16k|    }
_RNvXsa_NtCs5PViJFkd9Wt_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCsf30vbYEHCOR_4core3cmp9PartialEq2eqCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  189|  13.4k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]

_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  213|    505|    fn new(sink: &'s mut S) -> Self {
  214|    505|        Self {
  215|    505|            idx: 0,
  216|    505|            current_block: None,
  217|    505|            node: None,
  218|    505|            sink,
  219|    505|        }
  220|    505|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  266|  7.39k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  267|  7.39k|        if self.node.is_some() {
  268|      0|            debug!("nested match detected, switching to stack");
  269|    230|            return false;
  270|  7.16k|        }
  271|  7.16k|
  272|  7.16k|        let node = SimplePartialNode {
  273|  7.16k|            start_idx: idx,
  274|  7.16k|            start_depth: depth,
  275|  7.16k|            buf: vec![],
  276|  7.16k|            ty,
  277|  7.16k|        };
  278|  7.16k|        self.node = Some(node);
  279|  7.16k|
  280|  7.16k|        true
  281|  7.39k|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  283|    230|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  284|    230|        match self.node {
  285|    230|            Some(node) => StackRecorder {
  286|    230|                idx: self.idx,
  287|    230|                match_count: 1,
  288|    230|                current_block: self.current_block,
  289|    230|                stack: vec![PartialNode {
  290|    230|                    id: 0,
  291|    230|                    start_idx: node.start_idx,
  292|    230|                    start_depth: node.start_depth,
  293|    230|                    buf: node.buf,
  294|    230|                    ty: node.ty,
  295|    230|                }],
  296|    230|                output_queue: OutputQueue::new(),
  297|    230|                sink: self.sink,
  298|    230|            },
  299|      0|            None => StackRecorder {
  300|      0|                idx: self.idx,
  301|      0|                match_count: 0,
  302|      0|                current_block: self.current_block,
  303|      0|                stack: vec![],
  304|      0|                output_queue: OutputQueue::new(),
  305|      0|                sink: self.sink,
  306|      0|            },
  307|       |        }
  308|    230|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  237|      0|        debug!("Value terminator at {idx}, depth {depth}");
  238|  7.27k|        if let Some(node) = self.node.as_ref() {
  239|  7.02k|            if node.start_depth >= depth {
  240|  6.83k|                let mut node = self.node.take().expect("node is Some");
  241|      0|                debug!("Mark node as ended at {}", idx + 1);
  242|       |                append_final_block(
  243|  6.83k|                    &mut node.buf,
  244|  6.83k|                    self.current_block
  245|  6.83k|                        .as_ref()
  246|  6.83k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  247|  6.83k|                    self.idx,
  248|  6.83k|                    node.start_idx,
  249|  6.83k|                    idx + 1,
  250|  6.83k|                );
  251|  6.83k|                finalize_node(&mut node.buf, node.ty);
  252|       |
  253|      0|                debug!("Committing and outputting node");
  254|  6.83k|                self.sink
  255|  6.83k|                    .add_match(Match {
  256|  6.83k|                        span_start: node.start_idx,
  257|  6.83k|                        bytes: node.buf,
  258|  6.83k|                    })
  259|  6.83k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  260|    195|            }
  261|    242|        }
  262|       |
  263|  7.27k|        Ok(())
  264|  7.27k|    }
_RNvMs3_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  363|      0|        debug!("Value terminator at {idx}, depth {depth}");
  364|  11.3k|        while let Some(node) = self.stack.last() {
  365|  10.7k|            if node.start_depth >= depth {
  366|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  367|  6.61k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  368|  6.61k|                append_final_block(
  369|  6.61k|                    &mut node.buf,
  370|  6.61k|                    self.current_block
  371|  6.61k|                        .as_ref()
  372|  6.61k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  373|  6.61k|                    self.idx,
  374|  6.61k|                    node.start_idx,
  375|  6.61k|                    idx + 1,
  376|  6.61k|                );
  377|  6.61k|                finalize_node(&mut node.buf, node.ty);
  378|       |
  379|      0|                debug!("Committing node: {node:?}");
  380|  6.61k|                self.output_queue.insert(
  381|  6.61k|                    node.id,
  382|  6.61k|                    Match {
  383|  6.61k|                        span_start: node.start_idx,
  384|  6.61k|                        bytes: node.buf,
  385|  6.61k|                    },
  386|  6.61k|                );
  387|       |            } else {
  388|  4.12k|                break;
  389|       |            }
  390|       |        }
  391|       |
  392|  4.76k|        if self.stack.is_empty() {
  393|      0|            debug!("Outputting batch of nodes.");
  394|    635|            self.output_queue
  395|    635|                .output_to(self.sink)
  396|    635|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  397|  4.12k|        }
  398|       |
  399|  4.76k|        Ok(())
  400|  4.76k|    }
_RNvMs3_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE12record_blockCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  333|    649|    fn record_block(&mut self, block: B) {
  334|    649|        if let Some(finished) = self.current_block.as_ref() {
  335|  53.2k|            for node in &mut self.stack {
  336|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  337|  52.6k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  338|       |            }
  339|       |
  340|    649|            self.idx += finished.len();
  341|      0|        }
  342|       |
  343|    649|        self.current_block = Some(block);
  344|      0|        debug!("New block, idx = {}", self.idx);
  345|    649|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath6result5nodes13finalize_node:
  434|      0|    debug!("Finalizing node");
  435|       |
  436|  13.4k|    if ty == MatchedNodeType::Atomic {
  437|       |        // Atomic nodes are finished when the next structural character is matched.
  438|       |        // The buffer includes that character and all preceding whitespace.
  439|       |        // We need to remove it before saving the result.
  440|  10.6k|        if buf.len() <= 1 {
  441|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  442|  6.72k|            buf.truncate(0)
  443|       |        } else {
  444|  3.87k|            let mut i = buf.len() - 2;
  445|  6.44k|            while is_json_whitespace(buf[i]) {
  446|  2.56k|                i -= 1;
  447|  2.56k|            }
  448|       |
  449|  3.87k|            buf.truncate(i + 1);
  450|       |        }
  451|  2.84k|    }
  452|  13.4k|}
_RNvXs0_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   53|      0|        debug!("Recording match at {idx}");
   54|  20.2k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  20.2k|        Ok(())
   56|  20.2k|    }
_RNvXs0_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   59|  12.0k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  12.0k|        self.internal
   61|  12.0k|            .borrow_mut()
   62|  12.0k|            .record_value_terminator(idx, depth)
   63|  12.0k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  12.0k|    }
_RNvXs_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   41|  1.91k|    fn record_block_start(&self, new_block: B) {
   42|  1.91k|        self.internal.borrow_mut().record_block(new_block)
   43|  1.91k|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE12record_matchCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  165|  20.2k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  20.2k|        match self {
  167|  7.39k|            Self::Simple(simple) => {
  168|  7.39k|                if !simple.try_record_match(idx, depth, ty) {
  169|    230|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    230|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    230|                    let mut stack = simple.transform_to_stack();
  174|    230|                    stack.record_match(idx, depth, ty);
  175|    230|                    *self = Self::Stack(stack);
  176|  7.16k|                }
  177|       |            }
  178|  12.8k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  20.2k|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  185|  12.0k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  12.0k|        match self {
  187|  7.27k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  4.76k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  12.0k|    }
_RNvMs2_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE12record_blockCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  222|  1.26k|    fn record_block(&mut self, block: B) {
  223|  1.26k|        if let Some(finished) = self.current_block.as_ref() {
  224|    763|            if let Some(node) = self.node.as_mut() {
  225|      0|                debug!("Continuing node, idx is {}", self.idx);
  226|    594|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  227|    169|            }
  228|       |
  229|    763|            self.idx += finished.len();
  230|    505|        }
  231|       |
  232|  1.26k|        self.current_block = Some(block);
  233|      0|        debug!("New block, idx = {}", self.idx);
  234|  1.26k|    }
_RNvMs3_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE12record_matchCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  347|  13.0k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  348|  13.0k|        let node = PartialNode {
  349|  13.0k|            id: self.match_count,
  350|  13.0k|            start_idx: idx,
  351|  13.0k|            start_depth: depth,
  352|  13.0k|            buf: vec![],
  353|  13.0k|            ty,
  354|  13.0k|        };
  355|       |
  356|      0|        debug!("New node {node:?}");
  357|  13.0k|        self.match_count += 1;
  358|  13.0k|        self.stack.push(node);
  359|  13.0k|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  151|    505|    fn new(sink: &'s mut S) -> Self {
  152|    505|        Self::Simple(SimpleRecorder::new(sink))
  153|    505|    }
_RNvNtNtCs5PViJFkd9Wt_8rsonpath6result5nodes18append_final_block:
  420|  13.4k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  421|  13.4k|    debug_assert!(read_end >= src_start);
  422|  13.4k|    let in_block_start = if read_start > src_start {
  423|  10.1k|        read_start - src_start
  424|       |    } else {
  425|  3.25k|        0
  426|       |    };
  427|  13.4k|    let in_block_end = read_end - src_start;
  428|  13.4k|
  429|  13.4k|    dest.extend(&src[in_block_start..in_block_end]);
  430|  13.4k|}
_RNvNtNtCs5PViJFkd9Wt_8rsonpath6result5nodes12append_block:
  404|  53.2k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  405|  53.2k|    if read_start >= src_start + src.len() {
  406|    225|        return;
  407|  53.0k|    }
  408|       |
  409|  53.0k|    let to_extend = if read_start > src_start {
  410|  9.44k|        let in_block_start = read_start - src_start;
  411|  9.44k|        &src[in_block_start..]
  412|       |    } else {
  413|  43.5k|        src
  414|       |    };
  415|       |
  416|  53.0k|    dest.extend(to_extend);
  417|  53.2k|}
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   28|    505|    pub(crate) fn build_recorder(sink: &'s mut S) -> Self {
   29|    505|        Self {
   30|    505|            internal: RefCell::new(InternalRecorder::new(sink)),
   31|    505|        }
   32|    505|    }
_RNvMs1_NtNtCs5PViJFkd9Wt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsdNMYO4au7V3_5alloc3vec3VecNtB7_5MatchEE12record_blockCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
  156|  1.91k|    fn record_block(&mut self, block: B) {
  157|  1.91k|        match self {
  158|  1.26k|            Self::Simple(r) => r.record_block(block),
  159|    649|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  1.91k|    }

_RNvMNtNtCs5PViJFkd9Wt_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   29|  6.61k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  6.61k|        let actual_idx = id - self.offset;
   31|       |
   32|  17.4k|        while self.nodes.len() <= actual_idx {
   33|  10.8k|            self.nodes.push(None);
   34|  10.8k|        }
   35|       |
   36|  6.61k|        self.nodes[actual_idx] = Some(node);
   37|  6.61k|    }
_RNvMNtNtCs5PViJFkd9Wt_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   18|    230|    pub(super) fn new() -> Self {
   19|    230|        Self {
   20|    230|            offset: 0,
   21|    230|            nodes: vec![],
   22|    230|        }
   23|    230|    }
_RINvMNtNtCs5PViJFkd9Wt_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCsdNMYO4au7V3_5alloc3vec3VecB18_EECs5uWuaGWaM8W_20fuzz_arbitrary_bytes:
   52|    635|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|    635|    where
   54|    635|        S: Sink<D>,
   55|    635|    {
   56|    635|        self.offset += self.nodes.len();
   57|       |
   58|  2.32k|        for node in self.nodes.drain(..) {
   59|  2.32k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|    635|        Ok(())
   63|    635|    }

_RNCNvXNvCs5uWuaGWaM8W_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs6FPSiCtfwLi_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   18|    505|#[derive(Arbitrary)]
_RNCNvXNvCs5uWuaGWaM8W_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCs6FPSiCtfwLi_9arbitrary9Arbitrary9size_hint0B6_:
   18|    505|#[derive(Arbitrary)]
_RNvXNvCs5uWuaGWaM8W_20fuzz_arbitrary_bytess_1__NtB4_16DisplayableBytesNtCs6FPSiCtfwLi_9arbitrary9Arbitrary19arbitrary_take_rest:
   18|  1.51k|#[derive(Arbitrary)]

