_RNvXs9_Csk7csMpgu7wb_9arbitraryRShNtB5_9Arbitrary9size_hintCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  672|  1.15k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  673|  1.15k|        (0, None)
  674|  1.15k|    }
_RNvXs9_Csk7csMpgu7wb_9arbitraryRShNtB5_9Arbitrary19arbitrary_take_rest:
  667|  1.15k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  668|  1.15k|        Ok(u.take_rest())
  669|  1.15k|    }

_RNCNvNtCsk7csMpgu7wb_9arbitrary9size_hint3and0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   28|  1.15k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsk7csMpgu7wb_9arbitrary9size_hint3andCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   26|  1.15k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  1.15k|    let lower = lhs.0 + rhs.0;
   28|  1.15k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  1.15k|    (lower, upper)
   30|  1.15k|}
_RINvNtCsk7csMpgu7wb_9arbitrary9size_hint15recursion_guardNCNvXNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytess_1__NtB10_16DisplayableBytesNtB4_9Arbitrary9size_hint0EB10_:
   12|  1.15k|pub fn recursion_guard(
   13|  1.15k|    depth: usize,
   14|  1.15k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  1.15k|) -> (usize, Option<usize>) {
   16|  1.15k|    const MAX_DEPTH: usize = 20;
   17|  1.15k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  1.15k|        f(depth + 1)
   21|       |    }
   22|  1.15k|}
_RNvNtCsk7csMpgu7wb_9arbitrary9size_hint7and_allCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   37|  1.15k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.15k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.15k|}

_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  132|  1.15k|    pub fn is_empty(&self) -> bool {
  133|  1.15k|        self.len() == 0
  134|  1.15k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured3lenCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  108|  1.15k|    pub fn len(&self) -> usize {
  109|  1.15k|        self.data.len()
  110|  1.15k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured9take_rest:
  598|  1.15k|    pub fn take_rest(mut self) -> &'a [u8] {
  599|  1.15k|        mem::take(&mut self.data)
  600|  1.15k|    }
_RNvMNtCsk7csMpgu7wb_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  1.15k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.15k|        Unstructured { data }
   87|  1.15k|    }

rust_fuzzer_test_input:
  259|  1.15k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.15k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.15k|
  262|  1.15k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.15k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.15k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.15k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.15k|                // get to longer inputs that actually lead to interesting executions
  267|  1.15k|                // quicker.
  268|  1.15k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.15k|                }
  271|  1.15k|
  272|  1.15k|                let mut u = Unstructured::new(bytes);
  273|  1.15k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.15k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.15k|                }
  291|       |
  292|  1.15k|                let data = match data {
  293|  1.15k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.15k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.15k|                result.to_libfuzzer_code()
  299|  1.15k|            }
_RNvNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  1.15k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  1.15k|                $body
  305|  1.15k|            }
_RNvXCsaU9MXpF9IMB_13libfuzzer_sysNtB2_6CorpusINtNtCs3NN8x5qF7TE_4core7convert4FromuE4from:
   30|  1.15k|    fn from(_: ()) -> Self {
   31|  1.15k|        Self::Keep
   32|  1.15k|    }
LLVMFuzzerTestOneInput:
   58|  1.15k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.15k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.15k|    });
   63|  1.15k|
   64|  1.15k|    match test_input {
   65|  1.15k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.15k|}
_RNCNvCsaU9MXpF9IMB_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.15k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.15k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.15k|        rust_fuzzer_test_input(data_slice)
   62|  1.15k|    });
_RNvMs_CsaU9MXpF9IMB_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  1.15k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.15k|        match self {
   42|  1.15k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.15k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvCs9QJjCmIOGVu_3log9max_level:
 1270|  2.55M|pub fn max_level() -> LevelFilter {
 1271|  2.55M|    // Since `LevelFilter` is `repr(usize)`,
 1272|  2.55M|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1273|  2.55M|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1274|  2.55M|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1275|  2.55M|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1276|  2.55M|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1277|  2.55M|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1278|  2.55M|}
_RNvXs_Cs9QJjCmIOGVu_3logNtB4_5LevelINtNtCs3NN8x5qF7TE_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  464|  4.93M|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|  4.93M|        Some((*self as usize).cmp(&(*other as usize)))
  466|  4.93M|    }
_RNvXs_Cs9QJjCmIOGVu_3logNtB4_5LevelINtNtCs3NN8x5qF7TE_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs6TTJfIhyJGW_8rsonpath:
  464|   173k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|   173k|        Some((*self as usize).cmp(&(*other as usize)))
  466|   173k|    }

_RINvNtCskh6ql9CB8e_3nom6branch3altRecINtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator6verifyBw_ccBz_NCINvNtNtB4_9character8complete7none_ofBw_Bw_Bz_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0E0NCINvB1E_4charBw_Bz_E0EEB2v_:
   47|  2.31k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.31k|  mut l: List,
   49|  2.31k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator3mapBw_cBy_B1k_NCIB0_Bw_cB1k_TNCINvNtB4_8sequence8precededBw_ccB1k_NCINvNtNtB4_9character8complete4charBw_B1k_E0B3a_E0NCINvB2E_9delimitedBw_cccB1k_B3a_B3a_B3a_E0EE0NCNvBA_23wildcard_child_selector0E0NCIB1M_Bw_NtBA_12MemberStringBy_B1k_NCIB0_Bw_B5s_B1k_TNCIB2C_Bw_cB5s_B1k_B3a_NCIB1M_Bw_Bw_B5s_B1k_NCINvB1O_9recognizeBw_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1k_NCINvB2E_4pairBw_cB7g_B1k_NCINvB1O_6verifyBw_ccB1k_INvB3f_7anycharBw_B1k_ENCNvBA_12member_first0E0NCINvNtB4_5multi5many0Bw_cB1k_NCIB8n_Bw_ccB1k_B8J_NCNvBA_16member_character0E0E0E0E0NcNtB5s_8Borrowed0E0E0NCIB42_Bw_cB5s_cB1k_B3a_NCIB0_Bw_B5s_B1k_TNCIB42_Bw_cB5s_cB1k_B3a_NCIB1M_Bw_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7l_6string6StringEB5s_B1k_NCINvB1O_3optBw_Bd2_B1k_NCINvNtNtB4_5bytes8complete17escaped_transformBw_B1k_NCIB1M_Bw_IB7h_NtBA_16MaybeEscapedCharENtBA_19MaybeEscapedCharVecB1k_NCINvB9z_5many1Bw_Bf1_B1k_NCIB0_Bw_Bf1_B1k_TNCIB1M_Bw_cBf1_B1k_NCIB8n_Bw_ccB1k_NCINvB3f_7none_ofBw_Bw_B1k_E0NCNvBA_9unescaped0E0NcNtBf1_4Char0E0NCIB1M_Bw_cBf1_B1k_B3a_NcNtBf1_7Escaped0E0EE0E0NcBfp_0E0NCIB0_Bw_Bw_B1k_TNCIB0_Bw_Bw_B1k_TNCINvB1O_5valueBw_Bw_Bw_B1k_NCINvBe0_3tagBw_Bw_B1k_E0E0BjF_BjF_BjF_BjF_BjF_BjF_EE0BjF_EE0Bfp_Bw_cBd2_E0E0NvYB5s_INtNtBcv_7convert4FromBcq_E4fromE0B3a_E0NCIB42_Bw_cB5s_cB1k_B3a_NCIB1M_Bw_Bcq_B5s_B1k_NCIBdA_Bw_Bd2_B1k_NCIBdY_Bw_B1k_NCIB6V_Bw_B7g_B1k_NCIBfW_Bw_cB1k_NCIB0_Bw_cB1k_TBgU_B3a_EE0E0E0Bj7_Bw_Bw_cBd2_E0E0Blm_E0B3a_E0EE0B3a_E0EE0NcNtBy_5Child0E0NCIB1M_Bw_NtNtBC_23nonnegative_array_index21NonNegativeArrayIndexBy_B1k_NCIB42_Bw_cBpv_cB1k_B3a_NCINvB1O_7map_resBw_yBpv_B1k_NtNtBC_5error15ArrayIndexErrorNCIBqW_Bw_Bw_yB1k_NtNtNtBcv_3num5error13ParseIntErrorNCIBqW_Bw_Bw_Bw_B1k_Brm_INvB3f_6digit1Bw_B1k_ENCNvBA_26length_limited_array_index0E0INvMNtBcv_3stre5parseyEE0NvYyINtBlw_7TryIntoBpv_E8try_intoE0B3a_E0NcNtBy_15ArrayIndexChild0E0NCIB1M_Bw_cBy_B1k_NCIB2C_Bw_Bw_cB1k_Bk7_NCIB0_Bw_cB1k_TB3a_B3Z_EE0E0NCNvBA_28wildcard_descendant_selector0E0NCIB2C_Bw_Bw_By_B1k_Bk7_NCIB0_Bw_By_B1k_TNCIB1M_Bw_B5s_By_B1k_NCIB0_Bw_B5s_B1k_TB6x_Bbc_EE0NcNtBy_10Descendant0E0NCIB1M_Bw_Bpv_By_B1k_Bqv_NcNtBy_20ArrayIndexDescendant0E0EE0E0EEBE_:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RNvXs2_NtCskh6ql9CB8e_3nom6branchTNCINvNtB7_10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBW_ENCINvB5_3altBW_cB1L_TNCINvNtB7_8sequence8precededBW_ccB1L_NCINvNtNtB7_9character8complete4charBW_B1L_E0B35_E0NCINvB2z_9delimitedBW_cccB1L_B35_B35_B35_E0EE0NCNvB11_23wildcard_child_selector0E0NCIBz_BW_NtB11_12MemberStringBZ_B1L_NCIB2c_BW_B5n_B1L_TNCIB2x_BW_cB5n_B1L_B35_NCIBz_BW_BW_B5n_B1L_NCINvBB_9recognizeBW_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1L_NCINvB2z_4pairBW_cB7b_B1L_NCINvBB_6verifyBW_ccB1L_INvB3a_7anycharBW_B1L_ENCNvB11_12member_first0E0NCINvNtB7_5multi5many0BW_cB1L_NCIB8i_BW_ccB1L_B8D_NCNvB11_16member_character0E0E0E0E0NcNtB5n_8Borrowed0E0E0NCIB3X_BW_cB5n_cB1L_B35_NCIB2c_BW_B5n_B1L_TNCIB3X_BW_cB5n_cB1L_B35_NCIBz_BW_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7g_6string6StringEB5n_B1L_NCINvBB_3optBW_BcY_B1L_NCINvNtNtB7_5bytes8complete17escaped_transformBW_B1L_NCIBz_BW_IB7c_NtB11_16MaybeEscapedCharENtB11_19MaybeEscapedCharVecB1L_NCINvB9u_5many1BW_BeV_B1L_NCIB2c_BW_BeV_B1L_TNCIBz_BW_cBeV_B1L_NCIB8i_BW_ccB1L_NCINvB3a_7none_ofBW_BW_B1L_E0NCNvB11_9unescaped0E0NcNtBeV_4Char0E0NCIBz_BW_cBeV_B1L_B35_NcNtBeV_7Escaped0E0EE0E0NcBfk_0E0NCIB2c_BW_BW_B1L_TNCIB2c_BW_BW_B1L_TNCINvBB_5valueBW_BW_BW_B1L_NCINvBdV_3tagBW_BW_B1L_E0E0BjD_BjD_BjD_BjD_BjD_BjD_EE0BjD_EE0Bfk_BW_cBcY_E0E0NvYB5n_INtNtBcr_7convert4FromBcm_E4fromE0B35_E0NCIB3X_BW_cB5n_cB1L_B35_NCIBz_BW_Bcm_B5n_B1L_NCIBdw_BW_BcY_B1L_NCIBdT_BW_B1L_NCIB6R_BW_B7b_B1L_NCIBfS_BW_cB1L_NCIB2c_BW_cB1L_TBgQ_B35_EE0E0E0Bj3_BW_BW_cBcY_E0E0Blj_E0B35_E0EE0B35_E0EE0NcNtBZ_5Child0E0NCIBz_BW_NtNtB13_23nonnegative_array_index21NonNegativeArrayIndexBZ_B1L_NCIB3X_BW_cBpr_cB1L_B35_NCINvBB_7map_resBW_yBpr_B1L_NtNtB13_5error15ArrayIndexErrorNCIBqT_BW_BW_yB1L_NtNtNtBcr_3num5error13ParseIntErrorNCIBqT_BW_BW_BW_B1L_Bri_INvB3a_6digit1BW_B1L_ENCNvB11_26length_limited_array_index0E0INvMNtBcr_3stre5parseyEE0NvYyINtBlt_7TryIntoBpr_E8try_intoE0B35_E0NcNtBZ_15ArrayIndexChild0E0NCIBz_BW_cBZ_B1L_NCIB2x_BW_BW_cB1L_Bk4_NCIB2c_BW_cB1L_TB35_B3U_EE0E0NCNvB11_28wildcard_descendant_selector0E0NCIB2x_BW_BW_BZ_B1L_Bk4_NCIB2c_BW_BZ_B1L_TNCIBz_BW_B5n_BZ_B1L_NCIB2c_BW_B5n_B1L_TB6u_Bb8_EE0NcNtBZ_10Descendant0E0NCIBz_BW_Bpr_BZ_B1L_Bqs_NcNtBZ_20ArrayIndexDescendant0E0EE0E0EINtB5_3AltBW_BZ_B1L_E6choiceB15_:
  134|  2.31k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.31k|        match self.0.parse(input.clone()) {
  136|  2.31k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  2.31k|      }
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator3mapBw_NtBA_12MemberStringBy_B1k_NCIB0_Bw_B2c_B1k_TNCIB1M_Bw_Bw_B2c_B1k_NCINvB1O_9recognizeBw_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1k_NCINvNtB4_8sequence4pairBw_cB3D_B1k_NCINvB1O_6verifyBw_ccB1k_INvNtNtB4_9character8complete7anycharBw_B1k_ENCNvBA_12member_first0E0NCINvNtB4_5multi5many0Bw_cB1k_NCIB4U_Bw_ccB1k_B5g_NCNvBA_16member_character0E0E0E0E0NcNtB2c_8Borrowed0E0NCINvB4m_9delimitedBw_cB2c_cB1k_NCINvB5j_4charBw_B1k_E0NCIB0_Bw_B2c_B1k_TNCIB86_Bw_cB2c_cB1k_B8z_NCIB1M_Bw_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB3I_6string6StringEB2c_B1k_NCINvB1O_3optBw_Bao_B1k_NCINvNtNtB4_5bytes8complete17escaped_transformBw_B1k_NCIB1M_Bw_IB3E_NtBA_16MaybeEscapedCharENtBA_19MaybeEscapedCharVecB1k_NCINvB6s_5many1Bw_Bcn_B1k_NCIB0_Bw_Bcn_B1k_TNCIB1M_Bw_cBcn_B1k_NCIB4U_Bw_ccB1k_NCINvB5j_7none_ofBw_Bw_B1k_E0NCNvBA_9unescaped0E0NcNtBcn_4Char0E0NCIB1M_Bw_cBcn_B1k_B8z_NcNtBcn_7Escaped0E0EE0E0NcBcL_0E0NCIB0_Bw_Bw_B1k_TNCIB0_Bw_Bw_B1k_TNCINvB1O_5valueBw_Bw_Bw_B1k_NCINvBbm_3tagBw_Bw_B1k_E0E0Bh1_Bh1_Bh1_Bh1_Bh1_Bh1_EE0Bh1_EE0BcL_Bw_cBao_E0E0NvYB2c_INtNtB9R_7convert4FromB9M_E4fromE0B8z_E0NCIB86_Bw_cB2c_cB1k_B8z_NCIB1M_Bw_B9M_B2c_B1k_NCIBaW_Bw_Bao_B1k_NCIBbk_Bw_B1k_NCIB3i_Bw_B3D_B1k_NCIBdi_Bw_cB1k_NCIB0_Bw_cB1k_TBeg_B8z_EE0E0E0Bgt_Bw_Bw_cBao_E0E0BiI_E0B8z_E0EE0B8z_E0EE0NcNtBy_10Descendant0E0NCIB1M_Bw_NtNtBC_23nonnegative_array_index21NonNegativeArrayIndexBy_B1k_NCIB86_Bw_cBmX_cB1k_B8z_NCINvB1O_7map_resBw_yBmX_B1k_NtNtBC_5error15ArrayIndexErrorNCIBoo_Bw_Bw_yB1k_NtNtNtB9R_3num5error13ParseIntErrorNCIBoo_Bw_Bw_Bw_B1k_BoO_INvB5j_6digit1Bw_B1k_ENCNvBA_26length_limited_array_index0E0INvMNtB9R_3stre5parseyEE0NvYyINtBiS_7TryIntoBmX_E8try_intoE0B8z_E0NcNtBy_20ArrayIndexDescendant0E0EEBE_:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBw_ETNCINvNtB4_8sequence9delimitedBw_cBy_cB1s_NCINvNtNtB4_9character8complete4charBw_B1s_E0NCINvNtB4_10combinator3mapBw_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEBy_B1s_NCINvB3k_3optBw_B4k_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBw_B1s_NCIB3i_Bw_INtNtB4o_3vec3VecNtBA_16MaybeEscapedCharENtBA_19MaybeEscapedCharVecB1s_NCINvNtB4_5multi5many1Bw_B6K_B1s_NCIB0_Bw_B6K_B1s_TNCIB3i_Bw_cB6K_B1s_NCINvB3k_6verifyBw_ccB1s_NCINvB2B_7none_ofBw_Bw_B1s_E0NCNvBA_9unescaped0E0NcNtB6K_4Char0E0NCIB3i_Bw_cB6K_B1s_B2w_NcNtB6K_7Escaped0E0EE0E0NcB78_0E0NCIB0_Bw_Bw_B1s_TNCIB0_Bw_Bw_B1s_TNCINvB3k_5valueBw_Bw_Bw_B1s_NCINvB5x_3tagBw_Bw_B1s_E0E0BbE_BbE_BbE_BbE_BbE_BbE_EE0BbE_EE0B78_Bw_cB4k_E0E0NvYBy_INtNtB3N_7convert4FromB3I_E4fromE0B2w_E0NCIB1U_Bw_cBy_cB1s_B2w_NCIB3i_Bw_B3I_By_B1s_NCIB57_Bw_B4k_B1s_NCIB5v_Bw_B1s_NCINvB3k_9recognizeBw_IB6u_cEB1s_NCIB7F_Bw_cB1s_NCIB0_Bw_cB1s_TB8K_B2w_EE0E0E0Bb6_Bw_Bw_cB4k_E0E0Bdl_E0B2w_E0EEBE_:
   47|  2.31k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.31k|  mut l: List,
   49|  2.31k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.31k|}
_RNCINvNtCskh6ql9CB8e_3nom6branch3altRecINtNtB6_5error5ErrorBy_ETNCINvNtNtB6_9character8complete4charBy_BB_E0NCINvNtB6_8sequence9delimitedBy_cccBB_B10_B10_B10_E0EE0Cs6TTJfIhyJGW_8rsonpath:
   50|  1.15k|  move |i: I| l.choice(i)
_RINvNtCskh6ql9CB8e_3nom6branch3altReBw_INtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator5valueBw_Bw_Bw_BB_NCINvNtNtB4_5bytes8complete3tagBw_Bw_BB_E0E0B10_B10_B10_B10_B10_B10_EECs6TTJfIhyJGW_8rsonpath:
   47|  4.62k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  4.62k|  mut l: List,
   49|  4.62k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  4.62k|}
_RNCINvNtCskh6ql9CB8e_3nom6branch3altRecINtNtB6_5error5ErrorBy_ETNCINvNtB6_8sequence8precededBy_ccBB_NCINvNtNtB6_9character8complete4charBy_BB_E0B1A_E0NCINvB15_9delimitedBy_cccBB_B1A_B1A_B1A_E0EE0Cs6TTJfIhyJGW_8rsonpath:
   50|  2.31k|  move |i: I| l.choice(i)
_RNvXs_NtCskh6ql9CB8e_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBX_ENCINvNtNtB6_9character8complete4charBX_B1U_E0NCINvNtB6_10combinator3mapBX_BX_B10_B1U_NCINvB36_9recognizeBX_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1U_NCINvBA_4pairBX_cB43_B1U_NCINvB36_6verifyBX_ccB1U_INvB2n_7anycharBX_B1U_ENCNvB12_12member_first0E0NCINvNtB6_5multi5many0BX_cB1U_NCIB59_BX_ccB1U_B5v_NCNvB12_16member_character0E0E0E0E0NcNtB10_8Borrowed0E0E0NCINvBA_9delimitedBX_cB10_cB1U_B2i_NCINvB4_3altBX_B10_B1U_TNCIB83_BX_cB10_cB1U_B2i_NCIB34_BX_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB48_6string6StringEB10_B1U_NCINvB36_3optBX_Ba7_B1U_NCINvNtNtB6_5bytes8complete17escaped_transformBX_B1U_NCIB34_BX_IB44_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB1U_NCINvB6m_5many1BX_Bc6_B1U_NCIB8C_BX_Bc6_B1U_TNCIB34_BX_cBc6_B1U_NCIB59_BX_ccB1U_NCINvB2n_7none_ofBX_BX_B1U_E0NCNvB12_9unescaped0E0NcNtBc6_4Char0E0NCIB34_BX_cBc6_B1U_B2i_NcNtBc6_7Escaped0E0EE0E0NcBcv_0E0NCIB8C_BX_BX_B1U_TNCIB8C_BX_BX_B1U_TNCINvB36_5valueBX_BX_BX_B1U_NCINvBb5_3tagBX_BX_B1U_E0E0BgQ_BgQ_BgQ_BgQ_BgQ_BgQ_EE0BgQ_EE0Bcv_BX_cBa7_E0E0NvYB10_INtNtB9A_7convert4FromB9v_E4fromE0B2i_E0NCIB83_BX_cB10_cB1U_B2i_NCIB34_BX_B9v_B10_B1U_NCIBaF_BX_Ba7_B1U_NCIBb3_BX_B1U_NCIB3I_BX_B43_B1U_NCIBd3_BX_cB1U_NCIB8C_BX_cB1U_TBe2_B2i_EE0E0E0Bgg_BX_BX_cBa7_E0E0Bix_E0B2i_E0EE0B2i_E0EINtB4_3AltBX_B10_B1U_E6choiceB16_:
  134|  2.31k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.31k|        match self.0.parse(input.clone()) {
  136|  2.31k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  2.31k|      }
_RNCINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBy_ETNCINvNtB6_10combinator3mapBy_cBA_B1m_NCIB2_By_cB1m_TNCINvNtB6_8sequence8precededBy_ccB1m_NCINvNtNtB6_9character8complete4charBy_B1m_E0B3c_E0NCINvB2G_9delimitedBy_cccB1m_B3c_B3c_B3c_E0EE0NCNvBC_23wildcard_child_selector0E0NCIB1O_By_NtBC_12MemberStringBA_B1m_NCIB2_By_B5u_B1m_TNCIB2E_By_cB5u_B1m_B3c_NCIB1O_By_By_B5u_B1m_NCINvB1Q_9recognizeBy_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1m_NCINvB2G_4pairBy_cB7i_B1m_NCINvB1Q_6verifyBy_ccB1m_INvB3h_7anycharBy_B1m_ENCNvBC_12member_first0E0NCINvNtB6_5multi5many0By_cB1m_NCIB8p_By_ccB1m_B8L_NCNvBC_16member_character0E0E0E0E0NcNtB5u_8Borrowed0E0E0NCIB44_By_cB5u_cB1m_B3c_NCIB2_By_B5u_B1m_TNCIB44_By_cB5u_cB1m_B3c_NCIB1O_By_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7n_6string6StringEB5u_B1m_NCINvB1Q_3optBy_Bd4_B1m_NCINvNtNtB6_5bytes8complete17escaped_transformBy_B1m_NCIB1O_By_IB7j_NtBC_16MaybeEscapedCharENtBC_19MaybeEscapedCharVecB1m_NCINvB9B_5many1By_Bf3_B1m_NCIB2_By_Bf3_B1m_TNCIB1O_By_cBf3_B1m_NCIB8p_By_ccB1m_NCINvB3h_7none_ofBy_By_B1m_E0NCNvBC_9unescaped0E0NcNtBf3_4Char0E0NCIB1O_By_cBf3_B1m_B3c_NcNtBf3_7Escaped0E0EE0E0NcBfr_0E0NCIB2_By_By_B1m_TNCIB2_By_By_B1m_TNCINvB1Q_5valueBy_By_By_B1m_NCINvBe2_3tagBy_By_B1m_E0E0BjH_BjH_BjH_BjH_BjH_BjH_EE0BjH_EE0Bfr_By_cBd4_E0E0NvYB5u_INtNtBcx_7convert4FromBcs_E4fromE0B3c_E0NCIB44_By_cB5u_cB1m_B3c_NCIB1O_By_Bcs_B5u_B1m_NCIBdC_By_Bd4_B1m_NCIBe0_By_B1m_NCIB6X_By_B7i_B1m_NCIBfY_By_cB1m_NCIB2_By_cB1m_TBgW_B3c_EE0E0E0Bj9_By_By_cBd4_E0E0Blo_E0B3c_E0EE0B3c_E0EE0NcNtBA_5Child0E0NCIB1O_By_NtNtBE_23nonnegative_array_index21NonNegativeArrayIndexBA_B1m_NCIB44_By_cBpx_cB1m_B3c_NCINvB1Q_7map_resBy_yBpx_B1m_NtNtBE_5error15ArrayIndexErrorNCIBqY_By_By_yB1m_NtNtNtBcx_3num5error13ParseIntErrorNCIBqY_By_By_By_B1m_Bro_INvB3h_6digit1By_B1m_ENCNvBC_26length_limited_array_index0E0INvMNtBcx_3stre5parseyEE0NvYyINtBly_7TryIntoBpx_E8try_intoE0B3c_E0NcNtBA_15ArrayIndexChild0E0NCIB1O_By_cBA_B1m_NCIB2E_By_By_cB1m_Bk9_NCIB2_By_cB1m_TB3c_B41_EE0E0NCNvBC_28wildcard_descendant_selector0E0NCIB2E_By_By_BA_B1m_Bk9_NCIB2_By_BA_B1m_TNCIB1O_By_B5u_BA_B1m_NCIB2_By_B5u_B1m_TB6z_Bbe_EE0NcNtBA_10Descendant0E0NCIB1O_By_Bpx_BA_B1m_Bqx_NcNtBA_20ArrayIndexDescendant0E0EE0E0EE0BG_:
   50|  2.31k|  move |i: I| l.choice(i)
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator3mapBw_Bw_By_B1s_NCINvB1W_9recognizeBw_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1s_NCINvNtB4_8sequence4pairBw_cB2S_B1s_NCINvB1W_6verifyBw_ccB1s_INvNtNtB4_9character8complete7anycharBw_B1s_ENCNvBA_12member_first0E0NCINvNtB4_5multi5many0Bw_cB1s_NCIB49_Bw_ccB1s_B4v_NCNvBA_16member_character0E0E0E0E0NcNtBy_8Borrowed0E0NCINvB3B_9delimitedBw_cBy_cB1s_NCINvB4y_4charBw_B1s_E0NCIB0_Bw_By_B1s_TNCIB7k_Bw_cBy_cB1s_B7M_NCIB1U_Bw_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB2X_6string6StringEBy_B1s_NCINvB1W_3optBw_B9z_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBw_B1s_NCIB1U_Bw_IB2T_NtBA_16MaybeEscapedCharENtBA_19MaybeEscapedCharVecB1s_NCINvB5H_5many1Bw_Bbx_B1s_NCIB0_Bw_Bbx_B1s_TNCIB1U_Bw_cBbx_B1s_NCIB49_Bw_ccB1s_NCINvB4y_7none_ofBw_Bw_B1s_E0NCNvBA_9unescaped0E0NcNtBbx_4Char0E0NCIB1U_Bw_cBbx_B1s_B7M_NcNtBbx_7Escaped0E0EE0E0NcBbV_0E0NCIB0_Bw_Bw_B1s_TNCIB0_Bw_Bw_B1s_TNCINvB1W_5valueBw_Bw_Bw_B1s_NCINvBaw_3tagBw_Bw_B1s_E0E0Bgb_Bgb_Bgb_Bgb_Bgb_Bgb_EE0Bgb_EE0BbV_Bw_cB9z_E0E0NvYBy_INtNtB92_7convert4FromB8X_E4fromE0B7M_E0NCIB7k_Bw_cBy_cB1s_B7M_NCIB1U_Bw_B8X_By_B1s_NCIBa6_Bw_B9z_B1s_NCIBau_Bw_B1s_NCIB2x_Bw_B2S_B1s_NCIBcs_Bw_cB1s_NCIB0_Bw_cB1s_TBdq_B7M_EE0E0E0BfD_Bw_Bw_cB9z_E0E0BhS_E0B7M_E0EE0B7M_E0EEBE_:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altRecINtNtB4_5error5ErrorBw_ETNCINvNtNtB4_9character8complete4charBw_Bz_E0NCINvNtB4_8sequence9delimitedBw_cccBz_BY_BY_BY_E0EECs6TTJfIhyJGW_8rsonpath:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altReBw_INtNtB4_5error5ErrorBw_ETNCIB0_Bw_Bw_BB_TNCINvNtB4_10combinator5valueBw_Bw_Bw_BB_NCINvNtNtB4_5bytes8complete3tagBw_Bw_BB_E0E0B1g_B1g_B1g_B1g_B1g_B1g_EE0B1g_EECs6TTJfIhyJGW_8rsonpath:
   47|  4.62k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  4.62k|  mut l: List,
   49|  4.62k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  4.62k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBw_ETNCINvNtB4_10combinator3mapBw_cBy_B1w_NCINvB20_6verifyBw_ccB1w_NCINvNtNtB4_9character8complete7none_ofBw_Bw_B1w_E0NCNvBA_9unescaped0E0NcNtBy_4Char0E0NCIB1Y_Bw_cBy_B1w_NCINvB30_4charBw_B1w_E0NcNtBy_7Escaped0E0EEBE_:
   47|  2.31k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.31k|  mut l: List,
   49|  2.31k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom6branch3altRecINtNtB4_5error5ErrorBw_ETNCINvNtB4_8sequence8precededBw_ccBz_NCINvNtNtB4_9character8complete4charBw_Bz_E0B1y_E0NCINvB13_9delimitedBw_cccBz_B1y_B1y_B1y_E0EECs6TTJfIhyJGW_8rsonpath:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RNvXs_NtCskh6ql9CB8e_3nom6branchTNCINvNtB6_8sequence8precededReccINtNtB6_5error5ErrorBX_ENCINvNtNtB6_9character8complete4charBX_B11_E0B1p_E0NCINvBA_9delimitedBX_cccB11_B1p_B1p_B1p_E0EINtB4_3AltBX_cB11_E6choiceCs6TTJfIhyJGW_8rsonpath:
  134|  2.31k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.31k|        match self.0.parse(input.clone()) {
  136|  2.31k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  2.31k|      }
_RNCINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBy_ETNCINvNtB6_8sequence8precededBy_cBA_B1u_NCINvNtNtB6_9character8complete4charBy_B1u_E0NCINvNtB6_10combinator3mapBy_By_BA_B1u_NCINvB3k_9recognizeBy_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1u_NCINvB1Y_4pairBy_cB4g_B1u_NCINvB3k_6verifyBy_ccB1u_INvB2B_7anycharBy_B1u_ENCNvBC_12member_first0E0NCINvNtB6_5multi5many0By_cB1u_NCIB5n_By_ccB1u_B5J_NCNvBC_16member_character0E0E0E0E0NcNtBA_8Borrowed0E0E0NCINvB1Y_9delimitedBy_cBA_cB1u_B2w_NCIB2_By_BA_B1u_TNCIB8e_By_cBA_cB1u_B2w_NCIB3i_By_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB4l_6string6StringEBA_B1u_NCINvB3k_3optBy_Baa_B1u_NCINvNtNtB6_5bytes8complete17escaped_transformBy_B1u_NCIB3i_By_IB4h_NtBC_16MaybeEscapedCharENtBC_19MaybeEscapedCharVecB1u_NCINvB6z_5many1By_Bc8_B1u_NCIB2_By_Bc8_B1u_TNCIB3i_By_cBc8_B1u_NCIB5n_By_ccB1u_NCINvB2B_7none_ofBy_By_B1u_E0NCNvBC_9unescaped0E0NcNtBc8_4Char0E0NCIB3i_By_cBc8_B1u_B2w_NcNtBc8_7Escaped0E0EE0E0NcBcw_0E0NCIB2_By_By_B1u_TNCIB2_By_By_B1u_TNCINvB3k_5valueBy_By_By_B1u_NCINvBb7_3tagBy_By_B1u_E0E0BgM_BgM_BgM_BgM_BgM_BgM_EE0BgM_EE0Bcw_By_cBaa_E0E0NvYBA_INtNtB9D_7convert4FromB9y_E4fromE0B2w_E0NCIB8e_By_cBA_cB1u_B2w_NCIB3i_By_B9y_BA_B1u_NCIBaH_By_Baa_B1u_NCIBb5_By_B1u_NCIB3V_By_B4g_B1u_NCIBd3_By_cB1u_NCIB2_By_cB1u_TBe1_B2w_EE0E0E0Bge_By_By_cBaa_E0E0Bit_E0B2w_E0EE0B2w_E0EE0BG_:
   50|  2.31k|  move |i: I| l.choice(i)
_RINvNtCskh6ql9CB8e_3nom6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBw_ETNCINvNtB4_8sequence8precededBw_cBy_B1s_NCINvNtNtB4_9character8complete4charBw_B1s_E0NCINvNtB4_10combinator3mapBw_Bw_By_B1s_NCINvB3i_9recognizeBw_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1s_NCINvB1W_4pairBw_cB4e_B1s_NCINvB3i_6verifyBw_ccB1s_INvB2z_7anycharBw_B1s_ENCNvBA_12member_first0E0NCINvNtB4_5multi5many0Bw_cB1s_NCIB5l_Bw_ccB1s_B5H_NCNvBA_16member_character0E0E0E0E0NcNtBy_8Borrowed0E0E0NCINvB1W_9delimitedBw_cBy_cB1s_B2u_NCIB0_Bw_By_B1s_TNCIB8c_Bw_cBy_cB1s_B2u_NCIB3g_Bw_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB4j_6string6StringEBy_B1s_NCINvB3i_3optBw_Ba8_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBw_B1s_NCIB3g_Bw_IB4f_NtBA_16MaybeEscapedCharENtBA_19MaybeEscapedCharVecB1s_NCINvB6x_5many1Bw_Bc6_B1s_NCIB0_Bw_Bc6_B1s_TNCIB3g_Bw_cBc6_B1s_NCIB5l_Bw_ccB1s_NCINvB2z_7none_ofBw_Bw_B1s_E0NCNvBA_9unescaped0E0NcNtBc6_4Char0E0NCIB3g_Bw_cBc6_B1s_B2u_NcNtBc6_7Escaped0E0EE0E0NcBcu_0E0NCIB0_Bw_Bw_B1s_TNCIB0_Bw_Bw_B1s_TNCINvB3i_5valueBw_Bw_Bw_B1s_NCINvBb5_3tagBw_Bw_B1s_E0E0BgK_BgK_BgK_BgK_BgK_BgK_EE0BgK_EE0Bcu_Bw_cBa8_E0E0NvYBy_INtNtB9B_7convert4FromB9w_E4fromE0B2u_E0NCIB8c_Bw_cBy_cB1s_B2u_NCIB3g_Bw_B9w_By_B1s_NCIBaF_Bw_Ba8_B1s_NCIBb3_Bw_B1s_NCIB3T_Bw_B4e_B1s_NCIBd1_Bw_cB1s_NCIB0_Bw_cB1s_TBdZ_B2u_EE0E0E0Bgc_Bw_Bw_cBa8_E0E0Bir_E0B2u_E0EE0B2u_E0EEBE_:
   47|  1.15k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.15k|  mut l: List,
   49|  1.15k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.15k|}
_RNvXs_NtCskh6ql9CB8e_3nom6branchTNCINvNtNtB6_9character8complete4charReINtNtB6_5error5ErrorB15_EE0NCINvNtB6_8sequence9delimitedB15_cccB17_Bv_Bv_Bv_E0EINtB4_3AltB15_cB17_E6choiceCs6TTJfIhyJGW_8rsonpath:
  134|  1.15k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.15k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.15k|          res => res,
  138|       |        }
  139|  1.15k|      }

_RNCINvNtNtCskh6ql9CB8e_3nom5bytes8complete3tagReBI_INtNtB8_5error5ErrorBI_EE0Cs6TTJfIhyJGW_8rsonpath:
   39|  3.47k|  move |i: Input| {
   40|  3.47k|    let tag_len = tag.input_len();
   41|  3.47k|    let t = tag.clone();
   42|  3.47k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  1.15k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  2.31k|        let e: ErrorKind = ErrorKind::Tag;
   46|  2.31k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  3.47k|    res
   50|  3.47k|  }
_RINvNtNtCskh6ql9CB8e_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBV_ENCINvNtB6_10combinator9recognizeBV_INtNtCsc6jWpmc7Dho_5alloc3vec3VeccEBX_NCINvNtB6_5multi5many1BV_cBX_NCINvNtB6_6branch3altBV_cBX_TNCINvB1q_6verifyBV_ccBX_NCINvNtNtB6_9character8complete7none_ofBV_BV_BX_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0E0NCINvB3V_4charBV_BX_E0EE0E0E0NCIB32_BV_BV_BX_TNCIB32_BV_BV_BX_TNCINvB1q_5valueBV_BV_BV_BX_NCINvB2_3tagBV_BV_BX_E0E0B6A_B6A_B6A_B6A_B6A_B6A_EE0B6A_EE0BV_BV_cNtNtB1Z_6string6StringEB4M_:
  623|  2.31k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  2.31k|  mut normal: F,
  625|  2.31k|  control_char: char,
  626|  2.31k|  mut transform: G,
  627|  2.31k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  2.31k|where
  629|  2.31k|  Input: Clone
  630|  2.31k|    + crate::traits::Offset
  631|  2.31k|    + InputLength
  632|  2.31k|    + InputTake
  633|  2.31k|    + InputTakeAtPosition
  634|  2.31k|    + Slice<RangeFrom<usize>>
  635|  2.31k|    + InputIter,
  636|  2.31k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  2.31k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  2.31k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  2.31k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  2.31k|  F: Parser<Input, O1, Error>,
  641|  2.31k|  G: Parser<Input, O2, Error>,
  642|  2.31k|  Error: ParseError<Input>,
  643|  2.31k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  2.31k|}
_RINvNtNtCskh6ql9CB8e_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBV_ENCINvNtB6_10combinator3mapBV_INtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharENtB2n_19MaybeEscapedCharVecBX_NCINvNtB6_5multi5many1BV_B2l_BX_NCINvNtB6_6branch3altBV_B2l_BX_TNCIB1o_BV_cB2l_BX_NCINvB1q_6verifyBV_ccBX_NCINvNtNtB6_9character8complete7none_ofBV_BV_BX_E0NCNvB2n_9unescaped0E0NcNtB2l_4Char0E0NCIB1o_BV_cB2l_BX_NCINvB5B_4charBV_BX_E0NcNtB2l_7Escaped0E0EE0E0NcB3k_0E0NCIB4n_BV_BV_BX_TNCIB4n_BV_BV_BX_TNCINvB1q_5valueBV_BV_BV_BX_NCINvB2_3tagBV_BV_BX_E0E0B8E_B8E_B8E_B8E_B8E_B8E_EE0B8E_EE0B3k_BV_cNtNtB1T_6string6StringEB2r_:
  623|  2.31k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  2.31k|  mut normal: F,
  625|  2.31k|  control_char: char,
  626|  2.31k|  mut transform: G,
  627|  2.31k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  2.31k|where
  629|  2.31k|  Input: Clone
  630|  2.31k|    + crate::traits::Offset
  631|  2.31k|    + InputLength
  632|  2.31k|    + InputTake
  633|  2.31k|    + InputTakeAtPosition
  634|  2.31k|    + Slice<RangeFrom<usize>>
  635|  2.31k|    + InputIter,
  636|  2.31k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  2.31k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  2.31k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  2.31k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  2.31k|  F: Parser<Input, O1, Error>,
  641|  2.31k|  G: Parser<Input, O2, Error>,
  642|  2.31k|  Error: ParseError<Input>,
  643|  2.31k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  2.31k|}
_RINvNtNtCskh6ql9CB8e_3nom5bytes8complete3tagReBG_INtNtB6_5error5ErrorBG_EECs6TTJfIhyJGW_8rsonpath:
   32|  39.3k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  39.3k|  tag: T,
   34|  39.3k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  39.3k|where
   36|  39.3k|  Input: InputTake + Compare<T>,
   37|  39.3k|  T: InputLength + Clone,
   38|  39.3k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  39.3k|}

_RNCINvNtNtCskh6ql9CB8e_3nom9character8complete4charReINtNtB8_5error5ErrorBN_EE0Cs6TTJfIhyJGW_8rsonpath:
   37|  15.0k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  15.0k|  }) {
   41|  4.62k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  10.4k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  15.0k|  }
_RINvNtNtCskh6ql9CB8e_3nom9character8complete7anycharReINtNtB6_5error5ErrorBO_EECs6TTJfIhyJGW_8rsonpath:
  309|  1.15k|pub fn anychar<T, E: ParseError<T>>(input: T) -> IResult<T, char, E>
  310|  1.15k|where
  311|  1.15k|  T: InputIter + InputLength + Slice<RangeFrom<usize>>,
  312|  1.15k|  <T as InputIter>::Item: AsChar,
  313|  1.15k|{
  314|  1.15k|  let mut it = input.iter_indices();
  315|  1.15k|  match it.next() {
  316|      0|    None => Err(Err::Error(E::from_error_kind(input, ErrorKind::Eof))),
  317|  1.15k|    Some((_, c)) => match it.next() {
  318|      0|      None => Ok((input.slice(input.input_len()..), c.as_char())),
  319|  1.15k|      Some((idx, _)) => Ok((input.slice(idx..), c.as_char())),
  320|       |    },
  321|       |  }
  322|  1.15k|}
_RNCNCINvNtNtCskh6ql9CB8e_3nom9character8complete4charReINtNtBa_5error5ErrorBP_EE00Cs6TTJfIhyJGW_8rsonpath:
   37|  9.25k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  9.25k|    let b = t.as_char() == c;
   39|  9.25k|    (&c, b)
   40|  9.25k|  }) {
_RINvNtNtCskh6ql9CB8e_3nom9character8complete4charReINtNtB6_5error5ErrorBL_EECs6TTJfIhyJGW_8rsonpath:
   32|  35.8k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  35.8k|where
   34|  35.8k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  35.8k|  <I as InputIter>::Item: AsChar,
   36|  35.8k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  35.8k|}
_RINvNtNtCskh6ql9CB8e_3nom9character8complete7none_ofReBO_INtNtB6_5error5ErrorBO_EECs6TTJfIhyJGW_8rsonpath:
  113|  4.62k|pub fn none_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
  114|  4.62k|where
  115|  4.62k|  I: Slice<RangeFrom<usize>> + InputIter,
  116|  4.62k|  <I as InputIter>::Item: AsChar + Copy,
  117|  4.62k|  T: FindToken<<I as InputIter>::Item>,
  118|  4.62k|{
  119|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {
  120|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
  121|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::NoneOf))),
  122|       |  }
  123|  4.62k|}

_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBD_ENCINvNtB6_6branch3altBD_cB1s_TNCINvNtB6_8sequence8precededBD_ccB1s_NCINvNtNtB6_9character8complete4charBD_B1s_E0B2V_E0NCINvB2p_9delimitedBD_cccB1s_B2V_B2V_B2V_E0EE0NCNvBI_23wildcard_child_selector0E0BM_:
   78|  2.31k|  move |input: I| {
   79|  2.31k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReINtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringENtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBB_ENCINvB2_3optBB_B1f_B2M_NCINvNtNtB4_5bytes8complete17escaped_transformBB_B2M_NCIB0_BB_INtNtB1j_3vec3VecNtB1U_16MaybeEscapedCharENtB1U_19MaybeEscapedCharVecB2M_NCINvNtB4_5multi5many1BB_B4O_B2M_NCINvNtB4_6branch3altBB_B4O_B2M_TNCIB0_BB_cB4O_B2M_NCINvB2_6verifyBB_ccB2M_NCINvNtNtB4_9character8complete7none_ofBB_BB_B2M_E0NCNvB1U_9unescaped0E0NcNtB4O_4Char0E0NCIB0_BB_cB4O_B2M_NCINvB7x_4charBB_B2M_E0NcNtB4O_7Escaped0E0EE0E0NcB5d_0E0NCIB6i_BB_BB_B2M_TNCIB6i_BB_BB_B2M_TNCINvB2_5valueBB_BB_BB_B2M_NCINvB3C_3tagBB_BB_B2M_E0E0BaE_BaE_BaE_BaE_BaE_BaE_EE0BaE_EE0B5d_BB_cB1f_E0E0NvYB1S_INtNtBI_7convert4FromBD_E4fromEB1Y_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReBB_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBB_ENCINvB2_9recognizeBB_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1A_NCINvNtB4_8sequence4pairBB_cB2l_B1A_NCINvB2_6verifyBB_ccB1A_INvNtNtB4_9character8complete7anycharBB_B1A_ENCNvBI_12member_first0E0NCINvNtB4_5multi5many0BB_cB1A_NCIB3C_BB_ccB1A_B3X_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0EBM_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator5valueReBD_BD_INtNtB4_5error5ErrorBD_ENCINvNtNtB4_5bytes8complete3tagBD_BD_BL_E0ECs6TTJfIhyJGW_8rsonpath:
  453|  37.0k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  37.0k|  val: O1,
  455|  37.0k|  mut parser: F,
  456|  37.0k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  37.0k|where
  458|  37.0k|  F: Parser<I, O2, E>,
  459|  37.0k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  37.0k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringNtBH_5TokenINtNtB6_5error5ErrorBD_ENCINvNtB6_6branch3altBD_BF_B1K_TNCINvNtB6_8sequence8precededBD_cBF_B1K_NCINvNtNtB6_9character8complete4charBD_B1K_E0NCIB2_BD_BD_BF_B1K_NCINvB4_9recognizeBD_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1K_NCINvB2J_4pairBD_cB4G_B1K_NCINvB4_6verifyBD_ccB1K_INvB3m_7anycharBD_B1K_ENCNvBH_12member_first0E0NCINvNtB6_5multi5many0BD_cB1K_NCIB5N_BD_ccB1K_B68_NCNvBH_16member_character0E0E0E0E0NcNtBF_8Borrowed0E0E0NCINvB2J_9delimitedBD_cBF_cB1K_B3h_NCIB2b_BD_BF_B1K_TNCIB8D_BD_cBF_cB1K_B3h_NCIB2_BD_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB4L_6string6StringEBF_B1K_NCINvB4_3optBD_Baz_B1K_NCINvNtNtB6_5bytes8complete17escaped_transformBD_B1K_NCIB2_BD_IB4H_NtBH_16MaybeEscapedCharENtBH_19MaybeEscapedCharVecB1K_NCINvB6Y_5many1BD_Bcv_B1K_NCIB2b_BD_Bcv_B1K_TNCIB2_BD_cBcv_B1K_NCIB5N_BD_ccB1K_NCINvB3m_7none_ofBD_BD_B1K_E0NCNvBH_9unescaped0E0NcNtBcv_4Char0E0NCIB2_BD_cBcv_B1K_B3h_NcNtBcv_7Escaped0E0EE0E0NcBcT_0E0NCIB2b_BD_BD_B1K_TNCIB2b_BD_BD_B1K_TNCINvB4_5valueBD_BD_BD_B1K_NCINvBbv_3tagBD_BD_B1K_E0E0Bha_Bha_Bha_Bha_Bha_Bha_EE0Bha_EE0BcT_BD_cBaz_E0E0NvYBF_INtNtBa2_7convert4FromB9X_E4fromE0B3h_E0NCIB8D_BD_cBF_cB1K_B3h_NCIB2_BD_B9X_BF_B1K_NCIBb6_BD_Baz_B1K_NCIBbt_BD_B1K_NCIB4m_BD_B4G_B1K_NCIBdq_BD_cB1K_NCIB2b_BD_cB1K_TBeo_B3h_EE0E0E0BgA_BD_BD_cBaz_E0E0BiQ_E0B3h_E0EE0B3h_E0EE0NcNtB1z_5Child0E0BL_:
   78|  2.31k|  move |input: I| {
   79|  2.31k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReINtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringENtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBB_ENCINvB2_3optBB_B1f_B2M_NCINvNtNtB4_5bytes8complete17escaped_transformBB_B2M_NCINvB2_9recognizeBB_INtNtB1j_3vec3VeccEB2M_NCINvNtB4_5multi5many1BB_cB2M_NCINvNtB4_6branch3altBB_cB2M_TNCINvB2_6verifyBB_ccB2M_NCINvNtNtB4_9character8complete7none_ofBB_BB_B2M_E0NCNvB1U_9unescaped0E0NCINvB6x_4charBB_B2M_E0EE0E0E0NCIB5D_BB_BB_B2M_TNCIB5D_BB_BB_B2M_TNCINvB2_5valueBB_BB_BB_B2M_NCINvB3C_3tagBB_BB_B2M_E0E0B8G_B8G_B8G_B8G_B8G_B8G_EE0B8G_EE0BB_BB_cB1f_E0E0NvYB1S_INtNtBI_7convert4FromBD_E4fromEB1Y_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBH_6parser5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_8sequence9delimitedBB_cBD_cB2i_NCINvNtNtB4_9character8complete4charBB_B2i_E0NCINvB2_7map_resBB_yBD_B2i_NtNtBH_5error15ArrayIndexErrorNCIB47_BB_BB_yB2i_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB47_BB_BB_BB_B2i_B4v_INvB3q_6digit1BB_B2i_ENCNvB20_26length_limited_array_index0E0INvMNtB5n_3stre5parseyEE0NvYyINtNtB5n_7convert7TryIntoBD_E8try_intoE0B3l_E0NcNtB1Y_20ArrayIndexDescendant0EBJ_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom10combinator6verifyReccINtNtB4_5error5ErrorBE_EINvNtNtB4_9character8complete7anycharBE_BI_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0EB1W_:
  417|  2.31k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  2.31k|  mut first: F,
  419|  2.31k|  second: G,
  420|  2.31k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  2.31k|where
  422|  2.31k|  F: Parser<I, O1, E>,
  423|  2.31k|  G: Fn(&O2) -> bool,
  424|  2.31k|  O1: Borrow<O2>,
  425|  2.31k|  O2: ?Sized,
  426|  2.31k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator9recognizeReTcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEINtNtB4_5error5ErrorBH_ENCINvNtB4_8sequence4pairBH_cBL_B1l_NCINvB2_6verifyBH_ccB1l_INvNtNtB4_9character8complete7anycharBH_B1l_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0BH_cB1l_NCIB2l_BH_ccB1l_B2G_NCNvB3t_16member_character0E0E0E0EB3x_:
  506|  2.31k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  2.31k|  mut parser: F,
  508|  2.31k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  2.31k|where
  510|  2.31k|  F: Parser<I, O, E>,
  511|  2.31k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBB_ENCINvNtNtB4_9character8complete4charBB_B1q_E0NCNvBG_8jsonpath0EBK_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapReBD_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBD_ENCINvB4_9recognizeBD_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1C_NCINvNtB6_8sequence4pairBD_cB2n_B1C_NCINvB4_6verifyBD_ccB1C_INvNtNtB6_9character8complete7anycharBD_B1C_ENCNvBK_12member_first0E0NCINvNtB6_5multi5many0BD_cB1C_NCIB3E_BD_ccB1C_B3Z_NCNvBK_16member_character0E0E0E0E0NcNtBI_8Borrowed0E0BO_:
   78|  1.15k|  move |input: I| {
   79|  1.15k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.15k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_8sequence8precededBB_BB_cB1q_NCINvNtNtB4_5bytes8complete3tagBB_BB_B1q_E0NCINvNtB4_6branch3altBB_cB1q_TNCINvNtNtB4_9character8complete4charBB_B1q_E0NCINvB1T_9delimitedBB_cccB1q_B3C_B3C_B3C_E0EE0E0NCNvBG_28wildcard_descendant_selector0EBK_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringNtBF_5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_6branch3altBB_BD_B1I_TNCIB0_BB_BB_BD_B1I_NCINvB2_9recognizeBB_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1I_NCINvNtB4_8sequence4pairBB_cB3i_B1I_NCINvB2_6verifyBB_ccB1I_INvNtNtB4_9character8complete7anycharBB_B1I_ENCNvBF_12member_first0E0NCINvNtB4_5multi5many0BB_cB1I_NCIB4z_BB_ccB1I_B4U_NCNvBF_16member_character0E0E0E0E0NcNtBD_8Borrowed0E0NCINvB41_9delimitedBB_cBD_cB1I_NCINvB4X_4charBB_B1I_E0NCIB29_BB_BD_B1I_TNCIB7J_BB_cBD_cB1I_B8b_NCIB0_BB_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB3n_6string6StringEBD_B1I_NCINvB2_3optBB_B9Y_B1I_NCINvNtNtB4_5bytes8complete17escaped_transformBB_B1I_NCIB0_BB_IB3j_NtBF_16MaybeEscapedCharENtBF_19MaybeEscapedCharVecB1I_NCINvB66_5many1BB_BbU_B1I_NCIB29_BB_BbU_B1I_TNCIB0_BB_cBbU_B1I_NCIB4z_BB_ccB1I_NCINvB4X_7none_ofBB_BB_B1I_E0NCNvBF_9unescaped0E0NcNtBbU_4Char0E0NCIB0_BB_cBbU_B1I_B8b_NcNtBbU_7Escaped0E0EE0E0NcBci_0E0NCIB29_BB_BB_B1I_TNCIB29_BB_BB_B1I_TNCINvB2_5valueBB_BB_BB_B1I_NCINvBaU_3tagBB_BB_B1I_E0E0Bgz_Bgz_Bgz_Bgz_Bgz_Bgz_EE0Bgz_EE0Bci_BB_cB9Y_E0E0NvYBD_INtNtB9r_7convert4FromB9m_E4fromE0B8b_E0NCIB7J_BB_cBD_cB1I_B8b_NCIB0_BB_B9m_BD_B1I_NCIBav_BB_B9Y_B1I_NCIBaS_BB_B1I_NCIB2Y_BB_B3i_B1I_NCIBcP_BB_cB1I_NCIB29_BB_cB1I_TBdN_B8b_EE0E0E0BfZ_BB_BB_cB9Y_E0E0Bif_E0B8b_E0EE0B8b_E0EE0NcNtB1x_10Descendant0EBJ_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom10combinator7map_resReyNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexINtNtB4_5error5ErrorBF_ENtNtBM_5error15ArrayIndexErrorNCIB0_BF_BF_yB23_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB0_BF_BF_BF_B23_B2r_INvNtNtB4_9character8complete6digit1BF_B23_ENCNvNtBM_6parser26length_limited_array_index0E0INvMNtB3i_3stre5parseyEE0NvYyINtNtB3i_7convert7TryIntoBI_E8try_intoEBO_:
  104|  2.31k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  2.31k|  mut parser: F,
  106|  2.31k|  mut f: G,
  107|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  2.31k|where
  109|  2.31k|  F: Parser<I, O1, E>,
  110|  2.31k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  2.31k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3optReNtNtCsc6jWpmc7Dho_5alloc6string6StringINtNtB4_5error5ErrorBB_ENCINvNtNtB4_5bytes8complete17escaped_transformBB_B1f_NCINvB2_3mapBB_INtNtBH_3vec3VecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharENtB31_19MaybeEscapedCharVecB1f_NCINvNtB4_5multi5many1BB_B2Z_B1f_NCINvNtB4_6branch3altBB_B2Z_B1f_TNCIB2x_BB_cB2Z_B1f_NCINvB2_6verifyBB_ccB1f_NCINvNtNtB4_9character8complete7none_ofBB_BB_B1f_E0NCNvB31_9unescaped0E0NcNtB2Z_4Char0E0NCIB2x_BB_cB2Z_B1f_NCINvB6j_4charBB_B1f_E0NcNtB2Z_7Escaped0E0EE0E0NcB3Y_0E0NCIB53_BB_BB_B1f_TNCIB53_BB_BB_B1f_TNCINvB2_5valueBB_BB_BB_B1f_NCINvB1I_3tagBB_BB_B1f_E0E0B9r_B9r_B9r_B9r_B9r_B9r_EE0B9r_EE0B3Y_BB_cBD_E0EB35_:
  239|  2.31k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  2.31k|where
  241|  2.31k|  F: Parser<I, O, E>,
  242|  2.31k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator9recognizeReINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEINtNtB4_5error5ErrorBH_ENCINvNtB4_5multi5many1BH_cB1i_NCINvNtB4_6branch3altBH_cB1i_TNCINvB2_6verifyBH_ccB1i_NCINvNtNtB4_9character8complete7none_ofBH_BH_B1i_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0E0NCINvB37_4charBH_B1i_E0EE0E0EB3Z_:
  506|  2.31k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  2.31k|  mut parser: F,
  508|  2.31k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  2.31k|where
  510|  2.31k|  F: Parser<I, O, E>,
  511|  2.31k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBB_ENCINvB2_6verifyBB_ccB1C_NCINvNtNtB4_9character8complete7none_ofBB_BB_B1C_E0NCNvBG_9unescaped0E0NcNtBE_4Char0EBK_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringNtBF_5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_6branch3altBB_BD_B1I_TNCINvNtB4_8sequence8precededBB_cBD_B1I_NCINvNtNtB4_9character8complete4charBB_B1I_E0NCIB0_BB_BB_BD_B1I_NCINvB2_9recognizeBB_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1I_NCINvB2H_4pairBB_cB4E_B1I_NCINvB2_6verifyBB_ccB1I_INvB3k_7anycharBB_B1I_ENCNvBF_12member_first0E0NCINvNtB4_5multi5many0BB_cB1I_NCIB5L_BB_ccB1I_B66_NCNvBF_16member_character0E0E0E0E0NcNtBD_8Borrowed0E0E0NCINvB2H_9delimitedBB_cBD_cB1I_B3f_NCIB29_BB_BD_B1I_TNCIB8B_BB_cBD_cB1I_B3f_NCIB0_BB_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB4J_6string6StringEBD_B1I_NCINvB2_3optBB_Bax_B1I_NCINvNtNtB4_5bytes8complete17escaped_transformBB_B1I_NCIB0_BB_IB4F_NtBF_16MaybeEscapedCharENtBF_19MaybeEscapedCharVecB1I_NCINvB6W_5many1BB_Bct_B1I_NCIB29_BB_Bct_B1I_TNCIB0_BB_cBct_B1I_NCIB5L_BB_ccB1I_NCINvB3k_7none_ofBB_BB_B1I_E0NCNvBF_9unescaped0E0NcNtBct_4Char0E0NCIB0_BB_cBct_B1I_B3f_NcNtBct_7Escaped0E0EE0E0NcBcR_0E0NCIB29_BB_BB_B1I_TNCIB29_BB_BB_B1I_TNCINvB2_5valueBB_BB_BB_B1I_NCINvBbt_3tagBB_BB_B1I_E0E0Bh8_Bh8_Bh8_Bh8_Bh8_Bh8_EE0Bh8_EE0BcR_BB_cBax_E0E0NvYBD_INtNtBa0_7convert4FromB9V_E4fromE0B3f_E0NCIB8B_BB_cBD_cB1I_B3f_NCIB0_BB_B9V_BD_B1I_NCIBb4_BB_Bax_B1I_NCIBbr_BB_B1I_NCIB4k_BB_B4E_B1I_NCIBdo_BB_cB1I_NCIB29_BB_cB1I_TBem_B3f_EE0E0E0Bgy_BB_BB_cBax_E0E0BiO_E0B3f_E0EE0B3f_E0EE0NcNtB1x_5Child0EBJ_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator3optReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBD_ENCINvB4_3mapBD_cBF_B1r_NCINvNtNtB6_9character8complete4charBD_B1r_E0NCNvBH_8jsonpath0E0E0BL_:
  243|  1.15k|  move |input: I| {
  244|  1.15k|    let i = input.clone();
  245|  1.15k|    match f.parse(input) {
  246|  1.15k|      Ok((i, o)) => Ok((i, Some(o))),
  247|      0|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  1.15k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator7map_resReBF_BF_INtNtB4_5error5ErrorBF_ENtNtNtCs6TTJfIhyJGW_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BF_BN_ENCNvNtB1f_6parser26length_limited_array_index0EB1h_:
  104|  2.31k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  2.31k|  mut parser: F,
  106|  2.31k|  mut f: G,
  107|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  2.31k|where
  109|  2.31k|  F: Parser<I, O1, E>,
  110|  2.31k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  2.31k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_6branch3altBB_cB1q_TNCINvNtB4_8sequence8precededBB_ccB1q_NCINvNtNtB4_9character8complete4charBB_B1q_E0B2T_E0NCINvB2n_9delimitedBB_cccB1q_B2T_B2T_B2T_E0EE0NCNvBG_23wildcard_child_selector0EBK_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBD_ENCINvNtB6_8sequence8precededBD_BD_cB1s_NCINvNtNtB6_5bytes8complete3tagBD_BD_B1s_E0NCINvNtB6_6branch3altBD_cB1s_TNCINvNtNtB6_9character8complete4charBD_B1s_E0NCINvB1V_9delimitedBD_cccB1s_B3E_B3E_B3E_E0EE0E0NCNvBI_28wildcard_descendant_selector0E0BM_:
   78|  2.31k|  move |input: I| {
   79|  2.31k|    let (input, o1) = parser.parse(input)?;
   80|  1.15k|    Ok((input, f(o1)))
   81|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBH_6parser5TokenINtNtB4_5error5ErrorBB_ENCINvNtB4_8sequence9delimitedBB_cBD_cB2i_NCINvNtNtB4_9character8complete4charBB_B2i_E0NCINvB2_7map_resBB_yBD_B2i_NtNtBH_5error15ArrayIndexErrorNCIB47_BB_BB_yB2i_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB47_BB_BB_BB_B2i_B4v_INvB3q_6digit1BB_B2i_ENCNvB20_26length_limited_array_index0E0INvMNtB5n_3stre5parseyEE0NvYyINtNtB5n_7convert7TryIntoBD_E8try_intoE0B3l_E0NcNtB1Y_15ArrayIndexChild0EBJ_:
   73|  1.15k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.15k|where
   75|  1.15k|  F: Parser<I, O1, E>,
   76|  1.15k|  G: FnMut(O1) -> O2,
   77|  1.15k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom10combinator6verifyReccINtNtB4_5error5ErrorBE_EINvNtNtB4_9character8complete7anycharBE_BI_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16member_character0EB1W_:
  417|  2.31k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  2.31k|  mut first: F,
  419|  2.31k|  second: G,
  420|  2.31k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  2.31k|where
  422|  2.31k|  F: Parser<I, O1, E>,
  423|  2.31k|  G: Fn(&O2) -> bool,
  424|  2.31k|  O1: Borrow<O2>,
  425|  2.31k|  O2: ?Sized,
  426|  2.31k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator7map_resReBF_yINtNtB4_5error5ErrorBF_ENtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB0_BF_BF_BF_BL_NtNtNtCs6TTJfIhyJGW_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BF_BL_ENCNvNtB2j_6parser26length_limited_array_index0E0INvMNtB1f_3stre5parseyEEB2l_:
  104|  2.31k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  2.31k|  mut parser: F,
  106|  2.31k|  mut f: G,
  107|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  2.31k|where
  109|  2.31k|  F: Parser<I, O1, E>,
  110|  2.31k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  2.31k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapReINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharENtB1c_19MaybeEscapedCharVecINtNtB4_5error5ErrorBB_ENCINvNtB4_5multi5many1BB_B1a_B2A_NCINvNtB4_6branch3altBB_B1a_B2A_TNCIB0_BB_cB1a_B2A_NCINvB2_6verifyBB_ccB2A_NCINvNtNtB4_9character8complete7none_ofBB_BB_B2A_E0NCNvB1c_9unescaped0E0NcNtB1a_4Char0E0NCIB0_BB_cB1a_B2A_NCINvB4N_4charBB_B2A_E0NcNtB1a_7Escaped0E0EE0E0NcB29_0EB1g_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3optReNtNtCsc6jWpmc7Dho_5alloc6string6StringINtNtB4_5error5ErrorBB_ENCINvNtNtB4_5bytes8complete17escaped_transformBB_B1f_NCINvB2_9recognizeBB_INtNtBH_3vec3VeccEB1f_NCINvNtB4_5multi5many1BB_cB1f_NCINvNtB4_6branch3altBB_cB1f_TNCINvB2_6verifyBB_ccB1f_NCINvNtNtB4_9character8complete7none_ofBB_BB_B1f_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0E0NCINvB4C_4charBB_B1f_E0EE0E0E0NCIB3I_BB_BB_B1f_TNCIB3I_BB_BB_B1f_TNCINvB2_5valueBB_BB_BB_B1f_NCINvB1I_3tagBB_BB_B1f_E0E0B7l_B7l_B7l_B7l_B7l_B7l_EE0B7l_EE0BB_BB_cBD_E0EB5u_:
  239|  2.31k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  2.31k|where
  241|  2.31k|  F: Parser<I, O, E>,
  242|  2.31k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBB_ENCINvNtNtB4_9character8complete4charBB_B1C_E0NcNtBE_7Escaped0EBK_:
   73|  2.31k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.31k|where
   75|  2.31k|  F: Parser<I, O1, E>,
   76|  2.31k|  G: FnMut(O1) -> O2,
   77|  2.31k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom10combinator3optReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBB_ENCINvB2_3mapBB_cBD_B1p_NCINvNtNtB4_9character8complete4charBB_B1p_E0NCNvBF_8jsonpath0E0EBJ_:
  239|  1.15k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.15k|where
  241|  1.15k|  F: Parser<I, O, E>,
  242|  1.15k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator6verifyReccINtNtB6_5error5ErrorBG_EINvNtNtB6_9character8complete7anycharBG_BK_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0B1Y_:
  427|  1.15k|  move |input: I| {
  428|  1.15k|    let i = input.clone();
  429|  1.15k|    let (input, o) = first.parse(input)?;
  430|       |
  431|  1.15k|    if second(o.borrow()) {
  432|      0|      Ok((input, o))
  433|       |    } else {
  434|  1.15k|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|  1.15k|  }
_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBD_ENCINvNtNtB6_9character8complete4charBD_B1s_E0NCNvBI_8jsonpath0E0BM_:
   78|  1.15k|  move |input: I| {
   79|  1.15k|    let (input, o1) = parser.parse(input)?;
   80|  1.15k|    Ok((input, f(o1)))
   81|  1.15k|  }
_RNCINvNtCskh6ql9CB8e_3nom10combinator9recognizeReTcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEINtNtB6_5error5ErrorBJ_ENCINvNtB6_8sequence4pairBJ_cBN_B1n_NCINvB4_6verifyBJ_ccB1n_INvNtNtB6_9character8complete7anycharBJ_B1n_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BJ_cB1n_NCIB2n_BJ_ccB1n_B2I_NCNvB3v_16member_character0E0E0E0E0B3z_:
  512|  1.15k|  move |input: I| {
  513|  1.15k|    let i = input.clone();
  514|  1.15k|    match parser.parse(i) {
  515|      0|      Ok((i, _)) => {
  516|      0|        let index = input.offset(&i);
  517|      0|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  1.15k|      Err(e) => Err(e),
  520|       |    }
  521|  1.15k|  }
_RINvNtCskh6ql9CB8e_3nom10combinator6verifyReccINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete7none_ofBE_BE_BI_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0EB22_:
  417|  4.62k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  4.62k|  mut first: F,
  419|  4.62k|  second: G,
  420|  4.62k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  4.62k|where
  422|  4.62k|  F: Parser<I, O1, E>,
  423|  4.62k|  G: Fn(&O2) -> bool,
  424|  4.62k|  O1: Borrow<O2>,
  425|  4.62k|  O2: ?Sized,
  426|  4.62k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  4.62k|}
_RNCINvNtCskh6ql9CB8e_3nom10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBJ_6parser5TokenINtNtB6_5error5ErrorBD_ENCINvNtB6_8sequence9delimitedBD_cBF_cB2k_NCINvNtNtB6_9character8complete4charBD_B2k_E0NCINvB4_7map_resBD_yBF_B2k_NtNtBJ_5error15ArrayIndexErrorNCIB49_BD_BD_yB2k_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB49_BD_BD_BD_B2k_B4x_INvB3s_6digit1BD_B2k_ENCNvB22_26length_limited_array_index0E0INvMNtB5p_3stre5parseyEE0NvYyINtNtB5p_7convert7TryIntoBF_E8try_intoE0B3n_E0NcNtB20_15ArrayIndexChild0E0BL_:
   78|  2.31k|  move |input: I| {
   79|  2.31k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  2.31k|  }

_RNvXs_NtCskh6ql9CB8e_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBF_E15from_error_kindCs6TTJfIhyJGW_8rsonpath:
   73|  13.8k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  13.8k|    Error { input, code: kind }
   75|  13.8k|  }
_RNvYINtNtCskh6ql9CB8e_3nom5error5ErrorReEINtB5_10ParseErrorBA_E2orCs6TTJfIhyJGW_8rsonpath:
   32|  11.5k|  fn or(self, other: Self) -> Self {
   33|  11.5k|    other
   34|  11.5k|  }
_RNvYINtNtCskh6ql9CB8e_3nom5error5ErrorReEINtB5_10ParseErrorBA_E9from_charCs6TTJfIhyJGW_8rsonpath:
   26|  10.4k|  fn from_char(input: I, _: char) -> Self {
   27|  10.4k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  10.4k|  }
_RNvXs_NtCskh6ql9CB8e_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBF_E6appendCs6TTJfIhyJGW_8rsonpath:
   77|  5.78k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  5.78k|    other
   79|  5.78k|  }

_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBS_ETNCINvNtB7_8sequence8precededBS_cBU_B1O_NCINvNtNtB7_9character8complete4charBS_B1O_E0NCINvNtB7_10combinator3mapBS_BS_BU_B1O_NCINvB3E_9recognizeBS_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1O_NCINvB2i_4pairBS_cB4A_B1O_NCINvB3E_6verifyBS_ccB1O_INvB2V_7anycharBS_B1O_ENCNvBW_12member_first0E0NCINvNtB7_5multi5many0BS_cB1O_NCIB5H_BS_ccB1O_B63_NCNvBW_16member_character0E0E0E0E0NcNtBU_8Borrowed0E0E0NCINvB2i_9delimitedBS_cBU_cB1O_B2Q_NCIBA_BS_BU_B1O_TNCIB8y_BS_cBU_cB1O_B2Q_NCIB3C_BS_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB4F_6string6StringEBU_B1O_NCINvB3E_3optBS_Bau_B1O_NCINvNtNtB7_5bytes8complete17escaped_transformBS_B1O_NCIB3C_BS_IB4B_NtBW_16MaybeEscapedCharENtBW_19MaybeEscapedCharVecB1O_NCINvB6T_5many1BS_Bcs_B1O_NCIBA_BS_Bcs_B1O_TNCIB3C_BS_cBcs_B1O_NCIB5H_BS_ccB1O_NCINvB2V_7none_ofBS_BS_B1O_E0NCNvBW_9unescaped0E0NcNtBcs_4Char0E0NCIB3C_BS_cBcs_B1O_B2Q_NcNtBcs_7Escaped0E0EE0E0NcBcQ_0E0NCIBA_BS_BS_B1O_TNCIBA_BS_BS_B1O_TNCINvB3E_5valueBS_BS_BS_B1O_NCINvBbr_3tagBS_BS_B1O_E0E0Bh6_Bh6_Bh6_Bh6_Bh6_Bh6_EE0Bh6_EE0BcQ_BS_cBau_E0E0NvYBU_INtNtB9X_7convert4FromB9S_E4fromE0B2Q_E0NCIB8y_BS_cBU_cB1O_B2Q_NCIB3C_BS_B9S_BU_B1O_NCIBb1_BS_Bau_B1O_NCIBbp_BS_B1O_NCIB4f_BS_B4A_B1O_NCIBdn_BS_cB1O_NCIBA_BS_cB1O_TBel_B2Q_EE0E0E0Bgy_BS_BS_cBau_E0E0BiN_E0B2Q_E0EE0B2Q_E0EE0INtB5_6ParserBS_BU_B1O_E5parseB10_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvNtNtB7_9character8complete4charBX_B1M_E0NCNvB12_8jsonpath0E0INtB5_6ParserBX_B10_B1M_E5parseB16_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringcINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B1Y_E0NCINvNtB7_6branch3altB10_B13_B1Y_TNCIBA_B10_cB13_cB1Y_B2n_NCINvNtB7_10combinator3mapB10_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEB13_B1Y_NCINvB48_3optB10_B59_B1Y_NCINvNtNtB7_5bytes8complete17escaped_transformB10_B1Y_NCIB46_B10_INtNtB5d_3vec3VecNtB15_16MaybeEscapedCharENtB15_19MaybeEscapedCharVecB1Y_NCINvNtB7_5multi5many1B10_B7D_B1Y_NCIB3a_B10_B7D_B1Y_TNCIB46_B10_cB7D_B1Y_NCINvB48_6verifyB10_ccB1Y_NCINvB2s_7none_ofB10_B10_B1Y_E0NCNvB15_9unescaped0E0NcNtB7D_4Char0E0NCIB46_B10_cB7D_B1Y_B2n_NcNtB7D_7Escaped0E0EE0E0NcB82_0E0NCIB3a_B10_B10_B1Y_TNCIB3a_B10_B10_B1Y_TNCINvB48_5valueB10_B10_B10_B1Y_NCINvB6o_3tagB10_B10_B1Y_E0E0BcO_BcO_BcO_BcO_BcO_BcO_EE0BcO_EE0B82_B10_cB59_E0E0NvYB13_INtNtB4C_7convert4FromB4x_E4fromE0B2n_E0NCIBA_B10_cB13_cB1Y_B2n_NCIB46_B10_B4x_B13_B1Y_NCIB5X_B10_B59_B1Y_NCIB6m_B10_B1Y_NCINvB48_9recognizeB10_IB7n_cEB1Y_NCIB8A_B10_cB1Y_NCIB3a_B10_cB1Y_TB9J_B2n_EE0E0E0Bca_B10_B10_cB59_E0E0BeB_E0B2n_E0EE0B2n_E0INtB5_6ParserB10_B13_B1Y_E5parseB19_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3optReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvBC_3mapBX_cBZ_B1L_NCINvNtNtB7_9character8complete4charBX_B1L_E0NCNvB11_8jsonpath0E0E0INtB5_6ParserBX_INtNtCs3NN8x5qF7TE_4core6option6OptionBZ_EB1L_E5parseB15_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtB13_6parser5TokenINtNtB7_5error5ErrorBX_ENCINvNtB7_8sequence9delimitedBX_cBZ_cB2F_NCINvNtNtB7_9character8complete4charBX_B2F_E0NCINvBC_7map_resBX_yBZ_B2F_NtNtB13_5error15ArrayIndexErrorNCIB4u_BX_BX_yB2F_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB4u_BX_BX_BX_B2F_B4S_INvB3N_6digit1BX_B2F_ENCNvB2m_26length_limited_array_index0E0INvMNtB5L_3stre5parseyEE0NvYyINtNtB5L_7convert7TryIntoBZ_E8try_intoE0B3I_E0NcNtB2k_15ArrayIndexChild0E0INtB5_6ParserBX_B2k_B2F_E5parseB15_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB10_EINvNtNtB7_9character8complete7anycharB10_B14_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0INtB5_6ParserB10_cB14_E5parseB2l_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator9recognizeReTcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEINtNtB7_5error5ErrorB13_ENCINvNtB7_8sequence4pairB13_cB17_B1H_NCINvBC_6verifyB13_ccB1H_INvNtNtB7_9character8complete7anycharB13_B1H_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0B13_cB1H_NCIB2K_B13_ccB1H_B36_NCNvB3U_16member_character0E0E0E0E0INtB5_6ParserB13_B13_B1H_E5parseB3Y_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringNtB11_5TokenINtNtB7_5error5ErrorBX_ENCINvNtB7_6branch3altBX_BZ_B25_TNCINvNtB7_8sequence8precededBX_cBZ_B25_NCINvNtNtB7_9character8complete4charBX_B25_E0NCIBA_BX_BX_BZ_B25_NCINvBC_9recognizeBX_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB25_NCINvB34_4pairBX_cB51_B25_NCINvBC_6verifyBX_ccB25_INvB3H_7anycharBX_B25_ENCNvB11_12member_first0E0NCINvNtB7_5multi5many0BX_cB25_NCIB68_BX_ccB25_B6t_NCNvB11_16member_character0E0E0E0E0NcNtBZ_8Borrowed0E0E0NCINvB34_9delimitedBX_cBZ_cB25_B3C_NCIB2w_BX_BZ_B25_TNCIB90_BX_cBZ_cB25_B3C_NCIBA_BX_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB56_6string6StringEBZ_B25_NCINvBC_3optBX_BaW_B25_NCINvNtNtB7_5bytes8complete17escaped_transformBX_B25_NCIBA_BX_IB52_NtB11_16MaybeEscapedCharENtB11_19MaybeEscapedCharVecB25_NCINvB7k_5many1BX_BcS_B25_NCIB2w_BX_BcS_B25_TNCIBA_BX_cBcS_B25_NCIB68_BX_ccB25_NCINvB3H_7none_ofBX_BX_B25_E0NCNvB11_9unescaped0E0NcNtBcS_4Char0E0NCIBA_BX_cBcS_B25_B3C_NcNtBcS_7Escaped0E0EE0E0NcBdh_0E0NCIB2w_BX_BX_B25_TNCIB2w_BX_BX_B25_TNCINvBC_5valueBX_BX_BX_B25_NCINvBbS_3tagBX_BX_B25_E0E0BhA_BhA_BhA_BhA_BhA_BhA_EE0BhA_EE0Bdh_BX_cBaW_E0E0NvYBZ_INtNtBap_7convert4FromBak_E4fromE0B3C_E0NCIB90_BX_cBZ_cB25_B3C_NCIBA_BX_Bak_BZ_B25_NCIBbt_BX_BaW_B25_NCIBbQ_BX_B25_NCIB4H_BX_B51_B25_NCIBdP_BX_cB25_NCIB2w_BX_cB25_TBeN_B3C_EE0E0E0Bh0_BX_BX_cBaW_E0E0Bjg_E0B3C_E0EE0B3C_E0EE0NcNtB1T_5Child0E0INtB5_6ParserBX_B1T_B25_E5parseB15_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapReBX_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBX_ENCINvBC_9recognizeBX_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1W_NCINvNtB7_8sequence4pairBX_cB2H_B1W_NCINvBC_6verifyBX_ccB1W_INvNtNtB7_9character8complete7anycharBX_B1W_ENCNvB14_12member_first0E0NCINvNtB7_5multi5many0BX_cB1W_NCIB3Y_BX_ccB1W_B4j_NCNvB14_16member_character0E0E0E0E0NcNtB12_8Borrowed0E0INtB5_6ParserBX_B12_B1W_E5parseB18_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence8precededReccINtNtB7_5error5ErrorBZ_ENCINvNtNtB7_9character8complete4charBZ_B13_E0B1r_E0INtB5_6ParserBZ_cB13_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_6branch3altReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBS_ETNCINvNtB7_10combinator3mapBS_cBU_B1G_NCIBA_BS_cB1G_TNCINvNtB7_8sequence8precededBS_ccB1G_NCINvNtNtB7_9character8complete4charBS_B1G_E0B3w_E0NCINvB30_9delimitedBS_cccB1G_B3w_B3w_B3w_E0EE0NCNvBW_23wildcard_child_selector0E0NCIB28_BS_NtBW_12MemberStringBU_B1G_NCIBA_BS_B5O_B1G_TNCIB2Y_BS_cB5O_B1G_B3w_NCIB28_BS_BS_B5O_B1G_NCINvB2a_9recognizeBS_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1G_NCINvB30_4pairBS_cB7C_B1G_NCINvB2a_6verifyBS_ccB1G_INvB3B_7anycharBS_B1G_ENCNvBW_12member_first0E0NCINvNtB7_5multi5many0BS_cB1G_NCIB8J_BS_ccB1G_B95_NCNvBW_16member_character0E0E0E0E0NcNtB5O_8Borrowed0E0E0NCIB4o_BS_cB5O_cB1G_B3w_NCIBA_BS_B5O_B1G_TNCIB4o_BS_cB5O_cB1G_B3w_NCIB28_BS_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7H_6string6StringEB5O_B1G_NCINvB2a_3optBS_Bdo_B1G_NCINvNtNtB7_5bytes8complete17escaped_transformBS_B1G_NCIB28_BS_IB7D_NtBW_16MaybeEscapedCharENtBW_19MaybeEscapedCharVecB1G_NCINvB9V_5many1BS_Bfn_B1G_NCIBA_BS_Bfn_B1G_TNCIB28_BS_cBfn_B1G_NCIB8J_BS_ccB1G_NCINvB3B_7none_ofBS_BS_B1G_E0NCNvBW_9unescaped0E0NcNtBfn_4Char0E0NCIB28_BS_cBfn_B1G_B3w_NcNtBfn_7Escaped0E0EE0E0NcBfL_0E0NCIBA_BS_BS_B1G_TNCIBA_BS_BS_B1G_TNCINvB2a_5valueBS_BS_BS_B1G_NCINvBem_3tagBS_BS_B1G_E0E0Bk1_Bk1_Bk1_Bk1_Bk1_Bk1_EE0Bk1_EE0BfL_BS_cBdo_E0E0NvYB5O_INtNtBcR_7convert4FromBcM_E4fromE0B3w_E0NCIB4o_BS_cB5O_cB1G_B3w_NCIB28_BS_BcM_B5O_B1G_NCIBdW_BS_Bdo_B1G_NCIBek_BS_B1G_NCIB7h_BS_B7C_B1G_NCIBgi_BS_cB1G_NCIBA_BS_cB1G_TBhg_B3w_EE0E0E0Bjt_BS_BS_cBdo_E0E0BlI_E0B3w_E0EE0B3w_E0EE0NcNtBU_5Child0E0NCIB28_BS_NtNtBY_23nonnegative_array_index21NonNegativeArrayIndexBU_B1G_NCIB4o_BS_cBpR_cB1G_B3w_NCINvB2a_7map_resBS_yBpR_B1G_NtNtBY_5error15ArrayIndexErrorNCIBri_BS_BS_yB1G_NtNtNtBcR_3num5error13ParseIntErrorNCIBri_BS_BS_BS_B1G_BrI_INvB3B_6digit1BS_B1G_ENCNvBW_26length_limited_array_index0E0INvMNtBcR_3stre5parseyEE0NvYyINtBlS_7TryIntoBpR_E8try_intoE0B3w_E0NcNtBU_15ArrayIndexChild0E0NCIB28_BS_cBU_B1G_NCIB2Y_BS_BS_cB1G_Bkt_NCIBA_BS_cB1G_TB3w_B4l_EE0E0NCNvBW_28wildcard_descendant_selector0E0NCIB2Y_BS_BS_BU_B1G_Bkt_NCIBA_BS_BU_B1G_TNCIB28_BS_B5O_BU_B1G_NCIBA_BS_B5O_B1G_TB6T_Bby_EE0NcNtBU_10Descendant0E0NCIB28_BS_BpR_BU_B1G_BqR_NcNtBU_20ArrayIndexDescendant0E0EE0E0EE0INtB5_6ParserBS_BU_B1G_E5parseB10_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence9delimitedRecccINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B15_E0B1u_B1u_E0INtB5_6ParserB10_cB15_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvNtB7_6branch3altBX_cB1M_TNCINvNtB7_8sequence8precededBX_ccB1M_NCINvNtNtB7_9character8complete4charBX_B1M_E0B3f_E0NCINvB2J_9delimitedBX_cccB1M_B3f_B3f_B3f_E0EE0NCNvB12_23wildcard_child_selector0E0INtB5_6ParserBX_B10_B1M_E5parseB16_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence8precededRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBZ_ENCINvNtNtB7_9character8complete4charBZ_B1W_E0NCINvNtB7_10combinator3mapBZ_BZ_B12_B1W_NCINvB38_9recognizeBZ_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1W_NCINvBC_4pairBZ_cB45_B1W_NCINvB38_6verifyBZ_ccB1W_INvB2p_7anycharBZ_B1W_ENCNvB14_12member_first0E0NCINvNtB7_5multi5many0BZ_cB1W_NCIB5b_BZ_ccB1W_B5x_NCNvB14_16member_character0E0E0E0E0NcNtB12_8Borrowed0E0E0INtB5_6ParserBZ_B12_B1W_E5parseB18_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBS_ETNCINvNtNtB7_9character8complete4charBS_BV_E0NCINvNtB7_8sequence9delimitedBS_cccBV_B1k_B1k_B1k_E0EE0INtB5_6ParserBS_cBV_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence4pairRecINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEINtNtB7_5error5ErrorBV_ENCINvNtB7_10combinator6verifyBV_ccB1x_INvNtNtB7_9character8complete7anycharBV_B1x_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0BV_cB1x_NCIB1Y_BV_ccB1x_B2x_NCNvB3k_16member_character0E0E0E0INtB5_6ParserBV_TcBY_EB1x_E5parseB3o_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvNtB7_8sequence8precededBX_BX_cB1M_NCINvNtNtB7_5bytes8complete3tagBX_BX_B1M_E0NCINvNtB7_6branch3altBX_cB1M_TNCINvNtNtB7_9character8complete4charBX_B1M_E0NCINvB2f_9delimitedBX_cccB1M_B3Y_B3Y_B3Y_E0EE0E0NCNvB12_28wildcard_descendant_selector0E0INtB5_6ParserBX_B10_B1M_E5parseB16_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXNtCskh6ql9CB8e_3nom8internalINtNtCs3NN8x5qF7TE_4core6result6ResultTReTINtNtBz_6option6OptionNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenEINtNtCsc6jWpmc7Dho_5alloc3vec3VecB1w_EEEINtB2_3ErrINtNtB4_5error5ErrorB17_EEEINtB2_6FinishB17_B19_B37_E6finishB1C_:
   36|  1.15k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  1.15k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtNtB7_9character8complete4charReINtNtB7_5error5ErrorB17_EE0INtB5_6ParserB17_cB19_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  15.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  15.0k|    self(i)
  326|  15.0k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB12_INtNtB7_5error5ErrorB12_EE0INtB5_6ParserB12_B12_B18_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  3.47k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.47k|    self(i)
  326|  3.47k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence8precededReBZ_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBZ_ENCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1Q_E0NCINvNtB7_6branch3altBZ_B14_B1Q_TNCINvNtB7_10combinator3mapBZ_NtB16_12MemberStringB14_B1Q_NCIB2Y_BZ_B3V_B1Q_TNCIB3v_BZ_BZ_B3V_B1Q_NCINvB3x_9recognizeBZ_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1Q_NCINvBC_4pairBZ_cB5p_B1Q_NCINvB3x_6verifyBZ_ccB1Q_INvNtNtB7_9character8complete7anycharBZ_B1Q_ENCNvB16_12member_first0E0NCINvNtB7_5multi5many0BZ_cB1Q_NCIB6v_BZ_ccB1Q_B6R_NCNvB16_16member_character0E0E0E0E0NcNtB3V_8Borrowed0E0NCINvBC_9delimitedBZ_cB3V_cB1Q_NCINvB6U_4charBZ_B1Q_E0NCIB2Y_BZ_B3V_B1Q_TNCIB9J_BZ_cB3V_cB1Q_Bab_NCIB3v_BZ_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB5u_6string6StringEB3V_B1Q_NCINvB3x_3optBZ_Bc1_B1Q_NCINvB2j_17escaped_transformBZ_B1Q_NCIB3v_BZ_IB5q_NtB16_16MaybeEscapedCharENtB16_19MaybeEscapedCharVecB1Q_NCINvB84_5many1BZ_BdI_B1Q_NCIB2Y_BZ_BdI_B1Q_TNCIB3v_BZ_cBdI_B1Q_NCIB6v_BZ_ccB1Q_NCINvB6U_7none_ofBZ_BZ_B1Q_E0NCNvB16_9unescaped0E0NcNtBdI_4Char0E0NCIB3v_BZ_cBdI_B1Q_Bab_NcNtBdI_7Escaped0E0EE0E0NcBe7_0E0NCIB2Y_BZ_BZ_B1Q_TNCIB2Y_BZ_BZ_B1Q_TNCINvB3x_5valueBZ_BZ_BZ_B1Q_B2e_E0Bis_Bis_Bis_Bis_Bis_Bis_EE0Bis_EE0Be7_BZ_cBc1_E0E0NvYB3V_INtNtBbu_7convert4FromBbp_E4fromE0Bab_E0NCIB9J_BZ_cB3V_cB1Q_Bab_NCIB3v_BZ_Bbp_B3V_B1Q_NCIBcz_BZ_Bc1_B1Q_NCIBcX_BZ_B1Q_NCIB54_BZ_B5p_B1Q_NCIBeF_BZ_cB1Q_NCIB2Y_BZ_cB1Q_TBfE_Bab_EE0E0E0BhS_BZ_BZ_cBc1_E0E0BjO_E0Bab_E0EE0Bab_E0EE0NcNtB14_10Descendant0E0NCIB3v_BZ_NtNtB18_23nonnegative_array_index21NonNegativeArrayIndexB14_B1Q_NCIB9J_BZ_cBo5_cB1Q_Bab_NCINvB3x_7map_resBZ_yBo5_B1Q_NtNtB18_5error15ArrayIndexErrorNCIBpy_BZ_BZ_yB1Q_NtNtNtBbu_3num5error13ParseIntErrorNCIBpy_BZ_BZ_BZ_B1Q_BpY_INvB6U_6digit1BZ_B1Q_ENCNvB16_26length_limited_array_index0E0INvMNtBbu_3stre5parseyEE0NvYyINtBjY_7TryIntoBo5_E8try_intoE0Bab_E0NcNtB14_20ArrayIndexDescendant0E0EE0E0INtB5_6ParserBZ_B14_B1Q_E5parseB1a_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_5multi5many0ReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBT_ENCINvNtB7_6branch3altBT_BV_B1H_TNCINvNtB7_10combinator3mapBT_cBV_B1H_NCIB28_BT_cB1H_TNCINvNtB7_8sequence8precededBT_ccB1H_NCINvNtNtB7_9character8complete4charBT_B1H_E0B43_E0NCINvB3x_9delimitedBT_cccB1H_B43_B43_B43_E0EE0NCNvBX_23wildcard_child_selector0E0NCIB2E_BT_NtBX_12MemberStringBV_B1H_NCIB28_BT_B6l_B1H_TNCIB3v_BT_cB6l_B1H_B43_NCIB2E_BT_BT_B6l_B1H_NCINvB2G_9recognizeBT_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1H_NCINvB3x_4pairBT_cB8a_B1H_NCINvB2G_6verifyBT_ccB1H_INvB48_7anycharBT_B1H_ENCNvBX_12member_first0E0NCIBA_BT_cB1H_NCIB9h_BT_ccB1H_B9D_NCNvBX_16member_character0E0E0E0E0NcNtB6l_8Borrowed0E0E0NCIB4V_BT_cB6l_cB1H_B43_NCIB28_BT_B6l_B1H_TNCIB4V_BT_cB6l_cB1H_B43_NCIB2E_BT_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB8f_6string6StringEB6l_B1H_NCINvB2G_3optBT_BdH_B1H_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1H_NCIB2E_BT_IB8b_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1H_NCINvBC_5many1BT_BfG_B1H_NCIB28_BT_BfG_B1H_TNCIB2E_BT_cBfG_B1H_NCIB9h_BT_ccB1H_NCINvB48_7none_ofBT_BT_B1H_E0NCNvBX_9unescaped0E0NcNtBfG_4Char0E0NCIB2E_BT_cBfG_B1H_B43_NcNtBfG_7Escaped0E0EE0E0NcBg4_0E0NCIB28_BT_BT_B1H_TNCIB28_BT_BT_B1H_TNCINvB2G_5valueBT_BT_BT_B1H_NCINvBeF_3tagBT_BT_B1H_E0E0Bkm_Bkm_Bkm_Bkm_Bkm_Bkm_EE0Bkm_EE0Bg4_BT_cBdH_E0E0NvYB6l_INtNtBda_7convert4FromBd5_E4fromE0B43_E0NCIB4V_BT_cB6l_cB1H_B43_NCIB2E_BT_Bd5_B6l_B1H_NCIBef_BT_BdH_B1H_NCIBeD_BT_B1H_NCIB7P_BT_B8a_B1H_NCIBgB_BT_cB1H_NCIB28_BT_cB1H_TBhz_B43_EE0E0E0BjM_BT_BT_cBdH_E0E0Bm3_E0B43_E0EE0B43_E0EE0NcNtBV_5Child0E0NCIB2E_BT_NtNtBZ_23nonnegative_array_index21NonNegativeArrayIndexBV_B1H_NCIB4V_BT_cBqd_cB1H_B43_NCINvB2G_7map_resBT_yBqd_B1H_NtNtBZ_5error15ArrayIndexErrorNCIBrE_BT_BT_yB1H_NtNtNtBda_3num5error13ParseIntErrorNCIBrE_BT_BT_BT_B1H_Bs4_INvB48_6digit1BT_B1H_ENCNvBX_26length_limited_array_index0E0INvMNtBda_3stre5parseyEE0NvYyINtBmd_7TryIntoBqd_E8try_intoE0B43_E0NcNtBV_15ArrayIndexChild0E0NCIB2E_BT_cBV_B1H_NCIB3v_BT_BT_cB1H_BkO_NCIB28_BT_cB1H_TB43_B4S_EE0E0NCNvBX_28wildcard_descendant_selector0E0NCIB3v_BT_BT_BV_B1H_BkO_NCIB28_BT_BV_B1H_TNCIB2E_BT_B6l_BV_B1H_NCIB28_BT_B6l_B1H_TB7r_BbQ_EE0NcNtBV_10Descendant0E0NCIB2E_BT_Bqd_BV_B1H_Brd_NcNtBV_20ArrayIndexDescendant0E0EE0E0EE0E0INtB5_6ParserBT_IB8b_BV_EB1H_E5parseB11_:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalINvNtNtB7_9character8complete7anycharReINtNtB7_5error5ErrorB18_EEINtB5_6ParserB18_cB1a_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  1.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15k|    self(i)
  326|  1.15k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBS_ETNCINvNtB7_8sequence8precededBS_ccBV_NCINvNtNtB7_9character8complete4charBS_BV_E0B1U_E0NCINvB1p_9delimitedBS_cccBV_B1U_B1U_B1U_E0EE0INtB5_6ParserBS_cBV_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B2p_E0NCINvNtB7_10combinator7map_resB10_yB13_B2p_NtNtB17_5error15ArrayIndexErrorNCIB3B_B10_B10_yB2p_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB3B_B10_B10_B10_B2p_B4f_INvB2T_6digit1B10_B2p_ENCNvNtB17_6parser26length_limited_array_index0E0INvMNtB5a_3stre5parseyEE0NvYyINtNtB5a_7convert7TryIntoB13_E8try_intoE0B2O_E0INtB5_6ParserB10_B13_B2p_E5parseB19_:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }
_RNvXsa_NtCskh6ql9CB8e_3nom8internalNCINvNtB7_8sequence8precededReBZ_cINtNtB7_5error5ErrorBZ_ENCINvNtNtB7_5bytes8complete3tagBZ_BZ_B15_E0NCINvNtB7_6branch3altBZ_cB15_TNCINvNtNtB7_9character8complete4charBZ_B15_E0NCINvBC_9delimitedBZ_cccB15_B2E_B2E_B2E_E0EE0E0INtB5_6ParserBZ_cB15_E5parseCs6TTJfIhyJGW_8rsonpath:
  324|  2.31k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.31k|    self(i)
  326|  2.31k|  }

_RINvNtCskh6ql9CB8e_3nom5multi5many1ReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBx_ENCINvNtB4_6branch3altBx_Bz_B1x_TNCINvNtB4_10combinator3mapBx_cBz_B1x_NCINvB2w_6verifyBx_ccB1x_NCINvNtNtB4_9character8complete7none_ofBx_Bx_B1x_E0NCNvBB_9unescaped0E0NcNtBz_4Char0E0NCIB2u_Bx_cBz_B1x_NCINvB3w_4charBx_B1x_E0NcNtBz_7Escaped0E0EE0EBF_:
  108|  2.31k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  2.31k|where
  110|  2.31k|  I: Clone + InputLength,
  111|  2.31k|  F: Parser<I, O, E>,
  112|  2.31k|  E: ParseError<I>,
  113|  2.31k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  2.31k|}
_RNCINvNtCskh6ql9CB8e_3nom5multi5many0ReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBz_ENCINvNtB6_6branch3altBz_BB_B1n_TNCINvNtB6_10combinator3mapBz_cBB_B1n_NCIB1O_Bz_cB1n_TNCINvNtB6_8sequence8precededBz_ccB1n_NCINvNtNtB6_9character8complete4charBz_B1n_E0B3J_E0NCINvB3d_9delimitedBz_cccB1n_B3J_B3J_B3J_E0EE0NCNvBD_23wildcard_child_selector0E0NCIB2k_Bz_NtBD_12MemberStringBB_B1n_NCIB1O_Bz_B61_B1n_TNCIB3b_Bz_cB61_B1n_B3J_NCIB2k_Bz_Bz_B61_B1n_NCINvB2m_9recognizeBz_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1n_NCINvB3d_4pairBz_cB7Q_B1n_NCINvB2m_6verifyBz_ccB1n_INvB3O_7anycharBz_B1n_ENCNvBD_12member_first0E0NCIB2_Bz_cB1n_NCIB8X_Bz_ccB1n_B9j_NCNvBD_16member_character0E0E0E0E0NcNtB61_8Borrowed0E0E0NCIB4B_Bz_cB61_cB1n_B3J_NCIB1O_Bz_B61_B1n_TNCIB4B_Bz_cB61_cB1n_B3J_NCIB2k_Bz_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7V_6string6StringEB61_B1n_NCINvB2m_3optBz_Bdn_B1n_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1n_NCIB2k_Bz_IB7R_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1n_NCINvB4_5many1Bz_Bfm_B1n_NCIB1O_Bz_Bfm_B1n_TNCIB2k_Bz_cBfm_B1n_NCIB8X_Bz_ccB1n_NCINvB3O_7none_ofBz_Bz_B1n_E0NCNvBD_9unescaped0E0NcNtBfm_4Char0E0NCIB2k_Bz_cBfm_B1n_B3J_NcNtBfm_7Escaped0E0EE0E0NcBfK_0E0NCIB1O_Bz_Bz_B1n_TNCIB1O_Bz_Bz_B1n_TNCINvB2m_5valueBz_Bz_Bz_B1n_NCINvBel_3tagBz_Bz_B1n_E0E0Bk2_Bk2_Bk2_Bk2_Bk2_Bk2_EE0Bk2_EE0BfK_Bz_cBdn_E0E0NvYB61_INtNtBcQ_7convert4FromBcL_E4fromE0B3J_E0NCIB4B_Bz_cB61_cB1n_B3J_NCIB2k_Bz_BcL_B61_B1n_NCIBdV_Bz_Bdn_B1n_NCIBej_Bz_B1n_NCIB7v_Bz_B7Q_B1n_NCIBgh_Bz_cB1n_NCIB1O_Bz_cB1n_TBhf_B3J_EE0E0E0Bjs_Bz_Bz_cBdn_E0E0BlJ_E0B3J_E0EE0B3J_E0EE0NcNtBB_5Child0E0NCIB2k_Bz_NtNtBF_23nonnegative_array_index21NonNegativeArrayIndexBB_B1n_NCIB4B_Bz_cBpT_cB1n_B3J_NCINvB2m_7map_resBz_yBpT_B1n_NtNtBF_5error15ArrayIndexErrorNCIBrk_Bz_Bz_yB1n_NtNtNtBcQ_3num5error13ParseIntErrorNCIBrk_Bz_Bz_Bz_B1n_BrK_INvB3O_6digit1Bz_B1n_ENCNvBD_26length_limited_array_index0E0INvMNtBcQ_3stre5parseyEE0NvYyINtBlT_7TryIntoBpT_E8try_intoE0B3J_E0NcNtBB_15ArrayIndexChild0E0NCIB2k_Bz_cBB_B1n_NCIB3b_Bz_Bz_cB1n_Bku_NCIB1O_Bz_cB1n_TB3J_B4y_EE0E0NCNvBD_28wildcard_descendant_selector0E0NCIB3b_Bz_Bz_BB_B1n_Bku_NCIB1O_Bz_BB_B1n_TNCIB2k_Bz_B61_BB_B1n_NCIB1O_Bz_B61_B1n_TB77_Bbw_EE0NcNtBB_10Descendant0E0NCIB2k_Bz_BpT_BB_B1n_BqT_NcNtBB_20ArrayIndexDescendant0E0EE0E0EE0E0BH_:
   59|  1.15k|  move |mut i: I| {
   60|  1.15k|    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|  2.31k|    loop {
   62|  2.31k|      let len = i.input_len();
   63|  2.31k|      match f.parse(i.clone()) {
   64|  1.15k|        Err(Err::Error(_)) => return Ok((i, acc)),
   65|      0|        Err(e) => return Err(e),
   66|  1.15k|        Ok((i1, o)) => {
   67|  1.15k|          // infinite loop check: the parser must always consume
   68|  1.15k|          if i1.input_len() == len {
   69|      0|            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|  1.15k|          }
   71|  1.15k|
   72|  1.15k|          i = i1;
   73|  1.15k|          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|  1.15k|  }
_RINvNtCskh6ql9CB8e_3nom5multi5many1RecINtNtB4_5error5ErrorBx_ENCINvNtB4_6branch3altBx_cBA_TNCINvNtB4_10combinator6verifyBx_ccBA_NCINvNtNtB4_9character8complete7none_ofBx_Bx_BA_E0NCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped0E0NCINvB27_4charBx_BA_E0EE0EB2Y_:
  108|  2.31k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  2.31k|where
  110|  2.31k|  I: Clone + InputLength,
  111|  2.31k|  F: Parser<I, O, E>,
  112|  2.31k|  E: ParseError<I>,
  113|  2.31k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom5multi5many0ReNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBx_ENCINvNtB4_6branch3altBx_Bz_B1l_TNCINvNtB4_10combinator3mapBx_cBz_B1l_NCIB1M_Bx_cB1l_TNCINvNtB4_8sequence8precededBx_ccB1l_NCINvNtNtB4_9character8complete4charBx_B1l_E0B3H_E0NCINvB3b_9delimitedBx_cccB1l_B3H_B3H_B3H_E0EE0NCNvBB_23wildcard_child_selector0E0NCIB2i_Bx_NtBB_12MemberStringBz_B1l_NCIB1M_Bx_B5Z_B1l_TNCIB39_Bx_cB5Z_B1l_B3H_NCIB2i_Bx_Bx_B5Z_B1l_NCINvB2k_9recognizeBx_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1l_NCINvB3b_4pairBx_cB7O_B1l_NCINvB2k_6verifyBx_ccB1l_INvB3M_7anycharBx_B1l_ENCNvBB_12member_first0E0NCIB0_Bx_cB1l_NCIB8V_Bx_ccB1l_B9h_NCNvBB_16member_character0E0E0E0E0NcNtB5Z_8Borrowed0E0E0NCIB4z_Bx_cB5Z_cB1l_B3H_NCIB1M_Bx_B5Z_B1l_TNCIB4z_Bx_cB5Z_cB1l_B3H_NCIB2i_Bx_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB7T_6string6StringEB5Z_B1l_NCINvB2k_3optBx_Bdl_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1l_NCIB2i_Bx_IB7P_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1l_NCINvB2_5many1Bx_Bfk_B1l_NCIB1M_Bx_Bfk_B1l_TNCIB2i_Bx_cBfk_B1l_NCIB8V_Bx_ccB1l_NCINvB3M_7none_ofBx_Bx_B1l_E0NCNvBB_9unescaped0E0NcNtBfk_4Char0E0NCIB2i_Bx_cBfk_B1l_B3H_NcNtBfk_7Escaped0E0EE0E0NcBfI_0E0NCIB1M_Bx_Bx_B1l_TNCIB1M_Bx_Bx_B1l_TNCINvB2k_5valueBx_Bx_Bx_B1l_NCINvBej_3tagBx_Bx_B1l_E0E0Bk0_Bk0_Bk0_Bk0_Bk0_Bk0_EE0Bk0_EE0BfI_Bx_cBdl_E0E0NvYB5Z_INtNtBcO_7convert4FromBcJ_E4fromE0B3H_E0NCIB4z_Bx_cB5Z_cB1l_B3H_NCIB2i_Bx_BcJ_B5Z_B1l_NCIBdT_Bx_Bdl_B1l_NCIBeh_Bx_B1l_NCIB7t_Bx_B7O_B1l_NCIBgf_Bx_cB1l_NCIB1M_Bx_cB1l_TBhd_B3H_EE0E0E0Bjq_Bx_Bx_cBdl_E0E0BlH_E0B3H_E0EE0B3H_E0EE0NcNtBz_5Child0E0NCIB2i_Bx_NtNtBD_23nonnegative_array_index21NonNegativeArrayIndexBz_B1l_NCIB4z_Bx_cBpR_cB1l_B3H_NCINvB2k_7map_resBx_yBpR_B1l_NtNtBD_5error15ArrayIndexErrorNCIBri_Bx_Bx_yB1l_NtNtNtBcO_3num5error13ParseIntErrorNCIBri_Bx_Bx_Bx_B1l_BrI_INvB3M_6digit1Bx_B1l_ENCNvBB_26length_limited_array_index0E0INvMNtBcO_3stre5parseyEE0NvYyINtBlR_7TryIntoBpR_E8try_intoE0B3H_E0NcNtBz_15ArrayIndexChild0E0NCIB2i_Bx_cBz_B1l_NCIB39_Bx_Bx_cB1l_Bks_NCIB1M_Bx_cB1l_TB3H_B4w_EE0E0NCNvBB_28wildcard_descendant_selector0E0NCIB39_Bx_Bx_Bz_B1l_Bks_NCIB1M_Bx_Bz_B1l_TNCIB2i_Bx_B5Z_Bz_B1l_NCIB1M_Bx_B5Z_B1l_TB75_Bbu_EE0NcNtBz_10Descendant0E0NCIB2i_Bx_BpR_Bz_B1l_BqR_NcNtBz_20ArrayIndexDescendant0E0EE0E0EE0EBF_:
   53|  1.15k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|  1.15k|where
   55|  1.15k|  I: Clone + InputLength,
   56|  1.15k|  F: Parser<I, O, E>,
   57|  1.15k|  E: ParseError<I>,
   58|  1.15k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom5multi5many0RecINtNtB4_5error5ErrorBx_ENCINvNtB4_10combinator6verifyBx_ccBA_INvNtNtB4_9character8complete7anycharBx_BA_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16member_character0E0EB2p_:
   53|  2.31k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|  2.31k|where
   55|  2.31k|  I: Clone + InputLength,
   56|  2.31k|  F: Parser<I, O, E>,
   57|  2.31k|  E: ParseError<I>,
   58|  2.31k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|  2.31k|}

_RNCINvNtCskh6ql9CB8e_3nom8sequence4pairRecINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEINtNtB6_5error5ErrorBB_ENCINvNtB6_10combinator6verifyBB_ccB1d_INvNtNtB6_9character8complete7anycharBB_B1d_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BB_cB1d_NCIB1E_BB_ccB1d_B2d_NCNvB30_16member_character0E0E0E0B34_:
   37|  1.15k|  move |input: I| {
   38|  1.15k|    let (input, o1) = first.parse(input)?;
   39|      0|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|  1.15k|  }
_RNCINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecccINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_BL_E0B19_B19_E0Cs6TTJfIhyJGW_8rsonpath:
  182|  2.31k|  move |input: I| {
  183|  2.31k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom8sequence8precededRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBD_ENCINvNtNtB4_9character8complete4charBD_B1A_E0NCINvNtB4_10combinator3mapBD_BD_BG_B1A_NCINvB2M_9recognizeBD_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1A_NCINvB2_4pairBD_cB3I_B1A_NCINvB2M_6verifyBD_ccB1A_INvB23_7anycharBD_B1A_ENCNvBI_12member_first0E0NCINvNtB4_5multi5many0BD_cB1A_NCIB4O_BD_ccB1A_B5a_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0E0EBM_:
   63|  1.15k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.15k|  mut first: F,
   65|  1.15k|  mut second: G,
   66|  1.15k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.15k|where
   68|  1.15k|  F: Parser<I, O1, E>,
   69|  1.15k|  G: Parser<I, O2, E>,
   70|  1.15k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom8sequence8precededReccINtNtB6_5error5ErrorBF_ENCINvNtNtB6_9character8complete4charBF_BJ_E0B17_E0Cs6TTJfIhyJGW_8rsonpath:
   71|  2.31k|  move |input: I| {
   72|  2.31k|    let (input, _) = first.parse(input)?;
   73|  1.15k|    second.parse(input)
   74|  2.31k|  }
_RNCINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_B25_E0NCINvNtB6_10combinator7map_resBG_yBJ_B25_NtNtBN_5error15ArrayIndexErrorNCIB3f_BG_BG_yB25_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB3f_BG_BG_BG_B25_B3R_INvB2y_6digit1BG_B25_ENCNvNtBN_6parser26length_limited_array_index0E0INvMNtB4J_3stre5parseyEE0NvYyINtNtB4J_7convert7TryIntoBJ_E8try_intoE0B2t_E0BP_:
  182|  2.31k|  move |input: I| {
  183|  2.31k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom8sequence8precededReBD_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBD_ENCINvNtNtB4_5bytes8complete3tagBD_BD_B1u_E0NCINvNtB4_6branch3altBD_BI_B1u_TNCINvNtB4_10combinator3mapBD_NtBK_12MemberStringBI_B1u_NCIB2C_BD_B3y_B1u_TNCIB38_BD_BD_B3y_B1u_NCINvB3a_9recognizeBD_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1u_NCINvB2_4pairBD_cB50_B1u_NCINvB3a_6verifyBD_ccB1u_INvNtNtB4_9character8complete7anycharBD_B1u_ENCNvBK_12member_first0E0NCINvNtB4_5multi5many0BD_cB1u_NCIB66_BD_ccB1u_B6s_NCNvBK_16member_character0E0E0E0E0NcNtB3y_8Borrowed0E0NCINvB2_9delimitedBD_cB3y_cB1u_NCINvB6v_4charBD_B1u_E0NCIB2C_BD_B3y_B1u_TNCIB9i_BD_cB3y_cB1u_B9K_NCIB38_BD_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB55_6string6StringEB3y_B1u_NCINvB3a_3optBD_BbA_B1u_NCINvB1X_17escaped_transformBD_B1u_NCIB38_BD_IB51_NtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1u_NCINvB7E_5many1BD_Bdh_B1u_NCIB2C_BD_Bdh_B1u_TNCIB38_BD_cBdh_B1u_NCIB66_BD_ccB1u_NCINvB6v_7none_ofBD_BD_B1u_E0NCNvBK_9unescaped0E0NcNtBdh_4Char0E0NCIB38_BD_cBdh_B1u_B9K_NcNtBdh_7Escaped0E0EE0E0NcBdF_0E0NCIB2C_BD_BD_B1u_TNCIB2C_BD_BD_B1u_TNCINvB3a_5valueBD_BD_BD_B1u_B1S_E0BhY_BhY_BhY_BhY_BhY_BhY_EE0BhY_EE0BdF_BD_cBbA_E0E0NvYB3y_INtNtBb3_7convert4FromBaY_E4fromE0B9K_E0NCIB9i_BD_cB3y_cB1u_B9K_NCIB38_BD_BaY_B3y_B1u_NCIBc8_BD_BbA_B1u_NCIBcw_BD_B1u_NCIB4F_BD_B50_B1u_NCIBec_BD_cB1u_NCIB2C_BD_cB1u_TBfb_B9K_EE0E0E0Bho_BD_BD_cBbA_E0E0Bjk_E0B9K_E0EE0B9K_E0EE0NcNtBI_10Descendant0E0NCIB38_BD_NtNtBM_23nonnegative_array_index21NonNegativeArrayIndexBI_B1u_NCIB9i_BD_cBnA_cB1u_B9K_NCINvB3a_7map_resBD_yBnA_B1u_NtNtBM_5error15ArrayIndexErrorNCIBp1_BD_BD_yB1u_NtNtNtBb3_3num5error13ParseIntErrorNCIBp1_BD_BD_BD_B1u_Bpr_INvB6v_6digit1BD_B1u_ENCNvBK_26length_limited_array_index0E0INvMNtBb3_3stre5parseyEE0NvYyINtBju_7TryIntoBnA_E8try_intoE0B9K_E0NcNtBI_20ArrayIndexDescendant0E0EE0EBO_:
   63|  1.15k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.15k|  mut first: F,
   65|  1.15k|  mut second: G,
   66|  1.15k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.15k|where
   68|  1.15k|  F: Parser<I, O1, E>,
   69|  1.15k|  G: Parser<I, O2, E>,
   70|  1.15k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B23_E0NCINvNtB4_10combinator7map_resBE_yBH_B23_NtNtBL_5error15ArrayIndexErrorNCIB3d_BE_BE_yB23_NtNtNtCs3NN8x5qF7TE_4core3num5error13ParseIntErrorNCIB3d_BE_BE_BE_B23_B3P_INvB2w_6digit1BE_B23_ENCNvNtBL_6parser26length_limited_array_index0E0INvMNtB4H_3stre5parseyEE0NvYyINtNtB4H_7convert7TryIntoBH_E8try_intoE0B2r_EBN_:
  172|  2.31k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  2.31k|  mut first: F,
  174|  2.31k|  mut second: G,
  175|  2.31k|  mut third: H,
  176|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  2.31k|where
  178|  2.31k|  F: Parser<I, O1, E>,
  179|  2.31k|  G: Parser<I, O2, E>,
  180|  2.31k|  H: Parser<I, O3, E>,
  181|  2.31k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom8sequence8precededReccINtNtB4_5error5ErrorBD_ENCINvNtNtB4_9character8complete4charBD_BH_E0B15_ECs6TTJfIhyJGW_8rsonpath:
   63|  1.15k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.15k|  mut first: F,
   65|  1.15k|  mut second: G,
   66|  1.15k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.15k|where
   68|  1.15k|  F: Parser<I, O1, E>,
   69|  1.15k|  G: Parser<I, O2, E>,
   70|  1.15k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.15k|}
_RINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecccINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_BJ_E0B17_B17_ECs6TTJfIhyJGW_8rsonpath:
  172|  2.31k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  2.31k|  mut first: F,
  174|  2.31k|  mut second: G,
  175|  2.31k|  mut third: H,
  176|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  2.31k|where
  178|  2.31k|  F: Parser<I, O1, E>,
  179|  2.31k|  G: Parser<I, O2, E>,
  180|  2.31k|  H: Parser<I, O3, E>,
  181|  2.31k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  2.31k|}
_RNCINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringcINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_B1E_E0NCINvNtB6_6branch3altBG_BJ_B1E_TNCIB2_BG_cBJ_cB1E_B22_NCINvNtB6_10combinator3mapBG_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEBJ_B1E_NCINvB3I_3optBG_B4I_B1E_NCINvNtNtB6_5bytes8complete17escaped_transformBG_B1E_NCIB3G_BG_INtNtB4M_3vec3VecNtBL_16MaybeEscapedCharENtBL_19MaybeEscapedCharVecB1E_NCINvNtB6_5multi5many1BG_B78_B1E_NCIB2O_BG_B78_B1E_TNCIB3G_BG_cB78_B1E_NCINvB3I_6verifyBG_ccB1E_NCINvB27_7none_ofBG_BG_B1E_E0NCNvBL_9unescaped0E0NcNtB78_4Char0E0NCIB3G_BG_cB78_B1E_B22_NcNtB78_7Escaped0E0EE0E0NcB7w_0E0NCIB2O_BG_BG_B1E_TNCIB2O_BG_BG_B1E_TNCINvB3I_5valueBG_BG_BG_B1E_NCINvB5V_3tagBG_BG_B1E_E0E0Bc5_Bc5_Bc5_Bc5_Bc5_Bc5_EE0Bc5_EE0B7w_BG_cB4I_E0E0NvYBJ_INtNtB4b_7convert4FromB46_E4fromE0B22_E0NCIB2_BG_cBJ_cB1E_B22_NCIB3G_BG_B46_BJ_B1E_NCIB5v_BG_B4I_B1E_NCIB5T_BG_B1E_NCINvB3I_9recognizeBG_IB6S_cEB1E_NCIB83_BG_cB1E_NCIB2O_BG_cB1E_TB99_B22_EE0E0E0Bbv_BG_BG_cB4I_E0E0BdM_E0B22_E0EE0B22_E0BP_:
  182|  2.31k|  move |input: I| {
  183|  2.31k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1C_E0NCINvNtB4_10combinator3mapBE_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEBH_B1C_NCINvB2O_3optBE_B3O_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBE_B1C_NCINvB2O_9recognizeBE_INtNtB3S_3vec3VeccEB1C_NCINvNtB4_5multi5many1BE_cB1C_NCINvNtB4_6branch3altBE_cB1C_TNCINvB2O_6verifyBE_ccB1C_NCINvB25_7none_ofBE_BE_B1C_E0NCNvBJ_9unescaped0E0B20_EE0E0E0NCIB73_BE_BE_B1C_TNCIB73_BE_BE_B1C_TNCINvB2O_5valueBE_BE_BE_B1C_NCINvB51_3tagBE_BE_B1C_E0E0B9r_B9r_B9r_B9r_B9r_B9r_EE0B9r_EE0BE_BE_cB3O_E0E0NvYBH_INtNtB3h_7convert4FromB3c_E4fromE0B20_EBN_:
  172|  2.31k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  2.31k|  mut first: F,
  174|  2.31k|  mut second: G,
  175|  2.31k|  mut third: H,
  176|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  2.31k|where
  178|  2.31k|  F: Parser<I, O1, E>,
  179|  2.31k|  G: Parser<I, O2, E>,
  180|  2.31k|  H: Parser<I, O3, E>,
  181|  2.31k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1C_E0NCINvNtB4_6branch3altBE_BH_B1C_TNCIB0_BE_cBH_cB1C_B20_NCINvNtB4_10combinator3mapBE_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEBH_B1C_NCINvB3G_3optBE_B4G_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBE_B1C_NCIB3E_BE_INtNtB4K_3vec3VecNtBJ_16MaybeEscapedCharENtBJ_19MaybeEscapedCharVecB1C_NCINvNtB4_5multi5many1BE_B76_B1C_NCIB2M_BE_B76_B1C_TNCIB3E_BE_cB76_B1C_NCINvB3G_6verifyBE_ccB1C_NCINvB25_7none_ofBE_BE_B1C_E0NCNvBJ_9unescaped0E0NcNtB76_4Char0E0NCIB3E_BE_cB76_B1C_B20_NcNtB76_7Escaped0E0EE0E0NcB7u_0E0NCIB2M_BE_BE_B1C_TNCIB2M_BE_BE_B1C_TNCINvB3G_5valueBE_BE_BE_B1C_NCINvB5T_3tagBE_BE_B1C_E0E0Bc3_Bc3_Bc3_Bc3_Bc3_Bc3_EE0Bc3_EE0B7u_BE_cB4G_E0E0NvYBH_INtNtB49_7convert4FromB44_E4fromE0B20_E0NCIB0_BE_cBH_cB1C_B20_NCIB3E_BE_B44_BH_B1C_NCIB5t_BE_B4G_B1C_NCIB5R_BE_B1C_NCINvB3G_9recognizeBE_IB6Q_cEB1C_NCIB81_BE_cB1C_NCIB2M_BE_cB1C_TB97_B20_EE0E0E0Bbt_BE_BE_cB4G_E0E0BdK_E0B20_E0EE0B20_EBN_:
  172|  2.31k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  2.31k|  mut first: F,
  174|  2.31k|  mut second: G,
  175|  2.31k|  mut third: H,
  176|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  2.31k|where
  178|  2.31k|  F: Parser<I, O1, E>,
  179|  2.31k|  G: Parser<I, O2, E>,
  180|  2.31k|  H: Parser<I, O3, E>,
  181|  2.31k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  2.31k|}
_RINvNtCskh6ql9CB8e_3nom8sequence4pairReINtNtCs3NN8x5qF7TE_4core6option6OptionNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenEINtNtCsc6jWpmc7Dho_5alloc3vec3VecB1d_EINtNtB4_5error5ErrorBz_ENCINvNtB4_10combinator3optBz_B1d_B2C_NCINvB35_3mapBz_cB1d_B2C_NCINvNtNtB4_9character8complete4charBz_B2C_E0NCNvB1f_8jsonpath0E0E0NCINvNtB4_5multi5many0Bz_B1d_B2C_NCINvNtB4_6branch3altBz_B1d_B2C_TNCIB3E_Bz_cB1d_B2C_NCIB5F_Bz_cB2C_TNCINvB2_8precededBz_ccB2C_B40_B40_E0NCINvB2_9delimitedBz_cccB2C_B40_B40_B40_E0EE0NCNvB1f_23wildcard_child_selector0E0NCIB3E_Bz_NtB1f_12MemberStringB1d_B2C_NCIB5F_Bz_B8L_B2C_TNCIB6L_Bz_cB8L_B2C_B40_NCIB3E_Bz_Bz_B8L_B2C_NCINvB35_9recognizeBz_TcIB21_cEEB2C_NCIB0_Bz_cBaC_B2C_NCINvB35_6verifyBz_ccB2C_INvB45_7anycharBz_B2C_ENCNvB1f_12member_first0E0NCIB58_Bz_cB2C_NCIBb9_Bz_ccB2C_Bbv_NCNvB1f_16member_character0E0E0E0E0NcNtB8L_8Borrowed0E0E0NCIB7l_Bz_cB8L_cB2C_B40_NCIB5F_Bz_B8L_B2C_TNCIB7l_Bz_cB8L_cB2C_B40_NCIB3E_Bz_IBC_NtNtB25_6string6StringEB8L_B2C_NCIB33_Bz_Bf4_B2C_NCINvNtNtB4_5bytes8complete17escaped_transformBz_B2C_NCIB3E_Bz_IB21_NtB1f_16MaybeEscapedCharENtB1f_19MaybeEscapedCharVecB2C_NCINvB5a_5many1Bz_BgX_B2C_NCIB5F_Bz_BgX_B2C_TNCIB3E_Bz_cBgX_B2C_NCIBb9_Bz_ccB2C_NCINvB45_7none_ofBz_Bz_B2C_E0NCNvB1f_9unescaped0E0NcNtBgX_4Char0E0NCIB3E_Bz_cBgX_B2C_B40_NcNtBgX_7Escaped0E0EE0E0NcBhm_0E0NCIB5F_Bz_Bz_B2C_TNCIB5F_Bz_Bz_B2C_TNCINvB35_5valueBz_Bz_Bz_B2C_NCINvBfW_3tagBz_Bz_B2C_E0E0BlH_BlH_BlH_BlH_BlH_BlH_EE0BlH_EE0Bhm_Bz_cBf4_E0E0NvYB8L_INtNtBG_7convert4FromBf0_E4fromE0B40_E0NCIB7l_Bz_cB8L_cB2C_B40_NCIB3E_Bz_Bf0_B8L_B2C_NCIB33_Bz_Bf4_B2C_NCIBfU_Bz_B2C_NCIBah_Bz_BaC_B2C_NCIBhU_Bz_cB2C_NCIB5F_Bz_cB2C_TBiT_B40_EE0E0E0Bl7_Bz_Bz_cBf4_E0E0Bno_E0B40_E0EE0B40_E0EE0NcNtB1d_5Child0E0NCIB3E_Bz_NtNtB1h_23nonnegative_array_index21NonNegativeArrayIndexB1d_B2C_NCIB7l_Bz_cBry_cB2C_B40_NCINvB35_7map_resBz_yBry_B2C_NtNtB1h_5error15ArrayIndexErrorNCIBt1_Bz_Bz_yB2C_NtNtNtBG_3num5error13ParseIntErrorNCIBt1_Bz_Bz_Bz_B2C_Btr_INvB45_6digit1Bz_B2C_ENCNvB1f_26length_limited_array_index0E0INvMNtBG_3stre5parseyEE0NvYyINtBny_7TryIntoBry_E8try_intoE0B40_E0NcNtB1d_15ArrayIndexChild0E0NCIB3E_Bz_cB1d_B2C_NCIB6L_Bz_Bz_cB2C_Bm9_NCIB5F_Bz_cB2C_TB40_B7i_EE0E0NCNvB1f_28wildcard_descendant_selector0E0NCIB6L_Bz_Bz_B1d_B2C_Bm9_NCIB5F_Bz_B1d_B2C_TNCIB3E_Bz_B8L_B1d_B2C_NCIB5F_Bz_B8L_B2C_TB9T_BdL_EE0NcNtB1d_10Descendant0E0NCIB3E_Bz_Bry_B1d_B2C_BsA_NcNtB1d_20ArrayIndexDescendant0E0EE0E0EE0E0EB1j_:
   29|  1.15k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|  1.15k|  mut first: F,
   31|  1.15k|  mut second: G,
   32|  1.15k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|  1.15k|where
   34|  1.15k|  F: Parser<I, O1, E>,
   35|  1.15k|  G: Parser<I, O2, E>,
   36|  1.15k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|  1.15k|}
_RNCNCINvNtCskh6ql9CB8e_3nom8sequence4pairReINtNtCs3NN8x5qF7TE_4core6option6OptionNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenEINtNtCsc6jWpmc7Dho_5alloc3vec3VecB1h_EINtNtB8_5error5ErrorBD_ENCINvNtB8_10combinator3optBD_B1h_B2G_NCINvB39_3mapBD_cB1h_B2G_NCINvNtNtB8_9character8complete4charBD_B2G_E0NCNvB1j_8jsonpath0E0E0NCINvNtB8_5multi5many0BD_B1h_B2G_NCINvNtB8_6branch3altBD_B1h_B2G_TNCIB3I_BD_cB1h_B2G_NCIB5J_BD_cB2G_TNCINvB6_8precededBD_ccB2G_B44_B44_E0NCINvB6_9delimitedBD_cccB2G_B44_B44_B44_E0EE0NCNvB1j_23wildcard_child_selector0E0NCIB3I_BD_NtB1j_12MemberStringB1h_B2G_NCIB5J_BD_B8P_B2G_TNCIB6P_BD_cB8P_B2G_B44_NCIB3I_BD_BD_B8P_B2G_NCINvB39_9recognizeBD_TcIB25_cEEB2G_NCIB4_BD_cBaG_B2G_NCINvB39_6verifyBD_ccB2G_INvB49_7anycharBD_B2G_ENCNvB1j_12member_first0E0NCIB5c_BD_cB2G_NCIBbd_BD_ccB2G_Bbz_NCNvB1j_16member_character0E0E0E0E0NcNtB8P_8Borrowed0E0E0NCIB7p_BD_cB8P_cB2G_B44_NCIB5J_BD_B8P_B2G_TNCIB7p_BD_cB8P_cB2G_B44_NCIB3I_BD_IBG_NtNtB29_6string6StringEB8P_B2G_NCIB37_BD_Bf8_B2G_NCINvNtNtB8_5bytes8complete17escaped_transformBD_B2G_NCIB3I_BD_IB25_NtB1j_16MaybeEscapedCharENtB1j_19MaybeEscapedCharVecB2G_NCINvB5e_5many1BD_Bh1_B2G_NCIB5J_BD_Bh1_B2G_TNCIB3I_BD_cBh1_B2G_NCIBbd_BD_ccB2G_NCINvB49_7none_ofBD_BD_B2G_E0NCNvB1j_9unescaped0E0NcNtBh1_4Char0E0NCIB3I_BD_cBh1_B2G_B44_NcNtBh1_7Escaped0E0EE0E0NcBhq_0E0NCIB5J_BD_BD_B2G_TNCIB5J_BD_BD_B2G_TNCINvB39_5valueBD_BD_BD_B2G_NCINvBg0_3tagBD_BD_B2G_E0E0BlL_BlL_BlL_BlL_BlL_BlL_EE0BlL_EE0Bhq_BD_cBf8_E0E0NvYB8P_INtNtBK_7convert4FromBf4_E4fromE0B44_E0NCIB7p_BD_cB8P_cB2G_B44_NCIB3I_BD_Bf4_B8P_B2G_NCIB37_BD_Bf8_B2G_NCIBfY_BD_B2G_NCIBal_BD_BaG_B2G_NCIBhY_BD_cB2G_NCIB5J_BD_cB2G_TBiX_B44_EE0E0E0Blb_BD_BD_cBf8_E0E0Bns_E0B44_E0EE0B44_E0EE0NcNtB1h_5Child0E0NCIB3I_BD_NtNtB1l_23nonnegative_array_index21NonNegativeArrayIndexB1h_B2G_NCIB7p_BD_cBrC_cB2G_B44_NCINvB39_7map_resBD_yBrC_B2G_NtNtB1l_5error15ArrayIndexErrorNCIBt5_BD_BD_yB2G_NtNtNtBK_3num5error13ParseIntErrorNCIBt5_BD_BD_BD_B2G_Btv_INvB49_6digit1BD_B2G_ENCNvB1j_26length_limited_array_index0E0INvMNtBK_3stre5parseyEE0NvYyINtBnC_7TryIntoBrC_E8try_intoE0B44_E0NcNtB1h_15ArrayIndexChild0E0NCIB3I_BD_cB1h_B2G_NCIB6P_BD_BD_cB2G_Bmd_NCIB5J_BD_cB2G_TB44_B7m_EE0E0NCNvB1j_28wildcard_descendant_selector0E0NCIB6P_BD_BD_B1h_B2G_Bmd_NCIB5J_BD_B1h_B2G_TNCIB3I_BD_B8P_B1h_B2G_NCIB5J_BD_B8P_B2G_TB9X_BdP_EE0NcNtB1h_10Descendant0E0NCIB3I_BD_BrC_B1h_B2G_BsE_NcNtB1h_20ArrayIndexDescendant0E0EE0E0EE0E0E00B1n_:
   39|  1.15k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
_RINvNtCskh6ql9CB8e_3nom8sequence4pairRecINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEINtNtB4_5error5ErrorBz_ENCINvNtB4_10combinator6verifyBz_ccB1b_INvNtNtB4_9character8complete7anycharBz_B1b_ENCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0Bz_cB1b_NCIB1C_Bz_ccB1b_B2b_NCNvB2Y_16member_character0E0E0EB32_:
   29|  2.31k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|  2.31k|  mut first: F,
   31|  2.31k|  mut second: G,
   32|  2.31k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|  2.31k|where
   34|  2.31k|  F: Parser<I, O1, E>,
   35|  2.31k|  G: Parser<I, O2, E>,
   36|  2.31k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|  2.31k|}
_RNCINvNtCskh6ql9CB8e_3nom8sequence8precededReBF_NtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBF_ENCINvNtNtB6_5bytes8complete3tagBF_BF_B1w_E0NCINvNtB6_6branch3altBF_BK_B1w_TNCINvNtB6_10combinator3mapBF_NtBM_12MemberStringBK_B1w_NCIB2E_BF_B3A_B1w_TNCIB3a_BF_BF_B3A_B1w_NCINvB3c_9recognizeBF_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1w_NCINvB4_4pairBF_cB52_B1w_NCINvB3c_6verifyBF_ccB1w_INvNtNtB6_9character8complete7anycharBF_B1w_ENCNvBM_12member_first0E0NCINvNtB6_5multi5many0BF_cB1w_NCIB68_BF_ccB1w_B6u_NCNvBM_16member_character0E0E0E0E0NcNtB3A_8Borrowed0E0NCINvB4_9delimitedBF_cB3A_cB1w_NCINvB6x_4charBF_B1w_E0NCIB2E_BF_B3A_B1w_TNCIB9k_BF_cB3A_cB1w_B9M_NCIB3a_BF_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtB57_6string6StringEB3A_B1w_NCINvB3c_3optBF_BbC_B1w_NCINvB1Z_17escaped_transformBF_B1w_NCIB3a_BF_IB53_NtBM_16MaybeEscapedCharENtBM_19MaybeEscapedCharVecB1w_NCINvB7G_5many1BF_Bdj_B1w_NCIB2E_BF_Bdj_B1w_TNCIB3a_BF_cBdj_B1w_NCIB68_BF_ccB1w_NCINvB6x_7none_ofBF_BF_B1w_E0NCNvBM_9unescaped0E0NcNtBdj_4Char0E0NCIB3a_BF_cBdj_B1w_B9M_NcNtBdj_7Escaped0E0EE0E0NcBdH_0E0NCIB2E_BF_BF_B1w_TNCIB2E_BF_BF_B1w_TNCINvB3c_5valueBF_BF_BF_B1w_B1U_E0Bi0_Bi0_Bi0_Bi0_Bi0_Bi0_EE0Bi0_EE0BdH_BF_cBbC_E0E0NvYB3A_INtNtBb5_7convert4FromBb0_E4fromE0B9M_E0NCIB9k_BF_cB3A_cB1w_B9M_NCIB3a_BF_Bb0_B3A_B1w_NCIBca_BF_BbC_B1w_NCIBcy_BF_B1w_NCIB4H_BF_B52_B1w_NCIBee_BF_cB1w_NCIB2E_BF_cB1w_TBfd_B9M_EE0E0E0Bhq_BF_BF_cBbC_E0E0Bjm_E0B9M_E0EE0B9M_E0EE0NcNtBK_10Descendant0E0NCIB3a_BF_NtNtBO_23nonnegative_array_index21NonNegativeArrayIndexBK_B1w_NCIB9k_BF_cBnC_cB1w_B9M_NCINvB3c_7map_resBF_yBnC_B1w_NtNtBO_5error15ArrayIndexErrorNCIBp3_BF_BF_yB1w_NtNtNtBb5_3num5error13ParseIntErrorNCIBp3_BF_BF_BF_B1w_Bpt_INvB6x_6digit1BF_B1w_ENCNvBM_26length_limited_array_index0E0INvMNtBb5_3stre5parseyEE0NvYyINtBjw_7TryIntoBnC_E8try_intoE0B9M_E0NcNtBK_20ArrayIndexDescendant0E0EE0E0BQ_:
   71|  1.15k|  move |input: I| {
   72|  1.15k|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|  1.15k|  }
_RNCINvNtCskh6ql9CB8e_3nom8sequence4pairReINtNtCs3NN8x5qF7TE_4core6option6OptionNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser5TokenEINtNtCsc6jWpmc7Dho_5alloc3vec3VecB1f_EINtNtB6_5error5ErrorBB_ENCINvNtB6_10combinator3optBB_B1f_B2E_NCINvB37_3mapBB_cB1f_B2E_NCINvNtNtB6_9character8complete4charBB_B2E_E0NCNvB1h_8jsonpath0E0E0NCINvNtB6_5multi5many0BB_B1f_B2E_NCINvNtB6_6branch3altBB_B1f_B2E_TNCIB3G_BB_cB1f_B2E_NCIB5H_BB_cB2E_TNCINvB4_8precededBB_ccB2E_B42_B42_E0NCINvB4_9delimitedBB_cccB2E_B42_B42_B42_E0EE0NCNvB1h_23wildcard_child_selector0E0NCIB3G_BB_NtB1h_12MemberStringB1f_B2E_NCIB5H_BB_B8N_B2E_TNCIB6N_BB_cB8N_B2E_B42_NCIB3G_BB_BB_B8N_B2E_NCINvB37_9recognizeBB_TcIB23_cEEB2E_NCIB2_BB_cBaE_B2E_NCINvB37_6verifyBB_ccB2E_INvB47_7anycharBB_B2E_ENCNvB1h_12member_first0E0NCIB5a_BB_cB2E_NCIBbb_BB_ccB2E_Bbx_NCNvB1h_16member_character0E0E0E0E0NcNtB8N_8Borrowed0E0E0NCIB7n_BB_cB8N_cB2E_B42_NCIB5H_BB_B8N_B2E_TNCIB7n_BB_cB8N_cB2E_B42_NCIB3G_BB_IBE_NtNtB27_6string6StringEB8N_B2E_NCIB35_BB_Bf6_B2E_NCINvNtNtB6_5bytes8complete17escaped_transformBB_B2E_NCIB3G_BB_IB23_NtB1h_16MaybeEscapedCharENtB1h_19MaybeEscapedCharVecB2E_NCINvB5c_5many1BB_BgZ_B2E_NCIB5H_BB_BgZ_B2E_TNCIB3G_BB_cBgZ_B2E_NCIBbb_BB_ccB2E_NCINvB47_7none_ofBB_BB_B2E_E0NCNvB1h_9unescaped0E0NcNtBgZ_4Char0E0NCIB3G_BB_cBgZ_B2E_B42_NcNtBgZ_7Escaped0E0EE0E0NcBho_0E0NCIB5H_BB_BB_B2E_TNCIB5H_BB_BB_B2E_TNCINvB37_5valueBB_BB_BB_B2E_NCINvBfY_3tagBB_BB_B2E_E0E0BlJ_BlJ_BlJ_BlJ_BlJ_BlJ_EE0BlJ_EE0Bho_BB_cBf6_E0E0NvYB8N_INtNtBI_7convert4FromBf2_E4fromE0B42_E0NCIB7n_BB_cB8N_cB2E_B42_NCIB3G_BB_Bf2_B8N_B2E_NCIB35_BB_Bf6_B2E_NCIBfW_BB_B2E_NCIBaj_BB_BaE_B2E_NCIBhW_BB_cB2E_NCIB5H_BB_cB2E_TBiV_B42_EE0E0E0Bl9_BB_BB_cBf6_E0E0Bnq_E0B42_E0EE0B42_E0EE0NcNtB1f_5Child0E0NCIB3G_BB_NtNtB1j_23nonnegative_array_index21NonNegativeArrayIndexB1f_B2E_NCIB7n_BB_cBrA_cB2E_B42_NCINvB37_7map_resBB_yBrA_B2E_NtNtB1j_5error15ArrayIndexErrorNCIBt3_BB_BB_yB2E_NtNtNtBI_3num5error13ParseIntErrorNCIBt3_BB_BB_BB_B2E_Btt_INvB47_6digit1BB_B2E_ENCNvB1h_26length_limited_array_index0E0INvMNtBI_3stre5parseyEE0NvYyINtBnA_7TryIntoBrA_E8try_intoE0B42_E0NcNtB1f_15ArrayIndexChild0E0NCIB3G_BB_cB1f_B2E_NCIB6N_BB_BB_cB2E_Bmb_NCIB5H_BB_cB2E_TB42_B7k_EE0E0NCNvB1h_28wildcard_descendant_selector0E0NCIB6N_BB_BB_B1f_B2E_Bmb_NCIB5H_BB_B1f_B2E_TNCIB3G_BB_B8N_B1f_B2E_NCIB5H_BB_B8N_B2E_TB9V_BdN_EE0NcNtB1f_10Descendant0E0NCIB3G_BB_BrA_B1f_B2E_BsC_NcNtB1f_20ArrayIndexDescendant0E0EE0E0EE0E0E0B1l_:
   37|  1.15k|  move |input: I| {
   38|  1.15k|    let (input, o1) = first.parse(input)?;
   39|  1.15k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|  1.15k|  }
_RNCINvNtCskh6ql9CB8e_3nom8sequence8precededRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBF_ENCINvNtNtB6_9character8complete4charBF_B1C_E0NCINvNtB6_10combinator3mapBF_BF_BI_B1C_NCINvB2O_9recognizeBF_TcINtNtCsc6jWpmc7Dho_5alloc3vec3VeccEEB1C_NCINvB4_4pairBF_cB3K_B1C_NCINvB2O_6verifyBF_ccB1C_INvB25_7anycharBF_B1C_ENCNvBK_12member_first0E0NCINvNtB6_5multi5many0BF_cB1C_NCIB4Q_BF_ccB1C_B5c_NCNvBK_16member_character0E0E0E0E0NcNtBI_8Borrowed0E0E0BO_:
   71|  2.31k|  move |input: I| {
   72|  2.31k|    let (input, _) = first.parse(input)?;
   73|  1.15k|    second.parse(input)
   74|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom8sequence8precededReBD_cINtNtB4_5error5ErrorBD_ENCINvNtNtB4_5bytes8complete3tagBD_BD_BJ_E0NCINvNtB4_6branch3altBD_cBJ_TNCINvNtNtB4_9character8complete4charBD_BJ_E0NCINvB2_9delimitedBD_cccBJ_B2g_B2g_B2g_E0EE0ECs6TTJfIhyJGW_8rsonpath:
   63|  1.15k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.15k|  mut first: F,
   65|  1.15k|  mut second: G,
   66|  1.15k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.15k|where
   68|  1.15k|  F: Parser<I, O1, E>,
   69|  1.15k|  G: Parser<I, O2, E>,
   70|  1.15k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.15k|}
_RNCINvNtCskh6ql9CB8e_3nom8sequence8precededReBF_cINtNtB6_5error5ErrorBF_ENCINvNtNtB6_5bytes8complete3tagBF_BF_BL_E0NCINvNtB6_6branch3altBF_cBL_TNCINvNtNtB6_9character8complete4charBF_BL_E0NCINvB4_9delimitedBF_cccBL_B2i_B2i_B2i_E0EE0E0Cs6TTJfIhyJGW_8rsonpath:
   71|  2.31k|  move |input: I| {
   72|  2.31k|    let (input, _) = first.parse(input)?;
   73|  1.15k|    second.parse(input)
   74|  2.31k|  }
_RINvNtCskh6ql9CB8e_3nom8sequence9delimitedRecNtNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1C_E0NCINvNtB4_10combinator3mapBE_INtNtCs3NN8x5qF7TE_4core6option6OptionNtNtCsc6jWpmc7Dho_5alloc6string6StringEBH_B1C_NCINvB2O_3optBE_B3O_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBE_B1C_NCIB2M_BE_INtNtB3S_3vec3VecNtBJ_16MaybeEscapedCharENtBJ_19MaybeEscapedCharVecB1C_NCINvNtB4_5multi5many1BE_B6e_B1C_NCINvNtB4_6branch3altBE_B6e_B1C_TNCIB2M_BE_cB6e_B1C_NCINvB2O_6verifyBE_ccB1C_NCINvB25_7none_ofBE_BE_B1C_E0NCNvBJ_9unescaped0E0NcNtB6e_4Char0E0NCIB2M_BE_cB6e_B1C_B20_NcNtB6e_7Escaped0E0EE0E0NcB6C_0E0NCIB7G_BE_BE_B1C_TNCIB7G_BE_BE_B1C_TNCINvB2O_5valueBE_BE_BE_B1C_NCINvB51_3tagBE_BE_B1C_E0E0Bbp_Bbp_Bbp_Bbp_Bbp_Bbp_EE0Bbp_EE0B6C_BE_cB3O_E0E0NvYBH_INtNtB3h_7convert4FromB3c_E4fromE0B20_EBN_:
  172|  2.31k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  2.31k|  mut first: F,
  174|  2.31k|  mut second: G,
  175|  2.31k|  mut third: H,
  176|  2.31k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  2.31k|where
  178|  2.31k|  F: Parser<I, O1, E>,
  179|  2.31k|  G: Parser<I, O2, E>,
  180|  2.31k|  H: Parser<I, O3, E>,
  181|  2.31k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  2.31k|}

_RNvXsg_NtCskh6ql9CB8e_3nom6traitsReNtB5_9InputTake10take_splitCs6TTJfIhyJGW_8rsonpath:
  424|  1.15k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  1.15k|    let (prefix, suffix) = self.split_at(count);
  426|  1.15k|    (suffix, prefix)
  427|  1.15k|  }
_RNvXsk_NtCskh6ql9CB8e_3nom6traitsRShINtB5_7CompareBv_E7compare:
  739|  3.47k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  3.47k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  3.47k|
  742|  3.47k|    match pos {
  743|      0|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  3.47k|        if self.len() >= t.len() {
  746|  1.15k|          CompareResult::Ok
  747|       |        } else {
  748|  2.31k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  3.47k|  }
_RNCNvXsk_NtCskh6ql9CB8e_3nom6traitsRShINtB7_7CompareBx_E7compare0Cs6TTJfIhyJGW_8rsonpath:
  740|  2.31k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsn_NtCskh6ql9CB8e_3nom6traitsReINtB5_7CompareBv_E7compare:
  839|  3.47k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  3.47k|    self.as_bytes().compare(t.as_bytes())
  841|  3.47k|  }
_RNvXsc_NtCskh6ql9CB8e_3nom6traitsRcNtB5_6AsChar3lenCs6TTJfIhyJGW_8rsonpath:
  296|  4.62k|  fn len(self) -> usize {
  297|  4.62k|    self.len_utf8()
  298|  4.62k|  }
_RNvXs5_NtCskh6ql9CB8e_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  3.47k|  fn as_bytes(&self) -> &[u8] {
   98|  3.47k|    (*self).as_bytes()
   99|  3.47k|  }
_RNvXsf_NtCskh6ql9CB8e_3nom6traitsReNtB5_9InputIter13iter_elementsCs6TTJfIhyJGW_8rsonpath:
  386|  15.0k|  fn iter_elements(&self) -> Self::IterElem {
  387|  15.0k|    self.chars()
  388|  15.0k|  }
_RNvXsc_NtCskh6ql9CB8e_3nom6traitsRcNtB5_6AsChar7as_charCs6TTJfIhyJGW_8rsonpath:
  272|  4.62k|  fn as_char(self) -> char {
  273|  4.62k|    *self
  274|  4.62k|  }
_RNvXsb_NtCskh6ql9CB8e_3nom6traitscNtB5_6AsChar8is_alphaCs6TTJfIhyJGW_8rsonpath:
  245|  1.15k|  fn is_alpha(self) -> bool {
  246|  1.15k|    self.is_ascii_alphabetic()
  247|  1.15k|  }
_RNvXsb_NtCskh6ql9CB8e_3nom6traitscNtB5_6AsChar7as_charCs6TTJfIhyJGW_8rsonpath:
  241|  10.4k|  fn as_char(self) -> char {
  242|  10.4k|    self
  243|  10.4k|  }
_RNvXs_NtCskh6ql9CB8e_3nom6traitsReNtB4_11InputLength9input_lenCs6TTJfIhyJGW_8rsonpath:
   33|  6.94k|  fn input_len(&self) -> usize {
   34|  6.94k|    self.len()
   35|  6.94k|  }
_RNvXsf_NtCskh6ql9CB8e_3nom6traitsReNtB5_9InputIter12iter_indicesCs6TTJfIhyJGW_8rsonpath:
  382|  1.15k|  fn iter_indices(&self) -> Self::Iter {
  383|  1.15k|    self.char_indices()
  384|  1.15k|  }
_RNvXs24_NtCskh6ql9CB8e_3nom6traitsReINtB6_5SliceINtNtNtCs3NN8x5qF7TE_4core3ops5range9RangeFromjEE5slice:
 1013|  5.78k|    fn slice(&self, range: $ty) -> Self {
 1014|  5.78k|      &self[range]
 1015|  5.78k|    }

_RNvMs2_NtCs6qstwpSgkKS_9once_cell3impINtB5_8OnceCellNtNtCsc6jWpmc7Dho_5alloc6string6StringE14is_initializedCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   49|  1.15k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.15k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.15k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.15k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.15k|        // `SeqCst` operations on the slow path.
   54|  1.15k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.15k|    }

_RNvMs4_NtCs6qstwpSgkKS_9once_cell4syncINtB5_8OnceCellNtNtCsc6jWpmc7Dho_5alloc6string6StringE3getCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  965|  1.15k|        pub fn get(&self) -> Option<&T> {
  966|  1.15k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  1.15k|                None
  971|       |            }
  972|  1.15k|        }

_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  641|   158k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|   158k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|   158k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1861|  1.08k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.08k|        unsafe {
 1863|  1.08k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.08k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.08k|        }
 1866|  1.08k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1230|     73|    fn reserve_one_unchecked(&mut self) {
 1231|     73|        debug_assert_eq!(self.len(), self.capacity());
 1232|     73|        let new_cap = self.len()
 1233|     73|            .checked_add(1)
 1234|     73|            .and_then(usize::checked_next_power_of_two)
 1235|     73|            .expect("capacity overflow");
 1236|     73|        infallible(self.try_grow(new_cap))
 1237|     73|    }
_RNvXs1v_CseAHZKPHGegi_8smallvecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2412|   130k|                fn size() -> usize { $size }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E9from_heapCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  668|     73|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|     73|        SmallVecData { heap: (ptr, len) }
  670|     73|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  930|   327k|    fn inline_capacity() -> usize {
  931|   327k|        if mem::size_of::<A::Item>() > 0 {
  932|   327k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   327k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  975|   158k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|   158k|        unsafe {
  977|   158k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|   158k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|   158k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E8capacityCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  968|     73|    pub fn capacity(&self) -> usize {
  969|     73|        self.triple().2
  970|     73|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E7spilledCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1005|  70.4k|    pub fn spilled(&self) -> bool {
 1006|  70.4k|        self.capacity > Self::inline_capacity()
 1007|  70.4k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E10triple_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  988|  53.2k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  53.2k|        unsafe {
  990|  53.2k|            if self.spilled() {
  991|  7.12k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  7.12k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  46.1k|                (
  995|  46.1k|                    self.data.inline_mut(),
  996|  46.1k|                    &mut self.capacity,
  997|  46.1k|                    Self::inline_capacity(),
  998|  46.1k|                )
  999|       |            }
 1000|       |        }
 1001|  53.2k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E3popCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1135|  15.6k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  15.6k|        unsafe {
 1137|  15.6k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  15.6k|            let ptr: *const _ = ptr.as_ptr();
 1139|  15.6k|            if *len_ptr == 0 {
 1140|      0|                return None;
 1141|  15.6k|            }
 1142|  15.6k|            let last_index = *len_ptr - 1;
 1143|  15.6k|            *len_ptr = last_index;
 1144|  15.6k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  15.6k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E4pushCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1119|  36.5k|    pub fn push(&mut self, value: A::Item) {
 1120|  36.5k|        unsafe {
 1121|  36.5k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  36.5k|            if *len == cap {
 1123|     73|                self.reserve_one_unchecked();
 1124|     73|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|     73|                ptr = heap_ptr;
 1126|     73|                len = heap_len;
 1127|  36.4k|            }
 1128|  36.5k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  36.5k|            *len += 1;
 1130|  36.5k|        }
 1131|  36.5k|    }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1851|  15.6k|    fn deref(&self) -> &[A::Item] {
 1852|  15.6k|        unsafe {
 1853|  15.6k|            let (ptr, len, _) = self.triple();
 1854|  15.6k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  15.6k|        }
 1856|  15.6k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullNtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFrameE6as_ptrCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2451|  15.6k|    fn as_ptr(self) -> *const T {
 2452|  15.6k|        self.0.as_ptr()
 2453|  15.6k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E10inline_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  645|  46.1k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  46.1k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  46.1k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E6inlineCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  641|  13.4k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  13.4k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  13.4k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E8heap_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  663|  7.27k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  7.27k|        let h = &mut self.heap;
  665|  7.27k|        (h.0, &mut h.1)
  666|  7.27k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E4heapCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  659|  2.40k|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|  2.40k|        (ConstNonNull(self.heap.0), self.heap.1)
  661|  2.40k|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1861|  3.47k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  3.47k|        unsafe {
 1863|  3.47k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  3.47k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  3.47k|        }
 1866|  3.47k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2123|  1.15k|    fn drop(&mut self) {
 2124|  1.15k|        unsafe {
 2125|  1.15k|            if self.spilled() {
 2126|     73|                let (ptr, &mut len) = self.data.heap_mut();
 2127|     73|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.08k|            } else {
 2129|  1.08k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.08k|            }
 2131|       |        }
 2132|  1.15k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullNtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFrameE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2447|  13.4k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  13.4k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  13.4k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2447|   158k|    fn new(ptr: *const T) -> Option<Self> {
 2448|   158k|        NonNull::new(ptr as *mut T).map(Self)
 2449|   158k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB1J_5range9RangeFullE9index_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2041|  1.08k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.08k|        &mut (&mut **self)[index]
 2043|  1.08k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E15inline_capacityCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  930|   130k|    fn inline_capacity() -> usize {
  931|   130k|        if mem::size_of::<A::Item>() > 0 {
  932|   130k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|   130k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E6tripleCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  975|  15.8k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  15.8k|        unsafe {
  977|  15.8k|            if self.spilled() {
  978|  2.40k|                let (ptr, len) = self.data.heap();
  979|  2.40k|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  13.4k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  15.8k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E3lenCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  956|    146|    pub fn len(&self) -> usize {
  957|    146|        self.triple().1
  958|    146|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1005|   165k|    pub fn spilled(&self) -> bool {
 1006|   165k|        self.capacity > Self::inline_capacity()
 1007|   165k|    }
_RNvXsX_CseAHZKPHGegi_8smallvecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2412|   327k|                fn size() -> usize { $size }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1851|   158k|    fn deref(&self) -> &[A::Item] {
 1852|   158k|        unsafe {
 1853|   158k|            let (ptr, len, _) = self.triple();
 1854|   158k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|   158k|        }
 1856|   158k|    }
_RINvCseAHZKPHGegi_8smallvec12layout_arrayNtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFrameECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  332|     73|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|     73|    let size = mem::size_of::<T>()
  334|     73|        .checked_mul(n)
  335|     73|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|     73|    let align = mem::align_of::<T>();
  337|     73|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|     73|}
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  645|  3.47k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  3.47k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  3.47k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2123|  3.47k|    fn drop(&mut self) {
 2124|  3.47k|        unsafe {
 2125|  3.47k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  3.47k|            } else {
 2129|  3.47k|                ptr::drop_in_place(&mut self[..]);
 2130|  3.47k|            }
 2131|       |        }
 2132|  3.47k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2041|  3.47k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  3.47k|        &mut (&mut **self)[index]
 2043|  3.47k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 2451|   158k|    fn as_ptr(self) -> *const T {
 2452|   158k|        self.0.as_ptr()
 2453|   158k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  988|  3.47k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  3.47k|        unsafe {
  990|  3.47k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  3.47k|                (
  995|  3.47k|                    self.data.inline_mut(),
  996|  3.47k|                    &mut self.capacity,
  997|  3.47k|                    Self::inline_capacity(),
  998|  3.47k|                )
  999|       |            }
 1000|       |        }
 1001|  3.47k|    }
_RINvCseAHZKPHGegi_8smallvec10infallibleuECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  322|     73|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|     73|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|     73|}
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E8try_growCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
 1178|     73|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|     73|        unsafe {
 1180|     73|            let unspilled = !self.spilled();
 1181|     73|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|     73|            assert!(new_cap >= len);
 1183|     73|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|     73|            } else if new_cap != cap {
 1192|     73|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|     73|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|     73|                if unspilled {
 1196|     73|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|     73|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|     73|                        .cast();
 1199|     73|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|      0|                    let new_ptr =
 1206|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|      0|                    new_alloc = NonNull::new(new_ptr)
 1208|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|      0|                        .cast();
 1210|       |                }
 1211|     73|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|     73|                self.capacity = new_cap;
 1213|      0|            }
 1214|     73|            Ok(())
 1215|       |        }
 1216|     73|    }
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutBP_:
 1861|  2.31k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  2.31k|        unsafe {
 1863|  2.31k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  2.31k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  2.31k|        }
 1866|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E7spilledBQ_:
 1005|  8.09k|    pub fn spilled(&self) -> bool {
 1006|  8.09k|        self.capacity > Self::inline_capacity()
 1007|  8.09k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  950|  1.15k|    pub fn inline_size(&self) -> usize {
  951|  1.15k|        Self::inline_capacity()
  952|  1.15k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7reserveBP_:
 1224|  2.31k|    pub fn reserve(&mut self, additional: usize) {
 1225|  2.31k|        infallible(self.try_reserve(additional))
 1226|  2.31k|    }
_RNvMsO_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDrop3getCs6TTJfIhyJGW_8rsonpath:
 2351|  2.31k|    fn get(&self) -> usize {
 2352|  2.31k|        self.local_len
 2353|  2.31k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E11from_inlineBV_:
  649|  1.15k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  1.15k|        SmallVecData {
  651|  1.15k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  1.15k|        }
  653|  1.15k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E10triple_mutBQ_:
  988|  6.94k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  6.94k|        unsafe {
  990|  6.94k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  6.94k|                (
  995|  6.94k|                    self.data.inline_mut(),
  996|  6.94k|                    &mut self.capacity,
  997|  6.94k|                    Self::inline_capacity(),
  998|  6.94k|                )
  999|       |            }
 1000|       |        }
 1001|  6.94k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E3popBQ_:
 1135|  3.47k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  3.47k|        unsafe {
 1137|  3.47k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  3.47k|            let ptr: *const _ = ptr.as_ptr();
 1139|  3.47k|            if *len_ptr == 0 {
 1140|  1.15k|                return None;
 1141|  2.31k|            }
 1142|  2.31k|            let last_index = *len_ptr - 1;
 1143|  2.31k|            *len_ptr = last_index;
 1144|  2.31k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  3.47k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutBP_:
  988|  6.94k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  6.94k|        unsafe {
  990|  6.94k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  6.94k|                (
  995|  6.94k|                    self.data.inline_mut(),
  996|  6.94k|                    &mut self.capacity,
  997|  6.94k|                    Self::inline_capacity(),
  998|  6.94k|                )
  999|       |            }
 1000|       |        }
 1001|  6.94k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11inline_sizeBP_:
  950|  1.15k|    pub fn inline_size(&self) -> usize {
  951|  1.15k|        Self::inline_capacity()
  952|  1.15k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E3newBP_:
  783|  5.78k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  5.78k|        assert!(
  787|  5.78k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  5.78k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  5.78k|        SmallVec {
  791|  5.78k|            capacity: 0,
  792|  5.78k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  5.78k|        }
  794|  5.78k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineBU_:
  641|  2.31k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  2.31k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E15inline_capacityBQ_:
  930|  16.1k|    fn inline_capacity() -> usize {
  931|  16.1k|        if mem::size_of::<A::Item>() > 0 {
  932|  16.1k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  16.1k|    }
_RNvXsf_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5derefBP_:
 1851|  2.31k|    fn deref(&self) -> &[A::Item] {
 1852|  2.31k|        unsafe {
 1853|  2.31k|            let (ptr, len, _) = self.triple();
 1854|  2.31k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  2.31k|        }
 1856|  2.31k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutBU_:
  645|  6.94k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  6.94k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  6.94k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E11inline_sizeBQ_:
  950|  1.15k|    pub fn inline_size(&self) -> usize {
  951|  1.15k|        Self::inline_capacity()
  952|  1.15k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropBP_:
 2123|  2.31k|    fn drop(&mut self) {
 2124|  2.31k|        unsafe {
 2125|  2.31k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  2.31k|            } else {
 2129|  2.31k|                ptr::drop_in_place(&mut self[..]);
 2130|  2.31k|            }
 2131|       |        }
 2132|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E3newBO_:
  783|  1.15k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  1.15k|        assert!(
  787|  1.15k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  1.15k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  1.15k|        SmallVec {
  791|  1.15k|            capacity: 0,
  792|  1.15k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  1.15k|        }
  794|  1.15k|    }
_RNvXsX_CseAHZKPHGegi_8smallvecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBB_:
 2412|  17.3k|                fn size() -> usize { $size }
_RNvXsX_CseAHZKPHGegi_8smallvecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeBA_:
 2412|  27.7k|                fn size() -> usize { $size }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E3newBQ_:
  783|  1.15k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  1.15k|        assert!(
  787|  1.15k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  1.15k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  1.15k|        SmallVec {
  791|  1.15k|            capacity: 0,
  792|  1.15k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  1.15k|        }
  794|  1.15k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newBT_:
 2447|  2.31k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  2.31k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  2.31k|    }
_RINvXsr_CseAHZKPHGegi_8smallvecINtB6_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2f_8adapters3map3MapINtCs2EzgWToZKiN_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5m_9Minimizer18process_superstate0EEBQ_:
 2058|  2.31k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2059|  2.31k|        let mut v = SmallVec::new();
 2060|  2.31k|        v.extend(iterable);
 2061|  2.31k|        v
 2062|  2.31k|    }
_RINvXss_CseAHZKPHGegi_8smallvecINtB6_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2f_8adapters3map3MapINtCs2EzgWToZKiN_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5c_9Minimizer18process_superstate0EEBQ_:
 2066|  2.31k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2067|  2.31k|        let mut iter = iterable.into_iter();
 2068|  2.31k|        let (lower_size_bound, _) = iter.size_hint();
 2069|  2.31k|        self.reserve(lower_size_bound);
 2070|  2.31k|
 2071|  2.31k|        unsafe {
 2072|  2.31k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2073|  2.31k|            let ptr = ptr.as_ptr();
 2074|  2.31k|            let mut len = SetLenOnDrop::new(len_ptr);
 2075|  2.31k|            while len.get() < cap {
 2076|  2.31k|                if let Some(out) = iter.next() {
 2077|      0|                    ptr::write(ptr.add(len.get()), out);
 2078|      0|                    len.increment_len(1);
 2079|      0|                } else {
 2080|  2.31k|                    return;
 2081|       |                }
 2082|       |            }
 2083|       |        }
 2084|       |
 2085|      0|        for elem in iter {
 2086|      0|            self.push(elem);
 2087|      0|        }
 2088|  2.31k|    }
_RINvCseAHZKPHGegi_8smallvec10infallibleuECs6TTJfIhyJGW_8rsonpath:
  322|  2.31k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|  2.31k|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|  2.31k|}
_RNvXsg_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutBQ_:
 1861|  1.15k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.15k|        unsafe {
 1863|  1.15k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.15k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.15k|        }
 1866|  1.15k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  649|  1.15k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  1.15k|        SmallVecData {
  651|  1.15k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  1.15k|        }
  653|  1.15k|    }
_RNvMsR_CseAHZKPHGegi_8smallvecINtB5_12ConstNonNullTNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrBT_:
 2451|  2.31k|    fn as_ptr(self) -> *const T {
 2452|  2.31k|        self.0.as_ptr()
 2453|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledBP_:
 1005|  11.5k|    pub fn spilled(&self) -> bool {
 1006|  11.5k|        self.capacity > Self::inline_capacity()
 1007|  11.5k|    }
_RNvXsP_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDropNtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCs6TTJfIhyJGW_8rsonpath:
 2363|  2.31k|    fn drop(&mut self) {
 2364|  2.31k|        *self.len = self.local_len;
 2365|  2.31k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB1Z_5range9RangeFullE9index_mutBQ_:
 2041|  1.15k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.15k|        &mut (&mut **self)[index]
 2043|  1.15k|    }
_RNvXsu_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtCs3NN8x5qF7TE_4core7default7Default7defaultBP_:
 2102|  2.31k|    fn default() -> SmallVec<A> {
 2103|  2.31k|        SmallVec::new()
 2104|  2.31k|    }
_RNvXs1v_CseAHZKPHGegi_8smallvecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2412|  2.31k|                fn size() -> usize { $size }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11try_reserveBP_:
 1242|  2.31k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1243|  2.31k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1244|  2.31k|        // calls to it from callers.
 1245|  2.31k|        let (_, &mut len, cap) = self.triple_mut();
 1246|  2.31k|        if cap - len >= additional {
 1247|  2.31k|            return Ok(());
 1248|      0|        }
 1249|      0|        let new_cap = len
 1250|      0|            .checked_add(additional)
 1251|      0|            .and_then(usize::checked_next_power_of_two)
 1252|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1253|      0|        self.try_grow(new_cap)
 1254|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleBP_:
  975|  2.31k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  2.31k|        unsafe {
  977|  2.31k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  2.31k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  2.31k|    }
_RNvMsO_CseAHZKPHGegi_8smallvecNtB5_12SetLenOnDrop3newCs6TTJfIhyJGW_8rsonpath:
 2343|  2.31k|    fn new(len: &'a mut usize) -> Self {
 2344|  2.31k|        SetLenOnDrop {
 2345|  2.31k|            local_len: *len,
 2346|  2.31k|            len,
 2347|  2.31k|        }
 2348|  2.31k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityBP_:
  930|  21.9k|    fn inline_capacity() -> usize {
  931|  21.9k|        if mem::size_of::<A::Item>() > 0 {
  932|  21.9k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  21.9k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E11from_inlineBU_:
  649|  5.78k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  5.78k|        SmallVecData {
  651|  5.78k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  5.78k|        }
  653|  5.78k|    }
_RNvXsp_CseAHZKPHGegi_8smallvecINtB5_8SmallVecATNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCs3NN8x5qF7TE_4core3ops5index8IndexMutNtNtB2c_5range9RangeFullE9index_mutBP_:
 2041|  2.31k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  2.31k|        &mut (&mut **self)[index]
 2043|  2.31k|    }
_RNvXsv_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropBQ_:
 2123|  1.15k|    fn drop(&mut self) {
 2124|  1.15k|        unsafe {
 2125|  1.15k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.15k|            } else {
 2129|  1.15k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.15k|            }
 2131|       |        }
 2132|  1.15k|    }
_RNvMs9_CseAHZKPHGegi_8smallvecINtB5_12SmallVecDataANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E10inline_mutBV_:
  645|  6.94k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  6.94k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  6.94k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtCs6TTJfIhyJGW_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  930|  1.15k|    fn inline_capacity() -> usize {
  931|  1.15k|        if mem::size_of::<A::Item>() > 0 {
  932|  1.15k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  1.15k|    }
_RNvMsc_CseAHZKPHGegi_8smallvecINtB5_8SmallVecANtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256j2_E4pushBQ_:
 1119|  2.31k|    pub fn push(&mut self, value: A::Item) {
 1120|  2.31k|        unsafe {
 1121|  2.31k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  2.31k|            if *len == cap {
 1123|      0|                self.reserve_one_unchecked();
 1124|      0|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|      0|                ptr = heap_ptr;
 1126|      0|                len = heap_len;
 1127|  2.31k|            }
 1128|  2.31k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  2.31k|            *len += 1;
 1130|  2.31k|        }
 1131|  2.31k|    }

_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BQ_:
   80|  5.78k|        self.keys.iter().position(|k| key == k)
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE3getBG_EBO_:
   87|  4.62k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCNCINvMCs2EzgWToZKiN_10vector_mapINtB7_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BS_:
   90|  1.15k|        self.position(key).map(|p| &self.values[p])
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E8iter_mutBL_:
  175|  2.31k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  2.31k|        IterMut {
  177|  2.31k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  2.31k|        }
  179|  2.31k|    }
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BQ_:
   80|  23.1k|        self.keys.iter().position(|k| key == k)
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBN_:
   60|  2.31k|    pub fn len(&self) -> usize {
   61|  2.31k|        self.keys.len()
   62|  2.31k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE6insertBN_:
   99|  3.47k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E3new0BN_:
   41|  2.31k|    #[post(ret.len() == 0)]
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE3getBI_E0BQ_:
   87|  1.15k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E13with_capacity0BN_:
   49|  2.31k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BP_:
   41|  1.15k|    #[post(ret.len() == 0)]
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE6insertBN_:
   99|  3.47k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBO_:
   79|  11.5k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  11.5k|        self.keys.iter().position(|k| key == k)
   81|  11.5k|    }
_RNCNCINvMCs2EzgWToZKiN_10vector_mapINtB7_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BS_:
   90|  4.62k|        self.position(key).map(|p| &self.values[p])
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E13with_capacityBL_:
   49|  2.31k|    #[post(ret.len() == 0)]
_RNvXs7_Cs2EzgWToZKiN_10vector_mapQINtB5_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12IntoIterator9into_iterBP_:
  299|  2.31k|    fn into_iter(self) -> Self::IntoIter {
  300|  2.31k|        self.iter_mut()
  301|  2.31k|    }
_RNvXs8_Cs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12IntoIterator9into_iterBO_:
  307|  2.31k|    fn into_iter(self) -> Self::IntoIter {
  308|  2.31k|        IntoIter {
  309|  2.31k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  2.31k|        }
  311|  2.31k|    }
_RNCINvMCs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE3getBI_E0BQ_:
   87|  4.62k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE13with_capacityBN_:
   49|  1.15k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BP_:
   49|  1.15k|    #[post(ret.len() == 0)]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBO_:
   83|  3.47k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  3.47k|        self.position(key).is_some()
   85|  3.47k|    }
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BP_:
   49|  1.15k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BP_:
   99|  3.47k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE3getBG_EBO_:
   87|  1.15k|    #[post(!self.contains_key(key) -> ret.is_none())]
_RINvMCs2EzgWToZKiN_10vector_mapINtB3_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBO_:
   79|  4.62k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  4.62k|        self.keys.iter().position(|k| key == k)
   81|  4.62k|    }
_RNvXsr_Cs2EzgWToZKiN_10vector_mapINtB5_7IterMutNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextBP_:
  494|  2.31k|            fn next(&mut self) -> Option<Self::Item> {
  495|  2.31k|                self.iter.next()
  496|  2.31k|            }
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BP_:
   99|  3.47k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs9_Cs2EzgWToZKiN_10vector_mapINtB5_8IntoIterNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator9size_hintBQ_:
  326|  2.31k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  2.31k|        self.iter.size_hint()
  328|  2.31k|    }
_RNvMCs2EzgWToZKiN_10vector_mapINtB2_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_3nfa10NfaStateIdE13with_capacityBN_:
   49|  1.15k|    #[post(ret.len() == 0)]
_RNCNvMCs2EzgWToZKiN_10vector_mapINtB4_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BP_:
   41|  1.15k|    #[post(ret.len() == 0)]
_RNvXs9_Cs2EzgWToZKiN_10vector_mapINtB5_8IntoIterNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextBQ_:
  322|  2.31k|    fn next(&mut self) -> Option<(K, V)> {
  323|  2.31k|        self.iter.next()
  324|  2.31k|    }
_RNvXs4_Cs2EzgWToZKiN_10vector_mapINtB5_6VecMapNtNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexRBI_E5indexBQ_:
  277|  4.62k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  4.62k|        self.get(key).unwrap()
  279|  4.62k|    }

_RNvNtNtNtCs6TTJfIhyJGW_8rsonpath14classification4mask3m6410combine_32:
   52|  41.9k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  41.9k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  41.9k|    }

_RINvMNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   29|  8.53k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   30|  8.53k|        block!(blocks[..64]);
   31|       |
   32|  8.53k|        let (block1, block2) = blocks.halves();
   33|  8.53k|        let classification1 = vector_256::classify_block(block1);
   34|  8.53k|        let classification2 = vector_256::classify_block(block2);
   35|  8.53k|
   36|  8.53k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   37|  8.53k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   38|  8.53k|
   39|  8.53k|        self.internal_classifier.classify(slashes, quotes)
   40|  8.53k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3new:
   21|  1.15k|    fn new() -> Self {
   22|  1.15k|        Self {
   23|  1.15k|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   24|  1.15k|        }
   25|  1.15k|    }

_RNvXs0_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEENtBb_16FallibleIterator4nextCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   79|  9.70k|                match self.iter.next()? {
   80|  8.53k|                    Some(block) => {
   81|  8.53k|                        // SAFETY: target_feature invariant
   82|  8.53k|                        let mask = unsafe { self.classifier.classify(&block) };
   83|  8.53k|                        let classified_block = QuoteClassifiedBlock {
   84|  8.53k|                            block,
   85|  8.53k|                            within_quotes_mask: mask,
   86|  8.53k|                        };
   87|  8.53k|                        Ok(Some(classified_block))
   88|       |                    }
   89|  1.16k|                    None => Ok(None),
   90|       |                }
   91|  9.70k|            }
_RINvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2H_5MatchEEEECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   20|  1.15k|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|  1.15k|            where
   22|  1.15k|                I: InputBlockIterator<'i, $size>,
   23|  1.15k|            {
   24|  1.15k|                Self::Classifier {
   25|  1.15k|                    iter,
   26|  1.15k|                    classifier: $core::new(),
   27|  1.15k|                    phantom: PhantomData,
   28|  1.15k|                }
   29|  1.15k|            }
_RNvXs1_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1w_yKB2o_E10get_offsetCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   98|   143k|            fn get_offset(&self) -> usize {
   99|   143k|                self.iter.get_offset() - $size
  100|   143k|            }

_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_6411all_ones128:
   13|  8.53k|unsafe fn all_ones128() -> __m128i {
   14|  8.53k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  8.53k|}
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_mask:
   31|  8.53k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  8.53k|        let slash_mask = u8::from(set_slash_mask);
   33|  8.53k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  8.53k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  8.53k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3new:
   26|  1.15k|    pub(crate) fn new() -> Self {
   27|  1.15k|        Self { prev_block_mask: 0 }
   28|  1.15k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  8.53k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  8.53k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  8.38k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|    153|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|    153|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|    153|            let odd_starts = ODD & starts;
   62|    153|            let even_starts = EVEN & starts;
   63|    153|
   64|    153|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|    153|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|    153|
   67|    153|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|    153|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|    153|
   70|    153|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|    153|
   72|    153|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  8.53k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  8.53k|
   77|  8.53k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  8.53k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  8.53k|
   80|  8.53k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  8.53k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  8.53k|        within_quotes
   93|  8.53k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_mask:
   49|  8.53k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  8.53k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  8.53k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_mask:
   44|  8.69k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  8.69k|        u64::from(self.prev_block_mask & 0x01)
   46|  8.69k|    }

_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  17.0k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  17.0k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  17.0k|
   20|  17.0k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  17.0k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  17.0k|
   23|  17.0k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  17.0k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  17.0k|
   26|  17.0k|    BlockClassification256 { slashes, quotes }
   27|  17.0k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  17.0k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  17.0k|    _mm256_set1_epi8(b'\\' as i8)
   14|  17.0k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  17.0k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  17.0k|    _mm256_set1_epi8(b'"' as i8)
    9|  17.0k|}

_RINvXs1_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5h_5MatchEEEECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  165|  1.15k|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  166|  1.15k|    where
  167|  1.15k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  168|  1.15k|    {
  169|  1.15k|        Q::new(iter)
  170|  1.15k|    }
_RINvXs1_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5m_5MatchEEEECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  185|  1.15k|    fn classify_structural_characters<'i, I>(
  186|  1.15k|        self,
  187|  1.15k|        iter: Self::QuotesClassifier<'i, I>,
  188|  1.15k|    ) -> Self::StructuralClassifier<'i, I>
  189|  1.15k|    where
  190|  1.15k|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  191|  1.15k|    {
  192|  1.15k|        S::new(iter)
  193|  1.15k|    }
_RNvNtNtCs6TTJfIhyJGW_8rsonpath14classification4simd9configureCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  340|  1.15k|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  341|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  342|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  343|  1.15k|    }
  344|       |
  345|       |    cfg_if! {
  346|       |        if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  347|       |        {
  348|  1.15k|            let highest_simd = if is_x86_feature_detected!("avx2") {
  349|  1.15k|                SimdTag::Avx2
  350|      0|            } else if is_x86_feature_detected!("ssse3") {
  351|      0|                SimdTag::Ssse3
  352|      0|            } else if is_x86_feature_detected!("sse2") {
  353|      0|                SimdTag::Sse2
  354|       |            } else {
  355|      0|                SimdTag::Nosimd
  356|       |            };
  357|       |
  358|  1.15k|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  359|  1.15k|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  360|       |        }
  361|       |        else
  362|       |        {
  363|       |            let highest_simd = SimdTag::Nosimd;
  364|       |            let fast_quotes = false;
  365|       |            let fast_popcnt = false;
  366|       |        }
  367|       |    }
  368|       |
  369|  1.15k|    SimdConfiguration {
  370|  1.15k|        highest_simd,
  371|  1.15k|        fast_quotes,
  372|  1.15k|        fast_popcnt,
  373|  1.15k|    }
  374|  1.15k|}
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  133|  1.15k|    pub(crate) fn new() -> Self {
  134|  1.15k|        Self { phantom: PhantomData }
  135|  1.15k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcnt:
  285|  1.15k|    pub(crate) fn fast_popcnt(&self) -> bool {
  286|  1.15k|        self.fast_popcnt
  287|  1.15k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotes:
  281|  1.15k|    pub(crate) fn fast_quotes(&self) -> bool {
  282|  1.15k|        self.fast_quotes
  283|  1.15k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simd:
  277|  1.15k|    pub(crate) fn highest_simd(&self) -> SimdTag {
  278|  1.15k|        self.highest_simd
  279|  1.15k|    }

_RNvMNtNtCs6TTJfIhyJGW_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|   142k|    pub fn offset(self, amount: usize) -> Self {
   70|   142k|        match self {
   71|  15.6k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  12.3k|            Colon(idx) => Colon(idx + amount),
   73|  37.6k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  77.1k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|   142k|    }
_RNvXs5_NtNtCs6TTJfIhyJGW_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   21|  74.1k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCs6TTJfIhyJGW_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  8.46k|    pub fn is_closing(&self) -> bool {
   96|  8.46k|        matches!(self, Closing(_, _))
   97|  8.46k|    }

_RNCNCNvXs1_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBf_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2B_5MatchEEEINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1A_EENtBf_16FallibleIterator4next00CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   14|   142k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNCNvXs1_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB7_16Avx2Classifier64INtNtNtBd_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBd_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2z_5MatchEEEINtNtNtBb_6quotes7avx2_6421Avx2QuoteClassifier64B1y_EENtBd_16FallibleIterator4next0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   14|   142k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RINvMNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   30|  24.8k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   31|  24.8k|        &mut self,
   32|  24.8k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   33|  24.8k|    ) -> mask_64::StructuralsBlock<B> {
   34|  24.8k|        let (block1, block2) = quote_classified_block.block.halves();
   35|  24.8k|        let classification1 = self.internal_classifier.classify_block(block1);
   36|  24.8k|        let classification2 = self.internal_classifier.classify_block(block2);
   37|  24.8k|
   38|  24.8k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   39|  24.8k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   40|       |
   41|      0|        bin_u64!("structural", structural);
   42|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   43|       |
   44|  24.8k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   45|  24.8k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   21|  1.15k|    fn new() -> Self {
   22|  1.15k|        Self {
   23|  1.15k|            // SAFETY: target feature invariant
   24|  1.15k|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   25|  1.15k|        }
   26|  1.15k|    }

_RINvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2Q_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1P_EECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   21|  1.15k|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|  1.15k|            where
   23|  1.15k|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|  1.15k|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|  1.15k|            {
   26|  1.15k|                Self::Classifier {
   27|  1.15k|                    iter,
   28|  1.15k|                    classifier: $core::new(),
   29|  1.15k|                    block: None,
   30|  1.15k|                    are_commas_on: false,
   31|  1.15k|                    are_colons_on: false,
   32|  1.15k|                }
   33|  1.15k|            }
_RNvXs2_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_colons_onCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  162|  16.7k|            fn turn_colons_on(&mut self, idx: usize) {
  163|  16.7k|                if !self.are_colons_on {
  164|  9.76k|                    self.are_colons_on = true;
  165|      0|                    debug!("Turning colons on at {idx}.");
  166|       |                    // SAFETY: target_feature invariant
  167|  9.76k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  168|  9.76k|
  169|  9.76k|                    self.reclassify(idx);
  170|  6.97k|                }
  171|  16.7k|            }
_RNvMs0_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE22current_block_is_spentCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   49|   152k|            fn current_block_is_spent(&self) -> bool {
   50|   152k|                self.block
   51|   152k|                    .as_ref()
   52|   152k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|   152k|            }
_RNvXs1_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EENtBb_16FallibleIterator4nextCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   85|   144k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|   152k|                while self.current_block_is_spent() {
   87|  9.70k|                    match self.iter.next() {
   88|  8.53k|                        Ok(Some(block)) => {
   89|  8.53k|                            // SAFETY: target_feature invariant
   90|  8.53k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  8.53k|                        }
   92|       |                        Ok(None) => {
   93|  1.16k|                            self.block = None;
   94|  1.16k|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|   144k|                Ok(self
  101|   144k|                    .block
  102|   144k|                    .as_mut()
  103|   144k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|   144k|            }
_RNvXs2_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_commas_offCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  153|  11.0k|            fn turn_commas_off(&mut self) {
  154|  11.0k|                if self.are_commas_on {
  155|  5.84k|                    self.are_commas_on = false;
  156|      0|                    debug!("Turning commas off.");
  157|       |                    // SAFETY: target_feature invariant
  158|  5.84k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  159|  5.22k|                }
  160|  11.0k|            }
_RNvXs2_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E14turn_commas_onCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  142|  23.0k|            fn turn_commas_on(&mut self, idx: usize) {
  143|  23.0k|                if !self.are_commas_on {
  144|  6.38k|                    self.are_commas_on = true;
  145|      0|                    debug!("Turning commas on at {idx}.");
  146|       |                    // SAFETY: target_feature invariant
  147|  6.38k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  148|  6.38k|
  149|  6.38k|                    self.reclassify(idx);
  150|  16.7k|                }
  151|  23.0k|            }
_RNvMs0_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EE10reclassifyCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   57|  16.6k|                if let Some(block) = self.block.take() {
   58|  16.6k|                    let quote_classified_block = block.quote_classified;
   59|  16.6k|                    let relevant_idx = idx + 1;
   60|  16.6k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  16.6k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  16.3k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  16.3k|                        // SAFETY: target_feature invariant
   68|  16.3k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  16.3k|                        new_block.structural_mask &= mask;
   70|  16.3k|                        self.block = Some(new_block);
   71|    275|                    }
   72|      0|                }
   73|  16.6k|            }
_RNvXs2_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E25turn_colons_and_commas_onCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  112|  20.6k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  113|  20.6k|                if !self.are_commas_on && !self.are_colons_on {
  114|    478|                    self.are_commas_on = true;
  115|    478|                    self.are_colons_on = true;
  116|      0|                    debug!("Turning both commas and colons on at {idx}.");
  117|       |                    // SAFETY: target_feature invariant
  118|    478|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  119|    478|
  120|    478|                    self.reclassify(idx);
  121|  20.1k|                } else if !self.are_commas_on {
  122|  1.48k|                    self.turn_commas_on(idx);
  123|  18.6k|                } else if !self.are_colons_on {
  124|  5.66k|                    self.turn_colons_on(idx);
  125|  13.0k|                }
  126|  20.6k|            }
_RNvXs2_NtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB2x_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1w_EEINtB7_18StructuralIteratorB1w_B3T_yKB2o_E15turn_colons_offCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  173|  21.6k|            fn turn_colons_off(&mut self) {
  174|  21.6k|                if self.are_colons_on {
  175|  9.76k|                    self.are_colons_on = false;
  176|      0|                    debug!("Turning colons off.");
  177|       |                    // SAFETY: target_feature invariant
  178|  9.76k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  179|  11.8k|                }
  180|  21.6k|            }

_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   29|   142k|    pub(crate) fn get_idx(&self) -> u32 {
   30|   142k|        self.structural_mask.trailing_zeros()
   31|   142k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   16|  24.8k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  24.8k|        Self {
   18|  24.8k|            quote_classified: block,
   19|  24.8k|            structural_mask,
   20|  24.8k|        }
   21|  24.8k|    }
_RNvXs_NtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   38|   142k|    fn next(&mut self) -> Option<Structural> {
   39|   142k|        let idx = self.get_idx() as usize;
   40|   142k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   142k|        })
   57|   142k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   24|   151k|    pub(crate) fn is_empty(&self) -> bool {
   25|   151k|        self.structural_mask == 0
   26|   151k|    }
_RNCNvXs_NtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   40|   142k|        (idx < SIZE).then(|| {
   41|   142k|            let bit_mask = 1 << idx;
   42|   142k|
   43|   142k|            self.structural_mask ^= bit_mask;
   44|   142k|
   45|   142k|            // The last match being a catch-all *is important*.
   46|   142k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|   142k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|   142k|            match self.quote_classified.block[idx] {
   49|  12.3k|                b':' => Structural::Colon(idx),
   50|  20.6k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  17.0k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  77.1k|                b',' => Structural::Comma(idx),
   53|  1.99k|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  13.6k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|   142k|        })

_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_mask:
   24|  49.7k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   25|  49.7k|    _mm256_set1_epi8(0x0F)
   26|  49.7k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25618colons_toggle_mask:
   44|  20.0k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   45|  20.0k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   46|  20.0k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25618commas_toggle_mask:
   39|  12.7k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   40|  12.7k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   41|  12.7k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25617upper_nibble_mask:
   34|  1.15k|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   35|  1.15k|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   36|  1.15k|}
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25617lower_nibble_mask:
   29|  49.7k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   30|  49.7k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   31|  49.7k|}
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commas:
   76|    478|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   77|    478|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   78|    478|    }
_RNvNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_mask:
   49|    478|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   50|    478|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   51|    478|}
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colons:
   71|  19.5k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   72|  19.5k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   73|  19.5k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commas:
   66|  12.2k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   67|  12.2k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   68|  12.2k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563new:
   59|  1.15k|    pub(crate) unsafe fn new() -> Self {
   60|  1.15k|        Self {
   61|  1.15k|            upper_nibble_mask: upper_nibble_mask(),
   62|  1.15k|        }
   63|  1.15k|    }
_RNvMNtNtNtNtCs6TTJfIhyJGW_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_block:
   81|  49.7k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   82|  49.7k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   83|  49.7k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   84|  49.7k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   85|  49.7k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   86|  49.7k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   87|  49.7k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   88|  49.7k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
   89|  49.7k|
   90|  49.7k|        BlockClassification256 { structural }
   91|  49.7k|    }

_RNvXs6_NtCs6TTJfIhyJGW_8rsonpath5depthNtB5_5DepthNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
    9|  92.1k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs9_NtCs6TTJfIhyJGW_8rsonpath5depthNtB5_5DepthNtNtCs3NN8x5qF7TE_4core3cmp10PartialOrd11partial_cmpCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
    9|   127k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvMNtCs6TTJfIhyJGW_8rsonpath5depthNtB2_5Depth9increment:
   21|  37.6k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  37.6k|        *self = (*self + 1)?;
   23|  37.6k|        Ok(())
   24|  37.6k|    }
_RNvXsf_NtCs6TTJfIhyJGW_8rsonpath5depthNtB5_5DepthINtNtNtCs3NN8x5qF7TE_4core3ops5arith3SubhE3subB7_:
   56|  15.6k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  15.6k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  15.6k|            }
_RNvXsc_NtCs6TTJfIhyJGW_8rsonpath5depthNtB5_5DepthINtNtNtCs3NN8x5qF7TE_4core3ops5arith3AddhE3addB7_:
   40|  37.6k|            fn add(self, rhs: u8) -> Self::Output {
   41|  37.6k|                self.0
   42|  37.6k|                    .checked_add(rhs)
   43|  37.6k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  37.6k|                    .map(Depth)
   45|  37.6k|            }
_RNvXs0_NtCs6TTJfIhyJGW_8rsonpath5depthNtB5_5DepthNtNtNtCs3NN8x5qF7TE_4core3ops5deref5Deref5deref:
   80|  52.1k|    fn deref(&self) -> &Self::Target {
   81|  52.1k|        &self.0
   82|  52.1k|    }
_RNvMNtCs6TTJfIhyJGW_8rsonpath5depthNtB2_5Depth9decrement:
   28|  15.6k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  15.6k|        *self = (*self - 1)?;
   30|  15.6k|        Ok(())
   31|  15.6k|    }

_RNvMNtNtCs6TTJfIhyJGW_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1G_6quotes7avx2_6411ConstructorNtNtNtB1G_10structural7avx2_6411ConstructorNtNtNtB1G_5depth7avx2_6411ConstructorNtNtNtB1G_6memmem7avx2_6411ConstructorEKj40_E3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   94|  1.15k|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   95|  1.15k|        let initial_state = automaton.initial_state();
   96|  1.15k|        let fallback_state = automaton[initial_state].fallback_state();
   97|  1.15k|        let transitions = automaton[initial_state].transitions();
   98|  1.15k|
   99|  1.15k|        if fallback_state == initial_state && transitions.len() == 1 {
  100|      0|            let (label, target_state) = transitions[0];
  101|       |
  102|      0|            if let Some(member_name) = label.get_member_name() {
  103|      0|                debug!("Automaton starts with a descendant search, using memmem heuristic.");
  104|       |
  105|      0|                return Some(Self {
  106|      0|                    bytes,
  107|      0|                    state: target_state,
  108|      0|                    is_accepting: automaton.is_accepting(target_state),
  109|      0|                    member_name,
  110|      0|                    simd,
  111|      0|                });
  112|      0|            }
  113|  1.15k|        }
  114|       |
  115|  1.15k|        None
  116|  1.15k|    }

_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14run_on_subtreeCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  263|  1.15k|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  264|   144k|        loop {
  265|   144k|            if self.next_event.is_none() {
  266|   135k|                self.next_event = match classifier.next() {
  267|   135k|                    Ok(e) => e,
  268|      0|                    Err(err) => return Err(EngineError::InputError(err)),
  269|       |                };
  270|  8.46k|            }
  271|   144k|            if let Some(event) = self.next_event {
  272|      0|                debug!("====================");
  273|      0|                debug!("Event = {:?}", event);
  274|      0|                debug!("Depth = {:?}", self.depth);
  275|      0|                debug!("Stack = {:?}", self.stack);
  276|      0|                debug!("State = {:?}", self.state);
  277|      0|                debug!("====================");
  278|       |
  279|   142k|                self.next_event = None;
  280|   142k|                match event {
  281|  12.3k|                    Structural::Colon(idx) => self.handle_colon(classifier, idx)?,
  282|  77.1k|                    Structural::Comma(idx) => self.handle_comma(classifier, idx)?,
  283|  37.6k|                    Structural::Opening(b, idx) => self.handle_opening(classifier, b, idx)?,
  284|  15.6k|                    Structural::Closing(_, idx) => {
  285|  15.6k|                        self.handle_closing(classifier, idx)?;
  286|       |
  287|  15.6k|                        if self.depth == Depth::ZERO {
  288|     63|                            break;
  289|  15.6k|                        }
  290|       |                    }
  291|       |                }
  292|       |            } else {
  293|  1.08k|                break;
  294|       |            }
  295|       |        }
  296|       |
  297|  1.14k|        Ok(())
  298|  1.15k|    }
_RNvXNtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   48|  1.15k|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   49|  1.15k|        let automaton = Automaton::new(query)?;
   50|      0|        debug!("DFA:\n {}", automaton);
   51|  1.15k|        let simd = simd::configure();
   52|  1.15k|        log::info!("SIMD configuration:\n {}", simd);
   53|  1.15k|        Ok(MainEngine { automaton, simd })
   54|  1.15k|    }
_RINvNtNtCs6TTJfIhyJGW_8rsonpath6engine4main14query_executorNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1x_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB2X_6quotes7avx2_6411ConstructorNtNtNtB2X_10structural7avx2_6411ConstructorNtNtNtB2X_5depth7avx2_6411ConstructorNtNtNtB2X_6memmem7avx2_6411ConstructorEECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  210|  1.15k|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  211|  1.15k|    automaton: &'i Automaton<'q>,
  212|  1.15k|    input: &'i I,
  213|  1.15k|    recorder: &'r R,
  214|  1.15k|    simd: V,
  215|  1.15k|) -> Executor<'i, 'q, 'r, I, R, V>
  216|  1.15k|where
  217|  1.15k|    I: Input,
  218|  1.15k|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  219|  1.15k|{
  220|  1.15k|    Executor {
  221|  1.15k|        depth: Depth::ZERO,
  222|  1.15k|        state: automaton.initial_state(),
  223|  1.15k|        stack: SmallStack::new(),
  224|  1.15k|        automaton,
  225|  1.15k|        input,
  226|  1.15k|        recorder,
  227|  1.15k|        simd,
  228|  1.15k|        next_event: None,
  229|  1.15k|        is_list: false,
  230|  1.15k|        array_count: NonNegativeArrayIndex::ZERO,
  231|  1.15k|        has_any_array_item_transition: false,
  232|  1.15k|        has_any_array_item_transition_to_accepting: false,
  233|  1.15k|    }
  234|  1.15k|}
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14handle_closingCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  517|      0|        debug!("Closing, decreasing depth and popping stack.");
  518|       |
  519|  15.6k|        self.depth
  520|  15.6k|            .decrement()
  521|  15.6k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  522|  15.6k|        self.recorder.record_value_terminator(idx, self.depth)?;
  523|       |
  524|  15.6k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  525|  15.6k|            self.state = stack_frame.state;
  526|  15.6k|            self.is_list = stack_frame.is_list;
  527|  15.6k|            self.array_count = stack_frame.array_count;
  528|  15.6k|            self.has_any_array_item_transition = stack_frame.has_any_array_item_transition;
  529|  15.6k|            self.has_any_array_item_transition_to_accepting = stack_frame.has_any_array_item_transition_to_accepting;
  530|       |
  531|      0|            debug!("Restored array count to {}", self.array_count);
  532|       |
  533|  15.6k|            if self.automaton.is_unitary(self.state) {
  534|      0|                let bracket_type = self.current_node_bracket_type();
  535|      0|                debug!("Skipping unique state from {bracket_type:?}");
  536|      0|                let close_idx = classifier.skip(bracket_type)?;
  537|      0|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  538|      0|                return Ok(());
  539|  15.6k|            }
  540|     63|        }
  541|       |
  542|  15.6k|        if self.is_list
  543|  4.60k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  544|      0|                || self.has_any_array_item_transition)
  545|  4.60k|        {
  546|  4.60k|            classifier.turn_commas_on(idx);
  547|  11.0k|        } else {
  548|  11.0k|            classifier.turn_commas_off();
  549|  11.0k|        }
  550|       |
  551|  15.6k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  552|  11.0k|            classifier.turn_colons_on(idx);
  553|  11.0k|        } else {
  554|  4.60k|            classifier.turn_colons_off();
  555|  4.60k|        }
  556|       |
  557|  15.6k|        Ok(())
  558|  15.6k|    }
_RNvXs3_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCs3NN8x5qF7TE_4core7convert4FromNtB5_12NodeTypeHintE4from:
  706|   125k|    fn from(value: NodeTypeHint) -> Self {
  707|   125k|        match value {
  708|  89.1k|            NodeTypeHint::Atomic => Self::Atomic,
  709|  36.5k|            NodeTypeHint::Complex(_) => Self::Complex,
  710|       |        }
  711|   125k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE20find_preceding_colonCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  585|  37.6k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  586|  37.6k|        if self.depth == Depth::ZERO {
  587|  1.14k|            None
  588|       |        } else {
  589|  36.5k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  590|       |
  591|  36.5k|            (char == b':').then_some(char_idx)
  592|       |        }
  593|  37.6k|    }
_RNCNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE12handle_colon0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  352|  8.46k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNCNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE24record_match_detected_at0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  308|   125k|        .map(|x| x.0);
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE21verify_subtree_closedCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  611|  1.14k|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  612|  1.14k|        if self.depth != Depth::ZERO {
  613|  1.07k|            Err(EngineError::MissingClosingCharacter())
  614|       |        } else {
  615|     74|            Ok(())
  616|       |        }
  617|  1.14k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12handle_commaCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  374|  77.1k|        self.recorder.record_value_terminator(idx, self.depth)?;
  375|  77.1k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  376|  77.1k|            c == b'{' || c == b'['
  377|       |        } else {
  378|      2|            false
  379|       |        };
  380|       |
  381|  77.1k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  382|  77.1k|
  383|  77.1k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  384|      0|            debug!("Accepting on comma.");
  385|  74.1k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  386|  2.99k|        }
  387|       |
  388|       |        // After wildcard, check for a matching array index.
  389|       |        // If the index increment exceeds the field's limit, give up.
  390|  77.1k|        if self.is_list && self.array_count.try_increment().is_err() {
  391|      0|            return Ok(());
  392|  77.1k|        }
  393|      0|        debug!("Incremented array count to {}", self.array_count);
  394|       |
  395|  77.1k|        let match_index = self
  396|  77.1k|            .automaton
  397|  77.1k|            .has_array_index_transition_to_accepting(self.state, &self.array_count);
  398|  77.1k|
  399|  77.1k|        if self.is_list && !is_next_opening && match_index {
  400|      0|            debug!("Accepting on list item.");
  401|      0|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  402|  77.1k|        }
  403|       |
  404|  77.1k|        Ok(())
  405|  77.1k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB5_10SmallStack4peekCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  649|  15.6k|    fn peek(&mut self) -> Option<StackFrame> {
  650|  15.6k|        self.contents.last().copied()
  651|  15.6k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE24record_match_detected_atCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  301|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  302|       |
  303|   125k|        let index = match hint {
  304|  20.1k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{'])?,
  305|  16.3k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'['])?,
  306|  89.1k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx)?,
  307|       |        }
  308|   125k|        .map(|x| x.0);
  309|   125k|
  310|   125k|        match index {
  311|   125k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  312|      3|            None => Err(EngineError::MissingItem()),
  313|       |        }
  314|   125k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB5_10SmallStack4pushCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  664|  36.5k|    fn push(&mut self, value: StackFrame) {
  665|  36.5k|        self.contents.push(value)
  666|  36.5k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE13transition_toCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  560|  36.5k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  561|  36.5k|        let target_is_list = opening == BracketType::Square;
  562|  36.5k|
  563|  36.5k|        let fallback = self.automaton[self.state].fallback_state();
  564|  36.5k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  565|  36.5k|        let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  566|       |
  567|  36.5k|        if target != self.state || target_is_list != self.is_list || searching_list {
  568|       |            debug!(
  569|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  570|       |                self.state, self.array_count
  571|       |            );
  572|       |
  573|  36.5k|            self.stack.push(StackFrame {
  574|  36.5k|                depth: *self.depth,
  575|  36.5k|                state: self.state,
  576|  36.5k|                is_list: self.is_list,
  577|  36.5k|                array_count: self.array_count,
  578|  36.5k|                has_any_array_item_transition: self.has_any_array_item_transition,
  579|  36.5k|                has_any_array_item_transition_to_accepting: self.has_any_array_item_transition_to_accepting,
  580|  36.5k|            });
  581|  36.5k|            self.state = target;
  582|      0|        }
  583|  36.5k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12handle_colonCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  321|      0|        debug!("Colon");
  322|       |
  323|  12.3k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  324|  12.3k|            c == b'{' || c == b'['
  325|       |        } else {
  326|      2|            false
  327|       |        };
  328|       |
  329|  12.3k|        if !is_next_opening {
  330|  8.54k|            let mut any_matched = false;
  331|       |
  332|  8.54k|            for &(label, target) in self.automaton[self.state].transitions() {
  333|      0|                match label {
  334|      0|                    TransitionLabel::ArrayIndex(_) => {}
  335|      0|                    TransitionLabel::ObjectMember(member_name) => {
  336|      0|                        if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  337|      0|                            self.record_match_detected_at(
  338|      0|                                idx + 1,
  339|      0|                                NodeTypeHint::Atomic, /* since is_next_opening is false */
  340|      0|                            )?;
  341|      0|                            any_matched = true;
  342|      0|                            break;
  343|      0|                        }
  344|       |                    }
  345|       |                }
  346|       |            }
  347|  8.54k|            let fallback_state = self.automaton[self.state].fallback_state();
  348|  8.54k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  349|  8.54k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  350|      0|            }
  351|  8.54k|            self.next_event = classifier.next()?;
  352|  8.54k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  353|  8.54k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  354|      0|                if let Some(s) = self.next_event {
  355|      0|                    match s {
  356|      0|                        Structural::Closing(_, idx) => {
  357|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  358|       |                        }
  359|      0|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  360|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  361|       |                    }
  362|      0|                }
  363|      0|                let bracket_type = self.current_node_bracket_type();
  364|      0|                debug!("Skipping unique state from {bracket_type:?}");
  365|      0|                let stop_at = classifier.skip(bracket_type)?;
  366|      0|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  367|  8.54k|            }
  368|  3.83k|        }
  369|       |
  370|  12.3k|        Ok(())
  371|  12.3k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE14handle_openingCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  413|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  414|  37.6k|        let mut any_matched = false;
  415|  37.6k|
  416|  37.6k|        let colon_idx = self.find_preceding_colon(idx);
  417|       |
  418|  37.6k|        for &(label, target) in self.automaton[self.state].transitions() {
  419|      0|            match label {
  420|      0|                TransitionLabel::ArrayIndex(i) => {
  421|      0|                    if self.is_list && i.eq(&self.array_count) {
  422|      0|                        any_matched = true;
  423|      0|                        self.transition_to(target, bracket_type);
  424|      0|                        if self.automaton.is_accepting(target) {
  425|      0|                            debug!("Accept {idx}");
  426|      0|                            self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  427|      0|                        }
  428|      0|                        break;
  429|      0|                    }
  430|       |                }
  431|      0|                TransitionLabel::ObjectMember(member_name) => {
  432|      0|                    if let Some(colon_idx) = colon_idx {
  433|      0|                        if self.is_match(colon_idx, member_name)? {
  434|      0|                            any_matched = true;
  435|      0|                            self.transition_to(target, bracket_type);
  436|      0|                            if self.automaton.is_accepting(target) {
  437|      0|                                self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  438|      0|                            }
  439|      0|                            break;
  440|      0|                        }
  441|      0|                    }
  442|       |                }
  443|       |            }
  444|       |        }
  445|       |
  446|  37.6k|        if !any_matched && self.depth != Depth::ZERO {
  447|  36.5k|            let fallback = self.automaton[self.state].fallback_state();
  448|      0|            debug!("Falling back to {fallback}");
  449|       |
  450|  36.5k|            if self.automaton.is_rejecting(fallback) {
  451|      0|                let closing_idx = classifier.skip(bracket_type)?;
  452|      0|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  453|  36.5k|            } else {
  454|  36.5k|                self.transition_to(fallback, bracket_type);
  455|  36.5k|            }
  456|  36.5k|
  457|  36.5k|            if self.automaton.is_accepting(fallback) {
  458|  36.5k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  459|      0|            }
  460|  1.14k|        }
  461|       |
  462|  37.6k|        self.depth
  463|  37.6k|            .increment()
  464|  37.6k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  465|       |
  466|  37.6k|        self.is_list = bracket_type == BracketType::Square;
  467|  37.6k|        let mut needs_commas = false;
  468|  37.6k|
  469|  37.6k|        if self.is_list {
  470|  17.0k|            self.has_any_array_item_transition = self.automaton.has_any_array_item_transition(self.state);
  471|  17.0k|            self.has_any_array_item_transition_to_accepting =
  472|  17.0k|                self.automaton.has_any_array_item_transition_to_accepting(self.state);
  473|  17.0k|
  474|  17.0k|            let fallback = self.automaton[self.state].fallback_state();
  475|  17.0k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  476|       |
  477|  17.0k|            let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  478|       |
  479|  17.0k|            if searching_list {
  480|  17.0k|                needs_commas = true;
  481|  17.0k|                self.array_count = NonNegativeArrayIndex::ZERO;
  482|      0|                debug!("Initialized array count to {}", self.array_count);
  483|       |
  484|  17.0k|                let wants_first_item =
  485|  17.0k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  486|       |
  487|  17.0k|                if wants_first_item {
  488|  17.0k|                    let next = self.input.seek_non_whitespace_forward(idx + 1)?;
  489|       |
  490|  17.0k|                    match next {
  491|  10.6k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  492|  6.37k|                        Some((value_idx, _)) => {
  493|  6.37k|                            self.record_match_detected_at(
  494|  6.37k|                                value_idx,
  495|  6.37k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  496|  6.37k|                            )?;
  497|       |                        }
  498|      2|                        _ => (),
  499|       |                    }
  500|      0|                }
  501|      0|            }
  502|  20.6k|        }
  503|       |
  504|  37.6k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  505|  20.6k|            classifier.turn_colons_and_commas_on(idx);
  506|  20.6k|        } else if needs_commas {
  507|  17.0k|            classifier.turn_colons_off();
  508|  17.0k|            classifier.turn_commas_on(idx);
  509|  17.0k|        } else {
  510|      0|            classifier.turn_colons_and_commas_off();
  511|      0|        }
  512|       |
  513|  37.6k|        Ok(())
  514|  37.6k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE12run_and_exitCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  252|  1.15k|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  253|  1.15k|        let iter = self.input.iter_blocks(self.recorder);
  254|  1.15k|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  255|  1.15k|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  256|  1.15k|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  257|  1.15k|
  258|  1.15k|        self.run_on_subtree(&mut classifier)?;
  259|       |
  260|  1.14k|        self.verify_subtree_closed()
  261|  1.15k|    }
_RINvXs_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input5owned10OwnedBytesINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtNtB9_6result5MatchEECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  126|  1.15k|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  127|  1.15k|    where
  128|  1.15k|        I: Input,
  129|  1.15k|        S: Sink<Match>,
  130|  1.15k|    {
  131|  1.15k|        let recorder = NodesRecorder::build_recorder(sink);
  132|  1.15k|
  133|  1.15k|        if self.automaton.is_empty_query() {
  134|      0|            return empty_query(input, &recorder, self.simd);
  135|  1.15k|        }
  136|  1.15k|
  137|  1.15k|        simd_dispatch!(self.simd => |simd| {
  138|  1.15k|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  139|  1.15k|            executor.run()?;
  140|       |        });
  141|       |
  142|     74|        Ok(())
  143|  1.15k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1z_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Z_6quotes7avx2_6411ConstructorNtNtNtB2Z_10structural7avx2_6411ConstructorNtNtNtB2Z_5depth7avx2_6411ConstructorNtNtNtB2Z_6memmem7avx2_6411ConstructorEE3runCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  243|  1.15k|    fn run(mut self) -> Result<(), EngineError> {
  244|  1.15k|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  245|  1.15k|
  246|  1.15k|        match mb_head_skip {
  247|      0|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  248|  1.15k|            None => self.run_and_exit(),
  249|       |        }
  250|  1.15k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  655|  15.6k|        if let Some(stack_frame) = self.peek() {
  656|  15.6k|            if depth <= stack_frame.depth {
  657|  15.6k|                return self.contents.pop();
  658|      0|            }
  659|     63|        }
  660|     63|        None
  661|  15.6k|    }
_RNCNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE14handle_closing0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  521|      2|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
_RNCNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1B_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB31_6quotes7avx2_6411ConstructorNtNtNtB31_10structural7avx2_6411ConstructorNtNtNtB31_5depth7avx2_6411ConstructorNtNtNtB31_6memmem7avx2_6411ConstructorEE14handle_opening0CsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  464|      3|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6engine4mainNtB5_10SmallStack3new:
  644|  1.15k|    fn new() -> Self {
  645|  1.15k|        Self { contents: smallvec![] }
  646|  1.15k|    }

_RNvMNtNtCs6TTJfIhyJGW_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB25_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B14_EINtNtNtB3y_10structural7avx2_6416Avx2Classifier64B14_B3r_EINtNtB3y_4simd12ResolvedSimdNtB3u_11ConstructorNtB4D_11ConstructorNtNtNtB3y_5depth7avx2_6411ConstructorNtNtNtB3y_6memmem7avx2_6411ConstructorEKB1W_E3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   28|  1.15k|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|  1.15k|        Self {
   30|  1.15k|            classifier: Some(classifier),
   31|  1.15k|            simd,
   32|  1.15k|            _phantom: (PhantomData, PhantomData),
   33|  1.15k|        }
   34|  1.15k|    }
_RNvXs0_NtNtCs6TTJfIhyJGW_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB28_5MatchEEEINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B17_EINtNtNtB3B_10structural7avx2_6416Avx2Classifier64B17_B3u_EINtNtB3B_4simd12ResolvedSimdNtB3x_11ConstructorNtB4G_11ConstructorNtNtNtB3B_5depth7avx2_6411ConstructorNtNtNtB3B_6memmem7avx2_6411ConstructorEKB1Z_ENtNtNtCs3NN8x5qF7TE_4core3ops5deref8DerefMut9deref_mutCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  129|   230k|    fn deref_mut(&mut self) -> &mut Self::Target {
  130|   230k|        self.classifier
  131|   230k|            .as_mut()
  132|   230k|            .expect("tail skip must always hold a classifier")
  133|   230k|    }

_RNvNtNtCs6TTJfIhyJGW_8rsonpath5input8in_slice27seek_non_whitespace_forwardCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  222|   195k|    pub(super) fn seek_non_whitespace_forward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  223|   195k|        let mut idx = from;
  224|   195k|
  225|   195k|        if idx >= bytes.len() {
  226|      4|            return None;
  227|   195k|        }
  228|       |
  229|   209k|        loop {
  230|   209k|            let b = bytes[idx];
  231|   209k|            if !b.is_ascii_whitespace() {
  232|   195k|                return Some((idx, b));
  233|  14.0k|            }
  234|  14.0k|            idx += 1;
  235|  14.0k|            if idx == bytes.len() {
  236|      5|                return None;
  237|  14.0k|            }
  238|       |        }
  239|   195k|    }
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5input8in_slice28seek_non_whitespace_backwardCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  242|  36.5k|    pub(super) fn seek_non_whitespace_backward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  243|  36.5k|        let mut idx = from;
  244|  36.5k|
  245|  36.5k|        if idx >= bytes.len() {
  246|      0|            return None;
  247|  36.5k|        }
  248|       |
  249|       |        loop {
  250|  39.2k|            let b = bytes[idx];
  251|  39.2k|            if !b.is_ascii_whitespace() {
  252|  36.5k|                return Some((idx, b));
  253|  2.68k|            }
  254|  2.68k|            if idx == 0 {
  255|      0|                return None;
  256|  2.68k|            }
  257|  2.68k|            idx -= 1;
  258|       |        }
  259|  36.5k|    }
_RINvNtNtCs6TTJfIhyJGW_8rsonpath5input8in_slice12seek_forwardKj1_ECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  201|  36.5k|    pub(super) fn seek_forward<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  202|  36.5k|        assert!(N > 0);
  203|  36.5k|        let mut idx = from;
  204|  36.5k|
  205|  36.5k|        if idx >= bytes.len() {
  206|      0|            return None;
  207|  36.5k|        }
  208|       |
  209|  36.5k|        loop {
  210|  36.5k|            let b = bytes[idx];
  211|  36.5k|            if needles.contains(&b) {
  212|  36.5k|                return Some((idx, b));
  213|      0|            }
  214|      0|            idx += 1;
  215|      0|            if idx == bytes.len() {
  216|      0|                return None;
  217|      0|            }
  218|       |        }
  219|  36.5k|    }
_RNvXNtCs6TTJfIhyJGW_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  155|  33.4k|    fn halves(&self) -> (&[u8], &[u8]) {
  156|  33.4k|        assert_eq!(N % 2, 0);
  157|  33.4k|        (&self[..N / 2], &self[N / 2..])
  158|  33.4k|    }
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5input8in_slice14pad_last_blockB5_:
  171|  1.15k|    pub(super) fn pad_last_block(bytes: &[u8]) -> LastBlock {
  172|  1.15k|        let mut last_block_buf = [0; MAX_BLOCK_SIZE];
  173|  1.15k|        let last_block_start = (bytes.len() / MAX_BLOCK_SIZE) * MAX_BLOCK_SIZE;
  174|  1.15k|        let last_block_slice = &bytes[last_block_start..];
  175|  1.15k|
  176|  1.15k|        last_block_buf[..last_block_slice.len()].copy_from_slice(last_block_slice);
  177|  1.15k|
  178|  1.15k|        LastBlock {
  179|  1.15k|            bytes: last_block_buf,
  180|  1.15k|            absolute_start: last_block_start,
  181|  1.15k|        }
  182|  1.15k|    }

_RNvXs3_NtNtCs6TTJfIhyJGW_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEEINtB7_18InputBlockIteratorKB1k_E10get_offsetCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  184|      0|        debug!("getting input iter {}", self.idx);
  185|   143k|        self.idx
  186|   143k|    }
_RNvXs2_NtNtCs6TTJfIhyJGW_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEENtB9_16FallibleIterator4nextCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  146|      0|        debug!("next!");
  147|       |
  148|  9.70k|        if self.idx >= self.input.len() {
  149|  1.16k|            Ok(None)
  150|  8.53k|        } else if self.idx >= self.last_block.absolute_start {
  151|      0|            let i = self.idx - self.last_block.absolute_start;
  152|      0|            self.idx += N;
  153|      0|            let block = &self.last_block.bytes[i..i + N];
  154|      0|
  155|      0|            self.recorder.record_block_start(block);
  156|      0|
  157|      0|            Ok(Some(block))
  158|       |        } else {
  159|  8.53k|            let block = &self.input[self.idx..self.idx + N];
  160|  8.53k|            self.idx += N;
  161|  8.53k|
  162|  8.53k|            self.recorder.record_block_start(block);
  163|  8.53k|
  164|  8.53k|            Ok(Some(block))
  165|       |        }
  166|  9.70k|    }
_RNvMs0_NtNtCs6TTJfIhyJGW_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   81|  1.15k|    pub(super) fn new(bytes: &'a [u8], last_block: &'a LastBlock, recorder: &'r R) -> Self {
   82|  1.15k|        Self {
   83|  1.15k|            input: bytes,
   84|  1.15k|            idx: 0,
   85|  1.15k|            last_block,
   86|  1.15k|            recorder,
   87|  1.15k|        }
   88|  1.15k|    }

_RNvMNtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB2_10OwnedBytes8as_slice:
   51|   269k|    pub fn as_slice(&self) -> &[u8] {
   52|   269k|        // SAFETY: Pointer is not null and its validity is an internal invariant.
   53|   269k|        unsafe { slice::from_raw_parts(self.bytes_ptr.as_ptr(), self.len) }
   54|   269k|    }
_RINvXs5_NtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB1t_5MatchEEKj40_ECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  229|  1.15k|    fn iter_blocks<'a, 'r, R, const N: usize>(&'a self, recorder: &'r R) -> Self::BlockIterator<'a, 'r, N, R>
  230|  1.15k|    where
  231|  1.15k|        R: InputRecorder<&'a [u8]>,
  232|  1.15k|    {
  233|  1.15k|        BorrowedBytesBlockIterator::new(self.as_slice(), &self.last_block, recorder)
  234|  1.15k|    }
_RINvXs5_NtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input12seek_forwardKj1_ECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  242|  36.5k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, InputError> {
  243|  36.5k|        Ok(in_slice::seek_forward(self.as_slice(), from, needles))
  244|  36.5k|    }
_RNvXs5_NtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input27seek_non_whitespace_forwardCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  247|   195k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, InputError> {
  248|   195k|        Ok(in_slice::seek_non_whitespace_forward(self.as_slice(), from))
  249|   195k|    }
_RINvMNtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB3_10OwnedBytes3newRShECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   97|  1.15k|    pub fn new<T: AsRef<[u8]>>(src: &T) -> Result<Self, InputError> {
   98|  1.15k|        let slice = src.as_ref();
   99|  1.15k|        let rem = slice.len() % MAX_BLOCK_SIZE;
  100|  1.15k|        let pad = if rem == 0 { 0 } else { MAX_BLOCK_SIZE - rem };
  101|  1.15k|        let size = slice.len() + pad;
  102|  1.15k|
  103|  1.15k|        if size == 0 {
  104|       |            // SAFETY: For len and cap 0 the dangling ptr always works.
  105|      0|            return Ok(unsafe { Self::finalize_new(ptr::NonNull::dangling(), 0, 0) });
  106|  1.15k|        }
  107|       |
  108|       |        // Size overflow check happens in get_layout.
  109|  1.15k|        let layout = Self::get_layout(size)?;
  110|       |
  111|       |        // SAFETY:
  112|       |        // Layout is guaranteed to be of non-zero size at this point.
  113|  1.15k|        let raw_ptr = unsafe { alloc::alloc(layout) };
  114|  1.15k|        let ptr = ptr::NonNull::new(raw_ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));
  115|  1.15k|
  116|  1.15k|        // SAFETY:
  117|  1.15k|        unsafe {
  118|  1.15k|            ptr::copy_nonoverlapping(slice.as_ptr(), ptr.as_ptr(), slice.len());
  119|  1.15k|            ptr::write_bytes(ptr.as_ptr().add(slice.len()), 0, pad);
  120|  1.15k|        };
  121|  1.15k|
  122|  1.15k|        // SAFETY: At this point we allocated and initialized exactly `size` bytes.
  123|  1.15k|        Ok(unsafe { Self::finalize_new(ptr, size, size) })
  124|  1.15k|    }
_RNvXs5_NtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input28seek_non_whitespace_backwardCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  252|  36.5k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  253|  36.5k|        in_slice::seek_non_whitespace_backward(self.as_slice(), from)
  254|  36.5k|    }
_RNvMNtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB2_10OwnedBytes10get_layout:
  154|  2.31k|    fn get_layout(size: usize) -> Result<alloc::Layout, InputError> {
  155|  2.31k|        alloc::Layout::from_size_align(size, MAX_BLOCK_SIZE).map_err(|_err| InputError::AllocationSizeExceeded)
  156|  2.31k|    }
_RNvXs4_NtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB5_10OwnedBytesNtNtNtCs3NN8x5qF7TE_4core3ops4drop4Drop4dropCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  205|  1.15k|    fn drop(&mut self) {
  206|  1.15k|        if self.len == 0 {
  207|      0|            return;
  208|  1.15k|        }
  209|  1.15k|
  210|  1.15k|        // This should never happen and if it did it would cause a memory leak.
  211|  1.15k|        #[allow(clippy::expect_used)]
  212|  1.15k|        let layout = Self::get_layout(self.capacity).expect("layout for existing OwnedBytes must never change");
  213|  1.15k|
  214|  1.15k|        // SAFETY:
  215|  1.15k|        // `ptr` is allocated in `new` and layout is constructed using the same function
  216|  1.15k|        // and size.
  217|  1.15k|        // This relies on self.capacity not being mutated ever.
  218|  1.15k|        unsafe { alloc::dealloc(self.bytes_ptr.as_ptr(), layout) }
  219|  1.15k|    }
_RNvMNtNtCs6TTJfIhyJGW_8rsonpath5input5ownedNtB2_10OwnedBytes12finalize_new:
   36|  1.15k|    unsafe fn finalize_new(ptr: ptr::NonNull<u8>, len: usize, cap: usize) -> Self {
   37|  1.15k|        let slice = slice::from_raw_parts(ptr.as_ptr(), len);
   38|  1.15k|        let last_block = in_slice::pad_last_block(slice);
   39|  1.15k|
   40|  1.15k|        Self {
   41|  1.15k|            bytes_ptr: ptr,
   42|  1.15k|            len,
   43|  1.15k|            capacity: cap,
   44|  1.15k|            last_block,
   45|  1.15k|        }
   46|  1.15k|    }

_RNvMs0_NtCs6TTJfIhyJGW_8rsonpath5queryNtB5_13JsonPathQuery5parse:
  140|  1.15k|    pub fn parse(query_string: &str) -> Result<Self, ParserError> {
  141|  1.15k|        self::parser::parse_json_path_query(query_string)
  142|  1.15k|    }
_RNvMs0_NtCs6TTJfIhyJGW_8rsonpath5queryNtB5_13JsonPathQuery3newB7_:
  150|  1.15k|    pub fn new(node: Box<JsonPathQueryNode>) -> Self {
  151|  1.15k|        let root = if node.is_root() {
  152|  1.15k|            node
  153|       |        } else {
  154|      0|            info!("Implicitly using the Root expression (`$`) at the start of the query.");
  155|      0|            Box::new(Root(Some(node)))
  156|       |        };
  157|       |
  158|  1.15k|        Self { root }
  159|  1.15k|    }
_RNvXs3_NtCs6TTJfIhyJGW_8rsonpath5queryNtB5_17JsonPathQueryNodeNtB5_21JsonPathQueryNodeType7is_root:
  219|  3.47k|    fn is_root(&self) -> bool {
  220|  3.47k|        matches!(self, Root(_))
  221|  3.47k|    }
_RNvXs_NtCs6TTJfIhyJGW_8rsonpath5queryNtB4_21JsonPathQueryIteratorNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4nextB6_:
  110|  3.47k|    fn next(&mut self) -> Option<Self::Item> {
  111|  3.47k|        let result = self.node;
  112|       |
  113|  3.47k|        if let Some(node) = result {
  114|  2.31k|            self.node = node.child()
  115|  1.15k|        }
  116|       |
  117|  3.47k|        result
  118|  3.47k|    }
_RNvMNtCs6TTJfIhyJGW_8rsonpath5queryNtB2_17JsonPathQueryNode4iter:
   89|  1.15k|    pub fn iter(&self) -> JsonPathQueryIterator {
   90|  1.15k|        JsonPathQueryIterator { node: Some(self) }
   91|  1.15k|    }
_RNvMNtCs6TTJfIhyJGW_8rsonpath5queryNtB2_17JsonPathQueryNode5child:
   73|  2.31k|    pub fn child(&self) -> Option<&Self> {
   74|  2.31k|        match self {
   75|  1.15k|            Root(node)
   76|      0|            | Child(_, node)
   77|      0|            | AnyChild(node)
   78|      0|            | Descendant(_, node)
   79|  1.15k|            | AnyDescendant(node)
   80|      0|            | ArrayIndexChild(_, node)
   81|  2.31k|            | ArrayIndexDescendant(_, node) => node.as_deref(),
   82|  2.31k|        }
   83|  2.31k|    }
_RNvMs0_NtCs6TTJfIhyJGW_8rsonpath5queryNtB5_13JsonPathQuery4root:
  128|  2.31k|    pub fn root(&self) -> &JsonPathQueryNode {
  129|  2.31k|        self.root.as_ref()
  130|  2.31k|    }

_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton14is_empty_query:
  176|  1.15k|    pub fn is_empty_query(&self) -> bool {
  177|  1.15k|        self.states.len() == 2
  178|  1.15k|    }
_RNvXs5_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9AutomatonINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  134|   604k|    fn index(&self, index: State) -> &Self::Output {
  135|   604k|        &self.states[index.0 as usize]
  136|   604k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  148|  1.15k|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  149|  1.15k|        let nfa = NondeterministicAutomaton::new(query)?;
  150|      0|        debug!("NFA: {}", nfa);
  151|  1.15k|        Automaton::minimize(nfa)
  152|  1.15k|    }
_RNvMs7_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_10StateTable11transitions:
  397|   158k|    pub fn transitions(&self) -> &[Transition<'q>] {
  398|   158k|        &self.transitions
  399|   158k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton29has_any_array_item_transition:
  238|  17.0k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  239|  17.0k|        self[state]
  240|  17.0k|            .transitions()
  241|  17.0k|            .iter()
  242|  17.0k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
  243|  17.0k|    }
_RNvMs7_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_10StateTable14fallback_state:
  387|   181k|    pub fn fallback_state(&self) -> State {
  388|   181k|        self.fallback_state
  389|   181k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton12is_accepting:
  220|   180k|    pub fn is_accepting(&self, state: State) -> bool {
  221|   180k|        self[state].attributes.is_accepting()
  222|   180k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton10is_unitary:
  371|  15.6k|    pub fn is_unitary(&self, state: State) -> bool {
  372|  15.6k|        self[state].attributes.is_unitary()
  373|  15.6k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton12is_rejecting:
  349|  36.5k|    pub fn is_rejecting(&self, state: State) -> bool {
  350|  36.5k|        self[state].attributes.is_rejecting()
  351|  36.5k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton27has_transition_to_accepting:
  331|  31.7k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  332|  31.7k|        self[state].attributes.has_transition_to_accepting()
  333|  31.7k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton42has_any_array_item_transition_to_accepting:
  259|  17.0k|    pub fn has_any_array_item_transition_to_accepting(&self, state: State) -> bool {
  260|  17.0k|        self[state].transitions().iter().any(|t| match t {
  261|       |            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  262|       |            _ => false,
  263|  17.0k|        })
  264|  17.0k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  310|  77.1k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &NonNegativeArrayIndex) -> bool {
  311|  77.1k|        self[state].transitions().iter().any(|t| match t {
  312|       |            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  313|       |            _ => false,
  314|  77.1k|        })
  315|  77.1k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton13initial_state:
  202|  2.31k|    pub fn initial_state(&self) -> State {
  203|  2.31k|        State(1)
  204|  2.31k|    }
_RNvMs6_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_9Automaton8minimize:
  375|  1.15k|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  376|  1.15k|        minimizer::minimize(nfa)
  377|  1.15k|    }
_RNvXs2_NtNtCs6TTJfIhyJGW_8rsonpath5query9automatonNtB5_10StateTableNtNtCs3NN8x5qF7TE_4core7default7Default7defaultB9_:
  108|  2.31k|    fn default() -> Self {
  109|  2.31k|        Self {
  110|  2.31k|            attributes: StateAttributes::default(),
  111|  2.31k|            transitions: Default::default(),
  112|  2.31k|            fallback_state: State(0),
  113|  2.31k|        }
  114|  2.31k|    }

_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  215|  2.31k|    fn process_nfa_transitions(
  216|  2.31k|        &self,
  217|  2.31k|        current_superstate: SmallSet256,
  218|  2.31k|        current_checkpoint: Option<NfaStateId>,
  219|  2.31k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  220|  2.31k|        let mut wildcard_targets = current_superstate
  221|  2.31k|            .iter()
  222|  2.31k|            .map(NfaStateId)
  223|  2.31k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|       |                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|       |                _ => None,
  228|  2.31k|            })
  229|  2.31k|            .collect::<Result<SmallSet256, _>>()?;
  230|  2.31k|        if let Some(checkpoint) = current_checkpoint {
  231|  2.31k|            wildcard_targets.insert(checkpoint.0);
  232|  2.31k|        }
  233|       |
  234|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  235|       |
  236|  2.31k|        let mut transitions = SuperstateTransitionTable {
  237|  2.31k|            labelled: VecMap::new(),
  238|  2.31k|            wildcard: wildcard_targets,
  239|  2.31k|        };
  240|       |
  241|  3.47k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  242|  3.47k|            match self.nfa[nfa_state] {
  243|       |                // Direct states simply have a single transition to the next state in the NFA.
  244|       |                // Recursive transitions also have a self-loop, but that is handled by the
  245|       |                // checkpoints mechanism - here we only handle the forward transition.
  246|      0|                NfaState::Direct(nfa::Transition::Labelled(label))
  247|      0|                | NfaState::Recursive(nfa::Transition::Labelled(label)) => {
  248|      0|                    debug!("Considering transition {nfa_state} --{}-> {}", label, nfa_state.next()?,);
  249|       |                    // Add the target NFA state to the target superstate, or create a singleton
  250|       |                    // set if this is the first transition via this label encountered in the loop.
  251|      0|                    if let Some(target) = transitions.labelled.get_mut(&label) {
  252|      0|                        target.insert(nfa_state.next()?.0);
  253|       |                    } else {
  254|      0|                        let mut new_set = transitions.wildcard;
  255|      0|                        new_set.insert(nfa_state.next()?.0);
  256|      0|                        transitions.labelled.insert(label, new_set);
  257|       |                    }
  258|       |                }
  259|       |                NfaState::Direct(nfa::Transition::Wildcard)
  260|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  261|  3.47k|                | NfaState::Accepting => (),
  262|       |            }
  263|       |        }
  264|       |
  265|  2.31k|        Ok(transitions)
  266|  2.31k|    }
_RNvNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizer8minimize:
   17|  1.15k|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   18|  1.15k|    let minimizer = Minimizer {
   19|  1.15k|        nfa,
   20|  1.15k|        superstates: VecMap::new(),
   21|  1.15k|        checkpoints: VecMap::new(),
   22|  1.15k|        active_superstates: smallvec![],
   23|  1.15k|        dfa_states: vec![],
   24|  1.15k|        accepting: SmallSet256::default(),
   25|  1.15k|    };
   26|  1.15k|
   27|  1.15k|    minimizer.run()
   28|  1.15k|}
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  294|  2.31k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  295|  2.31k|        for (_, state) in &mut transitions.labelled {
  296|      0|            normalize_one(self, state, current_checkpoint)?;
  297|       |        }
  298|       |
  299|  2.31k|        Ok(())
  300|  2.31k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer3run:
   78|  1.15k|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   79|  1.15k|        // Rejecting state has no outgoing transitions except for a self-loop.
   80|  1.15k|        self.dfa_states.push(StateTable {
   81|  1.15k|            transitions: smallvec![],
   82|  1.15k|            fallback_state: Self::rejecting_state(),
   83|  1.15k|            attributes: StateAttributesBuilder::new().rejecting().into(),
   84|  1.15k|        });
   85|  1.15k|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   86|  1.15k|
   87|  1.15k|        // Initial superstate is {0}.
   88|  1.15k|        let initial_superstate = [0].into();
   89|  1.15k|        self.activate_if_new(initial_superstate)?;
   90|       |
   91|  3.47k|        while let Some(superstate) = self.active_superstates.pop() {
   92|  2.31k|            self.process_superstate(superstate)?;
   93|       |        }
   94|       |
   95|  1.15k|        Ok(Automaton {
   96|  1.15k|            states: self.dfa_states,
   97|  1.15k|        })
   98|  1.15k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer9normalize:
  305|  2.31k|    fn normalize(&self, superstate: &mut SmallSet256) {
  306|  2.31k|        let furthest_checkpoint = superstate
  307|  2.31k|            .iter()
  308|  2.31k|            .map(NfaStateId)
  309|  2.31k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  310|  2.31k|            .max();
  311|       |
  312|  2.31k|        if let Some(cutoff) = furthest_checkpoint {
  313|  2.31k|            superstate.remove_all_before(cutoff.0);
  314|  2.31k|        }
  315|  2.31k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15rejecting_state:
  100|  4.62k|    fn rejecting_state() -> DfaStateId {
  101|  4.62k|        DfaStateId(0)
  102|  4.62k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer18process_superstate:
  128|  2.31k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  129|  2.31k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  130|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  131|       |
  132|  2.31k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  133|      0|        debug!("Raw transitions: {:?}", transitions);
  134|       |
  135|  2.31k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  136|      0|        debug!("Normalized transitions: {:?}", transitions);
  137|       |
  138|       |        // Translate the transitions to the data model expected by TransitionTable.
  139|  2.31k|        let translated_transitions: SmallVec<_> = transitions
  140|  2.31k|            .labelled
  141|  2.31k|            .into_iter()
  142|  2.31k|            .map(|(label, state)| (label, self.superstates[&state]))
  143|  2.31k|            .collect();
  144|      0|        debug!("Translated transitions: {translated_transitions:?}");
  145|       |
  146|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  147|       |        // Otherwise, we set the fallback to the rejecting state.
  148|  2.31k|        let id = self.superstates[&current_superstate];
  149|  2.31k|        let fallback_state = self.superstates[&transitions.wildcard];
  150|  2.31k|        let attributes = self.build_attributes(id, &translated_transitions, fallback_state);
  151|  2.31k|        let table = &mut self.dfa_states[id.0 as usize];
  152|  2.31k|        table.transitions = translated_transitions;
  153|  2.31k|        table.fallback_state = fallback_state;
  154|  2.31k|        table.attributes = attributes;
  155|  2.31k|
  156|  2.31k|        Ok(())
  157|  2.31k|    }
_RNCNCNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Bc_:
  225|  2.31k|                    Some(id.next().map(|x| x.0))
_RNvNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  280|  2.31k|            if let Some(checkpoint) = current_checkpoint {
  281|  2.31k|                state.insert(checkpoint.0);
  282|  2.31k|            }
  283|       |
  284|  2.31k|            this.normalize(state);
  285|  2.31k|            this.activate_if_new(*state)?;
  286|       |
  287|  2.31k|            if let Some(checkpoint) = current_checkpoint {
  288|  2.31k|                this.checkpoints.insert(*state, checkpoint);
  289|  2.31k|            }
  290|       |
  291|  2.31k|            Ok(())
  292|  2.31k|        }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  204|  2.31k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  205|  1.15k|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  206|  1.15k|                return Some(single_state);
  207|      0|            }
  208|  1.15k|        }
  209|       |
  210|  1.15k|        None
  211|  2.31k|    }
_RNCNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB4_9Minimizer9normalize0Ba_:
  309|  4.62k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  106|  3.47k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  107|  3.47k|        if !self.superstates.contains_key(&superstate) {
  108|  2.31k|            let identifier = self
  109|  2.31k|                .superstates
  110|  2.31k|                .len()
  111|  2.31k|                .try_into()
  112|  2.31k|                .map(DfaStateId)
  113|  2.31k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  114|  2.31k|            self.superstates.insert(superstate, identifier);
  115|  2.31k|            self.active_superstates.push(superstate);
  116|  2.31k|            self.dfa_states.push(StateTable::default());
  117|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  118|  2.31k|            if superstate.contains(self.nfa.accepting_state().0) {
  119|  1.15k|                self.accepting.insert(identifier.0);
  120|  1.15k|            }
  121|  1.15k|        }
  122|       |
  123|  3.47k|        Ok(())
  124|  3.47k|    }
_RNCNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0Ba_:
  223|  3.47k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|  2.31k|                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|  1.15k|                _ => None,
  228|  3.47k|            })
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  193|  2.31k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  194|  1.15k|            self.checkpoints.insert(superstate, nfa_state);
  195|  1.15k|            Some(nfa_state)
  196|       |        } else {
  197|  1.15k|            self.checkpoints.get(&superstate).copied()
  198|       |        }
  199|  2.31k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9minimizerNtB2_9Minimizer16build_attributes:
  161|  2.31k|    fn build_attributes(
  162|  2.31k|        &self,
  163|  2.31k|        id: DfaStateId,
  164|  2.31k|        transitions: &[(TransitionLabel, DfaStateId)],
  165|  2.31k|        fallback: DfaStateId,
  166|  2.31k|    ) -> StateAttributes {
  167|  2.31k|        let mut attrs = StateAttributesBuilder::new();
  168|  2.31k|
  169|  2.31k|        if self.accepting.contains(id.0) {
  170|      0|            debug!("{id} is accepting");
  171|  1.15k|            attrs = attrs.accepting();
  172|  1.15k|        }
  173|  2.31k|        if id == Self::rejecting_state() {
  174|      0|            debug!("{id} is rejecting");
  175|      0|            attrs = attrs.rejecting();
  176|  2.31k|        }
  177|  2.31k|        if transitions.len() == 1 && fallback == Self::rejecting_state() {
  178|      0|            debug!("{id} is unitary");
  179|      0|            attrs = attrs.unitary();
  180|  2.31k|        }
  181|  2.31k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
  182|      0|            debug!("{id} has transitions to accepting");
  183|  2.31k|            attrs = attrs.transitions_to_accepting();
  184|      0|        }
  185|       |
  186|  2.31k|        attrs.into()
  187|  2.31k|    }

_RNvMs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
   93|  2.31k|    pub(super) fn accepting_state(&self) -> NfaStateId {
   94|  2.31k|        // CAST: safe because of the check in `new`.
   95|  2.31k|        NfaStateId((self.ordered_states.len() - 1) as u8)
   96|  2.31k|    }
_RNvMs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   63|  1.15k|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   64|  1.15k|        debug_assert!(query.root().is_root());
   65|       |
   66|  1.15k|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   67|  1.15k|            .root()
   68|  1.15k|            .iter()
   69|  1.15k|            .filter_map(|node| match node {
   70|       |                JsonPathQueryNode::Root(_) => None,
   71|       |                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|       |                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|       |                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|       |                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|       |                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|       |                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|       |                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  1.15k|            })
   80|  1.15k|            .collect();
   81|  1.15k|        let mut states = states_result?;
   82|       |
   83|  1.15k|        states.push(Accepting);
   84|  1.15k|
   85|  1.15k|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
   86|  1.15k|        if let Err(err) = accepting_state {
   87|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
   88|       |        } else {
   89|  1.15k|            Ok(NondeterministicAutomaton { ordered_states: states })
   90|       |        }
   91|  1.15k|    }
_RNCNvMs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton3nfaNtB6_25NondeterministicAutomaton3new0Bc_:
   69|  2.31k|            .filter_map(|node| match node {
   70|  1.15k|                JsonPathQueryNode::Root(_) => None,
   71|      0|                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|      0|                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|      0|                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|  1.15k|                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|      0|                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|      0|                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|      0|                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  2.31k|            })
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton3nfaNtB2_10NfaStateId4next:
   49|  2.31k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   50|  2.31k|        self.0
   51|  2.31k|            .checked_add(1)
   52|  2.31k|            .ok_or(CompilerError::QueryTooComplex(None))
   53|  2.31k|            .map(Self)
   54|  2.31k|    }
_RNvXs0_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCs3NN8x5qF7TE_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  102|  12.7k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  103|  12.7k|        &self.ordered_states[index.0 as usize]
  104|  12.7k|    }

_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8contains:
  118|  6.94k|    fn contains(&self, elem: u8) -> bool {
  119|  6.94k|        (self.bitmask & (1 << elem)) != 0
  120|  6.94k|    }
_RNvXs9_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next:
  225|  25.4k|    fn next(&mut self) -> Option<Self::Item> {
  226|  25.4k|        let next_elem = self.bitmask.trailing_zeros();
  227|  25.4k|
  228|  25.4k|        if next_elem == 128 {
  229|  13.8k|            return None;
  230|  11.5k|        }
  231|  11.5k|
  232|  11.5k|        let elem_mask = 1 << next_elem;
  233|  11.5k|        self.bitmask ^= elem_mask;
  234|  11.5k|
  235|  11.5k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  236|  11.5k|        Some(next_elem as u8)
  237|  25.4k|    }
_RNvXsh_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   43|  11.5k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_11SmallSet256INtNtCs3NN8x5qF7TE_4core7convert4FromAhj1_E4fromBb_:
  155|  1.15k|    fn from(arr: [u8; N]) -> Self {
  156|  1.15k|        Self::from_iter(arr)
  157|  1.15k|    }
_RNvXNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   65|  6.94k|    fn contains(&self, elem: u8) -> bool {
   66|  6.94k|        if elem < 128 {
   67|  6.94k|            self.half_1.contains(elem)
   68|       |        } else {
   69|      0|            self.half_2.contains(elem - 128)
   70|       |        }
   71|  6.94k|    }
_RNvXNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   57|  9.25k|    fn insert(&mut self, elem: u8) {
   58|  9.25k|        if elem < 128 {
   59|  9.25k|            self.half_1.insert(elem)
   60|       |        } else {
   61|      0|            self.half_2.insert(elem - 128)
   62|       |        }
   63|  9.25k|    }
_RNvXNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   95|  2.31k|    fn remove_all_before(&mut self, cutoff: u8) {
   96|  2.31k|        if cutoff < 128 {
   97|  2.31k|            self.half_1.remove_all_before(cutoff)
   98|      0|        } else {
   99|      0|            self.half_1.clear();
  100|      0|            self.half_2.remove_all_before(cutoff - 128);
  101|      0|        }
  102|  2.31k|    }
_RNCNvXs8_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next0Bd_:
  214|  6.94k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
_RNvXNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   80|  2.31k|    fn singleton(&self) -> Option<u8> {
   81|  2.31k|        if self.half_1.is_empty() {
   82|      0|            self.half_2.singleton().map(|x| x + 128)
   83|  2.31k|        } else if self.half_2.is_empty() {
   84|  2.31k|            self.half_1.singleton()
   85|       |        } else {
   86|      0|            None
   87|       |        }
   88|  2.31k|    }
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8is_empty:
  110|  4.62k|    fn is_empty(&self) -> bool {
  111|  4.62k|        self.bitmask == 0
  112|  4.62k|    }
_RINvXs6_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBc_:
  189|  1.15k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  1.15k|        let mut result = Self::default();
  191|  2.31k|        for elem in iter {
  192|  1.15k|            result.insert(elem);
  193|  1.15k|        }
  194|  1.15k|        result
  195|  1.15k|    }
_RNvXsa_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   37|  5.78k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs6_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCs3NN8x5qF7TE_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1o_8adapters12GenericShuntINtNtB2w_10filter_map9FilterMapINtNtB2w_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4D_9Minimizer23process_nfa_transitions0EINtNtB1q_6result6ResultNtNtB1q_7convert10InfallibleNtNtBa_5error13CompilerErrorEEEBc_:
  189|  2.31k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  2.31k|        let mut result = Self::default();
  191|  4.62k|        for elem in iter {
  192|  2.31k|            result.insert(elem);
  193|  2.31k|        }
  194|  2.31k|        result
  195|  2.31k|    }
_RNvXsl_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
   43|  37.0k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE6insert:
  114|  9.25k|    fn insert(&mut self, elem: u8) {
  115|  9.25k|        self.bitmask |= 1 << elem;
  116|  9.25k|    }
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE9singleton:
  126|  2.31k|    fn singleton(&self) -> Option<u8> {
  127|  2.31k|        let elem = self.bitmask.trailing_zeros();
  128|  2.31k|        let elem_mask = 1_u128.wrapping_shl(elem);
  129|  2.31k|        let remainder = self.bitmask ^ elem_mask;
  130|  2.31k|
  131|  2.31k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  132|  2.31k|        (remainder == 0).then_some(elem as u8)
  133|  2.31k|    }
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE4iter:
  122|  13.8k|    fn iter(&self) -> SmallSet128Iter {
  123|  13.8k|        SmallSet128Iter { bitmask: self.bitmask }
  124|  13.8k|    }
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE17remove_all_before:
  139|  2.31k|    fn remove_all_before(&mut self, cutoff: u8) {
  140|  2.31k|        let mask: u128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF << cutoff;
  141|  2.31k|        self.bitmask &= mask;
  142|  2.31k|    }
_RNvXs8_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCs3NN8x5qF7TE_4core4iter6traits8iterator8Iterator4next:
  213|  18.5k|    fn next(&mut self) -> Option<Self::Item> {
  214|  18.5k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  215|  18.5k|    }
_RNvXse_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
   37|  28.9k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iter:
   73|  6.94k|    fn iter(&self) -> SmallSet256Iter {
   74|  6.94k|        SmallSet256Iter {
   75|  6.94k|            half_1: self.half_1.iter(),
   76|  6.94k|            half_2: self.half_2.iter(),
   77|  6.94k|        }
   78|  6.94k|    }

_RNvMs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributes10is_unitary:
  125|  15.6k|    pub fn is_unitary(&self) -> bool {
  126|  15.6k|        self.is_set(StateAttribute::Unitary)
  127|  15.6k|    }
_RNvMs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  116|  31.7k|    pub fn has_transition_to_accepting(&self) -> bool {
  117|  31.7k|        self.is_set(StateAttribute::TransitionsToAccepting)
  118|  31.7k|    }
_RNvXsn_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_5StateNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  137|  37.6k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_rejecting:
  108|  36.5k|    pub fn is_rejecting(&self) -> bool {
  109|  36.5k|        self.is_set(StateAttribute::Rejecting)
  110|  36.5k|    }
_RNvMs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_accepting:
  100|   180k|    pub fn is_accepting(&self) -> bool {
  101|   180k|        self.is_set(StateAttribute::Accepting)
  102|   180k|    }
_RNvMs1_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributes6is_set:
  131|   264k|    fn is_set(&self, attr: StateAttribute) -> bool {
  132|   264k|        (self.0 & attr as u8) != 0
  133|   264k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3set:
   58|  4.62k|    fn set(self, attr: StateAttribute) -> Self {
   59|  4.62k|        Self {
   60|  4.62k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   61|  4.62k|        }
   62|  4.62k|    }
_RNvXsj_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_15StateAttributesNtNtCs3NN8x5qF7TE_4core7default7Default7defaultBb_:
   28|  2.31k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9accepting:
   38|  1.15k|    pub(crate) fn accepting(self) -> Self {
   39|  1.15k|        self.set(StateAttribute::Accepting)
   40|  1.15k|    }
_RNvXsn_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB5_5StateNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqBb_:
  137|  2.31k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3new:
   32|  3.47k|    pub(crate) fn new() -> Self {
   33|  3.47k|        Self {
   34|  3.47k|            attrs: StateAttributes(0),
   35|  3.47k|        }
   36|  3.47k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder5build:
   54|  3.47k|    pub(crate) fn build(self) -> StateAttributes {
   55|  3.47k|        self.attrs
   56|  3.47k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_accepting:
   50|  2.31k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   51|  2.31k|        self.set(StateAttribute::TransitionsToAccepting)
   52|  2.31k|    }
_RNvMNtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9rejecting:
   42|  1.15k|    pub(crate) fn rejecting(self) -> Self {
   43|  1.15k|        self.set(StateAttribute::Rejecting)
   44|  1.15k|    }
_RNvXs_NtNtNtCs6TTJfIhyJGW_8rsonpath5query9automaton5stateNtB4_15StateAttributesINtNtCs3NN8x5qF7TE_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   67|  3.47k|    fn from(value: StateAttributesBuilder) -> Self {
   68|  3.47k|        value.build()
   69|  3.47k|    }

_RNvMs_NtNtCs6TTJfIhyJGW_8rsonpath5query23nonnegative_array_indexNtB4_21NonNegativeArrayIndex13try_incrementCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   53|  75.1k|    pub fn try_increment(&mut self) -> Result<(), ArrayIndexError> {
   54|  75.1k|        let new_index = self.0 + 1;
   55|  75.1k|        if new_index <= JSON_NUMBER_ULIMIT {
   56|  75.1k|            self.0 = new_index;
   57|  75.1k|            Ok(())
   58|       |        } else {
   59|      0|            Err(ArrayIndexError::ExceedsUpperLimitError(new_index.to_string()))
   60|       |        }
   61|  75.1k|    }

_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser31array_index_descendant_selector:
  227|  1.15k|fn array_index_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  228|  1.15k|    map(array_index_selector(), Token::ArrayIndexDescendant)
  229|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser18parsed_array_index:
  239|  2.31k|fn parsed_array_index<'a>() -> impl Parser<'a, u64> {
  240|  2.31k|    map_res(length_limited_array_index(), str::parse)
  241|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser13quoted_member:
  254|  2.31k|fn quoted_member<'a>() -> impl Parser<'a, MemberString<'a>> {
  255|  2.31k|    alt((
  256|  2.31k|        delimited(
  257|  2.31k|            char('\''),
  258|  2.31k|            map(opt(single_quoted_member()), MemberString::from),
  259|  2.31k|            char('\''),
  260|  2.31k|        ),
  261|  2.31k|        delimited(
  262|  2.31k|            char('"'),
  263|  2.31k|            map(opt(double_quoted_member()), MemberString::from),
  264|  2.31k|            char('"'),
  265|  2.31k|        ),
  266|  2.31k|    ))
  267|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser8jsonpath:
  149|  1.15k|fn jsonpath<'a>() -> impl Parser<'a, (Option<Token<'a>>, Vec<Token<'a>>)> {
  150|  1.15k|    pair(
  151|  1.15k|        opt(map(char('$'), |_| Token::Root)), // root selector
  152|  1.15k|        non_root(),
  153|  1.15k|    )
  154|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser8non_root:
  156|  1.15k|fn non_root<'a>() -> impl Parser<'a, Vec<Token<'a>>> {
  157|  1.15k|    many0(alt((
  158|  1.15k|        wildcard_child_selector(),
  159|  1.15k|        child_selector(),
  160|  1.15k|        array_index_child_selector(),
  161|  1.15k|        wildcard_descendant_selector(),
  162|  1.15k|        descendant_selector(),
  163|  1.15k|    )))
  164|  1.15k|}
_RNCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser8jsonpath0B7_:
  151|  1.15k|        opt(map(char('$'), |_| Token::Root)), // root selector
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser20double_quoted_member:
  285|  2.31k|fn double_quoted_member<'a>() -> impl Parser<'a, String> {
  286|  2.31k|    escaped_transform(
  287|  2.31k|        recognize(many1(alt((unescaped(), char('\''))))),
  288|  2.31k|        '\\',
  289|  2.31k|        // If ["\""] is parsed the string must be \". Same reason as in single_quoted_member.
  290|  2.31k|        alt((escaped(), value("\\\"", tag("\"")))),
  291|  2.31k|    )
  292|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12dot_selector:
  176|  1.15k|fn dot_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  177|  1.15k|    preceded(char('.'), member())
  178|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser23wildcard_child_selector:
  166|  1.15k|fn wildcard_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  167|  1.15k|    map(alt((dot_wildcard_selector(), index_wildcard_selector())), |_| {
  168|       |        Token::WildcardChild()
  169|  1.15k|    })
  170|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser14child_selector:
  172|  1.15k|fn child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  173|  1.15k|    map(alt((dot_selector(), index_selector())), Token::Child)
  174|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser28wildcard_descendant_selector:
  194|  1.15k|fn wildcard_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  195|  1.15k|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|       |        Token::WildcardDescendant()
  197|  1.15k|    })
  198|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser14index_selector:
  200|  2.31k|fn index_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  201|  2.31k|    delimited(char('['), quoted_member(), char(']'))
  202|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser26array_index_child_selector:
  223|  1.15k|fn array_index_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  224|  1.15k|    map(array_index_selector(), Token::ArrayIndexChild)
  225|  1.15k|}
_RNCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser28wildcard_descendant_selector0B7_:
  195|  1.15k|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|  1.15k|        Token::WildcardDescendant()
  197|  1.15k|    })
_RINvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser14tokens_to_nodeINtNtNtCsc6jWpmc7Dho_5alloc3vec9into_iter8IntoIterNtB2_5TokenEEB6_:
  110|  2.31k|fn tokens_to_node<'a, I: Iterator<Item = Token<'a>>>(tokens: &mut I) -> Result<Option<JsonPathQueryNode>, ParserError> {
  111|  2.31k|    match tokens.next() {
  112|  1.15k|        Some(token) => {
  113|  1.15k|            let child_node = tokens_to_node(tokens)?.map(Box::new);
  114|  1.15k|            match token {
  115|      0|                Token::Root => Ok(Some(JsonPathQueryNode::Root(child_node))),
  116|      0|                Token::Child(member) => Ok(Some(JsonPathQueryNode::Child(
  117|      0|                    JsonString::new(member.borrow()),
  118|      0|                    child_node,
  119|      0|                ))),
  120|      0|                Token::ArrayIndexChild(i) => Ok(Some(JsonPathQueryNode::ArrayIndexChild(i, child_node))),
  121|      0|                Token::WildcardChild() => Ok(Some(JsonPathQueryNode::AnyChild(child_node))),
  122|      0|                Token::Descendant(member) => Ok(Some(JsonPathQueryNode::Descendant(
  123|      0|                    JsonString::new(member.borrow()),
  124|      0|                    child_node,
  125|      0|                ))),
  126|      0|                Token::ArrayIndexDescendant(i) => Ok(Some(JsonPathQueryNode::ArrayIndexDescendant(i, child_node))),
  127|  1.15k|                Token::WildcardDescendant() => Ok(Some(JsonPathQueryNode::AnyDescendant(child_node))),
  128|       |            }
  129|       |        }
  130|  1.15k|        _ => Ok(None),
  131|       |    }
  132|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser23index_wildcard_selector:
  204|  2.31k|fn index_wildcard_selector<'a>() -> impl Parser<'a, char> {
  205|  2.31k|    delimited(char('['), char('*'), char(']'))
  206|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser20array_index_selector:
  231|  2.31k|fn array_index_selector<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  232|  2.31k|    delimited(char('['), nonnegative_array_index(), char(']'))
  233|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser20single_quoted_member:
  269|  2.31k|fn single_quoted_member<'a>() -> impl Parser<'a, String> {
  270|  2.31k|    escaped_transform(
  271|  2.31k|        // If ['"'] is parsed, we want the string to be \", not ", since
  272|  2.31k|        // in a valid JSON document the only way to represent a double quote in a string is with an escape.
  273|  2.31k|        map(
  274|  2.31k|            many1(alt((
  275|  2.31k|                map(unescaped(), MaybeEscapedChar::Char),
  276|  2.31k|                map(char('"'), MaybeEscapedChar::Escaped),
  277|  2.31k|            ))),
  278|  2.31k|            MaybeEscapedCharVec,
  279|  2.31k|        ),
  280|  2.31k|        '\\',
  281|  2.31k|        alt((escaped(), value("'", tag("'")))),
  282|  2.31k|    )
  283|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser21parse_json_path_query:
   68|  1.15k|pub(crate) fn parse_json_path_query(query_string: &str) -> Result<JsonPathQuery, ParserError> {
   69|  1.15k|    let tokens_result = jsonpath()(query_string);
   70|  1.15k|    let finished = tokens_result.finish();
   71|  1.15k|
   72|  1.15k|    match finished {
   73|  1.15k|        Ok(("", (_root_token, tokens))) => {
   74|      0|            debug!("Parsed tokens: {}", {
   75|      0|                use fmt::Write;
   76|      0|                _root_token.map_or(String::new(), |x| format!("{x}"))
   77|      0|                    + &tokens.iter().fold(String::new(), |mut out, x| {
   78|       |                        write!(out, "({x:?})").expect("infallible");
   79|       |                        out
   80|      0|                    })
   81|       |            });
   82|  1.15k|            let node = tokens_to_node(&mut tokens.into_iter())?;
   83|  1.15k|            Ok(match node {
   84|      0|                None => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(None))),
   85|  1.15k|                Some(node) if node.is_root() => JsonPathQuery::new(Box::new(node)),
   86|  1.15k|                Some(node) => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(Some(Box::new(node))))),
   87|       |            })
   88|       |        }
   89|       |        _ => {
   90|      0|            let mut parse_errors = ParseErrorReport::new();
   91|      0|            let mut continuation = finished.map(|x| x.0);
   92|      0|            loop {
   93|      0|                match continuation {
   94|      0|                    Ok("") => return Err(ParserError::SyntaxError { report: parse_errors }),
   95|      0|                    Ok(remaining) => {
   96|      0|                        let error_character_index = query_string.len() - remaining.len();
   97|      0|                        parse_errors.record_at(error_character_index);
   98|      0|                        let next_char_boundary = (1..=4)
   99|      0|                            .find(|x| remaining.is_char_boundary(*x))
  100|      0|                            .expect("longest UTF8 char is 4 bytes");
  101|      0|                        continuation = non_root()(&remaining[next_char_boundary..]).finish().map(|x| x.0);
  102|      0|                    }
  103|      0|                    Err(e) => return Err(nom::error::Error::new(query_string.to_owned(), e.code).into()),
  104|       |                }
  105|       |            }
  106|       |        }
  107|       |    }
  108|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser9unescaped:
  306|  4.62k|fn unescaped<'a>() -> impl Parser<'a, char> {
  307|  4.62k|    verify(none_of(r#"'"\"#), |&c| u32::from(c) >= 0x20)
  308|  4.62k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first:
  215|  2.31k|fn member_first<'a>() -> impl Parser<'a, char> {
  216|  2.31k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
  217|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser16member_character:
  219|  2.31k|fn member_character<'a>() -> impl Parser<'a, char> {
  220|  2.31k|    verify(anychar, |&x| x.is_alphanumeric() || x == '_' || !x.is_ascii())
  221|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser26length_limited_array_index:
  244|  2.31k|fn length_limited_array_index<'a>() -> impl Parser<'a, &'a str> {
  245|  2.31k|    map_res(digit1, |cs: &str| {
  246|       |        if cs.len() > (ARRAY_INDEX_ULIMIT_BASE_10_DIGIT_COUNT + 1) {
  247|       |            Err(ArrayIndexError::ExceedsUpperLimitError(cs.to_owned()))
  248|       |        } else {
  249|       |            Ok(cs)
  250|       |        }
  251|  2.31k|    })
  252|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser23nonnegative_array_index:
  235|  2.31k|fn nonnegative_array_index<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  236|  2.31k|    map_res(parsed_array_index(), TryInto::try_into)
  237|  2.31k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser21dot_wildcard_selector:
  180|  1.15k|fn dot_wildcard_selector<'a>() -> impl Parser<'a, char> {
  181|  1.15k|    preceded(char('.'), char('*'))
  182|  1.15k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser7escaped:
  294|  4.62k|fn escaped<'a>() -> impl Parser<'a, &'a str> {
  295|  4.62k|    alt((
  296|  4.62k|        value("\\b", tag("b")),
  297|  4.62k|        value("\\f", tag("f")),
  298|  4.62k|        value("\\n", tag("n")),
  299|  4.62k|        value("\\r", tag("r")),
  300|  4.62k|        value("\\t", tag("t")),
  301|  4.62k|        value("\\\\", tag("\\")),
  302|  4.62k|        value("/", tag("/")),
  303|  4.62k|    ))
  304|  4.62k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser6member:
  208|  2.31k|fn member<'a>() -> impl Parser<'a, MemberString<'a>> {
  209|  2.31k|    map(
  210|  2.31k|        recognize(pair(member_first(), many0(member_character()))),
  211|  2.31k|        MemberString::Borrowed,
  212|  2.31k|    )
  213|  2.31k|}
_RNCNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser12member_first0B7_:
  216|  1.15k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
_RNvNtNtCs6TTJfIhyJGW_8rsonpath5query6parser19descendant_selector:
  184|  1.15k|fn descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  185|  1.15k|    preceded(
  186|  1.15k|        tag(".."),
  187|  1.15k|        alt((
  188|  1.15k|            map(alt((member(), index_selector())), Token::Descendant),
  189|  1.15k|            array_index_descendant_selector(),
  190|  1.15k|        )),
  191|  1.15k|    )
  192|  1.15k|}

_RNvXsa_NtCs6TTJfIhyJGW_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCs3NN8x5qF7TE_4core3cmp9PartialEq2eqCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  172|  96.5k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvXs2_NtCs6TTJfIhyJGW_8rsonpath6resultINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB18_E9add_matchCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  127|  65.5k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  128|  65.5k|        self.push(data);
  129|  65.5k|        Ok(())
  130|  65.5k|    }

_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  151|  1.15k|    fn new(sink: &'s mut S) -> Self {
  152|  1.15k|        Self::Simple(SimpleRecorder::new(sink))
  153|  1.15k|    }
_RNvMNtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB4_5MatchEE14build_recorderCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   28|  1.15k|    pub(crate) fn build_recorder(sink: &'s mut S) -> Self {
   29|  1.15k|        Self {
   30|  1.15k|            internal: RefCell::new(InternalRecorder::new(sink)),
   31|  1.15k|        }
   32|  1.15k|    }
_RNvNtNtCs6TTJfIhyJGW_8rsonpath6result5nodes13finalize_node:
  434|      0|    debug!("Finalizing node");
  435|       |
  436|  96.5k|    if ty == MatchedNodeType::Atomic {
  437|       |        // Atomic nodes are finished when the next structural character is matched.
  438|       |        // The buffer includes that character and all preceding whitespace.
  439|       |        // We need to remove it before saving the result.
  440|  80.9k|        if buf.len() <= 1 {
  441|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  442|  61.3k|            buf.truncate(0)
  443|       |        } else {
  444|  19.6k|            let mut i = buf.len() - 2;
  445|  28.0k|            while buf[i] == b' ' || buf[i] == b'\t' || buf[i] == b'\n' || buf[i] == b'\r' {
  446|  8.46k|                i -= 1;
  447|  8.46k|            }
  448|       |
  449|  19.6k|            buf.truncate(i + 1);
  450|       |        }
  451|  15.6k|    }
  452|  96.5k|}
_RNvNtNtCs6TTJfIhyJGW_8rsonpath6result5nodes18append_final_block:
  420|  96.5k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  421|  96.5k|    debug_assert!(read_end >= src_start);
  422|  96.5k|    let in_block_start = if read_start > src_start {
  423|  80.4k|        read_start - src_start
  424|       |    } else {
  425|  16.1k|        0
  426|       |    };
  427|  96.5k|    let in_block_end = read_end - src_start;
  428|  96.5k|
  429|  96.5k|    dest.extend(&src[in_block_start..in_block_end]);
  430|  96.5k|}
_RNvXs0_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E12record_matchCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   53|      0|        debug!("Recording match at {idx}");
   54|   125k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|   125k|        Ok(())
   56|   125k|    }
_RNvMs3_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  333|  3.97k|    fn record_block(&mut self, block: B) {
  334|  3.97k|        if let Some(finished) = self.current_block.as_ref() {
  335|   300k|            for node in &mut self.stack {
  336|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  337|   296k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  338|       |            }
  339|       |
  340|  3.97k|            self.idx += finished.len();
  341|      0|        }
  342|       |
  343|  3.97k|        self.current_block = Some(block);
  344|      0|        debug!("New block, idx = {}", self.idx);
  345|  3.97k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_matchCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  165|   125k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|   125k|        match self {
  167|  61.2k|            Self::Simple(simple) => {
  168|  61.2k|                if !simple.try_record_match(idx, depth, ty) {
  169|    738|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    738|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    738|                    let mut stack = simple.transform_to_stack();
  174|    738|                    stack.record_match(idx, depth, ty);
  175|    738|                    *self = Self::Stack(stack);
  176|  60.5k|                }
  177|       |            }
  178|  64.3k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|   125k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  222|  4.56k|    fn record_block(&mut self, block: B) {
  223|  4.56k|        if let Some(finished) = self.current_block.as_ref() {
  224|  3.41k|            if let Some(node) = self.node.as_mut() {
  225|      0|                debug!("Continuing node, idx is {}", self.idx);
  226|  2.84k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  227|    570|            }
  228|       |
  229|  3.41k|            self.idx += finished.len();
  230|  1.15k|        }
  231|       |
  232|  4.56k|        self.current_block = Some(block);
  233|      0|        debug!("New block, idx = {}", self.idx);
  234|  4.56k|    }
_RNvNtNtCs6TTJfIhyJGW_8rsonpath6result5nodes12append_block:
  404|   299k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  405|   299k|    if read_start >= src_start + src.len() {
  406|  1.46k|        return;
  407|   297k|    }
  408|       |
  409|   297k|    let to_extend = if read_start > src_start {
  410|  42.3k|        let in_block_start = read_start - src_start;
  411|  42.3k|        &src[in_block_start..]
  412|       |    } else {
  413|   255k|        src
  414|       |    };
  415|       |
  416|   297k|    dest.extend(to_extend);
  417|   299k|}
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  283|    738|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  284|    738|        match self.node {
  285|    738|            Some(node) => StackRecorder {
  286|    738|                idx: self.idx,
  287|    738|                match_count: 1,
  288|    738|                current_block: self.current_block,
  289|    738|                stack: vec![PartialNode {
  290|    738|                    id: 0,
  291|    738|                    start_idx: node.start_idx,
  292|    738|                    start_depth: node.start_depth,
  293|    738|                    buf: node.buf,
  294|    738|                    ty: node.ty,
  295|    738|                }],
  296|    738|                output_queue: OutputQueue::new(),
  297|    738|                sink: self.sink,
  298|    738|            },
  299|      0|            None => StackRecorder {
  300|      0|                idx: self.idx,
  301|      0|                match_count: 0,
  302|      0|                current_block: self.current_block,
  303|      0|                stack: vec![],
  304|      0|                output_queue: OutputQueue::new(),
  305|      0|                sink: self.sink,
  306|      0|            },
  307|       |        }
  308|    738|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  213|  1.15k|    fn new(sink: &'s mut S) -> Self {
  214|  1.15k|        Self {
  215|  1.15k|            idx: 0,
  216|  1.15k|            current_block: None,
  217|  1.15k|            node: None,
  218|  1.15k|            sink,
  219|  1.15k|        }
  220|  1.15k|    }
_RNvXs_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB13_E18record_block_startCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   41|  8.53k|    fn record_block_start(&self, new_block: B) {
   42|  8.53k|        self.internal.borrow_mut().record_block(new_block)
   43|  8.53k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  185|  92.8k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  92.8k|        match self {
  187|  60.7k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  32.1k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  92.8k|    }
_RNvMs3_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_matchCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  347|  65.1k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  348|  65.1k|        let node = PartialNode {
  349|  65.1k|            id: self.match_count,
  350|  65.1k|            start_idx: idx,
  351|  65.1k|            start_depth: depth,
  352|  65.1k|            buf: vec![],
  353|  65.1k|            ty,
  354|  65.1k|        };
  355|       |
  356|      0|        debug!("New node {node:?}");
  357|  65.1k|        self.match_count += 1;
  358|  65.1k|        self.stack.push(node);
  359|  65.1k|    }
_RNvMs3_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  363|      0|        debug!("Value terminator at {idx}, depth {depth}");
  364|  69.2k|        while let Some(node) = self.stack.last() {
  365|  68.1k|            if node.start_depth >= depth {
  366|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  367|  37.1k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  368|  37.1k|                append_final_block(
  369|  37.1k|                    &mut node.buf,
  370|  37.1k|                    self.current_block
  371|  37.1k|                        .as_ref()
  372|  37.1k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  373|  37.1k|                    self.idx,
  374|  37.1k|                    node.start_idx,
  375|  37.1k|                    idx + 1,
  376|  37.1k|                );
  377|  37.1k|                finalize_node(&mut node.buf, node.ty);
  378|       |
  379|      0|                debug!("Committing node: {node:?}");
  380|  37.1k|                self.output_queue.insert(
  381|  37.1k|                    node.id,
  382|  37.1k|                    Match {
  383|  37.1k|                        span_start: node.start_idx,
  384|  37.1k|                        bytes: node.buf,
  385|  37.1k|                    },
  386|  37.1k|                );
  387|       |            } else {
  388|  30.9k|                break;
  389|       |            }
  390|       |        }
  391|       |
  392|  32.1k|        if self.stack.is_empty() {
  393|      0|            debug!("Outputting batch of nodes.");
  394|  1.17k|            self.output_queue
  395|  1.17k|                .output_to(self.sink)
  396|  1.17k|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  397|  30.9k|        }
  398|       |
  399|  32.1k|        Ok(())
  400|  32.1k|    }
_RNvMs1_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE12record_blockCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  156|  8.53k|    fn record_block(&mut self, block: B) {
  157|  8.53k|        match self {
  158|  4.56k|            Self::Simple(r) => r.record_block(block),
  159|  3.97k|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  8.53k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  237|      0|        debug!("Value terminator at {idx}, depth {depth}");
  238|  60.7k|        if let Some(node) = self.node.as_ref() {
  239|  59.7k|            if node.start_depth >= depth {
  240|  59.4k|                let mut node = self.node.take().expect("node is Some");
  241|      0|                debug!("Mark node as ended at {}", idx + 1);
  242|       |                append_final_block(
  243|  59.4k|                    &mut node.buf,
  244|  59.4k|                    self.current_block
  245|  59.4k|                        .as_ref()
  246|  59.4k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  247|  59.4k|                    self.idx,
  248|  59.4k|                    node.start_idx,
  249|  59.4k|                    idx + 1,
  250|  59.4k|                );
  251|  59.4k|                finalize_node(&mut node.buf, node.ty);
  252|       |
  253|      0|                debug!("Committing and outputting node");
  254|  59.4k|                self.sink
  255|  59.4k|                    .add_match(Match {
  256|  59.4k|                        span_start: node.start_idx,
  257|  59.4k|                        bytes: node.buf,
  258|  59.4k|                    })
  259|  59.4k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  260|    327|            }
  261|    950|        }
  262|       |
  263|  60.7k|        Ok(())
  264|  60.7k|    }
_RNvMs2_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
  266|  61.2k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  267|  61.2k|        if self.node.is_some() {
  268|      0|            debug!("nested match detected, switching to stack");
  269|    738|            return false;
  270|  60.5k|        }
  271|  60.5k|
  272|  60.5k|        let node = SimplePartialNode {
  273|  60.5k|            start_idx: idx,
  274|  60.5k|            start_depth: depth,
  275|  60.5k|            buf: vec![],
  276|  60.5k|            ty,
  277|  60.5k|        };
  278|  60.5k|        self.node = Some(node);
  279|  60.5k|
  280|  60.5k|        true
  281|  61.2k|    }
_RNvXs0_NtNtCs6TTJfIhyJGW_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCsc6jWpmc7Dho_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB14_E23record_value_terminatorCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   59|  92.8k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  92.8k|        self.internal
   61|  92.8k|            .borrow_mut()
   62|  92.8k|            .record_value_terminator(idx, depth)
   63|  92.8k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  92.8k|    }

_RNvMNtNtCs6TTJfIhyJGW_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   29|  37.1k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  37.1k|        let actual_idx = id - self.offset;
   31|       |
   32|  93.8k|        while self.nodes.len() <= actual_idx {
   33|  56.7k|            self.nodes.push(None);
   34|  56.7k|        }
   35|       |
   36|  37.1k|        self.nodes[actual_idx] = Some(node);
   37|  37.1k|    }
_RINvMNtNtCs6TTJfIhyJGW_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCsc6jWpmc7Dho_5alloc3vec3VecB18_EECsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   52|  1.17k|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|  1.17k|    where
   54|  1.17k|        S: Sink<D>,
   55|  1.17k|    {
   56|  1.17k|        self.offset += self.nodes.len();
   57|       |
   58|  6.07k|        for node in self.nodes.drain(..) {
   59|  6.07k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|  1.17k|        Ok(())
   63|  1.17k|    }
_RNvMNtNtCs6TTJfIhyJGW_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCsdxDDISQvfJQ_20fuzz_arbitrary_bytes:
   18|    738|    pub(super) fn new() -> Self {
   19|    738|        Self {
   20|    738|            offset: 0,
   21|    738|            nodes: vec![],
   22|    738|        }
   23|    738|    }

_RNCNvXNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCsk7csMpgu7wb_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   18|  1.15k|#[derive(Arbitrary)]
_RNvXNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytess_1__NtB4_16DisplayableBytesNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hintB4_:
   18|  1.15k|#[derive(Arbitrary)]
_RNvXNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytess_1__NtB4_16DisplayableBytesNtCsk7csMpgu7wb_9arbitrary9Arbitrary19arbitrary_take_rest:
   18|  3.47k|#[derive(Arbitrary)]
_RNCNvXNvCsdxDDISQvfJQ_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCsk7csMpgu7wb_9arbitrary9Arbitrary9size_hint0B6_:
   18|  1.15k|#[derive(Arbitrary)]

