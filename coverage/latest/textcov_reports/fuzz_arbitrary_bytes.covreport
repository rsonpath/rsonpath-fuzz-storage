_RNvXs9_Csgcr0VdWlExs_9arbitraryRShNtB5_9Arbitrary19arbitrary_take_restCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  668|    514|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  669|    514|        Ok(u.take_rest())
  670|    514|    }
_RNvXs9_Csgcr0VdWlExs_9arbitraryRShNtB5_9Arbitrary9size_hintCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  673|    514|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  674|    514|        (0, None)
  675|    514|    }

_RNvNtCsgcr0VdWlExs_9arbitrary9size_hint3andCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   26|    514|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    514|    let lower = lhs.0 + rhs.0;
   28|    514|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    514|    (lower, upper)
   30|    514|}
_RINvNtCsgcr0VdWlExs_9arbitrary9size_hint15recursion_guardNCNvXNvCs346dUKc5pUh_20fuzz_arbitrary_bytess_1__NtB10_16DisplayableBytesNtB4_9Arbitrary9size_hint0EB10_:
   12|    514|pub fn recursion_guard(
   13|    514|    depth: usize,
   14|    514|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    514|) -> (usize, Option<usize>) {
   16|    514|    const MAX_DEPTH: usize = 20;
   17|    514|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    514|        f(depth + 1)
   21|       |    }
   22|    514|}
_RNCNvNtCsgcr0VdWlExs_9arbitrary9size_hint3and0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
   28|    514|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsgcr0VdWlExs_9arbitrary9size_hint7and_allCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   37|    514|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    514|    hints.iter().copied().fold((0, Some(0)), and)
   39|    514|}

_RNvMNtCsgcr0VdWlExs_9arbitrary12unstructuredNtB2_12Unstructured9take_restCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  598|    514|    pub fn take_rest(mut self) -> &'a [u8] {
  599|    514|        mem::take(&mut self.data)
  600|    514|    }
_RNvMNtCsgcr0VdWlExs_9arbitrary12unstructuredNtB2_12Unstructured3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   85|    514|    pub fn new(data: &'a [u8]) -> Self {
   86|    514|        Unstructured { data }
   87|    514|    }
_RNvMNtCsgcr0VdWlExs_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  132|    514|    pub fn is_empty(&self) -> bool {
  133|    514|        self.len() == 0
  134|    514|    }
_RNvMNtCsgcr0VdWlExs_9arbitrary12unstructuredNtB2_12Unstructured3lenCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  108|    514|    pub fn len(&self) -> usize {
  109|    514|        self.data.len()
  110|    514|    }

_RNvMs_CsbvfJ3aaTQfH_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   40|    514|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    514|        match self {
   42|    514|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    514|    }
_RNvXCsbvfJ3aaTQfH_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   30|    514|    fn from(_: ()) -> Self {
   31|    514|        Self::Keep
   32|    514|    }
_RNvNvCs346dUKc5pUh_20fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|    514|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    514|                $body
  305|    514|            }
rust_fuzzer_test_input:
  259|    514|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    514|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    514|
  262|    514|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    514|                // implementation. This helps the fuzzer avoid exploring all the
  264|    514|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    514|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    514|                // get to longer inputs that actually lead to interesting executions
  267|    514|                // quicker.
  268|    514|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    514|                }
  271|    514|
  272|    514|                let mut u = Unstructured::new(bytes);
  273|    514|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    514|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    514|                }
  291|       |
  292|    514|                let data = match data {
  293|    514|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    514|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    514|                result.to_libfuzzer_code()
  299|    514|            }
LLVMFuzzerTestOneInput:
   58|    514|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    514|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    514|    });
   63|    514|
   64|    514|    match test_input {
   65|    514|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    514|}
_RNCNvCsbvfJ3aaTQfH_13libfuzzer_sys15test_input_wrap0B3_:
   59|    514|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    514|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    514|        rust_fuzzer_test_input(data_slice)
   62|    514|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_Cs7f28p97iUrb_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  464|   908k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|   908k|        Some((*self as usize).cmp(&(*other as usize)))
  466|   908k|    }
_RNvCs7f28p97iUrb_3log9max_level:
 1270|   478k|pub fn max_level() -> LevelFilter {
 1271|   478k|    // Since `LevelFilter` is `repr(usize)`,
 1272|   478k|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1273|   478k|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1274|   478k|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1275|   478k|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1276|   478k|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1277|   478k|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1278|   478k|}
_RNvXs_Cs7f28p97iUrb_3logNtB4_5LevelINtNtCslATUeuPuGvJ_4core3cmp10PartialOrdNtB4_11LevelFilterE11partial_cmpCsjsjhpdplWt_8rsonpath:
  464|  48.0k|    fn partial_cmp(&self, other: &LevelFilter) -> Option<cmp::Ordering> {
  465|  48.0k|        Some((*self as usize).cmp(&(*other as usize)))
  466|  48.0k|    }

_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededReccINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B12_E0B1q_E0NCINvBB_9delimitedBY_cccB12_B1q_B1q_B1q_E0EINtB4_3AltBY_cB12_E6choiceCsjsjhpdplWt_8rsonpath:
  134|  1.02k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.02k|        match self.0.parse(input.clone()) {
  136|  1.02k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.02k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtNtB6_9character8complete4charBz_BC_E0NCINvNtB6_8sequence9delimitedBz_cccBC_B11_B11_B11_E0EE0CsjsjhpdplWt_8rsonpath:
   50|    514|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1k_NCIB0_Bx_cB1k_TNCINvNtB4_8sequence8precededBx_ccB1k_NCINvNtNtB4_9character8complete4charBx_B1k_E0B3a_E0NCINvB2E_9delimitedBx_cccB1k_B3a_B3a_B3a_E0EE0NCNvBB_23wildcard_child_selector0E0NCIB1M_Bx_NtBB_12MemberStringBz_B1k_NCIB0_Bx_B5s_B1k_TNCIB2C_Bx_cB5s_B1k_B3a_NCIB1M_Bx_Bx_B5s_B1k_NCINvB1O_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1k_NCINvB2E_4pairBx_cB7g_B1k_NCINvB1O_6verifyBx_ccB1k_INvB3f_7anycharBx_B1k_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1k_NCIB8n_Bx_ccB1k_B8J_NCNvBB_16member_character0E0E0E0E0NcNtB5s_8Borrowed0E0E0NCIB42_Bx_cB5s_cB1k_B3a_NCIB0_Bx_B5s_B1k_TNCIB42_Bx_cB5s_cB1k_B3a_NCIB1M_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7l_6string6StringEB5s_B1k_NCINvB1O_3optBx_Bd2_B1k_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1k_NCIB1M_Bx_IB7h_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1k_NCINvB9z_5many1Bx_Bf1_B1k_NCIB0_Bx_Bf1_B1k_TNCIB1M_Bx_cBf1_B1k_NCIB8n_Bx_ccB1k_NCINvB3f_7none_ofBx_Bx_B1k_E0NCNvBB_9unescaped0E0NcNtBf1_4Char0E0NCIB1M_Bx_cBf1_B1k_B3a_NcNtBf1_7Escaped0E0EE0E0NcBfp_0E0NCIB0_Bx_Bx_B1k_TNCIB0_Bx_Bx_B1k_TNCINvB1O_5valueBx_Bx_Bx_B1k_NCINvBe0_3tagBx_Bx_B1k_E0E0BjF_BjF_BjF_BjF_BjF_BjF_EE0BjF_EE0Bfp_Bx_cBd2_E0E0NvYB5s_INtNtBcv_7convert4FromBcq_E4fromE0B3a_E0NCIB42_Bx_cB5s_cB1k_B3a_NCIB1M_Bx_Bcq_B5s_B1k_NCIBdA_Bx_Bd2_B1k_NCIBdY_Bx_B1k_NCIB6V_Bx_B7g_B1k_NCIBfW_Bx_cB1k_NCIB0_Bx_cB1k_TBgU_B3a_EE0E0E0Bj7_Bx_Bx_cBd2_E0E0Blm_E0B3a_E0EE0B3a_E0EE0NcNtBz_5Child0E0NCIB1M_Bx_NtNtBD_23nonnegative_array_index21NonNegativeArrayIndexBz_B1k_NCIB42_Bx_cBpv_cB1k_B3a_NCINvB1O_7map_resBx_yBpv_B1k_NtNtBD_5error15ArrayIndexErrorNCIBqW_Bx_Bx_yB1k_NtNtNtBcv_3num5error13ParseIntErrorNCIBqW_Bx_Bx_Bx_B1k_Brm_INvB3f_6digit1Bx_B1k_ENCNvBB_26length_limited_array_index0E0INvMNtBcv_3stre5parseyEE0NvYyINtBlw_7TryIntoBpv_E8try_intoE0B3a_E0NcNtBz_15ArrayIndexChild0E0NCIB1M_Bx_cBz_B1k_NCIB2C_Bx_Bx_cB1k_Bk7_NCIB0_Bx_cB1k_TB3a_B3Z_EE0E0NCNvBB_28wildcard_descendant_selector0E0NCIB2C_Bx_Bx_Bz_B1k_Bk7_NCIB0_Bx_Bz_B1k_TNCIB1M_Bx_B5s_Bz_B1k_NCIB0_Bx_B5s_B1k_TB6x_Bbc_EE0NcNtBz_10Descendant0E0NCIB1M_Bx_Bpv_Bz_B1k_Bqv_NcNtBz_20ArrayIndexDescendant0E0EE0E0EEBF_:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_ccBA_NCINvNtNtB4_9character8complete4charBx_BA_E0B1z_E0NCINvB14_9delimitedBx_cccBA_B1z_B1z_B1z_E0EECsjsjhpdplWt_8rsonpath:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_cBB_B1m_NCIB2_Bz_cB1m_TNCINvNtB6_8sequence8precededBz_ccB1m_NCINvNtNtB6_9character8complete4charBz_B1m_E0B3c_E0NCINvB2G_9delimitedBz_cccB1m_B3c_B3c_B3c_E0EE0NCNvBD_23wildcard_child_selector0E0NCIB1O_Bz_NtBD_12MemberStringBB_B1m_NCIB2_Bz_B5u_B1m_TNCIB2E_Bz_cB5u_B1m_B3c_NCIB1O_Bz_Bz_B5u_B1m_NCINvB1Q_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1m_NCINvB2G_4pairBz_cB7i_B1m_NCINvB1Q_6verifyBz_ccB1m_INvB3h_7anycharBz_B1m_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1m_NCIB8p_Bz_ccB1m_B8L_NCNvBD_16member_character0E0E0E0E0NcNtB5u_8Borrowed0E0E0NCIB44_Bz_cB5u_cB1m_B3c_NCIB2_Bz_B5u_B1m_TNCIB44_Bz_cB5u_cB1m_B3c_NCIB1O_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7n_6string6StringEB5u_B1m_NCINvB1Q_3optBz_Bd4_B1m_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1m_NCIB1O_Bz_IB7j_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1m_NCINvB9B_5many1Bz_Bf3_B1m_NCIB2_Bz_Bf3_B1m_TNCIB1O_Bz_cBf3_B1m_NCIB8p_Bz_ccB1m_NCINvB3h_7none_ofBz_Bz_B1m_E0NCNvBD_9unescaped0E0NcNtBf3_4Char0E0NCIB1O_Bz_cBf3_B1m_B3c_NcNtBf3_7Escaped0E0EE0E0NcBfr_0E0NCIB2_Bz_Bz_B1m_TNCIB2_Bz_Bz_B1m_TNCINvB1Q_5valueBz_Bz_Bz_B1m_NCINvBe2_3tagBz_Bz_B1m_E0E0BjH_BjH_BjH_BjH_BjH_BjH_EE0BjH_EE0Bfr_Bz_cBd4_E0E0NvYB5u_INtNtBcx_7convert4FromBcs_E4fromE0B3c_E0NCIB44_Bz_cB5u_cB1m_B3c_NCIB1O_Bz_Bcs_B5u_B1m_NCIBdC_Bz_Bd4_B1m_NCIBe0_Bz_B1m_NCIB6X_Bz_B7i_B1m_NCIBfY_Bz_cB1m_NCIB2_Bz_cB1m_TBgW_B3c_EE0E0E0Bj9_Bz_Bz_cBd4_E0E0Blo_E0B3c_E0EE0B3c_E0EE0NcNtBB_5Child0E0NCIB1O_Bz_NtNtBF_23nonnegative_array_index21NonNegativeArrayIndexBB_B1m_NCIB44_Bz_cBpx_cB1m_B3c_NCINvB1Q_7map_resBz_yBpx_B1m_NtNtBF_5error15ArrayIndexErrorNCIBqY_Bz_Bz_yB1m_NtNtNtBcx_3num5error13ParseIntErrorNCIBqY_Bz_Bz_Bz_B1m_Bro_INvB3h_6digit1Bz_B1m_ENCNvBD_26length_limited_array_index0E0INvMNtBcx_3stre5parseyEE0NvYyINtBly_7TryIntoBpx_E8try_intoE0B3c_E0NcNtBB_15ArrayIndexChild0E0NCIB1O_Bz_cBB_B1m_NCIB2E_Bz_Bz_cB1m_Bk9_NCIB2_Bz_cB1m_TB3c_B41_EE0E0NCNvBD_28wildcard_descendant_selector0E0NCIB2E_Bz_Bz_BB_B1m_Bk9_NCIB2_Bz_BB_B1m_TNCIB1O_Bz_B5u_BB_B1m_NCIB2_Bz_B5u_B1m_TB6z_Bbe_EE0NcNtBB_10Descendant0E0NCIB1O_Bz_Bpx_BB_B1m_Bqx_NcNtBB_20ArrayIndexDescendant0E0EE0E0EE0BH_:
   50|  1.02k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_NtBB_12MemberStringBz_B1k_NCIB0_Bx_B2c_B1k_TNCIB1M_Bx_Bx_B2c_B1k_NCINvB1O_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1k_NCINvNtB4_8sequence4pairBx_cB3D_B1k_NCINvB1O_6verifyBx_ccB1k_INvNtNtB4_9character8complete7anycharBx_B1k_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1k_NCIB4U_Bx_ccB1k_B5g_NCNvBB_16member_character0E0E0E0E0NcNtB2c_8Borrowed0E0NCINvB4m_9delimitedBx_cB2c_cB1k_NCINvB5j_4charBx_B1k_E0NCIB0_Bx_B2c_B1k_TNCIB86_Bx_cB2c_cB1k_B8z_NCIB1M_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3I_6string6StringEB2c_B1k_NCINvB1O_3optBx_Bao_B1k_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1k_NCIB1M_Bx_IB3E_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1k_NCINvB6s_5many1Bx_Bcn_B1k_NCIB0_Bx_Bcn_B1k_TNCIB1M_Bx_cBcn_B1k_NCIB4U_Bx_ccB1k_NCINvB5j_7none_ofBx_Bx_B1k_E0NCNvBB_9unescaped0E0NcNtBcn_4Char0E0NCIB1M_Bx_cBcn_B1k_B8z_NcNtBcn_7Escaped0E0EE0E0NcBcL_0E0NCIB0_Bx_Bx_B1k_TNCIB0_Bx_Bx_B1k_TNCINvB1O_5valueBx_Bx_Bx_B1k_NCINvBbm_3tagBx_Bx_B1k_E0E0Bh1_Bh1_Bh1_Bh1_Bh1_Bh1_EE0Bh1_EE0BcL_Bx_cBao_E0E0NvYB2c_INtNtB9R_7convert4FromB9M_E4fromE0B8z_E0NCIB86_Bx_cB2c_cB1k_B8z_NCIB1M_Bx_B9M_B2c_B1k_NCIBaW_Bx_Bao_B1k_NCIBbk_Bx_B1k_NCIB3i_Bx_B3D_B1k_NCIBdi_Bx_cB1k_NCIB0_Bx_cB1k_TBeg_B8z_EE0E0E0Bgt_Bx_Bx_cBao_E0E0BiI_E0B8z_E0EE0B8z_E0EE0NcNtBz_10Descendant0E0NCIB1M_Bx_NtNtBD_23nonnegative_array_index21NonNegativeArrayIndexBz_B1k_NCIB86_Bx_cBmX_cB1k_B8z_NCINvB1O_7map_resBx_yBmX_B1k_NtNtBD_5error15ArrayIndexErrorNCIBoo_Bx_Bx_yB1k_NtNtNtB9R_3num5error13ParseIntErrorNCIBoo_Bx_Bx_Bx_B1k_BoO_INvB5j_6digit1Bx_B1k_ENCNvBB_26length_limited_array_index0E0INvMNtB9R_3stre5parseyEE0NvYyINtBiS_7TryIntoBmX_E8try_intoE0B8z_E0NcNtBz_20ArrayIndexDescendant0E0EEBF_:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtNtB4_9character8complete4charBx_BA_E0NCINvNtB4_8sequence9delimitedBx_cccBA_BZ_BZ_BZ_E0EECsjsjhpdplWt_8rsonpath:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_ccBC_NCINvNtNtB6_9character8complete4charBz_BC_E0B1B_E0NCINvB16_9delimitedBz_cccBC_B1B_B1B_B1B_E0EE0CsjsjhpdplWt_8rsonpath:
   50|  1.02k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator6verifyBx_ccBA_NCINvNtNtB4_9character8complete7none_ofBx_Bx_BA_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0E0NCINvB1F_4charBx_BA_E0EEB2w_:
   47|  1.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.02k|  mut l: List,
   49|  1.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_cBB_B1u_NCINvNtNtB6_9character8complete4charBz_B1u_E0NCINvNtB6_10combinator3mapBz_Bz_BB_B1u_NCINvB3k_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1u_NCINvB1Y_4pairBz_cB4g_B1u_NCINvB3k_6verifyBz_ccB1u_INvB2B_7anycharBz_B1u_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1u_NCIB5n_Bz_ccB1u_B5J_NCNvBD_16member_character0E0E0E0E0NcNtBB_8Borrowed0E0E0NCINvB1Y_9delimitedBz_cBB_cB1u_B2w_NCIB2_Bz_BB_B1u_TNCIB8e_Bz_cBB_cB1u_B2w_NCIB3i_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4l_6string6StringEBB_B1u_NCINvB3k_3optBz_Baa_B1u_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1u_NCIB3i_Bz_IB4h_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1u_NCINvB6z_5many1Bz_Bc8_B1u_NCIB2_Bz_Bc8_B1u_TNCIB3i_Bz_cBc8_B1u_NCIB5n_Bz_ccB1u_NCINvB2B_7none_ofBz_Bz_B1u_E0NCNvBD_9unescaped0E0NcNtBc8_4Char0E0NCIB3i_Bz_cBc8_B1u_B2w_NcNtBc8_7Escaped0E0EE0E0NcBcw_0E0NCIB2_Bz_Bz_B1u_TNCIB2_Bz_Bz_B1u_TNCINvB3k_5valueBz_Bz_Bz_B1u_NCINvBb7_3tagBz_Bz_B1u_E0E0BgM_BgM_BgM_BgM_BgM_BgM_EE0BgM_EE0Bcw_Bz_cBaa_E0E0NvYBB_INtNtB9D_7convert4FromB9y_E4fromE0B2w_E0NCIB8e_Bz_cBB_cB1u_B2w_NCIB3i_Bz_B9y_BB_B1u_NCIBaH_Bz_Baa_B1u_NCIBb5_Bz_B1u_NCIB3V_Bz_B4g_B1u_NCIBd3_Bz_cB1u_NCIB2_Bz_cB1u_TBe1_B2w_EE0E0E0Bge_Bz_Bz_cBaa_E0E0Bit_E0B2w_E0EE0B2w_E0EE0BH_:
   50|  1.02k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCIB0_Bx_Bx_BC_TNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B1h_B1h_B1h_B1h_B1h_B1h_EE0B1h_EECsjsjhpdplWt_8rsonpath:
   47|  2.05k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.05k|  mut l: List,
   49|  2.05k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.05k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B1U_E0NCINvNtB6_10combinator3mapBY_BY_B11_B1U_NCINvB36_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1U_NCINvBB_4pairBY_cB43_B1U_NCINvB36_6verifyBY_ccB1U_INvB2n_7anycharBY_B1U_ENCNvB13_12member_first0E0NCINvNtB6_5multi5many0BY_cB1U_NCIB59_BY_ccB1U_B5v_NCNvB13_16member_character0E0E0E0E0NcNtB11_8Borrowed0E0E0NCINvBB_9delimitedBY_cB11_cB1U_B2i_NCINvB4_3altBY_B11_B1U_TNCIB83_BY_cB11_cB1U_B2i_NCIB34_BY_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB48_6string6StringEB11_B1U_NCINvB36_3optBY_Ba7_B1U_NCINvNtNtB6_5bytes8complete17escaped_transformBY_B1U_NCIB34_BY_IB44_NtB13_16MaybeEscapedCharENtB13_19MaybeEscapedCharVecB1U_NCINvB6m_5many1BY_Bc6_B1U_NCIB8C_BY_Bc6_B1U_TNCIB34_BY_cBc6_B1U_NCIB59_BY_ccB1U_NCINvB2n_7none_ofBY_BY_B1U_E0NCNvB13_9unescaped0E0NcNtBc6_4Char0E0NCIB34_BY_cBc6_B1U_B2i_NcNtBc6_7Escaped0E0EE0E0NcBcv_0E0NCIB8C_BY_BY_B1U_TNCIB8C_BY_BY_B1U_TNCINvB36_5valueBY_BY_BY_B1U_NCINvBb5_3tagBY_BY_B1U_E0E0BgQ_BgQ_BgQ_BgQ_BgQ_BgQ_EE0BgQ_EE0Bcv_BY_cBa7_E0E0NvYB11_INtNtB9A_7convert4FromB9v_E4fromE0B2i_E0NCIB83_BY_cB11_cB1U_B2i_NCIB34_BY_B9v_B11_B1U_NCIBaF_BY_Ba7_B1U_NCIBb3_BY_B1U_NCIB3I_BY_B43_B1U_NCIBd3_BY_cB1U_NCIB8C_BY_cB1U_TBe2_B2i_EE0E0E0Bgg_BY_BY_cBa7_E0E0Bix_E0B2i_E0EE0B2i_E0EINtB4_3AltBY_B11_B1U_E6choiceB17_:
  134|  1.02k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.02k|        match self.0.parse(input.clone()) {
  136|  1.02k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.02k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence9delimitedBx_cBz_cB1s_NCINvNtNtB4_9character8complete4charBx_B1s_E0NCINvNtB4_10combinator3mapBx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBz_B1s_NCINvB3k_3optBx_B4k_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1s_NCIB3i_Bx_INtNtB4o_3vec3VecNtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1s_NCINvNtB4_5multi5many1Bx_B6K_B1s_NCIB0_Bx_B6K_B1s_TNCIB3i_Bx_cB6K_B1s_NCINvB3k_6verifyBx_ccB1s_NCINvB2B_7none_ofBx_Bx_B1s_E0NCNvBB_9unescaped0E0NcNtB6K_4Char0E0NCIB3i_Bx_cB6K_B1s_B2w_NcNtB6K_7Escaped0E0EE0E0NcB78_0E0NCIB0_Bx_Bx_B1s_TNCIB0_Bx_Bx_B1s_TNCINvB3k_5valueBx_Bx_Bx_B1s_NCINvB5x_3tagBx_Bx_B1s_E0E0BbE_BbE_BbE_BbE_BbE_BbE_EE0BbE_EE0B78_Bx_cB4k_E0E0NvYBz_INtNtB3N_7convert4FromB3I_E4fromE0B2w_E0NCIB1U_Bx_cBz_cB1s_B2w_NCIB3i_Bx_B3I_Bz_B1s_NCIB57_Bx_B4k_B1s_NCIB5v_Bx_B1s_NCINvB3k_9recognizeBx_IB6u_cEB1s_NCIB7F_Bx_cB1s_NCIB0_Bx_cB1s_TB8K_B2w_EE0E0E0Bb6_Bx_Bx_cB4k_E0E0Bdl_E0B2w_E0EEBF_:
   47|  1.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.02k|  mut l: List,
   49|  1.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1w_NCINvB20_6verifyBx_ccB1w_NCINvNtNtB4_9character8complete7none_ofBx_Bx_B1w_E0NCNvBB_9unescaped0E0NcNtBz_4Char0E0NCIB1Y_Bx_cBz_B1w_NCINvB30_4charBx_B1w_E0NcNtBz_7Escaped0E0EEBF_:
   47|  1.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.02k|  mut l: List,
   49|  1.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B11_B11_B11_B11_B11_B11_EECsjsjhpdplWt_8rsonpath:
   47|  2.05k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.05k|  mut l: List,
   49|  2.05k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.05k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_Bx_Bz_B1s_NCINvB1W_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1s_NCINvNtB4_8sequence4pairBx_cB2S_B1s_NCINvB1W_6verifyBx_ccB1s_INvNtNtB4_9character8complete7anycharBx_B1s_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1s_NCIB49_Bx_ccB1s_B4v_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0NCINvB3B_9delimitedBx_cBz_cB1s_NCINvB4y_4charBx_B1s_E0NCIB0_Bx_Bz_B1s_TNCIB7k_Bx_cBz_cB1s_B7M_NCIB1U_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB2X_6string6StringEBz_B1s_NCINvB1W_3optBx_B9z_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1s_NCIB1U_Bx_IB2T_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1s_NCINvB5H_5many1Bx_Bbx_B1s_NCIB0_Bx_Bbx_B1s_TNCIB1U_Bx_cBbx_B1s_NCIB49_Bx_ccB1s_NCINvB4y_7none_ofBx_Bx_B1s_E0NCNvBB_9unescaped0E0NcNtBbx_4Char0E0NCIB1U_Bx_cBbx_B1s_B7M_NcNtBbx_7Escaped0E0EE0E0NcBbV_0E0NCIB0_Bx_Bx_B1s_TNCIB0_Bx_Bx_B1s_TNCINvB1W_5valueBx_Bx_Bx_B1s_NCINvBaw_3tagBx_Bx_B1s_E0E0Bgb_Bgb_Bgb_Bgb_Bgb_Bgb_EE0Bgb_EE0BbV_Bx_cB9z_E0E0NvYBz_INtNtB92_7convert4FromB8X_E4fromE0B7M_E0NCIB7k_Bx_cBz_cB1s_B7M_NCIB1U_Bx_B8X_Bz_B1s_NCIBa6_Bx_B9z_B1s_NCIBau_Bx_B1s_NCIB2x_Bx_B2S_B1s_NCIBcs_Bx_cB1s_NCIB0_Bx_cB1s_TBdq_B7M_EE0E0E0BfD_Bx_Bx_cB9z_E0E0BhS_E0B7M_E0EE0B7M_E0EEBF_:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtNtB6_9character8complete4charReINtNtB6_5error5ErrorB16_EE0NCINvNtB6_8sequence9delimitedB16_cccB18_Bw_Bw_Bw_E0EINtB4_3AltB16_cB18_E6choiceCsjsjhpdplWt_8rsonpath:
  134|    514|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|    514|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    514|          res => res,
  138|       |        }
  139|    514|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_cBz_B1s_NCINvNtNtB4_9character8complete4charBx_B1s_E0NCINvNtB4_10combinator3mapBx_Bx_Bz_B1s_NCINvB3i_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1s_NCINvB1W_4pairBx_cB4e_B1s_NCINvB3i_6verifyBx_ccB1s_INvB2z_7anycharBx_B1s_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1s_NCIB5l_Bx_ccB1s_B5H_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0E0NCINvB1W_9delimitedBx_cBz_cB1s_B2u_NCIB0_Bx_Bz_B1s_TNCIB8c_Bx_cBz_cB1s_B2u_NCIB3g_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4j_6string6StringEBz_B1s_NCINvB3i_3optBx_Ba8_B1s_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1s_NCIB3g_Bx_IB4f_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1s_NCINvB6x_5many1Bx_Bc6_B1s_NCIB0_Bx_Bc6_B1s_TNCIB3g_Bx_cBc6_B1s_NCIB5l_Bx_ccB1s_NCINvB2z_7none_ofBx_Bx_B1s_E0NCNvBB_9unescaped0E0NcNtBc6_4Char0E0NCIB3g_Bx_cBc6_B1s_B2u_NcNtBc6_7Escaped0E0EE0E0NcBcu_0E0NCIB0_Bx_Bx_B1s_TNCIB0_Bx_Bx_B1s_TNCINvB3i_5valueBx_Bx_Bx_B1s_NCINvBb5_3tagBx_Bx_B1s_E0E0BgK_BgK_BgK_BgK_BgK_BgK_EE0BgK_EE0Bcu_Bx_cBa8_E0E0NvYBz_INtNtB9B_7convert4FromB9w_E4fromE0B2u_E0NCIB8c_Bx_cBz_cB1s_B2u_NCIB3g_Bx_B9w_Bz_B1s_NCIBaF_Bx_Ba8_B1s_NCIBb3_Bx_B1s_NCIB3T_Bx_B4e_B1s_NCIBd1_Bx_cB1s_NCIB0_Bx_cB1s_TBdZ_B2u_EE0E0E0Bgc_Bx_Bx_cBa8_E0E0Bir_E0B2u_E0EE0B2u_E0EEBF_:
   47|    514|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|    514|  mut l: List,
   49|    514|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|    514|}
_RNvXs2_NtCsijflsOnQTe0_3nom6branchTNCINvNtB7_10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBX_ENCINvB5_3altBX_cB1L_TNCINvNtB7_8sequence8precededBX_ccB1L_NCINvNtNtB7_9character8complete4charBX_B1L_E0B35_E0NCINvB2z_9delimitedBX_cccB1L_B35_B35_B35_E0EE0NCNvB12_23wildcard_child_selector0E0NCIBA_BX_NtB12_12MemberStringB10_B1L_NCIB2c_BX_B5n_B1L_TNCIB2x_BX_cB5n_B1L_B35_NCIBA_BX_BX_B5n_B1L_NCINvBC_9recognizeBX_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1L_NCINvB2z_4pairBX_cB7c_B1L_NCINvBC_6verifyBX_ccB1L_INvB3a_7anycharBX_B1L_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BX_cB1L_NCIB8j_BX_ccB1L_B8E_NCNvB12_16member_character0E0E0E0E0NcNtB5n_8Borrowed0E0E0NCIB3X_BX_cB5n_cB1L_B35_NCIB2c_BX_B5n_B1L_TNCIB3X_BX_cB5n_cB1L_B35_NCIBA_BX_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7h_6string6StringEB5n_B1L_NCINvBC_3optBX_BcZ_B1L_NCINvNtNtB7_5bytes8complete17escaped_transformBX_B1L_NCIBA_BX_IB7d_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB1L_NCINvB9v_5many1BX_BeW_B1L_NCIB2c_BX_BeW_B1L_TNCIBA_BX_cBeW_B1L_NCIB8j_BX_ccB1L_NCINvB3a_7none_ofBX_BX_B1L_E0NCNvB12_9unescaped0E0NcNtBeW_4Char0E0NCIBA_BX_cBeW_B1L_B35_NcNtBeW_7Escaped0E0EE0E0NcBfl_0E0NCIB2c_BX_BX_B1L_TNCIB2c_BX_BX_B1L_TNCINvBC_5valueBX_BX_BX_B1L_NCINvBdW_3tagBX_BX_B1L_E0E0BjE_BjE_BjE_BjE_BjE_BjE_EE0BjE_EE0Bfl_BX_cBcZ_E0E0NvYB5n_INtNtBcs_7convert4FromBcn_E4fromE0B35_E0NCIB3X_BX_cB5n_cB1L_B35_NCIBA_BX_Bcn_B5n_B1L_NCIBdx_BX_BcZ_B1L_NCIBdU_BX_B1L_NCIB6S_BX_B7c_B1L_NCIBfT_BX_cB1L_NCIB2c_BX_cB1L_TBgR_B35_EE0E0E0Bj4_BX_BX_cBcZ_E0E0Blk_E0B35_E0EE0B35_E0EE0NcNtB10_5Child0E0NCIBA_BX_NtNtB14_23nonnegative_array_index21NonNegativeArrayIndexB10_B1L_NCIB3X_BX_cBpt_cB1L_B35_NCINvBC_7map_resBX_yBpt_B1L_NtNtB14_5error15ArrayIndexErrorNCIBqW_BX_BX_yB1L_NtNtNtBcs_3num5error13ParseIntErrorNCIBqW_BX_BX_BX_B1L_Brl_INvB3a_6digit1BX_B1L_ENCNvB12_26length_limited_array_index0E0INvMNtBcs_3stre5parseyEE0NvYyINtBlu_7TryIntoBpt_E8try_intoE0B35_E0NcNtB10_15ArrayIndexChild0E0NCIBA_BX_cB10_B1L_NCIB2x_BX_BX_cB1L_Bk5_NCIB2c_BX_cB1L_TB35_B3U_EE0E0NCNvB12_28wildcard_descendant_selector0E0NCIB2x_BX_BX_B10_B1L_Bk5_NCIB2c_BX_B10_B1L_TNCIBA_BX_B5n_B10_B1L_NCIB2c_BX_B5n_B1L_TB6v_Bb9_EE0NcNtB10_10Descendant0E0NCIBA_BX_Bpt_B10_B1L_Bqv_NcNtB10_20ArrayIndexDescendant0E0EE0E0EINtB5_3AltBX_B10_B1L_E6choiceB16_:
  134|  1.02k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.02k|        match self.0.parse(input.clone()) {
  136|  1.02k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|  1.02k|      }

_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBJ_INtNtB8_5error5ErrorBJ_EE0CsjsjhpdplWt_8rsonpath:
   39|  1.54k|  move |i: Input| {
   40|  1.54k|    let tag_len = tag.input_len();
   41|  1.54k|    let t = tag.clone();
   42|  1.54k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|    514|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  1.02k|        let e: ErrorKind = ErrorKind::Tag;
   46|  1.02k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  1.54k|    res
   50|  1.54k|  }
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBH_INtNtB6_5error5ErrorBH_EECsjsjhpdplWt_8rsonpath:
   32|  17.4k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  17.4k|  tag: T,
   34|  17.4k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  17.4k|where
   36|  17.4k|  Input: InputTake + Compare<T>,
   37|  17.4k|  T: InputLength + Clone,
   38|  17.4k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  17.4k|}
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator9recognizeBW_INtNtCshJIxznpEM8j_5alloc3vec3VeccEBY_NCINvNtB6_5multi5many1BW_cBY_NCINvNtB6_6branch3altBW_cBY_TNCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0E0NCINvB3W_4charBW_BY_E0EE0E0E0NCIB33_BW_BW_BY_TNCIB33_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B6A_B6A_B6A_B6A_B6A_B6A_EE0B6A_EE0BW_BW_cNtNtB20_6string6StringEB4N_:
  623|  1.02k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  1.02k|  mut normal: F,
  625|  1.02k|  control_char: char,
  626|  1.02k|  mut transform: G,
  627|  1.02k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  1.02k|where
  629|  1.02k|  Input: Clone
  630|  1.02k|    + crate::traits::Offset
  631|  1.02k|    + InputLength
  632|  1.02k|    + InputTake
  633|  1.02k|    + InputTakeAtPosition
  634|  1.02k|    + Slice<RangeFrom<usize>>
  635|  1.02k|    + InputIter,
  636|  1.02k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  1.02k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  1.02k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  1.02k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  1.02k|  F: Parser<Input, O1, Error>,
  641|  1.02k|  G: Parser<Input, O2, Error>,
  642|  1.02k|  Error: ParseError<Input>,
  643|  1.02k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  1.02k|}
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator3mapBW_INtNtCshJIxznpEM8j_5alloc3vec3VecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharENtB2o_19MaybeEscapedCharVecBY_NCINvNtB6_5multi5many1BW_B2m_BY_NCINvNtB6_6branch3altBW_B2m_BY_TNCIB1p_BW_cB2m_BY_NCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvB2o_9unescaped0E0NcNtB2m_4Char0E0NCIB1p_BW_cB2m_BY_NCINvB5B_4charBW_BY_E0NcNtB2m_7Escaped0E0EE0E0NcB3k_0E0NCIB4n_BW_BW_BY_TNCIB4n_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B8E_B8E_B8E_B8E_B8E_B8E_EE0B8E_EE0B3k_BW_cNtNtB1U_6string6StringEB2s_:
  623|  1.02k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|  1.02k|  mut normal: F,
  625|  1.02k|  control_char: char,
  626|  1.02k|  mut transform: G,
  627|  1.02k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|  1.02k|where
  629|  1.02k|  Input: Clone
  630|  1.02k|    + crate::traits::Offset
  631|  1.02k|    + InputLength
  632|  1.02k|    + InputTake
  633|  1.02k|    + InputTakeAtPosition
  634|  1.02k|    + Slice<RangeFrom<usize>>
  635|  1.02k|    + InputIter,
  636|  1.02k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|  1.02k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|  1.02k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|  1.02k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|  1.02k|  F: Parser<Input, O1, Error>,
  641|  1.02k|  G: Parser<Input, O2, Error>,
  642|  1.02k|  Error: ParseError<Input>,
  643|  1.02k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|  1.02k|}

_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsjsjhpdplWt_8rsonpath:
   37|  4.11k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  4.11k|    let b = t.as_char() == c;
   39|  4.11k|    (&c, b)
   40|  4.11k|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsjsjhpdplWt_8rsonpath:
   32|  15.9k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  15.9k|where
   34|  15.9k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  15.9k|  <I as InputIter>::Item: AsChar,
   36|  15.9k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  15.9k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsjsjhpdplWt_8rsonpath:
   37|  6.68k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  6.68k|  }) {
   41|  2.05k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  4.62k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  6.68k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7none_ofReBP_INtNtB6_5error5ErrorBP_EECsjsjhpdplWt_8rsonpath:
  113|  2.05k|pub fn none_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
  114|  2.05k|where
  115|  2.05k|  I: Slice<RangeFrom<usize>> + InputIter,
  116|  2.05k|  <I as InputIter>::Item: AsChar + Copy,
  117|  2.05k|  T: FindToken<<I as InputIter>::Item>,
  118|  2.05k|{
  119|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {
  120|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
  121|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::NoneOf))),
  122|       |  }
  123|  2.05k|}
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7anycharReINtNtB6_5error5ErrorBP_EECsjsjhpdplWt_8rsonpath:
  309|    514|pub fn anychar<T, E: ParseError<T>>(input: T) -> IResult<T, char, E>
  310|    514|where
  311|    514|  T: InputIter + InputLength + Slice<RangeFrom<usize>>,
  312|    514|  <T as InputIter>::Item: AsChar,
  313|    514|{
  314|    514|  let mut it = input.iter_indices();
  315|    514|  match it.next() {
  316|      0|    None => Err(Err::Error(E::from_error_kind(input, ErrorKind::Eof))),
  317|    514|    Some((_, c)) => match it.next() {
  318|      0|      None => Ok((input.slice(input.input_len()..), c.as_char())),
  319|    514|      Some((idx, _)) => Ok((input.slice(idx..), c.as_char())),
  320|       |    },
  321|       |  }
  322|    514|}

_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvB4_3mapBE_cBG_B1r_NCINvNtNtB6_9character8complete4charBE_B1r_E0NCNvBI_8jsonpath0E0E0BM_:
  243|    514|  move |input: I| {
  244|    514|    let i = input.clone();
  245|    514|    match f.parse(input) {
  246|    514|      Ok((i, o)) => Ok((i, Some(o))),
  247|      0|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|    514|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB2i_NCINvNtNtB4_9character8complete4charBC_B2i_E0NCINvB2_7map_resBC_yBE_B2i_NtNtBI_5error15ArrayIndexErrorNCIB47_BC_BC_yB2i_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB47_BC_BC_BC_B2i_B4v_INvB3q_6digit1BC_B2i_ENCNvB20_26length_limited_array_index0E0INvMNtB5n_3stre5parseyEE0NvYyINtNtB5n_7convert7TryIntoBE_E8try_intoE0B3l_E0NcNtB1Y_20ArrayIndexDescendant0EBK_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB4_5error5ErrorBI_ENCINvNtB4_5multi5many1BI_cB1j_NCINvNtB4_6branch3altBI_cB1j_TNCINvB2_6verifyBI_ccB1j_NCINvNtNtB4_9character8complete7none_ofBI_BI_B1j_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0E0NCINvB38_4charBI_B1j_E0EE0E0EB40_:
  506|  1.02k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  1.02k|  mut parser: F,
  508|  1.02k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  1.02k|where
  510|  1.02k|  F: Parser<I, O, E>,
  511|  1.02k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator7map_resReBG_yINtNtB4_5error5ErrorBG_ENtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB0_BG_BG_BG_BM_NtNtNtCsjsjhpdplWt_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BG_BM_ENCNvNtB2k_6parser26length_limited_array_index0E0INvMNtB1g_3stre5parseyEEB2m_:
  104|  1.02k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.02k|  mut parser: F,
  106|  1.02k|  mut f: G,
  107|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.02k|where
  109|  1.02k|  F: Parser<I, O1, E>,
  110|  1.02k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.02k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete7none_ofBF_BF_BJ_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0EB23_:
  417|  2.05k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  2.05k|  mut first: F,
  419|  2.05k|  second: G,
  420|  2.05k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  2.05k|where
  422|  2.05k|  F: Parser<I, O1, E>,
  423|  2.05k|  G: Fn(&O2) -> bool,
  424|  2.05k|  O1: Borrow<O2>,
  425|  2.05k|  O2: ?Sized,
  426|  2.05k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  2.05k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBK_6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence9delimitedBE_cBG_cB2k_NCINvNtNtB6_9character8complete4charBE_B2k_E0NCINvB4_7map_resBE_yBG_B2k_NtNtBK_5error15ArrayIndexErrorNCIB49_BE_BE_yB2k_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB49_BE_BE_BE_B2k_B4x_INvB3s_6digit1BE_B2k_ENCNvB22_26length_limited_array_index0E0INvMNtB5p_3stre5parseyEE0NvYyINtNtB5p_7convert7TryIntoBG_E8try_intoE0B3n_E0NcNtB20_15ArrayIndexChild0E0BM_:
   78|  1.02k|  move |input: I| {
   79|  1.02k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.02k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_cB1s_TNCINvNtB6_8sequence8precededBE_ccB1s_NCINvNtNtB6_9character8complete4charBE_B1s_E0B2V_E0NCINvB2p_9delimitedBE_cccB1s_B2V_B2V_B2V_E0EE0NCNvBJ_23wildcard_child_selector0E0BN_:
   78|  1.02k|  move |input: I| {
   79|  1.02k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvB2_6verifyBC_ccB1C_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1C_E0NCNvBH_9unescaped0E0NcNtBF_4Char0EBL_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReBC_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1A_NCINvNtB4_8sequence4pairBC_cB2l_B1A_NCINvB2_6verifyBC_ccB1A_INvNtNtB4_9character8complete7anycharBC_B1A_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BC_cB1A_NCIB3C_BC_ccB1A_B3X_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0EBN_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringNtBI_5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_BG_B1K_TNCINvNtB6_8sequence8precededBE_cBG_B1K_NCINvNtNtB6_9character8complete4charBE_B1K_E0NCIB2_BE_BE_BG_B1K_NCINvB4_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1K_NCINvB2J_4pairBE_cB4G_B1K_NCINvB4_6verifyBE_ccB1K_INvB3m_7anycharBE_B1K_ENCNvBI_12member_first0E0NCINvNtB6_5multi5many0BE_cB1K_NCIB5N_BE_ccB1K_B68_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0E0E0NCINvB2J_9delimitedBE_cBG_cB1K_B3h_NCIB2b_BE_BG_B1K_TNCIB8D_BE_cBG_cB1K_B3h_NCIB2_BE_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4L_6string6StringEBG_B1K_NCINvB4_3optBE_Baz_B1K_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B1K_NCIB2_BE_IB4H_NtBI_16MaybeEscapedCharENtBI_19MaybeEscapedCharVecB1K_NCINvB6Y_5many1BE_Bcv_B1K_NCIB2b_BE_Bcv_B1K_TNCIB2_BE_cBcv_B1K_NCIB5N_BE_ccB1K_NCINvB3m_7none_ofBE_BE_B1K_E0NCNvBI_9unescaped0E0NcNtBcv_4Char0E0NCIB2_BE_cBcv_B1K_B3h_NcNtBcv_7Escaped0E0EE0E0NcBcT_0E0NCIB2b_BE_BE_B1K_TNCIB2b_BE_BE_B1K_TNCINvB4_5valueBE_BE_BE_B1K_NCINvBbv_3tagBE_BE_B1K_E0E0Bha_Bha_Bha_Bha_Bha_Bha_EE0Bha_EE0BcT_BE_cBaz_E0E0NvYBG_INtNtBa2_7convert4FromB9X_E4fromE0B3h_E0NCIB8D_BE_cBG_cB1K_B3h_NCIB2_BE_B9X_BG_B1K_NCIBb6_BE_Baz_B1K_NCIBbt_BE_B1K_NCIB4m_BE_B4G_B1K_NCIBdq_BE_cB1K_NCIB2b_BE_cB1K_TBeo_B3h_EE0E0E0BgA_BE_BE_cBaz_E0E0BiQ_E0B3h_E0EE0B3h_E0EE0NcNtB1z_5Child0E0BM_:
   78|  1.02k|  move |input: I| {
   79|  1.02k|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence8precededBC_BC_cB1q_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1q_E0NCINvNtB4_6branch3altBC_cB1q_TNCINvNtNtB4_9character8complete4charBC_B1q_E0NCINvB1T_9delimitedBC_cccB1q_B3C_B3C_B3C_E0EE0E0NCNvBH_28wildcard_descendant_selector0EBL_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_3mapBC_INtNtBI_3vec3VecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharENtB32_19MaybeEscapedCharVecB1g_NCINvNtB4_5multi5many1BC_B30_B1g_NCINvNtB4_6branch3altBC_B30_B1g_TNCIB2y_BC_cB30_B1g_NCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvB32_9unescaped0E0NcNtB30_4Char0E0NCIB2y_BC_cB30_B1g_NCINvB6j_4charBC_B1g_E0NcNtB30_7Escaped0E0EE0E0NcB3Y_0E0NCIB53_BC_BC_B1g_TNCIB53_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B9r_B9r_B9r_B9r_B9r_B9r_EE0B9r_EE0B3Y_BC_cBE_E0EB36_:
  239|  1.02k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.02k|where
  241|  1.02k|  F: Parser<I, O, E>,
  242|  1.02k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharENtB1d_19MaybeEscapedCharVecINtNtB4_5error5ErrorBC_ENCINvNtB4_5multi5many1BC_B1b_B2A_NCINvNtB4_6branch3altBC_B1b_B2A_TNCIB0_BC_cB1b_B2A_NCINvB2_6verifyBC_ccB2A_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2A_E0NCNvB1d_9unescaped0E0NcNtB1b_4Char0E0NCIB0_BC_cB1b_B2A_NCINvB4N_4charBC_B2A_E0NcNtB1b_7Escaped0E0EE0E0NcB29_0EB1h_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReBE_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBE_ENCINvB4_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1C_NCINvNtB6_8sequence4pairBE_cB2n_B1C_NCINvB4_6verifyBE_ccB1C_INvNtNtB6_9character8complete7anycharBE_B1C_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BE_cB1C_NCIB3E_BE_ccB1C_B3Z_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0BP_:
   78|    514|  move |input: I| {
   79|    514|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|    514|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1I_TNCIB0_BC_BC_BE_B1I_NCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1I_NCINvNtB4_8sequence4pairBC_cB3i_B1I_NCINvB2_6verifyBC_ccB1I_INvNtNtB4_9character8complete7anycharBC_B1I_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1I_NCIB4z_BC_ccB1I_B4U_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0NCINvB41_9delimitedBC_cBE_cB1I_NCINvB4X_4charBC_B1I_E0NCIB29_BC_BE_B1I_TNCIB7J_BC_cBE_cB1I_B8b_NCIB0_BC_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3n_6string6StringEBE_B1I_NCINvB2_3optBC_B9Y_B1I_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1I_NCIB0_BC_IB3j_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1I_NCINvB66_5many1BC_BbU_B1I_NCIB29_BC_BbU_B1I_TNCIB0_BC_cBbU_B1I_NCIB4z_BC_ccB1I_NCINvB4X_7none_ofBC_BC_B1I_E0NCNvBG_9unescaped0E0NcNtBbU_4Char0E0NCIB0_BC_cBbU_B1I_B8b_NcNtBbU_7Escaped0E0EE0E0NcBci_0E0NCIB29_BC_BC_B1I_TNCIB29_BC_BC_B1I_TNCINvB2_5valueBC_BC_BC_B1I_NCINvBaU_3tagBC_BC_B1I_E0E0Bgz_Bgz_Bgz_Bgz_Bgz_Bgz_EE0Bgz_EE0Bci_BC_cB9Y_E0E0NvYBE_INtNtB9r_7convert4FromB9m_E4fromE0B8b_E0NCIB7J_BC_cBE_cB1I_B8b_NCIB0_BC_B9m_BE_B1I_NCIBav_BC_B9Y_B1I_NCIBaS_BC_B1I_NCIB2Y_BC_B3i_B1I_NCIBcP_BC_cB1I_NCIB29_BC_cB1I_TBdN_B8b_EE0E0E0BfZ_BC_BC_cB9Y_E0E0Bif_E0B8b_E0EE0B8b_E0EE0NcNtB1x_10Descendant0EBK_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0EB1X_:
  417|  1.02k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  1.02k|  mut first: F,
  419|  1.02k|  second: G,
  420|  1.02k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  1.02k|where
  422|  1.02k|  F: Parser<I, O1, E>,
  423|  1.02k|  G: Fn(&O2) -> bool,
  424|  1.02k|  O1: Borrow<O2>,
  425|  1.02k|  O2: ?Sized,
  426|  1.02k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2M_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2M_NCIB0_BC_INtNtB1k_3vec3VecNtB1V_16MaybeEscapedCharENtB1V_19MaybeEscapedCharVecB2M_NCINvNtB4_5multi5many1BC_B4O_B2M_NCINvNtB4_6branch3altBC_B4O_B2M_TNCIB0_BC_cB4O_B2M_NCINvB2_6verifyBC_ccB2M_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2M_E0NCNvB1V_9unescaped0E0NcNtB4O_4Char0E0NCIB0_BC_cB4O_B2M_NCINvB7x_4charBC_B2M_E0NcNtB4O_7Escaped0E0EE0E0NcB5d_0E0NCIB6i_BC_BC_B2M_TNCIB6i_BC_BC_B2M_TNCINvB2_5valueBC_BC_BC_B2M_NCINvB3C_3tagBC_BC_B2M_E0E0BaE_BaE_BaE_BaE_BaE_BaE_EE0BaE_EE0B5d_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1Z_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator7map_resReyNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexINtNtB4_5error5ErrorBG_ENtNtBN_5error15ArrayIndexErrorNCIB0_BG_BG_yB23_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB0_BG_BG_BG_B23_B2r_INvNtNtB4_9character8complete6digit1BG_B23_ENCNvNtBN_6parser26length_limited_array_index0E0INvMNtB3i_3stre5parseyEE0NvYyINtNtB3i_7convert7TryIntoBJ_E8try_intoEBP_:
  104|  1.02k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.02k|  mut parser: F,
  106|  1.02k|  mut f: G,
  107|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.02k|where
  109|  1.02k|  F: Parser<I, O1, E>,
  110|  1.02k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.02k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1C_E0NcNtBF_7Escaped0EBL_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence8precededBE_BE_cB1s_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1s_E0NCINvNtB6_6branch3altBE_cB1s_TNCINvNtNtB6_9character8complete4charBE_B1s_E0NCINvB1V_9delimitedBE_cccB1s_B3E_B3E_B3E_E0EE0E0NCNvBJ_28wildcard_descendant_selector0E0BN_:
   78|  1.02k|  move |input: I| {
   79|  1.02k|    let (input, o1) = parser.parse(input)?;
   80|    514|    Ok((input, f(o1)))
   81|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2M_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2M_NCINvB2_9recognizeBC_INtNtB1k_3vec3VeccEB2M_NCINvNtB4_5multi5many1BC_cB2M_NCINvNtB4_6branch3altBC_cB2M_TNCINvB2_6verifyBC_ccB2M_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2M_E0NCNvB1V_9unescaped0E0NCINvB6x_4charBC_B2M_E0EE0E0E0NCIB5D_BC_BC_B2M_TNCIB5D_BC_BC_B2M_TNCINvB2_5valueBC_BC_BC_B2M_NCINvB3C_3tagBC_BC_B2M_E0E0B8G_B8G_B8G_B8G_B8G_B8G_EE0B8G_EE0BC_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1Z_:
   73|  1.02k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.02k|where
   75|  1.02k|  F: Parser<I, O1, E>,
   76|  1.02k|  G: FnMut(O1) -> O2,
   77|  1.02k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_9recognizeBC_INtNtBI_3vec3VeccEB1g_NCINvNtB4_5multi5many1BC_cB1g_NCINvNtB4_6branch3altBC_cB1g_TNCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0E0NCINvB4D_4charBC_B1g_E0EE0E0E0NCIB3J_BC_BC_B1g_TNCIB3J_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B7l_B7l_B7l_B7l_B7l_B7l_EE0B7l_EE0BC_BC_cBE_E0EB5v_:
  239|  1.02k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.02k|where
  241|  1.02k|  F: Parser<I, O, E>,
  242|  1.02k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB2i_NCINvNtNtB4_9character8complete4charBC_B2i_E0NCINvB2_7map_resBC_yBE_B2i_NtNtBI_5error15ArrayIndexErrorNCIB47_BC_BC_yB2i_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB47_BC_BC_BC_B2i_B4v_INvB3q_6digit1BC_B2i_ENCNvB20_26length_limited_array_index0E0INvMNtB5n_3stre5parseyEE0NvYyINtNtB5n_7convert7TryIntoBE_E8try_intoE0B3l_E0NcNtB1Y_15ArrayIndexChild0EBK_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser16member_character0EB1X_:
  417|  1.02k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|  1.02k|  mut first: F,
  419|  1.02k|  second: G,
  420|  1.02k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|  1.02k|where
  422|  1.02k|  F: Parser<I, O1, E>,
  423|  1.02k|  G: Fn(&O2) -> bool,
  424|  1.02k|  O1: Borrow<O2>,
  425|  1.02k|  O2: ?Sized,
  426|  1.02k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB6_5error5ErrorBK_ENCINvNtB6_8sequence4pairBK_cBO_B1o_NCINvB4_6verifyBK_ccB1o_INvNtNtB6_9character8complete7anycharBK_B1o_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BK_cB1o_NCIB2o_BK_ccB1o_B2J_NCNvB3w_16member_character0E0E0E0E0B3A_:
  512|    514|  move |input: I| {
  513|    514|    let i = input.clone();
  514|    514|    match parser.parse(i) {
  515|      0|      Ok((i, _)) => {
  516|      0|        let index = input.offset(&i);
  517|      0|        Ok((i, input.slice(..index)))
  518|       |      }
  519|    514|      Err(e) => Err(e),
  520|       |    }
  521|    514|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1q_E0NCNvBH_8jsonpath0EBL_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_cB1q_TNCINvNtB4_8sequence8precededBC_ccB1q_NCINvNtNtB4_9character8complete4charBC_B1q_E0B2T_E0NCINvB2n_9delimitedBC_cccB1q_B2T_B2T_B2T_E0EE0NCNvBH_23wildcard_child_selector0EBL_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBC_ENCINvB2_3mapBC_cBE_B1p_NCINvNtNtB4_9character8complete4charBC_B1p_E0NCNvBG_8jsonpath0E0EBK_:
  239|    514|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|    514|where
  241|    514|  F: Parser<I, O, E>,
  242|    514|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|    514|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB6_5error5ErrorBH_EINvNtNtB6_9character8complete7anycharBH_BL_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0B1Z_:
  427|    514|  move |input: I| {
  428|    514|    let i = input.clone();
  429|    514|    let (input, o) = first.parse(input)?;
  430|       |
  431|    514|    if second(o.borrow()) {
  432|      0|      Ok((input, o))
  433|       |    } else {
  434|    514|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|    514|  }
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB4_5error5ErrorBI_ENCINvNtB4_8sequence4pairBI_cBM_B1m_NCINvB2_6verifyBI_ccB1m_INvNtNtB4_9character8complete7anycharBI_B1m_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0BI_cB1m_NCIB2m_BI_ccB1m_B2H_NCNvB3u_16member_character0E0E0E0EB3y_:
  506|  1.02k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  1.02k|  mut parser: F,
  508|  1.02k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  1.02k|where
  510|  1.02k|  F: Parser<I, O, E>,
  511|  1.02k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1I_TNCINvNtB4_8sequence8precededBC_cBE_B1I_NCINvNtNtB4_9character8complete4charBC_B1I_E0NCIB0_BC_BC_BE_B1I_NCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1I_NCINvB2H_4pairBC_cB4E_B1I_NCINvB2_6verifyBC_ccB1I_INvB3k_7anycharBC_B1I_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1I_NCIB5L_BC_ccB1I_B66_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0E0NCINvB2H_9delimitedBC_cBE_cB1I_B3f_NCIB29_BC_BE_B1I_TNCIB8B_BC_cBE_cB1I_B3f_NCIB0_BC_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4J_6string6StringEBE_B1I_NCINvB2_3optBC_Bax_B1I_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1I_NCIB0_BC_IB4F_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1I_NCINvB6W_5many1BC_Bct_B1I_NCIB29_BC_Bct_B1I_TNCIB0_BC_cBct_B1I_NCIB5L_BC_ccB1I_NCINvB3k_7none_ofBC_BC_B1I_E0NCNvBG_9unescaped0E0NcNtBct_4Char0E0NCIB0_BC_cBct_B1I_B3f_NcNtBct_7Escaped0E0EE0E0NcBcR_0E0NCIB29_BC_BC_B1I_TNCIB29_BC_BC_B1I_TNCINvB2_5valueBC_BC_BC_B1I_NCINvBbt_3tagBC_BC_B1I_E0E0Bh8_Bh8_Bh8_Bh8_Bh8_Bh8_EE0Bh8_EE0BcR_BC_cBax_E0E0NvYBE_INtNtBa0_7convert4FromB9V_E4fromE0B3f_E0NCIB8B_BC_cBE_cB1I_B3f_NCIB0_BC_B9V_BE_B1I_NCIBb4_BC_Bax_B1I_NCIBbr_BC_B1I_NCIB4k_BC_B4E_B1I_NCIBdo_BC_cB1I_NCIB29_BC_cB1I_TBem_B3f_EE0E0E0Bgy_BC_BC_cBax_E0E0BiO_E0B3f_E0EE0B3f_E0EE0NcNtB1x_5Child0EBK_:
   73|    514|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|    514|where
   75|    514|  F: Parser<I, O1, E>,
   76|    514|  G: FnMut(O1) -> O2,
   77|    514|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|    514|}
_RINvNtCsijflsOnQTe0_3nom10combinator7map_resReBG_BG_INtNtB4_5error5ErrorBG_ENtNtNtCsjsjhpdplWt_8rsonpath5query5error15ArrayIndexErrorINvNtNtB4_9character8complete6digit1BG_BO_ENCNvNtB1g_6parser26length_limited_array_index0EB1i_:
  104|  1.02k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|  1.02k|  mut parser: F,
  106|  1.02k|  mut f: G,
  107|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|  1.02k|where
  109|  1.02k|  F: Parser<I, O1, E>,
  110|  1.02k|  G: FnMut(O1) -> Result<O2, E2>,
  111|  1.02k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom10combinator5valueReBE_BE_INtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BM_E0ECsjsjhpdplWt_8rsonpath:
  453|  16.4k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  16.4k|  val: O1,
  455|  16.4k|  mut parser: F,
  456|  16.4k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  16.4k|where
  458|  16.4k|  F: Parser<I, O2, E>,
  459|  16.4k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  16.4k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtNtB6_9character8complete4charBE_B1s_E0NCNvBJ_8jsonpath0E0BN_:
   78|    514|  move |input: I| {
   79|    514|    let (input, o1) = parser.parse(input)?;
   80|    514|    Ok((input, f(o1)))
   81|    514|  }

_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsjsjhpdplWt_8rsonpath:
   77|  2.57k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  2.57k|    other
   79|  2.57k|  }
_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E2orCsjsjhpdplWt_8rsonpath:
   32|  5.14k|  fn or(self, other: Self) -> Self {
   33|  5.14k|    other
   34|  5.14k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsjsjhpdplWt_8rsonpath:
   73|  6.16k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  6.16k|    Error { input, code: kind }
   75|  6.16k|  }
_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsjsjhpdplWt_8rsonpath:
   26|  4.62k|  fn from_char(input: I, _: char) -> Self {
   27|  4.62k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  4.62k|  }

_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B2p_E0NCINvNtB7_10combinator7map_resB11_yB14_B2p_NtNtB18_5error15ArrayIndexErrorNCIB3B_B11_B11_yB2p_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB3B_B11_B11_B11_B2p_B4f_INvB2T_6digit1B11_B2p_ENCNvNtB18_6parser26length_limited_array_index0E0INvMNtB5a_3stre5parseyEE0NvYyINtNtB5a_7convert7TryIntoB14_E8try_intoE0B2O_E0INtB5_6ParserB11_B14_B2p_E5parseB1a_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB11_EINvNtNtB7_9character8complete7anycharB11_B15_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0INtB5_6ParserB11_cB15_E5parseB2m_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB7_5error5ErrorBW_ENCINvNtB7_10combinator6verifyBW_ccB1y_INvNtNtB7_9character8complete7anycharBW_B1y_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0BW_cB1y_NCIB1Z_BW_ccB1y_B2y_NCNvB3l_16member_character0E0E0E0INtB5_6ParserBW_TcBZ_EB1y_E5parseB3p_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB7_5error5ErrorB14_ENCINvNtB7_8sequence4pairB14_cB18_B1I_NCINvBD_6verifyB14_ccB1I_INvNtNtB7_9character8complete7anycharB14_B1I_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB7_5multi5many0B14_cB1I_NCIB2L_B14_ccB1I_B37_NCNvB3V_16member_character0E0E0E0E0INtB5_6ParserB14_B14_B1I_E5parseB3Z_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReccINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B14_E0B1t_E0INtB5_6ParserB10_cB14_E5parseCsjsjhpdplWt_8rsonpath:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtNtB7_9character8complete4charBT_BW_E0NCINvNtB7_8sequence9delimitedBT_cccBW_B1l_B1l_B1l_E0EE0INtB5_6ParserBT_cBW_E5parseCsjsjhpdplWt_8rsonpath:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_cBV_B1G_NCIBB_BT_cB1G_TNCINvNtB7_8sequence8precededBT_ccB1G_NCINvNtNtB7_9character8complete4charBT_B1G_E0B3w_E0NCINvB30_9delimitedBT_cccB1G_B3w_B3w_B3w_E0EE0NCNvBX_23wildcard_child_selector0E0NCIB28_BT_NtBX_12MemberStringBV_B1G_NCIBB_BT_B5O_B1G_TNCIB2Y_BT_cB5O_B1G_B3w_NCIB28_BT_BT_B5O_B1G_NCINvB2a_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1G_NCINvB30_4pairBT_cB7C_B1G_NCINvB2a_6verifyBT_ccB1G_INvB3B_7anycharBT_B1G_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1G_NCIB8J_BT_ccB1G_B95_NCNvBX_16member_character0E0E0E0E0NcNtB5O_8Borrowed0E0E0NCIB4o_BT_cB5O_cB1G_B3w_NCIBB_BT_B5O_B1G_TNCIB4o_BT_cB5O_cB1G_B3w_NCIB28_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7H_6string6StringEB5O_B1G_NCINvB2a_3optBT_Bdo_B1G_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1G_NCIB28_BT_IB7D_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1G_NCINvB9V_5many1BT_Bfn_B1G_NCIBB_BT_Bfn_B1G_TNCIB28_BT_cBfn_B1G_NCIB8J_BT_ccB1G_NCINvB3B_7none_ofBT_BT_B1G_E0NCNvBX_9unescaped0E0NcNtBfn_4Char0E0NCIB28_BT_cBfn_B1G_B3w_NcNtBfn_7Escaped0E0EE0E0NcBfL_0E0NCIBB_BT_BT_B1G_TNCIBB_BT_BT_B1G_TNCINvB2a_5valueBT_BT_BT_B1G_NCINvBem_3tagBT_BT_B1G_E0E0Bk1_Bk1_Bk1_Bk1_Bk1_Bk1_EE0Bk1_EE0BfL_BT_cBdo_E0E0NvYB5O_INtNtBcR_7convert4FromBcM_E4fromE0B3w_E0NCIB4o_BT_cB5O_cB1G_B3w_NCIB28_BT_BcM_B5O_B1G_NCIBdW_BT_Bdo_B1G_NCIBek_BT_B1G_NCIB7h_BT_B7C_B1G_NCIBgi_BT_cB1G_NCIBB_BT_cB1G_TBhg_B3w_EE0E0E0Bjt_BT_BT_cBdo_E0E0BlI_E0B3w_E0EE0B3w_E0EE0NcNtBV_5Child0E0NCIB28_BT_NtNtBZ_23nonnegative_array_index21NonNegativeArrayIndexBV_B1G_NCIB4o_BT_cBpR_cB1G_B3w_NCINvB2a_7map_resBT_yBpR_B1G_NtNtBZ_5error15ArrayIndexErrorNCIBri_BT_BT_yB1G_NtNtNtBcR_3num5error13ParseIntErrorNCIBri_BT_BT_BT_B1G_BrI_INvB3B_6digit1BT_B1G_ENCNvBX_26length_limited_array_index0E0INvMNtBcR_3stre5parseyEE0NvYyINtBlS_7TryIntoBpR_E8try_intoE0B3w_E0NcNtBV_15ArrayIndexChild0E0NCIB28_BT_cBV_B1G_NCIB2Y_BT_BT_cB1G_Bkt_NCIBB_BT_cB1G_TB3w_B4l_EE0E0NCNvBX_28wildcard_descendant_selector0E0NCIB2Y_BT_BT_BV_B1G_Bkt_NCIBB_BT_BV_B1G_TNCIB28_BT_B5O_BV_B1G_NCIBB_BT_B5O_B1G_TB6T_Bby_EE0NcNtBV_10Descendant0E0NCIB28_BT_BpR_BV_B1G_BqR_NcNtBV_20ArrayIndexDescendant0E0EE0E0EE0INtB5_6ParserBT_BV_B1G_E5parseB11_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi5many0ReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBU_ENCINvNtB7_6branch3altBU_BW_B1H_TNCINvNtB7_10combinator3mapBU_cBW_B1H_NCIB28_BU_cB1H_TNCINvNtB7_8sequence8precededBU_ccB1H_NCINvNtNtB7_9character8complete4charBU_B1H_E0B43_E0NCINvB3x_9delimitedBU_cccB1H_B43_B43_B43_E0EE0NCNvBY_23wildcard_child_selector0E0NCIB2E_BU_NtBY_12MemberStringBW_B1H_NCIB28_BU_B6l_B1H_TNCIB3v_BU_cB6l_B1H_B43_NCIB2E_BU_BU_B6l_B1H_NCINvB2G_9recognizeBU_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1H_NCINvB3x_4pairBU_cB8a_B1H_NCINvB2G_6verifyBU_ccB1H_INvB48_7anycharBU_B1H_ENCNvBY_12member_first0E0NCIBB_BU_cB1H_NCIB9h_BU_ccB1H_B9D_NCNvBY_16member_character0E0E0E0E0NcNtB6l_8Borrowed0E0E0NCIB4V_BU_cB6l_cB1H_B43_NCIB28_BU_B6l_B1H_TNCIB4V_BU_cB6l_cB1H_B43_NCIB2E_BU_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB8f_6string6StringEB6l_B1H_NCINvB2G_3optBU_BdH_B1H_NCINvNtNtB7_5bytes8complete17escaped_transformBU_B1H_NCIB2E_BU_IB8b_NtBY_16MaybeEscapedCharENtBY_19MaybeEscapedCharVecB1H_NCINvBD_5many1BU_BfG_B1H_NCIB28_BU_BfG_B1H_TNCIB2E_BU_cBfG_B1H_NCIB9h_BU_ccB1H_NCINvB48_7none_ofBU_BU_B1H_E0NCNvBY_9unescaped0E0NcNtBfG_4Char0E0NCIB2E_BU_cBfG_B1H_B43_NcNtBfG_7Escaped0E0EE0E0NcBg4_0E0NCIB28_BU_BU_B1H_TNCIB28_BU_BU_B1H_TNCINvB2G_5valueBU_BU_BU_B1H_NCINvBeF_3tagBU_BU_B1H_E0E0Bkm_Bkm_Bkm_Bkm_Bkm_Bkm_EE0Bkm_EE0Bg4_BU_cBdH_E0E0NvYB6l_INtNtBda_7convert4FromBd5_E4fromE0B43_E0NCIB4V_BU_cB6l_cB1H_B43_NCIB2E_BU_Bd5_B6l_B1H_NCIBef_BU_BdH_B1H_NCIBeD_BU_B1H_NCIB7P_BU_B8a_B1H_NCIBgB_BU_cB1H_NCIB28_BU_cB1H_TBhz_B43_EE0E0E0BjM_BU_BU_cBdH_E0E0Bm3_E0B43_E0EE0B43_E0EE0NcNtBW_5Child0E0NCIB2E_BU_NtNtB10_23nonnegative_array_index21NonNegativeArrayIndexBW_B1H_NCIB4V_BU_cBqd_cB1H_B43_NCINvB2G_7map_resBU_yBqd_B1H_NtNtB10_5error15ArrayIndexErrorNCIBrF_BU_BU_yB1H_NtNtNtBda_3num5error13ParseIntErrorNCIBrF_BU_BU_BU_B1H_Bs5_INvB48_6digit1BU_B1H_ENCNvBY_26length_limited_array_index0E0INvMNtBda_3stre5parseyEE0NvYyINtBmd_7TryIntoBqd_E8try_intoE0B43_E0NcNtBW_15ArrayIndexChild0E0NCIB2E_BU_cBW_B1H_NCIB3v_BU_BU_cB1H_BkO_NCIB28_BU_cB1H_TB43_B4S_EE0E0NCNvBY_28wildcard_descendant_selector0E0NCIB3v_BU_BU_BW_B1H_BkO_NCIB28_BU_BW_B1H_TNCIB2E_BU_B6l_BW_B1H_NCIB28_BU_B6l_B1H_TB7r_BbQ_EE0NcNtBW_10Descendant0E0NCIB2E_BU_Bqd_BW_B1H_Bre_NcNtBW_20ArrayIndexDescendant0E0EE0E0EE0E0INtB5_6ParserBU_IB8b_BW_EB1H_E5parseB12_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvBD_3mapBY_cB10_B1L_NCINvNtNtB7_9character8complete4charBY_B1L_E0NCNvB12_8jsonpath0E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionB10_EB1L_E5parseB16_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringNtB12_5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_B10_B25_TNCINvNtB7_8sequence8precededBY_cB10_B25_NCINvNtNtB7_9character8complete4charBY_B25_E0NCIBB_BY_BY_B10_B25_NCINvBD_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB25_NCINvB35_4pairBY_cB54_B25_NCINvBD_6verifyBY_ccB25_INvB3J_7anycharBY_B25_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BY_cB25_NCIB6b_BY_ccB25_B6w_NCNvB12_16member_character0E0E0E0E0NcNtB10_8Borrowed0E0E0NCINvB35_9delimitedBY_cB10_cB25_B3E_NCIB2w_BY_B10_B25_TNCIB94_BY_cB10_cB25_B3E_NCIBB_BY_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB59_6string6StringEB10_B25_NCINvBD_3optBY_Bb3_B25_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B25_NCIBB_BY_IB55_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB25_NCINvB7n_5many1BY_Bd0_B25_NCIB2w_BY_Bd0_B25_TNCIBB_BY_cBd0_B25_NCIB6b_BY_ccB25_NCINvB3J_7none_ofBY_BY_B25_E0NCNvB12_9unescaped0E0NcNtBd0_4Char0E0NCIBB_BY_cBd0_B25_B3E_NcNtBd0_7Escaped0E0EE0E0NcBdp_0E0NCIB2w_BY_BY_B25_TNCIB2w_BY_BY_B25_TNCINvBD_5valueBY_BY_BY_B25_NCINvBc0_3tagBY_BY_B25_E0E0BhI_BhI_BhI_BhI_BhI_BhI_EE0BhI_EE0Bdp_BY_cBb3_E0E0NvYB10_INtNtBaw_7convert4FromBar_E4fromE0B3E_E0NCIB94_BY_cB10_cB25_B3E_NCIBB_BY_Bar_B10_B25_NCIBbB_BY_Bb3_B25_NCIBbY_BY_B25_NCIB4K_BY_B54_B25_NCIBdX_BY_cB25_NCIB2w_BY_cB25_TBeV_B3E_EE0E0E0Bh8_BY_BY_cBb3_E0E0Bjo_E0B3E_E0EE0B3E_E0EE0NcNtB1T_5Child0E0INtB5_6ParserBY_B1T_B25_E5parseB16_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_cINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B17_E0NCINvNtB7_6branch3altB10_cB17_TNCINvNtNtB7_9character8complete4charB10_B17_E0NCINvBD_9delimitedB10_cccB17_B2K_B2K_B2K_E0EE0E0INtB5_6ParserB10_cB17_E5parseCsjsjhpdplWt_8rsonpath:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtNtB7_9character8complete4charBY_B1M_E0NCNvB13_8jsonpath0E0INtB5_6ParserBY_B11_B1M_E5parseB17_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B1R_E0NCINvNtB7_6branch3altB10_B16_B1R_TNCINvNtB7_10combinator3mapB10_NtB18_12MemberStringB16_B1R_NCIB32_B10_B41_B1R_TNCIB3A_B10_B10_B41_B1R_NCINvB3C_9recognizeB10_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1R_NCINvBD_4pairB10_cB5z_B1R_NCINvB3C_6verifyB10_ccB1R_INvNtNtB7_9character8complete7anycharB10_B1R_ENCNvB18_12member_first0E0NCINvNtB7_5multi5many0B10_cB1R_NCIB6G_B10_ccB1R_B73_NCNvB18_16member_character0E0E0E0E0NcNtB41_8Borrowed0E0NCINvBD_9delimitedB10_cB41_cB1R_NCINvB76_4charB10_B1R_E0NCIB32_B10_B41_B1R_TNCIB9Y_B10_cB41_cB1R_Bar_NCIB3A_B10_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB5E_6string6StringEB41_B1R_NCINvB3C_3optB10_Bcl_B1R_NCINvB2l_17escaped_transformB10_B1R_NCIB3A_B10_IB5A_NtB18_16MaybeEscapedCharENtB18_19MaybeEscapedCharVecB1R_NCINvB8h_5many1B10_Be5_B1R_NCIB32_B10_Be5_B1R_TNCIB3A_B10_cBe5_B1R_NCIB6G_B10_ccB1R_NCINvB76_7none_ofB10_B10_B1R_E0NCNvB18_9unescaped0E0NcNtBe5_4Char0E0NCIB3A_B10_cBe5_B1R_Bar_NcNtBe5_7Escaped0E0EE0E0NcBeu_0E0NCIB32_B10_B10_B1R_TNCIB32_B10_B10_B1R_TNCINvB3C_5valueB10_B10_B10_B1R_B2g_E0Bj0_Bj0_Bj0_Bj0_Bj0_Bj0_EE0Bj0_EE0Beu_B10_cBcl_E0E0NvYB41_INtNtBbO_7convert4FromBbJ_E4fromE0Bar_E0NCIB9Y_B10_cB41_cB1R_Bar_NCIB3A_B10_BbJ_B41_B1R_NCIBcT_B10_Bcl_B1R_NCIBdi_B10_B1R_NCIB5d_B10_B5z_B1R_NCIBf2_B10_cB1R_NCIB32_B10_cB1R_TBg4_Bar_EE0E0E0Bim_B10_B10_cBcl_E0E0Bkq_E0Bar_E0EE0Bar_E0EE0NcNtB16_10Descendant0E0NCIB3A_B10_NtNtB1a_23nonnegative_array_index21NonNegativeArrayIndexB16_B1R_NCIB9Y_B10_cBoR_cB1R_Bar_NCINvB3C_7map_resB10_yBoR_B1R_NtNtB1a_5error15ArrayIndexErrorNCIBql_B10_B10_yB1R_NtNtNtBbO_3num5error13ParseIntErrorNCIBql_B10_B10_B10_B1R_BqM_INvB76_6digit1B10_B1R_ENCNvB18_26length_limited_array_index0E0INvMNtBbO_3stre5parseyEE0NvYyINtBkA_7TryIntoBoR_E8try_intoE0Bar_E0NcNtB16_20ArrayIndexDescendant0E0EE0E0INtB5_6ParserB10_B16_B1R_E5parseB1c_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_INtNtB7_5error5ErrorB13_EE0INtB5_6ParserB13_B13_B19_E5parseCsjsjhpdplWt_8rsonpath:
  324|  1.54k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.54k|    self(i)
  326|  1.54k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecccINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B16_E0B1v_B1v_E0INtB5_6ParserB11_cB16_E5parseCsjsjhpdplWt_8rsonpath:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete7anycharReINtNtB7_5error5ErrorB19_EEINtB5_6ParserB19_cB1b_E5parseCsjsjhpdplWt_8rsonpath:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_cB1M_TNCINvNtB7_8sequence8precededBY_ccB1M_NCINvNtNtB7_9character8complete4charBY_B1M_E0B3f_E0NCINvB2J_9delimitedBY_cccB1M_B3f_B3f_B3f_E0EE0NCNvB13_23wildcard_child_selector0E0INtB5_6ParserBY_B11_B1M_E5parseB17_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexNtNtB14_6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence9delimitedBY_cB10_cB2F_NCINvNtNtB7_9character8complete4charBY_B2F_E0NCINvBD_7map_resBY_yB10_B2F_NtNtB14_5error15ArrayIndexErrorNCIB4v_BY_BY_yB2F_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB4v_BY_BY_BY_B2F_B4U_INvB3O_6digit1BY_B2F_ENCNvB2m_26length_limited_array_index0E0INvMNtB5N_3stre5parseyEE0NvYyINtNtB5N_7convert7TryIntoB10_E8try_intoE0B3J_E0NcNtB2k_15ArrayIndexChild0E0INtB5_6ParserBY_B2k_B2F_E5parseB16_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_cBV_B1O_NCINvNtNtB7_9character8complete4charBT_B1O_E0NCINvNtB7_10combinator3mapBT_BT_BV_B1O_NCINvB3E_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1O_NCINvB2i_4pairBT_cB4A_B1O_NCINvB3E_6verifyBT_ccB1O_INvB2V_7anycharBT_B1O_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1O_NCIB5H_BT_ccB1O_B63_NCNvBX_16member_character0E0E0E0E0NcNtBV_8Borrowed0E0E0NCINvB2i_9delimitedBT_cBV_cB1O_B2Q_NCIBB_BT_BV_B1O_TNCIB8y_BT_cBV_cB1O_B2Q_NCIB3C_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4F_6string6StringEBV_B1O_NCINvB3E_3optBT_Bau_B1O_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1O_NCIB3C_BT_IB4B_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1O_NCINvB6T_5many1BT_Bcs_B1O_NCIBB_BT_Bcs_B1O_TNCIB3C_BT_cBcs_B1O_NCIB5H_BT_ccB1O_NCINvB2V_7none_ofBT_BT_B1O_E0NCNvBX_9unescaped0E0NcNtBcs_4Char0E0NCIB3C_BT_cBcs_B1O_B2Q_NcNtBcs_7Escaped0E0EE0E0NcBcQ_0E0NCIBB_BT_BT_B1O_TNCIBB_BT_BT_B1O_TNCINvB3E_5valueBT_BT_BT_B1O_NCINvBbr_3tagBT_BT_B1O_E0E0Bh6_Bh6_Bh6_Bh6_Bh6_Bh6_EE0Bh6_EE0BcQ_BT_cBau_E0E0NvYBV_INtNtB9X_7convert4FromB9S_E4fromE0B2Q_E0NCIB8y_BT_cBV_cB1O_B2Q_NCIB3C_BT_B9S_BV_B1O_NCIBb1_BT_Bau_B1O_NCIBbp_BT_B1O_NCIB4f_BT_B4A_B1O_NCIBdn_BT_cB1O_NCIBB_BT_cB1O_TBel_B2Q_EE0E0E0Bgy_BT_BT_cBau_E0E0BiN_E0B2Q_E0EE0B2Q_E0EE0INtB5_6ParserBT_BV_B1O_E5parseB11_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B1W_E0NCINvNtB7_10combinator3mapB10_B10_B13_B1W_NCINvB3a_9recognizeB10_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1W_NCINvBD_4pairB10_cB4a_B1W_NCINvB3a_6verifyB10_ccB1W_INvB2q_7anycharB10_B1W_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0B10_cB1W_NCIB5h_B10_ccB1W_B5E_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0E0INtB5_6ParserB10_B13_B1W_E5parseB19_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence8precededBY_BY_cB1M_NCINvNtNtB7_5bytes8complete3tagBY_BY_B1M_E0NCINvNtB7_6branch3altBY_cB1M_TNCINvNtNtB7_9character8complete4charBY_B1M_E0NCINvB2f_9delimitedBY_cccB1M_B3Y_B3Y_B3Y_E0EE0E0NCNvB13_28wildcard_descendant_selector0E0INtB5_6ParserBY_B11_B1M_E5parseB17_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReBY_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB7_5error5ErrorBY_ENCINvBD_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1W_NCINvNtB7_8sequence4pairBY_cB2H_B1W_NCINvBD_6verifyBY_ccB1W_INvNtNtB7_9character8complete7anycharBY_B1W_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0BY_cB1W_NCIB3Y_BY_ccB1W_B4j_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0INtB5_6ParserBY_B13_B1W_E5parseB19_:
  324|    514|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    514|    self(i)
  326|    514|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReTINtNtBA_6option6OptionNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1x_EEEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_B1a_B37_E6finishB1D_:
   36|    514|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|    514|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|    514|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1Y_E0NCINvNtB7_6branch3altB11_B14_B1Y_TNCIBB_B11_cB14_cB1Y_B2n_NCINvNtB7_10combinator3mapB11_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEB14_B1Y_NCINvB48_3optB11_B59_B1Y_NCINvNtNtB7_5bytes8complete17escaped_transformB11_B1Y_NCIB46_B11_INtNtB5d_3vec3VecNtB16_16MaybeEscapedCharENtB16_19MaybeEscapedCharVecB1Y_NCINvNtB7_5multi5many1B11_B7D_B1Y_NCIB3a_B11_B7D_B1Y_TNCIB46_B11_cB7D_B1Y_NCINvB48_6verifyB11_ccB1Y_NCINvB2s_7none_ofB11_B11_B1Y_E0NCNvB16_9unescaped0E0NcNtB7D_4Char0E0NCIB46_B11_cB7D_B1Y_B2n_NcNtB7D_7Escaped0E0EE0E0NcB82_0E0NCIB3a_B11_B11_B1Y_TNCIB3a_B11_B11_B1Y_TNCINvB48_5valueB11_B11_B11_B1Y_NCINvB6o_3tagB11_B11_B1Y_E0E0BcO_BcO_BcO_BcO_BcO_BcO_EE0BcO_EE0B82_B11_cB59_E0E0NvYB14_INtNtB4C_7convert4FromB4x_E4fromE0B2n_E0NCIBB_B11_cB14_cB1Y_B2n_NCIB46_B11_B4x_B14_B1Y_NCIB5X_B11_B59_B1Y_NCIB6m_B11_B1Y_NCINvB48_9recognizeB11_IB7n_cEB1Y_NCIB8A_B11_cB1Y_NCIB3a_B11_cB1Y_TB9J_B2n_EE0E0E0Bca_B11_B11_cB59_E0E0BeB_E0B2n_E0EE0B2n_E0INtB5_6ParserB11_B14_B1Y_E5parseB1a_:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_ccBW_NCINvNtNtB7_9character8complete4charBT_BW_E0B1V_E0NCINvB1q_9delimitedBT_cccBW_B1V_B1V_B1V_E0EE0INtB5_6ParserBT_cBW_E5parseCsjsjhpdplWt_8rsonpath:
  324|  1.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.02k|    self(i)
  326|  1.02k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete4charReINtNtB7_5error5ErrorB18_EE0INtB5_6ParserB18_cB1a_E5parseCsjsjhpdplWt_8rsonpath:
  324|  6.68k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.68k|    self(i)
  326|  6.68k|  }

_RINvNtCsijflsOnQTe0_3nom5multi5many0RecINtNtB4_5error5ErrorBy_ENCINvNtB4_10combinator6verifyBy_ccBB_INvNtNtB4_9character8complete7anycharBy_BB_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser16member_character0E0EB2q_:
   53|  1.02k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|  1.02k|where
   55|  1.02k|  I: Clone + InputLength,
   56|  1.02k|  F: Parser<I, O, E>,
   57|  1.02k|  E: ParseError<I>,
   58|  1.02k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom5multi5many1ReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser16MaybeEscapedCharINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1x_TNCINvNtB4_10combinator3mapBy_cBA_B1x_NCINvB2w_6verifyBy_ccB1x_NCINvNtNtB4_9character8complete7none_ofBy_By_B1x_E0NCNvBC_9unescaped0E0NcNtBA_4Char0E0NCIB2u_By_cBA_B1x_NCINvB3w_4charBy_B1x_E0NcNtBA_7Escaped0E0EE0EBG_:
  108|  1.02k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  1.02k|where
  110|  1.02k|  I: Clone + InputLength,
  111|  1.02k|  F: Parser<I, O, E>,
  112|  1.02k|  E: ParseError<I>,
  113|  1.02k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom5multi5many0ReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBA_ENCINvNtB6_6branch3altBA_BC_B1n_TNCINvNtB6_10combinator3mapBA_cBC_B1n_NCIB1O_BA_cB1n_TNCINvNtB6_8sequence8precededBA_ccB1n_NCINvNtNtB6_9character8complete4charBA_B1n_E0B3J_E0NCINvB3d_9delimitedBA_cccB1n_B3J_B3J_B3J_E0EE0NCNvBE_23wildcard_child_selector0E0NCIB2k_BA_NtBE_12MemberStringBC_B1n_NCIB1O_BA_B61_B1n_TNCIB3b_BA_cB61_B1n_B3J_NCIB2k_BA_BA_B61_B1n_NCINvB2m_9recognizeBA_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1n_NCINvB3d_4pairBA_cB7Q_B1n_NCINvB2m_6verifyBA_ccB1n_INvB3O_7anycharBA_B1n_ENCNvBE_12member_first0E0NCIB2_BA_cB1n_NCIB8X_BA_ccB1n_B9j_NCNvBE_16member_character0E0E0E0E0NcNtB61_8Borrowed0E0E0NCIB4B_BA_cB61_cB1n_B3J_NCIB1O_BA_B61_B1n_TNCIB4B_BA_cB61_cB1n_B3J_NCIB2k_BA_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7V_6string6StringEB61_B1n_NCINvB2m_3optBA_Bdn_B1n_NCINvNtNtB6_5bytes8complete17escaped_transformBA_B1n_NCIB2k_BA_IB7R_NtBE_16MaybeEscapedCharENtBE_19MaybeEscapedCharVecB1n_NCINvB4_5many1BA_Bfm_B1n_NCIB1O_BA_Bfm_B1n_TNCIB2k_BA_cBfm_B1n_NCIB8X_BA_ccB1n_NCINvB3O_7none_ofBA_BA_B1n_E0NCNvBE_9unescaped0E0NcNtBfm_4Char0E0NCIB2k_BA_cBfm_B1n_B3J_NcNtBfm_7Escaped0E0EE0E0NcBfK_0E0NCIB1O_BA_BA_B1n_TNCIB1O_BA_BA_B1n_TNCINvB2m_5valueBA_BA_BA_B1n_NCINvBel_3tagBA_BA_B1n_E0E0Bk2_Bk2_Bk2_Bk2_Bk2_Bk2_EE0Bk2_EE0BfK_BA_cBdn_E0E0NvYB61_INtNtBcQ_7convert4FromBcL_E4fromE0B3J_E0NCIB4B_BA_cB61_cB1n_B3J_NCIB2k_BA_BcL_B61_B1n_NCIBdV_BA_Bdn_B1n_NCIBej_BA_B1n_NCIB7v_BA_B7Q_B1n_NCIBgh_BA_cB1n_NCIB1O_BA_cB1n_TBhf_B3J_EE0E0E0Bjs_BA_BA_cBdn_E0E0BlJ_E0B3J_E0EE0B3J_E0EE0NcNtBC_5Child0E0NCIB2k_BA_NtNtBG_23nonnegative_array_index21NonNegativeArrayIndexBC_B1n_NCIB4B_BA_cBpT_cB1n_B3J_NCINvB2m_7map_resBA_yBpT_B1n_NtNtBG_5error15ArrayIndexErrorNCIBrk_BA_BA_yB1n_NtNtNtBcQ_3num5error13ParseIntErrorNCIBrk_BA_BA_BA_B1n_BrK_INvB3O_6digit1BA_B1n_ENCNvBE_26length_limited_array_index0E0INvMNtBcQ_3stre5parseyEE0NvYyINtBlT_7TryIntoBpT_E8try_intoE0B3J_E0NcNtBC_15ArrayIndexChild0E0NCIB2k_BA_cBC_B1n_NCIB3b_BA_BA_cB1n_Bku_NCIB1O_BA_cB1n_TB3J_B4y_EE0E0NCNvBE_28wildcard_descendant_selector0E0NCIB3b_BA_BA_BC_B1n_Bku_NCIB1O_BA_BC_B1n_TNCIB2k_BA_B61_BC_B1n_NCIB1O_BA_B61_B1n_TB77_Bbw_EE0NcNtBC_10Descendant0E0NCIB2k_BA_BpT_BC_B1n_BqT_NcNtBC_20ArrayIndexDescendant0E0EE0E0EE0E0BI_:
   59|    514|  move |mut i: I| {
   60|    514|    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|  1.02k|    loop {
   62|  1.02k|      let len = i.input_len();
   63|  1.02k|      match f.parse(i.clone()) {
   64|    514|        Err(Err::Error(_)) => return Ok((i, acc)),
   65|      0|        Err(e) => return Err(e),
   66|    514|        Ok((i1, o)) => {
   67|    514|          // infinite loop check: the parser must always consume
   68|    514|          if i1.input_len() == len {
   69|      0|            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|    514|          }
   71|    514|
   72|    514|          i = i1;
   73|    514|          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|    514|  }
_RINvNtCsijflsOnQTe0_3nom5multi5many1RecINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_cBB_TNCINvNtB4_10combinator6verifyBy_ccBB_NCINvNtNtB4_9character8complete7none_ofBy_By_BB_E0NCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescaped0E0NCINvB28_4charBy_BB_E0EE0EB2Z_:
  108|  1.02k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|  1.02k|where
  110|  1.02k|  I: Clone + InputLength,
  111|  1.02k|  F: Parser<I, O, E>,
  112|  1.02k|  E: ParseError<I>,
  113|  1.02k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom5multi5many0ReNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1l_TNCINvNtB4_10combinator3mapBy_cBA_B1l_NCIB1M_By_cB1l_TNCINvNtB4_8sequence8precededBy_ccB1l_NCINvNtNtB4_9character8complete4charBy_B1l_E0B3H_E0NCINvB3b_9delimitedBy_cccB1l_B3H_B3H_B3H_E0EE0NCNvBC_23wildcard_child_selector0E0NCIB2i_By_NtBC_12MemberStringBA_B1l_NCIB1M_By_B5Z_B1l_TNCIB39_By_cB5Z_B1l_B3H_NCIB2i_By_By_B5Z_B1l_NCINvB2k_9recognizeBy_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1l_NCINvB3b_4pairBy_cB7O_B1l_NCINvB2k_6verifyBy_ccB1l_INvB3M_7anycharBy_B1l_ENCNvBC_12member_first0E0NCIB0_By_cB1l_NCIB8V_By_ccB1l_B9h_NCNvBC_16member_character0E0E0E0E0NcNtB5Z_8Borrowed0E0E0NCIB4z_By_cB5Z_cB1l_B3H_NCIB1M_By_B5Z_B1l_TNCIB4z_By_cB5Z_cB1l_B3H_NCIB2i_By_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7T_6string6StringEB5Z_B1l_NCINvB2k_3optBy_Bdl_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBy_B1l_NCIB2i_By_IB7P_NtBC_16MaybeEscapedCharENtBC_19MaybeEscapedCharVecB1l_NCINvB2_5many1By_Bfk_B1l_NCIB1M_By_Bfk_B1l_TNCIB2i_By_cBfk_B1l_NCIB8V_By_ccB1l_NCINvB3M_7none_ofBy_By_B1l_E0NCNvBC_9unescaped0E0NcNtBfk_4Char0E0NCIB2i_By_cBfk_B1l_B3H_NcNtBfk_7Escaped0E0EE0E0NcBfI_0E0NCIB1M_By_By_B1l_TNCIB1M_By_By_B1l_TNCINvB2k_5valueBy_By_By_B1l_NCINvBej_3tagBy_By_B1l_E0E0Bk0_Bk0_Bk0_Bk0_Bk0_Bk0_EE0Bk0_EE0BfI_By_cBdl_E0E0NvYB5Z_INtNtBcO_7convert4FromBcJ_E4fromE0B3H_E0NCIB4z_By_cB5Z_cB1l_B3H_NCIB2i_By_BcJ_B5Z_B1l_NCIBdT_By_Bdl_B1l_NCIBeh_By_B1l_NCIB7t_By_B7O_B1l_NCIBgf_By_cB1l_NCIB1M_By_cB1l_TBhd_B3H_EE0E0E0Bjq_By_By_cBdl_E0E0BlH_E0B3H_E0EE0B3H_E0EE0NcNtBA_5Child0E0NCIB2i_By_NtNtBE_23nonnegative_array_index21NonNegativeArrayIndexBA_B1l_NCIB4z_By_cBpR_cB1l_B3H_NCINvB2k_7map_resBy_yBpR_B1l_NtNtBE_5error15ArrayIndexErrorNCIBri_By_By_yB1l_NtNtNtBcO_3num5error13ParseIntErrorNCIBri_By_By_By_B1l_BrI_INvB3M_6digit1By_B1l_ENCNvBC_26length_limited_array_index0E0INvMNtBcO_3stre5parseyEE0NvYyINtBlR_7TryIntoBpR_E8try_intoE0B3H_E0NcNtBA_15ArrayIndexChild0E0NCIB2i_By_cBA_B1l_NCIB39_By_By_cB1l_Bks_NCIB1M_By_cB1l_TB3H_B4w_EE0E0NCNvBC_28wildcard_descendant_selector0E0NCIB39_By_By_BA_B1l_Bks_NCIB1M_By_BA_B1l_TNCIB2i_By_B5Z_BA_B1l_NCIB1M_By_B5Z_B1l_TB75_Bbu_EE0NcNtBA_10Descendant0E0NCIB2i_By_BpR_BA_B1l_BqR_NcNtBA_20ArrayIndexDescendant0E0EE0E0EE0EBG_:
   53|    514|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|    514|where
   55|    514|  I: Clone + InputLength,
   56|    514|  F: Parser<I, O, E>,
   57|    514|  E: ParseError<I>,
   58|    514|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|    514|}

_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_cINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_BM_E0NCINvNtB6_6branch3altBG_cBM_TNCINvNtNtB6_9character8complete4charBG_BM_E0NCINvB4_9delimitedBG_cccBM_B2j_B2j_B2j_E0EE0E0CsjsjhpdplWt_8rsonpath:
   71|  1.02k|  move |input: I| {
   72|  1.02k|    let (input, _) = first.parse(input)?;
   73|    514|    second.parse(input)
   74|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B23_E0NCINvNtB4_10combinator7map_resBF_yBI_B23_NtNtBM_5error15ArrayIndexErrorNCIB3d_BF_BF_yB23_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB3d_BF_BF_BF_B23_B3P_INvB2w_6digit1BF_B23_ENCNvNtBM_6parser26length_limited_array_index0E0INvMNtB4H_3stre5parseyEE0NvYyINtNtB4H_7convert7TryIntoBI_E8try_intoE0B2r_EBO_:
  172|  1.02k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.02k|  mut first: F,
  174|  1.02k|  mut second: G,
  175|  1.02k|  mut third: H,
  176|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.02k|where
  178|  1.02k|  F: Parser<I, O1, E>,
  179|  1.02k|  G: Parser<I, O2, E>,
  180|  1.02k|  H: Parser<I, O3, E>,
  181|  1.02k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReccINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_BI_E0B16_ECsjsjhpdplWt_8rsonpath:
   63|    514|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    514|  mut first: F,
   65|    514|  mut second: G,
   66|    514|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    514|where
   68|    514|  F: Parser<I, O1, E>,
   69|    514|  G: Parser<I, O2, E>,
   70|    514|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    514|}
_RINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1e_EINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator3optBA_B1e_B2C_NCINvB35_3mapBA_cB1e_B2C_NCINvNtNtB4_9character8complete4charBA_B2C_E0NCNvB1g_8jsonpath0E0E0NCINvNtB4_5multi5many0BA_B1e_B2C_NCINvNtB4_6branch3altBA_B1e_B2C_TNCIB3E_BA_cB1e_B2C_NCIB5F_BA_cB2C_TNCINvB2_8precededBA_ccB2C_B40_B40_E0NCINvB2_9delimitedBA_cccB2C_B40_B40_B40_E0EE0NCNvB1g_23wildcard_child_selector0E0NCIB3E_BA_NtB1g_12MemberStringB1e_B2C_NCIB5F_BA_B8L_B2C_TNCIB6L_BA_cB8L_B2C_B40_NCIB3E_BA_BA_B8L_B2C_NCINvB35_9recognizeBA_TcIB21_cEEB2C_NCIB0_BA_cBaC_B2C_NCINvB35_6verifyBA_ccB2C_INvB45_7anycharBA_B2C_ENCNvB1g_12member_first0E0NCIB58_BA_cB2C_NCIBb9_BA_ccB2C_Bbv_NCNvB1g_16member_character0E0E0E0E0NcNtB8L_8Borrowed0E0E0NCIB7l_BA_cB8L_cB2C_B40_NCIB5F_BA_B8L_B2C_TNCIB7l_BA_cB8L_cB2C_B40_NCIB3E_BA_IBD_NtNtB25_6string6StringEB8L_B2C_NCIB33_BA_Bf4_B2C_NCINvNtNtB4_5bytes8complete17escaped_transformBA_B2C_NCIB3E_BA_IB21_NtB1g_16MaybeEscapedCharENtB1g_19MaybeEscapedCharVecB2C_NCINvB5a_5many1BA_BgX_B2C_NCIB5F_BA_BgX_B2C_TNCIB3E_BA_cBgX_B2C_NCIBb9_BA_ccB2C_NCINvB45_7none_ofBA_BA_B2C_E0NCNvB1g_9unescaped0E0NcNtBgX_4Char0E0NCIB3E_BA_cBgX_B2C_B40_NcNtBgX_7Escaped0E0EE0E0NcBhm_0E0NCIB5F_BA_BA_B2C_TNCIB5F_BA_BA_B2C_TNCINvB35_5valueBA_BA_BA_B2C_NCINvBfW_3tagBA_BA_B2C_E0E0BlH_BlH_BlH_BlH_BlH_BlH_EE0BlH_EE0Bhm_BA_cBf4_E0E0NvYB8L_INtNtBH_7convert4FromBf0_E4fromE0B40_E0NCIB7l_BA_cB8L_cB2C_B40_NCIB3E_BA_Bf0_B8L_B2C_NCIB33_BA_Bf4_B2C_NCIBfU_BA_B2C_NCIBah_BA_BaC_B2C_NCIBhU_BA_cB2C_NCIB5F_BA_cB2C_TBiT_B40_EE0E0E0Bl7_BA_BA_cBf4_E0E0Bno_E0B40_E0EE0B40_E0EE0NcNtB1e_5Child0E0NCIB3E_BA_NtNtB1i_23nonnegative_array_index21NonNegativeArrayIndexB1e_B2C_NCIB7l_BA_cBry_cB2C_B40_NCINvB35_7map_resBA_yBry_B2C_NtNtB1i_5error15ArrayIndexErrorNCIBt1_BA_BA_yB2C_NtNtNtBH_3num5error13ParseIntErrorNCIBt1_BA_BA_BA_B2C_Btr_INvB45_6digit1BA_B2C_ENCNvB1g_26length_limited_array_index0E0INvMNtBH_3stre5parseyEE0NvYyINtBny_7TryIntoBry_E8try_intoE0B40_E0NcNtB1e_15ArrayIndexChild0E0NCIB3E_BA_cB1e_B2C_NCIB6L_BA_BA_cB2C_Bm9_NCIB5F_BA_cB2C_TB40_B7i_EE0E0NCNvB1g_28wildcard_descendant_selector0E0NCIB6L_BA_BA_B1e_B2C_Bm9_NCIB5F_BA_B1e_B2C_TNCIB3E_BA_B8L_B1e_B2C_NCIB5F_BA_B8L_B2C_TB9T_BdL_EE0NcNtB1e_10Descendant0E0NCIB3E_BA_Bry_B1e_B2C_BsA_NcNtB1e_20ArrayIndexDescendant0E0EE0E0EE0E0EB1k_:
   29|    514|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|    514|  mut first: F,
   31|    514|  mut second: G,
   32|    514|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|    514|where
   34|    514|  F: Parser<I, O1, E>,
   35|    514|  G: Parser<I, O2, E>,
   36|    514|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|    514|}
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1i_EINtNtB8_5error5ErrorBE_ENCINvNtB8_10combinator3optBE_B1i_B2G_NCINvB39_3mapBE_cB1i_B2G_NCINvNtNtB8_9character8complete4charBE_B2G_E0NCNvB1k_8jsonpath0E0E0NCINvNtB8_5multi5many0BE_B1i_B2G_NCINvNtB8_6branch3altBE_B1i_B2G_TNCIB3I_BE_cB1i_B2G_NCIB5J_BE_cB2G_TNCINvB6_8precededBE_ccB2G_B44_B44_E0NCINvB6_9delimitedBE_cccB2G_B44_B44_B44_E0EE0NCNvB1k_23wildcard_child_selector0E0NCIB3I_BE_NtB1k_12MemberStringB1i_B2G_NCIB5J_BE_B8P_B2G_TNCIB6P_BE_cB8P_B2G_B44_NCIB3I_BE_BE_B8P_B2G_NCINvB39_9recognizeBE_TcIB25_cEEB2G_NCIB4_BE_cBaG_B2G_NCINvB39_6verifyBE_ccB2G_INvB49_7anycharBE_B2G_ENCNvB1k_12member_first0E0NCIB5c_BE_cB2G_NCIBbd_BE_ccB2G_Bbz_NCNvB1k_16member_character0E0E0E0E0NcNtB8P_8Borrowed0E0E0NCIB7p_BE_cB8P_cB2G_B44_NCIB5J_BE_B8P_B2G_TNCIB7p_BE_cB8P_cB2G_B44_NCIB3I_BE_IBH_NtNtB29_6string6StringEB8P_B2G_NCIB37_BE_Bf8_B2G_NCINvNtNtB8_5bytes8complete17escaped_transformBE_B2G_NCIB3I_BE_IB25_NtB1k_16MaybeEscapedCharENtB1k_19MaybeEscapedCharVecB2G_NCINvB5e_5many1BE_Bh1_B2G_NCIB5J_BE_Bh1_B2G_TNCIB3I_BE_cBh1_B2G_NCIBbd_BE_ccB2G_NCINvB49_7none_ofBE_BE_B2G_E0NCNvB1k_9unescaped0E0NcNtBh1_4Char0E0NCIB3I_BE_cBh1_B2G_B44_NcNtBh1_7Escaped0E0EE0E0NcBhq_0E0NCIB5J_BE_BE_B2G_TNCIB5J_BE_BE_B2G_TNCINvB39_5valueBE_BE_BE_B2G_NCINvBg0_3tagBE_BE_B2G_E0E0BlL_BlL_BlL_BlL_BlL_BlL_EE0BlL_EE0Bhq_BE_cBf8_E0E0NvYB8P_INtNtBL_7convert4FromBf4_E4fromE0B44_E0NCIB7p_BE_cB8P_cB2G_B44_NCIB3I_BE_Bf4_B8P_B2G_NCIB37_BE_Bf8_B2G_NCIBfY_BE_B2G_NCIBal_BE_BaG_B2G_NCIBhY_BE_cB2G_NCIB5J_BE_cB2G_TBiX_B44_EE0E0E0Blb_BE_BE_cBf8_E0E0Bns_E0B44_E0EE0B44_E0EE0NcNtB1i_5Child0E0NCIB3I_BE_NtNtB1m_23nonnegative_array_index21NonNegativeArrayIndexB1i_B2G_NCIB7p_BE_cBrC_cB2G_B44_NCINvB39_7map_resBE_yBrC_B2G_NtNtB1m_5error15ArrayIndexErrorNCIBt5_BE_BE_yB2G_NtNtNtBL_3num5error13ParseIntErrorNCIBt5_BE_BE_BE_B2G_Btv_INvB49_6digit1BE_B2G_ENCNvB1k_26length_limited_array_index0E0INvMNtBL_3stre5parseyEE0NvYyINtBnC_7TryIntoBrC_E8try_intoE0B44_E0NcNtB1i_15ArrayIndexChild0E0NCIB3I_BE_cB1i_B2G_NCIB6P_BE_BE_cB2G_Bmd_NCIB5J_BE_cB2G_TB44_B7m_EE0E0NCNvB1k_28wildcard_descendant_selector0E0NCIB6P_BE_BE_B1i_B2G_Bmd_NCIB5J_BE_B1i_B2G_TNCIB3I_BE_B8P_B1i_B2G_NCIB5J_BE_B8P_B2G_TB9X_BdP_EE0NcNtB1i_10Descendant0E0NCIB3I_BE_BrC_B1i_B2G_BsE_NcNtB1i_20ArrayIndexDescendant0E0EE0E0EE0E0E00B1o_:
   39|    514|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1A_E0NCINvNtB4_10combinator3mapBE_BE_BH_B1A_NCINvB2M_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1A_NCINvB2_4pairBE_cB3I_B1A_NCINvB2M_6verifyBE_ccB1A_INvB23_7anycharBE_B1A_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BE_cB1A_NCIB4O_BE_ccB1A_B5a_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0E0EBN_:
   63|    514|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    514|  mut first: F,
   65|    514|  mut second: G,
   66|    514|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    514|where
   68|    514|  F: Parser<I, O1, E>,
   69|    514|  G: Parser<I, O2, E>,
   70|    514|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    514|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReccINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_BK_E0B18_E0CsjsjhpdplWt_8rsonpath:
   71|  1.02k|  move |input: I| {
   72|  1.02k|    let (input, _) = first.parse(input)?;
   73|    514|    second.parse(input)
   74|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1C_E0NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1C_NCINvB2O_3optBF_B3O_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1C_NCINvB2O_9recognizeBF_INtNtB3S_3vec3VeccEB1C_NCINvNtB4_5multi5many1BF_cB1C_NCINvNtB4_6branch3altBF_cB1C_TNCINvB2O_6verifyBF_ccB1C_NCINvB25_7none_ofBF_BF_B1C_E0NCNvBK_9unescaped0E0B20_EE0E0E0NCIB73_BF_BF_B1C_TNCIB73_BF_BF_B1C_TNCINvB2O_5valueBF_BF_BF_B1C_NCINvB51_3tagBF_BF_B1C_E0E0B9r_B9r_B9r_B9r_B9r_B9r_EE0B9r_EE0BF_BF_cB3O_E0E0NvYBI_INtNtB3h_7convert4FromB3c_E4fromE0B20_EBO_:
  172|  1.02k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.02k|  mut first: F,
  174|  1.02k|  mut second: G,
  175|  1.02k|  mut third: H,
  176|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.02k|where
  178|  1.02k|  F: Parser<I, O1, E>,
  179|  1.02k|  G: Parser<I, O2, E>,
  180|  1.02k|  H: Parser<I, O3, E>,
  181|  1.02k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1C_E0NCINvNtB4_6branch3altBF_BI_B1C_TNCIB0_BF_cBI_cB1C_B20_NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1C_NCINvB3G_3optBF_B4G_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1C_NCIB3E_BF_INtNtB4K_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1C_NCINvNtB4_5multi5many1BF_B76_B1C_NCIB2M_BF_B76_B1C_TNCIB3E_BF_cB76_B1C_NCINvB3G_6verifyBF_ccB1C_NCINvB25_7none_ofBF_BF_B1C_E0NCNvBK_9unescaped0E0NcNtB76_4Char0E0NCIB3E_BF_cB76_B1C_B20_NcNtB76_7Escaped0E0EE0E0NcB7u_0E0NCIB2M_BF_BF_B1C_TNCIB2M_BF_BF_B1C_TNCINvB3G_5valueBF_BF_BF_B1C_NCINvB5T_3tagBF_BF_B1C_E0E0Bc3_Bc3_Bc3_Bc3_Bc3_Bc3_EE0Bc3_EE0B7u_BF_cB4G_E0E0NvYBI_INtNtB49_7convert4FromB44_E4fromE0B20_E0NCIB0_BF_cBI_cB1C_B20_NCIB3E_BF_B44_BI_B1C_NCIB5t_BF_B4G_B1C_NCIB5R_BF_B1C_NCINvB3G_9recognizeBF_IB6Q_cEB1C_NCIB81_BF_cB1C_NCIB2M_BF_cB1C_TB97_B20_EE0E0E0Bbt_BF_BF_cB4G_E0E0BdK_E0B20_E0EE0B20_EBO_:
  172|  1.02k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.02k|  mut first: F,
  174|  1.02k|  mut second: G,
  175|  1.02k|  mut third: H,
  176|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.02k|where
  178|  1.02k|  F: Parser<I, O1, E>,
  179|  1.02k|  G: Parser<I, O2, E>,
  180|  1.02k|  H: Parser<I, O3, E>,
  181|  1.02k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_cINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BK_E0NCINvNtB4_6branch3altBE_cBK_TNCINvNtNtB4_9character8complete4charBE_BK_E0NCINvB2_9delimitedBE_cccBK_B2h_B2h_B2h_E0EE0ECsjsjhpdplWt_8rsonpath:
   63|    514|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    514|  mut first: F,
   65|    514|  mut second: G,
   66|    514|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    514|where
   68|    514|  F: Parser<I, O1, E>,
   69|    514|  G: Parser<I, O2, E>,
   70|    514|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    514|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecccINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_BM_E0B1a_B1a_E0CsjsjhpdplWt_8rsonpath:
  182|  1.02k|  move |input: I| {
  183|  1.02k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.02k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_index21NonNegativeArrayIndexcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B25_E0NCINvNtB6_10combinator7map_resBH_yBK_B25_NtNtBO_5error15ArrayIndexErrorNCIB3f_BH_BH_yB25_NtNtNtCslATUeuPuGvJ_4core3num5error13ParseIntErrorNCIB3f_BH_BH_BH_B25_B3R_INvB2y_6digit1BH_B25_ENCNvNtBO_6parser26length_limited_array_index0E0INvMNtB4J_3stre5parseyEE0NvYyINtNtB4J_7convert7TryIntoBK_E8try_intoE0B2t_E0BQ_:
  182|  1.02k|  move |input: I| {
  183|  1.02k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_BK_E0B18_B18_ECsjsjhpdplWt_8rsonpath:
  172|  1.02k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.02k|  mut first: F,
  174|  1.02k|  mut second: G,
  175|  1.02k|  mut third: H,
  176|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.02k|where
  178|  1.02k|  F: Parser<I, O1, E>,
  179|  1.02k|  G: Parser<I, O2, E>,
  180|  1.02k|  H: Parser<I, O3, E>,
  181|  1.02k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator6verifyBC_ccB1e_INvNtNtB6_9character8complete7anycharBC_B1e_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB6_5multi5many0BC_cB1e_NCIB1F_BC_ccB1e_B2e_NCNvB31_16member_character0E0E0E0B35_:
   37|    514|  move |input: I| {
   38|    514|    let (input, o1) = first.parse(input)?;
   39|      0|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|    514|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1E_E0NCINvNtB6_6branch3altBH_BK_B1E_TNCIB2_BH_cBK_cB1E_B22_NCINvNtB6_10combinator3mapBH_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBK_B1E_NCINvB3I_3optBH_B4I_B1E_NCINvNtNtB6_5bytes8complete17escaped_transformBH_B1E_NCIB3G_BH_INtNtB4M_3vec3VecNtBM_16MaybeEscapedCharENtBM_19MaybeEscapedCharVecB1E_NCINvNtB6_5multi5many1BH_B78_B1E_NCIB2O_BH_B78_B1E_TNCIB3G_BH_cB78_B1E_NCINvB3I_6verifyBH_ccB1E_NCINvB27_7none_ofBH_BH_B1E_E0NCNvBM_9unescaped0E0NcNtB78_4Char0E0NCIB3G_BH_cB78_B1E_B22_NcNtB78_7Escaped0E0EE0E0NcB7w_0E0NCIB2O_BH_BH_B1E_TNCIB2O_BH_BH_B1E_TNCINvB3I_5valueBH_BH_BH_B1E_NCINvB5V_3tagBH_BH_B1E_E0E0Bc5_Bc5_Bc5_Bc5_Bc5_Bc5_EE0Bc5_EE0B7w_BH_cB4I_E0E0NvYBK_INtNtB4b_7convert4FromB46_E4fromE0B22_E0NCIB2_BH_cBK_cB1E_B22_NCIB3G_BH_B46_BK_B1E_NCIB5v_BH_B4I_B1E_NCIB5T_BH_B1E_NCINvB3I_9recognizeBH_IB6S_cEB1E_NCIB83_BH_cB1E_NCIB2O_BH_cB1E_TB99_B22_EE0E0E0Bbv_BH_BH_cB4I_E0E0BdM_E0B22_E0EE0B22_E0BQ_:
  182|  1.02k|  move |input: I| {
  183|  1.02k|    let (input, _) = first.parse(input)?;
  184|      0|    let (input, o2) = second.parse(input)?;
  185|      0|    third.parse(input).map(|(i, _)| (i, o2))
  186|  1.02k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_B1u_E0NCINvNtB4_6branch3altBE_BJ_B1u_TNCINvNtB4_10combinator3mapBE_NtBL_12MemberStringBJ_B1u_NCIB2C_BE_B3y_B1u_TNCIB38_BE_BE_B3y_B1u_NCINvB3a_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1u_NCINvB2_4pairBE_cB50_B1u_NCINvB3a_6verifyBE_ccB1u_INvNtNtB4_9character8complete7anycharBE_B1u_ENCNvBL_12member_first0E0NCINvNtB4_5multi5many0BE_cB1u_NCIB66_BE_ccB1u_B6s_NCNvBL_16member_character0E0E0E0E0NcNtB3y_8Borrowed0E0NCINvB2_9delimitedBE_cB3y_cB1u_NCINvB6v_4charBE_B1u_E0NCIB2C_BE_B3y_B1u_TNCIB9i_BE_cB3y_cB1u_B9K_NCIB38_BE_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB55_6string6StringEB3y_B1u_NCINvB3a_3optBE_BbA_B1u_NCINvB1X_17escaped_transformBE_B1u_NCIB38_BE_IB51_NtBL_16MaybeEscapedCharENtBL_19MaybeEscapedCharVecB1u_NCINvB7E_5many1BE_Bdh_B1u_NCIB2C_BE_Bdh_B1u_TNCIB38_BE_cBdh_B1u_NCIB66_BE_ccB1u_NCINvB6v_7none_ofBE_BE_B1u_E0NCNvBL_9unescaped0E0NcNtBdh_4Char0E0NCIB38_BE_cBdh_B1u_B9K_NcNtBdh_7Escaped0E0EE0E0NcBdF_0E0NCIB2C_BE_BE_B1u_TNCIB2C_BE_BE_B1u_TNCINvB3a_5valueBE_BE_BE_B1u_B1S_E0BhY_BhY_BhY_BhY_BhY_BhY_EE0BhY_EE0BdF_BE_cBbA_E0E0NvYB3y_INtNtBb3_7convert4FromBaY_E4fromE0B9K_E0NCIB9i_BE_cB3y_cB1u_B9K_NCIB38_BE_BaY_B3y_B1u_NCIBc8_BE_BbA_B1u_NCIBcw_BE_B1u_NCIB4F_BE_B50_B1u_NCIBec_BE_cB1u_NCIB2C_BE_cB1u_TBfb_B9K_EE0E0E0Bho_BE_BE_cBbA_E0E0Bjk_E0B9K_E0EE0B9K_E0EE0NcNtBJ_10Descendant0E0NCIB38_BE_NtNtBN_23nonnegative_array_index21NonNegativeArrayIndexBJ_B1u_NCIB9i_BE_cBnA_cB1u_B9K_NCINvB3a_7map_resBE_yBnA_B1u_NtNtBN_5error15ArrayIndexErrorNCIBp1_BE_BE_yB1u_NtNtNtBb3_3num5error13ParseIntErrorNCIBp1_BE_BE_BE_B1u_Bpr_INvB6v_6digit1BE_B1u_ENCNvBL_26length_limited_array_index0E0INvMNtBb3_3stre5parseyEE0NvYyINtBju_7TryIntoBnA_E8try_intoE0B9K_E0NcNtBJ_20ArrayIndexDescendant0E0EE0EBP_:
   63|    514|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|    514|  mut first: F,
   65|    514|  mut second: G,
   66|    514|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|    514|where
   68|    514|  F: Parser<I, O1, E>,
   69|    514|  G: Parser<I, O2, E>,
   70|    514|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|    514|}
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1C_E0NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1C_NCINvB2O_3optBF_B3O_B1C_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1C_NCIB2M_BF_INtNtB3S_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1C_NCINvNtB4_5multi5many1BF_B6e_B1C_NCINvNtB4_6branch3altBF_B6e_B1C_TNCIB2M_BF_cB6e_B1C_NCINvB2O_6verifyBF_ccB1C_NCINvB25_7none_ofBF_BF_B1C_E0NCNvBK_9unescaped0E0NcNtB6e_4Char0E0NCIB2M_BF_cB6e_B1C_B20_NcNtB6e_7Escaped0E0EE0E0NcB6C_0E0NCIB7G_BF_BF_B1C_TNCIB7G_BF_BF_B1C_TNCINvB2O_5valueBF_BF_BF_B1C_NCINvB51_3tagBF_BF_B1C_E0E0Bbp_Bbp_Bbp_Bbp_Bbp_Bbp_EE0Bbp_EE0B6C_BF_cB3O_E0E0NvYBI_INtNtB3h_7convert4FromB3c_E4fromE0B20_EBO_:
  172|  1.02k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|  1.02k|  mut first: F,
  174|  1.02k|  mut second: G,
  175|  1.02k|  mut third: H,
  176|  1.02k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|  1.02k|where
  178|  1.02k|  F: Parser<I, O1, E>,
  179|  1.02k|  G: Parser<I, O2, E>,
  180|  1.02k|  H: Parser<I, O3, E>,
  181|  1.02k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|  1.02k|}
_RINvNtCsijflsOnQTe0_3nom8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator6verifyBA_ccB1c_INvNtNtB4_9character8complete7anycharBA_B1c_ENCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0E0NCINvNtB4_5multi5many0BA_cB1c_NCIB1D_BA_ccB1c_B2c_NCNvB2Z_16member_character0E0E0EB33_:
   29|  1.02k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|  1.02k|  mut first: F,
   31|  1.02k|  mut second: G,
   32|  1.02k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|  1.02k|where
   34|  1.02k|  F: Parser<I, O1, E>,
   35|  1.02k|  G: Parser<I, O2, E>,
   36|  1.02k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|  1.02k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_NtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_B1w_E0NCINvNtB6_6branch3altBG_BL_B1w_TNCINvNtB6_10combinator3mapBG_NtBN_12MemberStringBL_B1w_NCIB2E_BG_B3A_B1w_TNCIB3a_BG_BG_B3A_B1w_NCINvB3c_9recognizeBG_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1w_NCINvB4_4pairBG_cB52_B1w_NCINvB3c_6verifyBG_ccB1w_INvNtNtB6_9character8complete7anycharBG_B1w_ENCNvBN_12member_first0E0NCINvNtB6_5multi5many0BG_cB1w_NCIB68_BG_ccB1w_B6u_NCNvBN_16member_character0E0E0E0E0NcNtB3A_8Borrowed0E0NCINvB4_9delimitedBG_cB3A_cB1w_NCINvB6x_4charBG_B1w_E0NCIB2E_BG_B3A_B1w_TNCIB9k_BG_cB3A_cB1w_B9M_NCIB3a_BG_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB57_6string6StringEB3A_B1w_NCINvB3c_3optBG_BbC_B1w_NCINvB1Z_17escaped_transformBG_B1w_NCIB3a_BG_IB53_NtBN_16MaybeEscapedCharENtBN_19MaybeEscapedCharVecB1w_NCINvB7G_5many1BG_Bdj_B1w_NCIB2E_BG_Bdj_B1w_TNCIB3a_BG_cBdj_B1w_NCIB68_BG_ccB1w_NCINvB6x_7none_ofBG_BG_B1w_E0NCNvBN_9unescaped0E0NcNtBdj_4Char0E0NCIB3a_BG_cBdj_B1w_B9M_NcNtBdj_7Escaped0E0EE0E0NcBdH_0E0NCIB2E_BG_BG_B1w_TNCIB2E_BG_BG_B1w_TNCINvB3c_5valueBG_BG_BG_B1w_B1U_E0Bi0_Bi0_Bi0_Bi0_Bi0_Bi0_EE0Bi0_EE0BdH_BG_cBbC_E0E0NvYB3A_INtNtBb5_7convert4FromBb0_E4fromE0B9M_E0NCIB9k_BG_cB3A_cB1w_B9M_NCIB3a_BG_Bb0_B3A_B1w_NCIBca_BG_BbC_B1w_NCIBcy_BG_B1w_NCIB4H_BG_B52_B1w_NCIBee_BG_cB1w_NCIB2E_BG_cB1w_TBfd_B9M_EE0E0E0Bhq_BG_BG_cBbC_E0E0Bjm_E0B9M_E0EE0B9M_E0EE0NcNtBL_10Descendant0E0NCIB3a_BG_NtNtBP_23nonnegative_array_index21NonNegativeArrayIndexBL_B1w_NCIB9k_BG_cBnC_cB1w_B9M_NCINvB3c_7map_resBG_yBnC_B1w_NtNtBP_5error15ArrayIndexErrorNCIBp3_BG_BG_yB1w_NtNtNtBb5_3num5error13ParseIntErrorNCIBp3_BG_BG_BG_B1w_Bpt_INvB6x_6digit1BG_B1w_ENCNvBN_26length_limited_array_index0E0INvMNtBb5_3stre5parseyEE0NvYyINtBjw_7TryIntoBnC_E8try_intoE0B9M_E0NcNtBL_20ArrayIndexDescendant0E0EE0E0BR_:
   71|    514|  move |input: I| {
   72|    514|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|    514|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtNtCsjsjhpdplWt_8rsonpath5query6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1g_EINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator3optBC_B1g_B2E_NCINvB37_3mapBC_cB1g_B2E_NCINvNtNtB6_9character8complete4charBC_B2E_E0NCNvB1i_8jsonpath0E0E0NCINvNtB6_5multi5many0BC_B1g_B2E_NCINvNtB6_6branch3altBC_B1g_B2E_TNCIB3G_BC_cB1g_B2E_NCIB5H_BC_cB2E_TNCINvB4_8precededBC_ccB2E_B42_B42_E0NCINvB4_9delimitedBC_cccB2E_B42_B42_B42_E0EE0NCNvB1i_23wildcard_child_selector0E0NCIB3G_BC_NtB1i_12MemberStringB1g_B2E_NCIB5H_BC_B8N_B2E_TNCIB6N_BC_cB8N_B2E_B42_NCIB3G_BC_BC_B8N_B2E_NCINvB37_9recognizeBC_TcIB23_cEEB2E_NCIB2_BC_cBaE_B2E_NCINvB37_6verifyBC_ccB2E_INvB47_7anycharBC_B2E_ENCNvB1i_12member_first0E0NCIB5a_BC_cB2E_NCIBbb_BC_ccB2E_Bbx_NCNvB1i_16member_character0E0E0E0E0NcNtB8N_8Borrowed0E0E0NCIB7n_BC_cB8N_cB2E_B42_NCIB5H_BC_B8N_B2E_TNCIB7n_BC_cB8N_cB2E_B42_NCIB3G_BC_IBF_NtNtB27_6string6StringEB8N_B2E_NCIB35_BC_Bf6_B2E_NCINvNtNtB6_5bytes8complete17escaped_transformBC_B2E_NCIB3G_BC_IB23_NtB1i_16MaybeEscapedCharENtB1i_19MaybeEscapedCharVecB2E_NCINvB5c_5many1BC_BgZ_B2E_NCIB5H_BC_BgZ_B2E_TNCIB3G_BC_cBgZ_B2E_NCIBbb_BC_ccB2E_NCINvB47_7none_ofBC_BC_B2E_E0NCNvB1i_9unescaped0E0NcNtBgZ_4Char0E0NCIB3G_BC_cBgZ_B2E_B42_NcNtBgZ_7Escaped0E0EE0E0NcBho_0E0NCIB5H_BC_BC_B2E_TNCIB5H_BC_BC_B2E_TNCINvB37_5valueBC_BC_BC_B2E_NCINvBfY_3tagBC_BC_B2E_E0E0BlJ_BlJ_BlJ_BlJ_BlJ_BlJ_EE0BlJ_EE0Bho_BC_cBf6_E0E0NvYB8N_INtNtBJ_7convert4FromBf2_E4fromE0B42_E0NCIB7n_BC_cB8N_cB2E_B42_NCIB3G_BC_Bf2_B8N_B2E_NCIB35_BC_Bf6_B2E_NCIBfW_BC_B2E_NCIBaj_BC_BaE_B2E_NCIBhW_BC_cB2E_NCIB5H_BC_cB2E_TBiV_B42_EE0E0E0Bl9_BC_BC_cBf6_E0E0Bnq_E0B42_E0EE0B42_E0EE0NcNtB1g_5Child0E0NCIB3G_BC_NtNtB1k_23nonnegative_array_index21NonNegativeArrayIndexB1g_B2E_NCIB7n_BC_cBrA_cB2E_B42_NCINvB37_7map_resBC_yBrA_B2E_NtNtB1k_5error15ArrayIndexErrorNCIBt3_BC_BC_yB2E_NtNtNtBJ_3num5error13ParseIntErrorNCIBt3_BC_BC_BC_B2E_Btt_INvB47_6digit1BC_B2E_ENCNvB1i_26length_limited_array_index0E0INvMNtBJ_3stre5parseyEE0NvYyINtBnA_7TryIntoBrA_E8try_intoE0B42_E0NcNtB1g_15ArrayIndexChild0E0NCIB3G_BC_cB1g_B2E_NCIB6N_BC_BC_cB2E_Bmb_NCIB5H_BC_cB2E_TB42_B7k_EE0E0NCNvB1i_28wildcard_descendant_selector0E0NCIB6N_BC_BC_B1g_B2E_Bmb_NCIB5H_BC_B1g_B2E_TNCIB3G_BC_B8N_B1g_B2E_NCIB5H_BC_B8N_B2E_TB9V_BdN_EE0NcNtB1g_10Descendant0E0NCIB3G_BC_BrA_B1g_B2E_BsC_NcNtB1g_20ArrayIndexDescendant0E0EE0E0EE0E0E0B1m_:
   37|    514|  move |input: I| {
   38|    514|    let (input, o1) = first.parse(input)?;
   39|    514|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|    514|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtNtCsjsjhpdplWt_8rsonpath5query6parser12MemberStringINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_B1C_E0NCINvNtB6_10combinator3mapBG_BG_BJ_B1C_NCINvB2O_9recognizeBG_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1C_NCINvB4_4pairBG_cB3K_B1C_NCINvB2O_6verifyBG_ccB1C_INvB25_7anycharBG_B1C_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BG_cB1C_NCIB4Q_BG_ccB1C_B5c_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0E0BP_:
   71|  1.02k|  move |input: I| {
   72|  1.02k|    let (input, _) = first.parse(input)?;
   73|    514|    second.parse(input)
   74|  1.02k|  }

_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter12iter_indicesCsjsjhpdplWt_8rsonpath:
  382|    514|  fn iter_indices(&self) -> Self::Iter {
  383|    514|    self.char_indices()
  384|    514|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar7as_charCsjsjhpdplWt_8rsonpath:
  241|  4.62k|  fn as_char(self) -> char {
  242|  4.62k|    self
  243|  4.62k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar3lenCsjsjhpdplWt_8rsonpath:
  296|  2.05k|  fn len(self) -> usize {
  297|  2.05k|    self.len_utf8()
  298|  2.05k|  }
_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter13iter_elementsCsjsjhpdplWt_8rsonpath:
  386|  6.68k|  fn iter_elements(&self) -> Self::IterElem {
  387|  6.68k|    self.chars()
  388|  6.68k|  }
_RNvXs5_NtCsijflsOnQTe0_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  1.54k|  fn as_bytes(&self) -> &[u8] {
   98|  1.54k|    (*self).as_bytes()
   99|  1.54k|  }
_RNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  1.54k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  1.54k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  1.54k|
  742|  1.54k|    match pos {
  743|      0|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  1.54k|        if self.len() >= t.len() {
  746|    514|          CompareResult::Ok
  747|       |        } else {
  748|  1.02k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  1.54k|  }
_RNCNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB7_7CompareBy_E7compare0CsjsjhpdplWt_8rsonpath:
  740|  1.02k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar7as_charCsjsjhpdplWt_8rsonpath:
  272|  2.05k|  fn as_char(self) -> char {
  273|  2.05k|    *self
  274|  2.05k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar8is_alphaCsjsjhpdplWt_8rsonpath:
  245|    514|  fn is_alpha(self) -> bool {
  246|    514|    self.is_ascii_alphabetic()
  247|    514|  }
_RNvXs_NtCsijflsOnQTe0_3nom6traitsReNtB4_11InputLength9input_lenCsjsjhpdplWt_8rsonpath:
   33|  3.08k|  fn input_len(&self) -> usize {
   34|  3.08k|    self.len()
   35|  3.08k|  }
_RNvXsn_NtCsijflsOnQTe0_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  1.54k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  1.54k|    self.as_bytes().compare(t.as_bytes())
  841|  1.54k|  }
_RNvXsg_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputTake10take_splitCsjsjhpdplWt_8rsonpath:
  424|    514|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|    514|    let (prefix, suffix) = self.split_at(count);
  426|    514|    (suffix, prefix)
  427|    514|  }
_RNvXs24_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|  2.57k|    fn slice(&self, range: $ty) -> Self {
 1014|  2.57k|      &self[range]
 1015|  2.57k|    }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   49|    514|    pub(crate) fn is_initialized(&self) -> bool {
   50|    514|        // An `Acquire` load is enough because that makes all the initialization
   51|    514|        // operations visible to us, and, this being a fast path, weaker
   52|    514|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    514|        // `SeqCst` operations on the slow path.
   54|    514|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    514|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  965|    514|        pub fn get(&self) -> Option<&T> {
  966|    514|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    514|                None
  971|       |            }
  972|    514|        }

_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E4pushCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1119|  9.18k|    pub fn push(&mut self, value: A::Item) {
 1120|  9.18k|        unsafe {
 1121|  9.18k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  9.18k|            if *len == cap {
 1123|     27|                self.reserve_one_unchecked();
 1124|     27|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|     27|                ptr = heap_ptr;
 1126|     27|                len = heap_len;
 1127|  9.16k|            }
 1128|  9.18k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  9.18k|            *len += 1;
 1130|  9.18k|        }
 1131|  9.18k|    }
_RNvXsp_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1I_5range9RangeFullE9index_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2041|    487|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|    487|        &mut (&mut **self)[index]
 2043|    487|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E9from_heapCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  668|     27|    fn from_heap(ptr: NonNull<A::Item>, len: usize) -> SmallVecData<A> {
  669|     27|        SmallVecData { heap: (ptr, len) }
  670|     27|    }
_RINvCs6kHoXNINp0J_8smallvec10infallibleuECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  322|     27|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|     27|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|     27|}
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullNtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFrameE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2447|  2.99k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  2.99k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  2.99k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E8heap_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  663|  1.75k|    unsafe fn heap_mut(&mut self) -> (NonNull<A::Item>, &mut usize) {
  664|  1.75k|        let h = &mut self.heap;
  665|  1.75k|        (h.0, &mut h.1)
  666|  1.75k|    }
_RNvXsf_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1851|  3.22k|    fn deref(&self) -> &[A::Item] {
 1852|  3.22k|        unsafe {
 1853|  3.22k|            let (ptr, len, _) = self.triple();
 1854|  3.22k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  3.22k|        }
 1856|  3.22k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E10triple_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  988|  12.9k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  12.9k|        unsafe {
  990|  12.9k|            if self.spilled() {
  991|  1.69k|                let (ptr, len_ptr) = self.data.heap_mut();
  992|  1.69k|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  11.2k|                (
  995|  11.2k|                    self.data.inline_mut(),
  996|  11.2k|                    &mut self.capacity,
  997|  11.2k|                    Self::inline_capacity(),
  998|  11.2k|                )
  999|       |            }
 1000|       |        }
 1001|  12.9k|    }
_RNvXsf_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1851|  32.9k|    fn deref(&self) -> &[A::Item] {
 1852|  32.9k|        unsafe {
 1853|  32.9k|            let (ptr, len, _) = self.triple();
 1854|  32.9k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  32.9k|        }
 1856|  32.9k|    }
_RNvXsp_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2b_5range9RangeFullE9index_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2041|  1.54k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.54k|        &mut (&mut **self)[index]
 2043|  1.54k|    }
_RNvXsg_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1861|    487|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|    487|        unsafe {
 1863|    487|            let (ptr, &mut len, _) = self.triple_mut();
 1864|    487|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|    487|        }
 1866|    487|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E4heapCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  659|    308|    unsafe fn heap(&self) -> (ConstNonNull<A::Item>, usize) {
  660|    308|        (ConstNonNull(self.heap.0), self.heap.1)
  661|    308|    }
_RNvXsX_Cs6kHoXNINp0J_8smallvecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2412|  70.6k|                fn size() -> usize { $size }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  988|  1.54k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  1.54k|        unsafe {
  990|  1.54k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  1.54k|                (
  995|  1.54k|                    self.data.inline_mut(),
  996|  1.54k|                    &mut self.capacity,
  997|  1.54k|                    Self::inline_capacity(),
  998|  1.54k|                )
  999|       |            }
 1000|       |        }
 1001|  1.54k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E8try_growCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1178|     27|    pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
 1179|     27|        unsafe {
 1180|     27|            let unspilled = !self.spilled();
 1181|     27|            let (ptr, &mut len, cap) = self.triple_mut();
 1182|     27|            assert!(new_cap >= len);
 1183|     27|            if new_cap <= Self::inline_capacity() {
 1184|      0|                if unspilled {
 1185|      0|                    return Ok(());
 1186|      0|                }
 1187|      0|                self.data = SmallVecData::from_inline(MaybeUninit::uninit());
 1188|      0|                ptr::copy_nonoverlapping(ptr.as_ptr(), self.data.inline_mut().as_ptr(), len);
 1189|      0|                self.capacity = len;
 1190|      0|                deallocate(ptr, cap);
 1191|     27|            } else if new_cap != cap {
 1192|     27|                let layout = layout_array::<A::Item>(new_cap)?;
 1193|     27|                debug_assert!(layout.size() > 0);
 1194|       |                let new_alloc;
 1195|     27|                if unspilled {
 1196|     27|                    new_alloc = NonNull::new(alloc::alloc::alloc(layout))
 1197|     27|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1198|     27|                        .cast();
 1199|     27|                    ptr::copy_nonoverlapping(ptr.as_ptr(), new_alloc.as_ptr(), len);
 1200|       |                } else {
 1201|       |                    // This should never fail since the same succeeded
 1202|       |                    // when previously allocating `ptr`.
 1203|      0|                    let old_layout = layout_array::<A::Item>(cap)?;
 1204|       |
 1205|      0|                    let new_ptr =
 1206|      0|                        alloc::alloc::realloc(ptr.as_ptr() as *mut u8, old_layout, layout.size());
 1207|      0|                    new_alloc = NonNull::new(new_ptr)
 1208|      0|                        .ok_or(CollectionAllocErr::AllocErr { layout })?
 1209|      0|                        .cast();
 1210|       |                }
 1211|     27|                self.data = SmallVecData::from_heap(new_alloc, len);
 1212|     27|                self.capacity = new_cap;
 1213|      0|            }
 1214|     27|            Ok(())
 1215|       |        }
 1216|     27|    }
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullTNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2451|  32.9k|    fn as_ptr(self) -> *const T {
 2452|  32.9k|        self.0.as_ptr()
 2453|  32.9k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E3lenCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  956|     54|    pub fn len(&self) -> usize {
  957|     54|        self.triple().1
  958|     54|    }
_RNvXsg_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1861|  1.54k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.54k|        unsafe {
 1863|  1.54k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.54k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.54k|        }
 1866|  1.54k|    }
_RNvXs1v_Cs6kHoXNINp0J_8smallvecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2412|  30.9k|                fn size() -> usize { $size }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E8capacityCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  968|     27|    pub fn capacity(&self) -> usize {
  969|     27|        self.triple().2
  970|     27|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  975|  32.9k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  32.9k|        unsafe {
  977|  32.9k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  32.9k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  32.9k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  641|  32.9k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  32.9k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  32.9k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E3popCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1135|  3.20k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  3.20k|        unsafe {
 1137|  3.20k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  3.20k|            let ptr: *const _ = ptr.as_ptr();
 1139|  3.20k|            if *len_ptr == 0 {
 1140|      0|                return None;
 1141|  3.20k|            }
 1142|  3.20k|            let last_index = *len_ptr - 1;
 1143|  3.20k|            *len_ptr = last_index;
 1144|  3.20k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  3.20k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E6tripleCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  975|  3.30k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  3.30k|        unsafe {
  977|  3.30k|            if self.spilled() {
  978|    308|                let (ptr, len) = self.data.heap();
  979|    308|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  2.99k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  3.30k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E10inline_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  645|  11.2k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  11.2k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  11.2k|    }
_RNvXsv_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2123|    514|    fn drop(&mut self) {
 2124|    514|        unsafe {
 2125|    514|            if self.spilled() {
 2126|     27|                let (ptr, &mut len) = self.data.heap_mut();
 2127|     27|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|    487|            } else {
 2129|    487|                ptr::drop_in_place(&mut self[..]);
 2130|    487|            }
 2131|       |        }
 2132|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E15inline_capacityCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  930|  30.9k|    fn inline_capacity() -> usize {
  931|  30.9k|        if mem::size_of::<A::Item>() > 0 {
  932|  30.9k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  30.9k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E6inlineCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  641|  2.99k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  2.99k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  2.99k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1005|  36.0k|    pub fn spilled(&self) -> bool {
 1006|  36.0k|        self.capacity > Self::inline_capacity()
 1007|  36.0k|    }
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullNtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFrameE6as_ptrCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2451|  3.22k|    fn as_ptr(self) -> *const T {
 2452|  3.22k|        self.0.as_ptr()
 2453|  3.22k|    }
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullTNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2447|  32.9k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  32.9k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  32.9k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  645|  1.54k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  1.54k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  1.54k|    }
_RINvCs6kHoXNINp0J_8smallvec12layout_arrayNtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFrameECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  332|     27|fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
  333|     27|    let size = mem::size_of::<T>()
  334|     27|        .checked_mul(n)
  335|     27|        .ok_or(CollectionAllocErr::CapacityOverflow)?;
  336|     27|    let align = mem::align_of::<T>();
  337|     27|    Layout::from_size_align(size, align).map_err(|_| CollectionAllocErr::CapacityOverflow)
  338|     27|}
_RNvXsv_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 2123|  1.54k|    fn drop(&mut self) {
 2124|  1.54k|        unsafe {
 2125|  1.54k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.54k|            } else {
 2129|  1.54k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.54k|            }
 2131|       |        }
 2132|  1.54k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  930|  70.6k|    fn inline_capacity() -> usize {
  931|  70.6k|        if mem::size_of::<A::Item>() > 0 {
  932|  70.6k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  70.6k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E7spilledCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1005|  16.7k|    pub fn spilled(&self) -> bool {
 1006|  16.7k|        self.capacity > Self::inline_capacity()
 1007|  16.7k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E21reserve_one_uncheckedCs346dUKc5pUh_20fuzz_arbitrary_bytes:
 1230|     27|    fn reserve_one_unchecked(&mut self) {
 1231|     27|        debug_assert_eq!(self.len(), self.capacity());
 1232|     27|        let new_cap = self.len()
 1233|     27|            .checked_add(1)
 1234|     27|            .and_then(usize::checked_next_power_of_two)
 1235|     27|            .expect("capacity overflow");
 1236|     27|        infallible(self.try_grow(new_cap))
 1237|     27|    }
_RNvXsu_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtCslATUeuPuGvJ_4core7default7Default7defaultBP_:
 2102|  1.02k|    fn default() -> SmallVec<A> {
 2103|  1.02k|        SmallVec::new()
 2104|  1.02k|    }
_RNvMsO_Cs6kHoXNINp0J_8smallvecNtB5_12SetLenOnDrop3getCsjsjhpdplWt_8rsonpath:
 2351|  1.02k|    fn get(&self) -> usize {
 2352|  1.02k|        self.local_len
 2353|  1.02k|    }
_RNvXsg_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBP_:
 1861|  1.02k|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|  1.02k|        unsafe {
 1863|  1.02k|            let (ptr, &mut len, _) = self.triple_mut();
 1864|  1.02k|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|  1.02k|        }
 1866|  1.02k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E10inline_mutBU_:
  645|  3.08k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  3.08k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  3.08k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E10triple_mutBQ_:
  988|  3.08k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  3.08k|        unsafe {
  990|  3.08k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  3.08k|                (
  995|  3.08k|                    self.data.inline_mut(),
  996|  3.08k|                    &mut self.capacity,
  997|  3.08k|                    Self::inline_capacity(),
  998|  3.08k|                )
  999|       |            }
 1000|       |        }
 1001|  3.08k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E11from_inlineBU_:
  649|  2.57k|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|  2.57k|        SmallVecData {
  651|  2.57k|            inline: core::mem::ManuallyDrop::new(inline),
  652|  2.57k|        }
  653|  2.57k|    }
_RINvXsr_Cs6kHoXNINp0J_8smallvecINtB6_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorNtYBI_NtB6_5Array4ItemE9from_iterINtNtNtB2e_8adapters3map3MapINtCs8kGtPTKPY3N_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5l_9Minimizer18process_superstate0EEBQ_:
 2058|  1.02k|    fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
 2059|  1.02k|        let mut v = SmallVec::new();
 2060|  1.02k|        v.extend(iterable);
 2061|  1.02k|        v
 2062|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E7spilledBQ_:
 1005|  3.59k|    pub fn spilled(&self) -> bool {
 1006|  3.59k|        self.capacity > Self::inline_capacity()
 1007|  3.59k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E6tripleBP_:
  975|  1.02k|    fn triple(&self) -> (ConstNonNull<A::Item>, usize, usize) {
  976|  1.02k|        unsafe {
  977|  1.02k|            if self.spilled() {
  978|      0|                let (ptr, len) = self.data.heap();
  979|      0|                (ptr, len, self.capacity)
  980|       |            } else {
  981|  1.02k|                (self.data.inline(), self.capacity, Self::inline_capacity())
  982|       |            }
  983|       |        }
  984|  1.02k|    }
_RNvXsv_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBQ_:
 2123|    514|    fn drop(&mut self) {
 2124|    514|        unsafe {
 2125|    514|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|    514|            } else {
 2129|    514|                ptr::drop_in_place(&mut self[..]);
 2130|    514|            }
 2131|       |        }
 2132|    514|    }
_RNvXsf_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefBP_:
 1851|  1.02k|    fn deref(&self) -> &[A::Item] {
 1852|  1.02k|        unsafe {
 1853|  1.02k|            let (ptr, len, _) = self.triple();
 1854|  1.02k|            slice::from_raw_parts(ptr.as_ptr(), len)
 1855|  1.02k|        }
 1856|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11try_reserveBP_:
 1242|  1.02k|    pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
 1243|  1.02k|        // prefer triple_mut() even if triple() would work so that the optimizer removes duplicated
 1244|  1.02k|        // calls to it from callers.
 1245|  1.02k|        let (_, &mut len, cap) = self.triple_mut();
 1246|  1.02k|        if cap - len >= additional {
 1247|  1.02k|            return Ok(());
 1248|      0|        }
 1249|      0|        let new_cap = len
 1250|      0|            .checked_add(additional)
 1251|      0|            .and_then(usize::checked_next_power_of_two)
 1252|      0|            .ok_or(CollectionAllocErr::CapacityOverflow)?;
 1253|      0|        self.try_grow(new_cap)
 1254|  1.02k|    }
_RNvXsp_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB1Y_5range9RangeFullE9index_mutBQ_:
 2041|    514|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|    514|        &mut (&mut **self)[index]
 2043|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E11inline_sizeBP_:
  950|    514|    pub fn inline_size(&self) -> usize {
  951|    514|        Self::inline_capacity()
  952|    514|    }
_RINvCs6kHoXNINp0J_8smallvec10infallibleuECsjsjhpdplWt_8rsonpath:
  322|  1.02k|fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  323|      0|    match result {
  324|  1.02k|        Ok(x) => x,
  325|      0|        Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
  326|      0|        Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
  327|       |    }
  328|  1.02k|}
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E10inline_mutBV_:
  645|  3.08k|    unsafe fn inline_mut(&mut self) -> NonNull<A::Item> {
  646|  3.08k|        NonNull::new(self.inline.as_mut_ptr() as *mut A::Item).unwrap()
  647|  3.08k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E10triple_mutBP_:
  988|  3.08k|    fn triple_mut(&mut self) -> (NonNull<A::Item>, &mut usize, usize) {
  989|  3.08k|        unsafe {
  990|  3.08k|            if self.spilled() {
  991|      0|                let (ptr, len_ptr) = self.data.heap_mut();
  992|      0|                (ptr, len_ptr, self.capacity)
  993|       |            } else {
  994|  3.08k|                (
  995|  3.08k|                    self.data.inline_mut(),
  996|  3.08k|                    &mut self.capacity,
  997|  3.08k|                    Self::inline_capacity(),
  998|  3.08k|                )
  999|       |            }
 1000|       |        }
 1001|  3.08k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E11from_inlineBT_:
  649|    514|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|    514|        SmallVecData {
  651|    514|            inline: core::mem::ManuallyDrop::new(inline),
  652|    514|        }
  653|    514|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E11from_inlineBV_:
  649|    514|    fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
  650|    514|        SmallVecData {
  651|    514|            inline: core::mem::ManuallyDrop::new(inline),
  652|    514|        }
  653|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E15inline_capacityBO_:
  930|    514|    fn inline_capacity() -> usize {
  931|    514|        if mem::size_of::<A::Item>() > 0 {
  932|    514|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E15inline_capacityBQ_:
  930|  7.19k|    fn inline_capacity() -> usize {
  931|  7.19k|        if mem::size_of::<A::Item>() > 0 {
  932|  7.19k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  7.19k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E11inline_sizeBO_:
  950|    514|    pub fn inline_size(&self) -> usize {
  951|    514|        Self::inline_capacity()
  952|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E11inline_sizeBQ_:
  950|    514|    pub fn inline_size(&self) -> usize {
  951|    514|        Self::inline_capacity()
  952|    514|    }
_RINvXss_Cs6kHoXNINp0J_8smallvecINtB6_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBM_5state5StateEj2_EINtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect6ExtendNtYBI_NtB6_5Array4ItemE6extendINtNtNtB2e_8adapters3map3MapINtCs8kGtPTKPY3N_10vector_map8IntoIterBK_NtNtBM_9small_set11SmallSet256ENCNvMNtBM_9minimizerNtB5b_9Minimizer18process_superstate0EEBQ_:
 2066|  1.02k|    fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 2067|  1.02k|        let mut iter = iterable.into_iter();
 2068|  1.02k|        let (lower_size_bound, _) = iter.size_hint();
 2069|  1.02k|        self.reserve(lower_size_bound);
 2070|  1.02k|
 2071|  1.02k|        unsafe {
 2072|  1.02k|            let (ptr, len_ptr, cap) = self.triple_mut();
 2073|  1.02k|            let ptr = ptr.as_ptr();
 2074|  1.02k|            let mut len = SetLenOnDrop::new(len_ptr);
 2075|  1.02k|            while len.get() < cap {
 2076|  1.02k|                if let Some(out) = iter.next() {
 2077|      0|                    ptr::write(ptr.add(len.get()), out);
 2078|      0|                    len.increment_len(1);
 2079|      0|                } else {
 2080|  1.02k|                    return;
 2081|       |                }
 2082|       |            }
 2083|       |        }
 2084|       |
 2085|      0|        for elem in iter {
 2086|      0|            self.push(elem);
 2087|      0|        }
 2088|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E3popBQ_:
 1135|  1.54k|    pub fn pop(&mut self) -> Option<A::Item> {
 1136|  1.54k|        unsafe {
 1137|  1.54k|            let (ptr, len_ptr, _) = self.triple_mut();
 1138|  1.54k|            let ptr: *const _ = ptr.as_ptr();
 1139|  1.54k|            if *len_ptr == 0 {
 1140|    514|                return None;
 1141|  1.02k|            }
 1142|  1.02k|            let last_index = *len_ptr - 1;
 1143|  1.02k|            *len_ptr = last_index;
 1144|  1.02k|            Some(ptr::read(ptr.add(last_index)))
 1145|       |        }
 1146|  1.54k|    }
_RNvXsX_Cs6kHoXNINp0J_8smallvecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_NtB5_5Array4sizeBB_:
 2412|  7.71k|                fn size() -> usize { $size }
_RNvXsX_Cs6kHoXNINp0J_8smallvecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBw_5state5StateEj2_NtB5_5Array4sizeBA_:
 2412|  12.3k|                fn size() -> usize { $size }
_RNvXsP_Cs6kHoXNINp0J_8smallvecNtB5_12SetLenOnDropNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCsjsjhpdplWt_8rsonpath:
 2363|  1.02k|    fn drop(&mut self) {
 2364|  1.02k|        *self.len = self.local_len;
 2365|  1.02k|    }
_RNvXs1v_Cs6kHoXNINp0J_8smallvecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_NtB6_5Array4sizeBA_:
 2412|  1.02k|                fn size() -> usize { $size }
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullTNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE6as_ptrBT_:
 2451|  1.02k|    fn as_ptr(self) -> *const T {
 2452|  1.02k|        self.0.as_ptr()
 2453|  1.02k|    }
_RNvMsR_Cs6kHoXNINp0J_8smallvecINtB5_12ConstNonNullTNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBP_5state5StateEE3newBT_:
 2447|  1.02k|    fn new(ptr: *const T) -> Option<Self> {
 2448|  1.02k|        NonNull::new(ptr as *mut T).map(Self)
 2449|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7spilledBP_:
 1005|  5.14k|    pub fn spilled(&self) -> bool {
 1006|  5.14k|        self.capacity > Self::inline_capacity()
 1007|  5.14k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E7reserveBP_:
 1224|  1.02k|    pub fn reserve(&mut self, additional: usize) {
 1225|  1.02k|        infallible(self.try_reserve(additional))
 1226|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtCsjsjhpdplWt_8rsonpath6engine4main10StackFramej80_E3newBO_:
  783|    514|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|    514|        assert!(
  787|    514|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|    514|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|    514|        SmallVec {
  791|    514|            capacity: 0,
  792|    514|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|    514|        }
  794|    514|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E3newBQ_:
  783|    514|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|    514|        assert!(
  787|    514|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|    514|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|    514|        SmallVec {
  791|    514|            capacity: 0,
  792|    514|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|    514|        }
  794|    514|    }
_RNvXsv_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_ENtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropBP_:
 2123|  1.02k|    fn drop(&mut self) {
 2124|  1.02k|        unsafe {
 2125|  1.02k|            if self.spilled() {
 2126|      0|                let (ptr, &mut len) = self.data.heap_mut();
 2127|      0|                drop(Vec::from_raw_parts(ptr.as_ptr(), len, self.capacity));
 2128|  1.02k|            } else {
 2129|  1.02k|                ptr::drop_in_place(&mut self[..]);
 2130|  1.02k|            }
 2131|       |        }
 2132|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_E4pushBQ_:
 1119|  1.02k|    pub fn push(&mut self, value: A::Item) {
 1120|  1.02k|        unsafe {
 1121|  1.02k|            let (mut ptr, mut len, cap) = self.triple_mut();
 1122|  1.02k|            if *len == cap {
 1123|      0|                self.reserve_one_unchecked();
 1124|      0|                let (heap_ptr, heap_len) = self.data.heap_mut();
 1125|      0|                ptr = heap_ptr;
 1126|      0|                len = heap_len;
 1127|  1.02k|            }
 1128|  1.02k|            ptr::write(ptr.as_ptr().add(*len), value);
 1129|  1.02k|            *len += 1;
 1130|  1.02k|        }
 1131|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E15inline_capacityBP_:
  930|  9.76k|    fn inline_capacity() -> usize {
  931|  9.76k|        if mem::size_of::<A::Item>() > 0 {
  932|  9.76k|            A::size()
  933|       |        } else {
  934|       |            // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
  935|       |            // Therefore all items are at the same address,
  936|       |            // and any array size has capacity for infinitely many items.
  937|       |            // The capacity is limited by the bit width of the length field.
  938|       |            //
  939|       |            // `Vec` also does this:
  940|       |            // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
  941|       |            //
  942|       |            // In our case, this also ensures that a smallvec of zero-size items never spills,
  943|       |            // and we never try to allocate zero bytes which `std::alloc::alloc` disallows.
  944|      0|            core::usize::MAX
  945|       |        }
  946|  9.76k|    }
_RNvXsp_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_EINtNtNtCslATUeuPuGvJ_4core3ops5index8IndexMutNtNtB2b_5range9RangeFullE9index_mutBP_:
 2041|  1.02k|    fn index_mut(&mut self, index: I) -> &mut I::Output {
 2042|  1.02k|        &mut (&mut **self)[index]
 2043|  1.02k|    }
_RNvMs9_Cs6kHoXNINp0J_8smallvecINtB5_12SmallVecDataATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBQ_5state5StateEj2_E6inlineBU_:
  641|  1.02k|    unsafe fn inline(&self) -> ConstNonNull<A::Item> {
  642|  1.02k|        ConstNonNull::new(self.inline.as_ptr() as *const A::Item).unwrap()
  643|  1.02k|    }
_RNvMsO_Cs6kHoXNINp0J_8smallvecNtB5_12SetLenOnDrop3newCsjsjhpdplWt_8rsonpath:
 2343|  1.02k|    fn new(len: &'a mut usize) -> Self {
 2344|  1.02k|        SetLenOnDrop {
 2345|  1.02k|            local_len: *len,
 2346|  1.02k|            len,
 2347|  1.02k|        }
 2348|  1.02k|    }
_RNvMsc_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecATNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_5state5StateEj2_E3newBP_:
  783|  2.57k|    pub fn new() -> SmallVec<A> {
  784|       |        // Try to detect invalid custom implementations of `Array`. Hopefully,
  785|       |        // this check should be optimized away entirely for valid ones.
  786|  2.57k|        assert!(
  787|  2.57k|            mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
  788|  2.57k|                && mem::align_of::<A>() >= mem::align_of::<A::Item>()
  789|       |        );
  790|  2.57k|        SmallVec {
  791|  2.57k|            capacity: 0,
  792|  2.57k|            data: SmallVecData::from_inline(MaybeUninit::uninit()),
  793|  2.57k|        }
  794|  2.57k|    }
_RNvXsg_Cs6kHoXNINp0J_8smallvecINtB5_8SmallVecANtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256j2_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutBQ_:
 1861|    514|    fn deref_mut(&mut self) -> &mut [A::Item] {
 1862|    514|        unsafe {
 1863|    514|            let (ptr, &mut len, _) = self.triple_mut();
 1864|    514|            slice::from_raw_parts_mut(ptr.as_ptr(), len)
 1865|    514|        }
 1866|    514|    }

_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E3new0BN_:
   41|  1.02k|    #[post(ret.len() == 0)]
_RNvXs9_Cs8kGtPTKPY3N_10vector_mapINtB5_8IntoIterNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator9size_hintBQ_:
  326|  1.02k|    fn size_hint(&self) -> (usize, Option<usize>) {
  327|  1.02k|        self.iter.size_hint()
  328|  1.02k|    }
_RINvMCs8kGtPTKPY3N_10vector_mapINtB3_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_3nfa10NfaStateIdE8positionBG_EBO_:
   79|  2.05k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  2.05k|        self.keys.iter().position(|k| key == k)
   81|  2.05k|    }
_RINvMCs8kGtPTKPY3N_10vector_mapINtB3_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE8positionBG_EBO_:
   79|  5.14k|    fn position<Q: PartialEq<K>>(&self, key: &Q) -> Option<usize> {
   80|  5.14k|        self.keys.iter().position(|k| key == k)
   81|  5.14k|    }
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE3new0BP_:
   41|    514|    #[post(ret.len() == 0)]
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE6insert0BP_:
   99|  1.54k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvMCs8kGtPTKPY3N_10vector_mapINtB2_6VecMapNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBH_9small_set11SmallSet256E8iter_mutBL_:
  175|  1.02k|    pub fn iter_mut<'a>(&'a mut self) -> IterMut<'a, K, V> {
  176|  1.02k|        IterMut {
  177|  1.02k|            iter: self.keys.iter().zip(self.values.iter_mut()),
  178|  1.02k|        }
  179|  1.02k|    }
_RNCNCINvMCs8kGtPTKPY3N_10vector_mapINtB7_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_5state5StateE3getBK_E00BS_:
   90|  2.05k|        self.position(key).map(|p| &self.values[p])
_RINvMCs8kGtPTKPY3N_10vector_mapINtB3_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBK_5state5StateE12contains_keyBG_EBO_:
   83|  1.54k|    pub fn contains_key<Q: PartialEq<K>>(&self, key: &Q) -> bool {
   84|  1.54k|        self.position(key).is_some()
   85|  1.54k|    }
_RNvMCs8kGtPTKPY3N_10vector_mapINtB2_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBJ_5state5StateE3lenBN_:
   60|  1.02k|    pub fn len(&self) -> usize {
   61|  1.02k|        self.keys.len()
   62|  1.02k|    }
_RNvXs8_Cs8kGtPTKPY3N_10vector_mapINtB5_6VecMapNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBK_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterBO_:
  307|  1.02k|    fn into_iter(self) -> Self::IntoIter {
  308|  1.02k|        IntoIter {
  309|  1.02k|            iter: self.keys.into_iter().zip(self.values.into_iter()),
  310|  1.02k|        }
  311|  1.02k|    }
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE13with_capacity0BP_:
   49|    514|    #[post(ret.len() == 0)]
_RNvXs7_Cs8kGtPTKPY3N_10vector_mapQINtB5_6VecMapNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12IntoIterator9into_iterBP_:
  299|  1.02k|    fn into_iter(self) -> Self::IntoIter {
  300|  1.02k|        self.iter_mut()
  301|  1.02k|    }
_RNCNCINvMCs8kGtPTKPY3N_10vector_mapINtB7_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBO_3nfa10NfaStateIdE3getBK_E00BS_:
   90|    514|        self.position(key).map(|p| &self.values[p])
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE3new0BP_:
   41|    514|    #[post(ret.len() == 0)]
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBJ_9small_set11SmallSet256E13with_capacity0BN_:
   49|  1.02k|    #[post(ret.len() == 0)]
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_3nfa10NfaStateIdE13with_capacity0BP_:
   49|    514|    #[post(ret.len() == 0)]
_RNCINvMCs8kGtPTKPY3N_10vector_mapINtB5_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_3nfa10NfaStateIdE8positionBI_E0BQ_:
   80|  2.57k|        self.keys.iter().position(|k| key == k)
_RNvXs9_Cs8kGtPTKPY3N_10vector_mapINtB5_8IntoIterNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBM_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextBQ_:
  322|  1.02k|    fn next(&mut self) -> Option<(K, V)> {
  323|  1.02k|        self.iter.next()
  324|  1.02k|    }
_RNvXsr_Cs8kGtPTKPY3N_10vector_mapINtB5_7IterMutNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton15TransitionLabelNtNtBL_9small_set11SmallSet256ENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextBP_:
  494|  1.02k|            fn next(&mut self) -> Option<Self::Item> {
  495|  1.02k|                self.iter.next()
  496|  1.02k|            }
_RNCNvMCs8kGtPTKPY3N_10vector_mapINtB4_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBL_5state5StateE6insert0BP_:
   99|  1.54k|    #[post(!old(self.contains_key(&key)) -> ret.is_none())]
_RNvXs4_Cs8kGtPTKPY3N_10vector_mapINtB5_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateEINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexRBI_E5indexBQ_:
  277|  2.05k|    fn index(&self, key: &'a Q) -> &Self::Output {
  278|  2.05k|        self.get(key).unwrap()
  279|  2.05k|    }
_RNCINvMCs8kGtPTKPY3N_10vector_mapINtB5_6VecMapNtNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_set11SmallSet256NtNtBM_5state5StateE8positionBI_E0BQ_:
   80|  10.2k|        self.keys.iter().position(|k| key == k)

_RNvNtNtNtCsjsjhpdplWt_8rsonpath14classification4mask3m6410combine_32Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
   52|  9.81k|    pub(crate) fn combine_32(m1: u32, m2: u32) -> u64 {
   53|  9.81k|        u64::from(m1) | (u64::from(m2) << 32)
   54|  9.81k|    }

_RINvMNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes7avx2_64NtB3_19BlockAvx2Classifier8classifyRShECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   28|  1.97k|    unsafe fn classify<'a, B: InputBlock<'a, 64>>(&mut self, blocks: &B) -> u64 {
   29|  1.97k|        block!(blocks[..64]);
   30|       |
   31|  1.97k|        let (block1, block2) = blocks.halves();
   32|  1.97k|        let classification1 = vector_256::classify_block(block1);
   33|  1.97k|        let classification2 = vector_256::classify_block(block2);
   34|  1.97k|
   35|  1.97k|        let slashes = m64::combine_32(classification1.slashes, classification2.slashes);
   36|  1.97k|        let quotes = m64::combine_32(classification1.quotes, classification2.quotes);
   37|  1.97k|
   38|  1.97k|        self.internal_classifier.classify(slashes, quotes)
   39|  1.97k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes7avx2_64NtB2_19BlockAvx2Classifier3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   21|    514|    fn new() -> Self {
   22|    514|        Self {
   23|    514|            internal_classifier: mask_64::BlockClassifier64Bit::new(),
   24|    514|        }
   25|    514|    }

_RINvXs_NtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes7avx2_64NtB5_11ConstructorNtB7_10QuotesImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2G_5MatchEEEECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   20|    514|            fn new<'i, I>(iter: I) -> Self::Classifier<'i, I>
   21|    514|            where
   22|    514|                I: InputBlockIterator<'i, $size>,
   23|    514|            {
   24|    514|                Self::Classifier {
   25|    514|                    iter,
   26|    514|                    classifier: $core::new(),
   27|    514|                    phantom: PhantomData,
   28|    514|                }
   29|    514|            }
_RNvXs0_NtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEENtBb_16FallibleIterator4nextCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   79|  2.31k|            fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
   80|  2.31k|                match self.iter.next()? {
   81|  1.97k|                    Some(block) => {
   82|  1.97k|                        // SAFETY: target_feature invariant
   83|  1.97k|                        let mask = unsafe { self.classifier.classify(&block) };
   84|  1.97k|                        let classified_block = QuoteClassifiedBlock {
   85|  1.97k|                            block,
   86|  1.97k|                            within_quotes_mask: mask,
   87|  1.97k|                        };
   88|  1.97k|                        Ok(Some(classified_block))
   89|       |                    }
   90|    337|                    None => Ok(None),
   91|       |                }
   92|  2.31k|            }
_RNvXs1_NtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes7avx2_64INtB5_21Avx2QuoteClassifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEEINtB7_23QuoteClassifiedIteratorB1v_yKB2n_E10get_offsetCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  100|  26.4k|            fn get_offset(&self) -> usize {
  101|  26.4k|                self.iter.get_offset() - $size
  102|  26.4k|            }

_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   26|    514|    pub(crate) fn new() -> Self {
   27|    514|        Self { prev_block_mask: 0 }
   28|    514|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit22update_prev_block_maskBa_:
   31|  1.97k|    fn update_prev_block_mask(&mut self, set_slash_mask: bool, quotes: u64) {
   32|  1.97k|        let slash_mask = u8::from(set_slash_mask);
   33|  1.97k|        let quote_mask = (((quotes & (1 << 63)) >> 62) as u8) & 0x02;
   34|  1.97k|        self.prev_block_mask = slash_mask | quote_mask;
   35|  1.97k|    }
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_6411all_ones128B9_:
   13|  1.97k|unsafe fn all_ones128() -> __m128i {
   14|  1.97k|    _mm_set1_epi8(0xFF_u8 as i8)
   15|  1.97k|}
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit8classify:
   55|  1.97k|    pub(crate) unsafe fn classify(&mut self, slashes: u64, quotes: u64) -> u64 {
   56|  1.97k|        let (escaped, set_prev_slash_mask) = if slashes == 0 {
   57|  1.90k|            (self.get_prev_slash_mask(), false)
   58|       |        } else {
   59|     70|            let slashes_excluding_escaped_first = slashes & !self.get_prev_slash_mask();
   60|     70|            let starts = slashes_excluding_escaped_first & !(slashes_excluding_escaped_first << 1);
   61|     70|            let odd_starts = ODD & starts;
   62|     70|            let even_starts = EVEN & starts;
   63|     70|
   64|     70|            let odd_starts_carry = odd_starts.wrapping_add(slashes);
   65|     70|            let (even_starts_carry, set_prev_slash_mask) = even_starts.overflowing_add(slashes);
   66|     70|
   67|     70|            let ends_of_odd_starts = odd_starts_carry & !slashes;
   68|     70|            let ends_of_even_starts = even_starts_carry & !slashes;
   69|     70|
   70|     70|            let escaped = (ends_of_odd_starts & EVEN) | (ends_of_even_starts & ODD) | self.get_prev_slash_mask();
   71|     70|
   72|     70|            (escaped, set_prev_slash_mask)
   73|       |        };
   74|       |
   75|  1.97k|        let nonescaped_quotes = (quotes & !escaped) ^ self.get_prev_quote_mask();
   76|  1.97k|
   77|  1.97k|        let nonescaped_quotes_vector = _mm_set_epi64x(0, nonescaped_quotes as i64);
   78|  1.97k|        let cumulative_xor = _mm_clmulepi64_si128::<0>(nonescaped_quotes_vector, all_ones128());
   79|  1.97k|
   80|  1.97k|        let within_quotes = _mm_cvtsi128_si64(cumulative_xor) as u64;
   81|  1.97k|        self.update_prev_block_mask(set_prev_slash_mask, within_quotes);
   82|       |
   83|      0|        bin_u64!("slashes", slashes);
   84|      0|        bin_u64!("quotes", quotes);
   85|      0|        bin_u64!("prev_slash_bit", self.get_prev_slash_mask());
   86|      0|        bin_u64!("prev_quote_bit", self.get_prev_quote_mask());
   87|      0|        bin_u64!("escaped", escaped);
   88|      0|        bin_u64!("quotes & !escaped", quotes & !escaped);
   89|      0|        bin_u64!("nonescaped_quotes", nonescaped_quotes);
   90|      0|        bin_u64!("within_quotes", within_quotes);
   91|       |
   92|  1.97k|        within_quotes
   93|  1.97k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_quote_maskBa_:
   49|  1.97k|    fn get_prev_quote_mask(&self) -> u64 {
   50|  1.97k|        u64::from((self.prev_block_mask & 0x02) >> 1)
   51|  1.97k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared7mask_64NtB2_20BlockClassifier64Bit19get_prev_slash_maskBa_:
   44|  2.04k|    fn get_prev_slash_mask(&self) -> u64 {
   45|  2.04k|        u64::from(self.prev_block_mask & 0x01)
   46|  2.04k|    }

_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared10vector_25614classify_block:
   17|  3.94k|pub(crate) unsafe fn classify_block(block: &[u8]) -> BlockClassification256 {
   18|  3.94k|    let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   19|  3.94k|
   20|  3.94k|    let slash_cmp = _mm256_cmpeq_epi8(byte_vector, slash_mask());
   21|  3.94k|    let slashes = _mm256_movemask_epi8(slash_cmp) as u32;
   22|  3.94k|
   23|  3.94k|    let quote_cmp = _mm256_cmpeq_epi8(byte_vector, quote_mask());
   24|  3.94k|    let quotes = _mm256_movemask_epi8(quote_cmp) as u32;
   25|  3.94k|
   26|  3.94k|    BlockClassification256 { slashes, quotes }
   27|  3.94k|}
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared10vector_25610slash_mask:
   12|  3.94k|pub(crate) unsafe fn slash_mask() -> __m256i {
   13|  3.94k|    _mm256_set1_epi8(b'\\' as i8)
   14|  3.94k|}
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification6quotes6shared10vector_25610quote_mask:
    7|  3.94k|pub(crate) unsafe fn quote_mask() -> __m256i {
    8|  3.94k|    _mm256_set1_epi8(b'"' as i8)
    9|  3.94k|}

_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_popcntCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  500|    514|    pub(crate) fn fast_popcnt(&self) -> bool {
  501|    514|        self.fast_popcnt
  502|    514|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_E3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  343|    514|    pub(crate) fn new() -> Self {
  344|    514|        Self { phantom: PhantomData }
  345|    514|    }
_RNvXs1_NtNtCsjsjhpdplWt_8rsonpath14classification4simdINtB5_12ResolvedSimdNtNtNtB7_6quotes7avx2_6411ConstructorNtNtNtB7_10structural7avx2_6411ConstructorNtNtNtB7_5depth7avx2_6411ConstructorNtNtNtB7_6memmem7avx2_6411ConstructorKj1_ENtB5_4Simd12dispatch_tagCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  375|    514|    fn dispatch_tag(self) -> usize {
  376|    514|        TARGET
  377|    514|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath14classification4simdNtB5_17SimdConfiguration12highest_simdCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  492|    514|    pub(crate) fn highest_simd(&self) -> SimdTag {
  493|    514|        self.highest_simd
  494|    514|    }
_RINvXs1_NtNtCsjsjhpdplWt_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd25classify_quoted_sequencesINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5k_5MatchEEEECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  380|    514|    fn classify_quoted_sequences<'i, I>(self, iter: I) -> Self::QuotesClassifier<'i, I>
  381|    514|    where
  382|    514|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  383|    514|    {
  384|    514|        Q::new(iter)
  385|    514|    }
_RNvNtNtCsjsjhpdplWt_8rsonpath14classification4simd9configureCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  554|    514|pub(crate) fn configure() -> SimdConfiguration {
  555|    514|    if let Ok(simd) = std::env::var(SIMD_OVERRIDE_ENV_VARIABLE) {
  556|       |        #[allow(clippy::expect_used)] // This is already an unsafe override, not expected to be used by users.
  557|      0|        return SimdConfiguration::try_parse(&simd).expect("invalid simd configuration override");
  558|    514|    }
  559|       |
  560|       |    cfg_if! {
  561|       |        if #[cfg(not(feature = "simd"))]
  562|       |        {
  563|       |            let highest_simd = SimdTag::Nosimd;
  564|       |            let fast_quotes = false;
  565|       |            let fast_popcnt = false;
  566|       |        }
  567|       |        else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  568|       |        {
  569|    514|            let highest_simd = if is_x86_feature_detected!("avx2") {
  570|    514|                SimdTag::Avx2
  571|      0|            } else if is_x86_feature_detected!("ssse3") {
  572|      0|                SimdTag::Ssse3
  573|      0|            } else if is_x86_feature_detected!("sse2") {
  574|      0|                SimdTag::Sse2
  575|       |            } else {
  576|      0|                SimdTag::Nosimd
  577|       |            };
  578|       |
  579|    514|            let fast_quotes = is_x86_feature_detected!("pclmulqdq");
  580|    514|            let fast_popcnt = is_x86_feature_detected!("popcnt");
  581|       |        }
  582|       |        else
  583|       |        {
  584|       |            let highest_simd = SimdTag::Nosimd;
  585|       |            let fast_quotes = false;
  586|       |            let fast_popcnt = false;
  587|       |        }
  588|       |    }
  589|       |
  590|    514|    SimdConfiguration {
  591|    514|        highest_simd,
  592|    514|        fast_quotes,
  593|    514|        fast_popcnt,
  594|    514|    }
  595|    514|}
_RINvXs1_NtNtCsjsjhpdplWt_8rsonpath14classification4simdINtB6_12ResolvedSimdNtNtNtB8_6quotes7avx2_6411ConstructorNtNtNtB8_10structural7avx2_6411ConstructorNtNtNtB8_5depth7avx2_6411ConstructorNtNtNtB8_6memmem7avx2_6411ConstructorKj1_ENtB6_4Simd30classify_structural_charactersINtNtNtBa_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5p_5MatchEEEECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  400|    514|    fn classify_structural_characters<'i, I>(
  401|    514|        self,
  402|    514|        iter: Self::QuotesClassifier<'i, I>,
  403|    514|    ) -> Self::StructuralClassifier<'i, I>
  404|    514|    where
  405|    514|        I: InputBlockIterator<'i, BLOCK_SIZE>,
  406|    514|    {
  407|    514|        S::new(iter)
  408|    514|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath14classification4simdNtB5_17SimdConfiguration11fast_quotesCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  496|    514|    pub(crate) fn fast_quotes(&self) -> bool {
  497|    514|        self.fast_quotes
  498|    514|    }

_RNvMNtNtCsjsjhpdplWt_8rsonpath14classification10structuralNtB2_10Structural10is_closing:
   95|  3.06k|    pub fn is_closing(&self) -> bool {
   96|  3.06k|        matches!(self, Closing(_, _))
   97|  3.06k|    }
_RNvXs5_NtNtCsjsjhpdplWt_8rsonpath14classification10structuralNtB5_11BracketTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   21|  18.8k|#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
_RNvMNtNtCsjsjhpdplWt_8rsonpath14classification10structuralNtB2_10Structural6offset:
   69|  26.3k|    pub fn offset(self, amount: usize) -> Self {
   70|  26.3k|        match self {
   71|  3.22k|            Closing(b, idx) => Closing(b, idx + amount),
   72|  3.63k|            Colon(idx) => Colon(idx + amount),
   73|  9.69k|            Opening(b, idx) => Opening(b, idx + amount),
   74|  9.82k|            Comma(idx) => Comma(idx + amount),
   75|       |        }
   76|  26.3k|    }

_RINvMNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64NtB3_21BlockAvx2Classifier648classifyRShECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   29|  5.86k|    unsafe fn classify<'i, B: InputBlock<'i, 64>>(
   30|  5.86k|        &mut self,
   31|  5.86k|        quote_classified_block: QuoteClassifiedBlock<B, u64, 64>,
   32|  5.86k|    ) -> mask_64::StructuralsBlock<B> {
   33|  5.86k|        let (block1, block2) = quote_classified_block.block.halves();
   34|  5.86k|        let classification1 = self.internal_classifier.classify_block(block1);
   35|  5.86k|        let classification2 = self.internal_classifier.classify_block(block2);
   36|  5.86k|
   37|  5.86k|        let structural = m64::combine_32(classification1.structural, classification2.structural);
   38|  5.86k|        let nonquoted_structural = structural & !quote_classified_block.within_quotes_mask;
   39|       |
   40|      0|        bin_u64!("structural", structural);
   41|      0|        bin_u64!("nonquoted_structural", nonquoted_structural);
   42|       |
   43|  5.86k|        mask_64::StructuralsBlock::new(quote_classified_block, nonquoted_structural)
   44|  5.86k|    }
_RNCNCNvXs1_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB9_16Avx2Classifier64INtNtNtBf_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBf_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2A_5MatchEEEINtNtNtBd_6quotes7avx2_6421Avx2QuoteClassifier64B1z_EENtBf_16FallibleIterator4next00Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
   14|  26.3k|super::shared::structural_classifier!(Avx2Classifier64, BlockAvx2Classifier64, mask_64, 64, u64);
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64NtB2_21BlockAvx2Classifier643new:
   21|    514|    fn new() -> Self {
   22|    514|        Self {
   23|    514|            // SAFETY: target feature invariant
   24|    514|            internal_classifier: unsafe { vector_256::BlockClassifier256::new() },
   25|    514|        }
   26|    514|    }

_RNvXs2_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EEINtB7_18StructuralIteratorB1v_B3S_yKB2n_E14turn_colons_onCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  167|  1.38k|            fn turn_colons_on(&mut self, idx: usize) {
  168|  1.38k|                if !self.are_colons_on {
  169|  1.38k|                    self.are_colons_on = true;
  170|      0|                    debug!("Turning colons on at {idx}.");
  171|       |                    // SAFETY: target_feature invariant
  172|  1.38k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  173|  1.38k|
  174|  1.38k|                    self.reclassify(idx);
  175|      0|                }
  176|  1.38k|            }
_RNvXs2_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EEINtB7_18StructuralIteratorB1v_B3S_yKB2n_E14turn_commas_onCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  145|  7.04k|            fn turn_commas_on(&mut self, idx: usize) {
  146|  7.04k|                if !self.are_commas_on {
  147|  1.21k|                    self.are_commas_on = true;
  148|      0|                    debug!("Turning commas on at {idx}.");
  149|       |                    // SAFETY: target_feature invariant
  150|  1.21k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  151|  1.21k|
  152|  1.21k|                    self.reclassify(idx);
  153|  5.83k|                }
  154|  7.04k|            }
_RNvXs2_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EEINtB7_18StructuralIteratorB1v_B3S_yKB2n_E15turn_colons_offCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  179|  6.12k|            fn turn_colons_off(&mut self) {
  180|  6.12k|                if self.are_colons_on {
  181|  2.55k|                    self.are_colons_on = false;
  182|      0|                    debug!("Turning colons off.");
  183|       |                    // SAFETY: target_feature invariant
  184|  2.55k|                    unsafe { self.classifier.internal_classifier.toggle_colons() }
  185|  3.57k|                }
  186|  6.12k|            }
_RNvXs2_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EEINtB7_18StructuralIteratorB1v_B3S_yKB2n_E15turn_commas_offCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  157|  2.08k|            fn turn_commas_off(&mut self) {
  158|  2.08k|                if self.are_commas_on {
  159|  2.08k|                    self.are_commas_on = false;
  160|      0|                    debug!("Turning commas off.");
  161|       |                    // SAFETY: target_feature invariant
  162|  2.08k|                    unsafe { self.classifier.internal_classifier.toggle_commas() }
  163|      0|                }
  164|  2.08k|            }
_RNvXs1_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EENtBb_16FallibleIterator4nextCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   85|  26.7k|            fn next(&mut self) -> Result<Option<Structural>, Self::Error> {
   86|  28.6k|                while self.current_block_is_spent() {
   87|  2.31k|                    match self.iter.next() {
   88|  1.97k|                        Ok(Some(block)) => {
   89|  1.97k|                            // SAFETY: target_feature invariant
   90|  1.97k|                            self.block = unsafe { Some(self.classifier.classify(block)) };
   91|  1.97k|                        }
   92|       |                        Ok(None) => {
   93|    337|                            self.block = None;
   94|    337|                            break;
   95|       |                        }
   96|      0|                        Err(err) => return Err(err),
   97|       |                    }
   98|       |                }
   99|       |
  100|  26.7k|                Ok(self
  101|  26.7k|                    .block
  102|  26.7k|                    .as_mut()
  103|  26.7k|                    .and_then(|b| b.next().map(|x| x.offset(self.iter.get_offset()))))
  104|  26.7k|            }
_RNvMs0_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EE22current_block_is_spentCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   49|  28.6k|            fn current_block_is_spent(&self) -> bool {
   50|  28.6k|                self.block
   51|  28.6k|                    .as_ref()
   52|  28.6k|                    .map_or(true, $mask_mod::StructuralsBlock::is_empty)
   53|  28.6k|            }
_RNvMs0_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EE10reclassifyCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   56|  3.97k|            fn reclassify(&mut self, idx: usize) {
   57|  3.97k|                if let Some(block) = self.block.take() {
   58|  3.97k|                    let quote_classified_block = block.quote_classified;
   59|  3.97k|                    let relevant_idx = idx + 1;
   60|  3.97k|                    let block_idx = (idx + 1) % $size;
   61|      0|                    debug!("relevant_idx is {relevant_idx}.");
   62|       |
   63|  3.97k|                    if block_idx != 0 || relevant_idx == self.iter.get_offset() {
   64|      0|                        debug!("need to reclassify.");
   65|       |
   66|  3.89k|                        let mask = <$mask_ty>::MAX << block_idx;
   67|  3.89k|                        // SAFETY: target_feature invariant
   68|  3.89k|                        let mut new_block = unsafe { self.classifier.classify(quote_classified_block) };
   69|  3.89k|                        new_block.structural_mask &= mask;
   70|  3.89k|                        self.block = Some(new_block);
   71|     76|                    }
   72|      0|                }
   73|  3.97k|            }
_RINvXs_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64NtB5_11ConstructorNtB7_14StructuralImpl3newINtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2P_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1O_EECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   21|    514|            fn new<'i, I, Q>(iter: Q) -> Self::Classifier<'i, I, Q>
   22|    514|            where
   23|    514|                I: InputBlockIterator<'i, BLOCK_SIZE>,
   24|    514|                Q: QuoteClassifiedIterator<'i, I, MaskType, BLOCK_SIZE>,
   25|    514|            {
   26|    514|                Self::Classifier {
   27|    514|                    iter,
   28|    514|                    classifier: $core::new(),
   29|    514|                    block: None,
   30|    514|                    are_commas_on: false,
   31|    514|                    are_colons_on: false,
   32|    514|                }
   33|    514|            }
_RNvXs2_NtNtNtCsjsjhpdplWt_8rsonpath14classification10structural7avx2_64INtB5_16Avx2Classifier64INtNtNtBb_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2w_5MatchEEEINtNtNtB9_6quotes7avx2_6421Avx2QuoteClassifier64B1v_EEINtB7_18StructuralIteratorB1v_B3S_yKB2n_E25turn_colons_and_commas_onCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  113|  6.79k|            fn turn_colons_and_commas_on(&mut self, idx: usize) {
  114|  6.79k|                if !self.are_commas_on && !self.are_colons_on {
  115|  1.37k|                    self.are_commas_on = true;
  116|  1.37k|                    self.are_colons_on = true;
  117|      0|                    debug!("Turning both commas and colons on at {idx}.");
  118|       |                    // SAFETY: target_feature invariant
  119|  1.37k|                    unsafe { self.classifier.internal_classifier.toggle_colons_and_commas() }
  120|  1.37k|
  121|  1.37k|                    self.reclassify(idx);
  122|  5.42k|                } else if !self.are_commas_on {
  123|    925|                    self.turn_commas_on(idx);
  124|  4.49k|                } else if !self.are_colons_on {
  125|  1.38k|                    self.turn_colons_on(idx);
  126|  3.11k|                }
  127|  6.79k|            }

_RNvXs_NtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared7mask_64INtB4_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   38|  26.3k|    fn next(&mut self) -> Option<Structural> {
   39|  26.3k|        let idx = self.get_idx() as usize;
   40|  26.3k|        (idx < SIZE).then(|| {
   41|       |            let bit_mask = 1 << idx;
   42|       |
   43|       |            self.structural_mask ^= bit_mask;
   44|       |
   45|       |            // The last match being a catch-all *is important*.
   46|       |            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|       |            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|       |            match self.quote_classified.block[idx] {
   49|       |                b':' => Structural::Colon(idx),
   50|       |                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|       |                b'[' => Structural::Opening(BracketType::Square, idx),
   52|       |                b',' => Structural::Comma(idx),
   53|       |                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|       |                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  26.3k|        })
   57|  26.3k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE7get_idxCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   29|  26.3k|    pub(crate) fn get_idx(&self) -> u32 {
   30|  26.3k|        self.structural_mask.trailing_zeros()
   31|  26.3k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE8is_emptyCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   24|  28.0k|    pub(crate) fn is_empty(&self) -> bool {
   25|  28.0k|        self.structural_mask == 0
   26|  28.0k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared7mask_64INtB2_16StructuralsBlockRShE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   16|  5.86k|    pub(crate) fn new(block: QuoteClassifiedBlock<B, u64, SIZE>, structural_mask: u64) -> Self {
   17|  5.86k|        Self {
   18|  5.86k|            quote_classified: block,
   19|  5.86k|            structural_mask,
   20|  5.86k|        }
   21|  5.86k|    }
_RNCNvXs_NtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared7mask_64INtB6_16StructuralsBlockRShENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
   40|  26.3k|        (idx < SIZE).then(|| {
   41|  26.3k|            let bit_mask = 1 << idx;
   42|  26.3k|
   43|  26.3k|            self.structural_mask ^= bit_mask;
   44|  26.3k|
   45|  26.3k|            // The last match being a catch-all *is important*.
   46|  26.3k|            // It has major performance implications, since the jump table generated here is a hot path for the engine.
   47|  26.3k|            // Changing this match must be accompanied with benchmark runs to make sure perf does not regress.
   48|  26.3k|            match self.quote_classified.block[idx] {
   49|  3.63k|                b':' => Structural::Colon(idx),
   50|  4.70k|                b'{' => Structural::Opening(BracketType::Curly, idx),
   51|  4.98k|                b'[' => Structural::Opening(BracketType::Square, idx),
   52|  9.82k|                b',' => Structural::Comma(idx),
   53|    431|                b'}' => Structural::Closing(BracketType::Curly, idx),
   54|  2.79k|                _ => Structural::Closing(BracketType::Square, idx),
   55|       |            }
   56|  26.3k|        })

_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_commasCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   74|  3.30k|    pub(crate) unsafe fn toggle_commas(&mut self) {
   75|  3.30k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, commas_toggle_mask());
   76|  3.30k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25613toggle_colonsCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   80|  3.93k|    pub(crate) unsafe fn toggle_colons(&mut self) {
   81|  3.93k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_toggle_mask());
   82|  3.93k|    }
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25617lower_nibble_maskCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   31|  11.7k|pub(crate) unsafe fn lower_nibble_mask() -> __m256i {
   32|  11.7k|    _mm256_loadu_si256(LOWER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   33|  11.7k|}
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25625upper_nibble_zeroing_maskCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   25|  11.7k|pub(crate) unsafe fn upper_nibble_zeroing_mask() -> __m256i {
   26|  11.7k|    _mm256_set1_epi8(0x0F)
   27|  11.7k|}
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25618colons_toggle_maskCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   49|  5.30k|pub(crate) unsafe fn colons_toggle_mask() -> __m256i {
   50|  5.30k|    _mm256_loadu_si256(COLON_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   51|  5.30k|}
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25629colons_and_commas_toggle_maskCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   55|  1.37k|pub(crate) unsafe fn colons_and_commas_toggle_mask() -> __m256i {
   56|  1.37k|    _mm256_or_si256(colons_toggle_mask(), commas_toggle_mask())
   57|  1.37k|}
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25624toggle_colons_and_commasCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   86|  1.37k|    pub(crate) unsafe fn toggle_colons_and_commas(&mut self) {
   87|  1.37k|        self.upper_nibble_mask = _mm256_xor_si256(self.upper_nibble_mask, colons_and_commas_toggle_mask());
   88|  1.37k|    }
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25618commas_toggle_maskCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   43|  4.67k|pub(crate) unsafe fn commas_toggle_mask() -> __m256i {
   44|  4.67k|    _mm256_loadu_si256(COMMAS_TOGGLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   45|  4.67k|}
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier25614classify_blockCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   92|  11.7k|    pub(crate) unsafe fn classify_block(&self, block: &[u8]) -> BlockClassification256 {
   93|  11.7k|        let byte_vector = _mm256_loadu_si256(block.as_ptr().cast::<__m256i>());
   94|  11.7k|        let shifted_byte_vector = _mm256_srli_epi16::<4>(byte_vector);
   95|  11.7k|        let upper_nibble_byte_vector = _mm256_and_si256(shifted_byte_vector, upper_nibble_zeroing_mask());
   96|  11.7k|        let lower_nibble_lookup = _mm256_shuffle_epi8(lower_nibble_mask(), byte_vector);
   97|  11.7k|        let upper_nibble_lookup = _mm256_shuffle_epi8(self.upper_nibble_mask, upper_nibble_byte_vector);
   98|  11.7k|        let structural_vector = _mm256_cmpeq_epi8(lower_nibble_lookup, upper_nibble_lookup);
   99|  11.7k|        let structural = _mm256_movemask_epi8(structural_vector) as u32;
  100|  11.7k|
  101|  11.7k|        BlockClassification256 { structural }
  102|  11.7k|    }
_RNvMNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_256NtB2_18BlockClassifier2563newBa_:
   66|    514|    pub(crate) unsafe fn new() -> Self {
   67|    514|        Self {
   68|    514|            upper_nibble_mask: upper_nibble_mask(),
   69|    514|        }
   70|    514|    }
_RNvNtNtNtNtCsjsjhpdplWt_8rsonpath14classification10structural6shared10vector_25617upper_nibble_maskB9_:
   37|    514|pub(crate) unsafe fn upper_nibble_mask() -> __m256i {
   38|    514|    _mm256_loadu_si256(UPPER_NIBBLE_MASK_ARRAY.as_ptr().cast::<__m256i>())
   39|    514|}

_RNvXs6_NtCsjsjhpdplWt_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs346dUKc5pUh_20fuzz_arbitrary_bytes:
    9|  22.9k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs0_NtCsjsjhpdplWt_8rsonpath5depthNtB5_5DepthNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5derefCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   80|  12.4k|    fn deref(&self) -> &Self::Target {
   81|  12.4k|        &self.0
   82|  12.4k|    }
_RNvXs9_NtCsjsjhpdplWt_8rsonpath5depthNtB5_5DepthNtNtCslATUeuPuGvJ_4core3cmp10PartialOrd11partial_cmpCs346dUKc5pUh_20fuzz_arbitrary_bytes:
    9|  19.2k|#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXsc_NtCsjsjhpdplWt_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3AddhE3addB7_:
   40|  9.69k|            fn add(self, rhs: u8) -> Self::Output {
   41|  9.69k|                self.0
   42|  9.69k|                    .checked_add(rhs)
   43|  9.69k|                    .ok_or(DepthError::AboveLimit(u8::MAX as usize))
   44|  9.69k|                    .map(Depth)
   45|  9.69k|            }
_RNvXsf_NtCsjsjhpdplWt_8rsonpath5depthNtB5_5DepthINtNtNtCslATUeuPuGvJ_4core3ops5arith3SubhE3subB7_:
   56|  3.22k|            fn sub(self, rhs: u8) -> Self::Output {
   57|  3.22k|                self.0.checked_sub(rhs).ok_or(DepthError::BelowZero).map(Depth)
   58|  3.22k|            }
_RNvMNtCsjsjhpdplWt_8rsonpath5depthNtB2_5Depth9decrement:
   28|  3.22k|    pub fn decrement(&mut self) -> Result<(), DepthError> {
   29|  3.22k|        *self = (*self - 1)?;
   30|  3.22k|        Ok(())
   31|  3.22k|    }
_RNvMNtCsjsjhpdplWt_8rsonpath5depthNtB2_5Depth9increment:
   21|  9.69k|    pub fn increment(&mut self) -> Result<(), DepthError> {
   22|  9.69k|        *self = (*self + 1)?;
   23|  9.69k|        Ok(())
   24|  9.69k|    }

_RNvMNtNtCsjsjhpdplWt_8rsonpath6engine13head_skippingINtB2_8HeadSkipNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB1F_6quotes7avx2_6411ConstructorNtNtNtB1F_10structural7avx2_6411ConstructorNtNtNtB1F_5depth7avx2_6411ConstructorNtNtNtB1F_6memmem7avx2_6411ConstructorKj1_EKj40_E3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   94|    514|    pub(super) fn new(bytes: &'b I, automaton: &'b Automaton<'q>, simd: V) -> Option<Self> {
   95|    514|        let initial_state = automaton.initial_state();
   96|    514|        let fallback_state = automaton[initial_state].fallback_state();
   97|    514|        let transitions = automaton[initial_state].transitions();
   98|    514|
   99|    514|        if fallback_state == initial_state && transitions.len() == 1 {
  100|      0|            let (label, target_state) = transitions[0];
  101|       |
  102|      0|            if let Some(member_name) = label.get_member_name() {
  103|      0|                debug!("Automaton starts with a descendant search, using memmem heuristic.");
  104|       |
  105|      0|                return Some(Self {
  106|      0|                    bytes,
  107|      0|                    state: target_state,
  108|      0|                    is_accepting: automaton.is_accepting(target_state),
  109|      0|                    member_name,
  110|      0|                    simd,
  111|      0|                });
  112|      0|            }
  113|    514|        }
  114|       |
  115|    514|        None
  116|    514|    }

_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB5_10SmallStack4pushCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  637|  9.18k|    fn push(&mut self, value: StackFrame) {
  638|  9.18k|        self.contents.push(value)
  639|  9.18k|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE21verify_subtree_closedCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  584|    342|    fn verify_subtree_closed(&self) -> Result<(), EngineError> {
  585|    342|        if self.depth != Depth::ZERO {
  586|    312|            Err(EngineError::MissingClosingCharacter())
  587|       |        } else {
  588|     30|            Ok(())
  589|       |        }
  590|    342|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE12handle_colonCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  288|  3.63k|    fn handle_colon(
  289|  3.63k|        &mut self,
  290|  3.63k|        #[allow(unused_variables)] classifier: &mut Classifier!(),
  291|  3.63k|        idx: usize,
  292|  3.63k|    ) -> Result<(), EngineError> {
  293|      0|        debug!("Colon");
  294|       |
  295|  3.63k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  296|  3.59k|            c == b'{' || c == b'['
  297|       |        } else {
  298|     41|            false
  299|       |        };
  300|       |
  301|  3.63k|        if !is_next_opening {
  302|  3.12k|            let mut any_matched = false;
  303|       |
  304|  3.12k|            for &(label, target) in self.automaton[self.state].transitions() {
  305|      0|                match label {
  306|      0|                    TransitionLabel::ArrayIndex(_) => {}
  307|      0|                    TransitionLabel::ObjectMember(member_name) => {
  308|      0|                        if self.automaton.is_accepting(target) && self.is_match(idx, member_name)? {
  309|      0|                            self.record_match_detected_at(
  310|      0|                                idx + 1,
  311|      0|                                NodeTypeHint::Atomic, /* since is_next_opening is false */
  312|      0|                            )?;
  313|      0|                            any_matched = true;
  314|      0|                            break;
  315|      0|                        }
  316|       |                    }
  317|       |                }
  318|       |            }
  319|  3.12k|            let fallback_state = self.automaton[self.state].fallback_state();
  320|  3.12k|            if !any_matched && self.automaton.is_accepting(fallback_state) {
  321|  3.12k|                self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  322|      0|            }
  323|  3.08k|            self.next_event = classifier.next()?;
  324|  3.08k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
  325|  3.08k|            if any_matched && !is_next_closing && self.automaton.is_unitary(self.state) {
  326|      0|                if let Some(s) = self.next_event {
  327|      0|                    match s {
  328|      0|                        Structural::Closing(_, idx) => {
  329|      0|                            self.recorder.record_value_terminator(idx, self.depth)?;
  330|       |                        }
  331|      0|                        Structural::Comma(idx) => self.recorder.record_value_terminator(idx, self.depth)?,
  332|      0|                        Structural::Colon(_) | Structural::Opening(_, _) => (),
  333|       |                    }
  334|      0|                }
  335|      0|                let bracket_type = self.current_node_bracket_type();
  336|      0|                debug!("Skipping unique state from {bracket_type:?}");
  337|      0|                let stop_at = classifier.skip(bracket_type)?;
  338|      0|                self.next_event = Some(Structural::Closing(bracket_type, stop_at));
  339|  3.08k|            }
  340|    516|        }
  341|       |
  342|  3.59k|        Ok(())
  343|  3.63k|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE14handle_openingCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  379|  9.69k|    fn handle_opening(
  380|  9.69k|        &mut self,
  381|  9.69k|        classifier: &mut Classifier!(),
  382|  9.69k|        bracket_type: BracketType,
  383|  9.69k|        idx: usize,
  384|  9.69k|    ) -> Result<(), EngineError> {
  385|      0|        debug!("Opening {bracket_type:?}, increasing depth and pushing stack.",);
  386|  9.69k|        let mut any_matched = false;
  387|  9.69k|
  388|  9.69k|        let colon_idx = self.find_preceding_colon(idx);
  389|       |
  390|  9.69k|        for &(label, target) in self.automaton[self.state].transitions() {
  391|      0|            match label {
  392|      0|                TransitionLabel::ArrayIndex(i) => {
  393|      0|                    if self.is_list && i.eq(&self.array_count) {
  394|      0|                        any_matched = true;
  395|      0|                        self.transition_to(target, bracket_type);
  396|      0|                        if self.automaton.is_accepting(target) {
  397|      0|                            debug!("Accept {idx}");
  398|      0|                            self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  399|      0|                        }
  400|      0|                        break;
  401|      0|                    }
  402|       |                }
  403|      0|                TransitionLabel::ObjectMember(member_name) => {
  404|      0|                    if let Some(colon_idx) = colon_idx {
  405|      0|                        if self.is_match(colon_idx, member_name)? {
  406|      0|                            any_matched = true;
  407|      0|                            self.transition_to(target, bracket_type);
  408|      0|                            if self.automaton.is_accepting(target) {
  409|      0|                                self.record_match_detected_at(colon_idx + 1, NodeTypeHint::Complex(bracket_type))?;
  410|      0|                            }
  411|      0|                            break;
  412|      0|                        }
  413|      0|                    }
  414|       |                }
  415|       |            }
  416|       |        }
  417|       |
  418|  9.69k|        if !any_matched && self.depth != Depth::ZERO {
  419|  9.18k|            let fallback = self.automaton[self.state].fallback_state();
  420|      0|            debug!("Falling back to {fallback}");
  421|       |
  422|  9.18k|            if self.automaton.is_rejecting(fallback) {
  423|      0|                let closing_idx = classifier.skip(bracket_type)?;
  424|      0|                return self.recorder.record_value_terminator(closing_idx, self.depth);
  425|  9.18k|            } else {
  426|  9.18k|                self.transition_to(fallback, bracket_type);
  427|  9.18k|            }
  428|  9.18k|
  429|  9.18k|            if self.automaton.is_accepting(fallback) {
  430|  9.18k|                self.record_match_detected_at(idx, NodeTypeHint::Complex(bracket_type))?;
  431|      0|            }
  432|    504|        }
  433|       |
  434|  9.69k|        self.depth
  435|  9.69k|            .increment()
  436|  9.69k|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
  437|       |
  438|  9.69k|        self.is_list = bracket_type == BracketType::Square;
  439|  9.69k|        let mut needs_commas = false;
  440|  9.69k|
  441|  9.69k|        if self.is_list {
  442|  4.98k|            self.has_any_array_item_transition = self.automaton.has_any_array_item_transition(self.state);
  443|  4.98k|            self.has_any_array_item_transition_to_accepting =
  444|  4.98k|                self.automaton.has_any_array_item_transition_to_accepting(self.state);
  445|  4.98k|
  446|  4.98k|            let fallback = self.automaton[self.state].fallback_state();
  447|  4.98k|            let is_fallback_accepting = self.automaton.is_accepting(fallback);
  448|       |
  449|  4.98k|            let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  450|       |
  451|  4.98k|            if searching_list {
  452|  4.98k|                needs_commas = true;
  453|  4.98k|                self.array_count = NonNegativeArrayIndex::ZERO;
  454|      0|                debug!("Initialized array count to {}", self.array_count);
  455|       |
  456|  4.98k|                let wants_first_item =
  457|  4.98k|                    is_fallback_accepting || self.automaton.has_first_array_index_transition_to_accepting(self.state);
  458|       |
  459|  4.98k|                if wants_first_item {
  460|  4.98k|                    let next = self.input.seek_non_whitespace_forward(idx + 1)?;
  461|       |
  462|  4.98k|                    match next {
  463|  3.52k|                        Some((_, b'[' | b'{' | b']')) => (), // Complex value or empty list.
  464|  1.38k|                        Some((value_idx, _)) => {
  465|  1.38k|                            self.record_match_detected_at(
  466|  1.38k|                                value_idx,
  467|  1.38k|                                NodeTypeHint::Atomic, /* since the next structural is a ','*/
  468|  1.38k|                            )?;
  469|       |                        }
  470|     78|                        _ => (),
  471|       |                    }
  472|      0|                }
  473|      0|            }
  474|  4.70k|        }
  475|       |
  476|  9.69k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  477|  4.70k|            classifier.turn_colons_and_commas_on(idx);
  478|  4.98k|        } else if needs_commas {
  479|  4.98k|            classifier.turn_colons_off();
  480|  4.98k|            classifier.turn_commas_on(idx);
  481|  4.98k|        } else {
  482|      0|            classifier.turn_colons_and_commas_off();
  483|      0|        }
  484|       |
  485|  9.69k|        Ok(())
  486|  9.69k|    }
_RINvXs_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB5_10MainEngineNtB7_6Engine7matchesNtNtNtB9_5input5owned10OwnedBytesINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtB9_6result5MatchEECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  126|    514|    fn matches<I, S>(&self, input: &I, sink: &mut S) -> Result<(), EngineError>
  127|    514|    where
  128|    514|        I: Input,
  129|    514|        S: Sink<Match>,
  130|    514|    {
  131|    514|        let recorder = NodesRecorder::build_recorder(sink);
  132|    514|
  133|    514|        if self.automaton.is_empty_query() {
  134|      0|            return empty_query::match_(input, sink);
  135|    514|        }
  136|    514|
  137|    514|        config_simd!(self.simd => |simd| {
  138|    514|            let executor = query_executor(&self.automaton, input, &recorder, simd);
  139|    514|            executor.run()?;
  140|       |        });
  141|       |
  142|     30|        Ok(())
  143|    514|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE3runCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  206|    514|    fn run(mut self) -> Result<(), EngineError> {
  207|    514|        let mb_head_skip = HeadSkip::new(self.input, self.automaton, self.simd);
  208|    514|
  209|    514|        match mb_head_skip {
  210|      0|            Some(head_skip) => head_skip.run_head_skipping(&mut self),
  211|    514|            None => self.run_and_exit(),
  212|       |        }
  213|    514|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_atCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  272|  22.1k|    fn record_match_detected_at(&mut self, start_idx: usize, hint: NodeTypeHint) -> Result<(), EngineError> {
  273|      0|        debug!("Reporting result somewhere after {start_idx} with hint {hint:?}");
  274|       |
  275|  22.1k|        let index = match hint {
  276|  4.49k|            NodeTypeHint::Complex(BracketType::Curly) => self.input.seek_forward(start_idx, [b'{'])?,
  277|  4.69k|            NodeTypeHint::Complex(BracketType::Square) => self.input.seek_forward(start_idx, [b'['])?,
  278|  12.9k|            NodeTypeHint::Atomic => self.input.seek_non_whitespace_forward(start_idx)?,
  279|       |        }
  280|  22.1k|        .map(|x| x.0);
  281|  22.1k|
  282|  22.1k|        match index {
  283|  21.9k|            Some(idx) => self.recorder.record_match(idx, self.depth, hint.into()),
  284|    169|            None => Err(EngineError::MissingItem()),
  285|       |        }
  286|  22.1k|    }
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB5_10SmallStack18pop_if_at_or_belowCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  627|  3.22k|    fn pop_if_at_or_below(&mut self, depth: u8) -> Option<StackFrame> {
  628|  3.22k|        if let Some(stack_frame) = self.peek() {
  629|  3.20k|            if depth <= stack_frame.depth {
  630|  3.20k|                return self.contents.pop();
  631|      0|            }
  632|     22|        }
  633|     22|        None
  634|  3.22k|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE13transition_toCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  533|  9.18k|    fn transition_to(&mut self, target: State, opening: BracketType) {
  534|  9.18k|        let target_is_list = opening == BracketType::Square;
  535|  9.18k|
  536|  9.18k|        let fallback = self.automaton[self.state].fallback_state();
  537|  9.18k|        let is_fallback_accepting = self.automaton.is_accepting(fallback);
  538|  9.18k|        let searching_list = is_fallback_accepting || self.has_any_array_item_transition;
  539|       |
  540|  9.18k|        if target != self.state || target_is_list != self.is_list || searching_list {
  541|       |            debug!(
  542|      0|                "push {}, goto {target}, is_list = {target_is_list}, array_count: {}",
  543|       |                self.state, self.array_count
  544|       |            );
  545|       |
  546|  9.18k|            self.stack.push(StackFrame {
  547|  9.18k|                depth: *self.depth,
  548|  9.18k|                state: self.state,
  549|  9.18k|                is_list: self.is_list,
  550|  9.18k|                array_count: self.array_count,
  551|  9.18k|                has_any_array_item_transition: self.has_any_array_item_transition,
  552|  9.18k|                has_any_array_item_transition_to_accepting: self.has_any_array_item_transition_to_accepting,
  553|  9.18k|            });
  554|  9.18k|            self.state = target;
  555|      0|        }
  556|  9.18k|    }
_RINvNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB8_8ExecutorpppE14run_on_subtree21avx2_pclmulqdq_popcntNtNtNtBc_5input5owned10OwnedBytesINtNtNtBc_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB2i_5MatchEEINtNtNtBc_14classification4simd12ResolvedSimdNtNtNtB3I_6quotes7avx2_6411ConstructorNtNtNtB3I_10structural7avx2_6411ConstructorNtNtNtB3I_5depth7avx2_6411ConstructorNtNtNtB3I_6memmem7avx2_6411ConstructorKj1_EECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  234|    514|        {
  235|  26.6k|            loop {
  236|  26.6k|                if eng.next_event.is_none() {
  237|  23.6k|                    eng.next_event = match classifier.next() {
  238|  23.6k|                        Ok(e) => e,
  239|      0|                        Err(err) => return Err(EngineError::InputError(err)),
  240|       |                    };
  241|  3.06k|                }
  242|  26.6k|                if let Some(event) = eng.next_event {
  243|      0|                    debug!("====================");
  244|      0|                    debug!("Event = {:?}", event);
  245|      0|                    debug!("Depth = {:?}", eng.depth);
  246|      0|                    debug!("Stack = {:?}", eng.stack);
  247|      0|                    debug!("State = {:?}", eng.state);
  248|      0|                    debug!("====================");
  249|       |
  250|  26.3k|                    eng.next_event = None;
  251|  26.3k|                    match event {
  252|  3.63k|                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  253|  9.82k|                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  254|  9.69k|                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  255|  3.22k|                        Structural::Closing(_, idx) => {
  256|  3.22k|                            eng.handle_closing(classifier, idx)?;
  257|       |
  258|  3.22k|                            if eng.depth == Depth::ZERO {
  259|     22|                                break;
  260|  3.20k|                            }
  261|       |                        }
  262|       |                    }
  263|       |                } else {
  264|    320|                    break;
  265|       |                }
  266|       |            }
  267|       |
  268|    342|            Ok(())
_RINvNtNtCsjsjhpdplWt_8rsonpath6engine4main14query_executorNtNtNtB6_5input5owned10OwnedBytesINtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1w_5MatchEEINtNtNtB6_14classification4simd12ResolvedSimdNtNtNtB2W_6quotes7avx2_6411ConstructorNtNtNtB2W_10structural7avx2_6411ConstructorNtNtNtB2W_5depth7avx2_6411ConstructorNtNtNtB2W_6memmem7avx2_6411ConstructorKj1_EECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  173|    514|fn query_executor<'i, 'q, 'r, I, R, V: Simd>(
  174|    514|    automaton: &'i Automaton<'q>,
  175|    514|    input: &'i I,
  176|    514|    recorder: &'r R,
  177|    514|    simd: V,
  178|    514|) -> Executor<'i, 'q, 'r, I, R, V>
  179|    514|where
  180|    514|    I: Input,
  181|    514|    R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  182|    514|{
  183|    514|    Executor {
  184|    514|        depth: Depth::ZERO,
  185|    514|        state: automaton.initial_state(),
  186|    514|        stack: SmallStack::new(),
  187|    514|        automaton,
  188|    514|        input,
  189|    514|        recorder,
  190|    514|        simd,
  191|    514|        next_event: None,
  192|    514|        is_list: false,
  193|    514|        array_count: NonNegativeArrayIndex::ZERO,
  194|    514|        has_any_array_item_transition: false,
  195|    514|        has_any_array_item_transition_to_accepting: false,
  196|    514|    }
  197|    514|}
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE14run_on_subtreeCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  226|    514|    fn run_on_subtree(&mut self, classifier: &mut Classifier!()) -> Result<(), EngineError> {
  227|    514|        dispatch_simd!(self.simd; self, classifier =>
  228|       |        fn<'i, 'q, 'r, I, R, V>(eng: &mut Executor<'i, 'q, 'r, I, R, V>, classifier: &mut Classifier!()) -> Result<(), EngineError>
  229|       |        where
  230|       |            'i: 'r,
  231|       |            I: Input,
  232|       |            R: Recorder<I::Block<'i, BLOCK_SIZE>>,
  233|       |            V: Simd
  234|       |        {
  235|       |            loop {
  236|       |                if eng.next_event.is_none() {
  237|       |                    eng.next_event = match classifier.next() {
  238|       |                        Ok(e) => e,
  239|       |                        Err(err) => return Err(EngineError::InputError(err)),
  240|       |                    };
  241|       |                }
  242|       |                if let Some(event) = eng.next_event {
  243|       |                    debug!("====================");
  244|       |                    debug!("Event = {:?}", event);
  245|       |                    debug!("Depth = {:?}", eng.depth);
  246|       |                    debug!("Stack = {:?}", eng.stack);
  247|       |                    debug!("State = {:?}", eng.state);
  248|       |                    debug!("====================");
  249|       |
  250|       |                    eng.next_event = None;
  251|       |                    match event {
  252|       |                        Structural::Colon(idx) => eng.handle_colon(classifier, idx)?,
  253|       |                        Structural::Comma(idx) => eng.handle_comma(classifier, idx)?,
  254|       |                        Structural::Opening(b, idx) => eng.handle_opening(classifier, b, idx)?,
  255|       |                        Structural::Closing(_, idx) => {
  256|       |                            eng.handle_closing(classifier, idx)?;
  257|       |
  258|       |                            if eng.depth == Depth::ZERO {
  259|       |                                break;
  260|       |                            }
  261|       |                        }
  262|       |                    }
  263|       |                } else {
  264|       |                    break;
  265|       |                }
  266|       |            }
  267|       |
  268|       |            Ok(())
  269|       |        })
  270|    514|    }
_RNCNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1A_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB30_6quotes7avx2_6411ConstructorNtNtNtB30_10structural7avx2_6411ConstructorNtNtNtB30_5depth7avx2_6411ConstructorNtNtNtB30_6memmem7avx2_6411ConstructorKj1_EE14handle_closing0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
  493|      2|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB5_10SmallStack4peekCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  622|  3.22k|    fn peek(&mut self) -> Option<StackFrame> {
  623|  3.22k|        self.contents.last().copied()
  624|  3.22k|    }
_RNCNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1A_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB30_6quotes7avx2_6411ConstructorNtNtNtB30_10structural7avx2_6411ConstructorNtNtNtB30_5depth7avx2_6411ConstructorNtNtNtB30_6memmem7avx2_6411ConstructorKj1_EE14handle_opening0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
  436|      1|            .map_err(|err| EngineError::DepthAboveLimit(idx, err))?;
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE12handle_commaCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  345|  9.82k|    fn handle_comma(&mut self, _classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  346|  9.82k|        self.recorder.record_value_terminator(idx, self.depth)?;
  347|  9.82k|        let is_next_opening = if let Some((_, c)) = self.input.seek_non_whitespace_forward(idx + 1)? {
  348|  9.64k|            c == b'{' || c == b'['
  349|       |        } else {
  350|    175|            false
  351|       |        };
  352|       |
  353|  9.82k|        let is_fallback_accepting = self.automaton.is_accepting(self.automaton[self.state].fallback_state());
  354|  9.82k|
  355|  9.82k|        if !is_next_opening && self.is_list && is_fallback_accepting {
  356|      0|            debug!("Accepting on comma.");
  357|  8.47k|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  358|  1.34k|        }
  359|       |
  360|       |        // After wildcard, check for a matching array index.
  361|       |        // If the index increment exceeds the field's limit, give up.
  362|  9.69k|        if self.is_list && self.array_count.try_increment().is_err() {
  363|      0|            return Ok(());
  364|  9.69k|        }
  365|      0|        debug!("Incremented array count to {}", self.array_count);
  366|       |
  367|  9.69k|        let match_index = self
  368|  9.69k|            .automaton
  369|  9.69k|            .has_array_index_transition_to_accepting(self.state, &self.array_count);
  370|  9.69k|
  371|  9.69k|        if self.is_list && !is_next_opening && match_index {
  372|      0|            debug!("Accepting on list item.");
  373|      0|            self.record_match_detected_at(idx + 1, NodeTypeHint::Atomic /* since is_next_opening is false */)?;
  374|  9.69k|        }
  375|       |
  376|  9.69k|        Ok(())
  377|  9.82k|    }
_RNvXNtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB2_10MainEngineNtB4_8Compiler13compile_query:
   49|    514|    fn compile_query(query: &JsonPathQuery) -> Result<MainEngine, CompilerError> {
   50|    514|        let automaton = Automaton::new(query)?;
   51|      0|        debug!("DFA:\n {}", automaton);
   52|    514|        let simd = simd::configure();
   53|    514|        log::info!("SIMD configuration:\n {}", simd);
   54|    514|        Ok(MainEngine { automaton, simd })
   55|    514|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE14handle_closingCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  488|  3.22k|    fn handle_closing(&mut self, classifier: &mut Classifier!(), idx: usize) -> Result<(), EngineError> {
  489|      0|        debug!("Closing, decreasing depth and popping stack.");
  490|       |
  491|  3.22k|        self.depth
  492|  3.22k|            .decrement()
  493|  3.22k|            .map_err(|err| EngineError::DepthBelowZero(idx, err))?;
  494|  3.22k|        self.recorder.record_value_terminator(idx, self.depth)?;
  495|       |
  496|  3.22k|        if let Some(stack_frame) = self.stack.pop_if_at_or_below(*self.depth) {
  497|  3.20k|            self.state = stack_frame.state;
  498|  3.20k|            self.is_list = stack_frame.is_list;
  499|  3.20k|            self.array_count = stack_frame.array_count;
  500|  3.20k|            self.has_any_array_item_transition = stack_frame.has_any_array_item_transition;
  501|  3.20k|            self.has_any_array_item_transition_to_accepting = stack_frame.has_any_array_item_transition_to_accepting;
  502|       |
  503|      0|            debug!("Restored array count to {}", self.array_count);
  504|       |
  505|  3.20k|            if self.automaton.is_unitary(self.state) {
  506|      0|                let bracket_type = self.current_node_bracket_type();
  507|      0|                debug!("Skipping unique state from {bracket_type:?}");
  508|      0|                let close_idx = classifier.skip(bracket_type)?;
  509|      0|                self.next_event = Some(Structural::Closing(bracket_type, close_idx));
  510|      0|                return Ok(());
  511|  3.20k|            }
  512|     22|        }
  513|       |
  514|  3.22k|        if self.is_list
  515|  1.14k|            && (self.automaton.is_accepting(self.automaton[self.state].fallback_state())
  516|      0|                || self.has_any_array_item_transition)
  517|  1.14k|        {
  518|  1.14k|            classifier.turn_commas_on(idx);
  519|  2.08k|        } else {
  520|  2.08k|            classifier.turn_commas_off();
  521|  2.08k|        }
  522|       |
  523|  3.22k|        if !self.is_list && self.automaton.has_transition_to_accepting(self.state) {
  524|  2.08k|            classifier.turn_colons_and_commas_on(idx);
  525|  2.08k|        } else {
  526|  1.14k|            classifier.turn_colons_off();
  527|  1.14k|        }
  528|       |
  529|  3.22k|        Ok(())
  530|  3.22k|    }
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE20find_preceding_colonCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  558|  9.69k|    fn find_preceding_colon(&self, idx: usize) -> Option<usize> {
  559|  9.69k|        if self.depth == Depth::ZERO {
  560|    504|            None
  561|       |        } else {
  562|  9.18k|            let (char_idx, char) = self.input.seek_non_whitespace_backward(idx - 1)?;
  563|       |
  564|  9.18k|            (char == b':').then_some(char_idx)
  565|       |        }
  566|  9.69k|    }
_RNCNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1A_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB30_6quotes7avx2_6411ConstructorNtNtNtB30_10structural7avx2_6411ConstructorNtNtNtB30_5depth7avx2_6411ConstructorNtNtNtB30_6memmem7avx2_6411ConstructorKj1_EE12handle_colon0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
  324|  3.06k|            let is_next_closing = self.next_event.map_or(false, |s| s.is_closing());
_RNvXs3_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtNtB9_6result15MatchedNodeTypeINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_12NodeTypeHintE4from:
  679|  21.9k|    fn from(value: NodeTypeHint) -> Self {
  680|  21.9k|        match value {
  681|  12.8k|            NodeTypeHint::Atomic => Self::Atomic,
  682|  9.18k|            NodeTypeHint::Complex(_) => Self::Complex,
  683|       |        }
  684|  21.9k|    }
_RNCNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB7_8ExecutorNtNtNtBb_5input5owned10OwnedBytesINtNtNtBb_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1A_5MatchEEINtNtNtBb_14classification4simd12ResolvedSimdNtNtNtB30_6quotes7avx2_6411ConstructorNtNtNtB30_10structural7avx2_6411ConstructorNtNtNtB30_5depth7avx2_6411ConstructorNtNtNtB30_6memmem7avx2_6411ConstructorKj1_EE24record_match_detected_at0Cs346dUKc5pUh_20fuzz_arbitrary_bytes:
  280|  21.9k|        .map(|x| x.0);
_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath6engine4mainINtB5_8ExecutorNtNtNtB9_5input5owned10OwnedBytesINtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1y_5MatchEEINtNtNtB9_14classification4simd12ResolvedSimdNtNtNtB2Y_6quotes7avx2_6411ConstructorNtNtNtB2Y_10structural7avx2_6411ConstructorNtNtNtB2Y_5depth7avx2_6411ConstructorNtNtNtB2Y_6memmem7avx2_6411ConstructorKj1_EE12run_and_exitCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  215|    514|    fn run_and_exit(mut self) -> Result<(), EngineError> {
  216|    514|        let iter = self.input.iter_blocks(self.recorder);
  217|    514|        let quote_classifier = self.simd.classify_quoted_sequences(iter);
  218|    514|        let structural_classifier = self.simd.classify_structural_characters(quote_classifier);
  219|    514|        let mut classifier = TailSkip::new(structural_classifier, self.simd);
  220|    514|
  221|    514|        self.run_on_subtree(&mut classifier)?;
  222|       |
  223|    342|        self.verify_subtree_closed()
  224|    514|    }
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6engine4mainNtB5_10SmallStack3new:
  617|    514|    fn new() -> Self {
  618|    514|        Self { contents: smallvec![] }
  619|    514|    }

_RNvXs0_NtNtCsjsjhpdplWt_8rsonpath6engine13tail_skippingINtB5_8TailSkipINtNtNtB9_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB27_5MatchEEEINtNtNtNtB9_14classification6quotes7avx2_6421Avx2QuoteClassifier64B16_EINtNtNtB3A_10structural7avx2_6416Avx2Classifier64B16_B3t_EINtNtB3A_4simd12ResolvedSimdNtB3w_11ConstructorNtB4F_11ConstructorNtNtNtB3A_5depth7avx2_6411ConstructorNtNtNtB3A_6memmem7avx2_6411ConstructorKj1_EKB1Y_ENtNtNtCslATUeuPuGvJ_4core3ops5deref8DerefMut9deref_mutCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  138|  47.8k|    fn deref_mut(&mut self) -> &mut Self::Target {
  139|  47.8k|        self.classifier
  140|  47.8k|            .as_mut()
  141|  47.8k|            .expect("tail skip must always hold a classifier")
  142|  47.8k|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath6engine13tail_skippingINtB2_8TailSkipINtNtNtB6_5input8borrowed26BorrowedBytesBlockIteratorKj40_INtNtNtB6_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB24_5MatchEEEINtNtNtNtB6_14classification6quotes7avx2_6421Avx2QuoteClassifier64B13_EINtNtNtB3x_10structural7avx2_6416Avx2Classifier64B13_B3q_EINtNtB3x_4simd12ResolvedSimdNtB3t_11ConstructorNtB4C_11ConstructorNtNtNtB3x_5depth7avx2_6411ConstructorNtNtNtB3x_6memmem7avx2_6411ConstructorKj1_EKB1V_E3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   28|    514|    pub(crate) fn new(classifier: V::StructuralClassifier<'i, I>, simd: V) -> Self {
   29|    514|        Self {
   30|    514|            classifier: Some(classifier),
   31|    514|            simd,
   32|    514|            _phantom: (PhantomData, PhantomData),
   33|    514|        }
   34|    514|    }

_RNvNtNtCsjsjhpdplWt_8rsonpath5input8in_slice27seek_non_whitespace_forwardCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  233|  31.4k|    pub(super) fn seek_non_whitespace_forward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  234|  31.4k|        let mut idx = from;
  235|  31.4k|
  236|  31.4k|        if idx >= bytes.len() {
  237|      4|            return None;
  238|  31.4k|        }
  239|       |
  240|  88.6k|        loop {
  241|  88.6k|            let b = bytes[idx];
  242|  88.6k|            if !b.is_ascii_whitespace() {
  243|  30.9k|                return Some((idx, b));
  244|  57.6k|            }
  245|  57.6k|            idx += 1;
  246|  57.6k|            if idx == bytes.len() {
  247|    459|                return None;
  248|  57.1k|            }
  249|       |        }
  250|  31.4k|    }
_RINvNtNtCsjsjhpdplWt_8rsonpath5input8in_slice12seek_forwardKj1_ECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  212|  9.18k|    pub(super) fn seek_forward<const N: usize>(bytes: &[u8], from: usize, needles: [u8; N]) -> Option<(usize, u8)> {
  213|  9.18k|        assert!(N > 0);
  214|  9.18k|        let mut idx = from;
  215|  9.18k|
  216|  9.18k|        if idx >= bytes.len() {
  217|      0|            return None;
  218|  9.18k|        }
  219|       |
  220|  9.18k|        loop {
  221|  9.18k|            let b = bytes[idx];
  222|  9.18k|            if needles.contains(&b) {
  223|  9.18k|                return Some((idx, b));
  224|      0|            }
  225|      0|            idx += 1;
  226|      0|            if idx == bytes.len() {
  227|      0|                return None;
  228|      0|            }
  229|       |        }
  230|  9.18k|    }
_RNvXNtCsjsjhpdplWt_8rsonpath5inputRShINtB2_10InputBlockKj40_E6halvesCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  166|  7.84k|    fn halves(&self) -> (&[u8], &[u8]) {
  167|  7.84k|        assert_eq!(N % 2, 0);
  168|  7.84k|        (&self[..N / 2], &self[N / 2..])
  169|  7.84k|    }
_RNvNtNtCsjsjhpdplWt_8rsonpath5input8in_slice28seek_non_whitespace_backwardCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  253|  9.18k|    pub(super) fn seek_non_whitespace_backward(bytes: &[u8], from: usize) -> Option<(usize, u8)> {
  254|  9.18k|        let mut idx = from;
  255|  9.18k|
  256|  9.18k|        if idx >= bytes.len() {
  257|      0|            return None;
  258|  9.18k|        }
  259|       |
  260|       |        loop {
  261|  10.3k|            let b = bytes[idx];
  262|  10.3k|            if !b.is_ascii_whitespace() {
  263|  9.18k|                return Some((idx, b));
  264|  1.20k|            }
  265|  1.20k|            if idx == 0 {
  266|      0|                return None;
  267|  1.20k|            }
  268|  1.20k|            idx -= 1;
  269|       |        }
  270|  9.18k|    }
_RNvNtNtCsjsjhpdplWt_8rsonpath5input8in_slice14pad_last_blockB5_:
  182|    514|    pub(super) fn pad_last_block(bytes: &[u8]) -> LastBlock {
  183|    514|        let mut last_block_buf = [JSON_SPACE_BYTE; MAX_BLOCK_SIZE];
  184|    514|        let last_block_start = (bytes.len() / MAX_BLOCK_SIZE) * MAX_BLOCK_SIZE;
  185|    514|        let last_block_slice = &bytes[last_block_start..];
  186|    514|
  187|    514|        last_block_buf[..last_block_slice.len()].copy_from_slice(last_block_slice);
  188|    514|
  189|    514|        LastBlock {
  190|    514|            bytes: last_block_buf,
  191|    514|            absolute_start: last_block_start,
  192|    514|        }
  193|    514|    }

_RNvMs0_NtNtCsjsjhpdplWt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1s_5MatchEEE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   81|    514|    pub(super) fn new(bytes: &'a [u8], last_block: &'a LastBlock, recorder: &'r R) -> Self {
   82|    514|        Self {
   83|    514|            input: bytes,
   84|    514|            idx: 0,
   85|    514|            last_block,
   86|    514|            recorder,
   87|    514|        }
   88|    514|    }
_RNvXs3_NtNtCsjsjhpdplWt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1s_5MatchEEEINtB7_18InputBlockIteratorKB1j_E10get_offsetCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  188|  26.4k|    fn get_offset(&self) -> usize {
  189|      0|        debug!("getting input iter {}", self.idx);
  190|  26.4k|        self.idx
  191|  26.4k|    }
_RNvXs2_NtNtCsjsjhpdplWt_8rsonpath5input8borrowedINtB5_26BorrowedBytesBlockIteratorKj40_INtNtNtB9_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1s_5MatchEEENtB9_16FallibleIterator4nextCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  150|  2.31k|    fn next(&mut self) -> Result<Option<Self::Item>, Self::Error> {
  151|      0|        debug!("next!");
  152|       |
  153|  2.31k|        if self.idx >= self.input.len() {
  154|    337|            Ok(None)
  155|  1.97k|        } else if self.idx >= self.last_block.absolute_start {
  156|      0|            let i = self.idx - self.last_block.absolute_start;
  157|      0|            self.idx += N;
  158|      0|            let block = &self.last_block.bytes[i..i + N];
  159|      0|
  160|      0|            self.recorder.record_block_start(block);
  161|      0|
  162|      0|            Ok(Some(block))
  163|       |        } else {
  164|  1.97k|            let block = &self.input[self.idx..self.idx + N];
  165|  1.97k|            self.idx += N;
  166|  1.97k|
  167|  1.97k|            self.recorder.record_block_start(block);
  168|  1.97k|
  169|  1.97k|            Ok(Some(block))
  170|       |        }
  171|  2.31k|    }

_RNvXs5_NtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input27seek_non_whitespace_forwardCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  252|  31.4k|    fn seek_non_whitespace_forward(&self, from: usize) -> Result<Option<(usize, u8)>, InputError> {
  253|  31.4k|        Ok(in_slice::seek_non_whitespace_forward(self.as_slice(), from))
  254|  31.4k|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB2_10OwnedBytes8as_slice:
   51|  50.3k|    pub fn as_slice(&self) -> &[u8] {
   52|  50.3k|        // SAFETY: Pointer is not null and its validity is an internal invariant.
   53|  50.3k|        unsafe { slice::from_raw_parts(self.bytes_ptr.as_ptr(), self.len) }
   54|  50.3k|    }
_RNvXs5_NtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB5_10OwnedBytesNtB7_5Input28seek_non_whitespace_backwardCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  257|  9.18k|    fn seek_non_whitespace_backward(&self, from: usize) -> Option<(usize, u8)> {
  258|  9.18k|        in_slice::seek_non_whitespace_backward(self.as_slice(), from)
  259|  9.18k|    }
_RINvMNtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB3_10OwnedBytes3newRShECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   97|    514|    pub fn new<T: AsRef<[u8]>>(src: &T) -> Result<Self, InputError> {
   98|    514|        let slice = src.as_ref();
   99|    514|        let rem = slice.len() % MAX_BLOCK_SIZE;
  100|    514|        let pad = if rem == 0 { 0 } else { MAX_BLOCK_SIZE - rem };
  101|    514|        let size = slice.len() + pad;
  102|    514|
  103|    514|        if size == 0 {
  104|       |            // SAFETY: For len and cap 0 the dangling ptr always works.
  105|      0|            return Ok(unsafe { Self::finalize_new(ptr::NonNull::dangling(), 0, 0) });
  106|    514|        }
  107|       |
  108|       |        // Size overflow check happens in get_layout.
  109|    514|        let layout = Self::get_layout(size)?;
  110|       |
  111|       |        // SAFETY:
  112|       |        // Layout is guaranteed to be of non-zero size at this point.
  113|    514|        let raw_ptr = unsafe { alloc::alloc(layout) };
  114|    514|        let ptr = ptr::NonNull::new(raw_ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));
  115|    514|
  116|    514|        // SAFETY:
  117|    514|        unsafe {
  118|    514|            ptr::copy_nonoverlapping(slice.as_ptr(), ptr.as_ptr(), slice.len());
  119|    514|            ptr::write_bytes(ptr.as_ptr().add(slice.len()), JSON_SPACE_BYTE, pad);
  120|    514|        };
  121|    514|
  122|    514|        // SAFETY: At this point we allocated and initialized exactly `size` bytes.
  123|    514|        Ok(unsafe { Self::finalize_new(ptr, size, size) })
  124|    514|    }
_RINvXs5_NtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input12seek_forwardKj1_ECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  247|  9.18k|    fn seek_forward<const N: usize>(&self, from: usize, needles: [u8; N]) -> Result<Option<(usize, u8)>, InputError> {
  248|  9.18k|        Ok(in_slice::seek_forward(self.as_slice(), from, needles))
  249|  9.18k|    }
_RINvXs5_NtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB6_10OwnedBytesNtB8_5Input11iter_blocksINtNtNtBa_6result5nodes13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB1s_5MatchEEKj40_ECs346dUKc5pUh_20fuzz_arbitrary_bytes:
  234|    514|    fn iter_blocks<'a, 'r, R, const N: usize>(&'a self, recorder: &'r R) -> Self::BlockIterator<'a, 'r, N, R>
  235|    514|    where
  236|    514|        R: InputRecorder<&'a [u8]>,
  237|    514|    {
  238|    514|        BorrowedBytesBlockIterator::new(self.as_slice(), &self.last_block, recorder)
  239|    514|    }
_RNvXs4_NtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB5_10OwnedBytesNtNtNtCslATUeuPuGvJ_4core3ops4drop4Drop4dropCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  205|    514|    fn drop(&mut self) {
  206|    514|        if self.len == 0 {
  207|      0|            return;
  208|    514|        }
  209|    514|
  210|    514|        // This should never happen and if it did it would cause a memory leak.
  211|    514|        #[allow(clippy::expect_used)]
  212|    514|        let layout = Self::get_layout(self.capacity).expect("layout for existing OwnedBytes must never change");
  213|    514|
  214|    514|        // SAFETY:
  215|    514|        // `ptr` is allocated in `new` and layout is constructed using the same function
  216|    514|        // and size.
  217|    514|        // This relies on self.capacity not being mutated ever.
  218|    514|        unsafe { alloc::dealloc(self.bytes_ptr.as_ptr(), layout) }
  219|    514|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB2_10OwnedBytes10get_layout:
  154|  1.02k|    fn get_layout(size: usize) -> Result<alloc::Layout, InputError> {
  155|  1.02k|        alloc::Layout::from_size_align(size, MAX_BLOCK_SIZE).map_err(|_err| InputError::AllocationSizeExceeded)
  156|  1.02k|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath5input5ownedNtB2_10OwnedBytes12finalize_new:
   36|    514|    unsafe fn finalize_new(ptr: ptr::NonNull<u8>, len: usize, cap: usize) -> Self {
   37|    514|        let slice = slice::from_raw_parts(ptr.as_ptr(), len);
   38|    514|        let last_block = in_slice::pad_last_block(slice);
   39|    514|
   40|    514|        Self {
   41|    514|            bytes_ptr: ptr,
   42|    514|            len,
   43|    514|            capacity: cap,
   44|    514|            last_block,
   45|    514|        }
   46|    514|    }

_RNvCsjsjhpdplWt_8rsonpath18is_json_whitespace:
  357|  6.64k|pub(crate) fn is_json_whitespace(x: u8) -> bool {
  358|  6.64k|    JSON_WHITESPACE_BYTES.contains(&x)
  359|  6.64k|}

_RNvMs0_NtCsjsjhpdplWt_8rsonpath5queryNtB5_13JsonPathQuery5parse:
  140|    514|    pub fn parse(query_string: &str) -> Result<Self, ParserError> {
  141|    514|        self::parser::parse_json_path_query(query_string)
  142|    514|    }
_RNvMNtCsjsjhpdplWt_8rsonpath5queryNtB2_17JsonPathQueryNode4iter:
   89|    514|    pub fn iter(&self) -> JsonPathQueryIterator {
   90|    514|        JsonPathQueryIterator { node: Some(self) }
   91|    514|    }
_RNvMNtCsjsjhpdplWt_8rsonpath5queryNtB2_17JsonPathQueryNode5child:
   73|  1.02k|    pub fn child(&self) -> Option<&Self> {
   74|  1.02k|        match self {
   75|    514|            Root(node)
   76|      0|            | Child(_, node)
   77|      0|            | AnyChild(node)
   78|      0|            | Descendant(_, node)
   79|    514|            | AnyDescendant(node)
   80|      0|            | ArrayIndexChild(_, node)
   81|  1.02k|            | ArrayIndexDescendant(_, node) => node.as_deref(),
   82|  1.02k|        }
   83|  1.02k|    }
_RNvXs3_NtCsjsjhpdplWt_8rsonpath5queryNtB5_17JsonPathQueryNodeNtB5_21JsonPathQueryNodeType7is_root:
  219|  1.54k|    fn is_root(&self) -> bool {
  220|  1.54k|        matches!(self, Root(_))
  221|  1.54k|    }
_RNvXs_NtCsjsjhpdplWt_8rsonpath5queryNtB4_21JsonPathQueryIteratorNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB6_:
  110|  1.54k|    fn next(&mut self) -> Option<Self::Item> {
  111|  1.54k|        let result = self.node;
  112|       |
  113|  1.54k|        if let Some(node) = result {
  114|  1.02k|            self.node = node.child()
  115|    514|        }
  116|       |
  117|  1.54k|        result
  118|  1.54k|    }
_RNvMs0_NtCsjsjhpdplWt_8rsonpath5queryNtB5_13JsonPathQuery3newB7_:
  150|    514|    pub fn new(node: Box<JsonPathQueryNode>) -> Self {
  151|    514|        let root = if node.is_root() {
  152|    514|            node
  153|       |        } else {
  154|      0|            info!("Implicitly using the Root expression (`$`) at the start of the query.");
  155|      0|            Box::new(Root(Some(node)))
  156|       |        };
  157|       |
  158|    514|        Self { root }
  159|    514|    }
_RNvMs0_NtCsjsjhpdplWt_8rsonpath5queryNtB5_13JsonPathQuery4root:
  128|  1.02k|    pub fn root(&self) -> &JsonPathQueryNode {
  129|  1.02k|        self.root.as_ref()
  130|  1.02k|    }

_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton27has_transition_to_accepting:
  331|  6.79k|    pub fn has_transition_to_accepting(&self, state: State) -> bool {
  332|  6.79k|        self[state].attributes.has_transition_to_accepting()
  333|  6.79k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  148|    514|    pub fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
  149|    514|        let nfa = NondeterministicAutomaton::new(query)?;
  150|      0|        debug!("NFA: {}", nfa);
  151|    514|        Automaton::minimize(nfa)
  152|    514|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton13initial_state:
  202|  1.02k|    pub fn initial_state(&self) -> State {
  203|  1.02k|        State(1)
  204|  1.02k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton10is_unitary:
  371|  3.20k|    pub fn is_unitary(&self, state: State) -> bool {
  372|  3.20k|        self[state].attributes.is_unitary()
  373|  3.20k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton12is_accepting:
  220|  37.4k|    pub fn is_accepting(&self, state: State) -> bool {
  221|  37.4k|        self[state].attributes.is_accepting()
  222|  37.4k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton42has_any_array_item_transition_to_accepting:
  259|  4.98k|    pub fn has_any_array_item_transition_to_accepting(&self, state: State) -> bool {
  260|  4.98k|        self[state].transitions().iter().any(|t| match t {
  261|       |            (TransitionLabel::ArrayIndex(_), s) => self.is_accepting(*s),
  262|       |            _ => false,
  263|  4.98k|        })
  264|  4.98k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton12is_rejecting:
  349|  9.18k|    pub fn is_rejecting(&self, state: State) -> bool {
  350|  9.18k|        self[state].attributes.is_rejecting()
  351|  9.18k|    }
_RNvMs7_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_10StateTable14fallback_state:
  387|  37.9k|    pub fn fallback_state(&self) -> State {
  388|  37.9k|        self.fallback_state
  389|  37.9k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton39has_array_index_transition_to_accepting:
  310|  9.69k|    pub fn has_array_index_transition_to_accepting(&self, state: State, match_index: &NonNegativeArrayIndex) -> bool {
  311|  9.69k|        self[state].transitions().iter().any(|t| match t {
  312|       |            (TransitionLabel::ArrayIndex(i), s) => i.eq(match_index) && self.is_accepting(*s),
  313|       |            _ => false,
  314|  9.69k|        })
  315|  9.69k|    }
_RNvXs5_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9AutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtNtB5_5state5StateE5index:
  134|   127k|    fn index(&self, index: State) -> &Self::Output {
  135|   127k|        &self.states[index.0 as usize]
  136|   127k|    }
_RNvMs7_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_10StateTable11transitions:
  397|  32.9k|    pub fn transitions(&self) -> &[Transition<'q>] {
  398|  32.9k|        &self.transitions
  399|  32.9k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton29has_any_array_item_transition:
  238|  4.98k|    pub fn has_any_array_item_transition(&self, state: State) -> bool {
  239|  4.98k|        self[state]
  240|  4.98k|            .transitions()
  241|  4.98k|            .iter()
  242|  4.98k|            .any(|t| matches!(t, (TransitionLabel::ArrayIndex(_), _)))
  243|  4.98k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton14is_empty_query:
  176|    514|    pub fn is_empty_query(&self) -> bool {
  177|    514|        self.states.len() == 2
  178|    514|    }
_RNvXs2_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_10StateTableNtNtCslATUeuPuGvJ_4core7default7Default7defaultB9_:
  108|  1.02k|    fn default() -> Self {
  109|  1.02k|        Self {
  110|  1.02k|            attributes: StateAttributes::default(),
  111|  1.02k|            transitions: Default::default(),
  112|  1.02k|            fallback_state: State(0),
  113|  1.02k|        }
  114|  1.02k|    }
_RNvMs6_NtNtCsjsjhpdplWt_8rsonpath5query9automatonNtB5_9Automaton8minimize:
  375|    514|    fn minimize(nfa: NondeterministicAutomaton<'q>) -> Result<Self, CompilerError> {
  376|    514|        minimizer::minimize(nfa)
  377|    514|    }

_RNvNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer32normalize_superstate_transitions13normalize_one:
  275|  1.02k|        fn normalize_one(
  276|  1.02k|            this: &mut Minimizer,
  277|  1.02k|            state: &mut SmallSet256,
  278|  1.02k|            current_checkpoint: Option<NfaStateId>,
  279|  1.02k|        ) -> Result<(), CompilerError> {
  280|  1.02k|            if let Some(checkpoint) = current_checkpoint {
  281|  1.02k|                state.insert(checkpoint.0);
  282|  1.02k|            }
  283|       |
  284|  1.02k|            this.normalize(state);
  285|  1.02k|            this.activate_if_new(*state)?;
  286|       |
  287|  1.02k|            if let Some(checkpoint) = current_checkpoint {
  288|  1.02k|                this.checkpoints.insert(*state, checkpoint);
  289|  1.02k|            }
  290|       |
  291|  1.02k|            Ok(())
  292|  1.02k|        }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer20determine_checkpoint:
  192|  1.02k|    fn determine_checkpoint(&mut self, superstate: SmallSet256) -> Option<NfaStateId> {
  193|  1.02k|        if let Some(nfa_state) = self.as_checkpoint(superstate) {
  194|    514|            self.checkpoints.insert(superstate, nfa_state);
  195|    514|            Some(nfa_state)
  196|       |        } else {
  197|    514|            self.checkpoints.get(&superstate).copied()
  198|       |        }
  199|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer16build_attributes:
  161|  1.02k|    fn build_attributes(
  162|  1.02k|        &self,
  163|  1.02k|        id: DfaStateId,
  164|  1.02k|        transitions: &[(TransitionLabel, DfaStateId)],
  165|  1.02k|        fallback: DfaStateId,
  166|  1.02k|    ) -> StateAttributes {
  167|  1.02k|        let mut attrs = StateAttributesBuilder::new();
  168|  1.02k|
  169|  1.02k|        if self.accepting.contains(id.0) {
  170|      0|            debug!("{id} is accepting");
  171|    514|            attrs = attrs.accepting();
  172|    514|        }
  173|  1.02k|        if id == Self::rejecting_state() {
  174|      0|            debug!("{id} is rejecting");
  175|      0|            attrs = attrs.rejecting();
  176|  1.02k|        }
  177|  1.02k|        if transitions.len() == 1 && fallback == Self::rejecting_state() {
  178|      0|            debug!("{id} is unitary");
  179|      0|            attrs = attrs.unitary();
  180|  1.02k|        }
  181|  1.02k|        if self.accepting.contains(fallback.0) || transitions.iter().any(|(_, s)| self.accepting.contains(s.0)) {
  182|      0|            debug!("{id} has transitions to accepting");
  183|  1.02k|            attrs = attrs.transitions_to_accepting();
  184|      0|        }
  185|       |
  186|  1.02k|        attrs.into()
  187|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer9normalize:
  305|  1.02k|    fn normalize(&self, superstate: &mut SmallSet256) {
  306|  1.02k|        let furthest_checkpoint = superstate
  307|  1.02k|            .iter()
  308|  1.02k|            .map(NfaStateId)
  309|  1.02k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
  310|  1.02k|            .max();
  311|       |
  312|  1.02k|        if let Some(cutoff) = furthest_checkpoint {
  313|  1.02k|            superstate.remove_all_before(cutoff.0);
  314|  1.02k|        }
  315|  1.02k|    }
_RNCNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer23process_nfa_transitions0Ba_:
  223|  1.54k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|  1.02k|                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|    514|                _ => None,
  228|  1.54k|            })
_RNvNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizer8minimize:
   17|    514|pub(super) fn minimize(nfa: NondeterministicAutomaton) -> Result<Automaton, CompilerError> {
   18|    514|    let minimizer = Minimizer {
   19|    514|        nfa,
   20|    514|        superstates: VecMap::new(),
   21|    514|        checkpoints: VecMap::new(),
   22|    514|        active_superstates: smallvec![],
   23|    514|        dfa_states: vec![],
   24|    514|        accepting: SmallSet256::default(),
   25|    514|    };
   26|    514|
   27|    514|    minimizer.run()
   28|    514|}
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer23process_nfa_transitions:
  215|  1.02k|    fn process_nfa_transitions(
  216|  1.02k|        &self,
  217|  1.02k|        current_superstate: SmallSet256,
  218|  1.02k|        current_checkpoint: Option<NfaStateId>,
  219|  1.02k|    ) -> Result<SuperstateTransitionTable<'q>, CompilerError> {
  220|  1.02k|        let mut wildcard_targets = current_superstate
  221|  1.02k|            .iter()
  222|  1.02k|            .map(NfaStateId)
  223|  1.02k|            .filter_map(|id| match self.nfa[id] {
  224|       |                NfaState::Recursive(nfa::Transition::Wildcard) | NfaState::Direct(nfa::Transition::Wildcard) => {
  225|       |                    Some(id.next().map(|x| x.0))
  226|       |                }
  227|       |                _ => None,
  228|  1.02k|            })
  229|  1.02k|            .collect::<Result<SmallSet256, _>>()?;
  230|  1.02k|        if let Some(checkpoint) = current_checkpoint {
  231|  1.02k|            wildcard_targets.insert(checkpoint.0);
  232|  1.02k|        }
  233|       |
  234|      0|        debug!("Wildcard target: {wildcard_targets:?}");
  235|       |
  236|  1.02k|        let mut transitions = SuperstateTransitionTable {
  237|  1.02k|            labelled: VecMap::new(),
  238|  1.02k|            wildcard: wildcard_targets,
  239|  1.02k|        };
  240|       |
  241|  1.54k|        for nfa_state in current_superstate.iter().map(NfaStateId) {
  242|  1.54k|            match self.nfa[nfa_state] {
  243|       |                // Direct states simply have a single transition to the next state in the NFA.
  244|       |                // Recursive transitions also have a self-loop, but that is handled by the
  245|       |                // checkpoints mechanism - here we only handle the forward transition.
  246|      0|                NfaState::Direct(nfa::Transition::Labelled(label))
  247|      0|                | NfaState::Recursive(nfa::Transition::Labelled(label)) => {
  248|      0|                    debug!("Considering transition {nfa_state} --{}-> {}", label, nfa_state.next()?,);
  249|       |                    // Add the target NFA state to the target superstate, or create a singleton
  250|       |                    // set if this is the first transition via this label encountered in the loop.
  251|      0|                    if let Some(target) = transitions.labelled.get_mut(&label) {
  252|      0|                        target.insert(nfa_state.next()?.0);
  253|       |                    } else {
  254|      0|                        let mut new_set = transitions.wildcard;
  255|      0|                        new_set.insert(nfa_state.next()?.0);
  256|      0|                        transitions.labelled.insert(label, new_set);
  257|       |                    }
  258|       |                }
  259|       |                NfaState::Direct(nfa::Transition::Wildcard)
  260|       |                | NfaState::Recursive(nfa::Transition::Wildcard)
  261|  1.54k|                | NfaState::Accepting => (),
  262|       |            }
  263|       |        }
  264|       |
  265|  1.02k|        Ok(transitions)
  266|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer3run:
   78|    514|    fn run(mut self) -> Result<Automaton<'q>, CompilerError> {
   79|    514|        // Rejecting state has no outgoing transitions except for a self-loop.
   80|    514|        self.dfa_states.push(StateTable {
   81|    514|            transitions: smallvec![],
   82|    514|            fallback_state: Self::rejecting_state(),
   83|    514|            attributes: StateAttributesBuilder::new().rejecting().into(),
   84|    514|        });
   85|    514|        self.superstates.insert(SmallSet256::default(), Self::rejecting_state());
   86|    514|
   87|    514|        // Initial superstate is {0}.
   88|    514|        let initial_superstate = [0].into();
   89|    514|        self.activate_if_new(initial_superstate)?;
   90|       |
   91|  1.54k|        while let Some(superstate) = self.active_superstates.pop() {
   92|  1.02k|            self.process_superstate(superstate)?;
   93|       |        }
   94|       |
   95|    514|        Ok(Automaton {
   96|    514|            states: self.dfa_states,
   97|    514|        })
   98|    514|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer13as_checkpoint:
  203|  1.02k|    fn as_checkpoint(&self, superstate: SmallSet256) -> Option<NfaStateId> {
  204|  1.02k|        if let Some(single_state) = superstate.singleton().map(NfaStateId) {
  205|    514|            if matches!(self.nfa[single_state], NfaState::Recursive(_)) {
  206|    514|                return Some(single_state);
  207|      0|            }
  208|    514|        }
  209|       |
  210|    514|        None
  211|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15rejecting_stateB8_:
  100|  2.05k|    fn rejecting_state() -> DfaStateId {
  101|  2.05k|        DfaStateId(0)
  102|  2.05k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer18process_superstate:
  128|  1.02k|    fn process_superstate(&mut self, current_superstate: SmallSet256) -> Result<(), CompilerError> {
  129|  1.02k|        let current_checkpoint = self.determine_checkpoint(current_superstate);
  130|      0|        debug!("Expanding superstate: {current_superstate:?}, last checkpoint is {current_checkpoint:?}");
  131|       |
  132|  1.02k|        let mut transitions = self.process_nfa_transitions(current_superstate, current_checkpoint)?;
  133|      0|        debug!("Raw transitions: {:?}", transitions);
  134|       |
  135|  1.02k|        self.normalize_superstate_transitions(&mut transitions, current_checkpoint)?;
  136|      0|        debug!("Normalized transitions: {:?}", transitions);
  137|       |
  138|       |        // Translate the transitions to the data model expected by TransitionTable.
  139|  1.02k|        let translated_transitions: SmallVec<_> = transitions
  140|  1.02k|            .labelled
  141|  1.02k|            .into_iter()
  142|  1.02k|            .map(|(label, state)| (label, self.superstates[&state]))
  143|  1.02k|            .collect();
  144|      0|        debug!("Translated transitions: {translated_transitions:?}");
  145|       |
  146|       |        // If a checkpoint was reached, its singleton superstate is this DFA state's fallback state.
  147|       |        // Otherwise, we set the fallback to the rejecting state.
  148|  1.02k|        let id = self.superstates[&current_superstate];
  149|  1.02k|        let fallback_state = self.superstates[&transitions.wildcard];
  150|  1.02k|        let attributes = self.build_attributes(id, &translated_transitions, fallback_state);
  151|  1.02k|        let table = &mut self.dfa_states[id.0 as usize];
  152|  1.02k|        table.transitions = translated_transitions;
  153|  1.02k|        table.fallback_state = fallback_state;
  154|  1.02k|        table.attributes = attributes;
  155|  1.02k|
  156|  1.02k|        Ok(())
  157|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer32normalize_superstate_transitions:
  270|  1.02k|    fn normalize_superstate_transitions(
  271|  1.02k|        &mut self,
  272|  1.02k|        transitions: &mut SuperstateTransitionTable,
  273|  1.02k|        current_checkpoint: Option<NfaStateId>,
  274|  1.02k|    ) -> Result<(), CompilerError> {
  275|  1.02k|        fn normalize_one(
  276|  1.02k|            this: &mut Minimizer,
  277|  1.02k|            state: &mut SmallSet256,
  278|  1.02k|            current_checkpoint: Option<NfaStateId>,
  279|  1.02k|        ) -> Result<(), CompilerError> {
  280|  1.02k|            if let Some(checkpoint) = current_checkpoint {
  281|  1.02k|                state.insert(checkpoint.0);
  282|  1.02k|            }
  283|  1.02k|
  284|  1.02k|            this.normalize(state);
  285|  1.02k|            this.activate_if_new(*state)?;
  286|  1.02k|
  287|  1.02k|            if let Some(checkpoint) = current_checkpoint {
  288|  1.02k|                this.checkpoints.insert(*state, checkpoint);
  289|  1.02k|            }
  290|  1.02k|
  291|  1.02k|            Ok(())
  292|  1.02k|        }
  293|  1.02k|
  294|  1.02k|        normalize_one(self, &mut transitions.wildcard, current_checkpoint)?;
  295|  1.02k|        for (_, state) in &mut transitions.labelled {
  296|      0|            normalize_one(self, state, current_checkpoint)?;
  297|       |        }
  298|       |
  299|  1.02k|        Ok(())
  300|  1.02k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB2_9Minimizer15activate_if_new:
  106|  1.54k|    fn activate_if_new(&mut self, superstate: SmallSet256) -> Result<(), CompilerError> {
  107|  1.54k|        if !self.superstates.contains_key(&superstate) {
  108|  1.02k|            let identifier = self
  109|  1.02k|                .superstates
  110|  1.02k|                .len()
  111|  1.02k|                .try_into()
  112|  1.02k|                .map(DfaStateId)
  113|  1.02k|                .map_err(|err| CompilerError::QueryTooComplex(Some(err)))?;
  114|  1.02k|            self.superstates.insert(superstate, identifier);
  115|  1.02k|            self.active_superstates.push(superstate);
  116|  1.02k|            self.dfa_states.push(StateTable::default());
  117|      0|            debug!("New superstate created: {superstate:?} {identifier}");
  118|  1.02k|            if superstate.contains(self.nfa.accepting_state().0) {
  119|    514|                self.accepting.insert(identifier.0);
  120|    514|            }
  121|    514|        }
  122|       |
  123|  1.54k|        Ok(())
  124|  1.54k|    }
_RNCNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB4_9Minimizer9normalize0Ba_:
  309|  2.05k|            .filter(|&x| matches!(self.nfa[x], NfaState::Recursive(_)))
_RNCNCNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9minimizerNtB6_9Minimizer23process_nfa_transitions00Bc_:
  225|  1.02k|                    Some(id.next().map(|x| x.0))

_RNvMs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton15accepting_state:
   93|  1.02k|    pub(super) fn accepting_state(&self) -> NfaStateId {
   94|  1.02k|        // CAST: safe because of the check in `new`.
   95|  1.02k|        NfaStateId((self.ordered_states.len() - 1) as u8)
   96|  1.02k|    }
_RNvXs0_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton3nfaNtB5_25NondeterministicAutomatonINtNtNtCslATUeuPuGvJ_4core3ops5index5IndexNtB5_10NfaStateIdE5index:
  102|  5.65k|    fn index(&self, index: NfaStateId) -> &Self::Output {
  103|  5.65k|        &self.ordered_states[index.0 as usize]
  104|  5.65k|    }
_RNCNvMs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton3nfaNtB6_25NondeterministicAutomaton3new0Bc_:
   69|  1.02k|            .filter_map(|node| match node {
   70|    514|                JsonPathQueryNode::Root(_) => None,
   71|      0|                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|      0|                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|      0|                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|    514|                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|      0|                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|      0|                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|      0|                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|  1.02k|            })
_RNvMs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton3nfaNtB4_25NondeterministicAutomaton3new:
   63|    514|    pub(super) fn new(query: &'q JsonPathQuery) -> Result<Self, CompilerError> {
   64|    514|        debug_assert!(query.root().is_root());
   65|       |
   66|    514|        let states_result: Result<Vec<NfaState>, CompilerError> = query
   67|    514|            .root()
   68|    514|            .iter()
   69|    514|            .filter_map(|node| match node {
   70|       |                JsonPathQueryNode::Root(_) => None,
   71|       |                JsonPathQueryNode::Descendant(name, _) => Some(Ok(Recursive(Transition::Labelled(name.into())))),
   72|       |                JsonPathQueryNode::Child(name, _) => Some(Ok(Direct(Transition::Labelled(name.into())))),
   73|       |                JsonPathQueryNode::AnyChild(_) => Some(Ok(Direct(Transition::Wildcard))),
   74|       |                JsonPathQueryNode::AnyDescendant(_) => Some(Ok(Recursive(Transition::Wildcard))),
   75|       |                JsonPathQueryNode::ArrayIndexChild(index, _) => Some(Ok(Direct(Transition::Labelled((*index).into())))),
   76|       |                JsonPathQueryNode::ArrayIndexDescendant(index, _) => {
   77|       |                    Some(Ok(Recursive(Transition::Labelled((*index).into()))))
   78|       |                }
   79|    514|            })
   80|    514|            .collect();
   81|    514|        let mut states = states_result?;
   82|       |
   83|    514|        states.push(Accepting);
   84|    514|
   85|    514|        let accepting_state: Result<u8, _> = (states.len() - 1).try_into();
   86|    514|        if let Err(err) = accepting_state {
   87|      0|            Err(CompilerError::QueryTooComplex(Some(err)))
   88|       |        } else {
   89|    514|            Ok(NondeterministicAutomaton { ordered_states: states })
   90|       |        }
   91|    514|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton3nfaNtB2_10NfaStateId4next:
   49|  1.02k|    pub(super) fn next(&self) -> Result<Self, CompilerError> {
   50|  1.02k|        self.0
   51|  1.02k|            .checked_add(1)
   52|  1.02k|            .ok_or(CompilerError::QueryTooComplex(None))
   53|  1.02k|            .map(Self)
   54|  1.02k|    }

_RNvXNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE4iterB8_:
   73|  3.08k|    fn iter(&self) -> SmallSet256Iter {
   74|  3.08k|        SmallSet256Iter {
   75|  3.08k|            half_1: self.half_1.iter(),
   76|  3.08k|            half_2: self.half_2.iter(),
   77|  3.08k|        }
   78|  3.08k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE4iterBa_:
  122|  6.16k|    fn iter(&self) -> SmallSet128Iter {
  123|  6.16k|        SmallSet128Iter { bitmask: self.bitmask }
  124|  6.16k|    }
_RNvXsa_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core7default7Default7defaultBb_:
   37|  2.57k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXse_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqBb_:
   37|  12.8k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RINvXs6_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterINtNtB1n_8adapters12GenericShuntINtNtB2v_10filter_map9FilterMapINtNtB2v_3map3MapNtB6_15SmallSet256IterNcNtNtB8_3nfa10NfaStateId0ENCNvMNtB8_9minimizerNtB4C_9Minimizer23process_nfa_transitions0EINtNtB1p_6result6ResultNtNtB1p_7convert10InfallibleNtNtBa_5error13CompilerErrorEEEBc_:
  189|  1.02k|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|  1.02k|        let mut result = Self::default();
  191|  2.05k|        for elem in iter {
  192|  1.02k|            result.insert(elem);
  193|  1.02k|        }
  194|  1.02k|        result
  195|  1.02k|    }
_RNvXNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE8contains:
   65|  3.08k|    fn contains(&self, elem: u8) -> bool {
   66|  3.08k|        if elem < 128 {
   67|  3.08k|            self.half_1.contains(elem)
   68|       |        } else {
   69|      0|            self.half_2.contains(elem - 128)
   70|       |        }
   71|  3.08k|    }
_RNvXsl_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqBb_:
   43|  16.4k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE17remove_all_before:
   95|  1.02k|    fn remove_all_before(&mut self, cutoff: u8) {
   96|  1.02k|        if cutoff < 128 {
   97|  1.02k|            self.half_1.remove_all_before(cutoff)
   98|      0|        } else {
   99|      0|            self.half_1.clear();
  100|      0|            self.half_2.remove_all_before(cutoff - 128);
  101|      0|        }
  102|  1.02k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8contains:
  118|  3.08k|    fn contains(&self, elem: u8) -> bool {
  119|  3.08k|        (self.bitmask & (1 << elem)) != 0
  120|  3.08k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE8is_emptyBa_:
  110|  2.05k|    fn is_empty(&self) -> bool {
  111|  2.05k|        self.bitmask == 0
  112|  2.05k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE17remove_all_before:
  139|  1.02k|    fn remove_all_before(&mut self, cutoff: u8) {
  140|  1.02k|        let mask: u128 = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF << cutoff;
  141|  1.02k|        self.bitmask &= mask;
  142|  1.02k|    }
_RNvXNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE6insert:
   57|  4.11k|    fn insert(&mut self, elem: u8) {
   58|  4.11k|        if elem < 128 {
   59|  4.11k|            self.half_1.insert(elem)
   60|       |        } else {
   61|      0|            self.half_2.insert(elem - 128)
   62|       |        }
   63|  4.11k|    }
_RNvXsh_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_11SmallSet128NtNtCslATUeuPuGvJ_4core7default7Default7defaultBb_:
   43|  5.14k|#[derive(Default, Clone, Copy, PartialEq, Eq)]
_RNvXNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB2_11SmallSet256INtB2_8SmallSethE9singleton:
   80|  1.02k|    fn singleton(&self) -> Option<u8> {
   81|  1.02k|        if self.half_1.is_empty() {
   82|      0|            self.half_2.singleton().map(|x| x + 128)
   83|  1.02k|        } else if self.half_2.is_empty() {
   84|  1.02k|            self.half_1.singleton()
   85|       |        } else {
   86|      0|            None
   87|       |        }
   88|  1.02k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE6insert:
  114|  4.11k|    fn insert(&mut self, elem: u8) {
  115|  4.11k|        self.bitmask |= 1 << elem;
  116|  4.11k|    }
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB4_11SmallSet128INtB4_8SmallSethE9singleton:
  126|  1.02k|    fn singleton(&self) -> Option<u8> {
  127|  1.02k|        let elem = self.bitmask.trailing_zeros();
  128|  1.02k|        let elem_mask = 1_u128.wrapping_shl(elem);
  129|  1.02k|        let remainder = self.bitmask ^ elem_mask;
  130|  1.02k|
  131|  1.02k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  132|  1.02k|        (remainder == 0).then_some(elem as u8)
  133|  1.02k|    }
_RNvXs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_11SmallSet256INtNtCslATUeuPuGvJ_4core7convert4FromAhj1_E4fromBb_:
  155|    514|    fn from(arr: [u8; N]) -> Self {
  156|    514|        Self::from_iter(arr)
  157|    514|    }
_RNvXs9_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_15SmallSet128IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  225|  11.3k|    fn next(&mut self) -> Option<Self::Item> {
  226|  11.3k|        let next_elem = self.bitmask.trailing_zeros();
  227|  11.3k|
  228|  11.3k|        if next_elem == 128 {
  229|  6.16k|            return None;
  230|  5.14k|        }
  231|  5.14k|
  232|  5.14k|        let elem_mask = 1 << next_elem;
  233|  5.14k|        self.bitmask ^= elem_mask;
  234|  5.14k|
  235|  5.14k|        // CAST: trivially safe as bitmask can have at most 128 zeroes.
  236|  5.14k|        Some(next_elem as u8)
  237|  11.3k|    }
_RINvXs6_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB6_11SmallSet256INtNtNtNtCslATUeuPuGvJ_4core4iter6traits7collect12FromIteratorhE9from_iterAhj1_EBc_:
  189|    514|    fn from_iter<T: IntoIterator<Item = u8>>(iter: T) -> Self {
  190|    514|        let mut result = Self::default();
  191|  1.02k|        for elem in iter {
  192|    514|            result.insert(elem);
  193|    514|        }
  194|    514|        result
  195|    514|    }
_RNvXs8_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB5_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next:
  213|  8.22k|    fn next(&mut self) -> Option<Self::Item> {
  214|  8.22k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))
  215|  8.22k|    }
_RNCNvXs8_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton9small_setNtB7_15SmallSet256IterNtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4next0Bd_:
  214|  3.08k|        self.half_1.next().or_else(|| self.half_2.next().map(|x| x + 128))

_RNvXsn_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  137|  9.70k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvMs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_rejecting:
  108|  9.18k|    pub fn is_rejecting(&self) -> bool {
  109|  9.18k|        self.is_set(StateAttribute::Rejecting)
  110|  9.18k|    }
_RNvMs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributes12is_accepting:
  100|  37.4k|    pub fn is_accepting(&self) -> bool {
  101|  37.4k|        self.is_set(StateAttribute::Accepting)
  102|  37.4k|    }
_RNvMs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributes6is_set:
  131|  56.6k|    fn is_set(&self, attr: StateAttribute) -> bool {
  132|  56.6k|        (self.0 & attr as u8) != 0
  133|  56.6k|    }
_RNvMs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributes27has_transition_to_accepting:
  116|  6.79k|    pub fn has_transition_to_accepting(&self) -> bool {
  117|  6.79k|        self.is_set(StateAttribute::TransitionsToAccepting)
  118|  6.79k|    }
_RNvMs1_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributes10is_unitary:
  125|  3.20k|    pub fn is_unitary(&self) -> bool {
  126|  3.20k|        self.is_set(StateAttribute::Unitary)
  127|  3.20k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder5buildB8_:
   54|  1.54k|    pub(crate) fn build(self) -> StateAttributes {
   55|  1.54k|        self.attrs
   56|  1.54k|    }
_RNvXsj_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_15StateAttributesNtNtCslATUeuPuGvJ_4core7default7Default7defaultBb_:
   28|  1.02k|#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default)]
_RNvXsn_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB5_5StateNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqBb_:
  137|  1.02k|#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
_RNvXs_NtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB4_15StateAttributesINtNtCslATUeuPuGvJ_4core7convert4FromNtB4_22StateAttributesBuilderE4from:
   67|  1.54k|    fn from(value: StateAttributesBuilder) -> Self {
   68|  1.54k|        value.build()
   69|  1.54k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9acceptingB8_:
   38|    514|    pub(crate) fn accepting(self) -> Self {
   39|    514|        self.set(StateAttribute::Accepting)
   40|    514|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3setB8_:
   58|  2.05k|    fn set(self, attr: StateAttribute) -> Self {
   59|  2.05k|        Self {
   60|  2.05k|            attrs: StateAttributes(self.attrs.0 | attr as u8),
   61|  2.05k|        }
   62|  2.05k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder9rejectingB8_:
   42|    514|    pub(crate) fn rejecting(self) -> Self {
   43|    514|        self.set(StateAttribute::Rejecting)
   44|    514|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder3newB8_:
   32|  1.54k|    pub(crate) fn new() -> Self {
   33|  1.54k|        Self {
   34|  1.54k|            attrs: StateAttributes(0),
   35|  1.54k|        }
   36|  1.54k|    }
_RNvMNtNtNtCsjsjhpdplWt_8rsonpath5query9automaton5stateNtB2_22StateAttributesBuilder24transitions_to_acceptingB8_:
   50|  1.02k|    pub(crate) fn transitions_to_accepting(self) -> Self {
   51|  1.02k|        self.set(StateAttribute::TransitionsToAccepting)
   52|  1.02k|    }

_RNvMs_NtNtCsjsjhpdplWt_8rsonpath5query23nonnegative_array_indexNtB4_21NonNegativeArrayIndex13try_incrementCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   53|  8.84k|    pub fn try_increment(&mut self) -> Result<(), ArrayIndexError> {
   54|  8.84k|        let new_index = self.0 + 1;
   55|  8.84k|        if new_index <= JSON_NUMBER_ULIMIT {
   56|  8.84k|            self.0 = new_index;
   57|  8.84k|            Ok(())
   58|       |        } else {
   59|      0|            Err(ArrayIndexError::ExceedsUpperLimitError(new_index.to_string()))
   60|       |        }
   61|  8.84k|    }

_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser26length_limited_array_indexB5_:
  244|  1.02k|fn length_limited_array_index<'a>() -> impl Parser<'a, &'a str> {
  245|  1.02k|    map_res(digit1, |cs: &str| {
  246|       |        if cs.len() > (ARRAY_INDEX_ULIMIT_BASE_10_DIGIT_COUNT + 1) {
  247|       |            Err(ArrayIndexError::ExceedsUpperLimitError(cs.to_owned()))
  248|       |        } else {
  249|       |            Ok(cs)
  250|       |        }
  251|  1.02k|    })
  252|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser19descendant_selector:
  184|    514|fn descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  185|    514|    preceded(
  186|    514|        tag(".."),
  187|    514|        alt((
  188|    514|            map(alt((member(), index_selector())), Token::Descendant),
  189|    514|            array_index_descendant_selector(),
  190|    514|        )),
  191|    514|    )
  192|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser7escapedB5_:
  294|  2.05k|fn escaped<'a>() -> impl Parser<'a, &'a str> {
  295|  2.05k|    alt((
  296|  2.05k|        value("\\b", tag("b")),
  297|  2.05k|        value("\\f", tag("f")),
  298|  2.05k|        value("\\n", tag("n")),
  299|  2.05k|        value("\\r", tag("r")),
  300|  2.05k|        value("\\t", tag("t")),
  301|  2.05k|        value("\\\\", tag("\\")),
  302|  2.05k|        value("/", tag("/")),
  303|  2.05k|    ))
  304|  2.05k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser6memberB5_:
  208|  1.02k|fn member<'a>() -> impl Parser<'a, MemberString<'a>> {
  209|  1.02k|    map(
  210|  1.02k|        recognize(pair(member_first(), many0(member_character()))),
  211|  1.02k|        MemberString::Borrowed,
  212|  1.02k|    )
  213|  1.02k|}
_RNCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser8jsonpath0B7_:
  151|    514|        opt(map(char('$'), |_| Token::Root)), // root selector
_RNCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_first0B7_:
  216|    514|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
_RINvNtNtCsjsjhpdplWt_8rsonpath5query6parser14tokens_to_nodeINtNtNtCshJIxznpEM8j_5alloc3vec9into_iter8IntoIterNtB2_5TokenEEB6_:
  110|  1.02k|fn tokens_to_node<'a, I: Iterator<Item = Token<'a>>>(tokens: &mut I) -> Result<Option<JsonPathQueryNode>, ParserError> {
  111|  1.02k|    match tokens.next() {
  112|    514|        Some(token) => {
  113|    514|            let child_node = tokens_to_node(tokens)?.map(Box::new);
  114|    514|            match token {
  115|      0|                Token::Root => Ok(Some(JsonPathQueryNode::Root(child_node))),
  116|      0|                Token::Child(member) => Ok(Some(JsonPathQueryNode::Child(
  117|      0|                    JsonString::new(member.borrow()),
  118|      0|                    child_node,
  119|      0|                ))),
  120|      0|                Token::ArrayIndexChild(i) => Ok(Some(JsonPathQueryNode::ArrayIndexChild(i, child_node))),
  121|      0|                Token::WildcardChild() => Ok(Some(JsonPathQueryNode::AnyChild(child_node))),
  122|      0|                Token::Descendant(member) => Ok(Some(JsonPathQueryNode::Descendant(
  123|      0|                    JsonString::new(member.borrow()),
  124|      0|                    child_node,
  125|      0|                ))),
  126|      0|                Token::ArrayIndexDescendant(i) => Ok(Some(JsonPathQueryNode::ArrayIndexDescendant(i, child_node))),
  127|    514|                Token::WildcardDescendant() => Ok(Some(JsonPathQueryNode::AnyDescendant(child_node))),
  128|       |            }
  129|       |        }
  130|    514|        _ => Ok(None),
  131|       |    }
  132|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser18parsed_array_indexB5_:
  239|  1.02k|fn parsed_array_index<'a>() -> impl Parser<'a, u64> {
  240|  1.02k|    map_res(length_limited_array_index(), str::parse)
  241|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser23wildcard_child_selectorB5_:
  166|    514|fn wildcard_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  167|    514|    map(alt((dot_wildcard_selector(), index_wildcard_selector())), |_| {
  168|       |        Token::WildcardChild()
  169|    514|    })
  170|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser14child_selector:
  172|    514|fn child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  173|    514|    map(alt((dot_selector(), index_selector())), Token::Child)
  174|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser13quoted_member:
  254|  1.02k|fn quoted_member<'a>() -> impl Parser<'a, MemberString<'a>> {
  255|  1.02k|    alt((
  256|  1.02k|        delimited(
  257|  1.02k|            char('\''),
  258|  1.02k|            map(opt(single_quoted_member()), MemberString::from),
  259|  1.02k|            char('\''),
  260|  1.02k|        ),
  261|  1.02k|        delimited(
  262|  1.02k|            char('"'),
  263|  1.02k|            map(opt(double_quoted_member()), MemberString::from),
  264|  1.02k|            char('"'),
  265|  1.02k|        ),
  266|  1.02k|    ))
  267|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser26array_index_child_selectorB5_:
  223|    514|fn array_index_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  224|    514|    map(array_index_selector(), Token::ArrayIndexChild)
  225|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser8non_root:
  156|    514|fn non_root<'a>() -> impl Parser<'a, Vec<Token<'a>>> {
  157|    514|    many0(alt((
  158|    514|        wildcard_child_selector(),
  159|    514|        child_selector(),
  160|    514|        array_index_child_selector(),
  161|    514|        wildcard_descendant_selector(),
  162|    514|        descendant_selector(),
  163|    514|    )))
  164|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser23index_wildcard_selectorB5_:
  204|  1.02k|fn index_wildcard_selector<'a>() -> impl Parser<'a, char> {
  205|  1.02k|    delimited(char('['), char('*'), char(']'))
  206|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12dot_selectorB5_:
  176|    514|fn dot_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  177|    514|    preceded(char('.'), member())
  178|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser20single_quoted_member:
  269|  1.02k|fn single_quoted_member<'a>() -> impl Parser<'a, String> {
  270|  1.02k|    escaped_transform(
  271|  1.02k|        // If ['"'] is parsed, we want the string to be \", not ", since
  272|  1.02k|        // in a valid JSON document the only way to represent a double quote in a string is with an escape.
  273|  1.02k|        map(
  274|  1.02k|            many1(alt((
  275|  1.02k|                map(unescaped(), MaybeEscapedChar::Char),
  276|  1.02k|                map(char('"'), MaybeEscapedChar::Escaped),
  277|  1.02k|            ))),
  278|  1.02k|            MaybeEscapedCharVec,
  279|  1.02k|        ),
  280|  1.02k|        '\\',
  281|  1.02k|        alt((escaped(), value("'", tag("'")))),
  282|  1.02k|    )
  283|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser28wildcard_descendant_selectorB5_:
  194|    514|fn wildcard_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  195|    514|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|       |        Token::WildcardDescendant()
  197|    514|    })
  198|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser31array_index_descendant_selectorB5_:
  227|    514|fn array_index_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  228|    514|    map(array_index_selector(), Token::ArrayIndexDescendant)
  229|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser14index_selector:
  200|  1.02k|fn index_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  201|  1.02k|    delimited(char('['), quoted_member(), char(']'))
  202|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser9unescapedB5_:
  306|  2.05k|fn unescaped<'a>() -> impl Parser<'a, char> {
  307|  2.05k|    verify(none_of(r#"'"\"#), |&c| u32::from(c) >= 0x20)
  308|  2.05k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser12member_firstB5_:
  215|  1.02k|fn member_first<'a>() -> impl Parser<'a, char> {
  216|  1.02k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
  217|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser16member_characterB5_:
  219|  1.02k|fn member_character<'a>() -> impl Parser<'a, char> {
  220|  1.02k|    verify(anychar, |&x| x.is_alphanumeric() || x == '_' || !x.is_ascii())
  221|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser8jsonpath:
  149|    514|fn jsonpath<'a>() -> impl Parser<'a, (Option<Token<'a>>, Vec<Token<'a>>)> {
  150|    514|    pair(
  151|    514|        opt(map(char('$'), |_| Token::Root)), // root selector
  152|    514|        non_root(),
  153|    514|    )
  154|    514|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser23nonnegative_array_indexB5_:
  235|  1.02k|fn nonnegative_array_index<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  236|  1.02k|    map_res(parsed_array_index(), TryInto::try_into)
  237|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser21dot_wildcard_selectorB5_:
  180|    514|fn dot_wildcard_selector<'a>() -> impl Parser<'a, char> {
  181|    514|    preceded(char('.'), char('*'))
  182|    514|}
_RNCNvNtNtCsjsjhpdplWt_8rsonpath5query6parser28wildcard_descendant_selector0B7_:
  195|    514|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  196|    514|        Token::WildcardDescendant()
  197|    514|    })
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser20double_quoted_member:
  285|  1.02k|fn double_quoted_member<'a>() -> impl Parser<'a, String> {
  286|  1.02k|    escaped_transform(
  287|  1.02k|        recognize(many1(alt((unescaped(), char('\''))))),
  288|  1.02k|        '\\',
  289|  1.02k|        // If ["\""] is parsed the string must be \". Same reason as in single_quoted_member.
  290|  1.02k|        alt((escaped(), value("\\\"", tag("\"")))),
  291|  1.02k|    )
  292|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser20array_index_selectorB5_:
  231|  1.02k|fn array_index_selector<'a>() -> impl Parser<'a, NonNegativeArrayIndex> {
  232|  1.02k|    delimited(char('['), nonnegative_array_index(), char(']'))
  233|  1.02k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath5query6parser21parse_json_path_query:
   68|    514|pub(crate) fn parse_json_path_query(query_string: &str) -> Result<JsonPathQuery, ParserError> {
   69|    514|    let tokens_result = jsonpath()(query_string);
   70|    514|    let finished = tokens_result.finish();
   71|    514|
   72|    514|    match finished {
   73|    514|        Ok(("", (_root_token, tokens))) => {
   74|      0|            debug!("Parsed tokens: {}", {
   75|      0|                use fmt::Write;
   76|      0|                _root_token.map_or(String::new(), |x| format!("{x}"))
   77|      0|                    + &tokens.iter().fold(String::new(), |mut out, x| {
   78|       |                        write!(out, "({x:?})").expect("infallible");
   79|       |                        out
   80|      0|                    })
   81|       |            });
   82|    514|            let node = tokens_to_node(&mut tokens.into_iter())?;
   83|    514|            Ok(match node {
   84|      0|                None => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(None))),
   85|    514|                Some(node) if node.is_root() => JsonPathQuery::new(Box::new(node)),
   86|    514|                Some(node) => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(Some(Box::new(node))))),
   87|       |            })
   88|       |        }
   89|       |        _ => {
   90|      0|            let mut parse_errors = ParseErrorReport::new();
   91|      0|            let mut continuation = finished.map(|x| x.0);
   92|      0|            loop {
   93|      0|                match continuation {
   94|      0|                    Ok("") => return Err(ParserError::SyntaxError { report: parse_errors }),
   95|      0|                    Ok(remaining) => {
   96|      0|                        let error_character_index = query_string.len() - remaining.len();
   97|      0|                        parse_errors.record_at(error_character_index);
   98|      0|                        let next_char_boundary = (1..=4)
   99|      0|                            .find(|x| remaining.is_char_boundary(*x))
  100|      0|                            .expect("longest UTF8 char is 4 bytes");
  101|      0|                        continuation = non_root()(&remaining[next_char_boundary..]).finish().map(|x| x.0);
  102|      0|                    }
  103|      0|                    Err(e) => return Err(nom::error::Error::new(query_string.to_owned(), e.code).into()),
  104|       |                }
  105|       |            }
  106|       |        }
  107|       |    }
  108|    514|}

_RNvXsa_NtCsjsjhpdplWt_8rsonpath6resultNtB5_15MatchedNodeTypeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  189|  14.3k|#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy)]
_RNvXs2_NtCsjsjhpdplWt_8rsonpath6resultINtNtCshJIxznpEM8j_5alloc3vec3VecNtB5_5MatchEINtB5_4SinkB17_E9add_matchCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  144|  9.47k|    fn add_match(&mut self, data: D) -> Result<(), Infallible> {
  145|  9.47k|        self.push(data);
  146|  9.47k|        Ok(())
  147|  9.47k|    }

_RNvXs0_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB13_E23record_value_terminatorCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   59|  13.0k|    fn record_value_terminator(&self, idx: usize, depth: Depth) -> Result<(), EngineError> {
   60|  13.0k|        self.internal
   61|  13.0k|            .borrow_mut()
   62|  13.0k|            .record_value_terminator(idx, depth)
   63|  13.0k|            .map_err(|err| EngineError::SinkError(Box::new(err)))
   64|  13.0k|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  222|  1.28k|    fn record_block(&mut self, block: B) {
  223|  1.28k|        if let Some(finished) = self.current_block.as_ref() {
  224|    771|            if let Some(node) = self.node.as_mut() {
  225|      0|                debug!("Continuing node, idx is {}", self.idx);
  226|    600|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  227|    171|            }
  228|       |
  229|    771|            self.idx += finished.len();
  230|    514|        }
  231|       |
  232|  1.28k|        self.current_block = Some(block);
  233|      0|        debug!("New block, idx = {}", self.idx);
  234|  1.28k|    }
_RNvNtNtCsjsjhpdplWt_8rsonpath6result5nodes13finalize_node:
  433|  14.3k|fn finalize_node(buf: &mut Vec<u8>, ty: MatchedNodeType) {
  434|      0|    debug!("Finalizing node");
  435|       |
  436|  14.3k|    if ty == MatchedNodeType::Atomic {
  437|       |        // Atomic nodes are finished when the next structural character is matched.
  438|       |        // The buffer includes that character and all preceding whitespace.
  439|       |        // We need to remove it before saving the result.
  440|  11.1k|        if buf.len() <= 1 {
  441|       |            // This should never happen in a valid JSON, but we also don't want to panic if the file is invalid.
  442|  7.07k|            buf.truncate(0)
  443|       |        } else {
  444|  4.07k|            let mut i = buf.len() - 2;
  445|  6.64k|            while is_json_whitespace(buf[i]) {
  446|  2.56k|                i -= 1;
  447|  2.56k|            }
  448|       |
  449|  4.07k|            buf.truncate(i + 1);
  450|       |        }
  451|  3.20k|    }
  452|  14.3k|}
_RNvMs3_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  347|  14.6k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  348|  14.6k|        let node = PartialNode {
  349|  14.6k|            id: self.match_count,
  350|  14.6k|            start_idx: idx,
  351|  14.6k|            start_depth: depth,
  352|  14.6k|            buf: vec![],
  353|  14.6k|            ty,
  354|  14.6k|        };
  355|       |
  356|      0|        debug!("New node {node:?}");
  357|  14.6k|        self.match_count += 1;
  358|  14.6k|        self.stack.push(node);
  359|  14.6k|    }
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  185|  13.0k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  186|  13.0k|        match self {
  187|  7.43k|            Self::Simple(r) => r.record_value_terminator(idx, depth),
  188|  5.61k|            Self::Stack(r) => r.record_value_terminator(idx, depth),
  189|      0|            Self::Transition => unreachable!(),
  190|       |        }
  191|  13.0k|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE18transform_to_stackCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  283|    237|    fn transform_to_stack(self) -> StackRecorder<'s, B, S> {
  284|    237|        match self.node {
  285|    237|            Some(node) => StackRecorder {
  286|    237|                idx: self.idx,
  287|    237|                match_count: 1,
  288|    237|                current_block: self.current_block,
  289|    237|                stack: vec![PartialNode {
  290|    237|                    id: 0,
  291|    237|                    start_idx: node.start_idx,
  292|    237|                    start_depth: node.start_depth,
  293|    237|                    buf: node.buf,
  294|    237|                    ty: node.ty,
  295|    237|                }],
  296|    237|                output_queue: OutputQueue::new(),
  297|    237|                sink: self.sink,
  298|    237|            },
  299|      0|            None => StackRecorder {
  300|      0|                idx: self.idx,
  301|      0|                match_count: 0,
  302|      0|                current_block: self.current_block,
  303|      0|                stack: vec![],
  304|      0|                output_queue: OutputQueue::new(),
  305|      0|                sink: self.sink,
  306|      0|            },
  307|       |        }
  308|    237|    }
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  156|  1.97k|    fn record_block(&mut self, block: B) {
  157|  1.97k|        match self {
  158|  1.28k|            Self::Simple(r) => r.record_block(block),
  159|    688|            Self::Stack(r) => r.record_block(block),
  160|      0|            Self::Transition => unreachable!(),
  161|       |        }
  162|  1.97k|    }
_RNvMs3_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_blockCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  333|    688|    fn record_block(&mut self, block: B) {
  334|    688|        if let Some(finished) = self.current_block.as_ref() {
  335|  56.2k|            for node in &mut self.stack {
  336|      0|                debug!("Continuing node: {node:?}, idx is {}", self.idx);
  337|  55.5k|                append_block(&mut node.buf, finished, self.idx, node.start_idx)
  338|       |            }
  339|       |
  340|    688|            self.idx += finished.len();
  341|      0|        }
  342|       |
  343|    688|        self.current_block = Some(block);
  344|      0|        debug!("New block, idx = {}", self.idx);
  345|    688|    }
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  151|    514|    fn new(sink: &'s mut S) -> Self {
  152|    514|        Self::Simple(SimpleRecorder::new(sink))
  153|    514|    }
_RNvXs0_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEEINtB7_8RecorderB13_E12record_matchCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   52|  21.9k|    fn record_match(&self, idx: usize, depth: Depth, ty: MatchedNodeType) -> Result<(), EngineError> {
   53|      0|        debug!("Recording match at {idx}");
   54|  21.9k|        self.internal.borrow_mut().record_match(idx, depth, ty);
   55|  21.9k|        Ok(())
   56|  21.9k|    }
_RNvXs_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB4_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB6_5MatchEEINtB6_13InputRecorderB12_E18record_block_startCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   41|  1.97k|    fn record_block_start(&self, new_block: B) {
   42|  1.97k|        self.internal.borrow_mut().record_block(new_block)
   43|  1.97k|    }
_RNvNtNtCsjsjhpdplWt_8rsonpath6result5nodes18append_final_block:
  420|  14.3k|fn append_final_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize, read_end: usize) {
  421|  14.3k|    debug_assert!(read_end >= src_start);
  422|  14.3k|    let in_block_start = if read_start > src_start {
  423|  11.0k|        read_start - src_start
  424|       |    } else {
  425|  3.25k|        0
  426|       |    };
  427|  14.3k|    let in_block_end = read_end - src_start;
  428|  14.3k|
  429|  14.3k|    dest.extend(&src[in_block_start..in_block_end]);
  430|  14.3k|}
_RNvNtNtCsjsjhpdplWt_8rsonpath6result5nodes12append_block:
  404|  56.1k|fn append_block(dest: &mut Vec<u8>, src: &[u8], src_start: usize, read_start: usize) {
  405|  56.1k|    if read_start >= src_start + src.len() {
  406|    230|        return;
  407|  55.9k|    }
  408|       |
  409|  55.9k|    let to_extend = if read_start > src_start {
  410|  10.2k|        let in_block_start = read_start - src_start;
  411|  10.2k|        &src[in_block_start..]
  412|       |    } else {
  413|  45.6k|        src
  414|       |    };
  415|       |
  416|  55.9k|    dest.extend(to_extend);
  417|  56.1k|}
_RNvMs1_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_16InternalRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE12record_matchCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  165|  21.9k|    fn record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) {
  166|  21.9k|        match self {
  167|  7.57k|            Self::Simple(simple) => {
  168|  7.57k|                if !simple.try_record_match(idx, depth, ty) {
  169|    237|                    let simple = match std::mem::replace(self, Self::Transition) {
  170|    237|                        Self::Simple(s) => s,
  171|      0|                        Self::Stack(_) | Self::Transition => unreachable!(),
  172|       |                    };
  173|    237|                    let mut stack = simple.transform_to_stack();
  174|    237|                    stack.record_match(idx, depth, ty);
  175|    237|                    *self = Self::Stack(stack);
  176|  7.33k|                }
  177|       |            }
  178|  14.4k|            Self::Stack(stack) => stack.record_match(idx, depth, ty),
  179|      0|            Self::Transition => unreachable!(),
  180|       |        }
  181|  21.9k|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB2_13NodesRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB4_5MatchEE14build_recorderCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   28|    514|    pub(crate) fn build_recorder(sink: &'s mut S) -> Self {
   29|    514|        Self {
   30|    514|            internal: RefCell::new(InternalRecorder::new(sink)),
   31|    514|        }
   32|    514|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE16try_record_matchCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  266|  7.57k|    fn try_record_match(&mut self, idx: usize, depth: Depth, ty: MatchedNodeType) -> bool {
  267|  7.57k|        if self.node.is_some() {
  268|      0|            debug!("nested match detected, switching to stack");
  269|    237|            return false;
  270|  7.33k|        }
  271|  7.33k|
  272|  7.33k|        let node = SimplePartialNode {
  273|  7.33k|            start_idx: idx,
  274|  7.33k|            start_depth: depth,
  275|  7.33k|            buf: vec![],
  276|  7.33k|            ty,
  277|  7.33k|        };
  278|  7.33k|        self.node = Some(node);
  279|  7.33k|
  280|  7.33k|        true
  281|  7.57k|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  236|  7.43k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  237|      0|        debug!("Value terminator at {idx}, depth {depth}");
  238|  7.43k|        if let Some(node) = self.node.as_ref() {
  239|  7.19k|            if node.start_depth >= depth {
  240|  6.99k|                let mut node = self.node.take().expect("node is Some");
  241|      0|                debug!("Mark node as ended at {}", idx + 1);
  242|       |                append_final_block(
  243|  6.99k|                    &mut node.buf,
  244|  6.99k|                    self.current_block
  245|  6.99k|                        .as_ref()
  246|  6.99k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  247|  6.99k|                    self.idx,
  248|  6.99k|                    node.start_idx,
  249|  6.99k|                    idx + 1,
  250|  6.99k|                );
  251|  6.99k|                finalize_node(&mut node.buf, node.ty);
  252|       |
  253|      0|                debug!("Committing and outputting node");
  254|  6.99k|                self.sink
  255|  6.99k|                    .add_match(Match {
  256|  6.99k|                        span_start: node.start_idx,
  257|  6.99k|                        bytes: node.buf,
  258|  6.99k|                    })
  259|  6.99k|                    .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  260|    195|            }
  261|    242|        }
  262|       |
  263|  7.43k|        Ok(())
  264|  7.43k|    }
_RNvMs3_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_13StackRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE23record_value_terminatorCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  362|  5.61k|    fn record_value_terminator(&mut self, idx: usize, depth: Depth) -> Result<(), EngineError> {
  363|      0|        debug!("Value terminator at {idx}, depth {depth}");
  364|  12.9k|        while let Some(node) = self.stack.last() {
  365|  12.0k|            if node.start_depth >= depth {
  366|      0|                debug!("Mark node {node:?} as ended at {}", idx + 1);
  367|  7.35k|                let mut node = self.stack.pop().expect("last was Some, pop must succeed");
  368|  7.35k|                append_final_block(
  369|  7.35k|                    &mut node.buf,
  370|  7.35k|                    self.current_block
  371|  7.35k|                        .as_ref()
  372|  7.35k|                        .ok_or(EngineError::MissingOpeningCharacter())?,
  373|  7.35k|                    self.idx,
  374|  7.35k|                    node.start_idx,
  375|  7.35k|                    idx + 1,
  376|  7.35k|                );
  377|  7.35k|                finalize_node(&mut node.buf, node.ty);
  378|       |
  379|      0|                debug!("Committing node: {node:?}");
  380|  7.35k|                self.output_queue.insert(
  381|  7.35k|                    node.id,
  382|  7.35k|                    Match {
  383|  7.35k|                        span_start: node.start_idx,
  384|  7.35k|                        bytes: node.buf,
  385|  7.35k|                    },
  386|  7.35k|                );
  387|       |            } else {
  388|  4.72k|                break;
  389|       |            }
  390|       |        }
  391|       |
  392|  5.61k|        if self.stack.is_empty() {
  393|      0|            debug!("Outputting batch of nodes.");
  394|    890|            self.output_queue
  395|    890|                .output_to(self.sink)
  396|    890|                .map_err(|err| EngineError::SinkError(Box::new(err)))?;
  397|  4.72k|        }
  398|       |
  399|  5.61k|        Ok(())
  400|  5.61k|    }
_RNvMs2_NtNtCsjsjhpdplWt_8rsonpath6result5nodesINtB5_14SimpleRecorderRShINtNtCshJIxznpEM8j_5alloc3vec3VecNtB7_5MatchEE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
  213|    514|    fn new(sink: &'s mut S) -> Self {
  214|    514|        Self {
  215|    514|            idx: 0,
  216|    514|            current_block: None,
  217|    514|            node: None,
  218|    514|            sink,
  219|    514|        }
  220|    514|    }

_RNvMNtNtCsjsjhpdplWt_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE3newCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   18|    237|    pub(super) fn new() -> Self {
   19|    237|        Self {
   20|    237|            offset: 0,
   21|    237|            nodes: vec![],
   22|    237|        }
   23|    237|    }
_RNvMNtNtCsjsjhpdplWt_8rsonpath6result12output_queueINtB2_11OutputQueueNtB4_5MatchE6insertCs346dUKc5pUh_20fuzz_arbitrary_bytes:
   29|  7.35k|    pub(super) fn insert(&mut self, id: usize, node: D) {
   30|  7.35k|        let actual_idx = id - self.offset;
   31|       |
   32|  19.7k|        while self.nodes.len() <= actual_idx {
   33|  12.4k|            self.nodes.push(None);
   34|  12.4k|        }
   35|       |
   36|  7.35k|        self.nodes[actual_idx] = Some(node);
   37|  7.35k|    }
_RINvMNtNtCsjsjhpdplWt_8rsonpath6result12output_queueINtB3_11OutputQueueNtB5_5MatchE9output_toINtNtCshJIxznpEM8j_5alloc3vec3VecB17_EECs346dUKc5pUh_20fuzz_arbitrary_bytes:
   52|    890|    pub(super) fn output_to<S>(&mut self, sink: &mut S) -> Result<(), S::Error>
   53|    890|    where
   54|    890|        S: Sink<D>,
   55|    890|    {
   56|    890|        self.offset += self.nodes.len();
   57|       |
   58|  2.48k|        for node in self.nodes.drain(..) {
   59|  2.48k|            sink.add_match(node.expect("output_to called only after all matches are complete"))?;
   60|       |        }
   61|       |
   62|    890|        Ok(())
   63|    890|    }

_RNCNvXNvCs346dUKc5pUh_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCsgcr0VdWlExs_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   18|    514|#[derive(Arbitrary)]
_RNvXNvCs346dUKc5pUh_20fuzz_arbitrary_bytess_1__NtB4_16DisplayableBytesNtCsgcr0VdWlExs_9arbitrary9Arbitrary19arbitrary_take_rest:
   18|  1.54k|#[derive(Arbitrary)]
_RNCNvXNvCs346dUKc5pUh_20fuzz_arbitrary_bytess_1__NtB6_16DisplayableBytesNtCsgcr0VdWlExs_9arbitrary9Arbitrary9size_hint0B6_:
   18|    514|#[derive(Arbitrary)]

