_RNvXsa_Cs6flZAYNibw_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsiia64awkvAv_15rsonpath_syntax7SegmentENtB5_9Arbitrary9size_hintCsjFsYkclhB5D_21query_fuzz_round_trip:
  688|    695|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    695|        (0, None)
  690|    695|    }
_RNvXsa_Cs6flZAYNibw_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsiia64awkvAv_15rsonpath_syntax7SegmentENtB5_9Arbitrary19arbitrary_take_restB11_:
  683|    695|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|    695|        u.arbitrary_take_rest_iter()?.collect()
  685|    695|    }
_RNvXs5_Cs6flZAYNibw_9arbitraryINtNtCslATUeuPuGvJ_4core6option6OptionNtCsiia64awkvAv_15rsonpath_syntax5IndexENtB5_9Arbitrary9arbitraryB16_:
  531|  4.32k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  4.32k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  3.52k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    803|            None
  536|       |        })
  537|  4.32k|    }
_RNvXsa_Cs6flZAYNibw_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsiia64awkvAv_15rsonpath_syntax8SelectorENtB5_9Arbitrary9arbitraryB11_:
  679|  6.17k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  6.17k|        u.arbitrary_iter()?.collect()
  681|  6.17k|    }
_RNvXs0_Cs6flZAYNibw_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  41.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  41.9k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  41.9k|        if let Some(c) = char::from_u32(c) {
  376|  41.2k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    732|            c -= SURROGATES_START;
  380|    732|            Ok(char::from_u32(c)
  381|    732|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  41.9k|    }
_RNvXs_Cs6flZAYNibw_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  85.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  85.3k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  85.3k|    }
_RNvXsK_Cs6flZAYNibw_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  70.1k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  70.1k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  70.1k|                    u.fill_buffer(&mut buf)?;
  312|  70.1k|                    let mut x: $unsigned = 0;
  313|   280k|                    for i in 0..mem::size_of::<$ty>() {
  314|   280k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   280k|                    }
  316|  70.1k|                    Ok(x as $ty)
  317|  70.1k|                }
_RNvXsI_Cs6flZAYNibw_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  85.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  85.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  85.3k|                    u.fill_buffer(&mut buf)?;
  312|  85.3k|                    let mut x: $unsigned = 0;
  313|  85.3k|                    for i in 0..mem::size_of::<$ty>() {
  314|  85.3k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  85.3k|                    }
  316|  85.3k|                    Ok(x as $ty)
  317|  85.3k|                }

_RNvNtCs6flZAYNibw_9arbitrary9size_hint3andCsjFsYkclhB5D_21query_fuzz_round_trip:
   26|    695|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    695|    let lower = lhs.0 + rhs.0;
   28|    695|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    695|    (lower, upper)
   30|    695|}
_RNvNtCs6flZAYNibw_9arbitrary9size_hint7and_allCsjFsYkclhB5D_21query_fuzz_round_trip:
   37|    695|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    695|    hints.iter().copied().fold((0, Some(0)), and)
   39|    695|}
_RINvNtCs6flZAYNibw_9arbitrary9size_hint15recursion_guardNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs1_1__NtBZ_13JsonPathQueryNtB4_9Arbitrary9size_hint0ECsjFsYkclhB5D_21query_fuzz_round_trip:
   12|    695|pub fn recursion_guard(
   13|    695|    depth: usize,
   14|    695|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    695|) -> (usize, Option<usize>) {
   16|    695|    const MAX_DEPTH: usize = 20;
   17|    695|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    695|        f(depth + 1)
   21|       |    }
   22|    695|}
_RNCNvNtCs6flZAYNibw_9arbitrary9size_hint3and0CsjFsYkclhB5D_21query_fuzz_round_trip:
   28|    695|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3newCsjFsYkclhB5D_21query_fuzz_round_trip:
   85|    695|    pub fn new(data: &'a [u8]) -> Self {
   86|    695|        Unstructured { data }
   87|    695|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3lenCsiia64awkvAv_15rsonpath_syntax:
  108|  33.1k|    pub fn len(&self) -> usize {
  109|  33.1k|        self.data.len()
  110|  33.1k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implxINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterhEEECsiia64awkvAv_15rsonpath_syntax:
  302|  15.1k|    fn int_in_range_impl<T>(
  303|  15.1k|        range: ops::RangeInclusive<T>,
  304|  15.1k|        mut bytes: impl Iterator<Item = u8>,
  305|  15.1k|    ) -> Result<(T, usize)>
  306|  15.1k|    where
  307|  15.1k|        T: Int,
  308|  15.1k|    {
  309|  15.1k|        let start = *range.start();
  310|  15.1k|        let end = *range.end();
  311|  15.1k|        assert!(
  312|  15.1k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  15.1k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  15.1k|        }
  321|  15.1k|
  322|  15.1k|        // From here on out we work with the unsigned representation. All of the
  323|  15.1k|        // operations performed below work out just as well whether or not `T`
  324|  15.1k|        // is a signed or unsigned integer.
  325|  15.1k|        let start = start.to_unsigned();
  326|  15.1k|        let end = end.to_unsigned();
  327|  15.1k|
  328|  15.1k|        let delta = end.wrapping_sub(start);
  329|  15.1k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  15.1k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  15.1k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   119k|        while (bytes_consumed < mem::size_of::<T>())
  339|   119k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   104k|            let byte = match bytes.next() {
  342|    238|                None => break,
  343|   104k|                Some(b) => b,
  344|   104k|            };
  345|   104k|            bytes_consumed += 1;
  346|   104k|
  347|   104k|            // Combine this byte into our arbitrary integer, but avoid
  348|   104k|            // overflowing the shift for `u8` and `i8`.
  349|   104k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   104k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  15.1k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  15.1k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  15.1k|        let result = start.wrapping_add(offset);
  365|  15.1k|
  366|  15.1k|        // And convert back to our maybe-signed representation.
  367|  15.1k|        let result = T::from_unsigned(result);
  368|  15.1k|        debug_assert!(*range.start() <= result);
  369|  15.1k|        debug_assert!(result <= *range.end());
  370|       |
  371|  15.1k|        Ok((result, bytes_consumed))
  372|  15.1k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsiia64awkvAv_15rsonpath_syntax8SelectorEEB1I_:
  167|  6.17k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  6.17k|    where
  169|  6.17k|        A: Arbitrary<'a>,
  170|  6.17k|    {
  171|  6.17k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  6.17k|    }
_RNvXsa_NtCs6flZAYNibw_9arbitrary12unstructuredxNtB5_3Int13from_unsignedCsiia64awkvAv_15rsonpath_syntax:
  845|  15.1k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  15.1k|                    unsigned as Self
  847|  15.1k|                }
_RNvXs_NtCs6flZAYNibw_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsiia64awkvAv_15rsonpath_syntax8SelectorENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB14_:
  720|  21.9k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  21.9k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  21.9k|        if keep_going {
  723|  15.7k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  6.17k|            None
  726|       |        }
  727|  21.9k|    }
_RNvXs_NtCs6flZAYNibw_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCsiia64awkvAv_15rsonpath_syntax:
  720|  52.1k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  52.1k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  52.1k|        if keep_going {
  723|  41.9k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  10.2k|            None
  726|       |        }
  727|  52.1k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsiia64awkvAv_15rsonpath_syntax:
  167|  81.0k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  81.0k|    where
  169|  81.0k|        A: Arbitrary<'a>,
  170|  81.0k|    {
  171|  81.0k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  81.0k|    }
_RNvXs0_NtCs6flZAYNibw_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsiia64awkvAv_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1d_:
  738|  6.87k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  6.87k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  6.87k|        if keep_going {
  741|  6.17k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|    695|            None
  744|       |        }
  745|  6.87k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int10from_usizeCsiia64awkvAv_15rsonpath_syntax:
  825|   119k|                fn from_usize(u: usize) -> Self {
  826|   119k|                    u as Self
  827|   119k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECsiia64awkvAv_15rsonpath_syntax:
  606|  10.2k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  10.2k|        &'b mut self,
  608|  10.2k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  10.2k|        Ok(ArbitraryIter {
  610|  10.2k|            u: &mut *self,
  611|  10.2k|            _marker: PhantomData,
  612|  10.2k|        })
  613|  10.2k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsiia64awkvAv_15rsonpath_syntax:
  132|  33.1k|    pub fn is_empty(&self) -> bool {
  133|  33.1k|        self.len() == 0
  134|  33.1k|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int7from_u8Csiia64awkvAv_15rsonpath_syntax:
  821|   104k|                fn from_u8(b: u8) -> Self {
  822|   104k|                    b as Self
  823|   104k|                }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCsiia64awkvAv_15rsonpath_syntax:
  837|  15.1k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  15.1k|                    <$ty>::wrapping_sub(self, rhs)
  839|  15.1k|                }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCsiia64awkvAv_15rsonpath_syntax:
  833|  15.1k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  15.1k|                    <$ty>::wrapping_add(self, rhs)
  835|  15.1k|                }
_RNvXsa_NtCs6flZAYNibw_9arbitrary12unstructuredxNtB5_3Int11to_unsignedCsiia64awkvAv_15rsonpath_syntax:
  841|  30.2k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  30.2k|                    self as $unsigned_ty
  843|  30.2k|                }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNtCsiia64awkvAv_15rsonpath_syntax3num7JsonIntEB1d_:
  167|  15.1k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  15.1k|    where
  169|  15.1k|        A: Arbitrary<'a>,
  170|  15.1k|    {
  171|  15.1k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  15.1k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsiia64awkvAv_15rsonpath_syntax8SelectorEB1b_:
  167|  6.17k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  6.17k|    where
  169|  6.17k|        A: Arbitrary<'a>,
  170|  6.17k|    {
  171|  6.17k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  6.17k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangexECsiia64awkvAv_15rsonpath_syntax:
  293|  15.1k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  15.1k|    where
  295|  15.1k|        T: Int,
  296|  15.1k|    {
  297|  15.1k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  15.1k|        self.data = &self.data[bytes_consumed..];
  299|  15.1k|        Ok(result)
  300|  15.1k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsiia64awkvAv_15rsonpath_syntax8SelectorEB1h_:
  606|  6.17k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  6.17k|        &'b mut self,
  608|  6.17k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  6.17k|        Ok(ArbitraryIter {
  610|  6.17k|            u: &mut *self,
  611|  6.17k|            _marker: PhantomData,
  612|  6.17k|        })
  613|  6.17k|    }
_RINvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsiia64awkvAv_15rsonpath_syntax7SegmentEB1r_:
  620|    695|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|    695|        self,
  622|    695|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|    695|        Ok(ArbitraryTakeRestIter {
  624|    695|            u: self,
  625|    695|            _marker: PhantomData,
  626|    695|        })
  627|    695|    }
_RNvXs4_NtCs6flZAYNibw_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  15.1k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  15.1k|                    <$ty>::checked_add(self, rhs)
  831|  15.1k|                }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   155k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   155k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   155k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   155k|        for byte in buffer[n..].iter_mut() {
  525|  3.23k|            *byte = 0;
  526|  3.23k|        }
  527|   155k|        self.data = &self.data[n..];
  528|   155k|        Ok(())
  529|   155k|    }

_RNvMs_Cs1IVhUpAZS7v_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsjFsYkclhB5D_21query_fuzz_round_trip:
   40|    695|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    695|        match self {
   42|    695|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    695|    }
rust_fuzzer_test_input:
  259|    695|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    695|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    695|
  262|    695|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    695|                // implementation. This helps the fuzzer avoid exploring all the
  264|    695|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    695|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    695|                // get to longer inputs that actually lead to interesting executions
  267|    695|                // quicker.
  268|    695|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    695|                }
  271|    695|
  272|    695|                let mut u = Unstructured::new(bytes);
  273|    695|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    695|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    695|                }
  291|       |
  292|    695|                let data = match data {
  293|    695|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    695|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    695|                result.to_libfuzzer_code()
  299|    695|            }
_RNvNvCsjFsYkclhB5D_21query_fuzz_round_trip1__19___libfuzzer_sys_run:
  303|    695|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    695|                $body
  305|    695|            }
_RNvXCs1IVhUpAZS7v_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCsjFsYkclhB5D_21query_fuzz_round_trip:
   30|    695|    fn from(_: ()) -> Self {
   31|    695|        Self::Keep
   32|    695|    }
LLVMFuzzerTestOneInput:
   58|    695|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    695|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    695|    });
   63|    695|
   64|    695|    match test_input {
   65|    695|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    695|}
_RNCNvCs1IVhUpAZS7v_13libfuzzer_sys15test_input_wrap0B3_:
   59|    695|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    695|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    695|        rust_fuzzer_test_input(data_slice)
   62|    695|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNvNtBB_6parser18descendant_segmentNvB1O_13child_segmentNCINvB1O_14failed_segmentBz_E0EEBB_:
   47|  6.17k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  6.17k|  mut l: List,
   49|  6.17k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  6.17k|}
_RNvXs2_NtCsijflsOnQTe0_3nom6branchTNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14slice_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|  21.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  21.9k|        match self.0.parse(input.clone()) {
  136|  11.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  10.2k|          res => res,
  138|       |        }
  139|  21.9k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|  2.94k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.94k|  mut l: List,
   49|  2.94k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.94k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB6_8sequence8precededRecNtBA_9SelectorsNtNtBA_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1Z_B2h_E0NCINvNtB6_10combinator3cutB1Z_B22_B2h_NCINvB4_3altB1Z_B22_B2h_TNCINvB3D_3mapB1Z_NtBA_8SelectorB22_B2h_NvBy_17wildcard_selectorNvMsf_BA_B22_3oneE0NvBy_21member_name_shorthandNCINvBy_14failed_segmentB22_E0EE0E0E0EINtB4_3AltB1Z_B22_B2h_E6choiceBA_:
  134|  2.94k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.94k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  2.94k|          res => res,
  138|       |        }
  139|  2.94k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMsf_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|  3.22k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|  21.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  21.9k|  mut l: List,
   49|  21.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  21.9k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|  18.8k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  18.8k|  mut l: List,
   49|  18.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  18.8k|}
_RNvXs1_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB7_10combinator3mapReNtBB_8SelectorNtBB_9SelectorsNtNtBB_5error18InternalParseErrorNvBz_17wildcard_selectorNvMsf_BB_B2e_3oneE0NvBz_21member_name_shorthandNCINvBz_14failed_segmentB2e_E0EINtB5_3AltB1Y_B2e_B2t_E6choiceBB_:
  134|  3.22k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  3.22k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.22k|          res => res,
  138|       |        }
  139|  3.22k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReBz_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|  18.8k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNvNtBD_6parser18descendant_segmentNvB1Q_13child_segmentNCINvB1Q_14failed_segmentBB_E0EE0BD_:
   50|  6.17k|  move |i: I| l.choice(i)
_RNvXs0_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segmentNvBz_13child_segmentNCINvBz_14failed_segmentNtBB_7SegmentE0EINtB5_3AltReB2f_NtNtBB_5error18InternalParseErrorE6choiceBB_:
  134|  6.17k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  6.17k|        match self.0.parse(input.clone()) {
  136|  2.94k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.22k|          res => res,
  138|       |        }
  139|  6.17k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3Q_3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMsf_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  2.94k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3O_3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  2.94k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.94k|  mut l: List,
   49|  2.94k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.94k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  18.8k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  18.8k|        match self.0.parse(input.clone()) {
  136|  11.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.74k|          res => res,
  138|       |        }
  139|  18.8k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14slice_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NvB1S_15failed_selectorEEBB_:
   47|  21.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  21.9k|  mut l: List,
   49|  21.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  21.9k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|  6.17k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  6.17k|  mut l: List,
   49|  6.17k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  6.17k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14slice_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NvB1U_15failed_selectorEE0BD_:
   50|  21.9k|  move |i: I| l.choice(i)
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|  21.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  21.9k|        match self.0.parse(input.clone()) {
  136|  11.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  10.2k|          res => res,
  138|       |        }
  139|  21.9k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|  21.9k|  move |i: I| l.choice(i)

_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBH_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  17.9k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  17.9k|  tag: T,
   34|  17.9k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  17.9k|where
   36|  17.9k|  Input: InputTake + Compare<T>,
   37|  17.9k|  T: InputLength + Clone,
   38|  17.9k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  17.9k|}
_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBJ_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|  17.9k|  move |i: Input| {
   40|  17.9k|    let tag_len = tag.input_len();
   41|  17.9k|    let t = tag.clone();
   42|  17.9k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  7.67k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  10.2k|        let e: ErrorKind = ErrorKind::Tag;
   46|  10.2k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  17.9k|    res
   50|  17.9k|  }

_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsiia64awkvAv_15rsonpath_syntax:
   32|  28.8k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  28.8k|where
   34|  28.8k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  28.8k|  <I as InputIter>::Item: AsChar,
   36|  28.8k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  28.8k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|  70.3k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  70.3k|  }) {
   41|  32.7k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  37.6k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  70.3k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  83.5k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  83.5k|where
   34|  83.5k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  83.5k|  <I as InputIter>::Item: AsChar,
   36|  83.5k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  83.5k|}
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|  70.3k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  70.3k|    let b = t.as_char() == c;
   39|  70.3k|    (&c, b)
   40|  70.3k|  }) {
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Csiia64awkvAv_15rsonpath_syntax:
   37|  28.8k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  28.8k|  }) {
   41|  22.6k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  6.17k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  28.8k|  }
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Csiia64awkvAv_15rsonpath_syntax:
   37|  28.8k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  28.8k|    let b = t.as_char() == c;
   39|  28.8k|    (&c, b)
   40|  28.8k|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|  18.8k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|  18.8k|where
  437|  18.8k|  T: InputTakeAtPosition,
  438|  18.8k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|  18.8k|{
  440|  18.8k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|  18.8k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   297k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)

_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1J_TNCINvNtB6_8sequence8precededBE_cBG_B1J_NCINvNtNtB6_9character8complete4charBE_B1J_E0NCNvNtBK_6parser6string0E0B2M_EE0NcNtB1v_4Name0E0BK_:
   78|  21.9k|  move |input: I| {
   79|  21.9k|    let (input, o1) = parser.parse(input)?;
   80|  10.2k|    Ok((input, f(o1)))
   81|  21.9k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBI_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|  18.8k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  18.8k|  mut parser: F,
  508|  18.8k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  18.8k|where
  510|  18.8k|  F: Parser<I, O, E>,
  511|  18.8k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  18.8k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReBC_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  7.29k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  7.29k|where
  241|  7.29k|  F: Parser<I, O, E>,
  242|  7.29k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  7.29k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2o_BE_NvB2q_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  4.32k|  move |input: I| {
  244|  4.32k|    let i = input.clone();
  245|  4.32k|    match f.parse(input) {
  246|  4.26k|      Ok((i, o)) => Ok((i, Some(o))),
  247|     67|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  4.32k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2F_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|  2.94k|  move |input: I| {
   79|  2.94k|    let (input, o1) = parser.parse(input)?;
   80|  2.94k|    Ok((input, f(o1)))
   81|  2.94k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBK_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|  18.8k|  move |input: I| {
  513|  18.8k|    let i = input.clone();
  514|  18.8k|    match parser.parse(i) {
  515|  17.7k|      Ok((i, _)) => {
  516|  17.7k|        let index = input.offset(&i);
  517|  17.7k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  1.05k|      Err(e) => Err(e),
  520|       |    }
  521|  18.8k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNvNtBG_6parser19bracketed_selectionNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2q_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB2q_21member_name_shorthandNCINvB2q_14failed_segmentBE_E0EE0EBG_:
  631|  6.17k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  6.17k|where
  633|  6.17k|  F: Parser<I, O, E>,
  634|  6.17k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  6.17k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMsf_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|  2.94k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  2.94k|where
  633|  2.94k|  F: Parser<I, O, E>,
  634|  2.94k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  2.94k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  7.29k|  move |input: I| {
  244|  7.29k|    let i = input.clone();
  245|  7.29k|    match f.parse(input) {
  246|  7.03k|      Ok((i, o)) => Ok((i, Some(o))),
  247|    254|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  7.29k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCIB0_BC_NtBG_8SelectorBE_B1y_NvB4l_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB4l_21member_name_shorthandNCINvB4l_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|  6.17k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  6.17k|where
   75|  6.17k|  F: Parser<I, O1, E>,
   76|  6.17k|  G: FnMut(O1) -> O2,
   77|  6.17k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  6.17k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1N_3intBJ_E0E0BN_:
  243|  8.59k|  move |input: I| {
  244|  8.59k|    let i = input.clone();
  245|  8.59k|    match f.parse(input) {
  246|  7.78k|      Ok((i, o)) => Ok((i, Some(o))),
  247|    803|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  8.59k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2m_BC_NvB2o_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  4.32k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  4.32k|where
  241|  4.32k|  F: Parser<I, O, E>,
  242|  4.32k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  4.32k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMsf_BG_B1k_3oneEBG_:
   73|  9.12k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  9.12k|where
   75|  9.12k|  F: Parser<I, O1, E>,
   76|  9.12k|  G: FnMut(O1) -> O2,
   77|  9.12k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  9.12k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1H_TNCINvNtB4_8sequence8precededBC_cBE_B1H_NCINvNtNtB4_9character8complete4charBC_B1H_E0NCNvNtBI_6parser6string0E0B2K_EE0NcNtB1t_4Name0EBI_:
   73|  21.9k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  21.9k|where
   75|  21.9k|  F: Parser<I, O1, E>,
   76|  21.9k|  G: FnMut(O1) -> O2,
   77|  21.9k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  21.9k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReBC_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1L_3intBH_E0EBL_:
  239|  8.65k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  8.65k|where
  241|  8.65k|  F: Parser<I, O, E>,
  242|  8.65k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  8.65k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNvNtBI_6parser19bracketed_selectionNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2s_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBG_E0EE0E0BI_:
  635|  3.22k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  3.22k|    rest => rest,
  638|  3.22k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCIB2_BE_NtBI_8SelectorBG_B1A_NvB4n_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|  6.17k|  move |input: I| {
   79|  6.17k|    let (input, o1) = parser.parse(input)?;
   80|  3.22k|    Ok((input, f(o1)))
   81|  6.17k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReBE_NtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  11.7k|  move |input: I| {
   79|  11.7k|    let (input, o1) = parser.parse(input)?;
   80|  4.44k|    Ok((input, f(o1)))
   81|  11.7k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2D_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|  2.94k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  2.94k|where
   75|  2.94k|  F: Parser<I, O1, E>,
   76|  2.94k|  G: FnMut(O1) -> O2,
   77|  2.94k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  2.94k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReBC_NtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  11.7k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  11.7k|where
   75|  11.7k|  F: Parser<I, O1, E>,
   76|  11.7k|  G: FnMut(O1) -> O2,
   77|  11.7k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  11.7k|}

_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsiia64awkvAv_15rsonpath_syntax:
   26|  6.17k|  fn from_char(input: I, _: char) -> Self {
   27|  6.17k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  6.17k|  }
_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE9from_charB6_:
   26|  37.6k|  fn from_char(input: I, _: char) -> Self {
   27|  37.6k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  37.6k|  }
_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE2orB6_:
   32|  23.0k|  fn or(self, other: Self) -> Self {
   33|  23.0k|    other
   34|  23.0k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsiia64awkvAv_15rsonpath_syntax:
   77|  12.7k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  12.7k|    other
   79|  12.7k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsiia64awkvAv_15rsonpath_syntax:
   73|  55.0k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  55.0k|    Error { input, code: kind }
   75|  55.0k|  }

_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB4a_3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMsf_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  2.94k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.94k|    self(i)
  326|  2.94k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsiia64awkvAv_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  6.17k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  6.17k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  6.17k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|  17.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  17.9k|    self(i)
  326|  17.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  18.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.8k|    self(i)
  326|  18.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  10.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.2k|    self(i)
  326|  10.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|  64.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  64.1k|    self(i)
  326|  64.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  21.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.9k|    self(i)
  326|  21.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|  18.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.8k|    self(i)
  326|  18.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  2.96k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.96k|    self(i)
  326|  2.96k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  18.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.8k|    self(i)
  326|  18.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2c_cB1A_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2c_B2Q_E0NCINvNtB7_10combinator3optB2c_B2c_B2Q_NCIBB_B2c_NvBD_3intB2Q_E0E0E0B2Q_E0INtB5_6ParserB2c_B1A_B2Q_E5parseBF_:
  324|  4.32k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.32k|    self(i)
  326|  4.32k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|  11.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.7k|    self(i)
  326|  11.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB27_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  4.26k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.26k|    self(i)
  326|  4.26k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2d_E0INtB5_6ParserB2b_cB2d_E5parseBF_:
  324|  7.29k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.29k|    self(i)
  326|  7.29k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBZ_5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBV_B1K_NCINvNtNtB7_9character8complete4charBT_B1K_E0NCNvNtBZ_6parser6string0E0B2i_EE0INtB5_6ParserBT_BV_B1K_E5parseBZ_:
  324|  21.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.9k|    self(i)
  326|  21.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB4a_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  4.32k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.32k|    self(i)
  326|  4.32k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser3intINtB5_6ParserReB1v_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  15.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  15.8k|    self(i)
  326|  15.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  11.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.7k|    self(i)
  326|  11.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  7.29k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.29k|    self(i)
  326|  7.29k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1A_B1A_B1L_E5parseBF_:
  324|  8.59k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.59k|    self(i)
  326|  8.59k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  6.17k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.17k|    self(i)
  326|  6.17k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  6.17k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.17k|    self(i)
  326|  6.17k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsiia64awkvAv_15rsonpath_syntax:
   36|    695|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|    695|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|    695|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNvNtB18_6parser19bracketed_selectionNCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4g_17wildcard_selectorNvMsf_B18_B16_3oneE0NvB4g_21member_name_shorthandNCINvB4g_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|  6.17k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.17k|    self(i)
  326|  6.17k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser13child_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  2.94k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.94k|    self(i)
  326|  2.94k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|  21.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.9k|    self(i)
  326|  21.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|  33.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  33.7k|    self(i)
  326|  33.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  7.29k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.29k|    self(i)
  326|  7.29k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  2.96k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.96k|    self(i)
  326|  2.96k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNvNtB12_6parser19bracketed_selectionNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2O_17wildcard_selectorNvMsf_B12_B10_3oneE0NvB2O_21member_name_shorthandNCINvB2O_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  3.22k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.22k|    self(i)
  326|  3.22k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsiia64awkvAv_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|  21.9k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  21.9k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  21.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  7.29k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.29k|    self(i)
  326|  7.29k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMsf_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  3.22k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.22k|    self(i)
  326|  3.22k|  }

_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|  33.7k|  move |input: I| {
   72|  33.7k|    let (input, _) = first.parse(input)?;
   73|  10.2k|    second.parse(input)
   74|  33.7k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecBG_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|  18.8k|  move |input: I| {
   72|  18.8k|    let (input, _) = first.parse(input)?;
   73|  7.74k|    second.parse(input)
   74|  18.8k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|  18.8k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  18.8k|  mut first: F,
   65|  18.8k|  mut second: G,
   66|  18.8k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  18.8k|where
   68|  18.8k|  F: Parser<I, O1, E>,
   69|  18.8k|  G: Parser<I, O2, E>,
   70|  18.8k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  18.8k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|  43.9k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  43.9k|  mut first: F,
   65|  43.9k|  mut second: G,
   66|  43.9k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  43.9k|where
   68|  43.9k|  F: Parser<I, O1, E>,
   69|  43.9k|  G: Parser<I, O2, E>,
   70|  43.9k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  43.9k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNvNtBL_6parser19bracketed_selectionNCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3M_17wildcard_selectorNvMsf_BL_BJ_3oneE0NvB3M_21member_name_shorthandNCINvB3M_14failed_segmentBJ_E0EE0E0EBL_:
   63|  6.17k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  6.17k|  mut first: F,
   65|  6.17k|  mut second: G,
   66|  6.17k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  6.17k|where
   68|  6.17k|  F: Parser<I, O1, E>,
   69|  6.17k|  G: Parser<I, O2, E>,
   70|  6.17k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  6.17k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3K_3intB1n_E0E0EB1r_:
   63|  4.32k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  4.32k|  mut first: F,
   65|  4.32k|  mut second: G,
   66|  4.32k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  4.32k|where
   68|  4.32k|  F: Parser<I, O1, E>,
   69|  4.32k|  G: Parser<I, O2, E>,
   70|  4.32k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  4.32k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB33_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  7.29k|  move |input: I| {
  106|  7.29k|    let (input, o1) = first.parse(input)?;
  107|  7.29k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  7.29k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB31_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  7.29k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  7.29k|  mut first: F,
   99|  7.29k|  mut second: G,
  100|  7.29k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  7.29k|where
  102|  7.29k|  F: Parser<I, O1, E>,
  103|  7.29k|  G: Parser<I, O2, E>,
  104|  7.29k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  7.29k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMsf_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|  2.94k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  2.94k|  mut first: F,
   65|  2.94k|  mut second: G,
   66|  2.94k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  2.94k|where
   68|  2.94k|  F: Parser<I, O1, E>,
   69|  2.94k|  G: Parser<I, O2, E>,
   70|  2.94k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  2.94k|}
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB35_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  4.32k|    second.parse(input).map(|(i, _)| (i, o1))
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNvNtBN_6parser19bracketed_selectionNCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3O_17wildcard_selectorNvMsf_BN_BL_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBL_E0EE0E0E0BN_:
   71|  6.17k|  move |input: I| {
   72|  6.17k|    let (input, _) = first.parse(input)?;
   73|  3.22k|    second.parse(input)
   74|  6.17k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3M_3intB1p_E0E0E0B1t_:
   71|  4.32k|  move |input: I| {
   72|  4.32k|    let (input, _) = first.parse(input)?;
   73|  4.26k|    second.parse(input)
   74|  4.32k|  }

_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter13iter_elementsCsiia64awkvAv_15rsonpath_syntax:
  386|  99.1k|  fn iter_elements(&self) -> Self::IterElem {
  387|  99.1k|    self.chars()
  388|  99.1k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar12is_dec_digitCsiia64awkvAv_15rsonpath_syntax:
  253|   297k|  fn is_dec_digit(self) -> bool {
  254|   297k|    self.is_ascii_digit()
  255|   297k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar3lenCsiia64awkvAv_15rsonpath_syntax:
  296|  55.3k|  fn len(self) -> usize {
  297|  55.3k|    self.len_utf8()
  298|  55.3k|  }
_RNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  17.9k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  17.9k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  17.9k|
  742|  17.9k|    match pos {
  743|  10.2k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  7.67k|        if self.len() >= t.len() {
  746|  7.67k|          CompareResult::Ok
  747|       |        } else {
  748|      0|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  17.9k|  }
_RINvXsj_NtCsijflsOnQTe0_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|  18.8k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|  18.8k|    &self,
  677|  18.8k|    predicate: P,
  678|  18.8k|    e: ErrorKind,
  679|  18.8k|  ) -> IResult<Self, Self, E>
  680|  18.8k|  where
  681|  18.8k|    P: Fn(Self::Item) -> bool,
  682|  18.8k|  {
  683|  18.8k|    match self.find(predicate) {
  684|  1.05k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  17.7k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|      0|        if self.is_empty() {
  689|      0|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|      0|            Ok((
  694|      0|              self.get_unchecked(self.len()..),
  695|      0|              self.get_unchecked(..self.len()),
  696|      0|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|  18.8k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar7as_charCsiia64awkvAv_15rsonpath_syntax:
  272|  55.3k|  fn as_char(self) -> char {
  273|  55.3k|    *self
  274|  55.3k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar7as_charCsiia64awkvAv_15rsonpath_syntax:
  241|  99.1k|  fn as_char(self) -> char {
  242|  99.1k|    self
  243|  99.1k|  }
_RNCNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB7_7CompareBy_E7compare0Csiia64awkvAv_15rsonpath_syntax:
  740|  21.1k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXs_NtCsijflsOnQTe0_3nom6traitsReNtB4_11InputLength9input_lenCsiia64awkvAv_15rsonpath_syntax:
   33|  17.9k|  fn input_len(&self) -> usize {
   34|  17.9k|    self.len()
   35|  17.9k|  }
_RNvXsg_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputTake10take_splitCsiia64awkvAv_15rsonpath_syntax:
  424|  7.67k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  7.67k|    let (prefix, suffix) = self.split_at(count);
  426|  7.67k|    (suffix, prefix)
  427|  7.67k|  }
_RNvXsn_NtCsijflsOnQTe0_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  17.9k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  17.9k|    self.as_bytes().compare(t.as_bytes())
  841|  17.9k|  }
_RNvXs5_NtCsijflsOnQTe0_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  17.9k|  fn as_bytes(&self) -> &[u8] {
   98|  17.9k|    (*self).as_bytes()
   99|  17.9k|  }
_RNvXs24_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|  55.3k|    fn slice(&self, range: $ty) -> Self {
 1014|  55.3k|      &self[range]
 1015|  55.3k|    }
_RNvXs23_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  17.7k|    fn slice(&self, range: $ty) -> Self {
 1014|  17.7k|      &self[range]
 1015|  17.7k|    }
_RNvXs4_NtCsijflsOnQTe0_3nom6traitsReNtB5_6Offset6offset:
   81|  17.7k|  fn offset(&self, second: &Self) -> usize {
   82|  17.7k|    let fst = self.as_ptr();
   83|  17.7k|    let snd = second.as_ptr();
   84|  17.7k|
   85|  17.7k|    snd as usize - fst as usize
   86|  17.7k|  }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCsjFsYkclhB5D_21query_fuzz_round_trip:
   49|    695|    pub(crate) fn is_initialized(&self) -> bool {
   50|    695|        // An `Acquire` load is enough because that makes all the initialization
   51|    695|        // operations visible to us, and, this being a fast path, weaker
   52|    695|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    695|        // `SeqCst` operations on the slow path.
   54|    695|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    695|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCsjFsYkclhB5D_21query_fuzz_round_trip:
  965|    695|        pub fn get(&self) -> Option<&T> {
  966|    695|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    695|                None
  971|       |            }
  972|    695|        }


_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8is_emptyB4_:
   44|    695|    pub(crate) fn is_empty(&self) -> bool {
   45|    695|        self.syntax_errors.is_empty()
   46|    695|    }
_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE6append:
  397|  12.7k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  398|  12.7k|        match other {
  399|  12.7k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  400|      0|            _ => other,
  401|       |        }
  402|  12.7k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3newB4_:
   32|    695|    pub(crate) fn new() -> Self {
   33|    695|        Self { syntax_errors: vec![] }
   34|    695|    }
_RNvMs0_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  135|  47.6k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  136|  47.6k|        Self { kind, rev_idx, len }
  137|  47.6k|    }
_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE15from_error_kindB7_:
  393|  48.9k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  394|  48.9k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  395|  48.9k|    }

_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs1_1__NtB6_13JsonPathQueryNtCs6flZAYNibw_9arbitrary9Arbitrary9size_hint0CsjFsYkclhB5D_21query_fuzz_round_trip:
  570|    695|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs0_Csiia64awkvAv_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  233|    695|    fn default() -> Self {
  234|    695|        Self {
  235|    695|            relaxed_whitespace: false,
  236|    695|        }
  237|    695|    }
_RNvXs1i_Csiia64awkvAv_15rsonpath_syntaxNtB6_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  569|    695|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXss_Csiia64awkvAv_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCsjFsYkclhB5D_21query_fuzz_round_trip:
  160|    695|#[derive(Debug, Clone, Default)]
_RNvXsO_Csiia64awkvAv_15rsonpath_syntaxNtB5_8SelectorNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  343|  21.9k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsj_Csiia64awkvAv_15rsonpath_syntaxNtB5_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  748|    695|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  749|    695|        write!(f, "$")?;
  750|  6.87k|        for s in &self.segments {
  751|  6.17k|            write!(f, "{s}")?;
  752|       |        }
  753|    695|        Ok(())
  754|    695|    }
_RNvXsm_Csiia64awkvAv_15rsonpath_syntaxNtB5_8SelectorNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  781|  21.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  782|  21.9k|        match self {
  783|  10.2k|            Self::Name(n) => write!(f, "'{}'", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
  784|  4.44k|            Self::Wildcard => write!(f, "*"),
  785|  2.96k|            Self::Index(idx) => write!(f, "{idx}"),
  786|  4.32k|            Self::Slice(slice) => write!(f, "{slice}"),
  787|       |        }
  788|  21.9k|    }
_RNvXsk_Csiia64awkvAv_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  759|  6.17k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  760|  6.17k|        match self {
  761|  2.94k|            Self::Child(s) => write!(f, "{s}"),
  762|  3.22k|            Self::Descendant(s) => write!(f, "..{s}"),
  763|       |        }
  764|  6.17k|    }
_RNvXsn_Csiia64awkvAv_15rsonpath_syntaxNtB5_5IndexNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  793|  10.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  794|  10.5k|        match self {
  795|  6.03k|            Self::FromStart(idx) => write!(f, "{idx}"),
  796|  4.53k|            Self::FromEnd(idx) => write!(f, "-{idx}"),
  797|       |        }
  798|  10.5k|    }
_RNvXsp_Csiia64awkvAv_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  813|  4.32k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  814|  4.32k|        if self.start != Self::DEFAULT_START {
  815|  4.07k|            write!(f, "{}", self.start)?;
  816|    254|        }
  817|  4.32k|        write!(f, ":")?;
  818|  4.32k|        if let Some(end) = self.end {
  819|  3.52k|            write!(f, "{end}")?;
  820|    803|        }
  821|  4.32k|        if self.step != Self::DEFAULT_STEP {
  822|  4.26k|            write!(f, ":{}", self.step)?;
  823|     67|        }
  824|  4.32k|        Ok(())
  825|  4.32k|    }
_RNvXs1b_Csiia64awkvAv_15rsonpath_syntaxNtB6_5SliceNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  443|  4.32k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvCsiia64awkvAv_15rsonpath_syntax5parseCsjFsYkclhB5D_21query_fuzz_round_trip:
  283|    695|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  284|    695|    Parser::default().parse(str)
  285|    695|}
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors5firstCsjFsYkclhB5D_21query_fuzz_round_trip:
  650|  6.17k|    pub fn first(&self) -> &Selector {
  651|  6.17k|        &self.inner[0]
  652|  6.17k|    }
_RNvMs2_Csiia64awkvAv_15rsonpath_syntaxNtB5_6Parser5parseCsjFsYkclhB5D_21query_fuzz_round_trip:
  298|    695|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  299|    695|        crate::parser::parse_json_path_query(str, &self.options)
  300|    695|    }
_RNvXsH_Csiia64awkvAv_15rsonpath_syntaxNtB5_9SelectorsNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  336|  6.17k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsl_Csiia64awkvAv_15rsonpath_syntaxNtB5_9SelectorsNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  769|  6.17k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  770|  6.17k|        write!(f, "[{}", self.first())?;
  771|  15.7k|        for s in self.inner.iter().skip(1) {
  772|  15.7k|            write!(f, ", {s}")?;
  773|       |        }
  774|  6.17k|        write!(f, "]")?;
  775|  6.17k|        Ok(())
  776|  6.17k|    }
_RNvXso_Csiia64awkvAv_15rsonpath_syntaxNtB5_4StepNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  803|  4.26k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  804|  4.26k|        match self {
  805|  2.07k|            Self::Forward(idx) => write!(f, "{idx}"),
  806|  2.18k|            Self::Backward(idx) => write!(f, "-{idx}"),
  807|       |        }
  808|  4.26k|    }
_RNvXsV_Csiia64awkvAv_15rsonpath_syntaxNtB5_5IndexNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  360|  15.1k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXs13_Csiia64awkvAv_15rsonpath_syntaxNtB6_4StepNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  393|  8.65k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsA_Csiia64awkvAv_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  308|  6.17k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary0B6_:
  444|     28|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsiia64awkvAv_15rsonpath_syntaxs1_1__NtB4_13JsonPathQueryNtCs6flZAYNibw_9arbitrary9Arbitrary19arbitrary_take_rest:
  570|  2.08k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs_Csiia64awkvAv_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  226|    695|    fn is_trailing_whitespace_allowed(&self) -> bool {
  227|    695|        self.relaxed_whitespace
  228|    695|    }
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntax1__NtB6_7SegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys_0B6_:
  309|  6.17k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsiia64awkvAv_15rsonpath_syntaxs0_1__NtB4_5SliceNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
  444|  12.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs3_Csiia64awkvAv_15rsonpath_syntaxNtB5_9SelectorsNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryB5_:
  324|  6.17k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  325|  6.17k|        let first = u.arbitrary::<Selector>()?;
  326|  6.17k|        let mut rest = u.arbitrary::<Vec<Selector>>()?;
  327|  6.17k|        rest.push(first);
  328|  6.17k|
  329|  6.17k|        Ok(Self::many(rest))
  330|  6.17k|    }
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntax1__NtB6_7SegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  309|     16|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs5_Csiia64awkvAv_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  383|  10.8k|    fn from(value: num::JsonInt) -> Self {
  384|  10.8k|        if value.as_i64() >= 0 {
  385|  6.28k|            Self::FromStart(value.abs())
  386|       |        } else {
  387|  4.53k|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  388|       |        }
  389|  10.8k|    }
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  444|     28|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs1_1__NtB6_13JsonPathQueryNtCs6flZAYNibw_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  570|    695|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsiia64awkvAv_15rsonpath_syntaxs0_1__21RECURSIVE_COUNT_Slice7___getit0B7_:
  444|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsiia64awkvAv_15rsonpath_syntax1__23RECURSIVE_COUNT_Segment7___getit0B7_:
  309|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs6_Csiia64awkvAv_15rsonpath_syntaxNtB5_4StepNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryB5_:
  406|  4.32k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  407|  4.32k|        let num = u.arbitrary::<num::JsonInt>()?;
  408|  4.32k|        Ok(Self::from(num))
  409|  4.32k|    }
_RNvXNvCsiia64awkvAv_15rsonpath_syntax1__NtB4_7SegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
  309|  18.5k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  642|  12.3k|    pub fn many(vec: Vec<Selector>) -> Self {
  643|  12.3k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  644|  12.3k|        Self { inner: vec }
  645|  12.3k|    }
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys_0B6_:
  444|  4.32k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsiia64awkvAv_15rsonpath_syntaxs_1__24RECURSIVE_COUNT_Selector7___getit0B7_:
  344|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntax1__NtB6_7SegmentNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary0B6_:
  309|     16|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs9_Csiia64awkvAv_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  502|  4.32k|    fn default() -> Self {
  503|  4.32k|        Self {
  504|  4.32k|            start: Index::FromStart(0.into()),
  505|  4.32k|            end: None,
  506|  4.32k|            step: Step::Forward(1.into()),
  507|  4.32k|        }
  508|  4.32k|    }
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys_0B6_:
  344|  21.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary0B6_:
  344|     91|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs7_Csiia64awkvAv_15rsonpath_syntaxNtB5_4StepINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  414|  4.32k|    fn from(value: num::JsonInt) -> Self {
  415|  4.32k|        if value.as_i64() >= 0 {
  416|  2.14k|            Self::Forward(value.abs())
  417|       |        } else {
  418|  2.18k|            Self::Backward(value.abs().try_into().expect("checked for zero already"))
  419|       |        }
  420|  4.32k|    }
_RNvXs4_Csiia64awkvAv_15rsonpath_syntaxNtB5_5IndexNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryB5_:
  375|  10.8k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  376|  10.8k|        let num = u.arbitrary::<num::JsonInt>()?;
  377|  10.8k|        Ok(Self::from(num))
  378|  10.8k|    }
_RNvXNvCsiia64awkvAv_15rsonpath_syntaxs_1__NtB4_8SelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrary:
  344|  65.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsiia64awkvAv_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  344|     91|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]

_RNvXsK_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
   87|  13.0k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsp_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  628|  8.10k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
  629|  8.10k|        write!(f, "{}", self.0)
  630|  8.10k|    }
_RNvXsq_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCsjFsYkclhB5D_21query_fuzz_round_trip:
  635|  6.71k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
  636|  6.71k|        write!(f, "{}", self.0)
  637|  6.71k|    }
_RNvXsU_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
  112|  6.71k|#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  381|  14.8k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  382|  14.8k|        if value > JSON_INT_UPPER_LIMIT {
  383|      0|            Err(JsonIntOverflowError::int_pos_overflow(value))
  384|  14.8k|        } else if value < JSON_INT_LOWER_LIMIT {
  385|      0|            Err(JsonIntOverflowError::int_neg_overflow(value))
  386|       |        } else {
  387|  14.8k|            Ok(Self::new(value))
  388|       |        }
  389|  14.8k|    }
_RNvXs7_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  440|  14.8k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  441|  14.8k|        match i64::from_str(s) {
  442|  14.8k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  443|      0|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  444|       |        }
  445|  14.8k|    }
_RNvXsa_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  477|  8.65k|    fn from(value: u32) -> Self {
  478|  8.65k|        Self::new(u64::from(value))
  479|  8.65k|    }
_RNvXsl_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  594|  13.4k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  595|  13.4k|        Self::try_from(value.0)
  596|  13.4k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3newB4_:
  167|  29.9k|    const fn new(index: i64) -> Self {
  168|  29.9k|        Self(index)
  169|  29.9k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt6as_i64:
  211|  15.1k|    pub const fn as_i64(&self) -> i64 {
  212|  15.1k|        self.0
  213|  15.1k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3numNtB4_8JsonUInt3newB6_:
  281|  16.7k|    const fn new(index: u64) -> Self {
  282|  16.7k|        Self(index)
  283|  16.7k|    }
_RNvXsj_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  566|  13.4k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  567|  13.4k|        if value > JSON_UINT_UPPER_LIMIT {
  568|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  569|  13.4k|        } else if let Some(x) = NonZeroU64::new(value) {
  570|  13.4k|            Ok(Self(x))
  571|       |        } else {
  572|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  573|       |        }
  574|  13.4k|    }
_RNvXsd_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  506|  14.8k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  507|  14.8k|        if value.0 < 0 {
  508|  6.71k|            Err(JsonIntOverflowError::negative_uint(value.0))
  509|       |        } else {
  510|  8.10k|            Ok(Self::new(value.0 as u64))
  511|       |        }
  512|  14.8k|    }
_RNvXsr_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryB7_:
  644|  15.1k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  645|  15.1k|        let val = u.int_in_range(JSON_INT_LOWER_LIMIT..=JSON_INT_UPPER_LIMIT)?;
  646|       |
  647|  15.1k|        Ok(Self::new(val))
  648|  15.1k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3abs:
  243|  21.8k|    pub const fn abs(&self) -> JsonUInt {
  244|  21.8k|        JsonUInt(self.0.unsigned_abs())
  245|  21.8k|    }

_RNvMNtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   50|  6.71k|    pub(crate) fn negative_uint(src: i64) -> Self {
   51|  6.71k|        Self {
   52|  6.71k|            kind: JsonIntOverflowKind::UIntNeg(src),
   53|  6.71k|        }
   54|  6.71k|    }

_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser14index_selector:
  302|  2.96k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  303|       |    // This has to be called after the slice selector.
  304|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  305|  2.96k|    let (rest, int) = int(q)?;
  306|  2.96k|    match parse_directional_int(int) {
  307|  1.93k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  308|  1.02k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  309|      0|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  310|      0|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  311|      0|            rest,
  312|      0|        ))),
  313|       |    }
  314|  2.96k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser14slice_selector:
  254|  7.29k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  255|  7.29k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  256|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  257|  4.32k|    let mut slice = crate::Slice::default();
  258|       |
  259|  4.32k|    if let Some(start_str) = opt_start {
  260|  4.07k|        match parse_directional_int(start_str) {
  261|  2.21k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  262|  1.86k|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  263|      0|            DirectionalInt::Error(err) => {
  264|      0|                return fail(
  265|      0|                    SyntaxErrorKind::SliceStartParseError(err),
  266|      0|                    q.len(),
  267|      0|                    start_str.len(),
  268|      0|                    rest,
  269|      0|                );
  270|       |            }
  271|       |        };
  272|    254|    }
  273|  4.32k|    let q = rest;
  274|  4.32k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  275|       |
  276|  4.32k|    if let Some(end_str) = opt_end {
  277|  3.52k|        match parse_directional_int(end_str) {
  278|  1.88k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  279|  1.63k|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  280|      0|            DirectionalInt::Error(err) => {
  281|      0|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  282|       |            }
  283|       |        };
  284|    803|    }
  285|       |
  286|  4.32k|    let q = rest;
  287|  4.32k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  288|       |
  289|  4.32k|    if let Some(Some(step_str)) = opt_step {
  290|  4.26k|        match parse_directional_int(step_str) {
  291|  2.07k|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  292|  2.18k|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  293|      0|            DirectionalInt::Error(err) => {
  294|      0|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  295|       |            }
  296|       |        };
  297|     67|    }
  298|       |
  299|  4.32k|    Ok((rest, Selector::Slice(slice)))
  300|  7.29k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1R_EB4_:
   22|  7.29k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  7.29k|where
   24|  7.29k|    F: nom::Parser<&'a str, T, E>,
   25|  7.29k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  7.29k|}
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string0B5_:
  381|  10.2k|    move |q: &'a str| {
  382|  10.2k|        let mut builder = JsonStringBuilder::new();
  383|  10.2k|        let mut syntax_errors = vec![];
  384|  10.2k|        let mut stream = q.char_indices().peekable();
  385|       |
  386|  63.6k|        while let Some((c_idx, c)) = stream.next() {
  387|  63.6k|            match (c, mode) {
  388|       |                ('\\', _) => {
  389|  23.1k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  390|  23.1k|                        Ok(r) => {
  391|  23.1k|                            builder.push(r);
  392|  23.1k|                        }
  393|      0|                        Err(err) => {
  394|      0|                            syntax_errors.push(err);
  395|      0|                        }
  396|       |                    };
  397|       |                }
  398|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  399|  10.2k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  400|  10.2k|                    return if syntax_errors.is_empty() {
  401|  10.2k|                        Ok((rest, builder.finish()))
  402|       |                    } else {
  403|      0|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  404|       |                    };
  405|       |                }
  406|  29.7k|                (..='\u{001F}', _) => {
  407|      0|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  408|      0|                    syntax_errors.push(SyntaxError::new(
  409|      0|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  410|      0|                        rest.len() + 1,
  411|      0|                        1,
  412|      0|                    ))
  413|       |                }
  414|  30.2k|                _ => {
  415|  30.2k|                    builder.push(c);
  416|  30.2k|                }
  417|       |            }
  418|       |        }
  419|       |
  420|      0|        let err_kind = if mode == StringParseMode::SingleQuoted {
  421|      0|            SyntaxErrorKind::MissingClosingSingleQuote
  422|       |        } else {
  423|      0|            SyntaxErrorKind::MissingClosingDoubleQuote
  424|       |        };
  425|      0|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  426|      0|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  427|       |
  428|       |        fn read_escape_sequence<I>(
  429|       |            q_len: usize,
  430|       |            c_idx: usize,
  431|       |            chars: &mut Peekable<I>,
  432|       |            mode: StringParseMode,
  433|       |        ) -> std::result::Result<char, SyntaxError>
  434|       |        where
  435|       |            I: Iterator<Item = (usize, char)>,
  436|       |        {
  437|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|       |                q_len - c_idx,
  440|       |                1,
  441|       |            ))?;
  442|       |            match ctrl {
  443|       |                'u' => {
  444|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|       |                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|       |                        0xD800..=0xDBFF => {
  448|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|       |                                q_len - c_idx,
  451|       |                                6,
  452|       |                            ))?;
  453|       |                            if next != '\\' {
  454|       |                                return Err(SyntaxError::new(
  455|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|       |                                    q_len - c_idx,
  457|       |                                    6,
  458|       |                                ));
  459|       |                            }
  460|       |                            chars.next();
  461|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|       |                                q_len - c_idx,
  464|       |                                6,
  465|       |                            ))?;
  466|       |                            if next != 'u' {
  467|       |                                return Err(SyntaxError::new(
  468|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|       |                                    q_len - c_idx,
  470|       |                                    6,
  471|       |                                ));
  472|       |                            }
  473|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|       |                            match low {
  475|       |                                0xDC00..=0xDFFF => {
  476|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|       |                                _ => Err(SyntaxError::new(
  480|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|       |                                    q_len - c_idx,
  482|       |                                    6,
  483|       |                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|       |                            q_len - c_idx,
  490|       |                            6,
  491|       |                        )),
  492|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|       |                'n' => Ok('\n'),       // U+000A LF line feed
  498|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  500|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|       |                _ => Err(SyntaxError::new(
  504|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  505|       |                    q_len - c_idx,
  506|       |                    2,
  507|       |                )), // no other escape sequences are allowed
  508|       |            }
  509|       |        }
  510|       |
  511|       |        fn read_hexadecimal_escape<I>(
  512|       |            q_len: usize,
  513|       |            c_idx: usize,
  514|       |            chars: &mut Peekable<I>,
  515|       |        ) -> std::result::Result<u32, SyntaxError>
  516|       |        where
  517|       |            I: Iterator<Item = (usize, char)>,
  518|       |        {
  519|       |            let mut x = 0;
  520|       |            for i in 0..4 {
  521|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  523|       |                    q_len - c_idx + 1,
  524|       |                    2 + i,
  525|       |                ))?;
  526|       |                let v = match c {
  527|       |                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|       |                        return Err(SyntaxError::new(
  533|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|       |                            q_len - c_idx - i - 1,
  535|       |                            1,
  536|       |                        ))
  537|       |                    }
  538|       |                };
  539|       |                x <<= 4;
  540|       |                x += v;
  541|       |                chars.next();
  542|       |            }
  543|       |            Ok(x)
  544|       |        }
  545|  10.2k|    }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  143|  9.12k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  144|       |    move |q: &str| {
  145|       |        let rest = skip_one(q)
  146|       |            .trim_start_matches('.')
  147|       |            .trim_start_matches(|x| x != '.' && x != '[');
  148|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  149|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|       |            rest,
  151|       |        )))
  152|       |    }
  153|  9.12k|}
_RINvNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  428|  23.1k|        fn read_escape_sequence<I>(
  429|  23.1k|            q_len: usize,
  430|  23.1k|            c_idx: usize,
  431|  23.1k|            chars: &mut Peekable<I>,
  432|  23.1k|            mode: StringParseMode,
  433|  23.1k|        ) -> std::result::Result<char, SyntaxError>
  434|  23.1k|        where
  435|  23.1k|            I: Iterator<Item = (usize, char)>,
  436|  23.1k|        {
  437|  23.1k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|  23.1k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|  23.1k|                q_len - c_idx,
  440|  23.1k|                1,
  441|  23.1k|            ))?;
  442|    769|            match ctrl {
  443|       |                'u' => {
  444|  6.13k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|  6.13k|                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|      0|                        0xD800..=0xDBFF => {
  448|      0|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|      0|                                q_len - c_idx,
  451|      0|                                6,
  452|      0|                            ))?;
  453|      0|                            if next != '\\' {
  454|      0|                                return Err(SyntaxError::new(
  455|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|      0|                                    q_len - c_idx,
  457|      0|                                    6,
  458|      0|                                ));
  459|      0|                            }
  460|      0|                            chars.next();
  461|      0|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|      0|                                q_len - c_idx,
  464|      0|                                6,
  465|      0|                            ))?;
  466|      0|                            if next != 'u' {
  467|      0|                                return Err(SyntaxError::new(
  468|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|      0|                                    q_len - c_idx,
  470|      0|                                    6,
  471|      0|                                ));
  472|      0|                            }
  473|      0|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|      0|                            match low {
  475|      0|                                0xDC00..=0xDFFF => {
  476|      0|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|      0|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|      0|                                _ => Err(SyntaxError::new(
  480|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|      0|                                    q_len - c_idx,
  482|      0|                                    6,
  483|      0|                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|      0|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|      0|                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|      0|                            q_len - c_idx,
  490|      0|                            6,
  491|      0|                        )),
  492|  6.13k|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|  1.37k|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|    183|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|    222|                'n' => Ok('\n'),       // U+000A LF line feed
  498|  1.85k|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|    974|                'r' => Ok('\r'),       // U+000D CR carriage return
  500|      0|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|    769|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|  11.6k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|      0|                _ => Err(SyntaxError::new(
  504|      0|                    SyntaxErrorKind::InvalidEscapeSequence,
  505|      0|                    q_len - c_idx,
  506|      0|                    2,
  507|      0|                )), // no other escape sequences are allowed
  508|       |            }
  509|  23.1k|        }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1B_cBZ_NtNtB4_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB1B_B2t_E0NCINvNtB1L_10combinator3optB1B_B1B_B2t_NCIB0_B1B_NvB2_3intB2t_E0E0E0B2t_EB4_:
   22|  4.32k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  4.32k|where
   24|  4.32k|    F: nom::Parser<&'a str, T, E>,
   25|  4.32k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  4.32k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1F_cB13_NtNtB8_5error18InternalParseErrorNCINvNtNtB1P_9character8complete4charB1F_B2y_E0NCINvNtB1P_10combinator3optB1F_B1F_B2y_NCIB4_B1F_NvB6_3intB2y_E0E0E0B2y_E00B8_:
   29|  4.26k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1D_cB11_NtNtB6_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB1D_B2w_E0NCINvNtB1N_10combinator3optB1D_B1D_B2w_NCIB2_B1D_NvB4_3intB2w_E0E0E0B2w_E0B6_:
   26|  4.32k|    move |q: &'a str| {
   27|  4.32k|        inner
   28|  4.32k|            .parse(skip_whitespace(q))
   29|  4.32k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  4.32k|    }
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser6stringB3_:
  380|  43.9k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  381|       |    move |q: &'a str| {
  382|       |        let mut builder = JsonStringBuilder::new();
  383|       |        let mut syntax_errors = vec![];
  384|       |        let mut stream = q.char_indices().peekable();
  385|       |
  386|       |        while let Some((c_idx, c)) = stream.next() {
  387|       |            match (c, mode) {
  388|       |                ('\\', _) => {
  389|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  390|       |                        Ok(r) => {
  391|       |                            builder.push(r);
  392|       |                        }
  393|       |                        Err(err) => {
  394|       |                            syntax_errors.push(err);
  395|       |                        }
  396|       |                    };
  397|       |                }
  398|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  399|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  400|       |                    return if syntax_errors.is_empty() {
  401|       |                        Ok((rest, builder.finish()))
  402|       |                    } else {
  403|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  404|       |                    };
  405|       |                }
  406|       |                (..='\u{001F}', _) => {
  407|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  408|       |                    syntax_errors.push(SyntaxError::new(
  409|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  410|       |                        rest.len() + 1,
  411|       |                        1,
  412|       |                    ))
  413|       |                }
  414|       |                _ => {
  415|       |                    builder.push(c);
  416|       |                }
  417|       |            }
  418|       |        }
  419|       |
  420|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  421|       |            SyntaxErrorKind::MissingClosingSingleQuote
  422|       |        } else {
  423|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  424|       |        };
  425|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  426|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  427|       |
  428|       |        fn read_escape_sequence<I>(
  429|       |            q_len: usize,
  430|       |            c_idx: usize,
  431|       |            chars: &mut Peekable<I>,
  432|       |            mode: StringParseMode,
  433|       |        ) -> std::result::Result<char, SyntaxError>
  434|       |        where
  435|       |            I: Iterator<Item = (usize, char)>,
  436|       |        {
  437|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|       |                q_len - c_idx,
  440|       |                1,
  441|       |            ))?;
  442|       |            match ctrl {
  443|       |                'u' => {
  444|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|       |                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|       |                        0xD800..=0xDBFF => {
  448|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|       |                                q_len - c_idx,
  451|       |                                6,
  452|       |                            ))?;
  453|       |                            if next != '\\' {
  454|       |                                return Err(SyntaxError::new(
  455|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|       |                                    q_len - c_idx,
  457|       |                                    6,
  458|       |                                ));
  459|       |                            }
  460|       |                            chars.next();
  461|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|       |                                q_len - c_idx,
  464|       |                                6,
  465|       |                            ))?;
  466|       |                            if next != 'u' {
  467|       |                                return Err(SyntaxError::new(
  468|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|       |                                    q_len - c_idx,
  470|       |                                    6,
  471|       |                                ));
  472|       |                            }
  473|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|       |                            match low {
  475|       |                                0xDC00..=0xDFFF => {
  476|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|       |                                _ => Err(SyntaxError::new(
  480|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|       |                                    q_len - c_idx,
  482|       |                                    6,
  483|       |                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|       |                            q_len - c_idx,
  490|       |                            6,
  491|       |                        )),
  492|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|       |                'n' => Ok('\n'),       // U+000A LF line feed
  498|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  500|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|       |                _ => Err(SyntaxError::new(
  504|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  505|       |                    q_len - c_idx,
  506|       |                    2,
  507|       |                )), // no other escape sequences are allowed
  508|       |            }
  509|       |        }
  510|       |
  511|       |        fn read_hexadecimal_escape<I>(
  512|       |            q_len: usize,
  513|       |            c_idx: usize,
  514|       |            chars: &mut Peekable<I>,
  515|       |        ) -> std::result::Result<u32, SyntaxError>
  516|       |        where
  517|       |            I: Iterator<Item = (usize, char)>,
  518|       |        {
  519|       |            let mut x = 0;
  520|       |            for i in 0..4 {
  521|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  523|       |                    q_len - c_idx + 1,
  524|       |                    2 + i,
  525|       |                ))?;
  526|       |                let v = match c {
  527|       |                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|       |                        return Err(SyntaxError::new(
  533|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|       |                            q_len - c_idx - i - 1,
  535|       |                            1,
  536|       |                        ))
  537|       |                    }
  538|       |                };
  539|       |                x <<= 4;
  540|       |                x += v;
  541|       |                chars.next();
  542|       |            }
  543|       |            Ok(x)
  544|       |        }
  545|       |    }
  546|  43.9k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selector:
  250|  11.7k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  251|  11.7k|    map(tag("*"), |_| Selector::Wildcard)(q)
  252|  11.7k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selection:
  155|  6.17k|fn bracketed_selection(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  156|  6.17k|    let (mut q, _) = char('[')(q)?;
  157|  6.17k|    let mut selectors = vec![];
  158|  6.17k|    let mut syntax_errors = vec![];
  159|       |
  160|       |    loop {
  161|  21.9k|        match selector(q).finish() {
  162|  21.9k|            Ok((rest, selector)) => {
  163|  21.9k|                selectors.push(selector);
  164|  21.9k|                q = rest;
  165|  21.9k|            }
  166|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  167|      0|                syntax_errors.push(err);
  168|      0|                q = rest;
  169|      0|            }
  170|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  171|      0|                syntax_errors.append(&mut errs);
  172|      0|                q = rest;
  173|      0|            }
  174|      0|            Err(err) => return Err(Err::Failure(err)),
  175|       |        }
  176|  21.9k|        q = skip_whitespace(q);
  177|  21.9k|
  178|  21.9k|        match char::<_, nom::error::Error<_>>(',')(q) {
  179|  15.7k|            Ok((rest, _)) => q = rest,
  180|       |            Err(_) => {
  181|  6.17k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  182|  6.17k|                    q = rest;
  183|  6.17k|                    break;
  184|      0|                } else if q.is_empty() {
  185|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  186|      0|                    break;
  187|       |                } else {
  188|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  189|       |                }
  190|       |            }
  191|       |        }
  192|       |    }
  193|       |
  194|  6.17k|    if syntax_errors.is_empty() {
  195|  6.17k|        Ok((q, Selectors::many(selectors)))
  196|       |    } else {
  197|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  198|       |    }
  199|  6.17k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   29|  7.78k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser13name_selector:
  240|  21.9k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  241|  21.9k|    return map(
  242|  21.9k|        alt((
  243|  21.9k|            preceded(char('\''), string(StringParseMode::SingleQuoted)),
  244|  21.9k|            preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  245|  21.9k|        )),
  246|  21.9k|        Selector::Name,
  247|  21.9k|    )(q);
  248|  21.9k|}
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selector0B5_:
  251|  4.44k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   26|  8.59k|    move |q: &'a str| {
   27|  8.59k|        inner
   28|  8.59k|            .parse(skip_whitespace(q))
   29|  8.59k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  8.59k|    }
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser21parse_json_path_query:
   33|    695|pub(crate) fn parse_json_path_query(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   34|    695|    let original_input = q;
   35|    695|    let mut parse_error = ParseErrorBuilder::new();
   36|    695|    let mut segments = vec![];
   37|    695|    let q = skip_whitespace(q);
   38|    695|    let leading_whitespace_len = original_input.len() - q.len();
   39|    695|    if leading_whitespace_len > 0 && !options.is_leading_whitespace_allowed() {
   40|      0|        parse_error.add(SyntaxError::new(
   41|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   42|      0|            original_input.len(),
   43|      0|            leading_whitespace_len,
   44|      0|        ));
   45|    695|    }
   46|    695|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   47|    695|        Ok((q, _)) => skip_whitespace(q),
   48|      0|        Err(e) => {
   49|      0|            parse_error.add(SyntaxError::new(
   50|      0|                SyntaxErrorKind::MissingRootIdentifier,
   51|      0|                e.input.len(),
   52|      0|                q.chars().next().map_or(1, char::len_utf8),
   53|      0|            ));
   54|      0|            e.input
   55|       |        }
   56|       |    };
   57|       |
   58|    695|    let mut q = q;
   59|  6.87k|    while !q.is_empty() {
   60|  6.17k|        q = match segment(q).finish() {
   61|  6.17k|            Ok((rest, segment)) => {
   62|  6.17k|                segments.push(segment);
   63|  6.17k|                rest
   64|       |            }
   65|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   66|      0|                parse_error.add(err);
   67|      0|                rest
   68|       |            }
   69|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
   70|      0|                parse_error.add_many(errs);
   71|      0|                rest
   72|       |            }
   73|      0|            Err(InternalParseError::NomError(err)) => panic!(
   74|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
   75|      0|            ),
   76|       |        };
   77|  6.17k|        q = skip_whitespace(q);
   78|       |    }
   79|       |
   80|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
   81|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
   82|    695|    if !options.is_trailing_whitespace_allowed() {
   83|    695|        let trimmed = original_input.trim_end_matches(WHITESPACE);
   84|    695|        let trailing_whitespace_len = original_input.len() - trimmed.len();
   85|    695|        if trailing_whitespace_len > 0 {
   86|      0|            parse_error.add(SyntaxError::new(
   87|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
   88|      0|                trailing_whitespace_len,
   89|      0|                trailing_whitespace_len,
   90|      0|            ));
   91|    695|        }
   92|      0|    }
   93|       |
   94|    695|    if parse_error.is_empty() {
   95|    695|        Ok(JsonPathQuery { segments })
   96|       |    } else {
   97|      0|        Err(parse_error.build(original_input.to_owned()))
   98|       |    }
   99|    695|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  21.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  21.9k|where
   24|  21.9k|    F: nom::Parser<&'a str, T, E>,
   25|  21.9k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  21.9k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser3int:
  358|  18.8k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  359|  18.8k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  360|       |
  361|  17.7k|    if int != "0" {
  362|  17.6k|        if int == "-0" {
  363|      0|            return Err(Err::Failure(InternalParseError::SyntaxError(
  364|      0|                SyntaxError::new(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len()),
  365|      0|                rest,
  366|      0|            )));
  367|  17.6k|        }
  368|  17.6k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  369|  17.6k|        if without_minus.strip_prefix(['0']).is_some() {
  370|      0|            return Err(Err::Failure(InternalParseError::SyntaxError(
  371|      0|                SyntaxError::new(SyntaxErrorKind::LeadingZeros, q.len(), int.len()),
  372|      0|                rest,
  373|      0|            )));
  374|  17.6k|        }
  375|    143|    }
  376|       |
  377|  17.7k|    Ok((rest, int))
  378|  18.8k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  21.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  21.9k|where
   24|  21.9k|    F: nom::Parser<&'a str, T, E>,
   25|  21.9k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  21.9k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  21.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  21.9k|where
   24|  21.9k|    F: nom::Parser<&'a str, T, E>,
   25|  21.9k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  21.9k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  2.96k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  11.7k|    move |q: &'a str| {
   27|  11.7k|        inner
   28|  11.7k|            .parse(skip_whitespace(q))
   29|  11.7k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  11.7k|    }
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  4.32k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  234|    769|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1T_E0B6_:
   26|  7.29k|    move |q: &'a str| {
   27|  7.29k|        inner
   28|  7.29k|            .parse(skip_whitespace(q))
   29|  7.29k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  7.29k|    }
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser21parse_directional_int:
  345|  14.8k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  346|  14.8k|    match JsonInt::from_str(int_str) {
  347|  14.8k|        Ok(int) => {
  348|  14.8k|            if let Ok(uint) = JsonUInt::try_from(int) {
  349|  8.10k|                DirectionalInt::Plus(uint)
  350|       |            } else {
  351|  6.71k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  352|       |            }
  353|       |        }
  354|      0|        Err(err) => DirectionalInt::Error(err),
  355|       |    }
  356|  14.8k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  7.29k|    move |q: &'a str| {
   27|  7.29k|        inner
   28|  7.29k|            .parse(skip_whitespace(q))
   29|  7.29k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  7.29k|    }
_RNCNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string00B7_:
  399|  10.2k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  10.2k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser13child_segment:
  125|  2.94k|fn child_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  126|  2.94k|    map(
  127|  2.94k|        alt((
  128|  2.94k|            bracketed_selection,
  129|  2.94k|            // This cut is only correct because we try parsing descendant_segment first.
  130|  2.94k|            preceded(
  131|  2.94k|                char('.'),
  132|  2.94k|                cut(alt((
  133|  2.94k|                    map(wildcard_selector, Selectors::one),
  134|  2.94k|                    member_name_shorthand,
  135|  2.94k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  136|  2.94k|                ))),
  137|  2.94k|            ),
  138|  2.94k|        )),
  139|  2.94k|        Segment::Child,
  140|  2.94k|    )(q)
  141|  2.94k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  21.9k|    move |q: &'a str| {
   27|  21.9k|        inner
   28|  21.9k|            .parse(skip_whitespace(q))
   29|  21.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  21.9k|    }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  21.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  21.9k|where
   24|  21.9k|    F: nom::Parser<&'a str, T, E>,
   25|  21.9k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  21.9k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segment:
  110|  6.17k|fn descendant_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  111|  6.17k|    map(
  112|  6.17k|        preceded(
  113|  6.17k|            tag(".."),
  114|  6.17k|            cut(alt((
  115|  6.17k|                bracketed_selection,
  116|  6.17k|                map(wildcard_selector, Selectors::one),
  117|  6.17k|                member_name_shorthand,
  118|  6.17k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  119|  6.17k|            ))),
  120|  6.17k|        ),
  121|  6.17k|        Segment::Descendant,
  122|  6.17k|    )(q)
  123|  6.17k|}
_RINvNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  511|  6.13k|        fn read_hexadecimal_escape<I>(
  512|  6.13k|            q_len: usize,
  513|  6.13k|            c_idx: usize,
  514|  6.13k|            chars: &mut Peekable<I>,
  515|  6.13k|        ) -> std::result::Result<u32, SyntaxError>
  516|  6.13k|        where
  517|  6.13k|            I: Iterator<Item = (usize, char)>,
  518|  6.13k|        {
  519|  6.13k|            let mut x = 0;
  520|  30.6k|            for i in 0..4 {
  521|  24.5k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|  24.5k|                    SyntaxErrorKind::InvalidEscapeSequence,
  523|  24.5k|                    q_len - c_idx + 1,
  524|  24.5k|                    2 + i,
  525|  24.5k|                ))?;
  526|  24.5k|                let v = match c {
  527|  24.5k|                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|  2.09k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|      0|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|      0|                        return Err(SyntaxError::new(
  533|      0|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|      0|                            q_len - c_idx - i - 1,
  535|      0|                            1,
  536|      0|                        ))
  537|       |                    }
  538|       |                };
  539|  24.5k|                x <<= 4;
  540|  24.5k|                x += v;
  541|  24.5k|                chars.next();
  542|       |            }
  543|  6.13k|            Ok(x)
  544|  6.13k|        }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  143|  6.17k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  144|       |    move |q: &str| {
  145|       |        let rest = skip_one(q)
  146|       |            .trim_start_matches('.')
  147|       |            .trim_start_matches(|x| x != '.' && x != '[');
  148|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  149|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|       |            rest,
  151|       |        )))
  152|       |    }
  153|  6.17k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1V_E00B8_:
   29|  4.32k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser15skip_whitespace:
   12|   132k|fn skip_whitespace(q: &str) -> &str {
   13|   132k|    q.trim_start_matches(WHITESPACE)
   14|   132k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser8selector:
  224|  21.9k|fn selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  225|  21.9k|    alt((
  226|  21.9k|        ignore_whitespace(name_selector),
  227|  21.9k|        ignore_whitespace(wildcard_selector),
  228|  21.9k|        ignore_whitespace(slice_selector),
  229|  21.9k|        ignore_whitespace(index_selector),
  230|  21.9k|        failed_selector,
  231|  21.9k|    ))(q)
  232|  21.9k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  4.44k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser7segment:
  101|  6.17k|fn segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  102|  6.17k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  103|  6.17k|    alt((
  104|  6.17k|        descendant_segment,
  105|  6.17k|        child_segment,
  106|  6.17k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  107|  6.17k|    ))(q)
  108|  6.17k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  2.96k|    move |q: &'a str| {
   27|  2.96k|        inner
   28|  2.96k|            .parse(skip_whitespace(q))
   29|  2.96k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  2.96k|    }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   22|  8.65k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  8.65k|where
   24|  8.65k|    F: nom::Parser<&'a str, T, E>,
   25|  8.65k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  8.65k|}

_RNvXsc_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10EscapeModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCsjFsYkclhB5D_21query_fuzz_round_trip:
   71|  1.25k|#[derive(Clone, Copy, PartialEq, Eq, Debug)]
_RNvMs2_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  30.6k|    pub fn unquoted(&self) -> &str {
  188|  30.6k|        let len = self.quoted.len();
  189|  30.6k|        debug_assert!(len >= 2);
  190|  30.6k|        &self.quoted[1..len - 1]
  191|  30.6k|    }
_RNvNtCsiia64awkvAv_15rsonpath_syntax3str6escapeCsjFsYkclhB5D_21query_fuzz_round_trip:
  131|  10.2k|pub fn escape(str: &str, mode: EscapeMode) -> String {
  132|  10.2k|    use std::fmt::Write;
  133|  10.2k|    let mut result = String::new();
  134|  53.4k|    for c in str.chars() {
  135|      0|        match c {
  136|       |            // # Mode-dependent quote escapes.
  137|    769|            '\'' if mode == EscapeMode::SingleQuoted => result.push_str(r"\'"),
  138|      0|            '\'' if mode == EscapeMode::DoubleQuoted => result.push('\''),
  139|    484|            '"' if mode == EscapeMode::SingleQuoted => result.push('"'),
  140|      0|            '"' if mode == EscapeMode::DoubleQuoted => result.push_str(r#"\""#),
  141|       |            // # Mode-independent escapes.
  142|  11.6k|            '\\' => result.push_str(r"\\"),
  143|       |            // ## Special control sequences.
  144|  1.37k|            '\u{0008}' => result.push_str(r"\b"),
  145|  1.85k|            '\u{000C}' => result.push_str(r"\f"),
  146|    222|            '\n' => result.push_str(r"\n"),
  147|    974|            '\r' => result.push_str(r"\r"),
  148|    183|            '\t' => result.push_str(r"\t"),
  149|       |            // ## Other control sequences escaped as Unicode escapes.
  150|  35.9k|            '\u{0000}'..='\u{001F}' => write!(result, "\\u{:0>4x}", c as u8).unwrap(),
  151|       |            // # Non-escapable characters.
  152|  29.7k|            _ => result.push(c),
  153|       |        }
  154|       |    }
  155|       |
  156|  10.2k|    result
  157|  10.2k|}
_RNvXs3_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  10.2k|    fn eq(&self, other: &Self) -> bool {
  211|  10.2k|        self.unquoted() == other.unquoted()
  212|  10.2k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  20.4k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  20.4k|        self.quoted.push('"');
   52|  20.4k|        JsonString { quoted: self.quoted }
   53|  20.4k|    }
_RNvXs6_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringNtCs6flZAYNibw_9arbitrary9Arbitrary9arbitraryB7_:
  228|  10.2k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  10.2k|        let chars = u.arbitrary_iter()?;
  230|  10.2k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  52.1k|        for c in chars {
  236|  41.9k|            let c = c?;
  237|  41.9k|            match c {
  238|  41.9k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|  11.4k|                    builder.push('\\');
  240|  11.4k|                    builder.push(c);
  241|  11.4k|                }
  242|  30.5k|                _ => {
  243|  30.5k|                    builder.push(c);
  244|  30.5k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  10.2k|        Ok(builder.into())
  249|  10.2k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|   106k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|   106k|        self.quoted.push(char);
   47|   106k|        self
   48|   106k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  20.4k|    pub(crate) fn new() -> Self {
   40|  20.4k|        Self {
   41|  20.4k|            quoted: String::from('"'),
   42|  20.4k|        }
   43|  20.4k|    }
_RNvXs0_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  10.2k|    fn from(value: JsonStringBuilder) -> Self {
   59|  10.2k|        value.finish()
   60|  10.2k|    }

