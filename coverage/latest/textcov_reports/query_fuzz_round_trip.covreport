_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary9size_hintCshKcGSTcnXhh_21query_fuzz_round_trip:
  688|  1.48k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|  1.48k|        (0, None)
  690|  1.48k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|  1.48k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  1.48k|        u.arbitrary_take_rest_iter()?.collect()
  685|  1.48k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax8SelectorENtB5_9Arbitrary9arbitraryB12_:
  679|  19.6k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  19.6k|        u.arbitrary_iter()?.collect()
  681|  19.6k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  8.60k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  8.60k|        u.arbitrary_iter()?.collect()
  681|  8.60k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  18.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  18.3k|        u.arbitrary_iter()?.collect()
  681|  18.3k|    }
_RNvXsp_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc5boxed3BoxNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprENtB5_9Arbitrary9arbitraryB14_:
  925|  40.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  40.3k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  40.3k|    }
_RNvXs5_Cs98o54wqeRSK_9arbitraryINtNtCslATUeuPuGvJ_4core6option6OptionNtCsmyidsRPtaf_15rsonpath_syntax5IndexENtB5_9Arbitrary9arbitraryB17_:
  531|  2.09k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  2.09k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  1.68k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    404|            None
  536|       |        })
  537|  2.09k|    }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   177k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   177k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   177k|                    u.fill_buffer(&mut buf)?;
  312|   177k|                    let mut x: $unsigned = 0;
  313|   711k|                    for i in 0..mem::size_of::<$ty>() {
  314|   711k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   711k|                    }
  316|   177k|                    Ok(x as $ty)
  317|   177k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   118k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   118k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   118k|                    u.fill_buffer(&mut buf)?;
  312|   118k|                    let mut x: $unsigned = 0;
  313|   118k|                    for i in 0..mem::size_of::<$ty>() {
  314|   118k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   118k|                    }
  316|   118k|                    Ok(x as $ty)
  317|   118k|                }
_RNvXsV_Cs98o54wqeRSK_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|    662|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|    662|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|    662|                }
_RNvXs0_Cs98o54wqeRSK_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  18.4k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  18.4k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  18.4k|        if let Some(c) = char::from_u32(c) {
  376|  17.9k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|    477|            c -= SURROGATES_START;
  380|    477|            Ok(char::from_u32(c)
  381|    477|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  18.4k|    }
_RNvXs_Cs98o54wqeRSK_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   118k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   118k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   118k|    }
_RNvXsL_Cs98o54wqeRSK_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|    662|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|    662|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|    662|                    u.fill_buffer(&mut buf)?;
  312|    662|                    let mut x: $unsigned = 0;
  313|  5.29k|                    for i in 0..mem::size_of::<$ty>() {
  314|  5.29k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  5.29k|                    }
  316|    662|                    Ok(x as $ty)
  317|    662|                }

_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCshKcGSTcnXhh_21query_fuzz_round_trip:
   26|  1.48k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  1.48k|    let lower = lhs.0 + rhs.0;
   28|  1.48k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  1.48k|    (lower, upper)
   30|  1.48k|}
_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0CshKcGSTcnXhh_21query_fuzz_round_trip:
   28|  1.48k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB10_13JsonPathQueryNtB4_9Arbitrary9size_hint0ECshKcGSTcnXhh_21query_fuzz_round_trip:
   12|  1.48k|pub fn recursion_guard(
   13|  1.48k|    depth: usize,
   14|  1.48k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  1.48k|) -> (usize, Option<usize>) {
   16|  1.48k|    const MAX_DEPTH: usize = 20;
   17|  1.48k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  1.48k|        f(depth + 1)
   21|       |    }
   22|  1.48k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCshKcGSTcnXhh_21query_fuzz_round_trip:
   37|  1.48k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.48k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.48k|}

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCshKcGSTcnXhh_21query_fuzz_round_trip:
   85|  1.48k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.48k|        Unstructured { data }
   87|  1.48k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCsmyidsRPtaf_15rsonpath_syntax:
  108|   196k|    pub fn len(&self) -> usize {
  109|   196k|        self.data.len()
  110|   196k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEEB1J_:
  167|  19.6k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  19.6k|    where
  169|  19.6k|        A: Arbitrary<'a>,
  170|  19.6k|    {
  171|  19.6k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  19.6k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEB1i_:
  606|  18.3k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  18.3k|        &'b mut self,
  608|  18.3k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  18.3k|        Ok(ArbitraryIter {
  610|  18.3k|            u: &mut *self,
  611|  18.3k|            _marker: PhantomData,
  612|  18.3k|        })
  613|  18.3k|    }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int13from_unsignedCsmyidsRPtaf_15rsonpath_syntax:
  845|  12.0k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  12.0k|                    unsigned as Self
  847|  12.0k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentEB1i_:
  606|  8.60k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  8.60k|        &'b mut self,
  608|  8.60k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  8.60k|        Ok(ArbitraryIter {
  610|  8.60k|            u: &mut *self,
  611|  8.60k|            _marker: PhantomData,
  612|  8.60k|        })
  613|  8.60k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  14.6k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  14.6k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  14.6k|        if keep_going {
  723|  6.01k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  8.60k|            None
  726|       |        }
  727|  14.6k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int10from_usizeCsmyidsRPtaf_15rsonpath_syntax:
  825|  95.0k|                fn from_usize(u: usize) -> Self {
  826|  95.0k|                    u as Self
  827|  95.0k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangexECsmyidsRPtaf_15rsonpath_syntax:
  293|  12.0k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  12.0k|    where
  295|  12.0k|        T: Int,
  296|  12.0k|    {
  297|  12.0k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  12.0k|        self.data = &self.data[bytes_consumed..];
  299|  12.0k|        Ok(result)
  300|  12.0k|    }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int11to_unsignedCsmyidsRPtaf_15rsonpath_syntax:
  841|  24.1k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  24.1k|                    self as $unsigned_ty
  843|  24.1k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  34.6k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  34.6k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  34.6k|        if keep_going {
  723|  18.5k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  16.1k|            None
  726|       |        }
  727|  34.6k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEB1c_:
  167|  21.2k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  21.2k|    where
  169|  21.2k|        A: Arbitrary<'a>,
  170|  21.2k|    {
  171|  21.2k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  21.2k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNtCsmyidsRPtaf_15rsonpath_syntax3num7JsonIntEB1e_:
  167|  11.7k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  11.7k|    where
  169|  11.7k|        A: Arbitrary<'a>,
  170|  11.7k|    {
  171|  11.7k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  11.7k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax8SelectorENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  30.6k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  30.6k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  30.6k|        if keep_going {
  723|  11.9k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  18.6k|            None
  726|       |        }
  727|  30.6k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsmyidsRPtaf_15rsonpath_syntax:
  167|   115k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   115k|    where
  169|   115k|        A: Arbitrary<'a>,
  170|   115k|    {
  171|   115k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   115k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEB1i_:
  606|  19.6k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  19.6k|        &'b mut self,
  608|  19.6k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  19.6k|        Ok(ArbitraryIter {
  610|  19.6k|            u: &mut *self,
  611|  19.6k|            _marker: PhantomData,
  612|  19.6k|        })
  613|  19.6k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implxINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsmyidsRPtaf_15rsonpath_syntax:
  302|  12.0k|    fn int_in_range_impl<T>(
  303|  12.0k|        range: ops::RangeInclusive<T>,
  304|  12.0k|        mut bytes: impl Iterator<Item = u8>,
  305|  12.0k|    ) -> Result<(T, usize)>
  306|  12.0k|    where
  307|  12.0k|        T: Int,
  308|  12.0k|    {
  309|  12.0k|        let start = *range.start();
  310|  12.0k|        let end = *range.end();
  311|  12.0k|        assert!(
  312|  12.0k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  12.0k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  12.0k|        }
  321|  12.0k|
  322|  12.0k|        // From here on out we work with the unsigned representation. All of the
  323|  12.0k|        // operations performed below work out just as well whether or not `T`
  324|  12.0k|        // is a signed or unsigned integer.
  325|  12.0k|        let start = start.to_unsigned();
  326|  12.0k|        let end = end.to_unsigned();
  327|  12.0k|
  328|  12.0k|        let delta = end.wrapping_sub(start);
  329|  12.0k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  12.0k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  12.0k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  95.0k|        while (bytes_consumed < mem::size_of::<T>())
  339|  95.0k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  83.1k|            let byte = match bytes.next() {
  342|    254|                None => break,
  343|  82.9k|                Some(b) => b,
  344|  82.9k|            };
  345|  82.9k|            bytes_consumed += 1;
  346|  82.9k|
  347|  82.9k|            // Combine this byte into our arbitrary integer, but avoid
  348|  82.9k|            // overflowing the shift for `u8` and `i8`.
  349|  82.9k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  82.9k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  12.0k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  12.0k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  12.0k|        let result = start.wrapping_add(offset);
  365|  12.0k|
  366|  12.0k|        // And convert back to our maybe-signed representation.
  367|  12.0k|        let result = T::from_unsigned(result);
  368|  12.0k|        debug_assert!(*range.start() <= result);
  369|  12.0k|        debug_assert!(result <= *range.end());
  370|       |
  371|  12.0k|        Ok((result, bytes_consumed))
  372|  12.0k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarydECsmyidsRPtaf_15rsonpath_syntax:
  167|    662|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    662|    where
  169|    662|        A: Arbitrary<'a>,
  170|    662|    {
  171|    662|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    662|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsmyidsRPtaf_15rsonpath_syntax:
  132|   196k|    pub fn is_empty(&self) -> bool {
  133|   196k|        self.len() == 0
  134|   196k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int7from_u8CsmyidsRPtaf_15rsonpath_syntax:
  821|  82.9k|                fn from_u8(b: u8) -> Self {
  822|  82.9k|                    b as Self
  823|  82.9k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEB1s_:
  620|  1.48k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  1.48k|        self,
  622|  1.48k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  1.48k|        Ok(ArbitraryTakeRestIter {
  624|  1.48k|            u: self,
  625|  1.48k|            _marker: PhantomData,
  626|  1.48k|        })
  627|  1.48k|    }
_RNvXs0_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1e_:
  738|  3.83k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  3.83k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  3.83k|        if keep_going {
  741|  2.75k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  1.07k|            None
  744|       |        }
  745|  3.83k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCsmyidsRPtaf_15rsonpath_syntax:
  837|  12.0k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  12.0k|                    <$ty>::wrapping_sub(self, rhs)
  839|  12.0k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCsmyidsRPtaf_15rsonpath_syntax:
  833|  12.0k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  12.0k|                    <$ty>::wrapping_add(self, rhs)
  835|  12.0k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCsmyidsRPtaf_15rsonpath_syntax:
  720|  31.9k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  31.9k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  31.9k|        if keep_going {
  723|  18.4k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  13.5k|            None
  726|       |        }
  727|  31.9k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECsmyidsRPtaf_15rsonpath_syntax:
  606|  13.5k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  13.5k|        &'b mut self,
  608|  13.5k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  13.5k|        Ok(ArbitraryIter {
  610|  13.5k|            u: &mut *self,
  611|  13.5k|            _marker: PhantomData,
  612|  13.5k|        })
  613|  13.5k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   296k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   296k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   296k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   296k|        for byte in buffer[n..].iter_mut() {
  525|  33.7k|            *byte = 0;
  526|  33.7k|        }
  527|   296k|        self.data = &self.data[n..];
  528|   296k|        Ok(())
  529|   296k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  12.0k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  12.0k|                    <$ty>::checked_add(self, rhs)
  831|  12.0k|                }

rust_fuzzer_test_input:
  259|  1.48k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.48k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.48k|
  262|  1.48k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.48k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.48k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.48k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.48k|                // get to longer inputs that actually lead to interesting executions
  267|  1.48k|                // quicker.
  268|  1.48k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.48k|                }
  271|  1.48k|
  272|  1.48k|                let mut u = Unstructured::new(bytes);
  273|  1.48k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.48k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.48k|                }
  291|       |
  292|  1.48k|                let data = match data {
  293|  1.07k|                    Ok(d) => d,
  294|    411|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.07k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.07k|                result.to_libfuzzer_code()
  299|  1.48k|            }
_RNvNvCshKcGSTcnXhh_21query_fuzz_round_trip1__19___libfuzzer_sys_run:
  303|  1.07k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  1.03k|                $body
  305|  1.07k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCshKcGSTcnXhh_21query_fuzz_round_trip:
   40|  1.07k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.07k|        match self {
   42|  1.03k|            Corpus::Keep => 0,
   43|     44|            Corpus::Reject => -1,
   44|       |        }
   45|  1.07k|    }
LLVMFuzzerTestOneInput:
   58|  1.48k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.48k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.48k|    });
   63|  1.48k|
   64|  1.48k|    match test_input {
   65|  1.48k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.48k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.48k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.48k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.48k|        rust_fuzzer_test_input(data_slice)
   62|  1.48k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1V_B2d_E0NCINvNtB6_10combinator3cutB1V_B1Y_B2d_NCINvB4_3altB1V_B1Y_B2d_TNCINvB3z_3mapB1V_NtBC_8SelectorB1Y_B2d_NvBA_17wildcard_selectorNvMst_BC_B1Y_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Y_E0EE0E0E0EINtB4_3AltB1V_B1Y_B2d_E6choiceBC_:
  134|  7.24k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  7.24k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.24k|          res => res,
  138|       |        }
  139|  7.24k|      }
_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2f_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2f_E0EINtB5_3AltB1Z_B2f_B2u_E6choiceBD_:
  134|  11.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  11.7k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  11.7k|          res => res,
  138|       |        }
  139|  11.7k|      }
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1y_NvBC_17wildcard_selectorB26_E0NCIBA_B1y_NvBC_14slice_selectorB26_E0NCIBA_B1y_NvBC_14index_selectorB26_E0NCIBA_B1y_NCNvBC_8selector0B26_E0NvBC_15failed_selectorEINtB5_3AltReB1y_B26_E6choiceBE_:
  134|  26.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  26.9k|        match self.0.parse(input.clone()) {
  136|  20.0k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  6.87k|          res => res,
  138|       |        }
  139|  26.9k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1T_13name_selectorB1g_E0NCIB1R_BB_NvB1T_17wildcard_selectorB1g_E0NCIB1R_BB_NvB1T_14slice_selectorB1g_E0NCIB1R_BB_NvB1T_14index_selectorB1g_E0NCIB1R_BB_NCNvB1T_8selector0B1g_E0NvB1T_15failed_selectorEE0BD_:
   50|  26.9k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtBB_7LiteralBz_B1h_B1h_NvNtBB_6parser7literalE0NCNvB2J_10comparable0EEBB_:
   47|  4.99k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  4.99k|  mut l: List,
   49|  4.99k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  4.99k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBF_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1E_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1E_E0E0B2c_EEBF_:
   47|  26.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  26.3k|  mut l: List,
   49|  26.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  26.3k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB27_6digit1BY_B14_EE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  37.6k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  37.6k|        match self.0.parse(input.clone()) {
  136|  32.3k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.34k|          res => res,
  138|       |        }
  139|  37.6k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2X_EE0BI_:
   50|  23.4k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2i_6digit1Bx_BC_EE0B2V_EEBG_:
   47|  37.6k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  37.6k|  mut l: List,
   49|  37.6k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  37.6k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBz_E0EEBB_:
   47|  7.24k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  7.24k|  mut l: List,
   49|  7.24k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  7.24k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1l_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1l_E0E0B1T_B1T_B1T_NCIB1W_Bz_BB_cB1l_NCINvNtNtB6_9character8complete4charBz_B1l_E0E0B3t_EE0BD_:
   50|  16.5k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2k_6digit1Bz_BE_EE0B2X_EE0BI_:
   50|  37.6k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2V_EEBG_:
   47|  23.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  23.4k|  mut l: List,
   49|  23.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  23.4k|}
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBZ_NtNtB13_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1O_E0E0Bx_Bx_Bx_NCIBA_BZ_B11_cB1O_NCINvNtNtB7_9character8complete4charBZ_B1O_E0E0B3e_EINtB5_3AltBZ_B11_B1O_E6choiceB13_:
  134|  16.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  16.5k|        match self.0.parse(input.clone()) {
  136|  15.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    856|          res => res,
  138|       |        }
  139|  16.5k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1f_B1f_NvNtBD_6parser6numberE0NCIB1Q_Bz_NtNtBD_3str10JsonStringBB_B1f_B1f_NvB2R_14string_literalE0NCINvB1S_5valueBz_BB_Bz_B1f_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1f_E0E0B4i_B4i_EE0BD_:
   50|  23.4k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBH_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1G_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1G_E0E0B2e_EE0BH_:
   50|  26.3k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1w_NCINvNtNtB4_9character8complete4charBx_B1w_E0E0B24_EEBD_:
   47|  19.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  19.9k|  mut l: List,
   49|  19.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  19.9k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1P_s_0NCINvB1R_14failed_segmentBB_E0EE0BD_:
   50|  2.02k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBY_NtNtB16_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBY_BY_B28_E0E0Bw_EINtB4_3AltBY_B10_B28_E6choiceB16_:
  134|  26.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  26.3k|        match self.0.parse(input.clone()) {
  136|  24.5k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.74k|          res => res,
  138|       |        }
  139|  26.3k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1N_s_0NCINvB1P_14failed_segmentBz_E0EEBB_:
   47|  2.02k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  2.02k|  mut l: List,
   49|  2.02k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  2.02k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  23.4k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  23.4k|        match self.0.parse(input.clone()) {
  136|  23.0k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    410|          res => res,
  138|       |        }
  139|  23.4k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1f_NCINvNtNtB4_9character8complete4charBx_B1f_E0NCINvNtB4_10combinator3cutBx_Bz_B1f_NCIB0_Bx_Bz_B1f_TNCINvB3K_3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  7.24k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  7.24k|  mut l: List,
   49|  7.24k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  7.24k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser12filter_query0NCB1N_s_0NCINvB1P_28failed_segment_within_filterBz_E0EEBB_:
   47|  16.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  16.9k|  mut l: List,
   49|  16.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  16.9k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Y_E0E0Bw_EINtB4_3AltBY_B10_B1Y_E6choiceB14_:
  134|  19.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  19.9k|        match self.0.parse(input.clone()) {
  136|  4.94k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  14.9k|          res => res,
  138|       |        }
  139|  19.9k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser12filter_query0NCB1P_s_0NCINvB1R_28failed_segment_within_filterBB_E0EE0BD_:
   50|  16.9k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB11_10ComparableNtNtB11_5error18InternalParseErrorB1V_NvNtB11_6parser7literalE0NCNvB2z_10comparable0EINtB4_3AltBX_B1D_B1V_E6choiceB11_:
  134|  4.99k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  4.99k|        match self.0.parse(input.clone()) {
  136|  3.19k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.80k|          res => res,
  138|       |        }
  139|  4.99k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1n_NCINvNtNtB4_9character8complete4charBx_B1n_E0NCNvNtBD_6parser6string0E0B1V_EEBD_:
   47|  49.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  49.4k|  mut l: List,
   49|  49.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  49.4k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1p_NCINvNtNtB6_9character8complete4charBz_B1p_E0NCNvNtBF_6parser6string0E0B1X_EE0BF_:
   50|  49.4k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1y_NCINvNtNtB6_9character8complete4charBz_B1y_E0E0B26_EE0BF_:
   50|  19.9k|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1T_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  2.02k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  2.02k|        match self.0.parse(input.clone()) {
  136|    825|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.20k|          res => res,
  138|       |        }
  139|  2.02k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1P_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1P_E6choiceB15_:
  134|  49.4k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  49.4k|        match self.0.parse(input.clone()) {
  136|  42.6k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  6.87k|          res => res,
  138|       |        }
  139|  49.4k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0BD_:
   50|  11.7k|  move |i: I| l.choice(i)
_RNvXs2_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB22_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1O_B22_B22_NvB2G_14string_literalE0NCINvBC_5valueBY_B1O_BY_B22_NCINvNtNtB7_5bytes8complete3tagBY_BY_B22_E0E0B49_B49_EINtB5_3AltBY_B1O_B22_E6choiceB14_:
  134|  23.4k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  23.4k|        match self.0.parse(input.clone()) {
  136|  22.5k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    845|          res => res,
  138|       |        }
  139|  23.4k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtBD_7LiteralBB_B1j_B1j_NvNtBD_6parser7literalE0NCNvB2L_10comparable0EE0BD_:
   50|  4.99k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1d_B1d_NvNtBB_6parser6numberE0NCIB1O_Bx_NtNtBB_3str10JsonStringBz_B1d_B1d_NvB2P_14string_literalE0NCINvB1Q_5valueBx_Bz_Bx_B1d_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1d_E0E0B4g_B4g_EEBB_:
   47|  23.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  23.4k|  mut l: List,
   49|  23.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1R_13name_selectorB1e_E0NCIB1P_Bz_NvB1R_17wildcard_selectorB1e_E0NCIB1P_Bz_NvB1R_14slice_selectorB1e_E0NCIB1P_Bz_NvB1R_14index_selectorB1e_E0NCIB1P_Bz_NCNvB1R_8selector0B1e_E0NvB1R_15failed_selectorEEBB_:
   47|  26.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  26.9k|  mut l: List,
   49|  26.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  26.9k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1z_EEBE_:
   47|  23.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  23.4k|  mut l: List,
   49|  23.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1j_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1j_E0E0B1R_B1R_B1R_NCIB1U_Bx_Bz_cB1j_NCINvNtNtB4_9character8complete4charBx_B1j_E0E0B3r_EEBB_:
   47|  16.5k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  16.5k|  mut l: List,
   49|  16.5k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  16.5k|}
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0NCBz_s_0NCINvBB_28failed_segment_within_filterNtBD_7SegmentE0EINtB5_3AltReB2d_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  16.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  16.9k|        match self.0.parse(input.clone()) {
  136|  6.41k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  10.4k|          res => res,
  138|       |        }
  139|  16.9k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1h_NCINvNtNtB6_9character8complete4charBz_B1h_E0NCINvNtB6_10combinator3cutBz_BB_B1h_NCIB2_Bz_BB_B1h_TNCINvB3M_3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  7.24k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EEBB_:
   47|  18.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  18.9k|  mut l: List,
   49|  18.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  18.9k|}

_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   215k|  move |i: Input| {
   40|   215k|    let tag_len = tag.input_len();
   41|   215k|    let t = tag.clone();
   42|   215k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  23.4k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   191k|        let e: ErrorKind = ErrorKind::Tag;
   46|   191k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   215k|    res
   50|   215k|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBQ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|  23.4k|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|  23.4k|  tag: T,
   76|  23.4k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|  23.4k|where
   78|  23.4k|  Input: InputTake + Compare<T>,
   79|  23.4k|  T: InputLength + Clone,
   80|  23.4k|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|  23.4k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBS_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B11_:
   81|    845|  move |i: Input| {
   82|    845|    let tag_len = tag.input_len();
   83|    845|    let t = tag.clone();
   84|       |
   85|    845|    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|      0|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|    845|        let e: ErrorKind = ErrorKind::Tag;
   89|    845|        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|    845|    res
   93|    845|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|   228k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|   228k|  tag: T,
   34|   228k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|   228k|where
   36|   228k|  Input: InputTake + Compare<T>,
   37|   228k|  T: InputLength + Clone,
   38|   228k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|   228k|}

_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   371k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBO_uECsmyidsRPtaf_15rsonpath_syntax:
   89|  34.9k|pub fn one_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
   90|  34.9k|where
   91|  34.9k|  I: Slice<RangeFrom<usize>> + InputIter,
   92|  34.9k|  <I as InputIter>::Item: AsChar + Copy,
   93|  34.9k|  T: FindToken<<I as InputIter>::Item>,
   94|  34.9k|{
   95|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|       |  }
   99|  34.9k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE00CsmyidsRPtaf_15rsonpath_syntax:
   37|  33.0k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  33.0k|    let b = t.as_char() == c;
   39|  33.0k|    (&c, b)
   40|  33.0k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|  61.5k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|  61.5k|where
  437|  61.5k|  T: InputTakeAtPosition,
  438|  61.5k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|  61.5k|{
  440|  61.5k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|  61.5k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE0CsmyidsRPtaf_15rsonpath_syntax:
   37|  33.0k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  33.0k|  }) {
   41|  14.6k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  18.4k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  33.0k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsmyidsRPtaf_15rsonpath_syntax:
   37|  43.1k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  43.1k|  }) {
   41|  26.0k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  17.0k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  43.1k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|   283k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   283k|  }) {
   41|  78.1k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   205k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   283k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuECsmyidsRPtaf_15rsonpath_syntax:
   32|  33.0k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  33.0k|where
   34|  33.0k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  33.0k|  <I as InputIter>::Item: AsChar,
   36|  33.0k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  33.0k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBS_uE00CsmyidsRPtaf_15rsonpath_syntax:
   95|  34.9k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsmyidsRPtaf_15rsonpath_syntax:
   32|  43.1k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  43.1k|where
   34|  43.1k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  43.1k|  <I as InputIter>::Item: AsChar,
   36|  43.1k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  43.1k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|   283k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   283k|    let b = t.as_char() == c;
   39|   283k|    (&c, b)
   40|   283k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|   389k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   389k|where
   34|   389k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   389k|  <I as InputIter>::Item: AsChar,
   36|   389k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   389k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsmyidsRPtaf_15rsonpath_syntax:
   37|  43.1k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  43.1k|    let b = t.as_char() == c;
   39|  43.1k|    (&c, b)
   40|  43.1k|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBQ_uE0CsmyidsRPtaf_15rsonpath_syntax:
   95|  34.9k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|  16.9k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|  18.0k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|  34.9k|  }

_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  18.0k|  move |input: I| {
  244|  18.0k|    let i = input.clone();
  245|  18.0k|    match f.parse(input) {
  246|  5.63k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  12.4k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  18.0k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBJ_10ComparableNtNtBJ_5error18InternalParseErrorB1C_NvNtBJ_6parser7literalE0BJ_:
  672|  4.99k|  move |input: I| match parser.parse(input) {
  673|  1.80k|    Ok((i, o)) => Ok((i, o.into())),
  674|  3.19k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  4.99k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvB2r_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2r_21member_name_shorthandNCINvB2r_14failed_segmentBE_E0EE0EBG_:
  631|  18.9k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  18.9k|where
  633|  18.9k|  F: Parser<I, O, E>,
  634|  18.9k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  18.9k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1m_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  20.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  20.0k|where
   75|  20.0k|  F: Parser<I, O1, E>,
   76|  20.0k|  G: FnMut(O1) -> O2,
   77|  20.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  20.0k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete6one_ofBF_BF_uE0E0CsmyidsRPtaf_15rsonpath_syntax:
  308|  34.9k|  move |input: I| {
  309|  34.9k|    let i = input.clone();
  310|  34.9k|    match f.parse(input) {
  311|  16.9k|      Ok((_, o)) => Ok((i, o)),
  312|  18.0k|      Err(e) => Err(e),
  313|       |    }
  314|  34.9k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1E_NCINvNtB6_8sequence8precededBF_cBH_B1E_NCINvNtNtB6_9character8complete4charBF_B1E_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3G_15filter_selector0B1E_E0E0E0BJ_:
  672|  12.3k|  move |input: I| match parser.parse(input) {
  673|  10.4k|    Ok((i, o)) => Ok((i, o.into())),
  674|      0|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  1.89k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  12.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1M_3intBJ_E0E0BN_:
  243|  3.25k|  move |input: I| {
  244|  3.25k|    let i = input.clone();
  245|  3.25k|    match f.parse(input) {
  246|  2.97k|      Ok((i, o)) => Ok((i, Some(o))),
  247|    287|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  3.25k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser6numberE0BL_:
  672|  23.4k|  move |input: I| match parser.parse(input) {
  673|    845|    Ok((i, o)) => Ok((i, o.into())),
  674|  22.5k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  23.4k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1E_E0EBK_:
  453|  39.8k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  39.8k|  val: O1,
  455|  39.8k|  mut parser: F,
  456|  39.8k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  39.8k|where
  458|  39.8k|  F: Parser<I, O2, E>,
  459|  39.8k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  39.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1t_E0EBI_:
  453|  66.3k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  66.3k|  val: O1,
  455|  66.3k|  mut parser: F,
  456|  66.3k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  66.3k|where
  458|  66.3k|  F: Parser<I, O2, E>,
  459|  66.3k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  66.3k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBI_NtNtBQ_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1S_E0E00BQ_:
  460|  6.13k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3C_EE0E0BT_:
  512|  23.4k|  move |input: I| {
  513|  23.4k|    let i = input.clone();
  514|  23.4k|    match parser.parse(i) {
  515|    845|      Ok((i, _)) => {
  516|    845|        let index = input.offset(&i);
  517|    845|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  22.5k|      Err(e) => Err(e),
  520|       |    }
  521|  23.4k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBI_5error18InternalParseErrorNCNvNvNtBI_6parser12logical_expr12parse_single0E0BI_:
  635|  9.13k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  9.13k|    rest => rest,
  638|  9.13k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BE_BJ_NCINvNtNtB6_5bytes8complete11tag_no_caseBE_BE_BJ_E0NCIB1K_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BJ_NCIB2_BE_cBJ_NCINvNtB6_6branch3altBE_cBJ_TNCINvNtNtB6_9character8complete4charBE_BJ_E0B4K_EE0E0INvB4P_6digit1BE_BJ_EE0E0E0BN_:
  243|    845|  move |input: I| {
  244|    845|    let i = input.clone();
  245|    845|    match f.parse(input) {
  246|      0|      Ok((i, o)) => Ok((i, Some(o))),
  247|    845|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|    845|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1I_BC_INtNtCslATUeuPuGvJ_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4I_EE0E0INvB4N_6digit1BC_BH_EE0E0EBL_:
  239|  23.4k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  23.4k|where
  241|  23.4k|  F: Parser<I, O, E>,
  242|  23.4k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1s_4Name0EBI_:
   73|  26.9k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  26.9k|where
   75|  26.9k|  F: Parser<I, O1, E>,
   76|  26.9k|  G: FnMut(O1) -> O2,
   77|  26.9k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  26.9k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|  27.5k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  27.5k|where
  241|  27.5k|  F: Parser<I, O, E>,
  242|  27.5k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  27.5k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser6numberEBJ_:
  663|  23.4k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  23.4k|where
  665|  23.4k|  O1: Into<O2>,
  666|  23.4k|  E1: Into<E2>,
  667|  23.4k|  E1: ParseError<I>,
  668|  23.4k|  E2: ParseError<I>,
  669|  23.4k|  F: Parser<I, O1, E1>,
  670|  23.4k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBH_10ComparableNtNtBH_5error18InternalParseErrorB1A_NvNtBH_6parser7literalEBH_:
  663|  4.99k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  4.99k|where
  665|  4.99k|  O1: Into<O2>,
  666|  4.99k|  E1: Into<E2>,
  667|  4.99k|  E1: ParseError<I>,
  668|  4.99k|  E2: ParseError<I>,
  669|  4.99k|  F: Parser<I, O1, E1>,
  670|  4.99k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  4.99k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1o_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  20.0k|  move |input: I| {
   79|  20.0k|    let (input, o1) = parser.parse(input)?;
   80|  1.97k|    Ok((input, f(o1)))
   81|  20.0k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBI_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0EBI_:
  453|  33.1k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  33.1k|  val: O1,
  455|  33.1k|  mut parser: F,
  456|  33.1k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  33.1k|where
  458|  33.1k|  F: Parser<I, O2, E>,
  459|  33.1k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  33.1k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBG_NtNtBO_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1Q_E0E0BO_:
  460|  50.8k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2i_6number0E0BK_:
   78|  23.4k|  move |input: I| {
   79|  23.4k|    let (input, o1) = parser.parse(input)?;
   80|    845|    Ok((input, f(o1)))
   81|  23.4k|  }
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1x_E0E00BM_:
  460|  2.63k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB2Z_21member_name_shorthandNCINvB2Z_14failed_segmentBE_E0EE0EBG_:
  631|  7.24k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  7.24k|where
  633|  7.24k|  F: Parser<I, O, E>,
  634|  7.24k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  7.24k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1m_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1m_NvB2t_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2t_21member_name_shorthandNCINvB2t_14failed_segmentBG_E0EE0E0BI_:
  635|  11.7k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  11.7k|    rest => rest,
  638|  11.7k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1G_E0E0BM_:
  460|  24.8k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1p_E0E0BK_:
  460|  62.2k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2l_BC_NvB2n_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  1.66k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.66k|where
  241|  1.66k|  F: Parser<I, O, E>,
  242|  1.66k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.66k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2g_6number0EBI_:
   73|  23.4k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  23.4k|where
   75|  23.4k|  F: Parser<I, O1, E>,
   76|  23.4k|  G: FnMut(O1) -> O2,
   77|  23.4k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  23.4k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBM_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1v_E0E00BM_:
  460|  2.36k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser14string_literalE0BL_:
  672|  22.5k|  move |input: I| match parser.parse(input) {
  673|  1.68k|    Ok((i, o)) => Ok((i, o.into())),
  674|  20.9k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  22.5k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB2Z_6digit1BK_BP_EE0B3C_EE0E0BT_:
  512|  37.6k|  move |input: I| {
  513|  37.6k|    let i = input.clone();
  514|  37.6k|    match parser.parse(i) {
  515|  12.6k|      Ok((i, _)) => {
  516|  12.6k|        let index = input.offset(&i);
  517|  12.6k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  25.0k|      Err(e) => Err(e),
  520|       |    }
  521|  37.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBK_INtNtCslATUeuPuGvJ_4core6option6OptionBK_EBQ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2D_8precededBK_cBK_B1A_NCINvB3b_4charBK_B1A_E0B38_E0E0NCIB3T_BK_BK_B1A_NCIB4f_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4f_BK_IBR_cEBK_B1A_NCIB3T_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4F_B4F_EE0E0B38_E0E0E0EE0E0B1E_:
  512|  23.4k|  move |input: I| {
  513|  23.4k|    let i = input.clone();
  514|  23.4k|    match parser.parse(i) {
  515|    845|      Ok((i, _)) => {
  516|    845|        let index = input.offset(&i);
  517|    845|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  22.5k|      Err(e) => Err(e),
  520|       |    }
  521|  23.4k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1z_NCINvNtNtB6_9character8complete4charBE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCIB29_BE_BG_B1z_TNCIB2_BE_NtBI_8SelectorBG_B1z_NvB2G_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBG_E0EE0E0E0EE0NcNtB1m_5Child0E0BI_:
   78|  7.24k|  move |input: I| {
   79|  7.24k|    let (input, o1) = parser.parse(input)?;
   80|  7.09k|    Ok((input, f(o1)))
   81|  7.24k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1K_3intBH_E0EBL_:
  239|  3.32k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  3.32k|where
  241|  3.32k|  F: Parser<I, O, E>,
  242|  3.32k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  3.32k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBG_5error18InternalParseErrorNCNvNvNtBG_6parser12logical_expr12parse_single0EBG_:
  631|  9.13k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  9.13k|where
  633|  9.13k|  F: Parser<I, O, E>,
  634|  9.13k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  9.13k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1n_E0EBI_:
  453|  70.3k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  70.3k|  val: O1,
  455|  70.3k|  mut parser: F,
  456|  70.3k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  70.3k|where
  458|  70.3k|  F: Parser<I, O2, E>,
  459|  70.3k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  70.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2n_BE_NvB2p_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  1.66k|  move |input: I| {
  244|  1.66k|    let i = input.clone();
  245|  1.66k|    match f.parse(input) {
  246|  1.59k|      Ok((i, o)) => Ok((i, Some(o))),
  247|     67|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  1.66k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBK_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0E0BK_:
  460|  26.2k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1u_4Name0E0BK_:
   78|  26.9k|  move |input: I| {
   79|  26.9k|    let (input, o1) = parser.parse(input)?;
   80|  6.87k|    Ok((input, f(o1)))
   81|  26.9k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1z_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1z_NvB4o_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4o_21member_name_shorthandNCINvB4o_14failed_segmentBG_E0EE0E0E0NcNtB1m_10Descendant0E0BI_:
   78|  18.9k|  move |input: I| {
   79|  18.9k|    let (input, o1) = parser.parse(input)?;
   80|  9.96k|    Ok((input, f(o1)))
   81|  18.9k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1x_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1x_NvB4m_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBE_E0EE0E0E0NcNtB1k_10Descendant0EBG_:
   73|  18.9k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  18.9k|where
   75|  18.9k|  F: Parser<I, O1, E>,
   76|  18.9k|  G: FnMut(O1) -> O2,
   77|  18.9k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  18.9k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBM_5error18InternalParseErrorNCINvBK_17ignore_whitespaceBG_NCINvNtB6_6branch3altBE_BG_B1L_TNCINvB4_5valueBE_BG_BE_B1L_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1L_E0E0B3i_EE0B1L_E0E0BM_:
  243|  26.3k|  move |input: I| {
  244|  26.3k|    let i = input.clone();
  245|  26.3k|    match f.parse(input) {
  246|  6.13k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  20.1k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  26.3k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B26_EE0EBJ_:
  239|  23.4k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  23.4k|where
  241|  23.4k|  F: Parser<I, O, E>,
  242|  23.4k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1j_3oneEBG_:
   73|  26.1k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  26.1k|where
   75|  26.1k|  F: Parser<I, O1, E>,
   76|  26.1k|  G: FnMut(O1) -> O2,
   77|  26.1k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  26.1k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|  27.5k|  move |input: I| {
  244|  27.5k|    let i = input.clone();
  245|  27.5k|    match f.parse(input) {
  246|  6.56k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  21.0k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  27.5k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1C_NCINvNtB4_8sequence8precededBD_cBF_B1C_NCINvNtNtB4_9character8complete4charBD_B1C_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3E_15filter_selector0B1C_E0E0EBH_:
  663|  12.3k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  12.3k|where
  665|  12.3k|  O1: Into<O2>,
  666|  12.3k|  E1: Into<E2>,
  667|  12.3k|  E1: ParseError<I>,
  668|  12.3k|  E2: ParseError<I>,
  669|  12.3k|  F: Parser<I, O1, E1>,
  670|  12.3k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  12.3k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1x_NCINvNtNtB4_9character8complete4charBC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCIB27_BC_BE_B1x_TNCIB0_BC_NtBG_8SelectorBE_B1x_NvB2E_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBE_E0EE0E0E0EE0NcNtB1k_5Child0EBG_:
   73|  7.24k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  7.24k|where
   75|  7.24k|  F: Parser<I, O1, E>,
   76|  7.24k|  G: FnMut(O1) -> O2,
   77|  7.24k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  7.24k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete6one_ofBD_BD_uE0ECsmyidsRPtaf_15rsonpath_syntax:
  304|  34.9k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  34.9k|where
  306|  34.9k|  F: Parser<I, O, E>,
  307|  34.9k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  34.9k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser14string_literalEBJ_:
  663|  23.4k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  23.4k|where
  665|  23.4k|  O1: Into<O2>,
  666|  23.4k|  E1: Into<E2>,
  667|  23.4k|  E1: ParseError<I>,
  668|  23.4k|  E2: ParseError<I>,
  669|  23.4k|  F: Parser<I, O1, E1>,
  670|  23.4k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2m_6digit1BC_BH_EE0EBL_:
  239|  23.4k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  23.4k|where
  241|  23.4k|  F: Parser<I, O, E>,
  242|  23.4k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBK_5error18InternalParseErrorNCINvBI_17ignore_whitespaceBE_NCINvNtB4_6branch3altBC_BE_B1J_TNCINvB2_5valueBC_BE_BC_B1J_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1J_E0E0B3g_EE0B1J_E0EBK_:
  239|  26.3k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  26.3k|where
  241|  26.3k|  F: Parser<I, O, E>,
  242|  26.3k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  26.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBE_BJ_NCINvNtNtB6_9character8complete4charBE_BJ_E0INvB2o_6digit1BE_BJ_EE0E0BN_:
  243|    845|  move |input: I| {
  244|    845|    let i = input.clone();
  245|    845|    match f.parse(input) {
  246|    459|      Ok((i, o)) => Ok((i, Some(o))),
  247|    386|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|    845|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1v_E0E0BK_:
  460|  62.8k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBI_INtNtCslATUeuPuGvJ_4core6option6OptionBI_EBO_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2B_8precededBI_cBI_B1y_NCINvB39_4charBI_B1y_E0B36_E0E0NCIB3R_BI_BI_B1y_NCIB4d_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4d_BI_IBP_cEBI_B1y_NCIB3R_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4D_B4D_EE0E0B36_E0E0E0EE0EB1C_:
  506|  23.4k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  23.4k|  mut parser: F,
  508|  23.4k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  23.4k|where
  510|  23.4k|  F: Parser<I, O, E>,
  511|  23.4k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2X_6digit1BI_BN_EE0B3A_EE0EBR_:
  506|  37.6k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  37.6k|  mut parser: F,
  508|  37.6k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  37.6k|where
  510|  37.6k|  F: Parser<I, O, E>,
  511|  37.6k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  37.6k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1r_E0E00BM_:
  460|    979|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBE_NtNtBM_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1O_E0EBM_:
  453|  52.6k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  52.6k|  val: O1,
  455|  52.6k|  mut parser: F,
  456|  52.6k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  52.6k|where
  458|  52.6k|  F: Parser<I, O2, E>,
  459|  52.6k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  52.6k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  18.0k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  18.0k|where
  241|  18.0k|  F: Parser<I, O, E>,
  242|  18.0k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  18.0k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBO_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1I_E0E00BO_:
  460|  19.9k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3A_EE0EBR_:
  506|  23.4k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  23.4k|  mut parser: F,
  508|  23.4k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  23.4k|where
  510|  23.4k|  F: Parser<I, O, E>,
  511|  23.4k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  23.4k|}

_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE2orB6_:
   32|   306k|  fn or(self, other: Self) -> Self {
   33|   306k|    other
   34|   306k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
   73|   462k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|   462k|    Error { input, code: kind }
   75|   462k|  }
_RNvYuINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|  18.4k|  fn from_char(input: I, _: char) -> Self {
   27|  18.4k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  18.4k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsmyidsRPtaf_15rsonpath_syntax:
   77|   140k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   140k|    other
   79|   140k|  }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|   205k|  fn from_char(input: I, _: char) -> Self {
   27|   205k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   205k|  }
_RNvYINtNtCs6HefjSGhhBw_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|  17.0k|  fn from_char(input: I, _: char) -> Self {
   27|  17.0k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  17.0k|  }
_RNvXs7_NtCs6HefjSGhhBw_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
  122|  36.5k|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  11.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.7k|    self(i)
  326|  11.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete11tag_no_caseReB1c_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB1c_B1c_B1i_E5parseB1m_:
  324|    845|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    845|    self(i)
  326|    845|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvBD_12logical_expr9BooleanOpNCINvNtB7_6branch3altReB1z_NtNtBF_5error18InternalParseErrorTNCINvNtB7_10combinator5valueB2p_B1z_B2p_B2v_NCINvNtNtB7_5bytes8complete3tagB2p_B2p_B2v_E0E0B33_EE0B2v_E0INtB5_6ParserB2p_B1z_B2v_E5parseBF_:
  324|  26.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.3k|    self(i)
  326|  26.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3intINtB5_6ParserReB1u_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  21.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.3k|    self(i)
  326|  21.3k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsmyidsRPtaf_15rsonpath_syntax:
   36|  1.07k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  1.07k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  1.07k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  11.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.7k|    self(i)
  326|  11.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  20.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  20.0k|    self(i)
  326|  20.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtB11_5error18InternalParseErrorTNCINvNtB7_10combinator5valueBT_BV_BT_B20_NCINvNtNtB7_5bytes8complete3tagBT_BT_B20_E0E0B2z_EE0INtB5_6ParserBT_BV_B20_E5parseB11_:
  324|  26.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.3k|    self(i)
  326|  26.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  7.24k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.24k|    self(i)
  326|  7.24k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  1.74k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.74k|    self(i)
  326|  1.74k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  16.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.3k|    self(i)
  326|  16.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  4.38k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.38k|    self(i)
  326|  4.38k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  16.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.9k|    self(i)
  326|  16.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  26.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.9k|    self(i)
  326|  26.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  6.41k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.41k|    self(i)
  326|  6.41k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB49_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  1.66k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.66k|    self(i)
  326|  1.66k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1K_E0E0INtB5_6ParserB10_B12_B1K_E5parseB14_:
  324|  62.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  62.2k|    self(i)
  326|  62.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0INtB5_6ParserReNtBE_10ComparableNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  3.19k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.19k|    self(i)
  326|  3.19k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0INtB5_6ParserReNtBG_11LogicalExprNtNtBG_5error18InternalParseErrorE5parseBG_:
  324|  9.13k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.13k|    self(i)
  326|  9.13k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB13_10ComparableNtNtB13_5error18InternalParseErrorB1X_NvNtB13_6parser7literalE0INtB5_6ParserBZ_B1F_B1X_E5parseB13_:
  324|  4.99k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.99k|    self(i)
  326|  4.99k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|  61.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.5k|    self(i)
  326|  61.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1R_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1R_E5parseB17_:
  324|  92.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  92.1k|    self(i)
  326|  92.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1B_NCINvNtNtB7_9character8complete4charBT_B1B_E0NCINvNtB7_10combinator3cutBT_BV_B1B_NCIBB_BT_BV_B1B_TNCINvB46_3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  7.24k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.24k|    self(i)
  326|  7.24k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1M_E0NCINvNtB7_10combinator3cutB10_B16_B1M_NCINvNtB7_6branch3altB10_B16_B1M_TNCNvNtB18_6parser18descendant_segment0NCINvB38_3mapB10_NtB18_8SelectorB16_B1M_NvB4h_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4h_21member_name_shorthandNCINvB4h_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1M_E5parseB18_:
  324|  18.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.9k|    self(i)
  326|  18.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  2.02k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.02k|    self(i)
  326|  2.02k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  25.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.8k|    self(i)
  326|  25.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1G_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1G_NvB2P_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2P_21member_name_shorthandNCINvB2P_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1G_E5parseB12_:
  324|  11.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.7k|    self(i)
  326|  11.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB26_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  1.59k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.59k|    self(i)
  326|  1.59k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  49.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  49.4k|    self(i)
  326|  49.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|  27.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  27.5k|    self(i)
  326|  27.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1z_B1z_B1K_E5parseBF_:
  324|  3.25k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.25k|    self(i)
  326|  3.25k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|    825|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    825|    self(i)
  326|    825|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_cBY_B13_NCINvNtNtB7_9character8complete4charBY_B13_E0INvB2J_6digit1BY_B13_EE0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|    845|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    845|    self(i)
  326|    845|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   264k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   264k|    self(i)
  326|   264k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B1Z_E6finishB1c_:
   36|  18.9k|  fn finish(self) -> Result<(I, O), E> {
   37|  1.89k|    match self {
   38|  17.0k|      Ok(res) => Ok(res),
   39|  1.89k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  18.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2b_E5parseBF_:
  324|  20.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  20.0k|    self(i)
  326|  20.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   215k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   215k|    self(i)
  326|   215k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1Q_E0E0INtB5_6ParserB10_B12_B1Q_E5parseB14_:
  324|  62.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  62.8k|    self(i)
  326|  62.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  16.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.3k|    self(i)
  326|  16.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtB14_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0E0INtB5_6ParserB10_B12_B1N_E5parseB14_:
  324|  26.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.2k|    self(i)
  326|  26.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B20_E0E0INtB5_6ParserB10_B12_B20_E5parseB16_:
  324|  24.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  24.8k|    self(i)
  326|  24.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B27_E5parseBF_:
  324|  26.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.9k|    self(i)
  326|  26.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2E_6digit1BT_BY_EE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  37.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  37.6k|    self(i)
  326|  37.6k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  26.9k|  fn finish(self) -> Result<(I, O), E> {
   37|  1.89k|    match self {
   38|  25.0k|      Ok(res) => Ok(res),
   39|  1.89k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  26.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1K_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete6one_ofReB1a_uE0INtB5_6ParserB1a_cuE5parseCsmyidsRPtaf_15rsonpath_syntax:
  324|  34.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  34.9k|    self(i)
  326|  34.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1M_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB39_15filter_selector0B1M_E0E0INtB5_6ParserB10_B13_B1M_E5parseB15_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2b_cB1z_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2b_B2P_E0NCINvNtB7_10combinator3optB2b_B2b_B2P_NCIBB_B2b_NvBD_3intB2P_E0E0E0B2P_E0INtB5_6ParserB2b_B1z_B2P_E5parseBF_:
  324|  1.66k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.66k|    self(i)
  326|  1.66k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B24_E5parseBF_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpB10_NtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B2b_E0E0INtB5_6ParserB10_B12_B2b_E5parseB18_:
  324|  50.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.8k|    self(i)
  326|  50.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2g_E5parseBF_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCslATUeuPuGvJ_4core6option6OptionBX_EB13_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2Q_4charBX_B1O_E0B2N_E0E0NCIB3y_BX_BX_B1O_NCIB48_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB48_BX_IB14_cEBX_B1O_NCIB3y_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4x_B4x_EE0E0B2N_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literalINtB5_6ParserReNtBC_7LiteralNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  4.99k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.99k|    self(i)
  326|  4.99k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_BY_BY_B13_NCINvNtNtB7_5bytes8complete11tag_no_caseBY_BY_B13_E0NCIB24_BY_INtNtCslATUeuPuGvJ_4core6option6OptioncEBY_B13_NCIBB_BY_cB13_NCINvNtB7_6branch3altBY_cB13_TNCINvNtNtB7_9character8complete4charBY_B13_E0B59_EE0E0INvB5e_6digit1BY_B13_EE0E0E0INtB5_6ParserBY_IB3H_BY_EB13_E5parseB17_:
  324|    845|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    845|    self(i)
  326|    845|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|  22.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.5k|    self(i)
  326|  22.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  23.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.4k|    self(i)
  326|  23.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2a_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  38.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  38.5k|    self(i)
  326|  38.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2c_E0INtB5_6ParserB2a_cB2c_E5parseBF_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_B10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_5bytes8complete11tag_no_caseB10_B10_B1a_E0NCIBB_B10_INtNtCslATUeuPuGvJ_4core6option6OptioncEB10_B1a_NCINvNtB7_10combinator3optB10_cB1a_NCINvNtB7_6branch3altB10_cB1a_TNCINvNtNtB7_9character8complete4charB10_B1a_E0B50_EE0E0INvB55_6digit1B10_B1a_EE0E0INtB5_6ParserB10_B10_B1a_E5parseB1e_:
  324|    845|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|    845|    self(i)
  326|    845|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  8.55k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.55k|    self(i)
  326|  8.55k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }

_RINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBB_INtNtCslATUeuPuGvJ_4core6option6OptionBB_EBH_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2t_4charBB_B1r_E0B2q_E0E0NCIB3b_BB_BB_B1r_NCIB3L_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3L_BB_IBI_cEBB_B1r_NCIB3b_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4a_B4a_EE0E0B2q_E0E0E0EEB1v_:
  275|  23.4k|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|  23.4k|  mut l: List,
  277|  23.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|  23.4k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1x_E0NCNvNtBN_6parser6string0E0BN_:
   71|  92.1k|  move |input: I| {
   72|  92.1k|    let (input, _) = first.parse(input)?;
   73|  8.55k|    second.parse(input)
   74|  92.1k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3cutBE_BH_B1n_NCINvNtB4_6branch3altBE_BH_B1n_TNCINvB2I_3mapBE_NtBJ_8SelectorBH_B1n_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBH_E0EE0E0EBJ_:
   63|  7.24k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  7.24k|  mut first: F,
   65|  7.24k|  mut second: G,
   66|  7.24k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  7.24k|where
   68|  7.24k|  F: Parser<I, O1, E>,
   69|  7.24k|  G: Parser<I, O2, E>,
   70|  7.24k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  7.24k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB32_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  18.0k|  move |input: I| {
  106|  18.0k|    let (input, o1) = first.parse(input)?;
  107|  18.0k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  18.0k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3J_3intB1n_E0E0EB1r_:
   63|  1.66k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  1.66k|  mut first: F,
   65|  1.66k|  mut second: G,
   66|  1.66k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  1.66k|where
   68|  1.66k|  F: Parser<I, O1, E>,
   69|  1.66k|  G: Parser<I, O2, E>,
   70|  1.66k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  1.66k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1p_E0NCINvNtB4_10combinator3cutBE_BJ_B1p_NCINvNtB4_6branch3altBE_BJ_B1p_TNCNvNtBL_6parser18descendant_segment0NCINvB2I_3mapBE_NtBL_8SelectorBJ_B1p_NvB3N_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3N_21member_name_shorthandNCINvB3N_14failed_segmentBJ_E0EE0E0EBL_:
   63|  18.9k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  18.9k|  mut first: F,
   65|  18.9k|  mut second: G,
   66|  18.9k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  18.9k|where
   68|  18.9k|  F: Parser<I, O1, E>,
   69|  18.9k|  G: Parser<I, O2, E>,
   70|  18.9k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  18.9k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBD_INtNtCslATUeuPuGvJ_4core6option6OptionBD_EBJ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2v_4charBD_B1t_E0B2s_E0E0NCIB3d_BD_BD_B1t_NCIB3N_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3N_BD_IBK_cEBD_B1t_NCIB3d_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4c_B4c_EE0E0B2s_E0E0E0EE0B1x_:
  278|  23.4k|  move |i: I| l.parse(i)
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1N_6digit1BE_BK_EEBO_:
   63|  61.1k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  61.1k|  mut first: F,
   65|  61.1k|  mut second: G,
   66|  61.1k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  61.1k|where
   68|  61.1k|  F: Parser<I, O1, E>,
   69|  61.1k|  G: Parser<I, O2, E>,
   70|  61.1k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  61.1k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_BG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_5bytes8complete11tag_no_caseBG_BG_BO_E0NCIB2_BG_INtNtCslATUeuPuGvJ_4core6option6OptioncEBG_BO_NCINvNtB6_10combinator3optBG_cBO_NCINvNtB6_6branch3altBG_cBO_TNCINvNtNtB6_9character8complete4charBG_BO_E0B4u_EE0E0INvB4z_6digit1BG_BO_EE0E0BS_:
   71|    845|  move |input: I| {
   72|    845|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|    845|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1s_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2N_15filter_selector0B1s_E0E0BL_:
   71|  12.3k|  move |input: I| {
   72|  12.3k|    let (input, _) = first.parse(input)?;
   73|  12.3k|    second.parse(input)
   74|  12.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3L_3intB1p_E0E0E0B1t_:
   71|  1.66k|  move |input: I| {
   72|  1.66k|    let (input, _) = first.parse(input)?;
   73|  1.59k|    second.parse(input)
   74|  1.66k|  }
_RNvXs1_NtCs6HefjSGhhBw_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2d_B19_B19_B1b_NCIB2P_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2P_B19_INtNtCslATUeuPuGvJ_4core6option6OptioncEB19_B1b_NCIB2d_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3g_B3g_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5u_B19_EB7I_EB1b_E5parseB1f_:
  226|  23.4k|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|  23.4k|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|  23.4k|      }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1r_E0NCINvNtB6_10combinator3cutBG_BL_B1r_NCINvNtB6_6branch3altBG_BL_B1r_TNCNvNtBN_6parser18descendant_segment0NCINvB2K_3mapBG_NtBN_8SelectorBL_B1r_NvB3P_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3P_21member_name_shorthandNCINvB3P_14failed_segmentBL_E0EE0E0E0BN_:
   71|  18.9k|  move |input: I| {
   72|  18.9k|    let (input, _) = first.parse(input)?;
   73|  11.7k|    second.parse(input)
   74|  18.9k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1v_E0NCNvNtBL_6parser6string0EBL_:
   63|  98.9k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  98.9k|  mut first: F,
   65|  98.9k|  mut second: G,
   66|  98.9k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  98.9k|where
   68|  98.9k|  F: Parser<I, O1, E>,
   69|  98.9k|  G: Parser<I, O2, E>,
   70|  98.9k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  98.9k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3n_EE0E0INvB3s_6digit1BE_B1n_EEB1r_:
   63|  23.4k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  23.4k|  mut first: F,
   65|  23.4k|  mut second: G,
   66|  23.4k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  23.4k|where
   68|  23.4k|  F: Parser<I, O1, E>,
   69|  23.4k|  G: Parser<I, O2, E>,
   70|  23.4k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB30_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  18.0k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  18.0k|  mut first: F,
   99|  18.0k|  mut second: G,
  100|  18.0k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  18.0k|where
  102|  18.0k|  F: Parser<I, O1, E>,
  103|  18.0k|  G: Parser<I, O2, E>,
  104|  18.0k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  18.0k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB34_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  1.66k|    second.parse(input).map(|(i, _)| (i, o1))
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|  23.4k|  move |input: I| {
   72|  23.4k|    let (input, _) = first.parse(input)?;
   73|    410|    second.parse(input)
   74|  23.4k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_BE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4s_EE0E0INvB4x_6digit1BE_BM_EE0EBQ_:
   63|  23.4k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  23.4k|  mut first: F,
   65|  23.4k|  mut second: G,
   66|  23.4k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  23.4k|where
   68|  23.4k|  F: Parser<I, O1, E>,
   69|  23.4k|  G: Parser<I, O2, E>,
   70|  23.4k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  23.4k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1q_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2L_15filter_selector0B1q_E0EBJ_:
   63|  12.3k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  12.3k|  mut first: F,
   65|  12.3k|  mut second: G,
   66|  12.3k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  12.3k|where
   68|  12.3k|  F: Parser<I, O1, E>,
   69|  12.3k|  G: Parser<I, O2, E>,
   70|  12.3k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  12.3k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|  23.4k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  23.4k|  mut first: F,
   65|  23.4k|  mut second: G,
   66|  23.4k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  23.4k|where
   68|  23.4k|  F: Parser<I, O1, E>,
   69|  23.4k|  G: Parser<I, O2, E>,
   70|  23.4k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  23.4k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1P_6digit1BG_BM_EE0BQ_:
   71|  38.5k|  move |input: I| {
   72|  38.5k|    let (input, _) = first.parse(input)?;
   73|  5.79k|    second.parse(input)
   74|  38.5k|  }

_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCsmyidsRPtaf_15rsonpath_syntax:
  386|   395k|  fn iter_elements(&self) -> Self::IterElem {
  387|   395k|    self.chars()
  388|   395k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar12is_dec_digitCsmyidsRPtaf_15rsonpath_syntax:
  253|   371k|  fn is_dec_digit(self) -> bool {
  254|   371k|    self.is_ascii_digit()
  255|   371k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  296|   118k|  fn len(self) -> usize {
  297|   118k|    self.len_utf8()
  298|   118k|  }
_RINvXsj_NtCs6HefjSGhhBw_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|  61.5k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|  61.5k|    &self,
  677|  61.5k|    predicate: P,
  678|  61.5k|    e: ErrorKind,
  679|  61.5k|  ) -> IResult<Self, Self, E>
  680|  61.5k|  where
  681|  61.5k|    P: Fn(Self::Item) -> bool,
  682|  61.5k|  {
  683|  61.5k|    match self.find(predicate) {
  684|  47.6k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  13.9k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|      0|        if self.is_empty() {
  689|      0|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|      0|            Ok((
  694|      0|              self.get_unchecked(self.len()..),
  695|      0|              self.get_unchecked(..self.len()),
  696|      0|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|  61.5k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  265|  16.9k|  fn len(self) -> usize {
  266|  16.9k|    self.len_utf8()
  267|  16.9k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E15compare_no_case:
  845|    845|  fn compare_no_case(&self, t: &'b str) -> CompareResult {
  846|    845|    let pos = self
  847|    845|      .chars()
  848|    845|      .zip(t.chars())
  849|    845|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
  850|    845|
  851|    845|    match pos {
  852|    845|      Some(_) => CompareResult::Error,
  853|       |      None => {
  854|      0|        if self.len() >= t.len() {
  855|      0|          CompareResult::Ok
  856|       |        } else {
  857|      0|          CompareResult::Incomplete
  858|       |        }
  859|       |      }
  860|       |    }
  861|    845|  }
_RNCNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB7_7CompareBy_E15compare_no_case0CsmyidsRPtaf_15rsonpath_syntax:
  849|    845|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  272|   118k|  fn as_char(self) -> char {
  273|   118k|    *self
  274|   118k|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   215k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   215k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   215k|
  742|   215k|    match pos {
  743|   191k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  23.4k|        if self.len() >= t.len() {
  746|  23.4k|          CompareResult::Ok
  747|       |        } else {
  748|      0|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   215k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  241|   376k|  fn as_char(self) -> char {
  242|   376k|    self
  243|   376k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCsmyidsRPtaf_15rsonpath_syntax:
   33|   215k|  fn input_len(&self) -> usize {
   34|   215k|    self.len()
   35|   215k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCsmyidsRPtaf_15rsonpath_syntax:
  424|  23.4k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  23.4k|    let (prefix, suffix) = self.split_at(count);
  426|  23.4k|    (suffix, prefix)
  427|  23.4k|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   215k|  fn as_bytes(&self) -> &[u8] {
   98|   215k|    (*self).as_bytes()
   99|   215k|  }
_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0CsmyidsRPtaf_15rsonpath_syntax:
  740|   240k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   215k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   215k|    self.as_bytes().compare(t.as_bytes())
  841|   215k|  }
_RNvXs4_NtCs6HefjSGhhBw_3nom6traitsReNtB5_6Offset6offset:
   81|  14.3k|  fn offset(&self, second: &Self) -> usize {
   82|  14.3k|    let fst = self.as_ptr();
   83|  14.3k|    let snd = second.as_ptr();
   84|  14.3k|
   85|  14.3k|    snd as usize - fst as usize
   86|  14.3k|  }
_RNCNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|  59.4k|    self.chars().any(|i| i == token)
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   135k|    fn slice(&self, range: $ty) -> Self {
 1014|   135k|      &self[range]
 1015|   135k|    }
_RNvXs23_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  14.3k|    fn slice(&self, range: $ty) -> Self {
 1014|  14.3k|      &self[range]
 1015|  14.3k|    }
_RNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|  34.9k|  fn find_token(&self, token: char) -> bool {
  913|  34.9k|    self.chars().any(|i| i == token)
  914|  34.9k|  }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCshKcGSTcnXhh_21query_fuzz_round_trip:
   49|  1.48k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.48k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.48k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.48k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.48k|        // `SeqCst` operations on the slow path.
   54|  1.48k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.48k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCshKcGSTcnXhh_21query_fuzz_round_trip:
  963|  1.48k|        pub fn get(&self) -> Option<&T> {
  964|  1.48k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  1.48k|                None
  969|       |            }
  970|  1.48k|        }


_RNvMNtCsmyidsRPtaf_15rsonpath_syntax5errorNtB2_10ParseError25is_nesting_limit_exceededCshKcGSTcnXhh_21query_fuzz_round_trip:
   35|     44|    pub fn is_nesting_limit_exceeded(&self) -> bool {
   36|     44|        matches!(self.inner, InnerParseError::RecursionLimit(_))
   37|     44|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder24recursion_limit_exceededB6_:
   70|     44|    pub(crate) fn recursion_limit_exceeded(str: String, recursion_limit: usize) -> ParseError {
   71|     44|        ParseError {
   72|     44|            input: str,
   73|     44|            inner: InnerParseError::RecursionLimit(recursion_limit),
   74|     44|        }
   75|     44|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3newB6_:
   47|  1.07k|    pub(crate) fn new() -> Self {
   48|  1.07k|        Self { syntax_errors: vec![] }
   49|  1.07k|    }
_RNvMs1_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  192|  14.7k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  193|  14.7k|        Self { kind, rev_idx, len }
  194|  14.7k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_emptyB6_:
   59|  1.03k|    pub(crate) fn is_empty(&self) -> bool {
   60|  1.03k|        self.syntax_errors.is_empty()
   61|  1.03k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  462|   445k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|   445k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|   445k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE6append:
  466|   140k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  467|   140k|        match other {
  468|   140k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  469|      0|            _ => other,
  470|       |        }
  471|   140k|    }

_RNvXs2m_CsmyidsRPtaf_15rsonpath_syntaxNtB6_21SingularJsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  787|  6.45k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0CshKcGSTcnXhh_21query_fuzz_round_trip:
  832|  1.48k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs1b_CsmyidsRPtaf_15rsonpath_syntaxNtB6_8SelectorNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  404|  20.8k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs0_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  284|  1.07k|    fn default() -> Self {
  285|  1.07k|        Self {
  286|  1.07k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  287|  1.07k|            relaxed_whitespace: false,
  288|  1.07k|        }
  289|  1.07k|    }
_RNvXsA_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1137|  15.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1138|  15.1k|        write!(f, "[{}", self.first())?;
 1139|  15.1k|        for s in self.inner.iter().skip(1) {
 1140|  8.09k|            write!(f, ", {s}")?;
 1141|       |        }
 1142|  15.1k|        write!(f, "]")?;
 1143|  15.1k|        Ok(())
 1144|  15.1k|    }
_RNvXs14_CsmyidsRPtaf_15rsonpath_syntaxNtB6_9SelectorsNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  397|  12.9k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsD_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1172|  1.60k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1173|  1.60k|        match self {
 1174|    733|            Self::Forward(idx) => write!(f, "{idx}"),
 1175|    872|            Self::Backward(idx) => write!(f, "-{idx}"),
 1176|       |        }
 1177|  1.60k|    }
_RNvXsG_CsmyidsRPtaf_15rsonpath_syntaxNtB5_14ComparisonExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1244|  5.06k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1245|  5.06k|        write!(f, "{} {} {}", self.lhs, self.op, self.rhs)
 1246|  5.06k|    }
_RNvCsmyidsRPtaf_15rsonpath_syntax5parseCshKcGSTcnXhh_21query_fuzz_round_trip:
  335|  1.07k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  336|  1.07k|    Parser::default().parse(str)
  337|  1.07k|}
_RNvXs1y_CsmyidsRPtaf_15rsonpath_syntaxNtB6_5SliceNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  536|  1.65k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvMsm_CsmyidsRPtaf_15rsonpath_syntaxNtB5_21SingularJsonPathQuery8segmentsCshKcGSTcnXhh_21query_fuzz_round_trip:
  796|  6.58k|    pub fn segments(&self) -> impl Iterator<Item = &'_ SingularSegment> {
  797|  6.58k|        self.segments.iter()
  798|  6.58k|    }
_RNvXs1q_CsmyidsRPtaf_15rsonpath_syntaxNtB6_4StepNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  486|  3.32k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvMsr_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  866|  13.7k|    pub fn segments(&self) -> &[Segment] {
  867|  13.7k|        &self.segments
  868|  13.7k|    }
_RNvXs2f_CsmyidsRPtaf_15rsonpath_syntaxNtB6_10ComparableNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  761|  9.94k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsJ_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1295|  3.54k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1296|  3.54k|        match self {
 1297|  1.71k|            Self::String(s) => write!(f, "\"{}\"", str::escape(s.unquoted(), str::EscapeMode::DoubleQuoted)),
 1298|    845|            Self::Number(n) => write!(f, "{n}"),
 1299|    148|            Self::Bool(true) => write!(f, "true"),
 1300|    184|            Self::Bool(false) => write!(f, "false"),
 1301|    653|            Self::Null => write!(f, "null"),
 1302|       |        }
 1303|  3.54k|    }
_RNvXsM_CsmyidsRPtaf_15rsonpath_syntaxNtB5_15SingularSegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1332|  4.02k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1333|  4.02k|        match self {
 1334|  1.30k|            Self::Name(n) => write!(f, "['{}']", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1335|  2.72k|            Self::Index(i) => write!(f, "[{i}]"),
 1336|       |        }
 1337|  4.02k|    }
_RNvXsz_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1127|  15.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1128|  15.1k|        match self {
 1129|  3.27k|            Self::Child(s) => write!(f, "{s}"),
 1130|  11.8k|            Self::Descendant(s) => write!(f, "..{s}"),
 1131|       |        }
 1132|  15.1k|    }
_RNvXsC_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1162|  7.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1163|  7.12k|        match self {
 1164|  4.03k|            Self::FromStart(idx) => write!(f, "{idx}"),
 1165|  3.09k|            Self::FromEnd(idx) => write!(f, "-{idx}"),
 1166|       |        }
 1167|  7.12k|    }
_RNvXsF_CsmyidsRPtaf_15rsonpath_syntaxNtB5_11LogicalExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1199|  31.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1200|  31.8k|        match self {
 1201|  4.53k|            Self::Or(lhs, rhs) => {
 1202|  4.53k|                if lhs.precedence() <= self.precedence() {
 1203|  2.08k|                    write!(f, "({lhs})")?;
 1204|       |                } else {
 1205|  2.45k|                    write!(f, "{lhs}")?;
 1206|       |                }
 1207|  4.53k|                write!(f, " || ")?;
 1208|  4.53k|                if rhs.precedence() < self.precedence() {
 1209|      0|                    write!(f, "({rhs})")?;
 1210|       |                } else {
 1211|  4.53k|                    write!(f, "{rhs}")?;
 1212|       |                }
 1213|  4.53k|                Ok(())
 1214|       |            }
 1215|  1.76k|            Self::And(lhs, rhs) => {
 1216|  1.76k|                if lhs.precedence() < self.precedence() {
 1217|    439|                    write!(f, "({lhs})")?;
 1218|       |                } else {
 1219|  1.32k|                    write!(f, "{lhs}")?;
 1220|       |                }
 1221|  1.76k|                write!(f, " && ")?;
 1222|  1.76k|                if rhs.precedence() <= self.precedence() {
 1223|    469|                    write!(f, "({rhs})")?;
 1224|       |                } else {
 1225|  1.29k|                    write!(f, "{rhs}")?;
 1226|       |                }
 1227|  1.76k|                Ok(())
 1228|       |            }
 1229|  6.75k|            Self::Not(expr) => {
 1230|  6.75k|                if expr.precedence() <= self.precedence() {
 1231|  6.29k|                    write!(f, "!({expr})")
 1232|       |                } else {
 1233|    456|                    write!(f, "!{expr}")
 1234|       |                }
 1235|       |            }
 1236|  5.06k|            Self::Comparison(expr) => write!(f, "{expr}"),
 1237|  13.7k|            Self::Test(test) => write!(f, "{test}"),
 1238|       |        }
 1239|  31.8k|    }
_RNvXs1F_CsmyidsRPtaf_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  589|  3.49k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsI_CsmyidsRPtaf_15rsonpath_syntaxNtB5_10ComparableNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1272|  10.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1273|  10.1k|        match self {
 1274|  3.54k|            Self::Literal(lit) => write!(f, "{lit}"),
 1275|  2.42k|            Self::RelativeSingularQuery(q) => {
 1276|  2.42k|                write!(f, "@")?;
 1277|  2.42k|                for s in q.segments() {
 1278|  1.32k|                    write!(f, "{s}")?;
 1279|       |                }
 1280|  2.42k|                Ok(())
 1281|       |            }
 1282|  4.15k|            Self::AbsoluteSingularQuery(q) => {
 1283|  4.15k|                write!(f, "$")?;
 1284|  4.15k|                for s in q.segments() {
 1285|  2.70k|                    write!(f, "{s}")?;
 1286|       |                }
 1287|  4.15k|                Ok(())
 1288|       |            }
 1289|       |        }
 1290|  10.1k|    }
_RNvXs27_CsmyidsRPtaf_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  743|  4.97k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsX_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  369|  12.9k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2A_CsmyidsRPtaf_15rsonpath_syntaxNtB6_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  831|  12.4k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2t_CsmyidsRPtaf_15rsonpath_syntaxNtB6_15SingularSegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  802|  3.96k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1i_CsmyidsRPtaf_15rsonpath_syntaxNtB6_5IndexNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  452|  8.64k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsy_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1116|  1.07k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1117|  1.07k|        write!(f, "$")?;
 1118|  3.10k|        for s in &self.segments {
 1119|  2.03k|            write!(f, "{s}")?;
 1120|       |        }
 1121|  1.07k|        Ok(())
 1122|  1.07k|    }
_RNvXsP_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCshKcGSTcnXhh_21query_fuzz_round_trip:
  181|  1.07k|#[derive(Debug, Clone, Default)]
_RNvXs1M_CsmyidsRPtaf_15rsonpath_syntaxNtB6_11LogicalExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  646|  25.0k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstCshKcGSTcnXhh_21query_fuzz_round_trip:
  956|  15.1k|    pub fn first(&self) -> &Selector {
  957|  15.1k|        &self.inner[0]
  958|  15.1k|    }
_RNvMsj_CsmyidsRPtaf_15rsonpath_syntaxNtB5_11LogicalExpr10precedenceCshKcGSTcnXhh_21query_fuzz_round_trip:
  663|  38.7k|    fn precedence(&self) -> usize {
  664|  38.7k|        match self {
  665|  13.1k|            Self::Or(_, _) => 2,
  666|  5.22k|            Self::And(_, _) => 3,
  667|  4.08k|            Self::Comparison(_) => 4,
  668|  13.1k|            Self::Not(_) => 5,
  669|  3.13k|            Self::Test(_) => 10,
  670|       |        }
  671|  38.7k|    }
_RNvMs2_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6Parser5parseCshKcGSTcnXhh_21query_fuzz_round_trip:
  359|  1.07k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  360|  1.07k|        crate::parser::parse_with_options(str, &self.options)
  361|  1.07k|    }
_RNvXsB_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8SelectorNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1149|  23.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1150|  23.2k|        match self {
 1151|  5.63k|            Self::Name(n) => write!(f, "'{}'", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1152|  1.98k|            Self::Wildcard => write!(f, "*"),
 1153|  1.41k|            Self::Index(idx) => write!(f, "{idx}"),
 1154|  1.67k|            Self::Slice(slice) => write!(f, "{slice}"),
 1155|  12.4k|            Self::Filter(filter) => write!(f, "?{filter}"),
 1156|       |        }
 1157|  23.2k|    }
_RNvXsE_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1182|  1.67k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1183|  1.67k|        if self.start != Self::DEFAULT_START {
 1184|  1.60k|            write!(f, "{}", self.start)?;
 1185|     67|        }
 1186|  1.67k|        write!(f, ":")?;
 1187|  1.67k|        if let Some(end) = self.end {
 1188|  1.38k|            write!(f, "{end}")?;
 1189|    291|        }
 1190|  1.67k|        if self.step != Self::DEFAULT_STEP {
 1191|  1.60k|            write!(f, ":{}", self.step)?;
 1192|     67|        }
 1193|  1.67k|        Ok(())
 1194|  1.67k|    }
_RNvXsH_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8TestExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1251|  13.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1252|  13.7k|        match self {
 1253|  2.61k|            Self::Relative(q) => {
 1254|  2.61k|                write!(f, "@")?;
 1255|  2.61k|                for s in q.segments() {
 1256|  2.20k|                    write!(f, "{s}")?;
 1257|       |                }
 1258|       |            }
 1259|  11.1k|            Self::Absolute(q) => {
 1260|  11.1k|                write!(f, "$")?;
 1261|  11.1k|                for s in q.segments() {
 1262|  10.8k|                    write!(f, "{s}")?;
 1263|       |                }
 1264|       |            }
 1265|       |        }
 1266|  13.7k|        Ok(())
 1267|  13.7k|    }
_RNvXsK_CsmyidsRPtaf_15rsonpath_syntaxNtB5_12ComparisonOpNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1308|  5.06k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1309|  5.06k|        match self {
 1310|    876|            Self::EqualTo => write!(f, "=="),
 1311|    385|            Self::NotEqualTo => write!(f, "!="),
 1312|    138|            Self::LesserOrEqualTo => write!(f, "<="),
 1313|  1.26k|            Self::GreaterOrEqualTo => write!(f, ">="),
 1314|  1.66k|            Self::LessThan => write!(f, "<"),
 1315|    733|            Self::GreaterThan => write!(f, ">"),
 1316|       |        }
 1317|  5.06k|    }
_RNvXs20_CsmyidsRPtaf_15rsonpath_syntaxNtB6_14ComparisonExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  704|  4.97k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1T_CsmyidsRPtaf_15rsonpath_syntaxNtB6_8TestExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  677|  11.3k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  762|    362|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs9_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  475|  9.69k|    fn from(value: N) -> Self {
  476|  9.69k|        let value = value.into();
  477|  9.69k|        if value.as_i64() >= 0 {
  478|  5.92k|            Self::FromStart(value.abs())
  479|       |        } else {
  480|  3.76k|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  481|       |        }
  482|  9.69k|    }
_RNvXsb_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  507|  2.09k|    fn from(value: num::JsonInt) -> Self {
  508|  2.09k|        if value.as_i64() >= 0 {
  509|  1.10k|            Self::Forward(value.abs())
  510|       |        } else {
  511|    993|            Self::Backward(value.abs().try_into().expect("checked for zero already"))
  512|       |        }
  513|  2.09k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  803|     79|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  788|     31|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  370|     82|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  678|     78|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB4_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  744|  18.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  832|  54.7k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  803|     79|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  647|  56.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  762|  12.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsu_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8Selector11is_singularB5_:
 1040|  8.00k|    fn is_singular(&self) -> bool {
 1041|  8.00k|        matches!(self, Self::Name(_) | Self::Index(_))
 1042|  8.00k|    }
_RNvXs2a_CsmyidsRPtaf_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  743|  4.99k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB4_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  405|  99.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsq_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery15try_to_singular:
  847|  6.48k|    fn try_to_singular(self) -> std::result::Result<SingularJsonPathQuery, Self> {
  848|  6.48k|        if self.segments.iter().all(Segment::is_singular) {
  849|  6.48k|            let mut singular_segments = Vec::with_capacity(self.segments.len());
  850|  10.4k|            for segment in self.segments {
  851|  4.00k|                singular_segments.push(segment.into_singular());
  852|  4.00k|            }
  853|  6.48k|            Ok(SingularJsonPathQuery {
  854|  6.48k|                segments: singular_segments,
  855|  6.48k|            })
  856|       |        } else {
  857|      0|            Err(self)
  858|       |        }
  859|  6.48k|    }
_RNvXs1I_CsmyidsRPtaf_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  589|    979|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs3_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  385|  21.2k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  386|  21.2k|        let first = u.arbitrary::<Selector>()?;
  387|  19.6k|        let mut rest = u.arbitrary::<Vec<Selector>>()?;
  388|  18.6k|        rest.push(first);
  389|  18.6k|
  390|  18.6k|        Ok(Self::many(rest))
  391|  21.2k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  803|  6.01k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  744|    292|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB4_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  762|  37.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__27RECURSIVE_COUNT_LogicalExpr7___getit0B7_:
  647|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  832|    129|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs7_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8SelectorINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_11LogicalExprE4fromB5_:
  446|  10.4k|    fn from(value: LogicalExpr) -> Self {
  447|  10.4k|        Self::Filter(value)
  448|  10.4k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__26RECURSIVE_COUNT_Comparable7___getit0B7_:
  762|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB4_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  803|  17.8k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  705|  6.34k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  590|  4.08k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__30RECURSIVE_COUNT_ComparisonExpr7___getit0B7_:
  705|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsh_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num10JsonNumberE4from:
  629|    845|    fn from(value: num::JsonNumber) -> Self {
  630|    845|        Self::Number(value)
  631|    845|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB4_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  788|  25.7k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  832|    129|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__24RECURSIVE_COUNT_TestExpr7___getit0B7_:
  678|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB4_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  647|   168k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  832|  18.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  788|  8.60k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__23RECURSIVE_COUNT_Literal7___getit0B7_:
  590|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__21RECURSIVE_COUNT_Slice7___getit0B7_:
  537|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  537|  2.09k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  537|     17|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs_1__24RECURSIVE_COUNT_Selector7___getit0B7_:
  405|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs8_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  467|  9.69k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  468|  9.69k|        let num = u.arbitrary::<num::JsonInt>()?;
  469|  9.69k|        Ok(Self::from(num))
  470|  9.69k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  705|     38|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs_CsmyidsRPtaf_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  277|  1.03k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  278|  1.03k|        self.relaxed_whitespace
  279|  1.03k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB4_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  370|  63.7k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__29RECURSIVE_COUNT_JsonPathQuery7___getit0B7_:
  832|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  590|    420|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  678|  18.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__37RECURSIVE_COUNT_SingularJsonPathQuery7___getit0B7_:
  788|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  744|  6.34k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsl_CsmyidsRPtaf_15rsonpath_syntaxNtB5_10ComparableINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_7LiteralE4from:
  774|  1.80k|    fn from(value: Literal) -> Self {
  775|  1.80k|        Self::Literal(value)
  776|  1.80k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB4_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  590|  11.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  590|    420|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  537|     17|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  832|  1.48k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsd_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  579|  1.66k|    fn default() -> Self {
  580|  1.66k|        Self {
  581|  1.66k|            start: Index::FromStart(0.into()),
  582|  1.66k|            end: None,
  583|  1.66k|            step: Step::Forward(1.into()),
  584|  1.66k|        }
  585|  1.66k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  405|    216|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB4_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  705|  18.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment13into_singular:
  916|  4.00k|    fn into_singular(self) -> SingularSegment {
  917|  4.00k|        assert!(self.is_singular());
  918|  4.00k|        match self {
  919|  4.00k|            Self::Child(mut s) => match s.inner.drain(..).next().expect("is_singular") {
  920|  1.29k|                Selector::Name(n) => SingularSegment::Name(n),
  921|  2.70k|                Selector::Index(i) => SingularSegment::Index(i),
  922|      0|                _ => unreachable!(),
  923|       |            },
  924|      0|            Self::Descendant(_) => unreachable!(),
  925|       |        }
  926|  4.00k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment11is_singular:
  909|  8.00k|    fn is_singular(&self) -> bool {
  910|  8.00k|        match self {
  911|  8.00k|            Self::Child(s) => s.len() == 1 && s.first().is_singular(),
  912|      0|            Self::Descendant(_) => false,
  913|       |        }
  914|  8.00k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  405|  33.2k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  948|  35.7k|    pub fn many(vec: Vec<Selector>) -> Self {
  949|  35.7k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  950|  35.7k|        Self { inner: vec }
  951|  35.7k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  744|    292|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__31RECURSIVE_COUNT_SingularSegment7___getit0B7_:
  803|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  405|    216|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  370|  21.2k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstB5_:
  956|  8.00k|    pub fn first(&self) -> &Selector {
  957|  8.00k|        &self.inner[0]
  958|  8.00k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  788|     31|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  762|    362|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB4_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  537|  6.24k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  647|    411|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsa_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  499|  2.09k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  500|  2.09k|        let num = u.arbitrary::<num::JsonInt>()?;
  501|  2.09k|        Ok(Self::from(num))
  502|  2.09k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
  832|  4.46k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  647|    822|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  705|     38|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1109|  8.00k|    fn deref(&self) -> &Self::Target {
 1110|  8.00k|        &self.inner
 1111|  8.00k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__28RECURSIVE_COUNT_ComparisonOp7___getit0B7_:
  744|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  370|     82|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  678|     78|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXse_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3str10JsonStringE4fromB5_:
  608|  1.68k|    fn from(value: S) -> Self {
  609|  1.68k|        Self::String(value.into())
  610|  1.68k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB4_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  678|  54.8k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntax1__23RECURSIVE_COUNT_Segment7___getit0B7_:
  370|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]

_RNvXsH_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1022|    250|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1023|    250|        write!(f, "{}", self.0)
 1024|    250|    }
_RNvXsV_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
   61|    285|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1g_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  112|  3.78k|#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsK_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1043|    595|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1044|    595|        write!(f, "{}", self.0)
 1045|    595|    }
_RNvXsJ_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1036|  3.96k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1037|  3.96k|        write!(f, "{}", self.0)
 1038|  3.96k|    }
_RNvXs2_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  194|    845|    fn eq(&self, other: &Self) -> bool {
  195|    845|        match (self.normalize(), other.normalize()) {
  196|    285|            (Self::Int(l0), Self::Int(r0)) => l0 == r0,
  197|    560|            (Self::Float(l0), Self::Float(r0)) => l0 == r0,
  198|      0|            _ => false,
  199|       |        }
  200|    845|    }
_RNvXs16_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
   87|  6.50k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvMsb_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeCshKcGSTcnXhh_21query_fuzz_round_trip:
  588|  1.69k|    pub fn normalize(&self) -> Self {
  589|  1.69k|        match *self {
  590|    535|            Self::Int(x) => Self::Int(x),
  591|  1.15k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|     35|                Ok(int) => Self::Int(int),
  593|  1.12k|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  1.69k|    }
_RNvXsA_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromCshKcGSTcnXhh_21query_fuzz_round_trip:
  853|  1.15k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  854|  1.15k|        if value.0.fract() != 0.0 {
  855|    918|            return Err(JsonIntOverflowError::fractional(value.0));
  856|    237|        }
  857|    237|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  858|    237|        // We need to check that it is within bounds of JsonInt. This is correct
  859|    237|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  860|    237|        // so every value within is exactly representable as a f64.
  861|    237|        let int_value = value.0.trunc();
  862|    237|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  863|     20|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  864|    217|        }
  865|    217|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  866|    182|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  867|     35|        }
  868|     35|
  869|     35|        // This conversion is now guaranteed to be lossless.
  870|     35|        Ok(Self(int_value as i64))
  871|  1.15k|    }
_RNvXsI_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1029|  4.76k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1030|  4.76k|        write!(f, "{}", self.0)
 1031|  4.76k|    }
_RNvXsL_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCshKcGSTcnXhh_21query_fuzz_round_trip:
 1050|    845|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1051|    845|        match self {
 1052|    250|            Self::Int(int) => int.fmt(f),
 1053|    595|            Self::Float(flt) => flt.fmt(f),
 1054|       |        }
 1055|    845|    }
_RNvXs1q_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_9JsonFloatNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
  131|    560|#[derive(Clone, Copy, Debug, PartialEq)]
_RNvXsv_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  796|  8.62k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  797|  8.62k|        if value > JSON_UINT_UPPER_LIMIT {
  798|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  799|  8.62k|        } else if let Some(x) = NonZeroU64::new(value) {
  800|  8.62k|            Ok(Self(x))
  801|       |        } else {
  802|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  803|       |        }
  804|  8.62k|    }
_RNCNvNvNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__26RECURSIVE_COUNT_JsonNumber7___getit0B9_:
  184|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsb_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeB7_:
  588|    845|    pub fn normalize(&self) -> Self {
  589|    845|        match *self {
  590|      0|            Self::Int(x) => Self::Int(x),
  591|    845|            Self::Float(x) => match JsonInt::try_from(x) {
  592|    285|                Ok(int) => Self::Int(int),
  593|    560|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|    845|    }
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B8_:
  184|    950|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  11.7k|    pub const fn as_i64(&self) -> i64 {
  331|  11.7k|        self.0
  332|  11.7k|    }
_RNvXsM_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1062|  12.0k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1063|  12.0k|        let val = u.int_in_range(JSON_INT_LOWER_LIMIT..=JSON_INT_UPPER_LIMIT)?;
 1064|       |
 1065|  12.0k|        Ok(Self::new(val))
 1066|  12.0k|    }
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsc_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  603|  8.60k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  604|  8.60k|        if value > JSON_INT_UPPER_LIMIT {
  605|      0|            Err(JsonIntOverflowError::int_pos_overflow(value))
  606|  8.60k|        } else if value < JSON_INT_LOWER_LIMIT {
  607|      0|            Err(JsonIntOverflowError::int_neg_overflow(value))
  608|       |        } else {
  609|  8.60k|            Ok(Self::new(value))
  610|       |        }
  611|  8.60k|    }
_RNvXsl_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  699|  3.32k|    fn from(value: u32) -> Self {
  700|  3.32k|        Self::new(u64::from(value))
  701|  3.32k|    }
_RNvXsp_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  736|  8.60k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  737|  8.60k|        if value.0 < 0 {
  738|  3.86k|            Err(JsonIntOverflowError::negative_uint(value.0))
  739|       |        } else {
  740|  4.74k|            Ok(Self::new(value.0 as u64))
  741|       |        }
  742|  8.60k|    }
_RNvXsP_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1095|    662|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1096|    662|        let val = u.arbitrary::<f64>()?;
 1097|       |        // Wrap NaN, +Inf, -Inf into zero.
 1098|    662|        let val = if val.is_nan() {
 1099|     39|            0.0
 1100|    623|        } else if val.is_infinite() {
 1101|      0|            (0.0_f64).copysign(val)
 1102|       |        } else {
 1103|    623|            val
 1104|       |        };
 1105|       |
 1106|    662|        Ok(Self(val))
 1107|    662|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3newB7_:
  286|  20.6k|    const fn new(index: i64) -> Self {
  287|  20.6k|        Self(index)
  288|  20.6k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  15.6k|    pub const fn abs(&self) -> JsonUInt {
  363|  15.6k|        JsonUInt(self.0.unsigned_abs())
  364|  15.6k|    }
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsE_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  963|    845|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  964|    845|        match f64::from_str(s) {
  965|    845|            Ok(x) => {
  966|    845|                assert!(!s.is_empty()); // Empty strings are not accepted by f64::from_str.
  967|       |                                        // Rule 1.
  968|    845|                if x.is_nan() || x.is_infinite() {
  969|      0|                    return Err(Self::Err::infinite_or_nan(s));
  970|    845|                }
  971|    845|                if let Some((before, after)) = s.split_once('.') {
  972|       |                    // Rule 3. The case `before == "+"` is checked later.
  973|    459|                    if before.is_empty() || before == "-" {
  974|      0|                        return Err(Self::Err::nothing_before_decimal_point(s));
  975|    459|                    }
  976|    459|                    // Rule 4.
  977|    459|                    if after.is_empty() || after.starts_with(['e', 'E']) {
  978|      0|                        return Err(Self::Err::nothing_after_decimal_point(s));
  979|    459|                    }
  980|    386|                }
  981|    845|                let mut chars = s.chars();
  982|    845|                let first_c = chars.next().expect("s is non-empty");
  983|    845|                // Rule 2.
  984|    845|                if first_c == '+' {
  985|      0|                    return Err(Self::Err::leading_plus_sign(s));
  986|    845|                }
  987|       |                // Skip the leading minus if it exists.
  988|    845|                let s_no_sign = if first_c == '-' { chars.as_str() } else { s };
  989|       |                // Rule 5.
  990|       |                // Check for leading zeroes. We strip the first zero from the front and check what's left.
  991|       |                // The only acceptable case is that the next character is not a digit.
  992|    845|                if let Some(rest) = s_no_sign.strip_prefix('0') {
  993|    395|                    if matches!(rest.chars().next(), Some('0'..='9')) {
  994|      0|                        return Err(Self::Err::leading_zeros(s));
  995|    395|                    }
  996|    450|                }
  997|    845|                Ok(Self(x))
  998|       |            }
  999|       |            // Remember that all floats valid in JSON are also accepted by Rust,
 1000|       |            // so this is *definitely* not a valid JSON float.
 1001|      0|            Err(_) => Err(Self::Err::f64_parse_error(s)),
 1002|       |        }
 1003|    845|    }
_RNvXsG_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_9JsonFloatE4fromB7_:
 1015|    845|    fn from(value: JsonFloat) -> Self {
 1016|    845|        Self::Float(value)
 1017|    845|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newB7_:
  400|  8.06k|    const fn new(index: u64) -> Self {
  401|  8.06k|        Self(index)
  402|  8.06k|    }
_RNvXsi_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  662|  8.60k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  663|  8.60k|        match i64::from_str(s) {
  664|  8.60k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  665|      0|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  666|       |        }
  667|  8.60k|    }
_RNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB4_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  184|  2.83k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsx_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  824|  8.62k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  825|  8.62k|        Self::try_from(value.0)
  826|  8.62k|    }
_RNvXsA_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromB7_:
  853|    845|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  854|    845|        if value.0.fract() != 0.0 {
  855|    459|            return Err(JsonIntOverflowError::fractional(value.0));
  856|    386|        }
  857|    386|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  858|    386|        // We need to check that it is within bounds of JsonInt. This is correct
  859|    386|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  860|    386|        // so every value within is exactly representable as a f64.
  861|    386|        let int_value = value.0.trunc();
  862|    386|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  863|     10|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  864|    376|        }
  865|    376|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  866|     91|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  867|    285|        }
  868|    285|
  869|    285|        // This conversion is now guaranteed to be lossless.
  870|    285|        Ok(Self(int_value as i64))
  871|    845|    }

_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowCshKcGSTcnXhh_21query_fuzz_round_trip:
   87|     20|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     20|        Self {
   89|     20|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     20|        }
   91|     20|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowCshKcGSTcnXhh_21query_fuzz_round_trip:
   81|    182|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    182|        Self {
   83|    182|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    182|        }
   85|    182|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalCshKcGSTcnXhh_21query_fuzz_round_trip:
   75|    918|    pub(crate) fn fractional(src: f64) -> Self {
   76|    918|        Self {
   77|    918|            kind: JsonIntOverflowKind::Fractional(src),
   78|    918|        }
   79|    918|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalB6_:
   75|    459|    pub(crate) fn fractional(src: f64) -> Self {
   76|    459|        Self {
   77|    459|            kind: JsonIntOverflowKind::Fractional(src),
   78|    459|        }
   79|    459|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   63|  3.86k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  3.86k|        Self {
   65|  3.86k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  3.86k|        }
   67|  3.86k|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowB6_:
   87|     10|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     10|        Self {
   89|     10|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     10|        }
   91|     10|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowB6_:
   81|     91|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|     91|        Self {
   83|     91|            kind: JsonIntOverflowKind::FloatPos(src),
   84|     91|        }
   85|     91|    }

_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  20.0k|    move |q: &'a str| {
   28|  20.0k|        inner
   29|  20.0k|            .parse(skip_whitespace(q))
   30|  20.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  20.0k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  1.71k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0B5_:
  589|  6.41k|            |q| child_segment(q, ctx),
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  18.0k|    move |q: &'a str| {
   28|  18.0k|        inner
   29|  18.0k|            .parse(skip_whitespace(q))
   30|  18.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  18.0k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  2.97k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment:
  151|  18.9k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  18.9k|    map(
  153|  18.9k|        preceded(
  154|  18.9k|            tag(".."),
  155|  18.9k|            cut(alt((
  156|  18.9k|                |q| bracketed_selection(q, ctx),
  157|  18.9k|                map(wildcard_selector, Selectors::one),
  158|  18.9k|                member_name_shorthand,
  159|  18.9k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  18.9k|            ))),
  161|  18.9k|        ),
  162|  18.9k|        Segment::Descendant,
  163|  18.9k|    )(q)
  164|  18.9k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector:
  290|  20.0k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  20.0k|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  20.0k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6stringB3_:
  742|  98.9k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  743|       |    move |q: &'a str| {
  744|       |        let mut builder = JsonStringBuilder::new();
  745|       |        let mut syntax_errors = vec![];
  746|       |        let mut stream = q.char_indices().peekable();
  747|       |
  748|       |        while let Some((c_idx, c)) = stream.next() {
  749|       |            match (c, mode) {
  750|       |                ('\\', _) => {
  751|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|       |                        Ok(r) => {
  753|       |                            builder.push(r);
  754|       |                        }
  755|       |                        Err(err) => {
  756|       |                            syntax_errors.push(err);
  757|       |                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|       |                    return if syntax_errors.is_empty() {
  763|       |                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|       |                (..='\u{001F}', _) => {
  769|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|       |                    syntax_errors.push(SyntaxError::new(
  771|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|       |                        rest.len() + 1,
  773|       |                        1,
  774|       |                    ))
  775|       |                }
  776|       |                _ => {
  777|       |                    builder.push(c);
  778|       |                }
  779|       |            }
  780|       |        }
  781|       |
  782|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|       |            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|       |    }
  908|  98.9k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment:
  166|  7.24k|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  167|  7.24k|    map(
  168|  7.24k|        alt((
  169|  7.24k|            |q| bracketed_selection(q, ctx),
  170|  7.24k|            // This cut is only correct because we try parsing descendant_segment first.
  171|  7.24k|            preceded(
  172|  7.24k|                char('.'),
  173|  7.24k|                cut(alt((
  174|  7.24k|                    map(wildcard_selector, Selectors::one),
  175|  7.24k|                    member_name_shorthand,
  176|  7.24k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  177|  7.24k|                ))),
  178|  7.24k|            ),
  179|  7.24k|        )),
  180|  7.24k|        Segment::Child,
  181|  7.24k|    )(q)
  182|  7.24k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19bracketed_selection:
  193|  18.9k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  18.9k|    let (mut q, _) = char('[')(q)?;
  195|  18.9k|    let mut selectors = vec![];
  196|  18.9k|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|  26.9k|        match selector(q, ctx).finish() {
  200|  25.0k|            Ok((rest, selector)) => {
  201|  25.0k|                selectors.push(selector);
  202|  25.0k|                q = rest;
  203|  25.0k|            }
  204|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|      0|                syntax_errors.push(err);
  206|      0|                q = rest;
  207|      0|            }
  208|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|      0|                syntax_errors.append(&mut errs);
  210|      0|                q = rest;
  211|      0|            }
  212|  1.89k|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|  25.0k|        q = skip_whitespace(q);
  215|  25.0k|
  216|  25.0k|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|  7.95k|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|  17.0k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|  17.0k|                    q = rest;
  221|  17.0k|                    break;
  222|      0|                } else if q.is_empty() {
  223|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|      0|                    break;
  225|       |                } else {
  226|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|  17.0k|    if syntax_errors.is_empty() {
  233|  17.0k|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  18.9k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr:
  383|  25.8k|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  384|       |    // This is the most involved part of the parser, as it is inherently recursive.
  385|       |    //
  386|       |    // There are two sources of recursion here: parentheses introduce recursion,
  387|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  388|       |    // require checking for an operator, and if any is present recursively parsing
  389|       |    // another filter and wrapping the result in an appropriate node type.
  390|       |    //
  391|       |    // In total, we handle the negation operator at the start and then apply the rules:
  392|       |    // - '(' |=> filter_expression, ')'
  393|       |    // - literal |=> comp_op, comparable
  394|       |    // - query, comp_op |=> comparable
  395|       |    // - query
  396|       |    // where |=> means a cut. We separately apply two additional restrictions:
  397|       |    // - negation cannot immediately precede a comparison,
  398|       |    // - query in a comparison must be singular.
  399|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  400|       |    // these two special cases it can give much clearer error messages about them.
  401|       |    //
  402|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  403|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  404|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  405|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  406|       |    #[derive(Debug, Clone, Copy)]
  407|       |    enum BooleanOp {
  408|       |        And,
  409|       |        Or,
  410|       |    }
  411|       |
  412|  25.8k|    let Some(ctx) = ctx.increase_nesting() else {
  413|     44|        return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  414|       |    };
  415|       |
  416|  25.8k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  417|  20.3k|    let mut loop_rest = skip_whitespace(rest);
  418|  20.3k|    let mut final_expr = this_expr;
  419|       |
  420|       |    loop {
  421|  26.3k|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  422|  26.3k|            value(BooleanOp::And, tag("&&")),
  423|  26.3k|            value(BooleanOp::Or, tag("||")),
  424|  26.3k|        ))))(loop_rest)?;
  425|  26.3k|        loop_rest = rest;
  426|       |
  427|  6.13k|        match mb_boolean_op {
  428|  1.71k|            Some(BooleanOp::And) => {
  429|  1.74k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  430|  1.71k|                loop_rest = rest;
  431|  1.71k|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  432|       |            }
  433|  4.24k|            Some(BooleanOp::Or) => {
  434|  4.38k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  435|  4.24k|                loop_rest = rest;
  436|  4.24k|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  437|       |            }
  438|  20.1k|            None => break,
  439|  20.1k|        }
  440|  20.1k|    }
  441|  20.1k|
  442|  20.1k|    return Ok((loop_rest, final_expr));
  443|       |
  444|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|       |        let negated = opt_neg.is_some();
  447|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|       |            let rest = skip_whitespace(rest);
  450|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|       |            let selector = if negated {
  454|       |                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|       |                nested_filter
  457|       |            };
  458|       |            return Ok((rest, selector));
  459|       |        }
  460|       |
  461|       |        match literal(rest) {
  462|       |            Ok((rest, lhs)) => {
  463|       |                let rest = skip_whitespace(rest);
  464|       |                let (rest, comp_op) = match comparison_operator(rest) {
  465|       |                    Ok((rest, comp_op)) => (rest, comp_op),
  466|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|       |                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|       |                let rest = skip_whitespace(rest);
  476|       |                let (rest, rhs) = match comparable(rest, ctx) {
  477|       |                    Ok((rest, rhs)) => (rest, rhs),
  478|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|       |                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|       |                if negated {
  488|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|       |                    return Ok((
  491|       |                        rest,
  492|       |                        LogicalExpr::Comparison(ComparisonExpr {
  493|       |                            lhs: Comparable::Literal(lhs),
  494|       |                            op: comp_op,
  495|       |                            rhs,
  496|       |                        }),
  497|       |                    ));
  498|       |                }
  499|       |            }
  500|       |            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|       |            _ => (),
  502|       |        };
  503|       |
  504|       |        match filter_query(rest, ctx) {
  505|       |            Ok((rest, query)) => {
  506|       |                let query_len = q.len() - rest.len();
  507|       |                let rest = skip_whitespace(rest);
  508|       |                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|       |                    let rest = skip_whitespace(rest);
  510|       |                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|       |                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|       |                    let Some(singular_query) = query.try_to_comparable() else {
  514|       |                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|       |                    if negated {
  517|       |                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|       |                        Ok((
  520|       |                            rest,
  521|       |                            LogicalExpr::Comparison(ComparisonExpr {
  522|       |                                lhs: singular_query,
  523|       |                                rhs,
  524|       |                                op: comp_op,
  525|       |                            }),
  526|       |                        ))
  527|       |                    }
  528|       |                } else {
  529|       |                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|       |                    let expr = if negated {
  531|       |                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|       |                        test_expr
  534|       |                    };
  535|       |                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|       |            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|       |            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|       |    }
  542|  25.8k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  26.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.9k|where
   25|  26.9k|    F: nom::Parser<&'a str, T, E>,
   26|  26.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.9k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  12.3k|    move |q: &'a str| {
   28|  12.3k|        inner
   29|  12.3k|            .parse(skip_whitespace(q))
   30|  12.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  12.3k|    }
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single:
  444|  27.5k|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|  27.5k|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|  27.5k|        let negated = opt_neg.is_some();
  447|  27.5k|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|  9.13k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|  5.48k|            let rest = skip_whitespace(rest);
  450|  5.48k|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|      0|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|  5.48k|            let selector = if negated {
  454|  2.58k|                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|  2.90k|                nested_filter
  457|       |            };
  458|  5.48k|            return Ok((rest, selector));
  459|  18.4k|        }
  460|  18.4k|
  461|  18.4k|        match literal(rest) {
  462|  1.70k|            Ok((rest, lhs)) => {
  463|  1.70k|                let rest = skip_whitespace(rest);
  464|  1.70k|                let (rest, comp_op) = match comparison_operator(rest) {
  465|  1.70k|                    Ok((rest, comp_op)) => (rest, comp_op),
  466|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|      0|                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|  1.70k|                let rest = skip_whitespace(rest);
  476|  1.70k|                let (rest, rhs) = match comparable(rest, ctx) {
  477|  1.70k|                    Ok((rest, rhs)) => (rest, rhs),
  478|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|      0|                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|  1.70k|                if negated {
  488|      0|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|  1.70k|                    return Ok((
  491|  1.70k|                        rest,
  492|  1.70k|                        LogicalExpr::Comparison(ComparisonExpr {
  493|  1.70k|                            lhs: Comparable::Literal(lhs),
  494|  1.70k|                            op: comp_op,
  495|  1.70k|                            rhs,
  496|  1.70k|                        }),
  497|  1.70k|                    ));
  498|       |                }
  499|       |            }
  500|      0|            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|  16.7k|            _ => (),
  502|  16.7k|        };
  503|  16.7k|
  504|  16.7k|        match filter_query(rest, ctx) {
  505|  14.8k|            Ok((rest, query)) => {
  506|  14.8k|                let query_len = q.len() - rest.len();
  507|  14.8k|                let rest = skip_whitespace(rest);
  508|  14.8k|                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|  3.29k|                    let rest = skip_whitespace(rest);
  510|  3.29k|                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|      0|                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|  3.29k|                    let Some(singular_query) = query.try_to_comparable() else {
  514|      0|                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|  3.29k|                    if negated {
  517|      0|                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|  3.29k|                        Ok((
  520|  3.29k|                            rest,
  521|  3.29k|                            LogicalExpr::Comparison(ComparisonExpr {
  522|  3.29k|                                lhs: singular_query,
  523|  3.29k|                                rhs,
  524|  3.29k|                                op: comp_op,
  525|  3.29k|                            }),
  526|  3.29k|                        ))
  527|       |                    }
  528|       |                } else {
  529|  11.5k|                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|  11.5k|                    let expr = if negated {
  531|    357|                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|  11.2k|                        test_expr
  534|       |                    };
  535|  11.5k|                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|  1.84k|            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|      0|            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|  27.5k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  26.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.9k|where
   25|  26.9k|    F: nom::Parser<&'a str, T, E>,
   26|  26.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.9k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  2.02k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  2.02k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  26.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.9k|where
   25|  26.9k|    F: nom::Parser<&'a str, T, E>,
   26|  26.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.9k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs0_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  4.24k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0B5_:
  380|  12.3k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNvXs_NvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprNtB4_9BooleanOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB8_:
  406|  6.13k|    #[derive(Debug, Clone, Copy)]
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query:
  571|  19.9k|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  572|  19.9k|    let (rest, root_type) = alt((
  573|  19.9k|        value(RootSelectorType::Absolute, char('$')),
  574|  19.9k|        value(RootSelectorType::Relative, char('@')),
  575|  19.9k|    ))(q)?;
  576|  19.9k|    let rest = skip_whitespace(rest);
  577|  19.9k|    let mut segments = vec![];
  578|  19.9k|    let mut syntax_errors = vec![];
  579|  19.9k|
  580|  19.9k|    let mut q = rest;
  581|       |
  582|       |    loop {
  583|  34.9k|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  584|  18.0k|            break;
  585|  16.9k|        }
  586|  16.9k|
  587|  16.9k|        q = match alt((
  588|  16.9k|            |q| descendant_segment(q, ctx),
  589|  16.9k|            |q| child_segment(q, ctx),
  590|  16.9k|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  591|  16.9k|        ))(q)
  592|  16.9k|        .finish()
  593|       |        {
  594|  15.0k|            Ok((rest, segment)) => {
  595|  15.0k|                segments.push(segment);
  596|  15.0k|                rest
  597|       |            }
  598|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  599|      0|                syntax_errors.push(err);
  600|      0|                rest
  601|       |            }
  602|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  603|      0|                syntax_errors.append(&mut errs);
  604|      0|                rest
  605|       |            }
  606|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  607|  1.84k|                return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  608|       |            }
  609|      0|            Err(InternalParseError::NomError(err)) => panic!(
  610|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  611|      0|            ),
  612|       |        };
  613|  15.0k|        q = skip_whitespace(q);
  614|       |    }
  615|       |
  616|  18.0k|    if !syntax_errors.is_empty() {
  617|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  618|       |    } else {
  619|  18.0k|        let query = JsonPathQuery { segments };
  620|  18.0k|        let query = match root_type {
  621|  4.67k|            RootSelectorType::Relative => FilterQuery::Relative(query),
  622|  13.4k|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  623|       |        };
  624|  18.0k|        Ok((q, query))
  625|       |    }
  626|  19.9k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  26.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.9k|where
   25|  26.9k|    F: nom::Parser<&'a str, T, E>,
   26|  26.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.9k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  26.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.9k|where
   25|  26.9k|    F: nom::Parser<&'a str, T, E>,
   26|  26.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.9k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1S_E0B6_:
   27|  18.0k|    move |q: &'a str| {
   28|  18.0k|        inner
   29|  18.0k|            .parse(skip_whitespace(q))
   30|  18.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  18.0k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs0_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  4.38k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  4.38k|where
   25|  4.38k|    F: nom::Parser<&'a str, T, E>,
   26|  4.38k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  4.38k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0B5_:
  416|  25.8k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0B5_:
  146|    825|        |q| child_segment(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number:
  680|  23.4k|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  681|  23.4k|    map(float, |f| JsonNumber::from(f).normalize())(q)
  682|  23.4k|}
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  873|  1.60k|        fn read_hexadecimal_escape<I>(
  874|  1.60k|            q_len: usize,
  875|  1.60k|            c_idx: usize,
  876|  1.60k|            chars: &mut Peekable<I>,
  877|  1.60k|        ) -> std::result::Result<u32, SyntaxError>
  878|  1.60k|        where
  879|  1.60k|            I: Iterator<Item = (usize, char)>,
  880|  1.60k|        {
  881|  1.60k|            let mut x = 0;
  882|  8.01k|            for i in 0..4 {
  883|  6.41k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|  6.41k|                    SyntaxErrorKind::InvalidEscapeSequence,
  885|  6.41k|                    q_len - c_idx + 1,
  886|  6.41k|                    2 + i,
  887|  6.41k|                ))?;
  888|  6.41k|                let v = match c {
  889|  6.41k|                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|    801|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|      0|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|      0|                        return Err(SyntaxError::new(
  895|      0|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|      0|                            q_len - c_idx - i - 1,
  897|      0|                            1,
  898|      0|                        ))
  899|       |                    }
  900|       |                };
  901|  6.41k|                x <<= 4;
  902|  6.41k|                x += v;
  903|  6.41k|                chars.next();
  904|       |            }
  905|  1.60k|            Ok(x)
  906|  1.60k|        }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|  26.1k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  26.1k|}
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery17try_to_comparable:
  563|  6.48k|    fn try_to_comparable(self) -> Option<Comparable> {
  564|  6.48k|        match self {
  565|  2.40k|            Self::Relative(q) => q.try_to_singular().ok().map(Comparable::RelativeSingularQuery),
  566|  4.08k|            Self::Absolute(q) => q.try_to_singular().ok().map(Comparable::AbsoluteSingularQuery),
  567|       |        }
  568|  6.48k|    }
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|  25.8k|    fn increase_nesting(&self) -> Option<Self> {
   52|  25.8k|        match self.options.recursion_limit {
   53|  25.8k|            Some(limit) if limit <= self.current_nesting => None,
   54|  25.8k|            _ => Some(Self {
   55|  25.8k|                options: self.options,
   56|  25.8k|                current_nesting: self.current_nesting + 1,
   57|  25.8k|            }),
   58|       |        }
   59|  25.8k|    }
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  1.07k|    fn new(options: &'a ParserOptions) -> Self {
   45|  1.07k|        Self {
   46|  1.07k|            options,
   47|  1.07k|            current_nesting: 0,
   48|  1.07k|        }
   49|  1.07k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_json_path_query:
   66|  1.07k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  1.07k|    let original_input = q;
   68|  1.07k|    let mut parse_error = ParseErrorBuilder::new();
   69|  1.07k|    let mut segments = vec![];
   70|  1.07k|    let q = skip_whitespace(q);
   71|  1.07k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  1.07k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|      0|        parse_error.add(SyntaxError::new(
   74|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|      0|            original_input.len(),
   76|      0|            leading_whitespace_len,
   77|      0|        ));
   78|  1.07k|    }
   79|  1.07k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|  1.07k|        Ok((q, _)) => skip_whitespace(q),
   81|      0|        Err(e) => {
   82|      0|            parse_error.add(SyntaxError::new(
   83|      0|                SyntaxErrorKind::MissingRootIdentifier,
   84|      0|                e.input.len(),
   85|      0|                q.chars().next().map_or(1, char::len_utf8),
   86|      0|            ));
   87|      0|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  1.07k|    let mut q = q;
   92|  3.06k|    while !q.is_empty() {
   93|  2.02k|        q = match segment(q, ctx).finish() {
   94|  1.98k|            Ok((rest, segment)) => {
   95|  1.98k|                segments.push(segment);
   96|  1.98k|                rest
   97|       |            }
   98|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|      0|                parse_error.add(err);
  100|      0|                rest
  101|       |            }
  102|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|      0|                parse_error.add_many(errs);
  104|      0|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|     44|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|     44|                    original_input.to_owned(),
  109|     44|                    ctx.options
  110|     44|                        .recursion_limit
  111|     44|                        .expect("recursion limit should exists when exceeded"),
  112|     44|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  1.98k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  1.03k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  1.03k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  1.03k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  1.03k|        if trailing_whitespace_len > 0 {
  127|      0|            parse_error.add(SyntaxError::new(
  128|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|      0|                trailing_whitespace_len,
  130|      0|                trailing_whitespace_len,
  131|      0|            ));
  132|  1.03k|        }
  133|      0|    }
  134|       |
  135|  1.03k|    if parse_error.is_empty() {
  136|  1.03k|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|      0|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  1.07k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0B5_:
  169|  7.24k|            |q| bracketed_selection(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3int:
  726|  37.6k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  727|  37.6k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  728|       |
  729|  12.6k|    if int != "0" {
  730|  12.5k|        if int == "-0" {
  731|      0|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  732|  12.5k|        }
  733|  12.5k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  734|  12.5k|        if without_minus.strip_prefix(['0']).is_some() {
  735|      0|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  736|  12.5k|        }
  737|     77|    }
  738|       |
  739|  12.6k|    Ok((rest, int))
  740|  37.6k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_expr0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  20.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_15filter_selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  10.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0B5_:
  588|  16.9k|            |q| descendant_segment(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18parse_with_options:
   62|  1.07k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  1.07k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  1.07k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literal:
  283|  49.4k|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  284|  49.4k|    alt((
  285|  49.4k|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  286|  49.4k|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  287|  49.4k|    ))(q)
  288|  49.4k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0B5_:
  658|  3.19k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selector:
  342|  16.3k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  343|       |    // This has to be called after the slice selector.
  344|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  345|  16.3k|    let (rest, int) = int(q)?;
  346|  4.03k|    match parse_directional_int(int) {
  347|  2.55k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  348|  1.47k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  349|      0|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  350|      0|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  351|      0|            rest,
  352|      0|        ))),
  353|       |    }
  354|  16.3k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1U_E00B8_:
   30|  1.66k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1A_cBY_NtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB1A_B2s_E0NCINvNtB1K_10combinator3optB1A_B1A_B2s_NCIB0_B1A_NvB2_3intB2s_E0E0E0B2s_EB4_:
   23|  1.66k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.66k|where
   25|  1.66k|    F: nom::Parser<&'a str, T, E>,
   26|  1.66k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.66k|}
_RNvXsa_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_16RootSelectorTypeNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  549|  19.9k|#[derive(Clone, Copy)]
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  25.8k|    move |q: &'a str| {
   28|  25.8k|        inner
   29|  25.8k|            .parse(skip_whitespace(q))
   30|  25.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  25.8k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0B5_:
  429|  1.74k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selector:
  279|  26.9k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  280|  26.9k|    map(string_literal, Selector::Name)(q)
  281|  26.9k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  4.03k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector:
  379|  12.3k|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  380|  12.3k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  381|  12.3k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  12.3k|    move |q: &'a str| {
   28|  12.3k|        inner
   29|  12.3k|            .parse(skip_whitespace(q))
   30|  12.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  12.3k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable:
  657|  4.99k|fn comparable<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  658|  4.99k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
  659|  4.99k|
  660|  4.99k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  4.99k|        let (rest, query) = filter_query(q, ctx)?;
  662|  4.99k|        let Some(cmp) = query.try_to_comparable() else {
  663|  4.99k|            let query_len = q.len() - rest.len();
  664|  4.99k|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|  4.99k|        };
  666|  4.99k|        Ok((rest, cmp))
  667|  4.99k|    }
  668|  4.99k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0B5_:
  743|  8.55k|    move |q: &'a str| {
  744|  8.55k|        let mut builder = JsonStringBuilder::new();
  745|  8.55k|        let mut syntax_errors = vec![];
  746|  8.55k|        let mut stream = q.char_indices().peekable();
  747|       |
  748|  28.7k|        while let Some((c_idx, c)) = stream.next() {
  749|  28.7k|            match (c, mode) {
  750|       |                ('\\', _) => {
  751|  8.28k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|  8.28k|                        Ok(r) => {
  753|  8.28k|                            builder.push(r);
  754|  8.28k|                        }
  755|      0|                        Err(err) => {
  756|      0|                            syntax_errors.push(err);
  757|      0|                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|  8.55k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|  8.55k|                    return if syntax_errors.is_empty() {
  763|  8.55k|                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|      0|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|  11.2k|                (..='\u{001F}', _) => {
  769|      0|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|      0|                    syntax_errors.push(SyntaxError::new(
  771|      0|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|      0|                        rest.len() + 1,
  773|      0|                        1,
  774|      0|                    ))
  775|       |                }
  776|  11.9k|                _ => {
  777|  11.9k|                    builder.push(c);
  778|  11.9k|                }
  779|       |            }
  780|       |        }
  781|       |
  782|      0|        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|      0|            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|      0|            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|      0|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|      0|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|  8.55k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNCNvB6_8selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  10.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_directional_int:
  713|  8.60k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  714|  8.60k|    match JsonInt::from_str(int_str) {
  715|  8.60k|        Ok(int) => {
  716|  8.60k|            if let Ok(uint) = JsonUInt::try_from(int) {
  717|  4.74k|                DirectionalInt::Plus(uint)
  718|       |            } else {
  719|  3.86k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  720|       |            }
  721|       |        }
  722|      0|        Err(err) => DirectionalInt::Error(err),
  723|       |    }
  724|  8.60k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  3.32k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  3.32k|where
   25|  3.32k|    F: nom::Parser<&'a str, T, E>,
   26|  3.32k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  3.32k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literal:
  670|  23.4k|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  671|  23.4k|    alt((
  672|  23.4k|        into(number),
  673|  23.4k|        into(string_literal),
  674|  23.4k|        value(Literal::Bool(true), tag("true")),
  675|  23.4k|        value(Literal::Bool(false), tag("false")),
  676|  23.4k|        value(Literal::Null, tag("null")),
  677|  23.4k|    ))(q)
  678|  23.4k|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_float:
  695|  23.4k|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|  23.4k|        recognize(tuple((
  697|  23.4k|            digit1,
  698|  23.4k|            opt(preceded(char('.'), digit1)),
  699|  23.4k|            opt(preceded(
  700|  23.4k|                tag_no_case("e"),
  701|  23.4k|                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|  23.4k|            )),
  703|  23.4k|        )))(q)
  704|  23.4k|    }
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  790|  8.28k|        fn read_escape_sequence<I>(
  791|  8.28k|            q_len: usize,
  792|  8.28k|            c_idx: usize,
  793|  8.28k|            chars: &mut Peekable<I>,
  794|  8.28k|            mode: StringParseMode,
  795|  8.28k|        ) -> std::result::Result<char, SyntaxError>
  796|  8.28k|        where
  797|  8.28k|            I: Iterator<Item = (usize, char)>,
  798|  8.28k|        {
  799|  8.28k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|  8.28k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|  8.28k|                q_len - c_idx,
  802|  8.28k|                1,
  803|  8.28k|            ))?;
  804|    583|            match ctrl {
  805|       |                'u' => {
  806|  1.60k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|  1.60k|                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|      0|                        0xD800..=0xDBFF => {
  810|      0|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|      0|                                q_len - c_idx,
  813|      0|                                6,
  814|      0|                            ))?;
  815|      0|                            if next != '\\' {
  816|      0|                                return Err(SyntaxError::new(
  817|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|      0|                                    q_len - c_idx,
  819|      0|                                    6,
  820|      0|                                ));
  821|      0|                            }
  822|      0|                            chars.next();
  823|      0|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|      0|                                q_len - c_idx,
  826|      0|                                6,
  827|      0|                            ))?;
  828|      0|                            if next != 'u' {
  829|      0|                                return Err(SyntaxError::new(
  830|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|      0|                                    q_len - c_idx,
  832|      0|                                    6,
  833|      0|                                ));
  834|      0|                            }
  835|      0|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|      0|                            match low {
  837|      0|                                0xDC00..=0xDFFF => {
  838|      0|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|      0|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|      0|                                _ => Err(SyntaxError::new(
  842|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|      0|                                    q_len - c_idx,
  844|      0|                                    6,
  845|      0|                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|      0|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|      0|                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|      0|                            q_len - c_idx,
  852|      0|                            6,
  853|      0|                        )),
  854|  1.60k|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|    656|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|    155|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|    136|                'n' => Ok('\n'),       // U+000A LF line feed
  860|    357|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|    665|                'r' => Ok('\r'),       // U+000D CR carriage return
  862|    233|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|    350|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|  4.13k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|      0|                _ => Err(SyntaxError::new(
  866|      0|                    SyntaxErrorKind::InvalidEscapeSequence,
  867|      0|                    q_len - c_idx,
  868|      0|                    2,
  869|      0|                )), // no other escape sequences are allowed
  870|       |            }
  871|  8.28k|        }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float:
  685|  23.4k|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  686|       |    // Look ahead to verify that this has a chance to be a number.
  687|  23.4k|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  688|       |
  689|       |    // It is a number, so after here we can hard cut.
  690|    845|    return match JsonFloat::from_str(valid_str) {
  691|    845|        Ok(n) => Ok((rest, n)),
  692|      0|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  693|       |    };
  694|       |
  695|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|       |        recognize(tuple((
  697|       |            digit1,
  698|       |            opt(preceded(char('.'), digit1)),
  699|       |            opt(preceded(
  700|       |                tag_no_case("e"),
  701|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|       |            )),
  703|       |        )))(q)
  704|       |    }
  705|  23.4k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  1.97k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1E_cB12_NtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB1E_B2x_E0NCINvNtB1O_10combinator3optB1E_B1E_B2x_NCIB4_B1E_NvB6_3intB2x_E0E0E0B2x_E00B8_:
   30|  1.59k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  12.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  12.3k|where
   25|  12.3k|    F: nom::Parser<&'a str, T, E>,
   26|  12.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  12.3k|}
_RNCNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string00B7_:
  761|  8.55k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15skip_whitespace:
   13|   437k|fn skip_whitespace(q: &str) -> &str {
   14|   437k|    q.trim_start_matches(WHITESPACE)
   15|   437k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  1.74k|    move |q: &'a str| {
   28|  1.74k|        inner
   29|  1.74k|            .parse(skip_whitespace(q))
   30|  1.74k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.74k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number0B5_:
  681|    845|    map(float, |f| JsonNumber::from(f).normalize())(q)
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment:
  142|  2.02k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  2.02k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  2.02k|    alt((
  145|  2.02k|        |q| descendant_segment(q, ctx),
  146|  2.02k|        |q| child_segment(q, ctx),
  147|  2.02k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  2.02k|    ))(q)
  149|  2.02k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  26.9k|    move |q: &'a str| {
   28|  26.9k|        inner
   29|  26.9k|            .parse(skip_whitespace(q))
   30|  26.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  26.9k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB2l_B2o_E0E0B2o_E00B8_:
   30|  27.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|  25.8k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  25.8k|where
   25|  25.8k|    F: nom::Parser<&'a str, T, E>,
   26|  25.8k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  25.8k|}
_RNvXs7_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  273|    583|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB2_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReBY_NtNtB4_5error18InternalParseErrorTNCINvNtB1A_10combinator5valueB23_BY_B23_B28_NCINvNtNtB1A_5bytes8complete3tagB23_B23_B28_E0E0B2G_EE0B28_EB4_:
   23|  26.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.3k|where
   25|  26.3k|    F: nom::Parser<&'a str, T, E>,
   26|  26.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.3k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector:
  262|  26.9k|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  263|  26.9k|    alt((
  264|  26.9k|        ignore_whitespace(name_selector),
  265|  26.9k|        ignore_whitespace(wildcard_selector),
  266|  26.9k|        ignore_whitespace(slice_selector),
  267|  26.9k|        ignore_whitespace(index_selector),
  268|  26.9k|        ignore_whitespace(|q| filter_selector(q, ctx)),
  269|  26.9k|        failed_selector,
  270|  26.9k|    ))(q)
  271|  26.9k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|  3.25k|    move |q: &'a str| {
   28|  3.25k|        inner
   29|  3.25k|            .parse(skip_whitespace(q))
   30|  3.25k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  3.25k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selector:
  294|  18.0k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  295|  18.0k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  296|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  297|  1.66k|    let mut slice = crate::Slice::default();
  298|       |
  299|  1.66k|    if let Some(start_str) = opt_start {
  300|  1.59k|        match parse_directional_int(start_str) {
  301|    798|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  302|    797|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  303|      0|            DirectionalInt::Error(err) => {
  304|      0|                return fail(
  305|      0|                    SyntaxErrorKind::SliceStartParseError(err),
  306|      0|                    q.len(),
  307|      0|                    start_str.len(),
  308|      0|                    rest,
  309|      0|                );
  310|       |            }
  311|       |        };
  312|     67|    }
  313|  1.66k|    let q = rest;
  314|  1.66k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  315|       |
  316|  1.66k|    if let Some(end_str) = opt_end {
  317|  1.37k|        match parse_directional_int(end_str) {
  318|    655|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  319|    720|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  320|      0|            DirectionalInt::Error(err) => {
  321|      0|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  322|       |            }
  323|       |        };
  324|    287|    }
  325|       |
  326|  1.66k|    let q = rest;
  327|  1.66k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  328|       |
  329|  1.66k|    if let Some(Some(step_str)) = opt_step {
  330|  1.59k|        match parse_directional_int(step_str) {
  331|    728|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  332|    867|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  333|      0|            DirectionalInt::Error(err) => {
  334|      0|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  335|       |            }
  336|       |        };
  337|     67|    }
  338|       |
  339|  1.66k|    Ok((rest, Selector::Slice(slice)))
  340|  18.0k|}
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery15into_test_queryB6_:
  556|  11.5k|    fn into_test_query(self) -> TestExpr {
  557|  11.5k|        match self {
  558|  2.26k|            Self::Relative(q) => TestExpr::Relative(q),
  559|  9.32k|            Self::Absolute(q) => TestExpr::Absolute(q),
  560|       |        }
  561|  11.5k|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB2j_B2m_E0E0B2m_E0B6_:
   27|  27.5k|    move |q: &'a str| {
   28|  27.5k|        inner
   29|  27.5k|            .parse(skip_whitespace(q))
   30|  27.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  27.5k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0B5_:
  268|  12.3k|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  16.3k|    move |q: &'a str| {
   28|  16.3k|        inner
   29|  16.3k|            .parse(skip_whitespace(q))
   30|  16.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  16.3k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  1.97k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0B5_:
  145|  2.02k|        |q| descendant_segment(q, ctx),
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.87k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  1.66k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable14singular_query:
  660|  3.19k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  3.19k|        let (rest, query) = filter_query(q, ctx)?;
  662|  3.19k|        let Some(cmp) = query.try_to_comparable() else {
  663|      0|            let query_len = q.len() - rest.len();
  664|      0|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|       |        };
  666|  3.19k|        Ok((rest, cmp))
  667|  3.19k|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1C_cB10_NtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB1C_B2v_E0NCINvNtB1M_10combinator3optB1C_B1C_B2v_NCIB2_B1C_NvB4_3intB2v_E0E0E0B2v_E0B6_:
   27|  1.66k|    move |q: &'a str| {
   28|  1.66k|        inner
   29|  1.66k|            .parse(skip_whitespace(q))
   30|  1.66k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  1.66k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB6_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB12_NtNtB8_5error18InternalParseErrorTNCINvNtB1E_10combinator5valueB27_B12_B27_B2d_NCINvNtNtB1E_5bytes8complete3tagB27_B27_B2d_E0E0B2L_EE0B2d_E00B8_:
   30|  6.13k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1J_9character8complete4charB2h_B2k_E0E0B2k_EB4_:
   23|  27.5k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  27.5k|where
   25|  27.5k|    F: nom::Parser<&'a str, T, E>,
   26|  27.5k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  27.5k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19comparison_operator:
  646|  16.5k|fn comparison_operator(q: &str) -> IResult<&str, ComparisonOp, InternalParseError> {
  647|  16.5k|    alt((
  648|  16.5k|        value(ComparisonOp::EqualTo, tag("==")),
  649|  16.5k|        value(ComparisonOp::NotEqualTo, tag("!=")),
  650|  16.5k|        value(ComparisonOp::LesserOrEqualTo, tag("<=")),
  651|  16.5k|        value(ComparisonOp::GreaterOrEqualTo, tag(">=")),
  652|  16.5k|        value(ComparisonOp::LessThan, char('<')),
  653|  16.5k|        value(ComparisonOp::GreaterThan, char('>')),
  654|  16.5k|    ))(q)
  655|  16.5k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser28failed_segment_within_filterNtB4_7SegmentEB4_:
  628|  16.9k|fn failed_segment_within_filter<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  629|       |    move |q: &str| {
  630|       |        // We want to find the next segment or close the filter.
  631|       |        let rest = skip_one(q)
  632|       |            .trim_start_matches('.')
  633|       |            .trim_start_matches(|x| x != ',' && x != ']' && x != '.' && x != '[');
  634|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  635|       |    }
  636|  16.9k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|  11.7k|                |q| bracketed_selection(q, ctx),
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1Q_EB4_:
   23|  18.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  18.0k|where
   25|  18.0k|    F: nom::Parser<&'a str, T, E>,
   26|  18.0k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  18.0k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  1.74k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  1.74k|where
   25|  1.74k|    F: nom::Parser<&'a str, T, E>,
   26|  1.74k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  1.74k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0B5_:
  434|  4.38k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs0_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  4.38k|    move |q: &'a str| {
   28|  4.38k|        inner
   29|  4.38k|            .parse(skip_whitespace(q))
   30|  4.38k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  4.38k|    }
_RNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0B7_:
  448|  9.13k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB4_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB10_NtNtB6_5error18InternalParseErrorTNCINvNtB1C_10combinator5valueB25_B10_B25_B2b_NCINvNtNtB1C_5bytes8complete3tagB25_B25_B2b_E0E0B2J_EE0B2b_E0B6_:
   27|  26.3k|    move |q: &'a str| {
   28|  26.3k|        inner
   29|  26.3k|            .parse(skip_whitespace(q))
   30|  26.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  26.3k|    }

_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  25.6k|    pub fn unquoted(&self) -> &str {
  188|  25.6k|        let len = self.quoted.len();
  189|  25.6k|        debug_assert!(len >= 2);
  190|  25.6k|        &self.quoted[1..len - 1]
  191|  25.6k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  8.49k|    fn eq(&self, other: &Self) -> bool {
  211|  8.49k|        self.unquoted() == other.unquoted()
  212|  8.49k|    }
_RNvXsc_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10EscapeModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCshKcGSTcnXhh_21query_fuzz_round_trip:
   71|  2.06k|#[derive(Clone, Copy, PartialEq, Eq, Debug)]
_RNvNtCsmyidsRPtaf_15rsonpath_syntax3str6escapeCshKcGSTcnXhh_21query_fuzz_round_trip:
  131|  8.64k|pub fn escape(str: &str, mode: EscapeMode) -> String {
  132|  8.64k|    use std::fmt::Write;
  133|  8.64k|    let mut result = String::new();
  134|  20.2k|    for c in str.chars() {
  135|    530|        match c {
  136|       |            // # Mode-dependent quote escapes.
  137|    880|            '\'' if mode == EscapeMode::SingleQuoted => result.push_str(r"\'"),
  138|    530|            '\'' if mode == EscapeMode::DoubleQuoted => result.push('\''),
  139|    426|            '"' if mode == EscapeMode::SingleQuoted => result.push('"'),
  140|    233|            '"' if mode == EscapeMode::DoubleQuoted => result.push_str(r#"\""#),
  141|       |            // # Mode-independent escapes.
  142|  4.13k|            '\\' => result.push_str(r"\\"),
  143|       |            // ## Special control sequences.
  144|    657|            '\u{0008}' => result.push_str(r"\b"),
  145|    357|            '\u{000C}' => result.push_str(r"\f"),
  146|    136|            '\n' => result.push_str(r"\n"),
  147|    665|            '\r' => result.push_str(r"\r"),
  148|    155|            '\t' => result.push_str(r"\t"),
  149|       |            // ## Other control sequences escaped as Unicode escapes.
  150|  12.8k|            '\u{0000}'..='\u{001F}' => write!(result, "\\u{:0>4x}", c as u8).unwrap(),
  151|       |            // # Non-escapable characters.
  152|  11.2k|            _ => result.push(c),
  153|       |        }
  154|       |    }
  155|       |
  156|  8.64k|    result
  157|  8.64k|}
_RNvXs0_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  13.5k|    fn from(value: JsonStringBuilder) -> Self {
   59|  13.5k|        value.finish()
   60|  13.5k|    }
_RNvXs6_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
  228|  13.5k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  13.5k|        let chars = u.arbitrary_iter()?;
  230|  13.5k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|  31.9k|        for c in chars {
  236|  18.4k|            let c = c?;
  237|  18.4k|            match c {
  238|  18.4k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|  4.48k|                    builder.push('\\');
  240|  4.48k|                    builder.push(c);
  241|  4.48k|                }
  242|  13.9k|                _ => {
  243|  13.9k|                    builder.push(c);
  244|  13.9k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  13.5k|        Ok(builder.into())
  249|  13.5k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  22.1k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  22.1k|        self.quoted.push('"');
   52|  22.1k|        JsonString { quoted: self.quoted }
   53|  22.1k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  22.1k|    pub(crate) fn new() -> Self {
   40|  22.1k|        Self {
   41|  22.1k|            quoted: String::from('"'),
   42|  22.1k|        }
   43|  22.1k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  43.1k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  43.1k|        self.quoted.push(char);
   47|  43.1k|        self
   48|  43.1k|    }

