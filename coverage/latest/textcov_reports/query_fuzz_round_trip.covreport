_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentENtB5_9Arbitrary9size_hintCs7p50hnCSNrm_21query_fuzz_round_trip:
  688|  3.38k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|  3.38k|        (0, None)
  690|  3.38k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorENtB5_9Arbitrary9arbitraryB12_:
  679|  62.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  62.9k|        u.arbitrary_iter()?.collect()
  681|  62.9k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  64.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  64.3k|        u.arbitrary_iter()?.collect()
  681|  64.3k|    }
_RNvXs5_Cs98o54wqeRSK_9arbitraryINtNtCslATUeuPuGvJ_4core6option6OptionNtCs8HzoxQEUj1m_15rsonpath_syntax5IndexENtB5_9Arbitrary9arbitraryB17_:
  531|  6.20k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  6.20k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  4.40k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.79k|            None
  536|       |        })
  537|  6.20k|    }
_RNvXsp_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc5boxed3BoxNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprENtB5_9Arbitrary9arbitraryB14_:
  925|   172k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|   172k|        Arbitrary::arbitrary(u).map(Self::new)
  927|   172k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|  3.38k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  3.38k|        u.arbitrary_take_rest_iter()?.collect()
  685|  3.38k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax15SingularSegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  40.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  40.9k|        u.arbitrary_iter()?.collect()
  681|  40.9k|    }
_RNvXs_Cs98o54wqeRSK_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   434k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   434k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   434k|    }
_RNvXsL_Cs98o54wqeRSK_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  1.31k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  1.31k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  1.31k|                    u.fill_buffer(&mut buf)?;
  312|  1.31k|                    let mut x: $unsigned = 0;
  313|  10.4k|                    for i in 0..mem::size_of::<$ty>() {
  314|  10.4k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  10.4k|                    }
  316|  1.31k|                    Ok(x as $ty)
  317|  1.31k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   434k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   434k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   434k|                    u.fill_buffer(&mut buf)?;
  312|   434k|                    let mut x: $unsigned = 0;
  313|   434k|                    for i in 0..mem::size_of::<$ty>() {
  314|   434k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   434k|                    }
  316|   434k|                    Ok(x as $ty)
  317|   434k|                }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   685k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   685k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   685k|                    u.fill_buffer(&mut buf)?;
  312|   685k|                    let mut x: $unsigned = 0;
  313|  2.74M|                    for i in 0..mem::size_of::<$ty>() {
  314|  2.74M|                        x |= buf[i] as $unsigned << (i * 8);
  315|  2.74M|                    }
  316|   685k|                    Ok(x as $ty)
  317|   685k|                }
_RNvXsV_Cs98o54wqeRSK_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  1.31k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  1.31k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  1.31k|                }
_RNvXs0_Cs98o54wqeRSK_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|  72.4k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|  72.4k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|  72.4k|        if let Some(c) = char::from_u32(c) {
  376|  71.1k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|  1.23k|            c -= SURROGATES_START;
  380|  1.23k|            Ok(char::from_u32(c)
  381|  1.23k|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|  72.4k|    }

_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCs7p50hnCSNrm_21query_fuzz_round_trip:
   26|  3.38k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.38k|    let lower = lhs.0 + rhs.0;
   28|  3.38k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.38k|    (lower, upper)
   30|  3.38k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB10_13JsonPathQueryNtB4_9Arbitrary9size_hint0ECs7p50hnCSNrm_21query_fuzz_round_trip:
   12|  3.38k|pub fn recursion_guard(
   13|  3.38k|    depth: usize,
   14|  3.38k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  3.38k|) -> (usize, Option<usize>) {
   16|  3.38k|    const MAX_DEPTH: usize = 20;
   17|  3.38k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  3.38k|        f(depth + 1)
   21|       |    }
   22|  3.38k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCs7p50hnCSNrm_21query_fuzz_round_trip:
   37|  3.38k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  3.38k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  3.38k|}
_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0Cs7p50hnCSNrm_21query_fuzz_round_trip:
   28|  3.38k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCs7p50hnCSNrm_21query_fuzz_round_trip:
   85|  3.38k|    pub fn new(data: &'a [u8]) -> Self {
   86|  3.38k|        Unstructured { data }
   87|  3.38k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|   108k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   108k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   108k|        if keep_going {
  723|  51.6k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  57.1k|            None
  726|       |        }
  727|   108k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCs8HzoxQEUj1m_15rsonpath_syntax:
  720|   126k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   126k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   126k|        if keep_going {
  723|  72.4k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  53.9k|            None
  726|       |        }
  727|   126k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|   114k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   114k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   114k|        if keep_going {
  723|  64.6k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  49.6k|            None
  726|       |        }
  727|   114k|    }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int13from_unsignedCs8HzoxQEUj1m_15rsonpath_syntax:
  845|  43.9k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  43.9k|                    unsigned as Self
  847|  43.9k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentEB1i_:
  606|  64.3k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  64.3k|        &'b mut self,
  608|  64.3k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  64.3k|        Ok(ArbitraryIter {
  610|  64.3k|            u: &mut *self,
  611|  64.3k|            _marker: PhantomData,
  612|  64.3k|        })
  613|  64.3k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int10from_usizeCs8HzoxQEUj1m_15rsonpath_syntax:
  825|   348k|                fn from_usize(u: usize) -> Self {
  826|   348k|                    u as Self
  827|   348k|                }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int11to_unsignedCs8HzoxQEUj1m_15rsonpath_syntax:
  841|  87.9k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  87.9k|                    self as $unsigned_ty
  843|  87.9k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorEB1i_:
  606|  62.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  62.9k|        &'b mut self,
  608|  62.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  62.9k|        Ok(ArbitraryIter {
  610|  62.9k|            u: &mut *self,
  611|  62.9k|            _marker: PhantomData,
  612|  62.9k|        })
  613|  62.9k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentEB1s_:
  620|  3.38k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  3.38k|        self,
  622|  3.38k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  3.38k|        Ok(ArbitraryTakeRestIter {
  624|  3.38k|            u: self,
  625|  3.38k|            _marker: PhantomData,
  626|  3.38k|        })
  627|  3.38k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECs8HzoxQEUj1m_15rsonpath_syntax:
  606|  53.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  53.9k|        &'b mut self,
  608|  53.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  53.9k|        Ok(ArbitraryIter {
  610|  53.9k|            u: &mut *self,
  611|  53.9k|            _marker: PhantomData,
  612|  53.9k|        })
  613|  53.9k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs8HzoxQEUj1m_15rsonpath_syntax15SingularSegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  65.8k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  65.8k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  65.8k|        if keep_going {
  723|  24.8k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  40.9k|            None
  726|       |        }
  727|  65.8k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs8HzoxQEUj1m_15rsonpath_syntax:
  132|   756k|    pub fn is_empty(&self) -> bool {
  133|   756k|        self.len() == 0
  134|   756k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangexECs8HzoxQEUj1m_15rsonpath_syntax:
  293|  43.9k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  43.9k|    where
  295|  43.9k|        T: Int,
  296|  43.9k|    {
  297|  43.9k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  43.9k|        self.data = &self.data[bytes_consumed..];
  299|  43.9k|        Ok(result)
  300|  43.9k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs8HzoxQEUj1m_15rsonpath_syntax:
  167|   425k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   425k|    where
  169|   425k|        A: Arbitrary<'a>,
  170|   425k|    {
  171|   425k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   425k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implxINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs8HzoxQEUj1m_15rsonpath_syntax:
  302|  43.9k|    fn int_in_range_impl<T>(
  303|  43.9k|        range: ops::RangeInclusive<T>,
  304|  43.9k|        mut bytes: impl Iterator<Item = u8>,
  305|  43.9k|    ) -> Result<(T, usize)>
  306|  43.9k|    where
  307|  43.9k|        T: Int,
  308|  43.9k|    {
  309|  43.9k|        let start = *range.start();
  310|  43.9k|        let end = *range.end();
  311|  43.9k|        assert!(
  312|  43.9k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  43.9k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  43.9k|        }
  321|  43.9k|
  322|  43.9k|        // From here on out we work with the unsigned representation. All of the
  323|  43.9k|        // operations performed below work out just as well whether or not `T`
  324|  43.9k|        // is a signed or unsigned integer.
  325|  43.9k|        let start = start.to_unsigned();
  326|  43.9k|        let end = end.to_unsigned();
  327|  43.9k|
  328|  43.9k|        let delta = end.wrapping_sub(start);
  329|  43.9k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  43.9k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  43.9k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   348k|        while (bytes_consumed < mem::size_of::<T>())
  339|   348k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   305k|            let byte = match bytes.next() {
  342|    577|                None => break,
  343|   304k|                Some(b) => b,
  344|   304k|            };
  345|   304k|            bytes_consumed += 1;
  346|   304k|
  347|   304k|            // Combine this byte into our arbitrary integer, but avoid
  348|   304k|            // overflowing the shift for `u8` and `i8`.
  349|   304k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   304k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  43.9k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  43.9k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  43.9k|        let result = start.wrapping_add(offset);
  365|  43.9k|
  366|  43.9k|        // And convert back to our maybe-signed representation.
  367|  43.9k|        let result = T::from_unsigned(result);
  368|  43.9k|        debug_assert!(*range.start() <= result);
  369|  43.9k|        debug_assert!(result <= *range.end());
  370|       |
  371|  43.9k|        Ok((result, bytes_consumed))
  372|  43.9k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int7from_u8Cs8HzoxQEUj1m_15rsonpath_syntax:
  821|   304k|                fn from_u8(b: u8) -> Self {
  822|   304k|                    b as Self
  823|   304k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCs8HzoxQEUj1m_15rsonpath_syntax:
  837|  43.9k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  43.9k|                    <$ty>::wrapping_sub(self, rhs)
  839|  43.9k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCs8HzoxQEUj1m_15rsonpath_syntax:
  833|  43.9k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  43.9k|                    <$ty>::wrapping_add(self, rhs)
  835|  43.9k|                }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCs8HzoxQEUj1m_15rsonpath_syntax:
  108|   756k|    pub fn len(&self) -> usize {
  109|   756k|        self.data.len()
  110|   756k|    }
_RNvXs0_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1e_:
  738|  10.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  10.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  10.5k|        if keep_going {
  741|  8.43k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  2.14k|            None
  744|       |        }
  745|  10.5k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs8HzoxQEUj1m_15rsonpath_syntax15SingularSegmentEB1i_:
  606|  40.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  40.9k|        &'b mut self,
  608|  40.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  40.9k|        Ok(ArbitraryIter {
  610|  40.9k|            u: &mut *self,
  611|  40.9k|            _marker: PhantomData,
  612|  40.9k|        })
  613|  40.9k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num7JsonIntEB1e_:
  167|  42.5k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  42.5k|    where
  169|  42.5k|        A: Arbitrary<'a>,
  170|  42.5k|    {
  171|  42.5k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  42.5k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarydECs8HzoxQEUj1m_15rsonpath_syntax:
  167|  1.31k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.31k|    where
  169|  1.31k|        A: Arbitrary<'a>,
  170|  1.31k|    {
  171|  1.31k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.31k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorEB1c_:
  167|  73.1k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  73.1k|    where
  169|  73.1k|        A: Arbitrary<'a>,
  170|  73.1k|    {
  171|  73.1k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  73.1k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorEEB1J_:
  167|  62.9k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  62.9k|    where
  169|  62.9k|        A: Arbitrary<'a>,
  170|  62.9k|    {
  171|  62.9k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  62.9k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  1.12M|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  1.12M|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  1.12M|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  1.12M|        for byte in buffer[n..].iter_mut() {
  525|  74.9k|            *byte = 0;
  526|  74.9k|        }
  527|  1.12M|        self.data = &self.data[n..];
  528|  1.12M|        Ok(())
  529|  1.12M|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  43.9k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  43.9k|                    <$ty>::checked_add(self, rhs)
  831|  43.9k|                }

rust_fuzzer_test_input:
  259|  3.38k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  3.38k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  3.38k|
  262|  3.38k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  3.38k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  3.38k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  3.38k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  3.38k|                // get to longer inputs that actually lead to interesting executions
  267|  3.38k|                // quicker.
  268|  3.38k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  3.38k|                }
  271|  3.38k|
  272|  3.38k|                let mut u = Unstructured::new(bytes);
  273|  3.38k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  3.38k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  3.38k|                }
  291|       |
  292|  3.38k|                let data = match data {
  293|  2.14k|                    Ok(d) => d,
  294|  1.23k|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.14k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.14k|                result.to_libfuzzer_code()
  299|  3.38k|            }
_RNvNvCs7p50hnCSNrm_21query_fuzz_round_trip1__19___libfuzzer_sys_run:
  303|  2.14k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  1.99k|                $body
  305|  2.14k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs7p50hnCSNrm_21query_fuzz_round_trip:
   40|  2.14k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.14k|        match self {
   42|  1.99k|            Corpus::Keep => 0,
   43|    156|            Corpus::Reject => -1,
   44|       |        }
   45|  2.14k|    }
LLVMFuzzerTestOneInput:
   58|  3.38k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.38k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.38k|    });
   63|  3.38k|
   64|  3.38k|    match test_input {
   65|  3.38k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.38k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.38k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.38k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.38k|        rust_fuzzer_test_input(data_slice)
   62|  3.38k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  67.8k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  67.8k|        match self.0.parse(input.clone()) {
  136|  66.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.18k|          res => res,
  138|       |        }
  139|  67.8k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1Q_s_0NCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|  6.44k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2Y_EE0BI_:
   50|  67.8k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1x_NCINvNtNtB4_9character8complete4charBx_B1x_E0E0B25_EEBD_:
   47|  58.5k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  58.5k|  mut l: List,
   49|  58.5k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  58.5k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpBY_NtNtB16_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBY_BY_B29_E0E0Bw_EINtB4_3AltBY_B10_B29_E6choiceB16_:
  134|  79.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  79.3k|        match self.0.parse(input.clone()) {
  136|  73.2k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  6.05k|          res => res,
  138|       |        }
  139|  79.3k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   104k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   104k|        match self.0.parse(input.clone()) {
  136|  89.5k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  15.3k|          res => res,
  138|       |        }
  139|   104k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1m_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1m_E0E0B1U_B1U_B1U_NCIB1X_Bz_BB_cB1m_NCINvNtNtB6_9character8complete4charBz_B1m_E0E0B3u_EE0BD_:
   50|  46.2k|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_query0NCBz_s_0NCINvBB_28failed_segment_within_filterNtBD_7SegmentE0EINtB5_3AltReB2e_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  47.2k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  47.2k|        match self.0.parse(input.clone()) {
  136|  18.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  28.2k|          res => res,
  138|       |        }
  139|  47.2k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|   104k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBF_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1F_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1F_E0E0B2d_EEBF_:
   47|  79.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  79.3k|  mut l: List,
   49|  79.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  79.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBH_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1H_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1H_E0E0B2f_EE0BH_:
   50|  79.3k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Z_E0E0Bw_EINtB4_3AltBY_B10_B1Z_E6choiceB14_:
  134|  58.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  58.5k|        match self.0.parse(input.clone()) {
  136|  12.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  45.5k|          res => res,
  138|       |        }
  139|  58.5k|      }
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14slice_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NCIBA_B1z_NCNvBC_8selector0B27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|  84.1k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  84.1k|        match self.0.parse(input.clone()) {
  136|  59.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  24.3k|          res => res,
  138|       |        }
  139|  84.1k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1W_B2e_E0NCINvNtB6_10combinator3cutB1W_B1Z_B2e_NCINvB4_3altB1W_B1Z_B2e_TNCINvB3A_3mapB1W_NtBC_8SelectorB1Z_B2e_NvBA_17wildcard_selectorNvMst_BC_B1Z_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Z_E0EE0E0E0EINtB4_3AltB1W_B1Z_B2e_E6choiceBC_:
  134|  21.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  21.5k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  21.5k|          res => res,
  138|       |        }
  139|  21.5k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|   104k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   104k|  mut l: List,
   49|   104k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   104k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|   150k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   150k|        match self.0.parse(input.clone()) {
  136|   125k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  24.3k|          res => res,
  138|       |        }
  139|   150k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2W_EEBG_:
   47|  67.8k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  67.8k|  mut l: List,
   49|  67.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  67.8k|}
_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2g_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2g_E0EINtB5_3AltB20_B2g_B2v_E6choiceBD_:
  134|  32.1k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  32.1k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  32.1k|          res => res,
  138|       |        }
  139|  32.1k|      }
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpBZ_NtNtB13_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1P_E0E0Bx_Bx_Bx_NCIBA_BZ_B11_cB1P_NCINvNtNtB7_9character8complete4charBZ_B1P_E0E0B3f_EINtB5_3AltBZ_B11_B1P_E6choiceB13_:
  134|  46.2k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  46.2k|        match self.0.parse(input.clone()) {
  136|  43.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  2.34k|          res => res,
  138|       |        }
  139|  46.2k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EEBB_:
   47|  53.6k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  53.6k|  mut l: List,
   49|  53.6k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  53.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser12filter_query0NCB1Q_s_0NCINvB1S_28failed_segment_within_filterBB_E0EE0BD_:
   50|  47.2k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1e_B1e_NvNtBB_6parser6numberE0NCIB1P_Bx_NtNtBB_3str10JsonStringBz_B1e_B1e_NvB2Q_14string_literalE0NCINvB1R_5valueBx_Bz_Bx_B1e_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1e_E0E0B4h_B4h_EEBB_:
   47|  67.8k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  67.8k|  mut l: List,
   49|  67.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14slice_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NCIB1Q_Bz_NCNvB1S_8selector0B1f_E0NvB1S_15failed_selectorEEBB_:
   47|  84.1k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  84.1k|  mut l: List,
   49|  84.1k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  84.1k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1A_EEBE_:
   47|  67.8k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  67.8k|  mut l: List,
   49|  67.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  67.8k|}
_RNvXs2_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB23_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1P_B23_B23_NvB2H_14string_literalE0NCINvBC_5valueBY_B1P_BY_B23_NCINvNtNtB7_5bytes8complete3tagBY_BY_B23_E0E0B4a_B4a_EINtB5_3AltBY_B1P_B23_E6choiceB14_:
  134|  67.8k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  67.8k|        match self.0.parse(input.clone()) {
  136|  66.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.70k|          res => res,
  138|       |        }
  139|  67.8k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3L_3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  21.5k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  21.5k|  mut l: List,
   49|  21.5k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  21.5k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1k_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1k_E0E0B1S_B1S_B1S_NCIB1V_Bx_Bz_cB1k_NCINvNtNtB4_9character8complete4charBx_B1k_E0E0B3s_EEBB_:
   47|  46.2k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  46.2k|  mut l: List,
   49|  46.2k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  46.2k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|   150k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1z_NCINvNtNtB6_9character8complete4charBz_B1z_E0E0B27_EE0BF_:
   50|  58.5k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser12filter_query0NCB1O_s_0NCINvB1Q_28failed_segment_within_filterBz_E0EEBB_:
   47|  47.2k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  47.2k|  mut l: List,
   49|  47.2k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  47.2k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0BD_:
   50|  32.1k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1O_s_0NCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|  6.44k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  6.44k|  mut l: List,
   49|  6.44k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  6.44k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax10ComparableNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtBD_7LiteralBB_B1k_B1k_NvNtBD_6parser7literalE0NCNvB2M_10comparable0EE0BD_:
   50|  16.0k|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1U_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  6.44k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  6.44k|        match self.0.parse(input.clone()) {
  136|  2.55k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.88k|          res => res,
  138|       |        }
  139|  6.44k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|   150k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   150k|  mut l: List,
   49|   150k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   150k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax10ComparableNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtBB_7LiteralBz_B1i_B1i_NvNtBB_6parser7literalE0NCNvB2K_10comparable0EEBB_:
   47|  16.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  16.0k|  mut l: List,
   49|  16.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  16.0k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3N_3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  21.5k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtB11_10ComparableNtNtB11_5error18InternalParseErrorB1W_NvNtB11_6parser7literalE0NCNvB2A_10comparable0EINtB4_3AltBX_B1E_B1W_E6choiceB11_:
  134|  16.0k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  16.0k|        match self.0.parse(input.clone()) {
  136|  11.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.99k|          res => res,
  138|       |        }
  139|  16.0k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14slice_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NCIB1S_BB_NCNvB1U_8selector0B1h_E0NvB1U_15failed_selectorEE0BD_:
   50|  84.1k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1g_B1g_NvNtBD_6parser6numberE0NCIB1R_Bz_NtNtBD_3str10JsonStringBB_B1g_B1g_NvB2S_14string_literalE0NCINvB1T_5valueBz_BB_Bz_B1g_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1g_E0E0B4j_B4j_EE0BD_:
   50|  67.8k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|  21.5k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  21.5k|  mut l: List,
   49|  21.5k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  21.5k|}

_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|   660k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|   660k|  tag: T,
   34|   660k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|   660k|where
   36|   660k|  Input: InputTake + Compare<T>,
   37|   660k|  T: InputLength + Clone,
   38|   660k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|   660k|}
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBQ_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|  67.8k|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|  67.8k|  tag: T,
   76|  67.8k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|  67.8k|where
   78|  67.8k|  Input: InputTake + Compare<T>,
   79|  67.8k|  T: InputLength + Clone,
   80|  67.8k|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|  67.8k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBS_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0B11_:
   81|  1.70k|  move |i: Input| {
   82|  1.70k|    let tag_len = tag.input_len();
   83|  1.70k|    let t = tag.clone();
   84|       |
   85|  1.70k|    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|      0|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|  1.70k|        let e: ErrorKind = ErrorKind::Tag;
   89|  1.70k|        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|  1.70k|    res
   93|  1.70k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   624k|  move |i: Input| {
   40|   624k|    let tag_len = tag.input_len();
   41|   624k|    let t = tag.clone();
   42|   624k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  72.0k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   552k|        let e: ErrorKind = ErrorKind::Tag;
   46|   552k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   624k|    res
   50|   624k|  }

_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   984k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE0Cs8HzoxQEUj1m_15rsonpath_syntax:
   37|   104k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   104k|  }) {
   41|  52.3k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  51.7k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   104k|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE00Cs8HzoxQEUj1m_15rsonpath_syntax:
   37|   104k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   104k|    let b = t.as_char() == c;
   39|   104k|    (&c, b)
   40|   104k|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|   819k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   819k|  }) {
   41|   232k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   586k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   819k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuECs8HzoxQEUj1m_15rsonpath_syntax:
   32|   104k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   104k|where
   34|   104k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   104k|  <I as InputIter>::Item: AsChar,
   36|   104k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   104k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs8HzoxQEUj1m_15rsonpath_syntax:
   37|   128k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   128k|  }) {
   41|  80.6k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  48.0k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   128k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|   173k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|   173k|where
  437|   173k|  T: InputTakeAtPosition,
  438|   173k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|   173k|{
  440|   173k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|   173k|}
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs8HzoxQEUj1m_15rsonpath_syntax:
   32|   128k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   128k|where
   34|   128k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   128k|  <I as InputIter>::Item: AsChar,
   36|   128k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   128k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Cs8HzoxQEUj1m_15rsonpath_syntax:
   37|   128k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   128k|    let b = t.as_char() == c;
   39|   128k|    (&c, b)
   40|   128k|  }) {
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|   819k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   819k|    let b = t.as_char() == c;
   39|   819k|    (&c, b)
   40|   819k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBO_uECs8HzoxQEUj1m_15rsonpath_syntax:
   89|   100k|pub fn one_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
   90|   100k|where
   91|   100k|  I: Slice<RangeFrom<usize>> + InputIter,
   92|   100k|  <I as InputIter>::Item: AsChar + Copy,
   93|   100k|  T: FindToken<<I as InputIter>::Item>,
   94|   100k|{
   95|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|       |  }
   99|   100k|}
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  1.13M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  1.13M|where
   34|  1.13M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  1.13M|  <I as InputIter>::Item: AsChar,
   36|  1.13M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  1.13M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBQ_uE0Cs8HzoxQEUj1m_15rsonpath_syntax:
   95|   100k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|  47.2k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|  53.0k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|   100k|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBS_uE00Cs8HzoxQEUj1m_15rsonpath_syntax:
   95|   100k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {

_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2F_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|  21.5k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  21.5k|where
   75|  21.5k|  F: Parser<I, O1, E>,
   76|  21.5k|  G: FnMut(O1) -> O2,
   77|  21.5k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  21.5k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3B_EE0EBR_:
  506|  67.8k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  67.8k|  mut parser: F,
  508|  67.8k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  67.8k|where
  510|  67.8k|  F: Parser<I, O, E>,
  511|  67.8k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  67.8k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1F_NCINvNtB6_8sequence8precededBF_cBH_B1F_NCINvNtNtB6_9character8complete4charBF_B1F_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3H_15filter_selector0B1F_E0E0E0BJ_:
  672|  31.6k|  move |input: I| match parser.parse(input) {
  673|  26.0k|    Ok((i, o)) => Ok((i, o.into())),
  674|      0|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  5.65k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  31.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3D_EE0E0BT_:
  512|  67.8k|  move |input: I| {
  513|  67.8k|    let i = input.clone();
  514|  67.8k|    match parser.parse(i) {
  515|  1.70k|      Ok((i, _)) => {
  516|  1.70k|        let index = input.offset(&i);
  517|  1.70k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  66.1k|      Err(e) => Err(e),
  520|       |    }
  521|  67.8k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1k_3oneEBG_:
   73|  75.2k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  75.2k|where
   75|  75.2k|  F: Parser<I, O1, E>,
   76|  75.2k|  G: FnMut(O1) -> O2,
   77|  75.2k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  75.2k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1y_E0E00BM_:
  460|  7.13k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BE_BJ_NCINvNtNtB6_5bytes8complete11tag_no_caseBE_BE_BJ_E0NCIB1L_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BJ_NCIB2_BE_cBJ_NCINvNtB6_6branch3altBE_cBJ_TNCINvNtNtB6_9character8complete4charBE_BJ_E0B4L_EE0E0INvB4Q_6digit1BE_BJ_EE0E0E0BN_:
  243|  1.70k|  move |input: I| {
  244|  1.70k|    let i = input.clone();
  245|  1.70k|    match f.parse(input) {
  246|      0|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.70k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  1.70k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBM_5error18InternalParseErrorNCINvBK_17ignore_whitespaceBG_NCINvNtB6_6branch3altBE_BG_B1M_TNCINvB4_5valueBE_BG_BE_B1M_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1M_E0E0B3j_EE0B1M_E0E0BM_:
  243|  79.3k|  move |input: I| {
  244|  79.3k|    let i = input.clone();
  245|  79.3k|    match f.parse(input) {
  246|  20.2k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  59.0k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  79.3k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1o_E0EBI_:
  453|   203k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   203k|  val: O1,
  455|   203k|  mut parser: F,
  456|   203k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   203k|where
  458|   203k|  F: Parser<I, O2, E>,
  459|   203k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   203k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|  85.0k|  move |input: I| {
  244|  85.0k|    let i = input.clone();
  245|  85.0k|    match f.parse(input) {
  246|  25.1k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  59.8k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  85.0k|  }
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpcNtNtBM_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1w_E0E00BM_:
  460|  8.96k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1v_4Name0E0BK_:
   78|  84.1k|  move |input: I| {
   79|  84.1k|    let (input, o1) = parser.parse(input)?;
   80|  24.3k|    Ok((input, f(o1)))
   81|  84.1k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2j_6number0E0BK_:
   78|  67.8k|  move |input: I| {
   79|  67.8k|    let (input, o1) = parser.parse(input)?;
   80|  1.70k|    Ok((input, f(o1)))
   81|  67.8k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete6one_ofBF_BF_uE0E0Cs8HzoxQEUj1m_15rsonpath_syntax:
  308|   100k|  move |input: I| {
  309|   100k|    let i = input.clone();
  310|   100k|    match f.parse(input) {
  311|  47.2k|      Ok((_, o)) => Ok((i, o)),
  312|  53.0k|      Err(e) => Err(e),
  313|       |    }
  314|   100k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtBH_10ComparableNtNtBH_5error18InternalParseErrorB1B_NvNtBH_6parser7literalEBH_:
  663|  16.0k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  16.0k|where
  665|  16.0k|  O1: Into<O2>,
  666|  16.0k|  E1: Into<E2>,
  667|  16.0k|  E1: ParseError<I>,
  668|  16.0k|  E2: ParseError<I>,
  669|  16.0k|  F: Parser<I, O1, E1>,
  670|  16.0k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  16.0k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser6numberE0BL_:
  672|  67.8k|  move |input: I| match parser.parse(input) {
  673|  1.70k|    Ok((i, o)) => Ok((i, o.into())),
  674|  66.1k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  67.8k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpBG_NtNtBO_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1R_E0E0BO_:
  460|   152k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete6one_ofBD_BD_uE0ECs8HzoxQEUj1m_15rsonpath_syntax:
  304|   100k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|   100k|where
  306|   100k|  F: Parser<I, O, E>,
  307|   100k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|   100k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1D_NCINvNtB4_8sequence8precededBD_cBF_B1D_NCINvNtNtB4_9character8complete4charBD_B1D_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3F_15filter_selector0B1D_E0E0EBH_:
  663|  31.6k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  31.6k|where
  665|  31.6k|  O1: Into<O2>,
  666|  31.6k|  E1: Into<E2>,
  667|  31.6k|  E1: ParseError<I>,
  668|  31.6k|  E2: ParseError<I>,
  669|  31.6k|  F: Parser<I, O1, E1>,
  670|  31.6k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  31.6k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpBI_NtNtBQ_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1T_E0E00BQ_:
  460|  20.2k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1H_E0E0BM_:
  460|  71.4k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypecNtNtBO_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1J_E0E00BO_:
  460|  58.5k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1w_E0E0BK_:
  460|   175k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|  85.0k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  85.0k|where
  241|  85.0k|  F: Parser<I, O, E>,
  242|  85.0k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  85.0k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1N_3intBJ_E0E0BN_:
  243|  8.48k|  move |input: I| {
  244|  8.48k|    let i = input.clone();
  245|  8.48k|    match f.parse(input) {
  246|  7.52k|      Ok((i, o)) => Ok((i, Some(o))),
  247|    965|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  8.48k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpBE_NtNtBM_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1P_E0EBM_:
  453|   158k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   158k|  val: O1,
  455|   158k|  mut parser: F,
  456|   158k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   158k|where
  458|   158k|  F: Parser<I, O2, E>,
  459|   158k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   158k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2o_BE_NvB2q_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  4.25k|  move |input: I| {
  244|  4.25k|    let i = input.clone();
  245|  4.25k|    match f.parse(input) {
  246|  4.23k|      Ok((i, o)) => Ok((i, Some(o))),
  247|     23|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  4.25k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2s_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBE_E0EE0EBG_:
  631|  53.6k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  53.6k|where
  633|  53.6k|  F: Parser<I, O, E>,
  634|  53.6k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  53.6k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1y_NvB4n_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|  53.6k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  53.6k|where
   75|  53.6k|  F: Parser<I, O1, E>,
   76|  53.6k|  G: FnMut(O1) -> O2,
   77|  53.6k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  53.6k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|  21.5k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  21.5k|where
  633|  21.5k|  F: Parser<I, O, E>,
  634|  21.5k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  21.5k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpcNtNtBI_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1s_E0EBI_:
  453|  92.5k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  92.5k|  val: O1,
  455|  92.5k|  mut parser: F,
  456|  92.5k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  92.5k|where
  458|  92.5k|  F: Parser<I, O2, E>,
  459|  92.5k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  92.5k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1s_E0E00BM_:
  460|  3.07k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2m_BC_NvB2o_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  4.25k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  4.25k|where
  241|  4.25k|  F: Parser<I, O, E>,
  242|  4.25k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  4.25k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|   104k|  move |input: I| {
  513|   104k|    let i = input.clone();
  514|   104k|    match parser.parse(i) {
  515|  40.5k|      Ok((i, _)) => {
  516|  40.5k|        let index = input.offset(&i);
  517|  40.5k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  64.4k|      Err(e) => Err(e),
  520|       |    }
  521|   104k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2n_6digit1BC_BH_EE0EBL_:
  239|  67.8k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  67.8k|where
  241|  67.8k|  F: Parser<I, O, E>,
  242|  67.8k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  67.8k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBE_BJ_NCINvNtNtB6_9character8complete4charBE_BJ_E0INvB2p_6digit1BE_BJ_EE0E0BN_:
  243|  1.70k|  move |input: I| {
  244|  1.70k|    let i = input.clone();
  245|  1.70k|    match f.parse(input) {
  246|    595|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.10k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  1.70k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtNtBI_5error18InternalParseErrorNCNvNvNtBI_6parser12logical_expr12parse_single0E0BI_:
  635|  33.2k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  33.2k|    rest => rest,
  638|  33.2k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser14string_literalEBJ_:
  663|  67.8k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  67.8k|where
  665|  67.8k|  O1: Into<O2>,
  666|  67.8k|  E1: Into<E2>,
  667|  67.8k|  E1: ParseError<I>,
  668|  67.8k|  E2: ParseError<I>,
  669|  67.8k|  F: Parser<I, O1, E1>,
  670|  67.8k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1L_3intBH_E0EBL_:
  239|  8.51k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  8.51k|where
  241|  8.51k|  F: Parser<I, O, E>,
  242|  8.51k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  8.51k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtNtBG_5error18InternalParseErrorNCNvNvNtBG_6parser12logical_expr12parse_single0EBG_:
  631|  33.2k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  33.2k|where
  633|  33.2k|  F: Parser<I, O, E>,
  634|  33.2k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  33.2k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1F_E0EBK_:
  453|   117k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   117k|  val: O1,
  455|   117k|  mut parser: F,
  456|   117k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   117k|where
  458|   117k|  F: Parser<I, O2, E>,
  459|   117k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   117k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1u_E0EBI_:
  453|   185k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   185k|  val: O1,
  455|   185k|  mut parser: F,
  456|   185k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   185k|where
  458|   185k|  F: Parser<I, O2, E>,
  459|   185k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   185k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1q_E0E0BK_:
  460|   183k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  50.3k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  50.3k|where
  241|  50.3k|  F: Parser<I, O, E>,
  242|  50.3k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  50.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1A_NvB4p_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|  53.6k|  move |input: I| {
   79|  53.6k|    let (input, o1) = parser.parse(input)?;
   80|  26.8k|    Ok((input, f(o1)))
   81|  53.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser14string_literalE0BL_:
  672|  66.1k|  move |input: I| match parser.parse(input) {
  673|  4.59k|    Ok((i, o)) => Ok((i, o.into())),
  674|  61.5k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  66.1k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtBJ_10ComparableNtNtBJ_5error18InternalParseErrorB1D_NvNtBJ_6parser7literalE0BJ_:
  672|  16.0k|  move |input: I| match parser.parse(input) {
  673|  4.99k|    Ok((i, o)) => Ok((i, o.into())),
  674|  11.1k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  16.0k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  59.7k|  move |input: I| {
   79|  59.7k|    let (input, o1) = parser.parse(input)?;
   80|  9.37k|    Ok((input, f(o1)))
   81|  59.7k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser6numberEBJ_:
  663|  67.8k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  67.8k|where
  665|  67.8k|  O1: Into<O2>,
  666|  67.8k|  E1: Into<E2>,
  667|  67.8k|  E1: ParseError<I>,
  668|  67.8k|  E2: ParseError<I>,
  669|  67.8k|  F: Parser<I, O1, E1>,
  670|  67.8k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B27_EE0EBJ_:
  239|  67.8k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  67.8k|where
  241|  67.8k|  F: Parser<I, O, E>,
  242|  67.8k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  59.7k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  59.7k|where
   75|  59.7k|  F: Parser<I, O1, E>,
   76|  59.7k|  G: FnMut(O1) -> O2,
   77|  59.7k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  59.7k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpcNtNtBK_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1u_E0E0BK_:
  460|  71.8k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  50.3k|  move |input: I| {
  244|  50.3k|    let i = input.clone();
  245|  50.3k|    match f.parse(input) {
  246|  18.5k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  31.7k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  50.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBK_INtNtCslATUeuPuGvJ_4core6option6OptionBK_EBQ_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2E_8precededBK_cBK_B1A_NCINvB3c_4charBK_B1A_E0B39_E0E0NCIB3U_BK_BK_B1A_NCIB4g_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4g_BK_IBR_cEBK_B1A_NCIB3U_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4G_B4G_EE0E0B39_E0E0E0EE0E0B1E_:
  512|  67.8k|  move |input: I| {
  513|  67.8k|    let i = input.clone();
  514|  67.8k|    match parser.parse(i) {
  515|  1.70k|      Ok((i, _)) => {
  516|  1.70k|        let index = input.offset(&i);
  517|  1.70k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  66.1k|      Err(e) => Err(e),
  520|       |    }
  521|  67.8k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2h_6number0EBI_:
   73|  67.8k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  67.8k|where
   75|  67.8k|  F: Parser<I, O1, E>,
   76|  67.8k|  G: FnMut(O1) -> O2,
   77|  67.8k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|   104k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   104k|  mut parser: F,
  508|   104k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   104k|where
  510|   104k|  F: Parser<I, O, E>,
  511|   104k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   104k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBK_5error18InternalParseErrorNCINvBI_17ignore_whitespaceBE_NCINvNtB4_6branch3altBC_BE_B1K_TNCINvB2_5valueBC_BE_BC_B1K_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1K_E0E0B3h_EE0B1K_E0EBK_:
  239|  79.3k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  79.3k|where
  241|  79.3k|  F: Parser<I, O, E>,
  242|  79.3k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  79.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2u_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2u_21member_name_shorthandNCINvB2u_14failed_segmentBG_E0EE0E0BI_:
  635|  32.1k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  32.1k|    rest => rest,
  638|  32.1k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2H_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2H_21member_name_shorthandNCINvB2H_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|  21.5k|  move |input: I| {
   79|  21.5k|    let (input, o1) = parser.parse(input)?;
   80|  21.1k|    Ok((input, f(o1)))
   81|  21.5k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1J_BC_INtNtCslATUeuPuGvJ_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4J_EE0E0INvB4O_6digit1BC_BH_EE0E0EBL_:
  239|  67.8k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  67.8k|where
  241|  67.8k|  F: Parser<I, O, E>,
  242|  67.8k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBI_INtNtCslATUeuPuGvJ_4core6option6OptionBI_EBO_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2C_8precededBI_cBI_B1y_NCINvB3a_4charBI_B1y_E0B37_E0E0NCIB3S_BI_BI_B1y_NCIB4e_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4e_BI_IBP_cEBI_B1y_NCIB3S_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4E_B4E_EE0E0B37_E0E0E0EE0EB1C_:
  506|  67.8k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  67.8k|  mut parser: F,
  508|  67.8k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  67.8k|where
  510|  67.8k|  F: Parser<I, O, E>,
  511|  67.8k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1t_4Name0EBI_:
   73|  84.1k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  84.1k|where
   75|  84.1k|  F: Parser<I, O1, E>,
   76|  84.1k|  G: FnMut(O1) -> O2,
   77|  84.1k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  84.1k|}

_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs8HzoxQEUj1m_15rsonpath_syntax:
   73|  1.31M|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  1.31M|    Error { input, code: kind }
   75|  1.31M|  }
_RNvYuINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charCs8HzoxQEUj1m_15rsonpath_syntax:
   26|  51.7k|  fn from_char(input: I, _: char) -> Self {
   27|  51.7k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  51.7k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCs8HzoxQEUj1m_15rsonpath_syntax:
   77|   399k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   399k|    other
   79|   399k|  }
_RNvYINtNtCs6HefjSGhhBw_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCs8HzoxQEUj1m_15rsonpath_syntax:
   26|  48.0k|  fn from_char(input: I, _: char) -> Self {
   27|  48.0k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  48.0k|  }
_RNvYNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE2orB6_:
   32|   868k|  fn or(self, other: Self) -> Self {
   33|   868k|    other
   34|   868k|  }
_RNvXs7_NtCs6HefjSGhhBw_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCs8HzoxQEUj1m_15rsonpath_syntax:
  122|   104k|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}
_RNvYNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|   586k|  fn from_char(input: I, _: char) -> Self {
   27|   586k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   586k|  }

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_BY_BY_B13_NCINvNtNtB7_5bytes8complete11tag_no_caseBY_BY_B13_E0NCIB25_BY_INtNtCslATUeuPuGvJ_4core6option6OptioncEBY_B13_NCIBB_BY_cB13_NCINvNtB7_6branch3altBY_cB13_TNCINvNtNtB7_9character8complete4charBY_B13_E0B5a_EE0E0INvB5f_6digit1BY_B13_EE0E0E0INtB5_6ParserBY_IB3I_BY_EB13_E5parseB17_:
  324|  1.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.70k|    self(i)
  326|  1.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtNvBD_12logical_expr9BooleanOpNCINvNtB7_6branch3altReB1A_NtNtBF_5error18InternalParseErrorTNCINvNtB7_10combinator5valueB2q_B1A_B2q_B2w_NCINvNtNtB7_5bytes8complete3tagB2q_B2q_B2w_E0E0B34_EE0B2w_E0INtB5_6ParserB2q_B1A_B2w_E5parseBF_:
  324|  79.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  79.3k|    self(i)
  326|  79.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  32.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.1k|    self(i)
  326|  32.1k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs8HzoxQEUj1m_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|  84.1k|  fn finish(self) -> Result<(I, O), E> {
   37|  5.65k|    match self {
   38|  78.4k|      Ok(res) => Ok(res),
   39|  5.65k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  84.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|  59.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  59.7k|    self(i)
  326|  59.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpcNtNtB14_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1O_E0E0INtB5_6ParserB10_B12_B1O_E5parseB14_:
  324|  71.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  71.8k|    self(i)
  326|  71.8k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs8HzoxQEUj1m_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  53.6k|  fn finish(self) -> Result<(I, O), E> {
   37|  5.65k|    match self {
   38|  48.0k|      Ok(res) => Ok(res),
   39|  5.65k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  53.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtB11_5error18InternalParseErrorTNCINvNtB7_10combinator5valueBT_BV_BT_B21_NCINvNtNtB7_5bytes8complete3tagBT_BT_B21_E0E0B2A_EE0INtB5_6ParserBT_BV_B21_E5parseB11_:
  324|  79.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  79.3k|    self(i)
  326|  79.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7literalINtB5_6ParserReNtBC_7LiteralNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  16.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.0k|    self(i)
  326|  16.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  84.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  84.1k|    self(i)
  326|  84.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_exprs_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  6.05k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.05k|    self(i)
  326|  6.05k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser10comparable0INtB5_6ParserReNtBE_10ComparableNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  11.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.1k|    self(i)
  326|  11.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  50.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.3k|    self(i)
  326|  50.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1L_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   104k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   104k|    self(i)
  326|   104k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|   276k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   276k|    self(i)
  326|   276k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr12parse_single0INtB5_6ParserReNtBG_11LogicalExprNtNtBG_5error18InternalParseErrorE5parseBG_:
  324|  33.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  33.2k|    self(i)
  326|  33.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2Q_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2Q_21member_name_shorthandNCINvB2Q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  32.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.1k|    self(i)
  326|  32.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  79.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  79.0k|    self(i)
  326|  79.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2d_E0INtB5_6ParserB2b_cB2d_E5parseBF_:
  324|  50.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.3k|    self(i)
  326|  50.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   150k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   150k|    self(i)
  326|   150k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   765k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   765k|    self(i)
  326|   765k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|  85.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  85.0k|    self(i)
  326|  85.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1A_B1A_B1L_E5parseBF_:
  324|  8.48k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.48k|    self(i)
  326|  8.48k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_query0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  47.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.2k|    self(i)
  326|  47.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_querys_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  18.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.9k|    self(i)
  326|  18.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_B10_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_5bytes8complete11tag_no_caseB10_B10_B1a_E0NCIBB_B10_INtNtCslATUeuPuGvJ_4core6option6OptioncEB10_B1a_NCINvNtB7_10combinator3optB10_cB1a_NCINvNtB7_6branch3altB10_cB1a_TNCINvNtNtB7_9character8complete4charB10_B1a_E0B51_EE0E0INvB56_6digit1B10_B1a_EE0E0INtB5_6ParserB10_B10_B1a_E5parseB1e_:
  324|  1.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.70k|    self(i)
  326|  1.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr9BooleanOpB10_NtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B2c_E0E0INtB5_6ParserB10_B12_B2c_E5parseB18_:
  324|   152k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   152k|    self(i)
  326|   152k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   106k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   106k|    self(i)
  326|   106k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|   173k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   173k|    self(i)
  326|   173k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralNtB13_10ComparableNtNtB13_5error18InternalParseErrorB1Y_NvNtB13_6parser7literalE0INtB5_6ParserBZ_B1G_B1Y_E5parseB13_:
  324|  16.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.0k|    self(i)
  326|  16.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete11tag_no_caseReB1c_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB1c_B1c_B1i_E5parseB1m_:
  324|  1.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.70k|    self(i)
  326|  1.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|  84.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  84.1k|    self(i)
  326|  84.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  46.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  46.0k|    self(i)
  326|  46.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB47_3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  21.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.5k|    self(i)
  326|  21.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  50.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.3k|    self(i)
  326|  50.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser3intINtB5_6ParserReB1v_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  58.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  58.8k|    self(i)
  326|  58.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  6.44k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.44k|    self(i)
  326|  6.44k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  59.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  59.7k|    self(i)
  326|  59.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax12ComparisonOpB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1R_E0E0INtB5_6ParserB10_B12_B1R_E5parseB14_:
  324|   175k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   175k|    self(i)
  326|   175k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|  66.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  66.1k|    self(i)
  326|  66.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB3a_15filter_selector0B1N_E0E0INtB5_6ParserB10_B13_B1N_E5parseB15_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCs8HzoxQEUj1m_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1L_E0E0INtB5_6ParserB10_B12_B1L_E5parseB14_:
  324|   183k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   183k|    self(i)
  326|   183k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  46.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  46.0k|    self(i)
  326|  46.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2c_cB1A_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2c_B2Q_E0NCINvNtB7_10combinator3optB2c_B2c_B2Q_NCIBB_B2c_NvBD_3intB2Q_E0E0E0B2Q_E0INtB5_6ParserB2c_B1A_B2Q_E5parseBF_:
  324|  4.25k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.25k|    self(i)
  326|  4.25k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B25_E5parseBF_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCs8HzoxQEUj1m_15rsonpath_syntax:
   36|  2.14k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  2.14k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  2.14k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2h_E5parseBF_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  2.55k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.55k|    self(i)
  326|  2.55k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   624k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   624k|    self(i)
  326|   624k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_exprs0_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  14.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.2k|    self(i)
  326|  14.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB4a_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  4.25k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.25k|    self(i)
  326|  4.25k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNtCs8HzoxQEUj1m_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B21_E0E0INtB5_6ParserB10_B12_B21_E5parseB16_:
  324|  71.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  71.4k|    self(i)
  326|  71.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  28.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  28.9k|    self(i)
  326|  28.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  32.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.1k|    self(i)
  326|  32.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNCNvNtB18_6parser18descendant_segment0NCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4i_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4i_21member_name_shorthandNCINvB4i_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|  53.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  53.6k|    self(i)
  326|  53.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete6one_ofReB1a_uE0INtB5_6ParserB1a_cuE5parseCs8HzoxQEUj1m_15rsonpath_syntax:
  324|   100k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   100k|    self(i)
  326|   100k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB27_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  4.23k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.23k|    self(i)
  326|  4.23k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCslATUeuPuGvJ_4core6option6OptionBX_EB13_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2R_4charBX_B1O_E0B2O_E0E0NCIB3z_BX_BX_B1O_NCIB49_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB49_BX_IB14_cEBX_B1O_NCIB3z_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4y_B4y_EE0E0B2O_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|  67.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  67.8k|    self(i)
  326|  67.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  21.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.5k|    self(i)
  326|  21.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_cBY_B13_NCINvNtNtB7_9character8complete4charBY_B13_E0INvB2K_6digit1BY_B13_EE0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  1.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.70k|    self(i)
  326|  1.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  50.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.3k|    self(i)
  326|  50.3k|  }

_RINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBB_INtNtCslATUeuPuGvJ_4core6option6OptionBB_EBH_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2u_4charBB_B1r_E0B2r_E0E0NCIB3c_BB_BB_B1r_NCIB3M_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3M_BB_IBI_cEBB_B1r_NCIB3c_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4b_B4b_EE0E0B2r_E0E0E0EEB1v_:
  275|  67.8k|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|  67.8k|  mut l: List,
  277|  67.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3o_EE0E0INvB3t_6digit1BE_B1n_EEB1r_:
   63|  67.8k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  67.8k|  mut first: F,
   65|  67.8k|  mut second: G,
   66|  67.8k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  67.8k|where
   68|  67.8k|  F: Parser<I, O1, E>,
   69|  67.8k|  G: Parser<I, O2, E>,
   70|  67.8k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  67.8k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3K_3intB1n_E0E0EB1r_:
   63|  4.25k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  4.25k|  mut first: F,
   65|  4.25k|  mut second: G,
   66|  4.25k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  4.25k|where
   68|  4.25k|  F: Parser<I, O1, E>,
   69|  4.25k|  G: Parser<I, O2, E>,
   70|  4.25k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  4.25k|}
_RNvXs1_NtCs6HefjSGhhBw_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2e_B19_B19_B1b_NCIB2Q_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2Q_B19_INtNtCslATUeuPuGvJ_4core6option6OptioncEB19_B1b_NCIB2e_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3h_B3h_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5v_B19_EB7J_EB1b_E5parseB1f_:
  226|  67.8k|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|  67.8k|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|  67.8k|      }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|   172k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   172k|  mut first: F,
   65|   172k|  mut second: G,
   66|   172k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   172k|where
   68|   172k|  F: Parser<I, O1, E>,
   69|   172k|  G: Parser<I, O2, E>,
   70|   172k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   172k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|  67.8k|  move |input: I| {
   72|  67.8k|    let (input, _) = first.parse(input)?;
   73|  1.18k|    second.parse(input)
   74|  67.8k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBD_INtNtCslATUeuPuGvJ_4core6option6OptionBD_EBJ_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2w_4charBD_B1t_E0B2t_E0E0NCIB3e_BD_BD_B1t_NCIB3O_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3O_BD_IBK_cEBD_B1t_NCIB3e_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4d_B4d_EE0E0B2t_E0E0E0EE0B1x_:
  278|  67.8k|  move |i: I| l.parse(i)
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNCNvNtBN_6parser18descendant_segment0NCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3Q_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3Q_21member_name_shorthandNCINvB3Q_14failed_segmentBL_E0EE0E0E0BN_:
   71|  53.6k|  move |input: I| {
   72|  53.6k|    let (input, _) = first.parse(input)?;
   73|  32.1k|    second.parse(input)
   74|  53.6k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|  67.8k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  67.8k|  mut first: F,
   65|  67.8k|  mut second: G,
   66|  67.8k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  67.8k|where
   68|  67.8k|  F: Parser<I, O1, E>,
   69|  67.8k|  G: Parser<I, O2, E>,
   70|  67.8k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  67.8k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|   106k|  move |input: I| {
   72|   106k|    let (input, _) = first.parse(input)?;
   73|  15.9k|    second.parse(input)
   74|   106k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB31_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  50.3k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  50.3k|  mut first: F,
   99|  50.3k|  mut second: G,
  100|  50.3k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  50.3k|where
  102|  50.3k|  F: Parser<I, O1, E>,
  103|  50.3k|  G: Parser<I, O2, E>,
  104|  50.3k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  50.3k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNCNvNtBL_6parser18descendant_segment0NCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3O_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBJ_E0EE0E0EBL_:
   63|  53.6k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  53.6k|  mut first: F,
   65|  53.6k|  mut second: G,
   66|  53.6k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  53.6k|where
   68|  53.6k|  F: Parser<I, O1, E>,
   69|  53.6k|  G: Parser<I, O2, E>,
   70|  53.6k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  53.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|   276k|  move |input: I| {
   72|   276k|    let (input, _) = first.parse(input)?;
   73|  28.9k|    second.parse(input)
   74|   276k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2M_15filter_selector0B1r_E0EBJ_:
   63|  31.6k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  31.6k|  mut first: F,
   65|  31.6k|  mut second: G,
   66|  31.6k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  31.6k|where
   68|  31.6k|  F: Parser<I, O1, E>,
   69|  31.6k|  G: Parser<I, O2, E>,
   70|  31.6k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  31.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_BG_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_5bytes8complete11tag_no_caseBG_BG_BO_E0NCIB2_BG_INtNtCslATUeuPuGvJ_4core6option6OptioncEBG_BO_NCINvNtB6_10combinator3optBG_cBO_NCINvNtB6_6branch3altBG_cBO_TNCINvNtNtB6_9character8complete4charBG_BO_E0B4v_EE0E0INvB4A_6digit1BG_BO_EE0E0BS_:
   71|  1.70k|  move |input: I| {
   72|  1.70k|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|  1.70k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs8HzoxQEUj1m_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2O_15filter_selector0B1t_E0E0BL_:
   71|  31.6k|  move |input: I| {
   72|  31.6k|    let (input, _) = first.parse(input)?;
   73|  31.6k|    second.parse(input)
   74|  31.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3M_3intB1p_E0E0E0B1t_:
   71|  4.25k|  move |input: I| {
   72|  4.25k|    let (input, _) = first.parse(input)?;
   73|  4.23k|    second.parse(input)
   74|  4.25k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_BE_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4t_EE0E0INvB4y_6digit1BE_BM_EE0EBQ_:
   63|  67.8k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  67.8k|  mut first: F,
   65|  67.8k|  mut second: G,
   66|  67.8k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  67.8k|where
   68|  67.8k|  F: Parser<I, O1, E>,
   69|  67.8k|  G: Parser<I, O2, E>,
   70|  67.8k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  67.8k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB35_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  4.25k|    second.parse(input).map(|(i, _)| (i, o1))
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs8HzoxQEUj1m_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|   300k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   300k|  mut first: F,
   65|   300k|  mut second: G,
   66|   300k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   300k|where
   68|   300k|  F: Parser<I, O1, E>,
   69|   300k|  G: Parser<I, O2, E>,
   70|   300k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   300k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB33_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  50.3k|  move |input: I| {
  106|  50.3k|    let (input, o1) = first.parse(input)?;
  107|  50.3k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  50.3k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs8HzoxQEUj1m_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|  21.5k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  21.5k|  mut first: F,
   65|  21.5k|  mut second: G,
   66|  21.5k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  21.5k|where
   68|  21.5k|  F: Parser<I, O1, E>,
   69|  21.5k|  G: Parser<I, O2, E>,
   70|  21.5k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  21.5k|}

_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar12is_dec_digitCs8HzoxQEUj1m_15rsonpath_syntax:
  253|   984k|  fn is_dec_digit(self) -> bool {
  254|   984k|    self.is_ascii_digit()
  255|   984k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   624k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   624k|    self.as_bytes().compare(t.as_bytes())
  841|   624k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E15compare_no_case:
  845|  1.70k|  fn compare_no_case(&self, t: &'b str) -> CompareResult {
  846|  1.70k|    let pos = self
  847|  1.70k|      .chars()
  848|  1.70k|      .zip(t.chars())
  849|  1.70k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
  850|  1.70k|
  851|  1.70k|    match pos {
  852|  1.70k|      Some(_) => CompareResult::Error,
  853|       |      None => {
  854|      0|        if self.len() >= t.len() {
  855|      0|          CompareResult::Ok
  856|       |        } else {
  857|      0|          CompareResult::Incomplete
  858|       |        }
  859|       |      }
  860|       |    }
  861|  1.70k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCs8HzoxQEUj1m_15rsonpath_syntax:
  296|   365k|  fn len(self) -> usize {
  297|   365k|    self.len_utf8()
  298|   365k|  }
_RINvXsj_NtCs6HefjSGhhBw_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCs8HzoxQEUj1m_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|   173k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|   173k|    &self,
  677|   173k|    predicate: P,
  678|   173k|    e: ErrorKind,
  679|   173k|  ) -> IResult<Self, Self, E>
  680|   173k|  where
  681|   173k|    P: Fn(Self::Item) -> bool,
  682|   173k|  {
  683|   173k|    match self.find(predicate) {
  684|   130k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  42.8k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|      0|        if self.is_empty() {
  689|      0|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|      0|            Ok((
  694|      0|              self.get_unchecked(self.len()..),
  695|      0|              self.get_unchecked(..self.len()),
  696|      0|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|   173k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar3lenCs8HzoxQEUj1m_15rsonpath_syntax:
  265|  47.2k|  fn len(self) -> usize {
  266|  47.2k|    self.len_utf8()
  267|  47.2k|  }
_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCs8HzoxQEUj1m_15rsonpath_syntax:
  386|  1.15M|  fn iter_elements(&self) -> Self::IterElem {
  387|  1.15M|    self.chars()
  388|  1.15M|  }
_RNCNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB7_7CompareBy_E15compare_no_case0Cs8HzoxQEUj1m_15rsonpath_syntax:
  849|  1.70k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCs8HzoxQEUj1m_15rsonpath_syntax:
  272|   365k|  fn as_char(self) -> char {
  273|   365k|    *self
  274|   365k|  }
_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs8HzoxQEUj1m_15rsonpath_syntax:
  740|   703k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCs8HzoxQEUj1m_15rsonpath_syntax:
  241|  1.09M|  fn as_char(self) -> char {
  242|  1.09M|    self
  243|  1.09M|  }
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCs8HzoxQEUj1m_15rsonpath_syntax:
   33|   626k|  fn input_len(&self) -> usize {
   34|   626k|    self.len()
   35|   626k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCs8HzoxQEUj1m_15rsonpath_syntax:
  424|  72.0k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  72.0k|    let (prefix, suffix) = self.split_at(count);
  426|  72.0k|    (suffix, prefix)
  427|  72.0k|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   624k|  fn as_bytes(&self) -> &[u8] {
   98|   624k|    (*self).as_bytes()
   99|   624k|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   624k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   624k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   624k|
  742|   624k|    match pos {
  743|   552k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  72.0k|        if self.len() >= t.len() {
  746|  72.0k|          CompareResult::Ok
  747|       |        } else {
  748|      0|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   624k|  }
_RNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|   100k|  fn find_token(&self, token: char) -> bool {
  913|   100k|    self.chars().any(|i| i == token)
  914|   100k|  }
_RNCNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|   172k|    self.chars().any(|i| i == token)
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   412k|    fn slice(&self, range: $ty) -> Self {
 1014|   412k|      &self[range]
 1015|   412k|    }
_RNvXs4_NtCs6HefjSGhhBw_3nom6traitsReNtB5_6Offset6offset:
   81|  43.9k|  fn offset(&self, second: &Self) -> usize {
   82|  43.9k|    let fst = self.as_ptr();
   83|  43.9k|    let snd = second.as_ptr();
   84|  43.9k|
   85|  43.9k|    snd as usize - fst as usize
   86|  43.9k|  }
_RNvXs23_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  43.9k|    fn slice(&self, range: $ty) -> Self {
 1014|  43.9k|      &self[range]
 1015|  43.9k|    }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs7p50hnCSNrm_21query_fuzz_round_trip:
   49|  3.38k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.38k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.38k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.38k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.38k|        // `SeqCst` operations on the slow path.
   54|  3.38k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.38k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs7p50hnCSNrm_21query_fuzz_round_trip:
  963|  3.38k|        pub fn get(&self) -> Option<&T> {
  964|  3.38k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.38k|                None
  969|       |            }
  970|  3.38k|        }


_RNvMNtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB2_10ParseError25is_nesting_limit_exceededCs7p50hnCSNrm_21query_fuzz_round_trip:
   35|    156|    pub fn is_nesting_limit_exceeded(&self) -> bool {
   36|    156|        matches!(self.inner, InnerParseError::RecursionLimit(_))
   37|    156|    }
_RNvXs3_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE6append:
  466|   399k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  467|   399k|        match other {
  468|   399k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  469|      0|            _ => other,
  470|       |        }
  471|   399k|    }
_RNvXs3_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  462|  1.27M|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|  1.27M|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|  1.27M|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder24recursion_limit_exceededB6_:
   70|    156|    pub(crate) fn recursion_limit_exceeded(str: String, recursion_limit: usize) -> ParseError {
   71|    156|        ParseError {
   72|    156|            input: str,
   73|    156|            inner: InnerParseError::RecursionLimit(recursion_limit),
   74|    156|        }
   75|    156|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3newB6_:
   47|  2.14k|    pub(crate) fn new() -> Self {
   48|  2.14k|        Self { syntax_errors: vec![] }
   49|  2.14k|    }
_RNvMs1_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  192|  39.6k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  193|  39.6k|        Self { kind, rev_idx, len }
  194|  39.6k|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_emptyB6_:
   59|  1.99k|    pub(crate) fn is_empty(&self) -> bool {
   60|  1.99k|        self.syntax_errors.is_empty()
   61|  1.99k|    }

_RNvXs2e_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_10ComparableNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  760|  31.9k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsF_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_14ComparisonExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1213|  16.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1214|  16.4k|        write!(f, "{} {} {}", self.lhs, self.op, self.rhs)
 1215|  16.4k|    }
_RNvXsI_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7LiteralNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1264|  9.46k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1265|  9.46k|        match self {
 1266|  4.65k|            Self::String(s) => write!(f, "\"{}\"", str::escape(s.unquoted(), str::EscapeMode::DoubleQuoted)),
 1267|  1.71k|            Self::Number(n) => write!(f, "{n}"),
 1268|    480|            Self::Bool(true) => write!(f, "true"),
 1269|    818|            Self::Bool(false) => write!(f, "false"),
 1270|  1.79k|            Self::Null => write!(f, "null"),
 1271|       |        }
 1272|  9.46k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0Cs7p50hnCSNrm_21query_fuzz_round_trip:
  831|  3.38k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs2_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_6Parser5parseCs7p50hnCSNrm_21query_fuzz_round_trip:
  358|  2.14k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  359|  2.14k|        crate::parser::parse_with_options(str, &self.options)
  360|  2.14k|    }
_RNvXsW_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  368|  35.2k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1p_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_4StepNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  485|  8.50k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsL_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_15SingularSegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1301|  12.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1302|  12.8k|        match self {
 1303|  5.06k|            Self::Name(n) => write!(f, "['{}']", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1304|  7.78k|            Self::Index(i) => write!(f, "[{i}]"),
 1305|       |        }
 1306|  12.8k|    }
_RNvMst_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9Selectors5firstCs7p50hnCSNrm_21query_fuzz_round_trip:
  955|  41.8k|    pub fn first(&self) -> &Selector {
  956|  41.8k|        &self.inner[0]
  957|  41.8k|    }
_RNvMsj_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_11LogicalExpr10precedenceCs7p50hnCSNrm_21query_fuzz_round_trip:
  662|   136k|    fn precedence(&self) -> usize {
  663|   136k|        match self {
  664|  42.3k|            Self::Or(_, _) => 2,
  665|  18.0k|            Self::And(_, _) => 3,
  666|  14.4k|            Self::Comparison(_) => 4,
  667|  52.2k|            Self::Not(_) => 5,
  668|  9.48k|            Self::Test(_) => 10,
  669|       |        }
  670|   136k|    }
_RNvXsy_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1096|  41.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1097|  41.8k|        match self {
 1098|  9.15k|            Self::Child(s) => write!(f, "{s}"),
 1099|  32.7k|            Self::Descendant(s) => write!(f, "..{s}"),
 1100|       |        }
 1101|  41.8k|    }
_RNvXsB_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_5IndexNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1131|  22.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1132|  22.8k|        match self {
 1133|  14.0k|            Self::FromStart(idx) => write!(f, "{idx}"),
 1134|  8.82k|            Self::FromEnd(idx) => write!(f, "-{idx}"),
 1135|       |        }
 1136|  22.8k|    }
_RNvXsE_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_11LogicalExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1168|   100k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1169|   100k|        match self {
 1170|  14.6k|            Self::Or(lhs, rhs) => {
 1171|  14.6k|                if lhs.precedence() <= self.precedence() {
 1172|  6.69k|                    write!(f, "({lhs})")?;
 1173|       |                } else {
 1174|  7.97k|                    write!(f, "{lhs}")?;
 1175|       |                }
 1176|  14.6k|                write!(f, " || ")?;
 1177|  14.6k|                if rhs.precedence() < self.precedence() {
 1178|      0|                    write!(f, "({rhs})")?;
 1179|       |                } else {
 1180|  14.6k|                    write!(f, "{rhs}")?;
 1181|       |                }
 1182|  14.6k|                Ok(())
 1183|       |            }
 1184|  6.10k|            Self::And(lhs, rhs) => {
 1185|  6.10k|                if lhs.precedence() < self.precedence() {
 1186|  1.65k|                    write!(f, "({lhs})")?;
 1187|       |                } else {
 1188|  4.44k|                    write!(f, "{lhs}")?;
 1189|       |                }
 1190|  6.10k|                write!(f, " && ")?;
 1191|  6.10k|                if rhs.precedence() <= self.precedence() {
 1192|  1.07k|                    write!(f, "({rhs})")?;
 1193|       |                } else {
 1194|  5.02k|                    write!(f, "{rhs}")?;
 1195|       |                }
 1196|  6.10k|                Ok(())
 1197|       |            }
 1198|  26.7k|            Self::Not(expr) => {
 1199|  26.7k|                if expr.precedence() <= self.precedence() {
 1200|  25.1k|                    write!(f, "!({expr})")
 1201|       |                } else {
 1202|  1.51k|                    write!(f, "!{expr}")
 1203|       |                }
 1204|       |            }
 1205|  16.4k|            Self::Comparison(expr) => write!(f, "{expr}"),
 1206|  36.5k|            Self::Test(test) => write!(f, "{test}"),
 1207|       |        }
 1208|   100k|    }
_RNvXs1E_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  588|  9.27k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsH_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_10ComparableNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1241|  32.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1242|  32.9k|        match self {
 1243|  9.46k|            Self::Literal(lit) => write!(f, "{lit}"),
 1244|  6.72k|            Self::RelativeSingularQuery(q) => {
 1245|  6.72k|                write!(f, "@")?;
 1246|  6.72k|                for s in q.segments() {
 1247|  3.95k|                    write!(f, "{s}")?;
 1248|       |                }
 1249|  6.72k|                Ok(())
 1250|       |            }
 1251|  16.8k|            Self::AbsoluteSingularQuery(q) => {
 1252|  16.8k|                write!(f, "$")?;
 1253|  16.8k|                for s in q.segments() {
 1254|  8.89k|                    write!(f, "{s}")?;
 1255|       |                }
 1256|  16.8k|                Ok(())
 1257|       |            }
 1258|       |        }
 1259|  32.9k|    }
_RNvXs1h_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_5IndexNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  451|  25.3k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXs26_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  742|  15.9k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsO_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCs7p50hnCSNrm_21query_fuzz_round_trip:
  181|  2.14k|#[derive(Debug, Clone, Default)]
_RNvXs0_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  283|  2.14k|    fn default() -> Self {
  284|  2.14k|        Self {
  285|  2.14k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  286|  2.14k|            relaxed_whitespace: false,
  287|  2.14k|        }
  288|  2.14k|    }
_RNvXs1L_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_11LogicalExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  645|  75.7k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2z_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  830|  31.8k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2s_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_15SingularSegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  801|  12.1k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsx_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1085|  2.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1086|  2.14k|        write!(f, "$")?;
 1087|  8.60k|        for s in &self.segments {
 1088|  6.45k|            write!(f, "{s}")?;
 1089|       |        }
 1090|  2.14k|        Ok(())
 1091|  2.14k|    }
_RNvXs2l_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_21SingularJsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  786|  22.6k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvMsm_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_21SingularJsonPathQuery8segmentsCs7p50hnCSNrm_21query_fuzz_round_trip:
  795|  23.5k|    pub fn segments(&self) -> impl Iterator<Item = &'_ SingularSegment> {
  796|  23.5k|        self.segments.iter()
  797|  23.5k|    }
_RNvCs8HzoxQEUj1m_15rsonpath_syntax5parseCs7p50hnCSNrm_21query_fuzz_round_trip:
  334|  2.14k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  335|  2.14k|    Parser::default().parse(str)
  336|  2.14k|}
_RNvXs1a_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_8SelectorNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  403|  64.7k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsA_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_8SelectorNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1118|  73.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1119|  73.1k|        match self {
 1120|  19.6k|            Self::Name(n) => write!(f, "'{}'", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1121|  9.46k|            Self::Wildcard => write!(f, "*"),
 1122|  7.56k|            Self::Index(idx) => write!(f, "{idx}"),
 1123|  4.29k|            Self::Slice(slice) => write!(f, "{slice}"),
 1124|  32.2k|            Self::Filter(filter) => write!(f, "?{filter}"),
 1125|       |        }
 1126|  73.1k|    }
_RNvXs1Z_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_14ComparisonExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  703|  15.9k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsJ_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_12ComparisonOpNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1277|  16.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1278|  16.4k|        match self {
 1279|  2.40k|            Self::EqualTo => write!(f, "=="),
 1280|  1.03k|            Self::NotEqualTo => write!(f, "!="),
 1281|    409|            Self::LesserOrEqualTo => write!(f, "<="),
 1282|  3.41k|            Self::GreaterOrEqualTo => write!(f, ">="),
 1283|  6.73k|            Self::LessThan => write!(f, "<"),
 1284|  2.50k|            Self::GreaterThan => write!(f, ">"),
 1285|       |        }
 1286|  16.4k|    }
_RNvXs1S_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_8TestExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  676|  29.8k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsD_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1151|  4.29k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1152|  4.29k|        if self.start != Self::DEFAULT_START {
 1153|  4.16k|            write!(f, "{}", self.start)?;
 1154|    123|        }
 1155|  4.29k|        write!(f, ":")?;
 1156|  4.29k|        if let Some(end) = self.end {
 1157|  3.30k|            write!(f, "{end}")?;
 1158|    984|        }
 1159|  4.29k|        if self.step != Self::DEFAULT_STEP {
 1160|  4.26k|            write!(f, ":{}", self.step)?;
 1161|     23|        }
 1162|  4.29k|        Ok(())
 1163|  4.29k|    }
_RNvXsG_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_8TestExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1220|  36.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1221|  36.5k|        match self {
 1222|  6.53k|            Self::Relative(q) => {
 1223|  6.53k|                write!(f, "@")?;
 1224|  6.88k|                for s in q.segments() {
 1225|  6.88k|                    write!(f, "{s}")?;
 1226|       |                }
 1227|       |            }
 1228|  30.0k|            Self::Absolute(q) => {
 1229|  30.0k|                write!(f, "$")?;
 1230|  30.0k|                for s in q.segments() {
 1231|  28.5k|                    write!(f, "{s}")?;
 1232|       |                }
 1233|       |            }
 1234|       |        }
 1235|  36.5k|        Ok(())
 1236|  36.5k|    }
_RNvXs13_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_9SelectorsNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  396|  35.2k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsC_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_4StepNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1141|  4.26k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1142|  4.26k|        match self {
 1143|  2.46k|            Self::Forward(idx) => write!(f, "{idx}"),
 1144|  1.80k|            Self::Backward(idx) => write!(f, "-{idx}"),
 1145|       |        }
 1146|  4.26k|    }
_RNvMsr_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  865|  36.5k|    pub fn segments(&self) -> &[Segment] {
  866|  36.5k|        &self.segments
  867|  36.5k|    }
_RNvXsz_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9SelectorsNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1106|  41.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1107|  41.8k|        write!(f, "[{}", self.first())?;
 1108|  41.8k|        for s in self.inner.iter().skip(1) {
 1109|  31.3k|            write!(f, ", {s}")?;
 1110|       |        }
 1111|  41.8k|        write!(f, "]")?;
 1112|  41.8k|        Ok(())
 1113|  41.8k|    }
_RNvXs1x_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_5SliceNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  535|  4.21k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  787|     48|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  802|  24.8k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs3_1__NtB4_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  677|   192k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs2_1__27RECURSIVE_COUNT_LogicalExpr7___getit0B7_:
  646|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  646|  2.47k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs0_1__21RECURSIVE_COUNT_Slice7___getit0B7_:
  536|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  802|     88|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMss_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7Segment11is_singular:
  908|  24.9k|    fn is_singular(&self) -> bool {
  909|  24.9k|        match self {
  910|  24.9k|            Self::Child(s) => s.len() == 1 && s.first().is_singular(),
  911|      0|            Self::Descendant(_) => false,
  912|       |        }
  913|  24.9k|    }
_RNvXs8_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_5IndexNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  466|  36.3k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  467|  36.3k|        let num = u.arbitrary::<num::JsonInt>()?;
  468|  36.3k|        Ok(Self::from(num))
  469|  36.3k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  831|   192k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  369|  73.1k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  404|    411|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntax1__23RECURSIVE_COUNT_Segment7___getit0B7_:
  369|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs8_1__31RECURSIVE_COUNT_SingularSegment7___getit0B7_:
  802|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  276|  1.99k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  277|  1.99k|        self.relaxed_whitespace
  278|  1.99k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  743|    544|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  831|  3.38k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMss_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7Segment13into_singular:
  915|  12.4k|    fn into_singular(self) -> SingularSegment {
  916|  12.4k|        assert!(self.is_singular());
  917|  12.4k|        match self {
  918|  12.4k|            Self::Child(mut s) => match s.inner.drain(..).next().expect("is_singular") {
  919|  4.97k|                Selector::Name(n) => SingularSegment::Name(n),
  920|  7.50k|                Selector::Index(i) => SingularSegment::Index(i),
  921|      0|                _ => unreachable!(),
  922|       |            },
  923|      0|            Self::Descendant(_) => unreachable!(),
  924|       |        }
  925|  12.4k|    }
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs3_1__24RECURSIVE_COUNT_TestExpr7___getit0B7_:
  677|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXse_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3str10JsonStringE4fromB5_:
  607|  4.59k|    fn from(value: S) -> Self {
  608|  4.59k|        Self::String(value.into())
  609|  4.59k|    }
_RNvMst_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  947|   105k|    pub fn many(vec: Vec<Selector>) -> Self {
  948|   105k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  949|   105k|        Self { inner: vec }
  950|   105k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  589|    784|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs1_1__23RECURSIVE_COUNT_Literal7___getit0B7_:
  589|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  704|     27|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  589|  14.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  787|     48|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  589|    784|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs7_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_8SelectorINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_11LogicalExprE4fromB5_:
  445|  26.0k|    fn from(value: LogicalExpr) -> Self {
  446|  26.0k|        Self::Filter(value)
  447|  26.0k|    }
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs7_1__37RECURSIVE_COUNT_SingularJsonPathQuery7___getit0B7_:
  787|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsl_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_10ComparableINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_7LiteralE4from:
  773|  4.99k|    fn from(value: Literal) -> Self {
  774|  4.99k|        Self::Literal(value)
  775|  4.99k|    }
_RNvXsd_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  578|  4.25k|    fn default() -> Self {
  579|  4.25k|        Self {
  580|  4.25k|            start: Index::FromStart(0.into()),
  581|  4.25k|            end: None,
  582|  4.25k|            step: Step::Forward(1.into()),
  583|  4.25k|        }
  584|  4.25k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  536|  6.20k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs3_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9SelectorsNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  384|  73.1k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  385|  73.1k|        let first = u.arbitrary::<Selector>()?;
  386|  62.9k|        let mut rest = u.arbitrary::<Vec<Selector>>()?;
  387|  57.1k|        rest.push(first);
  388|  57.1k|
  389|  57.1k|        Ok(Self::many(rest))
  390|  73.1k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  677|  64.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
  831|  10.1k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsw_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1078|  24.9k|    fn deref(&self) -> &Self::Target {
 1079|  24.9k|        &self.inner
 1080|  24.9k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs4_1__NtB4_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  704|  82.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntax1__NtB4_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  369|   219k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  831|  64.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  787|  40.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  802|     88|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  646|   225k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  677|    108|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__29RECURSIVE_COUNT_JsonPathQuery7___getit0B7_:
  831|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs1H_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  588|  3.07k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsb_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_4StepINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  506|  6.20k|    fn from(value: num::JsonInt) -> Self {
  507|  6.20k|        if value.as_i64() >= 0 {
  508|  3.63k|            Self::Forward(value.abs())
  509|       |        } else {
  510|  2.57k|            Self::Backward(value.abs().try_into().expect("checked for zero already"))
  511|       |        }
  512|  6.20k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs2_1__NtB4_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  646|   675k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs0_1__NtB4_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  536|  18.5k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  369|     98|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  831|    262|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs_1__24RECURSIVE_COUNT_Selector7___getit0B7_:
  404|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs9_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  474|  36.3k|    fn from(value: N) -> Self {
  475|  36.3k|        let value = value.into();
  476|  36.3k|        if value.as_i64() >= 0 {
  477|  23.4k|            Self::FromStart(value.abs())
  478|       |        } else {
  479|  12.9k|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  480|       |        }
  481|  36.3k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs8_1__NtB4_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  802|  74.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  704|     27|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs29_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  742|  16.0k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs_1__NtB4_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  404|   373k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  761|    634|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  831|    262|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsh_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num10JsonNumberE4from:
  628|  1.70k|    fn from(value: num::JsonNumber) -> Self {
  629|  1.70k|        Self::Number(value)
  630|  1.70k|    }
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs6_1__26RECURSIVE_COUNT_Comparable7___getit0B7_:
  761|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsq_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_13JsonPathQuery15try_to_singular:
  846|  22.8k|    fn try_to_singular(self) -> std::result::Result<SingularJsonPathQuery, Self> {
  847|  22.8k|        if self.segments.iter().all(Segment::is_singular) {
  848|  22.8k|            let mut singular_segments = Vec::with_capacity(self.segments.len());
  849|  35.3k|            for segment in self.segments {
  850|  12.4k|                singular_segments.push(segment.into_singular());
  851|  12.4k|            }
  852|  22.8k|            Ok(SingularJsonPathQuery {
  853|  22.8k|                segments: singular_segments,
  854|  22.8k|            })
  855|       |        } else {
  856|      0|            Err(self)
  857|       |        }
  858|  22.8k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs1_1__NtB4_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  589|  41.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs6_1__NtB4_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  761|   164k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  761|  55.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsu_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_8Selector11is_singularB5_:
 1039|  24.9k|    fn is_singular(&self) -> bool {
 1040|  24.9k|        matches!(self, Self::Name(_) | Self::Index(_))
 1041|  24.9k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  704|  27.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsa_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_4StepNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  498|  6.20k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  499|  6.20k|        let num = u.arbitrary::<num::JsonInt>()?;
  500|  6.20k|        Ok(Self::from(num))
  501|  6.20k|    }
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  677|    108|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  536|     13|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  743|  27.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMst_Cs8HzoxQEUj1m_15rsonpath_syntaxNtB5_9Selectors5firstB5_:
  955|  24.9k|    pub fn first(&self) -> &Selector {
  956|  24.9k|        &self.inner[0]
  957|  24.9k|    }
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs7_1__NtB4_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  787|   122k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  743|    544|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  536|     13|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  404|    411|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs5_1__28RECURSIVE_COUNT_ComparisonOp7___getit0B7_:
  743|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCs8HzoxQEUj1m_15rsonpath_syntaxs4_1__30RECURSIVE_COUNT_ComparisonExpr7___getit0B7_:
  704|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  761|    634|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  404|   124k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  369|     98|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs5_1__NtB4_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  743|  81.9k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCs8HzoxQEUj1m_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  646|  1.23k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]

_RNvXsH_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1021|  16.4k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1022|  16.4k|        write!(f, "{}", self.0)
 1023|  16.4k|    }
_RNvXs1f_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB6_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  112|  9.19k|#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsU_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
   61|    953|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsz_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromCs7p50hnCSNrm_21query_fuzz_round_trip:
  845|  1.64k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  846|  1.64k|        if value.0.fract() != 0.0 {
  847|  1.19k|            return Err(JsonIntOverflowError::fractional(value.0));
  848|    456|        }
  849|    456|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  850|    456|        // We need to check that it is within bounds of JsonInt. This is correct
  851|    456|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  852|    456|        // so every value within is exactly representable as a f64.
  853|    456|        let int_value = value.0.trunc();
  854|    456|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  855|     30|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  856|    426|        }
  857|    426|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  858|    278|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  859|    148|        }
  860|    148|
  861|    148|        // This conversion is now guaranteed to be lossless.
  862|    148|        Ok(Self(int_value as i64))
  863|  1.64k|    }
_RNvXsK_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1042|  1.71k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1043|  1.71k|        match self {
 1044|    815|            Self::Int(int) => int.fmt(f),
 1045|    899|            Self::Float(flt) => flt.fmt(f),
 1046|       |        }
 1047|  1.71k|    }
_RNvXs15_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
   87|  21.4k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsG_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1014|    815|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1015|    815|        write!(f, "{}", self.0)
 1016|    815|    }
_RNvXsJ_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_9JsonFloatNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1035|    899|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1036|    899|        write!(f, "{}", self.0)
 1037|    899|    }
_RNvXs2_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  194|  1.70k|    fn eq(&self, other: &Self) -> bool {
  195|  1.70k|        match (self.normalize(), other.normalize()) {
  196|    953|            (Self::Int(l0), Self::Int(r0)) => l0 == r0,
  197|    749|            (Self::Float(l0), Self::Float(r0)) => l0 == r0,
  198|      0|            _ => false,
  199|       |        }
  200|  1.70k|    }
_RNvMsb_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeCs7p50hnCSNrm_21query_fuzz_round_trip:
  588|  3.40k|    pub fn normalize(&self) -> Self {
  589|  3.40k|        match *self {
  590|  1.75k|            Self::Int(x) => Self::Int(x),
  591|  1.64k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|    148|                Ok(int) => Self::Int(int),
  593|  1.49k|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  3.40k|    }
_RNvXs1p_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB6_9JsonFloatNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
  131|    749|#[derive(Clone, Copy, Debug, PartialEq)]
_RNvXsI_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs7p50hnCSNrm_21query_fuzz_round_trip:
 1028|  10.6k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1029|  10.6k|        write!(f, "{}", self.0)
 1030|  10.6k|    }
_RNvMsb_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeB7_:
  588|  1.70k|    pub fn normalize(&self) -> Self {
  589|  1.70k|        match *self {
  590|      0|            Self::Int(x) => Self::Int(x),
  591|  1.70k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|    953|                Ok(int) => Self::Int(int),
  593|    749|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  1.70k|    }
_RNvMs7_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  42.5k|    pub const fn as_i64(&self) -> i64 {
  331|  42.5k|        self.0
  332|  42.5k|    }
_RNCNvXNvNtCs8HzoxQEUj1m_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B8_:
  184|  2.68k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsD_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_9JsonFloatNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  955|  1.70k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  956|  1.70k|        match f64::from_str(s) {
  957|  1.70k|            Ok(x) => {
  958|  1.70k|                assert!(!s.is_empty()); // Empty strings are not accepted by f64::from_str.
  959|       |                                        // Rule 1.
  960|  1.70k|                if x.is_nan() || x.is_infinite() {
  961|      0|                    return Err(Self::Err::infinite_or_nan(s));
  962|  1.70k|                }
  963|  1.70k|                if let Some((before, after)) = s.split_once('.') {
  964|       |                    // Rule 3. The case `before == "+"` is checked later.
  965|    595|                    if before.is_empty() || before == "-" {
  966|      0|                        return Err(Self::Err::nothing_before_decimal_point(s));
  967|    595|                    }
  968|    595|                    // Rule 4.
  969|    595|                    if after.is_empty() || after.starts_with(['e', 'E']) {
  970|      0|                        return Err(Self::Err::nothing_after_decimal_point(s));
  971|    595|                    }
  972|  1.10k|                }
  973|  1.70k|                let mut chars = s.chars();
  974|  1.70k|                let first_c = chars.next().expect("s is non-empty");
  975|  1.70k|                // Rule 2.
  976|  1.70k|                if first_c == '+' {
  977|      0|                    return Err(Self::Err::leading_plus_sign(s));
  978|  1.70k|                }
  979|       |                // Skip the leading minus if it exists.
  980|  1.70k|                let s_no_sign = if first_c == '-' { chars.as_str() } else { s };
  981|       |                // Rule 5.
  982|       |                // Check for leading zeroes. We strip the first zero from the front and check what's left.
  983|       |                // The only acceptable case is that the next character is not a digit.
  984|  1.70k|                if let Some(rest) = s_no_sign.strip_prefix('0') {
  985|    738|                    if matches!(rest.chars().next(), Some('0'..='9')) {
  986|      0|                        return Err(Self::Err::leading_zeros(s));
  987|    738|                    }
  988|    964|                }
  989|  1.70k|                Ok(Self(x))
  990|       |            }
  991|       |            // Remember that all floats valid in JSON are also accepted by Rust,
  992|       |            // so this is *definitely* not a valid JSON float.
  993|      0|            Err(_) => Err(Self::Err::f64_parse_error(s)),
  994|       |        }
  995|  1.70k|    }
_RNvXsu_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  788|  25.4k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  789|  25.4k|        if value > JSON_UINT_UPPER_LIMIT {
  790|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  791|  25.4k|        } else if let Some(x) = NonZeroU64::new(value) {
  792|  25.4k|            Ok(Self(x))
  793|       |        } else {
  794|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  795|       |        }
  796|  25.4k|    }
_RNvXsw_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  816|  25.4k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  817|  25.4k|        Self::try_from(value.0)
  818|  25.4k|    }
_RNvXsF_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_10JsonNumberINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_9JsonFloatE4fromB7_:
 1007|  1.70k|    fn from(value: JsonFloat) -> Self {
 1008|  1.70k|        Self::Float(value)
 1009|  1.70k|    }
_RNvXsz_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromB7_:
  845|  1.70k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  846|  1.70k|        if value.0.fract() != 0.0 {
  847|    595|            return Err(JsonIntOverflowError::fractional(value.0));
  848|  1.10k|        }
  849|  1.10k|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  850|  1.10k|        // We need to check that it is within bounds of JsonInt. This is correct
  851|  1.10k|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  852|  1.10k|        // so every value within is exactly representable as a f64.
  853|  1.10k|        let int_value = value.0.trunc();
  854|  1.10k|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  855|     15|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  856|  1.09k|        }
  857|  1.09k|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  858|    139|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  859|    953|        }
  860|    953|
  861|    953|        // This conversion is now guaranteed to be lossless.
  862|    953|        Ok(Self(int_value as i64))
  863|  1.70k|    }
_RNvXsc_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  603|  26.0k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  604|  26.0k|        if value > JSON_INT_UPPER_LIMIT {
  605|      0|            Err(JsonIntOverflowError::int_pos_overflow(value))
  606|  26.0k|        } else if value < JSON_INT_LOWER_LIMIT {
  607|      0|            Err(JsonIntOverflowError::int_neg_overflow(value))
  608|       |        } else {
  609|  26.0k|            Ok(Self::new(value))
  610|       |        }
  611|  26.0k|    }
_RNvXsl_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  699|  8.51k|    fn from(value: u32) -> Self {
  700|  8.51k|        Self::new(u64::from(value))
  701|  8.51k|    }
_RNvXsL_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1054|  43.9k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1055|  43.9k|        let val = u.int_in_range(JSON_INT_LOWER_LIMIT..=JSON_INT_UPPER_LIMIT)?;
 1056|       |
 1057|  43.9k|        Ok(Self::new(val))
 1058|  43.9k|    }
_RNvMs7_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonInt3newB7_:
  286|  70.0k|    const fn new(index: i64) -> Self {
  287|  70.0k|        Self(index)
  288|  70.0k|    }
_RNvMs7_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  52.4k|    pub const fn abs(&self) -> JsonUInt {
  363|  52.4k|        JsonUInt(self.0.unsigned_abs())
  364|  52.4k|    }
_RNCNvNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax3num1__26RECURSIVE_COUNT_JsonNumber7___getit0B9_:
  184|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvNtCs8HzoxQEUj1m_15rsonpath_syntax3num1__NtB4_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  184|  8.03k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs8_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_8JsonUInt3newB7_:
  400|  24.7k|    const fn new(index: u64) -> Self {
  401|  24.7k|        Self(index)
  402|  24.7k|    }
_RNvXsi_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  662|  26.0k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  663|  26.0k|        match i64::from_str(s) {
  664|  26.0k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  665|      0|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  666|       |        }
  667|  26.0k|    }
_RNCNvXNvNtCs8HzoxQEUj1m_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCs8HzoxQEUj1m_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXso_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  728|  26.0k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  729|  26.0k|        if value.0 < 0 {
  730|  9.89k|            Err(JsonIntOverflowError::negative_uint(value.0))
  731|       |        } else {
  732|  16.1k|            Ok(Self::new(value.0 as u64))
  733|       |        }
  734|  26.0k|    }
_RNvXsO_NtCs8HzoxQEUj1m_15rsonpath_syntax3numNtB5_9JsonFloatNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1087|  1.31k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1088|  1.31k|        let val = u.arbitrary::<f64>()?;
 1089|       |        // Wrap NaN, +Inf, -Inf into zero.
 1090|  1.31k|        let val = if val.is_nan() {
 1091|    180|            0.0
 1092|  1.13k|        } else if val.is_infinite() {
 1093|      0|            (0.0_f64).copysign(val)
 1094|       |        } else {
 1095|  1.13k|            val
 1096|       |        };
 1097|       |
 1098|  1.31k|        Ok(Self(val))
 1099|  1.31k|    }

_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowCs7p50hnCSNrm_21query_fuzz_round_trip:
   87|     30|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     30|        Self {
   89|     30|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     30|        }
   91|     30|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowCs7p50hnCSNrm_21query_fuzz_round_trip:
   81|    278|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    278|        Self {
   83|    278|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    278|        }
   85|    278|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalCs7p50hnCSNrm_21query_fuzz_round_trip:
   75|  1.19k|    pub(crate) fn fractional(src: f64) -> Self {
   76|  1.19k|        Self {
   77|  1.19k|            kind: JsonIntOverflowKind::Fractional(src),
   78|  1.19k|        }
   79|  1.19k|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalB6_:
   75|    595|    pub(crate) fn fractional(src: f64) -> Self {
   76|    595|        Self {
   77|    595|            kind: JsonIntOverflowKind::Fractional(src),
   78|    595|        }
   79|    595|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   63|  9.89k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  9.89k|        Self {
   65|  9.89k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  9.89k|        }
   67|  9.89k|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowB6_:
   87|     15|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     15|        Self {
   89|     15|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     15|        }
   91|     15|    }
_RNvMNtNtCs8HzoxQEUj1m_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowB6_:
   81|    139|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    139|        Self {
   83|    139|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    139|        }
   85|    139|    }

_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  84.1k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  84.1k|where
   25|  84.1k|    F: nom::Parser<&'a str, T, E>,
   26|  84.1k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  84.1k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  8.51k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  8.51k|where
   25|  8.51k|    F: nom::Parser<&'a str, T, E>,
   26|  8.51k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  8.51k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser21parse_json_path_query:
   66|  2.14k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  2.14k|    let original_input = q;
   68|  2.14k|    let mut parse_error = ParseErrorBuilder::new();
   69|  2.14k|    let mut segments = vec![];
   70|  2.14k|    let q = skip_whitespace(q);
   71|  2.14k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  2.14k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|      0|        parse_error.add(SyntaxError::new(
   74|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|      0|            original_input.len(),
   76|      0|            leading_whitespace_len,
   77|      0|        ));
   78|  2.14k|    }
   79|  2.14k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|  2.14k|        Ok((q, _)) => skip_whitespace(q),
   81|      0|        Err(e) => {
   82|      0|            parse_error.add(SyntaxError::new(
   83|      0|                SyntaxErrorKind::MissingRootIdentifier,
   84|      0|                e.input.len(),
   85|      0|                q.chars().next().map_or(1, char::len_utf8),
   86|      0|            ));
   87|      0|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  2.14k|    let mut q = q;
   92|  8.43k|    while !q.is_empty() {
   93|  6.44k|        q = match segment(q, ctx).finish() {
   94|  6.28k|            Ok((rest, segment)) => {
   95|  6.28k|                segments.push(segment);
   96|  6.28k|                rest
   97|       |            }
   98|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|      0|                parse_error.add(err);
  100|      0|                rest
  101|       |            }
  102|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|      0|                parse_error.add_many(errs);
  104|      0|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|    156|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|    156|                    original_input.to_owned(),
  109|    156|                    ctx.options
  110|    156|                        .recursion_limit
  111|    156|                        .expect("recursion limit should exists when exceeded"),
  112|    156|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  6.28k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  1.99k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  1.99k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  1.99k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  1.99k|        if trailing_whitespace_len > 0 {
  127|      0|            parse_error.add(SyntaxError::new(
  128|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|      0|                trailing_whitespace_len,
  130|      0|                trailing_whitespace_len,
  131|      0|            ));
  132|  1.99k|        }
  133|      0|    }
  134|       |
  135|  1.99k|    if parse_error.is_empty() {
  136|  1.99k|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|      0|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  2.14k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14slice_selector:
  294|  50.3k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  295|  50.3k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  296|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  297|  4.25k|    let mut slice = crate::Slice::default();
  298|       |
  299|  4.25k|    if let Some(start_str) = opt_start {
  300|  4.13k|        match parse_directional_int(start_str) {
  301|  2.75k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  302|  1.37k|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  303|      0|            DirectionalInt::Error(err) => {
  304|      0|                return fail(
  305|      0|                    SyntaxErrorKind::SliceStartParseError(err),
  306|      0|                    q.len(),
  307|      0|                    start_str.len(),
  308|      0|                    rest,
  309|      0|                );
  310|       |            }
  311|       |        };
  312|    123|    }
  313|  4.25k|    let q = rest;
  314|  4.25k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  315|       |
  316|  4.25k|    if let Some(end_str) = opt_end {
  317|  3.29k|        match parse_directional_int(end_str) {
  318|  2.03k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  319|  1.25k|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  320|      0|            DirectionalInt::Error(err) => {
  321|      0|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  322|       |            }
  323|       |        };
  324|    965|    }
  325|       |
  326|  4.25k|    let q = rest;
  327|  4.25k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  328|       |
  329|  4.25k|    if let Some(Some(step_str)) = opt_step {
  330|  4.23k|        match parse_directional_int(step_str) {
  331|  2.43k|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  332|  1.79k|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  333|      0|            DirectionalInt::Error(err) => {
  334|      0|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  335|       |            }
  336|       |        };
  337|     23|    }
  338|       |
  339|  4.25k|    Ok((rest, Selector::Slice(slice)))
  340|  50.3k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  24.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvXs_NvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_exprNtB4_9BooleanOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB8_:
  406|  20.2k|    #[derive(Debug, Clone, Copy)]
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  84.1k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  84.1k|where
   25|  84.1k|    F: nom::Parser<&'a str, T, E>,
   26|  84.1k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  84.1k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtNvB6_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB13_NtNtB8_5error18InternalParseErrorTNCINvNtB1F_10combinator5valueB28_B13_B28_B2e_NCINvNtNtB1F_5bytes8complete3tagB28_B28_B2e_E0E0B2M_EE0B2e_E00B8_:
   30|  20.2k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_15filter_selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  26.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser10comparable0B5_:
  658|  11.1k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
_RNvMNtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  2.14k|    fn new(options: &'a ParserOptions) -> Self {
   45|  2.14k|        Self {
   46|  2.14k|            options,
   47|  2.14k|            current_nesting: 0,
   48|  2.14k|        }
   49|  2.14k|    }
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtNvB4_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB11_NtNtB6_5error18InternalParseErrorTNCINvNtB1D_10combinator5valueB26_B11_B26_B2c_NCINvNtNtB1D_5bytes8complete3tagB26_B26_B2c_E0E0B2K_EE0B2c_E0B6_:
   27|  79.3k|    move |q: &'a str| {
   28|  79.3k|        inner
   29|  79.3k|            .parse(skip_whitespace(q))
   30|  79.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  79.3k|    }
_RNvXsa_NtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB5_16RootSelectorTypeNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  549|  58.5k|#[derive(Clone, Copy)]
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser19comparison_operator:
  646|  46.2k|fn comparison_operator(q: &str) -> IResult<&str, ComparisonOp, InternalParseError> {
  647|  46.2k|    alt((
  648|  46.2k|        value(ComparisonOp::EqualTo, tag("==")),
  649|  46.2k|        value(ComparisonOp::NotEqualTo, tag("!=")),
  650|  46.2k|        value(ComparisonOp::LesserOrEqualTo, tag("<=")),
  651|  46.2k|        value(ComparisonOp::GreaterOrEqualTo, tag(">=")),
  652|  46.2k|        value(ComparisonOp::LessThan, char('<')),
  653|  46.2k|        value(ComparisonOp::GreaterThan, char('>')),
  654|  46.2k|    ))(q)
  655|  46.2k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs0_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  14.2k|    move |q: &'a str| {
   28|  14.2k|        inner
   29|  14.2k|            .parse(skip_whitespace(q))
   30|  14.2k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  14.2k|    }
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  7.52k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB4_11FilterQuery15into_test_queryB6_:
  556|  30.1k|    fn into_test_query(self) -> TestExpr {
  557|  30.1k|        match self {
  558|  5.77k|            Self::Relative(q) => TestExpr::Relative(q),
  559|  24.4k|            Self::Absolute(q) => TestExpr::Absolute(q),
  560|       |        }
  561|  30.1k|    }
_RNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser5float10base_float:
  695|  67.8k|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|  67.8k|        recognize(tuple((
  697|  67.8k|            digit1,
  698|  67.8k|            opt(preceded(char('.'), digit1)),
  699|  67.8k|            opt(preceded(
  700|  67.8k|                tag_no_case("e"),
  701|  67.8k|                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|  67.8k|            )),
  703|  67.8k|        )))(q)
  704|  67.8k|    }
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_exprs0_0B5_:
  434|  14.2k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser5float:
  685|  67.8k|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  686|       |    // Look ahead to verify that this has a chance to be a number.
  687|  67.8k|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  688|       |
  689|       |    // It is a number, so after here we can hard cut.
  690|  1.70k|    return match JsonFloat::from_str(valid_str) {
  691|  1.70k|        Ok(n) => Ok((rest, n)),
  692|      0|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  693|       |    };
  694|       |
  695|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|       |        recognize(tuple((
  697|       |            digit1,
  698|       |            opt(preceded(char('.'), digit1)),
  699|       |            opt(preceded(
  700|       |                tag_no_case("e"),
  701|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|       |            )),
  703|       |        )))(q)
  704|       |    }
  705|  67.8k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser15filter_selector0B5_:
  380|  31.6k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr0B5_:
  416|  79.0k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  31.6k|    move |q: &'a str| {
   28|  31.6k|        inner
   29|  31.6k|            .parse(skip_whitespace(q))
   30|  31.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  31.6k|    }
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs0_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  13.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  46.0k|    move |q: &'a str| {
   28|  46.0k|        inner
   29|  46.0k|            .parse(skip_whitespace(q))
   30|  46.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  46.0k|    }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser19bracketed_selection:
  193|  53.6k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  53.6k|    let (mut q, _) = char('[')(q)?;
  195|  53.6k|    let mut selectors = vec![];
  196|  53.6k|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|  84.1k|        match selector(q, ctx).finish() {
  200|  78.4k|            Ok((rest, selector)) => {
  201|  78.4k|                selectors.push(selector);
  202|  78.4k|                q = rest;
  203|  78.4k|            }
  204|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|      0|                syntax_errors.push(err);
  206|      0|                q = rest;
  207|      0|            }
  208|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|      0|                syntax_errors.append(&mut errs);
  210|      0|                q = rest;
  211|      0|            }
  212|  5.65k|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|  78.4k|        q = skip_whitespace(q);
  215|  78.4k|
  216|  78.4k|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|  30.4k|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|  48.0k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|  48.0k|                    q = rest;
  221|  48.0k|                    break;
  222|      0|                } else if q.is_empty() {
  223|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|      0|                    break;
  225|       |                } else {
  226|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|  48.0k|    if syntax_errors.is_empty() {
  233|  48.0k|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  53.6k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1R_EB4_:
   23|  50.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  50.3k|where
   25|  50.3k|    F: nom::Parser<&'a str, T, E>,
   26|  50.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  50.3k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  84.1k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  84.1k|where
   25|  84.1k|    F: nom::Parser<&'a str, T, E>,
   26|  84.1k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  84.1k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtNvB2_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReBZ_NtNtB4_5error18InternalParseErrorTNCINvNtB1B_10combinator5valueB24_BZ_B24_B29_NCINvNtNtB1B_5bytes8complete3tagB24_B24_B29_E0E0B2H_EE0B29_EB4_:
   23|  79.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  79.3k|where
   25|  79.3k|    F: nom::Parser<&'a str, T, E>,
   26|  79.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  79.3k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13name_selector:
  279|  84.1k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  280|  84.1k|    map(string_literal, Selector::Name)(q)
  281|  84.1k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segment:
  142|  6.44k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  6.44k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  6.44k|    alt((
  145|  6.44k|        |q| descendant_segment(q, ctx),
  146|  6.44k|        |q| child_segment(q, ctx),
  147|  6.44k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  6.44k|    ))(q)
  149|  6.44k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  50.3k|    move |q: &'a str| {
   28|  50.3k|        inner
   29|  50.3k|            .parse(skip_whitespace(q))
   30|  50.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  50.3k|    }
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|  79.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  79.0k|where
   25|  79.0k|    F: nom::Parser<&'a str, T, E>,
   26|  79.0k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  79.0k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  59.7k|    move |q: &'a str| {
   28|  59.7k|        inner
   29|  59.7k|            .parse(skip_whitespace(q))
   30|  59.7k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  59.7k|    }
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  6.05k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  6.05k|where
   25|  6.05k|    F: nom::Parser<&'a str, T, E>,
   26|  6.05k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  6.05k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_exprs_0B5_:
  429|  6.05k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  84.1k|    move |q: &'a str| {
   28|  84.1k|        inner
   29|  84.1k|            .parse(skip_whitespace(q))
   30|  84.1k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  84.1k|    }
_RNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr12parse_single:
  444|  85.0k|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|  85.0k|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|  85.0k|        let negated = opt_neg.is_some();
  447|  85.0k|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|  33.2k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|  19.0k|            let rest = skip_whitespace(rest);
  450|  19.0k|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|      0|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|  19.0k|            let selector = if negated {
  454|  9.73k|                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|  9.31k|                nested_filter
  457|       |            };
  458|  19.0k|            return Ok((rest, selector));
  459|  51.7k|        }
  460|  51.7k|
  461|  51.7k|        match literal(rest) {
  462|  4.37k|            Ok((rest, lhs)) => {
  463|  4.37k|                let rest = skip_whitespace(rest);
  464|  4.37k|                let (rest, comp_op) = match comparison_operator(rest) {
  465|  4.37k|                    Ok((rest, comp_op)) => (rest, comp_op),
  466|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|      0|                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|  4.37k|                let rest = skip_whitespace(rest);
  476|  4.37k|                let (rest, rhs) = match comparable(rest, ctx) {
  477|  4.37k|                    Ok((rest, rhs)) => (rest, rhs),
  478|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|      0|                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|  4.37k|                if negated {
  488|      0|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|  4.37k|                    return Ok((
  491|  4.37k|                        rest,
  492|  4.37k|                        LogicalExpr::Comparison(ComparisonExpr {
  493|  4.37k|                            lhs: Comparable::Literal(lhs),
  494|  4.37k|                            op: comp_op,
  495|  4.37k|                            rhs,
  496|  4.37k|                        }),
  497|  4.37k|                    ));
  498|       |                }
  499|       |            }
  500|      0|            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|  47.4k|            _ => (),
  502|  47.4k|        };
  503|  47.4k|
  504|  47.4k|        match filter_query(rest, ctx) {
  505|  41.9k|            Ok((rest, query)) => {
  506|  41.9k|                let query_len = q.len() - rest.len();
  507|  41.9k|                let rest = skip_whitespace(rest);
  508|  41.9k|                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|  11.7k|                    let rest = skip_whitespace(rest);
  510|  11.7k|                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|      0|                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|  11.7k|                    let Some(singular_query) = query.try_to_comparable() else {
  514|      0|                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|  11.7k|                    if negated {
  517|      0|                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|  11.7k|                        Ok((
  520|  11.7k|                            rest,
  521|  11.7k|                            LogicalExpr::Comparison(ComparisonExpr {
  522|  11.7k|                                lhs: singular_query,
  523|  11.7k|                                rhs,
  524|  11.7k|                                op: comp_op,
  525|  11.7k|                            }),
  526|  11.7k|                        ))
  527|       |                    }
  528|       |                } else {
  529|  30.1k|                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|  30.1k|                    let expr = if negated {
  531|  1.10k|                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|  29.0k|                        test_expr
  534|       |                    };
  535|  30.1k|                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|  5.49k|            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|      0|            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|  85.0k|    }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17wildcard_selector:
  290|  59.7k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  59.7k|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  59.7k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6stringB3_:
  742|   300k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  743|       |    move |q: &'a str| {
  744|       |        let mut builder = JsonStringBuilder::new();
  745|       |        let mut syntax_errors = vec![];
  746|       |        let mut stream = q.char_indices().peekable();
  747|       |
  748|       |        while let Some((c_idx, c)) = stream.next() {
  749|       |            match (c, mode) {
  750|       |                ('\\', _) => {
  751|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|       |                        Ok(r) => {
  753|       |                            builder.push(r);
  754|       |                        }
  755|       |                        Err(err) => {
  756|       |                            syntax_errors.push(err);
  757|       |                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|       |                    return if syntax_errors.is_empty() {
  763|       |                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|       |                (..='\u{001F}', _) => {
  769|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|       |                    syntax_errors.push(SyntaxError::new(
  771|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|       |                        rest.len() + 1,
  773|       |                        1,
  774|       |                    ))
  775|       |                }
  776|       |                _ => {
  777|       |                    builder.push(c);
  778|       |                }
  779|       |            }
  780|       |        }
  781|       |
  782|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|       |            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|       |    }
  908|   300k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs0_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  14.2k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  14.2k|where
   25|  14.2k|    F: nom::Parser<&'a str, T, E>,
   26|  14.2k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  14.2k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB2m_B2p_E0E0B2p_E00B8_:
   30|  85.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1B_cBZ_NtNtB4_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB1B_B2t_E0NCINvNtB1L_10combinator3optB1B_B1B_B2t_NCIB0_B1B_NvB2_3intB2t_E0E0E0B2t_EB4_:
   23|  4.25k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  4.25k|where
   25|  4.25k|    F: nom::Parser<&'a str, T, E>,
   26|  4.25k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  4.25k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14index_selector:
  342|  46.0k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  343|       |    // This has to be called after the slice selector.
  344|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  345|  46.0k|    let (rest, int) = int(q)?;
  346|  14.4k|    match parse_directional_int(int) {
  347|  8.96k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  348|  5.46k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  349|      0|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  350|      0|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  351|      0|            rest,
  352|      0|        ))),
  353|       |    }
  354|  46.0k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr:
  383|  79.1k|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  384|       |    // This is the most involved part of the parser, as it is inherently recursive.
  385|       |    //
  386|       |    // There are two sources of recursion here: parentheses introduce recursion,
  387|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  388|       |    // require checking for an operator, and if any is present recursively parsing
  389|       |    // another filter and wrapping the result in an appropriate node type.
  390|       |    //
  391|       |    // In total, we handle the negation operator at the start and then apply the rules:
  392|       |    // - '(' |=> filter_expression, ')'
  393|       |    // - literal |=> comp_op, comparable
  394|       |    // - query, comp_op |=> comparable
  395|       |    // - query
  396|       |    // where |=> means a cut. We separately apply two additional restrictions:
  397|       |    // - negation cannot immediately precede a comparison,
  398|       |    // - query in a comparison must be singular.
  399|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  400|       |    // these two special cases it can give much clearer error messages about them.
  401|       |    //
  402|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  403|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  404|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  405|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  406|       |    #[derive(Debug, Clone, Copy)]
  407|       |    enum BooleanOp {
  408|       |        And,
  409|       |        Or,
  410|       |    }
  411|       |
  412|  79.1k|    let Some(ctx) = ctx.increase_nesting() else {
  413|    156|        return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  414|       |    };
  415|       |
  416|  79.0k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  417|  59.3k|    let mut loop_rest = skip_whitespace(rest);
  418|  59.3k|    let mut final_expr = this_expr;
  419|       |
  420|       |    loop {
  421|  79.3k|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  422|  79.3k|            value(BooleanOp::And, tag("&&")),
  423|  79.3k|            value(BooleanOp::Or, tag("||")),
  424|  79.3k|        ))))(loop_rest)?;
  425|  79.3k|        loop_rest = rest;
  426|       |
  427|  20.2k|        match mb_boolean_op {
  428|  6.00k|            Some(BooleanOp::And) => {
  429|  6.05k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  430|  6.00k|                loop_rest = rest;
  431|  6.00k|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  432|       |            }
  433|  13.9k|            Some(BooleanOp::Or) => {
  434|  14.2k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  435|  13.9k|                loop_rest = rest;
  436|  13.9k|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  437|       |            }
  438|  59.0k|            None => break,
  439|  59.0k|        }
  440|  59.0k|    }
  441|  59.0k|
  442|  59.0k|    return Ok((loop_rest, final_expr));
  443|       |
  444|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|       |        let negated = opt_neg.is_some();
  447|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|       |            let rest = skip_whitespace(rest);
  450|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|       |            let selector = if negated {
  454|       |                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|       |                nested_filter
  457|       |            };
  458|       |            return Ok((rest, selector));
  459|       |        }
  460|       |
  461|       |        match literal(rest) {
  462|       |            Ok((rest, lhs)) => {
  463|       |                let rest = skip_whitespace(rest);
  464|       |                let (rest, comp_op) = match comparison_operator(rest) {
  465|       |                    Ok((rest, comp_op)) => (rest, comp_op),
  466|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|       |                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|       |                let rest = skip_whitespace(rest);
  476|       |                let (rest, rhs) = match comparable(rest, ctx) {
  477|       |                    Ok((rest, rhs)) => (rest, rhs),
  478|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|       |                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|       |                if negated {
  488|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|       |                    return Ok((
  491|       |                        rest,
  492|       |                        LogicalExpr::Comparison(ComparisonExpr {
  493|       |                            lhs: Comparable::Literal(lhs),
  494|       |                            op: comp_op,
  495|       |                            rhs,
  496|       |                        }),
  497|       |                    ));
  498|       |                }
  499|       |            }
  500|       |            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|       |            _ => (),
  502|       |        };
  503|       |
  504|       |        match filter_query(rest, ctx) {
  505|       |            Ok((rest, query)) => {
  506|       |                let query_len = q.len() - rest.len();
  507|       |                let rest = skip_whitespace(rest);
  508|       |                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|       |                    let rest = skip_whitespace(rest);
  510|       |                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|       |                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|       |                    let Some(singular_query) = query.try_to_comparable() else {
  514|       |                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|       |                    if negated {
  517|       |                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|       |                        Ok((
  520|       |                            rest,
  521|       |                            LogicalExpr::Comparison(ComparisonExpr {
  522|       |                                lhs: singular_query,
  523|       |                                rhs,
  524|       |                                op: comp_op,
  525|       |                            }),
  526|       |                        ))
  527|       |                    }
  528|       |                } else {
  529|       |                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|       |                    let expr = if negated {
  531|       |                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|       |                        test_expr
  534|       |                    };
  535|       |                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|       |            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|       |            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|       |    }
  542|  79.1k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segment0B5_:
  145|  6.44k|        |q| descendant_segment(q, ctx),
_RNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser10comparable14singular_query:
  660|  11.1k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  11.1k|        let (rest, query) = filter_query(q, ctx)?;
  662|  11.1k|        let Some(cmp) = query.try_to_comparable() else {
  663|      0|            let query_len = q.len() - rest.len();
  664|      0|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|       |        };
  666|  11.1k|        Ok((rest, cmp))
  667|  11.1k|    }
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1D_cB11_NtNtB6_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB1D_B2w_E0NCINvNtB1N_10combinator3optB1D_B1D_B2w_NCIB2_B1D_NvB4_3intB2w_E0E0E0B2w_E0B6_:
   27|  4.25k|    move |q: &'a str| {
   28|  4.25k|        inner
   29|  4.25k|            .parse(skip_whitespace(q))
   30|  4.25k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  4.25k|    }
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  4.25k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  790|  22.1k|        fn read_escape_sequence<I>(
  791|  22.1k|            q_len: usize,
  792|  22.1k|            c_idx: usize,
  793|  22.1k|            chars: &mut Peekable<I>,
  794|  22.1k|            mode: StringParseMode,
  795|  22.1k|        ) -> std::result::Result<char, SyntaxError>
  796|  22.1k|        where
  797|  22.1k|            I: Iterator<Item = (usize, char)>,
  798|  22.1k|        {
  799|  22.1k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|  22.1k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|  22.1k|                q_len - c_idx,
  802|  22.1k|                1,
  803|  22.1k|            ))?;
  804|  1.36k|            match ctrl {
  805|       |                'u' => {
  806|  4.37k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|  4.37k|                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|      0|                        0xD800..=0xDBFF => {
  810|      0|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|      0|                                q_len - c_idx,
  813|      0|                                6,
  814|      0|                            ))?;
  815|      0|                            if next != '\\' {
  816|      0|                                return Err(SyntaxError::new(
  817|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|      0|                                    q_len - c_idx,
  819|      0|                                    6,
  820|      0|                                ));
  821|      0|                            }
  822|      0|                            chars.next();
  823|      0|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|      0|                                q_len - c_idx,
  826|      0|                                6,
  827|      0|                            ))?;
  828|      0|                            if next != 'u' {
  829|      0|                                return Err(SyntaxError::new(
  830|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|      0|                                    q_len - c_idx,
  832|      0|                                    6,
  833|      0|                                ));
  834|      0|                            }
  835|      0|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|      0|                            match low {
  837|      0|                                0xDC00..=0xDFFF => {
  838|      0|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|      0|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|      0|                                _ => Err(SyntaxError::new(
  842|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|      0|                                    q_len - c_idx,
  844|      0|                                    6,
  845|      0|                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|      0|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|      0|                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|      0|                            q_len - c_idx,
  852|      0|                            6,
  853|      0|                        )),
  854|  4.37k|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|  2.98k|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|    366|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|    140|                'n' => Ok('\n'),       // U+000A LF line feed
  860|    628|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|  1.35k|                'r' => Ok('\r'),       // U+000D CR carriage return
  862|    614|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|    753|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|  10.9k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|      0|                _ => Err(SyntaxError::new(
  866|      0|                    SyntaxErrorKind::InvalidEscapeSequence,
  867|      0|                    q_len - c_idx,
  868|      0|                    2,
  869|      0|                )), // no other escape sequences are allowed
  870|       |            }
  871|  22.1k|        }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser15skip_whitespace:
   13|  1.29M|fn skip_whitespace(q: &str) -> &str {
   14|  1.29M|    q.trim_start_matches(WHITESPACE)
   15|  1.29M|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser3int:
  726|   104k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  727|   104k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  728|       |
  729|  40.5k|    if int != "0" {
  730|  40.3k|        if int == "-0" {
  731|      0|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  732|  40.3k|        }
  733|  40.3k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  734|  40.3k|        if without_minus.strip_prefix(['0']).is_some() {
  735|      0|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  736|  40.3k|        }
  737|    197|    }
  738|       |
  739|  40.5k|    Ok((rest, int))
  740|   104k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_expr0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  59.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  9.37k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|  8.48k|    move |q: &'a str| {
   28|  8.48k|        inner
   29|  8.48k|            .parse(skip_whitespace(q))
   30|  8.48k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  8.48k|    }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser18parse_with_options:
   62|  2.14k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  2.14k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  2.14k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  79.0k|    move |q: &'a str| {
   28|  79.0k|        inner
   29|  79.0k|            .parse(skip_whitespace(q))
   30|  79.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  79.0k|    }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser18descendant_segment:
  151|  53.6k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  53.6k|    map(
  153|  53.6k|        preceded(
  154|  53.6k|            tag(".."),
  155|  53.6k|            cut(alt((
  156|  53.6k|                |q| bracketed_selection(q, ctx),
  157|  53.6k|                map(wildcard_selector, Selectors::one),
  158|  53.6k|                member_name_shorthand,
  159|  53.6k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  53.6k|            ))),
  161|  53.6k|        ),
  162|  53.6k|        Segment::Descendant,
  163|  53.6k|    )(q)
  164|  53.6k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser21parse_directional_int:
  713|  26.0k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  714|  26.0k|    match JsonInt::from_str(int_str) {
  715|  26.0k|        Ok(int) => {
  716|  26.0k|            if let Ok(uint) = JsonUInt::try_from(int) {
  717|  16.1k|                DirectionalInt::Plus(uint)
  718|       |            } else {
  719|  9.89k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  720|       |            }
  721|       |        }
  722|      0|        Err(err) => DirectionalInt::Error(err),
  723|       |    }
  724|  26.0k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_querys_0B5_:
  589|  18.9k|            |q| child_segment(q, ctx),
_RNvXs7_NtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  273|  1.36k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB2k_B2n_E0E0B2n_E0B6_:
   27|  85.0k|    move |q: &'a str| {
   28|  85.0k|        inner
   29|  85.0k|            .parse(skip_whitespace(q))
   30|  85.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  85.0k|    }
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|  32.1k|                |q| bracketed_selection(q, ctx),
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser8selector:
  262|  84.1k|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  263|  84.1k|    alt((
  264|  84.1k|        ignore_whitespace(name_selector),
  265|  84.1k|        ignore_whitespace(wildcard_selector),
  266|  84.1k|        ignore_whitespace(slice_selector),
  267|  84.1k|        ignore_whitespace(index_selector),
  268|  84.1k|        ignore_whitespace(|q| filter_selector(q, ctx)),
  269|  84.1k|        failed_selector,
  270|  84.1k|    ))(q)
  271|  84.1k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_query0B5_:
  588|  47.2k|            |q| descendant_segment(q, ctx),
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14string_literal:
  283|   150k|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  284|   150k|    alt((
  285|   150k|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  286|   150k|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  287|   150k|    ))(q)
  288|   150k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  6.05k|    move |q: &'a str| {
   28|  6.05k|        inner
   29|  6.05k|            .parse(skip_whitespace(q))
   30|  6.05k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  6.05k|    }
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  31.6k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  31.6k|where
   25|  31.6k|    F: nom::Parser<&'a str, T, E>,
   26|  31.6k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  31.6k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13child_segment0B5_:
  169|  21.5k|            |q| bracketed_selection(q, ctx),
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  84.1k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  84.1k|where
   25|  84.1k|    F: nom::Parser<&'a str, T, E>,
   26|  84.1k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  84.1k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNCNvB6_8selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  26.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6number0B5_:
  681|  1.70k|    map(float, |f| JsonNumber::from(f).normalize())(q)
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  14.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser8selector0B5_:
  268|  31.6k|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser28failed_segment_within_filterNtB4_7SegmentEB4_:
  628|  47.2k|fn failed_segment_within_filter<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  629|       |    move |q: &str| {
  630|       |        // We want to find the next segment or close the filter.
  631|       |        let rest = skip_one(q)
  632|       |            .trim_start_matches('.')
  633|       |            .trim_start_matches(|x| x != ',' && x != ']' && x != '.' && x != '[');
  634|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  635|       |    }
  636|  47.2k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.00k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  873|  4.37k|        fn read_hexadecimal_escape<I>(
  874|  4.37k|            q_len: usize,
  875|  4.37k|            c_idx: usize,
  876|  4.37k|            chars: &mut Peekable<I>,
  877|  4.37k|        ) -> std::result::Result<u32, SyntaxError>
  878|  4.37k|        where
  879|  4.37k|            I: Iterator<Item = (usize, char)>,
  880|  4.37k|        {
  881|  4.37k|            let mut x = 0;
  882|  21.8k|            for i in 0..4 {
  883|  17.4k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|  17.4k|                    SyntaxErrorKind::InvalidEscapeSequence,
  885|  17.4k|                    q_len - c_idx + 1,
  886|  17.4k|                    2 + i,
  887|  17.4k|                ))?;
  888|  17.4k|                let v = match c {
  889|  17.4k|                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|  1.53k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|      0|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|      0|                        return Err(SyntaxError::new(
  895|      0|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|      0|                            q_len - c_idx - i - 1,
  897|      0|                            1,
  898|      0|                        ))
  899|       |                    }
  900|       |                };
  901|  17.4k|                x <<= 4;
  902|  17.4k|                x += v;
  903|  17.4k|                chars.next();
  904|       |            }
  905|  4.37k|            Ok(x)
  906|  4.37k|        }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12filter_query:
  571|  58.5k|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  572|  58.5k|    let (rest, root_type) = alt((
  573|  58.5k|        value(RootSelectorType::Absolute, char('$')),
  574|  58.5k|        value(RootSelectorType::Relative, char('@')),
  575|  58.5k|    ))(q)?;
  576|  58.5k|    let rest = skip_whitespace(rest);
  577|  58.5k|    let mut segments = vec![];
  578|  58.5k|    let mut syntax_errors = vec![];
  579|  58.5k|
  580|  58.5k|    let mut q = rest;
  581|       |
  582|       |    loop {
  583|   100k|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  584|  53.0k|            break;
  585|  47.2k|        }
  586|  47.2k|
  587|  47.2k|        q = match alt((
  588|  47.2k|            |q| descendant_segment(q, ctx),
  589|  47.2k|            |q| child_segment(q, ctx),
  590|  47.2k|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  591|  47.2k|        ))(q)
  592|  47.2k|        .finish()
  593|       |        {
  594|  41.7k|            Ok((rest, segment)) => {
  595|  41.7k|                segments.push(segment);
  596|  41.7k|                rest
  597|       |            }
  598|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  599|      0|                syntax_errors.push(err);
  600|      0|                rest
  601|       |            }
  602|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  603|      0|                syntax_errors.append(&mut errs);
  604|      0|                rest
  605|       |            }
  606|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  607|  5.49k|                return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  608|       |            }
  609|      0|            Err(InternalParseError::NomError(err)) => panic!(
  610|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  611|      0|            ),
  612|       |        };
  613|  41.7k|        q = skip_whitespace(q);
  614|       |    }
  615|       |
  616|  53.0k|    if !syntax_errors.is_empty() {
  617|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  618|       |    } else {
  619|  53.0k|        let query = JsonPathQuery { segments };
  620|  53.0k|        let query = match root_type {
  621|  12.3k|            RootSelectorType::Relative => FilterQuery::Relative(query),
  622|  40.6k|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  623|       |        };
  624|  53.0k|        Ok((q, query))
  625|       |    }
  626|  58.5k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  9.37k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB4_11FilterQuery17try_to_comparable:
  563|  22.8k|    fn try_to_comparable(self) -> Option<Comparable> {
  564|  22.8k|        match self {
  565|  6.58k|            Self::Relative(q) => q.try_to_singular().ok().map(Comparable::RelativeSingularQuery),
  566|  16.2k|            Self::Absolute(q) => q.try_to_singular().ok().map(Comparable::AbsoluteSingularQuery),
  567|       |        }
  568|  22.8k|    }
_RNvMNtCs8HzoxQEUj1m_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|  79.1k|    fn increase_nesting(&self) -> Option<Self> {
   52|  79.1k|        match self.options.recursion_limit {
   53|  79.1k|            Some(limit) if limit <= self.current_nesting => None,
   54|  79.0k|            _ => Some(Self {
   55|  79.0k|                options: self.options,
   56|  79.0k|                current_nesting: self.current_nesting + 1,
   57|  79.0k|            }),
   58|       |        }
   59|  79.1k|    }
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser15filter_selector:
  379|  31.6k|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  380|  31.6k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  381|  31.6k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7segments_0B5_:
  146|  2.55k|        |q| child_segment(q, ctx),
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser7literal:
  670|  67.8k|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  671|  67.8k|    alt((
  672|  67.8k|        into(number),
  673|  67.8k|        into(string_literal),
  674|  67.8k|        value(Literal::Bool(true), tag("true")),
  675|  67.8k|        value(Literal::Bool(false), tag("false")),
  676|  67.8k|        value(Literal::Null, tag("null")),
  677|  67.8k|    ))(q)
  678|  67.8k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6number:
  680|  67.8k|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  681|  67.8k|    map(float, |f| JsonNumber::from(f).normalize())(q)
  682|  67.8k|}
_RNCNvNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser12logical_expr12parse_single0B7_:
  448|  33.2k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  31.6k|    move |q: &'a str| {
   28|  31.6k|        inner
   29|  31.6k|            .parse(skip_whitespace(q))
   30|  31.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  31.6k|    }
_RNCNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6string00B7_:
  761|  28.9k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser10comparable:
  657|  16.0k|fn comparable<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  658|  16.0k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
  659|  16.0k|
  660|  16.0k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  16.0k|        let (rest, query) = filter_query(q, ctx)?;
  662|  16.0k|        let Some(cmp) = query.try_to_comparable() else {
  663|  16.0k|            let query_len = q.len() - rest.len();
  664|  16.0k|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|  16.0k|        };
  666|  16.0k|        Ok((rest, cmp))
  667|  16.0k|    }
  668|  16.0k|}
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1V_E00B8_:
   30|  4.25k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1F_cB13_NtNtB8_5error18InternalParseErrorNCINvNtNtB1P_9character8complete4charB1F_B2y_E0NCINvNtB1P_10combinator3optB1F_B1F_B2y_NCIB4_B1F_NvB6_3intB2y_E0E0E0B2y_E00B8_:
   30|  4.23k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  84.1k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  84.1k|where
   25|  84.1k|    F: nom::Parser<&'a str, T, E>,
   26|  84.1k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  84.1k|}
_RNCNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser6string0B5_:
  743|  28.9k|    move |q: &'a str| {
  744|  28.9k|        let mut builder = JsonStringBuilder::new();
  745|  28.9k|        let mut syntax_errors = vec![];
  746|  28.9k|        let mut stream = q.char_indices().peekable();
  747|       |
  748|  92.3k|        while let Some((c_idx, c)) = stream.next() {
  749|  92.3k|            match (c, mode) {
  750|       |                ('\\', _) => {
  751|  22.1k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|  22.1k|                        Ok(r) => {
  753|  22.1k|                            builder.push(r);
  754|  22.1k|                        }
  755|      0|                        Err(err) => {
  756|      0|                            syntax_errors.push(err);
  757|      0|                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|  28.9k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|  28.9k|                    return if syntax_errors.is_empty() {
  763|  28.9k|                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|      0|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|  39.2k|                (..='\u{001F}', _) => {
  769|      0|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|      0|                    syntax_errors.push(SyntaxError::new(
  771|      0|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|      0|                        rest.len() + 1,
  773|      0|                        1,
  774|      0|                    ))
  775|       |                }
  776|  41.2k|                _ => {
  777|  41.2k|                    builder.push(c);
  778|  41.2k|                }
  779|       |            }
  780|       |        }
  781|       |
  782|      0|        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|      0|            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|      0|            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|      0|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|      0|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|  28.9k|    }
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  6.44k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  6.44k|}
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB2i_B2l_E0E0B2l_EB4_:
   23|  85.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  85.0k|where
   25|  85.0k|    F: nom::Parser<&'a str, T, E>,
   26|  85.0k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  85.0k|}
_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser13child_segment:
  166|  21.5k|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  167|  21.5k|    map(
  168|  21.5k|        alt((
  169|  21.5k|            |q| bracketed_selection(q, ctx),
  170|  21.5k|            // This cut is only correct because we try parsing descendant_segment first.
  171|  21.5k|            preceded(
  172|  21.5k|                char('.'),
  173|  21.5k|                cut(alt((
  174|  21.5k|                    map(wildcard_selector, Selectors::one),
  175|  21.5k|                    member_name_shorthand,
  176|  21.5k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  177|  21.5k|                ))),
  178|  21.5k|            ),
  179|  21.5k|        )),
  180|  21.5k|        Segment::Child,
  181|  21.5k|    )(q)
  182|  21.5k|}
_RNCINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1T_E0B6_:
   27|  50.3k|    move |q: &'a str| {
   28|  50.3k|        inner
   29|  50.3k|            .parse(skip_whitespace(q))
   30|  50.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  50.3k|    }
_RINvNtCs8HzoxQEUj1m_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|  75.2k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  75.2k|}

_RNvNtCs8HzoxQEUj1m_15rsonpath_syntax3str6escapeCs7p50hnCSNrm_21query_fuzz_round_trip:
  131|  29.3k|pub fn escape(str: &str, mode: EscapeMode) -> String {
  132|  29.3k|    use std::fmt::Write;
  133|  29.3k|    let mut result = String::new();
  134|  63.8k|    for c in str.chars() {
  135|  1.67k|        match c {
  136|       |            // # Mode-dependent quote escapes.
  137|  2.43k|            '\'' if mode == EscapeMode::SingleQuoted => result.push_str(r"\'"),
  138|  1.67k|            '\'' if mode == EscapeMode::DoubleQuoted => result.push('\''),
  139|    944|            '"' if mode == EscapeMode::SingleQuoted => result.push('"'),
  140|    614|            '"' if mode == EscapeMode::DoubleQuoted => result.push_str(r#"\""#),
  141|       |            // # Mode-independent escapes.
  142|  10.9k|            '\\' => result.push_str(r"\\"),
  143|       |            // ## Special control sequences.
  144|  2.99k|            '\u{0008}' => result.push_str(r"\b"),
  145|    634|            '\u{000C}' => result.push_str(r"\f"),
  146|    140|            '\n' => result.push_str(r"\n"),
  147|  1.35k|            '\r' => result.push_str(r"\r"),
  148|    370|            '\t' => result.push_str(r"\t"),
  149|       |            // ## Other control sequences escaped as Unicode escapes.
  150|  44.0k|            '\u{0000}'..='\u{001F}' => write!(result, "\\u{:0>4x}", c as u8).unwrap(),
  151|       |            // # Non-escapable characters.
  152|  39.6k|            _ => result.push(c),
  153|       |        }
  154|       |    }
  155|       |
  156|  29.3k|    result
  157|  29.3k|}
_RNvMs2_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|  86.6k|    pub fn unquoted(&self) -> &str {
  188|  86.6k|        let len = self.quoted.len();
  189|  86.6k|        debug_assert!(len >= 2);
  190|  86.6k|        &self.quoted[1..len - 1]
  191|  86.6k|    }
_RNvXsc_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB5_10EscapeModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs7p50hnCSNrm_21query_fuzz_round_trip:
   71|  5.66k|#[derive(Clone, Copy, PartialEq, Eq, Debug)]
_RNvXs3_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  28.6k|    fn eq(&self, other: &Self) -> bool {
  211|  28.6k|        self.unquoted() == other.unquoted()
  212|  28.6k|    }
_RNvXs0_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  53.9k|    fn from(value: JsonStringBuilder) -> Self {
   59|  53.9k|        value.finish()
   60|  53.9k|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  82.9k|    pub(crate) fn new() -> Self {
   40|  82.9k|        Self {
   41|  82.9k|            quoted: String::from('"'),
   42|  82.9k|        }
   43|  82.9k|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|   149k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|   149k|        self.quoted.push(char);
   47|   149k|        self
   48|   149k|    }
_RNvXs6_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB5_10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
  228|  53.9k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  53.9k|        let chars = u.arbitrary_iter()?;
  230|  53.9k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|   126k|        for c in chars {
  236|  72.4k|            let c = c?;
  237|  72.4k|            match c {
  238|  72.4k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|  14.0k|                    builder.push('\\');
  240|  14.0k|                    builder.push(c);
  241|  14.0k|                }
  242|  58.3k|                _ => {
  243|  58.3k|                    builder.push(c);
  244|  58.3k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  53.9k|        Ok(builder.into())
  249|  53.9k|    }
_RNvMs_NtCs8HzoxQEUj1m_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  82.9k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  82.9k|        self.quoted.push('"');
   52|  82.9k|        JsonString { quoted: self.quoted }
   53|  82.9k|    }

