_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary9size_hintCs5sf5hjJHSjs_21query_fuzz_round_trip:
  688|  4.80k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|  4.80k|        (0, None)
  690|  4.80k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|  4.80k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  4.80k|        u.arbitrary_take_rest_iter()?.collect()
  685|  4.80k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax8SelectorENtB5_9Arbitrary9arbitraryB12_:
  679|  97.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  97.9k|        u.arbitrary_iter()?.collect()
  681|  97.9k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  99.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  99.2k|        u.arbitrary_iter()?.collect()
  681|  99.2k|    }
_RNvXsp_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc5boxed3BoxNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprENtB5_9Arbitrary9arbitraryB14_:
  925|   257k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|   257k|        Arbitrary::arbitrary(u).map(Self::new)
  927|   257k|    }
_RNvXs5_Cs98o54wqeRSK_9arbitraryINtNtCslATUeuPuGvJ_4core6option6OptionNtCsmyidsRPtaf_15rsonpath_syntax5IndexENtB5_9Arbitrary9arbitraryB17_:
  531|  9.50k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  9.50k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  6.79k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  2.71k|            None
  536|       |        })
  537|  9.50k|    }
_RNvXsa_Cs98o54wqeRSK_9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentENtB5_9Arbitrary9arbitraryB12_:
  679|  58.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  58.1k|        u.arbitrary_iter()?.collect()
  681|  58.1k|    }
_RNvXs_Cs98o54wqeRSK_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   670k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   670k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   670k|    }
_RNvXsL_Cs98o54wqeRSK_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  1.97k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  1.97k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  1.97k|                    u.fill_buffer(&mut buf)?;
  312|  1.97k|                    let mut x: $unsigned = 0;
  313|  15.8k|                    for i in 0..mem::size_of::<$ty>() {
  314|  15.8k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  15.8k|                    }
  316|  1.97k|                    Ok(x as $ty)
  317|  1.97k|                }
_RNvXsI_Cs98o54wqeRSK_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   670k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   670k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   670k|                    u.fill_buffer(&mut buf)?;
  312|   670k|                    let mut x: $unsigned = 0;
  313|   670k|                    for i in 0..mem::size_of::<$ty>() {
  314|   670k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   670k|                    }
  316|   670k|                    Ok(x as $ty)
  317|   670k|                }
_RNvXsK_Cs98o54wqeRSK_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  1.04M|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  1.04M|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  1.04M|                    u.fill_buffer(&mut buf)?;
  312|  1.04M|                    let mut x: $unsigned = 0;
  313|  4.18M|                    for i in 0..mem::size_of::<$ty>() {
  314|  4.18M|                        x |= buf[i] as $unsigned << (i * 8);
  315|  4.18M|                    }
  316|  1.04M|                    Ok(x as $ty)
  317|  1.04M|                }
_RNvXsV_Cs98o54wqeRSK_9arbitrarydNtB5_9Arbitrary9arbitrary:
  349|  1.97k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  350|  1.97k|                    Ok(Self::from_bits(<$unsigned as Arbitrary<'a>>::arbitrary(u)?))
  351|  1.97k|                }
_RNvXs0_Cs98o54wqeRSK_9arbitrarycNtB5_9Arbitrary9arbitrary:
  368|   112k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  369|       |        use std::char;
  370|       |        // The highest unicode code point is 0x11_FFFF
  371|       |        const CHAR_END: u32 = 0x11_0000;
  372|       |        // The size of the surrogate blocks
  373|       |        const SURROGATES_START: u32 = 0xD800;
  374|   112k|        let mut c = <u32 as Arbitrary<'a>>::arbitrary(u)? % CHAR_END;
  375|   112k|        if let Some(c) = char::from_u32(c) {
  376|   110k|            Ok(c)
  377|       |        } else {
  378|       |            // We found a surrogate, wrap and try again
  379|  1.58k|            c -= SURROGATES_START;
  380|  1.58k|            Ok(char::from_u32(c)
  381|  1.58k|                .expect("Generated character should be valid! This is a bug in arbitrary-rs"))
  382|       |        }
  383|   112k|    }

_RNCNvNtCs98o54wqeRSK_9arbitrary9size_hint3and0Cs5sf5hjJHSjs_21query_fuzz_round_trip:
   28|  4.80k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint3andCs5sf5hjJHSjs_21query_fuzz_round_trip:
   26|  4.80k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  4.80k|    let lower = lhs.0 + rhs.0;
   28|  4.80k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  4.80k|    (lower, upper)
   30|  4.80k|}
_RINvNtCs98o54wqeRSK_9arbitrary9size_hint15recursion_guardNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB10_13JsonPathQueryNtB4_9Arbitrary9size_hint0ECs5sf5hjJHSjs_21query_fuzz_round_trip:
   12|  4.80k|pub fn recursion_guard(
   13|  4.80k|    depth: usize,
   14|  4.80k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  4.80k|) -> (usize, Option<usize>) {
   16|  4.80k|    const MAX_DEPTH: usize = 20;
   17|  4.80k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  4.80k|        f(depth + 1)
   21|       |    }
   22|  4.80k|}
_RNvNtCs98o54wqeRSK_9arbitrary9size_hint7and_allCs5sf5hjJHSjs_21query_fuzz_round_trip:
   37|  4.80k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  4.80k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  4.80k|}

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCs5sf5hjJHSjs_21query_fuzz_round_trip:
   85|  4.80k|    pub fn new(data: &'a [u8]) -> Self {
   86|  4.80k|        Unstructured { data }
   87|  4.80k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCshJIxznpEM8j_5alloc3vec3VecNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEEB1J_:
  167|  97.9k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  97.9k|    where
  169|  97.9k|        A: Arbitrary<'a>,
  170|  97.9k|    {
  171|  97.9k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  97.9k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEB1i_:
  606|  99.2k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  99.2k|        &'b mut self,
  608|  99.2k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  99.2k|        Ok(ArbitraryIter {
  610|  99.2k|            u: &mut *self,
  611|  99.2k|            _marker: PhantomData,
  612|  99.2k|        })
  613|  99.2k|    }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int13from_unsignedCsmyidsRPtaf_15rsonpath_syntax:
  845|  66.7k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  66.7k|                    unsigned as Self
  847|  66.7k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangexECsmyidsRPtaf_15rsonpath_syntax:
  293|  66.7k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  66.7k|    where
  295|  66.7k|        T: Int,
  296|  66.7k|    {
  297|  66.7k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  66.7k|        self.data = &self.data[bytes_consumed..];
  299|  66.7k|        Ok(result)
  300|  66.7k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int10from_usizeCsmyidsRPtaf_15rsonpath_syntax:
  825|   529k|                fn from_usize(u: usize) -> Self {
  826|   529k|                    u as Self
  827|   529k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_itercECsmyidsRPtaf_15rsonpath_syntax:
  606|  87.5k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  87.5k|        &'b mut self,
  608|  87.5k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  87.5k|        Ok(ArbitraryIter {
  610|  87.5k|            u: &mut *self,
  611|  87.5k|            _marker: PhantomData,
  612|  87.5k|        })
  613|  87.5k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtNtCsmyidsRPtaf_15rsonpath_syntax3num7JsonIntEB1e_:
  167|  64.4k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  64.4k|    where
  169|  64.4k|        A: Arbitrary<'a>,
  170|  64.4k|    {
  171|  64.4k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  64.4k|    }
_RNvXsa_NtCs98o54wqeRSK_9arbitrary12unstructuredxNtB5_3Int11to_unsignedCsmyidsRPtaf_15rsonpath_syntax:
  841|   133k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   133k|                    self as $unsigned_ty
  843|   133k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentEB1i_:
  606|  58.1k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  58.1k|        &'b mut self,
  608|  58.1k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  58.1k|        Ok(ArbitraryIter {
  610|  58.1k|            u: &mut *self,
  611|  58.1k|            _marker: PhantomData,
  612|  58.1k|        })
  613|  58.1k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarydECsmyidsRPtaf_15rsonpath_syntax:
  167|  1.97k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.97k|    where
  169|  1.97k|        A: Arbitrary<'a>,
  170|  1.97k|    {
  171|  1.97k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.97k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax15SingularSegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  96.7k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  96.7k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  96.7k|        if keep_going {
  723|  38.6k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  58.1k|            None
  726|       |        }
  727|  96.7k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEB1c_:
  167|   113k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   113k|    where
  169|   113k|        A: Arbitrary<'a>,
  170|   113k|    {
  171|   113k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   113k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEB1i_:
  606|  97.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  97.9k|        &'b mut self,
  608|  97.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  97.9k|        Ok(ArbitraryIter {
  610|  97.9k|            u: &mut *self,
  611|  97.9k|            _marker: PhantomData,
  612|  97.9k|        })
  613|  97.9k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int7from_u8CsmyidsRPtaf_15rsonpath_syntax:
  821|   463k|                fn from_u8(b: u8) -> Self {
  822|   463k|                    b as Self
  823|   463k|                }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEB1s_:
  620|  4.80k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  4.80k|        self,
  622|  4.80k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  4.80k|        Ok(ArbitraryTakeRestIter {
  624|  4.80k|            u: self,
  625|  4.80k|            _marker: PhantomData,
  626|  4.80k|        })
  627|  4.80k|    }
_RNvXs0_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB1e_:
  738|  14.6k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  14.6k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  14.6k|        if keep_going {
  741|  11.7k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  2.96k|            None
  744|       |        }
  745|  14.6k|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_subCsmyidsRPtaf_15rsonpath_syntax:
  837|  66.7k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  66.7k|                    <$ty>::wrapping_sub(self, rhs)
  839|  66.7k|                }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int12wrapping_addCsmyidsRPtaf_15rsonpath_syntax:
  833|  66.7k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  66.7k|                    <$ty>::wrapping_add(self, rhs)
  835|  66.7k|                }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax7SegmentENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|   177k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   177k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   177k|        if keep_going {
  723|   101k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  76.1k|            None
  726|       |        }
  727|   177k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenCsmyidsRPtaf_15rsonpath_syntax:
  108|  1.14M|    pub fn len(&self) -> usize {
  109|  1.14M|        self.data.len()
  110|  1.14M|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsmyidsRPtaf_15rsonpath_syntax:
  132|  1.14M|    pub fn is_empty(&self) -> bool {
  133|  1.14M|        self.len() == 0
  134|  1.14M|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryItercENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextCsmyidsRPtaf_15rsonpath_syntax:
  720|   200k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   200k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   200k|        if keep_going {
  723|   112k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  87.5k|            None
  726|       |        }
  727|   200k|    }
_RNvXs_NtCs98o54wqeRSK_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCsmyidsRPtaf_15rsonpath_syntax8SelectorENtNtNtNtCslATUeuPuGvJ_4core4iter6traits8iterator8Iterator4nextB15_:
  720|   168k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|   168k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|   168k|        if keep_going {
  723|  80.2k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  88.4k|            None
  726|       |        }
  727|   168k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsmyidsRPtaf_15rsonpath_syntax:
  167|   658k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   658k|    where
  169|   658k|        A: Arbitrary<'a>,
  170|   658k|    {
  171|   658k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   658k|    }
_RINvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implxINtNtNtNtCslATUeuPuGvJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsmyidsRPtaf_15rsonpath_syntax:
  302|  66.7k|    fn int_in_range_impl<T>(
  303|  66.7k|        range: ops::RangeInclusive<T>,
  304|  66.7k|        mut bytes: impl Iterator<Item = u8>,
  305|  66.7k|    ) -> Result<(T, usize)>
  306|  66.7k|    where
  307|  66.7k|        T: Int,
  308|  66.7k|    {
  309|  66.7k|        let start = *range.start();
  310|  66.7k|        let end = *range.end();
  311|  66.7k|        assert!(
  312|  66.7k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  66.7k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  66.7k|        }
  321|  66.7k|
  322|  66.7k|        // From here on out we work with the unsigned representation. All of the
  323|  66.7k|        // operations performed below work out just as well whether or not `T`
  324|  66.7k|        // is a signed or unsigned integer.
  325|  66.7k|        let start = start.to_unsigned();
  326|  66.7k|        let end = end.to_unsigned();
  327|  66.7k|
  328|  66.7k|        let delta = end.wrapping_sub(start);
  329|  66.7k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  66.7k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  66.7k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   529k|        while (bytes_consumed < mem::size_of::<T>())
  339|   529k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   463k|            let byte = match bytes.next() {
  342|    803|                None => break,
  343|   463k|                Some(b) => b,
  344|   463k|            };
  345|   463k|            bytes_consumed += 1;
  346|   463k|
  347|   463k|            // Combine this byte into our arbitrary integer, but avoid
  348|   463k|            // overflowing the shift for `u8` and `i8`.
  349|   463k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|   463k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  66.7k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  66.7k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  66.7k|        let result = start.wrapping_add(offset);
  365|  66.7k|
  366|  66.7k|        // And convert back to our maybe-signed representation.
  367|  66.7k|        let result = T::from_unsigned(result);
  368|  66.7k|        debug_assert!(*range.start() <= result);
  369|  66.7k|        debug_assert!(result <= *range.end());
  370|       |
  371|  66.7k|        Ok((result, bytes_consumed))
  372|  66.7k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  1.71M|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  1.71M|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  1.71M|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  1.71M|        for byte in buffer[n..].iter_mut() {
  525|   106k|            *byte = 0;
  526|   106k|        }
  527|  1.71M|        self.data = &self.data[n..];
  528|  1.71M|        Ok(())
  529|  1.71M|    }
_RNvXs4_NtCs98o54wqeRSK_9arbitrary12unstructuredyNtB5_3Int11checked_add:
  829|  66.7k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  66.7k|                    <$ty>::checked_add(self, rhs)
  831|  66.7k|                }

rust_fuzzer_test_input:
  259|  4.80k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  4.80k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  4.80k|
  262|  4.80k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  4.80k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  4.80k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  4.80k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  4.80k|                // get to longer inputs that actually lead to interesting executions
  267|  4.80k|                // quicker.
  268|  4.80k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  4.80k|                }
  271|  4.80k|
  272|  4.80k|                let mut u = Unstructured::new(bytes);
  273|  4.80k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  4.80k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  4.80k|                }
  291|       |
  292|  4.80k|                let data = match data {
  293|  2.96k|                    Ok(d) => d,
  294|  1.84k|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.96k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.96k|                result.to_libfuzzer_code()
  299|  4.80k|            }
_RNvNvCs5sf5hjJHSjs_21query_fuzz_round_trip1__19___libfuzzer_sys_run:
  303|  2.96k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.75k|                $body
  305|  2.96k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs5sf5hjJHSjs_21query_fuzz_round_trip:
   40|  2.96k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.96k|        match self {
   42|  2.75k|            Corpus::Keep => 0,
   43|    213|            Corpus::Reject => -1,
   44|       |        }
   45|  2.96k|    }
LLVMFuzzerTestOneInput:
   58|  4.80k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  4.80k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  4.80k|    });
   63|  4.80k|
   64|  4.80k|    match test_input {
   65|  4.80k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  4.80k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  4.80k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  4.80k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  4.80k|        rust_fuzzer_test_input(data_slice)
   62|  4.80k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1w_NCINvNtNtB4_9character8complete4charBx_B1w_E0E0B24_EEBD_:
   47|  87.7k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  87.7k|  mut l: List,
   49|  87.7k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  87.7k|}
_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2f_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2f_E0EINtB5_3AltB1Z_B2f_B2u_E6choiceBD_:
  134|  46.1k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  46.1k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  46.1k|          res => res,
  138|       |        }
  139|  46.1k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1p_NCINvNtNtB6_9character8complete4charBz_B1p_E0NCNvNtBF_6parser6string0E0B1X_EE0BF_:
   50|   225k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1N_s_0NCINvB1P_14failed_segmentBz_E0EEBB_:
   47|  8.45k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  8.45k|  mut l: List,
   49|  8.45k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  8.45k|}
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1T_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  8.45k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  8.45k|        match self.0.parse(input.clone()) {
  136|  3.50k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.94k|          res => res,
  138|       |        }
  139|  8.45k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1P_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1P_E6choiceB15_:
  134|   225k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   225k|        match self.0.parse(input.clone()) {
  136|   190k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  34.9k|          res => res,
  138|       |        }
  139|   225k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0BD_:
   50|  46.1k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1f_NCINvNtNtB4_9character8complete4charBx_B1f_E0NCINvNtB4_10combinator3cutBx_Bz_B1f_NCIB0_Bx_Bz_B1f_TNCINvB3K_3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  33.6k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  33.6k|  mut l: List,
   49|  33.6k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  33.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser12filter_query0NCB1P_s_0NCINvB1R_28failed_segment_within_filterBB_E0EE0BD_:
   50|  71.3k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser12filter_query0NCB1N_s_0NCINvB1P_28failed_segment_within_filterBz_E0EEBB_:
   47|  71.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  71.3k|  mut l: List,
   49|  71.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  71.3k|}
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0NCBz_s_0NCINvBB_28failed_segment_within_filterNtBD_7SegmentE0EINtB5_3AltReB2d_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  71.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  71.3k|        match self.0.parse(input.clone()) {
  136|  30.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  41.2k|          res => res,
  138|       |        }
  139|  71.3k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1y_NCINvNtNtB6_9character8complete4charBz_B1y_E0E0B26_EE0BF_:
   50|  87.7k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1n_NCINvNtNtB4_9character8complete4charBx_B1n_E0NCNvNtBD_6parser6string0E0B1V_EEBD_:
   47|   225k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   225k|  mut l: List,
   49|   225k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   225k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtBD_7LiteralBB_B1j_B1j_NvNtBD_6parser7literalE0NCNvB2L_10comparable0EE0BD_:
   50|  25.0k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1V_B2d_E0NCINvNtB6_10combinator3cutB1V_B1Y_B2d_NCINvB4_3altB1V_B1Y_B2d_TNCINvB3z_3mapB1V_NtBC_8SelectorB1Y_B2d_NvBA_17wildcard_selectorNvMst_BC_B1Y_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Y_E0EE0E0E0EINtB4_3AltB1V_B1Y_B2d_E6choiceBC_:
  134|  33.6k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  33.6k|        match self.0.parse(input.clone()) {
  136|      0|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  33.6k|          res => res,
  138|       |        }
  139|  33.6k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1d_B1d_NvNtBB_6parser6numberE0NCIB1O_Bx_NtNtBB_3str10JsonStringBz_B1d_B1d_NvB2P_14string_literalE0NCINvB1Q_5valueBx_Bz_Bx_B1d_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1d_E0E0B4g_B4g_EEBB_:
   47|   103k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   103k|  mut l: List,
   49|   103k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   103k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1R_13name_selectorB1e_E0NCIB1P_Bz_NvB1R_17wildcard_selectorB1e_E0NCIB1P_Bz_NvB1R_14slice_selectorB1e_E0NCIB1P_Bz_NvB1R_14index_selectorB1e_E0NCIB1P_Bz_NCNvB1R_8selector0B1e_E0NvB1R_15failed_selectorEEBB_:
   47|   124k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   124k|  mut l: List,
   49|   124k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   124k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   103k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   103k|        match self.0.parse(input.clone()) {
  136|   101k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.83k|          res => res,
  138|       |        }
  139|   103k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1h_NCINvNtNtB6_9character8complete4charBz_B1h_E0NCINvNtB6_10combinator3cutBz_BB_B1h_NCIB2_Bz_BB_B1h_TNCINvB3M_3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  33.6k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1z_EEBE_:
   47|   103k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   103k|  mut l: List,
   49|   103k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   103k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1j_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1j_E0E0B1R_B1R_B1R_NCIB1U_Bx_Bz_cB1j_NCINvNtNtB4_9character8complete4charBx_B1j_E0E0B3r_EEBB_:
   47|  71.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  71.3k|  mut l: List,
   49|  71.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  71.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1l_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1l_E0E0B1T_B1T_B1T_NCIB1W_Bz_BB_cB1l_NCINvNtNtB6_9character8complete4charBz_B1l_E0E0B3t_EE0BD_:
   50|  71.3k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EEBB_:
   47|  79.7k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  79.7k|  mut l: List,
   49|  79.7k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  79.7k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2k_6digit1Bz_BE_EE0B2X_EE0BI_:
   50|   158k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB11_10ComparableNtNtB11_5error18InternalParseErrorB1V_NvNtB11_6parser7literalE0NCNvB2z_10comparable0EINtB4_3AltBX_B1D_B1V_E6choiceB11_:
  134|  25.0k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  25.0k|        match self.0.parse(input.clone()) {
  136|  16.6k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  8.37k|          res => res,
  138|       |        }
  139|  25.0k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB27_6digit1BY_B14_EE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   158k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   158k|        match self.0.parse(input.clone()) {
  136|   135k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  23.6k|          res => res,
  138|       |        }
  139|   158k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1T_13name_selectorB1g_E0NCIB1R_BB_NvB1T_17wildcard_selectorB1g_E0NCIB1R_BB_NvB1T_14slice_selectorB1g_E0NCIB1R_BB_NvB1T_14index_selectorB1g_E0NCIB1R_BB_NCNvB1T_8selector0B1g_E0NvB1T_15failed_selectorEE0BD_:
   50|   124k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1f_B1f_NvNtBD_6parser6numberE0NCIB1Q_Bz_NtNtBD_3str10JsonStringBB_B1f_B1f_NvB2R_14string_literalE0NCINvB1S_5valueBz_BB_Bz_B1f_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1f_E0E0B4i_B4i_EE0BD_:
   50|   103k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBH_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1G_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1G_E0E0B2e_EE0BH_:
   50|   121k|  move |i: I| l.choice(i)
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1y_NvBC_17wildcard_selectorB26_E0NCIBA_B1y_NvBC_14slice_selectorB26_E0NCIBA_B1y_NvBC_14index_selectorB26_E0NCIBA_B1y_NCNvBC_8selector0B26_E0NvBC_15failed_selectorEINtB5_3AltReB1y_B26_E6choiceBE_:
  134|   124k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   124k|        match self.0.parse(input.clone()) {
  136|  89.8k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  34.9k|          res => res,
  138|       |        }
  139|   124k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1P_s_0NCINvB1R_14failed_segmentBB_E0EE0BD_:
   50|  8.45k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtBB_7LiteralBz_B1h_B1h_NvNtBB_6parser7literalE0NCNvB2J_10comparable0EEBB_:
   47|  25.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  25.0k|  mut l: List,
   49|  25.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  25.0k|}
_RNvXs2_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB22_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1O_B22_B22_NvB2G_14string_literalE0NCINvBC_5valueBY_B1O_BY_B22_NCINvNtNtB7_5bytes8complete3tagBY_BY_B22_E0E0B49_B49_EINtB5_3AltBY_B1O_B22_E6choiceB14_:
  134|   103k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   103k|        match self.0.parse(input.clone()) {
  136|   100k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  2.70k|          res => res,
  138|       |        }
  139|   103k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2X_EE0BI_:
   50|   103k|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBY_NtNtB16_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBY_BY_B28_E0E0Bw_EINtB4_3AltBY_B10_B28_E6choiceB16_:
  134|   121k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   121k|        match self.0.parse(input.clone()) {
  136|   112k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  9.41k|          res => res,
  138|       |        }
  139|   121k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBF_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1E_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1E_E0E0B2c_EEBF_:
   47|   121k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   121k|  mut l: List,
   49|   121k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   121k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2i_6digit1Bx_BC_EE0B2V_EEBG_:
   47|   158k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   158k|  mut l: List,
   49|   158k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   158k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBz_E0EEBB_:
   47|  33.6k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  33.6k|  mut l: List,
   49|  33.6k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  33.6k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2V_EEBG_:
   47|   103k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   103k|  mut l: List,
   49|   103k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   103k|}
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBZ_NtNtB13_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1O_E0E0Bx_Bx_Bx_NCIBA_BZ_B11_cB1O_NCINvNtNtB7_9character8complete4charBZ_B1O_E0E0B3e_EINtB5_3AltBZ_B11_B1O_E6choiceB13_:
  134|  71.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  71.3k|        match self.0.parse(input.clone()) {
  136|  67.5k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.86k|          res => res,
  138|       |        }
  139|  71.3k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Y_E0E0Bw_EINtB4_3AltBY_B10_B1Y_E6choiceB14_:
  134|  87.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  87.7k|        match self.0.parse(input.clone()) {
  136|  20.2k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  67.5k|          res => res,
  138|       |        }
  139|  87.7k|      }

_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBQ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|   103k|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|   103k|  tag: T,
   76|   103k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|   103k|where
   78|   103k|  Input: InputTake + Compare<T>,
   79|   103k|  T: InputLength + Clone,
   80|   103k|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|   103k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   949k|  move |i: Input| {
   40|   949k|    let tag_len = tag.input_len();
   41|   949k|    let t = tag.clone();
   42|   949k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|   108k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   841k|        let e: ErrorKind = ErrorKind::Tag;
   46|   841k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   949k|    res
   50|   949k|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  1.00M|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  1.00M|  tag: T,
   34|  1.00M|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  1.00M|where
   36|  1.00M|  Input: InputTake + Compare<T>,
   37|  1.00M|  T: InputLength + Clone,
   38|  1.00M|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  1.00M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBS_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B11_:
   81|  2.70k|  move |i: Input| {
   82|  2.70k|    let tag_len = tag.input_len();
   83|  2.70k|    let t = tag.clone();
   84|       |
   85|  2.70k|    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|      0|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|  2.70k|        let e: ErrorKind = ErrorKind::Tag;
   89|  2.70k|        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|  2.70k|    res
   93|  2.70k|  }

_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsmyidsRPtaf_15rsonpath_syntax:
   37|   192k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   192k|    let b = t.as_char() == c;
   39|   192k|    (&c, b)
   40|   192k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBO_uECsmyidsRPtaf_15rsonpath_syntax:
   89|   151k|pub fn one_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
   90|   151k|where
   91|   151k|  I: Slice<RangeFrom<usize>> + InputIter,
   92|   151k|  <I as InputIter>::Item: AsChar + Copy,
   93|   151k|  T: FindToken<<I as InputIter>::Item>,
   94|   151k|{
   95|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|       |  }
   99|   151k|}
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|   263k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|   263k|where
  437|   263k|  T: InputTakeAtPosition,
  438|   263k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|   263k|{
  440|   263k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|   263k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBQ_uE0CsmyidsRPtaf_15rsonpath_syntax:
   95|   151k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|  71.3k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|  80.5k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|   151k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuECsmyidsRPtaf_15rsonpath_syntax:
   32|   155k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   155k|where
   34|   155k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   155k|  <I as InputIter>::Item: AsChar,
   36|   155k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   155k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE0CsmyidsRPtaf_15rsonpath_syntax:
   37|   155k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   155k|  }) {
   41|  76.8k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  78.5k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   155k|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE00CsmyidsRPtaf_15rsonpath_syntax:
   37|   155k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   155k|    let b = t.as_char() == c;
   39|   155k|    (&c, b)
   40|   155k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  1.71M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  1.71M|where
   34|  1.71M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  1.71M|  <I as InputIter>::Item: AsChar,
   36|  1.71M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  1.71M|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBS_uE00CsmyidsRPtaf_15rsonpath_syntax:
   95|   151k|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|  1.52M|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|  1.23M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  1.23M|    let b = t.as_char() == c;
   39|  1.23M|    (&c, b)
   40|  1.23M|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsmyidsRPtaf_15rsonpath_syntax:
   32|   192k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   192k|where
   34|   192k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   192k|  <I as InputIter>::Item: AsChar,
   36|   192k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   192k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsmyidsRPtaf_15rsonpath_syntax:
   37|   192k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   192k|  }) {
   41|   120k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  72.4k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   192k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|  1.23M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  1.23M|  }) {
   41|   346k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   889k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  1.23M|  }

_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1x_E0E00BM_:
  460|  11.4k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1x_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1x_NvB4m_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBE_E0EE0E0E0NcNtB1k_10Descendant0EBG_:
   73|  79.7k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  79.7k|where
   75|  79.7k|  F: Parser<I, O1, E>,
   76|  79.7k|  G: FnMut(O1) -> O2,
   77|  79.7k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  79.7k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1x_NCINvNtNtB4_9character8complete4charBC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCIB27_BC_BE_B1x_TNCIB0_BC_NtBG_8SelectorBE_B1x_NvB2E_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBE_E0EE0E0E0EE0NcNtB1k_5Child0EBG_:
   73|  33.6k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  33.6k|where
   75|  33.6k|  F: Parser<I, O1, E>,
   76|  33.6k|  G: FnMut(O1) -> O2,
   77|  33.6k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  33.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1E_NCINvNtB6_8sequence8precededBF_cBH_B1E_NCINvNtNtB6_9character8complete4charBF_B1E_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3G_15filter_selector0B1E_E0E0E0BJ_:
  672|  47.0k|  move |input: I| match parser.parse(input) {
  673|  39.6k|    Ok((i, o)) => Ok((i, o.into())),
  674|      0|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  7.38k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  47.0k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2l_BC_NvB2n_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  6.75k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  6.75k|where
  241|  6.75k|  F: Parser<I, O, E>,
  242|  6.75k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  6.75k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBM_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1v_E0E00BM_:
  460|  13.6k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser14string_literalE0BL_:
  672|   100k|  move |input: I| match parser.parse(input) {
  673|  7.86k|    Ok((i, o)) => Ok((i, o.into())),
  674|  93.0k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   100k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB2Z_6digit1BK_BP_EE0B3C_EE0E0BT_:
  512|   158k|  move |input: I| {
  513|   158k|    let i = input.clone();
  514|   158k|    match parser.parse(i) {
  515|  62.9k|      Ok((i, _)) => {
  516|  62.9k|        let index = input.offset(&i);
  517|  62.9k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  95.7k|      Err(e) => Err(e),
  520|       |    }
  521|   158k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1m_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1m_NvB2t_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2t_21member_name_shorthandNCINvB2t_14failed_segmentBG_E0EE0E0BI_:
  635|  46.1k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  46.1k|    rest => rest,
  638|  46.1k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBK_INtNtCslATUeuPuGvJ_4core6option6OptionBK_EBQ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2D_8precededBK_cBK_B1A_NCINvB3b_4charBK_B1A_E0B38_E0E0NCIB3T_BK_BK_B1A_NCIB4f_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4f_BK_IBR_cEBK_B1A_NCIB3T_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4F_B4F_EE0E0B38_E0E0E0EE0E0B1E_:
  512|   103k|  move |input: I| {
  513|   103k|    let i = input.clone();
  514|   103k|    match parser.parse(i) {
  515|  2.70k|      Ok((i, _)) => {
  516|  2.70k|        let index = input.offset(&i);
  517|  2.70k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   100k|      Err(e) => Err(e),
  520|       |    }
  521|   103k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1z_NCINvNtNtB6_9character8complete4charBE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCIB29_BE_BG_B1z_TNCIB2_BE_NtBI_8SelectorBG_B1z_NvB2G_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBG_E0EE0E0E0EE0NcNtB1m_5Child0E0BI_:
   78|  33.6k|  move |input: I| {
   79|  33.6k|    let (input, o1) = parser.parse(input)?;
   80|  33.1k|    Ok((input, f(o1)))
   81|  33.6k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1K_3intBH_E0EBL_:
  239|  13.5k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  13.5k|where
  241|  13.5k|  F: Parser<I, O, E>,
  242|  13.5k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  13.5k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1s_4Name0EBI_:
   73|   124k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   124k|where
   75|   124k|  F: Parser<I, O1, E>,
   76|   124k|  G: FnMut(O1) -> O2,
   77|   124k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   124k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1n_E0EBI_:
  453|   310k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   310k|  val: O1,
  455|   310k|  mut parser: F,
  456|   310k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   310k|where
  458|   310k|  F: Parser<I, O2, E>,
  459|   310k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   310k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBI_INtNtCslATUeuPuGvJ_4core6option6OptionBI_EBO_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2B_8precededBI_cBI_B1y_NCINvB39_4charBI_B1y_E0B36_E0E0NCIB3R_BI_BI_B1y_NCIB4d_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4d_BI_IBP_cEBI_B1y_NCIB3R_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4D_B4D_EE0E0B36_E0E0E0EE0EB1C_:
  506|   103k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   103k|  mut parser: F,
  508|   103k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   103k|where
  510|   103k|  F: Parser<I, O, E>,
  511|   103k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   103k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2X_6digit1BI_BN_EE0B3A_EE0EBR_:
  506|   158k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   158k|  mut parser: F,
  508|   158k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   158k|where
  510|   158k|  F: Parser<I, O, E>,
  511|   158k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   158k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1I_BC_INtNtCslATUeuPuGvJ_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4I_EE0E0INvB4N_6digit1BC_BH_EE0E0EBL_:
  239|   103k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   103k|where
  241|   103k|  F: Parser<I, O, E>,
  242|   103k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   103k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|   126k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   126k|where
  241|   126k|  F: Parser<I, O, E>,
  242|   126k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   126k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser6numberEBJ_:
  663|   103k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   103k|where
  665|   103k|  O1: Into<O2>,
  666|   103k|  E1: Into<E2>,
  667|   103k|  E1: ParseError<I>,
  668|   103k|  E2: ParseError<I>,
  669|   103k|  F: Parser<I, O1, E1>,
  670|   103k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   103k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3A_EE0EBR_:
  506|   103k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   103k|  mut parser: F,
  508|   103k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   103k|where
  510|   103k|  F: Parser<I, O, E>,
  511|   103k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   103k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBH_10ComparableNtNtBH_5error18InternalParseErrorB1A_NvNtBH_6parser7literalEBH_:
  663|  25.0k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  25.0k|where
  665|  25.0k|  O1: Into<O2>,
  666|  25.0k|  E1: Into<E2>,
  667|  25.0k|  E1: ParseError<I>,
  668|  25.0k|  E2: ParseError<I>,
  669|  25.0k|  F: Parser<I, O1, E1>,
  670|  25.0k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  25.0k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1M_3intBJ_E0E0BN_:
  243|  13.4k|  move |input: I| {
  244|  13.4k|    let i = input.clone();
  245|  13.4k|    match f.parse(input) {
  246|  12.0k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.39k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  13.4k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1u_4Name0E0BK_:
   78|   124k|  move |input: I| {
   79|   124k|    let (input, o1) = parser.parse(input)?;
   80|  34.9k|    Ok((input, f(o1)))
   81|   124k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1z_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1z_NvB4o_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4o_21member_name_shorthandNCINvB4o_14failed_segmentBG_E0EE0E0E0NcNtB1m_10Descendant0E0BI_:
   78|  79.7k|  move |input: I| {
   79|  79.7k|    let (input, o1) = parser.parse(input)?;
   80|  39.2k|    Ok((input, f(o1)))
   81|  79.7k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B26_EE0EBJ_:
  239|   103k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   103k|where
  241|   103k|  F: Parser<I, O, E>,
  242|   103k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   103k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1o_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  89.8k|  move |input: I| {
   79|  89.8k|    let (input, o1) = parser.parse(input)?;
   80|  13.8k|    Ok((input, f(o1)))
   81|  89.8k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvB2r_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2r_21member_name_shorthandNCINvB2r_14failed_segmentBE_E0EE0EBG_:
  631|  79.7k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  79.7k|where
  633|  79.7k|  F: Parser<I, O, E>,
  634|  79.7k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  79.7k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|   126k|  move |input: I| {
  244|   126k|    let i = input.clone();
  245|   126k|    match f.parse(input) {
  246|  35.6k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  91.1k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|   126k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1C_NCINvNtB4_8sequence8precededBD_cBF_B1C_NCINvNtNtB4_9character8complete4charBD_B1C_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3E_15filter_selector0B1C_E0E0EBH_:
  663|  47.0k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  47.0k|where
  665|  47.0k|  O1: Into<O2>,
  666|  47.0k|  E1: Into<E2>,
  667|  47.0k|  E1: ParseError<I>,
  668|  47.0k|  E2: ParseError<I>,
  669|  47.0k|  F: Parser<I, O1, E1>,
  670|  47.0k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  47.0k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete6one_ofBD_BD_uE0ECsmyidsRPtaf_15rsonpath_syntax:
  304|   151k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|   151k|where
  306|   151k|  F: Parser<I, O, E>,
  307|   151k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|   151k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1j_3oneEBG_:
   73|   113k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   113k|where
   75|   113k|  F: Parser<I, O1, E>,
   76|   113k|  G: FnMut(O1) -> O2,
   77|   113k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   113k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1G_E0E0BM_:
  460|   107k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2i_6number0E0BK_:
   78|   103k|  move |input: I| {
   79|   103k|    let (input, o1) = parser.parse(input)?;
   80|  2.70k|    Ok((input, f(o1)))
   81|   103k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete6one_ofBF_BF_uE0E0CsmyidsRPtaf_15rsonpath_syntax:
  308|   151k|  move |input: I| {
  309|   151k|    let i = input.clone();
  310|   151k|    match f.parse(input) {
  311|  71.3k|      Ok((_, o)) => Ok((i, o)),
  312|  80.5k|      Err(e) => Err(e),
  313|       |    }
  314|   151k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2g_6number0EBI_:
   73|   103k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   103k|where
   75|   103k|  F: Parser<I, O1, E>,
   76|   103k|  G: FnMut(O1) -> O2,
   77|   103k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   103k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBK_5error18InternalParseErrorNCINvBI_17ignore_whitespaceBE_NCINvNtB4_6branch3altBC_BE_B1J_TNCINvB2_5valueBC_BE_BC_B1J_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1J_E0E0B3g_EE0B1J_E0EBK_:
  239|   121k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   121k|where
  241|   121k|  F: Parser<I, O, E>,
  242|   121k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   121k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBE_BJ_NCINvNtNtB6_9character8complete4charBE_BJ_E0INvB2o_6digit1BE_BJ_EE0E0BN_:
  243|  2.70k|  move |input: I| {
  244|  2.70k|    let i = input.clone();
  245|  2.70k|    match f.parse(input) {
  246|    915|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.78k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  2.70k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBG_5error18InternalParseErrorNCNvNvNtBG_6parser12logical_expr12parse_single0EBG_:
  631|  48.2k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  48.2k|where
  633|  48.2k|  F: Parser<I, O, E>,
  634|  48.2k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  48.2k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1r_E0E00BM_:
  460|  5.27k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBE_NtNtBM_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1O_E0EBM_:
  453|   243k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   243k|  val: O1,
  455|   243k|  mut parser: F,
  456|   243k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   243k|where
  458|   243k|  F: Parser<I, O2, E>,
  459|   243k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   243k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBO_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1I_E0E00BO_:
  460|  87.7k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2n_BE_NvB2p_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  6.75k|  move |input: I| {
  244|  6.75k|    let i = input.clone();
  245|  6.75k|    match f.parse(input) {
  246|  6.73k|      Ok((i, o)) => Ok((i, Some(o))),
  247|     23|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  6.75k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser6numberE0BL_:
  672|   103k|  move |input: I| match parser.parse(input) {
  673|  2.70k|    Ok((i, o)) => Ok((i, o.into())),
  674|   100k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|   103k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBJ_10ComparableNtNtBJ_5error18InternalParseErrorB1C_NvNtBJ_6parser7literalE0BJ_:
  672|  25.0k|  move |input: I| match parser.parse(input) {
  673|  8.37k|    Ok((i, o)) => Ok((i, o.into())),
  674|  16.6k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  25.0k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBG_NtNtBO_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1Q_E0E0BO_:
  460|   234k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB2Z_21member_name_shorthandNCINvB2Z_14failed_segmentBE_E0EE0EBG_:
  631|  33.6k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  33.6k|where
  633|  33.6k|  F: Parser<I, O, E>,
  634|  33.6k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  33.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBM_5error18InternalParseErrorNCINvBK_17ignore_whitespaceBG_NCINvNtB6_6branch3altBE_BG_B1L_TNCINvB4_5valueBE_BG_BE_B1L_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1L_E0E0B3i_EE0B1L_E0E0BM_:
  243|   121k|  move |input: I| {
  244|   121k|    let i = input.clone();
  245|   121k|    match f.parse(input) {
  246|  31.7k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  90.1k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|   121k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1E_E0EBK_:
  453|   175k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   175k|  val: O1,
  455|   175k|  mut parser: F,
  456|   175k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   175k|where
  458|   175k|  F: Parser<I, O2, E>,
  459|   175k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   175k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1t_E0EBI_:
  453|   285k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   285k|  val: O1,
  455|   285k|  mut parser: F,
  456|   285k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   285k|where
  458|   285k|  F: Parser<I, O2, E>,
  459|   285k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   285k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser14string_literalEBJ_:
  663|   103k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|   103k|where
  665|   103k|  O1: Into<O2>,
  666|   103k|  E1: Into<E2>,
  667|   103k|  E1: ParseError<I>,
  668|   103k|  E2: ParseError<I>,
  669|   103k|  F: Parser<I, O1, E1>,
  670|   103k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|   103k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBI_NtNtBQ_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1S_E0E00BQ_:
  460|  31.7k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  75.9k|  move |input: I| {
  244|  75.9k|    let i = input.clone();
  245|  75.9k|    match f.parse(input) {
  246|  28.6k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  47.3k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  75.9k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1p_E0E0BK_:
  460|   276k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2m_6digit1BC_BH_EE0EBL_:
  239|   103k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   103k|where
  241|   103k|  F: Parser<I, O, E>,
  242|   103k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   103k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1v_E0E0BK_:
  460|   269k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3C_EE0E0BT_:
  512|   103k|  move |input: I| {
  513|   103k|    let i = input.clone();
  514|   103k|    match parser.parse(i) {
  515|  2.70k|      Ok((i, _)) => {
  516|  2.70k|        let index = input.offset(&i);
  517|  2.70k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   100k|      Err(e) => Err(e),
  520|       |    }
  521|   103k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBI_5error18InternalParseErrorNCNvNvNtBI_6parser12logical_expr12parse_single0E0BI_:
  635|  48.2k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  48.2k|    rest => rest,
  638|  48.2k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1m_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  89.8k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  89.8k|where
   75|  89.8k|  F: Parser<I, O1, E>,
   76|  89.8k|  G: FnMut(O1) -> O2,
   77|  89.8k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  89.8k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  75.9k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  75.9k|where
  241|  75.9k|  F: Parser<I, O, E>,
  242|  75.9k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  75.9k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBK_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0E0BK_:
  460|   110k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BE_BJ_NCINvNtNtB6_5bytes8complete11tag_no_caseBE_BE_BJ_E0NCIB1K_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BJ_NCIB2_BE_cBJ_NCINvNtB6_6branch3altBE_cBJ_TNCINvNtNtB6_9character8complete4charBE_BJ_E0B4K_EE0E0INvB4P_6digit1BE_BJ_EE0E0E0BN_:
  243|  2.70k|  move |input: I| {
  244|  2.70k|    let i = input.clone();
  245|  2.70k|    match f.parse(input) {
  246|      0|      Ok((i, o)) => Ok((i, Some(o))),
  247|  2.70k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  2.70k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBI_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0EBI_:
  453|   142k|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|   142k|  val: O1,
  455|   142k|  mut parser: F,
  456|   142k|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|   142k|where
  458|   142k|  F: Parser<I, O2, E>,
  459|   142k|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|   142k|}

_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|   889k|  fn from_char(input: I, _: char) -> Self {
   27|   889k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   889k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsmyidsRPtaf_15rsonpath_syntax:
   77|   603k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   603k|    other
   79|   603k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
   73|  2.00M|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  2.00M|    Error { input, code: kind }
   75|  2.00M|  }
_RNvYINtNtCs6HefjSGhhBw_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|  72.4k|  fn from_char(input: I, _: char) -> Self {
   27|  72.4k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  72.4k|  }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE2orB6_:
   32|  1.31M|  fn or(self, other: Self) -> Self {
   33|  1.31M|    other
   34|  1.31M|  }
_RNvXs7_NtCs6HefjSGhhBw_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
  122|   159k|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}
_RNvYuINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|  78.5k|  fn from_char(input: I, _: char) -> Self {
   27|  78.5k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  78.5k|  }

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  75.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.9k|    self(i)
  326|  75.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  46.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  46.1k|    self(i)
  326|  46.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete11tag_no_caseReB1c_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB1c_B1c_B1i_E5parseB1m_:
  324|  2.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.70k|    self(i)
  326|  2.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3intINtB5_6ParserReB1u_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  89.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  89.4k|    self(i)
  326|  89.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  46.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  46.1k|    self(i)
  326|  46.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  89.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  89.8k|    self(i)
  326|  89.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  3.50k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.50k|    self(i)
  326|  3.50k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtB11_5error18InternalParseErrorTNCINvNtB7_10combinator5valueBT_BV_BT_B20_NCINvNtNtB7_5bytes8complete3tagBT_BT_B20_E0E0B2z_EE0INtB5_6ParserBT_BV_B20_E5parseB11_:
  324|   121k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   121k|    self(i)
  326|   121k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  69.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  69.1k|    self(i)
  326|  69.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  71.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  71.3k|    self(i)
  326|  71.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  30.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  30.1k|    self(i)
  326|  30.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtB14_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0E0INtB5_6ParserB10_B12_B1N_E5parseB14_:
  324|   110k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   110k|    self(i)
  326|   110k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  47.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.0k|    self(i)
  326|  47.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  47.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.0k|    self(i)
  326|  47.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0INtB5_6ParserReNtBG_11LogicalExprNtNtBG_5error18InternalParseErrorE5parseBG_:
  324|  48.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  48.2k|    self(i)
  326|  48.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB13_10ComparableNtNtB13_5error18InternalParseErrorB1X_NvNtB13_6parser7literalE0INtB5_6ParserBZ_B1F_B1X_E5parseB13_:
  324|  25.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.0k|    self(i)
  326|  25.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2E_6digit1BT_BY_EE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   158k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   158k|    self(i)
  326|   158k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1R_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1R_E5parseB17_:
  324|   416k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   416k|    self(i)
  326|   416k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B1Z_E6finishB1c_:
   36|  79.7k|  fn finish(self) -> Result<(I, O), E> {
   37|  7.38k|    match self {
   38|  72.4k|      Ok(res) => Ok(res),
   39|  7.38k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  79.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1B_NCINvNtNtB7_9character8complete4charBT_B1B_E0NCINvNtB7_10combinator3cutBT_BV_B1B_NCIBB_BT_BV_B1B_TNCINvB46_3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  33.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  33.6k|    self(i)
  326|  33.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1M_E0NCINvNtB7_10combinator3cutB10_B16_B1M_NCINvNtB7_6branch3altB10_B16_B1M_TNCNvNtB18_6parser18descendant_segment0NCINvB38_3mapB10_NtB18_8SelectorB16_B1M_NvB4h_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4h_21member_name_shorthandNCINvB4h_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1M_E5parseB18_:
  324|  79.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  79.7k|    self(i)
  326|  79.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   117k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   117k|    self(i)
  326|   117k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB26_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  6.73k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.73k|    self(i)
  326|  6.73k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsmyidsRPtaf_15rsonpath_syntax:
   36|  2.96k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  2.96k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  2.96k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  75.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.9k|    self(i)
  326|  75.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   225k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   225k|    self(i)
  326|   225k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|   126k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   126k|    self(i)
  326|   126k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1z_B1z_B1K_E5parseBF_:
  324|  13.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.4k|    self(i)
  326|  13.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCslATUeuPuGvJ_4core6option6OptionBX_EB13_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2Q_4charBX_B1O_E0B2N_E0E0NCIB3y_BX_BX_B1O_NCIB48_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB48_BX_IB14_cEBX_B1O_NCIB3y_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4x_B4x_EE0E0B2N_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_cBY_B13_NCINvNtNtB7_9character8complete4charBY_B13_E0INvB2J_6digit1BY_B13_EE0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  2.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.70k|    self(i)
  326|  2.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|  1.15M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.15M|    self(i)
  326|  1.15M|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|   124k|  fn finish(self) -> Result<(I, O), E> {
   37|  7.38k|    match self {
   38|   117k|      Ok(res) => Ok(res),
   39|  7.38k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|   124k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_BY_BY_B13_NCINvNtNtB7_5bytes8complete11tag_no_caseBY_BY_B13_E0NCIB24_BY_INtNtCslATUeuPuGvJ_4core6option6OptioncEBY_B13_NCIBB_BY_cB13_NCINvNtB7_6branch3altBY_cB13_TNCINvNtNtB7_9character8complete4charBY_B13_E0B59_EE0E0INvB5e_6digit1BY_B13_EE0E0E0INtB5_6ParserBY_IB3H_BY_EB13_E5parseB17_:
  324|  2.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.70k|    self(i)
  326|  2.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2b_E5parseBF_:
  324|  89.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  89.8k|    self(i)
  326|  89.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   949k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   949k|    self(i)
  326|   949k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1Q_E0E0INtB5_6ParserB10_B12_B1Q_E5parseB14_:
  324|   269k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   269k|    self(i)
  326|   269k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_B10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_5bytes8complete11tag_no_caseB10_B10_B1a_E0NCIBB_B10_INtNtCslATUeuPuGvJ_4core6option6OptioncEB10_B1a_NCINvNtB7_10combinator3optB10_cB1a_NCINvNtB7_6branch3altB10_cB1a_TNCINvNtNtB7_9character8complete4charB10_B1a_E0B50_EE0E0INvB55_6digit1B10_B1a_EE0E0INtB5_6ParserB10_B10_B1a_E5parseB1e_:
  324|  2.70k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.70k|    self(i)
  326|  2.70k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  69.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  69.1k|    self(i)
  326|  69.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  75.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.9k|    self(i)
  326|  75.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B20_E0E0INtB5_6ParserB10_B12_B20_E5parseB16_:
  324|   107k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   107k|    self(i)
  326|   107k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B27_E5parseBF_:
  324|   124k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   124k|    self(i)
  326|   124k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvBD_12logical_expr9BooleanOpNCINvNtB7_6branch3altReB1z_NtNtBF_5error18InternalParseErrorTNCINvNtB7_10combinator5valueB2p_B1z_B2p_B2v_NCINvNtNtB7_5bytes8complete3tagB2p_B2p_B2v_E0E0B33_EE0B2v_E0INtB5_6ParserB2p_B1z_B2v_E5parseBF_:
  324|   121k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   121k|    self(i)
  326|   121k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1K_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete6one_ofReB1a_uE0INtB5_6ParserB1a_cuE5parseCsmyidsRPtaf_15rsonpath_syntax:
  324|   151k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   151k|    self(i)
  326|   151k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  33.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  33.6k|    self(i)
  326|  33.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1M_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB39_15filter_selector0B1M_E0E0INtB5_6ParserB10_B13_B1M_E5parseB15_:
  324|  47.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.0k|    self(i)
  326|  47.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  9.41k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.41k|    self(i)
  326|  9.41k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2b_cB1z_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2b_B2P_E0NCINvNtB7_10combinator3optB2b_B2b_B2P_NCIBB_B2b_NvBD_3intB2P_E0E0E0B2P_E0INtB5_6ParserB2b_B1z_B2P_E5parseBF_:
  324|  6.75k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.75k|    self(i)
  326|  6.75k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  22.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.3k|    self(i)
  326|  22.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B24_E5parseBF_:
  324|  47.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.0k|    self(i)
  326|  47.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpB10_NtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B2b_E0E0INtB5_6ParserB10_B12_B2b_E5parseB18_:
  324|   234k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   234k|    self(i)
  326|   234k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   124k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   124k|    self(i)
  326|   124k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2g_E5parseBF_:
  324|  47.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.0k|    self(i)
  326|  47.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literalINtB5_6ParserReNtBC_7LiteralNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  25.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.0k|    self(i)
  326|  25.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB49_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  6.75k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.75k|    self(i)
  326|  6.75k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|   100k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   100k|    self(i)
  326|   100k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1K_E0E0INtB5_6ParserB10_B12_B1K_E5parseB14_:
  324|   276k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   276k|    self(i)
  326|   276k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0INtB5_6ParserReNtBE_10ComparableNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  16.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  16.6k|    self(i)
  326|  16.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   103k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   103k|    self(i)
  326|   103k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2a_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   161k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   161k|    self(i)
  326|   161k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|   263k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   263k|    self(i)
  326|   263k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2c_E0INtB5_6ParserB2a_cB2c_E5parseBF_:
  324|  75.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.9k|    self(i)
  326|  75.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  8.45k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.45k|    self(i)
  326|  8.45k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1G_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1G_NvB2P_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2P_21member_name_shorthandNCINvB2P_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1G_E5parseB12_:
  324|  46.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  46.1k|    self(i)
  326|  46.1k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  42.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  42.8k|    self(i)
  326|  42.8k|  }

_RNCNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB34_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  6.75k|    second.parse(input).map(|(i, _)| (i, o1))
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3L_3intB1p_E0E0E0B1t_:
   71|  6.75k|  move |input: I| {
   72|  6.75k|    let (input, _) = first.parse(input)?;
   73|  6.73k|    second.parse(input)
   74|  6.75k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_BE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4s_EE0E0INvB4x_6digit1BE_BM_EE0EBQ_:
   63|   103k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   103k|  mut first: F,
   65|   103k|  mut second: G,
   66|   103k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   103k|where
   68|   103k|  F: Parser<I, O1, E>,
   69|   103k|  G: Parser<I, O2, E>,
   70|   103k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   103k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1q_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2L_15filter_selector0B1q_E0EBJ_:
   63|  47.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  47.0k|  mut first: F,
   65|  47.0k|  mut second: G,
   66|  47.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  47.0k|where
   68|  47.0k|  F: Parser<I, O1, E>,
   69|  47.0k|  G: Parser<I, O2, E>,
   70|  47.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  47.0k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|   103k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   103k|  mut first: F,
   65|   103k|  mut second: G,
   66|   103k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   103k|where
   68|   103k|  F: Parser<I, O1, E>,
   69|   103k|  G: Parser<I, O2, E>,
   70|   103k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   103k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_BG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_5bytes8complete11tag_no_caseBG_BG_BO_E0NCIB2_BG_INtNtCslATUeuPuGvJ_4core6option6OptioncEBG_BO_NCINvNtB6_10combinator3optBG_cBO_NCINvNtB6_6branch3altBG_cBO_TNCINvNtNtB6_9character8complete4charBG_BO_E0B4u_EE0E0INvB4z_6digit1BG_BO_EE0E0BS_:
   71|  2.70k|  move |input: I| {
   72|  2.70k|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|  2.70k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1s_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2N_15filter_selector0B1s_E0E0BL_:
   71|  47.0k|  move |input: I| {
   72|  47.0k|    let (input, _) = first.parse(input)?;
   73|  47.0k|    second.parse(input)
   74|  47.0k|  }
_RNvXs1_NtCs6HefjSGhhBw_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2d_B19_B19_B1b_NCIB2P_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2P_B19_INtNtCslATUeuPuGvJ_4core6option6OptioncEB19_B1b_NCIB2d_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3g_B3g_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5u_B19_EB7I_EB1b_E5parseB1f_:
  226|   103k|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|   103k|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|   103k|      }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3cutBE_BH_B1n_NCINvNtB4_6branch3altBE_BH_B1n_TNCINvB2I_3mapBE_NtBJ_8SelectorBH_B1n_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBH_E0EE0E0EBJ_:
   63|  33.6k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  33.6k|  mut first: F,
   65|  33.6k|  mut second: G,
   66|  33.6k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  33.6k|where
   68|  33.6k|  F: Parser<I, O1, E>,
   69|  33.6k|  G: Parser<I, O2, E>,
   70|  33.6k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  33.6k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1r_E0NCINvNtB6_10combinator3cutBG_BL_B1r_NCINvNtB6_6branch3altBG_BL_B1r_TNCNvNtBN_6parser18descendant_segment0NCINvB2K_3mapBG_NtBN_8SelectorBL_B1r_NvB3P_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3P_21member_name_shorthandNCINvB3P_14failed_segmentBL_E0EE0E0E0BN_:
   71|  79.7k|  move |input: I| {
   72|  79.7k|    let (input, _) = first.parse(input)?;
   73|  46.1k|    second.parse(input)
   74|  79.7k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBD_INtNtCslATUeuPuGvJ_4core6option6OptionBD_EBJ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2v_4charBD_B1t_E0B2s_E0E0NCIB3d_BD_BD_B1t_NCIB3N_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3N_BD_IBK_cEBD_B1t_NCIB3d_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4c_B4c_EE0E0B2s_E0E0E0EE0B1x_:
  278|   103k|  move |i: I| l.parse(i)
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3J_3intB1n_E0E0EB1r_:
   63|  6.75k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  6.75k|  mut first: F,
   65|  6.75k|  mut second: G,
   66|  6.75k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  6.75k|where
   68|  6.75k|  F: Parser<I, O1, E>,
   69|  6.75k|  G: Parser<I, O2, E>,
   70|  6.75k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  6.75k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1p_E0NCINvNtB4_10combinator3cutBE_BJ_B1p_NCINvNtB4_6branch3altBE_BJ_B1p_TNCNvNtBL_6parser18descendant_segment0NCINvB2I_3mapBE_NtBL_8SelectorBJ_B1p_NvB3N_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3N_21member_name_shorthandNCINvB3N_14failed_segmentBJ_E0EE0E0EBL_:
   63|  79.7k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  79.7k|  mut first: F,
   65|  79.7k|  mut second: G,
   66|  79.7k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  79.7k|where
   68|  79.7k|  F: Parser<I, O1, E>,
   69|  79.7k|  G: Parser<I, O2, E>,
   70|  79.7k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  79.7k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1P_6digit1BG_BM_EE0BQ_:
   71|   161k|  move |input: I| {
   72|   161k|    let (input, _) = first.parse(input)?;
   73|  24.5k|    second.parse(input)
   74|   161k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1N_6digit1BE_BK_EEBO_:
   63|   262k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   262k|  mut first: F,
   65|   262k|  mut second: G,
   66|   262k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   262k|where
   68|   262k|  F: Parser<I, O1, E>,
   69|   262k|  G: Parser<I, O2, E>,
   70|   262k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   262k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBB_INtNtCslATUeuPuGvJ_4core6option6OptionBB_EBH_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2t_4charBB_B1r_E0B2q_E0E0NCIB3b_BB_BB_B1r_NCIB3L_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3L_BB_IBI_cEBB_B1r_NCIB3b_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4a_B4a_EE0E0B2q_E0E0E0EEB1v_:
  275|   103k|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|   103k|  mut l: List,
  277|   103k|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|   103k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|   103k|  move |input: I| {
   72|   103k|    let (input, _) = first.parse(input)?;
   73|  1.83k|    second.parse(input)
   74|   103k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1x_E0NCNvNtBN_6parser6string0E0BN_:
   71|   416k|  move |input: I| {
   72|   416k|    let (input, _) = first.parse(input)?;
   73|  42.8k|    second.parse(input)
   74|   416k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1v_E0NCNvNtBL_6parser6string0EBL_:
   63|   451k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   451k|  mut first: F,
   65|   451k|  mut second: G,
   66|   451k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   451k|where
   68|   451k|  F: Parser<I, O1, E>,
   69|   451k|  G: Parser<I, O2, E>,
   70|   451k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   451k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB32_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  75.9k|  move |input: I| {
  106|  75.9k|    let (input, o1) = first.parse(input)?;
  107|  75.9k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  75.9k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3n_EE0E0INvB3s_6digit1BE_B1n_EEB1r_:
   63|   103k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   103k|  mut first: F,
   65|   103k|  mut second: G,
   66|   103k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   103k|where
   68|   103k|  F: Parser<I, O1, E>,
   69|   103k|  G: Parser<I, O2, E>,
   70|   103k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   103k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB30_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  75.9k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  75.9k|  mut first: F,
   99|  75.9k|  mut second: G,
  100|  75.9k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  75.9k|where
  102|  75.9k|  F: Parser<I, O1, E>,
  103|  75.9k|  G: Parser<I, O2, E>,
  104|  75.9k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  75.9k|}

_RNCNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB7_7CompareBy_E15compare_no_case0CsmyidsRPtaf_15rsonpath_syntax:
  849|  2.70k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  272|   543k|  fn as_char(self) -> char {
  273|   543k|    *self
  274|   543k|  }
_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0CsmyidsRPtaf_15rsonpath_syntax:
  740|  1.06M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar12is_dec_digitCsmyidsRPtaf_15rsonpath_syntax:
  253|  1.52M|  fn is_dec_digit(self) -> bool {
  254|  1.52M|    self.is_ascii_digit()
  255|  1.52M|  }
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCsmyidsRPtaf_15rsonpath_syntax:
   33|   952k|  fn input_len(&self) -> usize {
   34|   952k|    self.len()
   35|   952k|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   949k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   949k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   949k|
  742|   949k|    match pos {
  743|   841k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|   108k|        if self.len() >= t.len() {
  746|   108k|          CompareResult::Ok
  747|       |        } else {
  748|      0|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   949k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  265|  71.3k|  fn len(self) -> usize {
  266|  71.3k|    self.len_utf8()
  267|  71.3k|  }
_RINvXsj_NtCs6HefjSGhhBw_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|   263k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|   263k|    &self,
  677|   263k|    predicate: P,
  678|   263k|    e: ErrorKind,
  679|   263k|  ) -> IResult<Self, Self, E>
  680|   263k|  where
  681|   263k|    P: Fn(Self::Item) -> bool,
  682|   263k|  {
  683|   263k|    match self.find(predicate) {
  684|   196k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  66.5k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|      0|        if self.is_empty() {
  689|      0|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|      0|            Ok((
  694|      0|              self.get_unchecked(self.len()..),
  695|      0|              self.get_unchecked(..self.len()),
  696|      0|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|   263k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   949k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   949k|    self.as_bytes().compare(t.as_bytes())
  841|   949k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  296|   543k|  fn len(self) -> usize {
  297|   543k|    self.len_utf8()
  298|   543k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  241|  1.65M|  fn as_char(self) -> char {
  242|  1.65M|    self
  243|  1.65M|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E15compare_no_case:
  845|  2.70k|  fn compare_no_case(&self, t: &'b str) -> CompareResult {
  846|  2.70k|    let pos = self
  847|  2.70k|      .chars()
  848|  2.70k|      .zip(t.chars())
  849|  2.70k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
  850|  2.70k|
  851|  2.70k|    match pos {
  852|  2.70k|      Some(_) => CompareResult::Error,
  853|       |      None => {
  854|      0|        if self.len() >= t.len() {
  855|      0|          CompareResult::Ok
  856|       |        } else {
  857|      0|          CompareResult::Incomplete
  858|       |        }
  859|       |      }
  860|       |    }
  861|  2.70k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCsmyidsRPtaf_15rsonpath_syntax:
  424|   108k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|   108k|    let (prefix, suffix) = self.split_at(count);
  426|   108k|    (suffix, prefix)
  427|   108k|  }
_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCsmyidsRPtaf_15rsonpath_syntax:
  386|  1.73M|  fn iter_elements(&self) -> Self::IterElem {
  387|  1.73M|    self.chars()
  388|  1.73M|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   949k|  fn as_bytes(&self) -> &[u8] {
   98|   949k|    (*self).as_bytes()
   99|   949k|  }
_RNvXs23_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  68.3k|    fn slice(&self, range: $ty) -> Self {
 1014|  68.3k|      &self[range]
 1015|  68.3k|    }
_RNvXs4_NtCs6HefjSGhhBw_3nom6traitsReNtB5_6Offset6offset:
   81|  68.3k|  fn offset(&self, second: &Self) -> usize {
   82|  68.3k|    let fst = self.as_ptr();
   83|  68.3k|    let snd = second.as_ptr();
   84|  68.3k|
   85|  68.3k|    snd as usize - fst as usize
   86|  68.3k|  }
_RNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|   151k|  fn find_token(&self, token: char) -> bool {
  913|   151k|    self.chars().any(|i| i == token)
  914|   151k|  }
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   615k|    fn slice(&self, range: $ty) -> Self {
 1014|   615k|      &self[range]
 1015|   615k|    }
_RNCNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|   262k|    self.chars().any(|i| i == token)

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs5sf5hjJHSjs_21query_fuzz_round_trip:
   49|  4.80k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  4.80k|        // An `Acquire` load is enough because that makes all the initialization
   51|  4.80k|        // operations visible to us, and, this being a fast path, weaker
   52|  4.80k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  4.80k|        // `SeqCst` operations on the slow path.
   54|  4.80k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  4.80k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs5sf5hjJHSjs_21query_fuzz_round_trip:
  963|  4.80k|        pub fn get(&self) -> Option<&T> {
  964|  4.80k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  4.80k|                None
  969|       |            }
  970|  4.80k|        }


_RNvMNtCsmyidsRPtaf_15rsonpath_syntax5errorNtB2_10ParseError25is_nesting_limit_exceededCs5sf5hjJHSjs_21query_fuzz_round_trip:
   35|    213|    pub fn is_nesting_limit_exceeded(&self) -> bool {
   36|    213|        matches!(self.inner, InnerParseError::RecursionLimit(_))
   37|    213|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  462|  1.93M|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|  1.93M|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|  1.93M|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder24recursion_limit_exceededB6_:
   70|    213|    pub(crate) fn recursion_limit_exceeded(str: String, recursion_limit: usize) -> ParseError {
   71|    213|        ParseError {
   72|    213|            input: str,
   73|    213|            inner: InnerParseError::RecursionLimit(recursion_limit),
   74|    213|        }
   75|    213|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE6append:
  466|   603k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  467|   603k|        match other {
  468|   603k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  469|      0|            _ => other,
  470|       |        }
  471|   603k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3newB6_:
   47|  2.96k|    pub(crate) fn new() -> Self {
   48|  2.96k|        Self { syntax_errors: vec![] }
   49|  2.96k|    }
_RNvMs1_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  192|  57.7k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  193|  57.7k|        Self { kind, rev_idx, len }
  194|  57.7k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_emptyB6_:
   59|  2.75k|    pub(crate) fn is_empty(&self) -> bool {
   60|  2.75k|        self.syntax_errors.is_empty()
   61|  2.75k|    }

_RNvXs2m_CsmyidsRPtaf_15rsonpath_syntaxNtB6_21SingularJsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  786|  34.0k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1T_CsmyidsRPtaf_15rsonpath_syntaxNtB6_8TestExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  676|  45.8k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1b_CsmyidsRPtaf_15rsonpath_syntaxNtB6_8SelectorNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  403|  96.1k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs0_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  283|  2.96k|    fn default() -> Self {
  284|  2.96k|        Self {
  285|  2.96k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  286|  2.96k|            relaxed_whitespace: false,
  287|  2.96k|        }
  288|  2.96k|    }
_RNvXsA_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1136|  61.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1137|  61.1k|        write!(f, "[{}", self.first())?;
 1138|  61.1k|        for s in self.inner.iter().skip(1) {
 1139|  46.2k|            write!(f, ", {s}")?;
 1140|       |        }
 1141|  61.1k|        write!(f, "]")?;
 1142|  61.1k|        Ok(())
 1143|  61.1k|    }
_RNvXs14_CsmyidsRPtaf_15rsonpath_syntaxNtB6_9SelectorsNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  396|  52.2k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsD_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1171|  6.78k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1172|  6.78k|        match self {
 1173|  3.77k|            Self::Forward(idx) => write!(f, "{idx}"),
 1174|  3.00k|            Self::Backward(idx) => write!(f, "-{idx}"),
 1175|       |        }
 1176|  6.78k|    }
_RNvXsG_CsmyidsRPtaf_15rsonpath_syntaxNtB5_14ComparisonExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1243|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1244|  25.5k|        write!(f, "{} {} {}", self.lhs, self.op, self.rhs)
 1245|  25.5k|    }
_RNvCsmyidsRPtaf_15rsonpath_syntax5parseCs5sf5hjJHSjs_21query_fuzz_round_trip:
  334|  2.96k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  335|  2.96k|    Parser::default().parse(str)
  336|  2.96k|}
_RNvXs1y_CsmyidsRPtaf_15rsonpath_syntaxNtB6_5SliceNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  535|  6.69k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvMsm_CsmyidsRPtaf_15rsonpath_syntaxNtB5_21SingularJsonPathQuery8segmentsCs5sf5hjJHSjs_21query_fuzz_round_trip:
  795|  35.0k|    pub fn segments(&self) -> impl Iterator<Item = &'_ SingularSegment> {
  796|  35.0k|        self.segments.iter()
  797|  35.0k|    }
_RNvXs1q_CsmyidsRPtaf_15rsonpath_syntaxNtB6_4StepNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  485|  13.5k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvMsr_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery8segments:
  865|  54.7k|    pub fn segments(&self) -> &[Segment] {
  866|  54.7k|        &self.segments
  867|  54.7k|    }
_RNvXs2f_CsmyidsRPtaf_15rsonpath_syntaxNtB6_10ComparableNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  760|  49.7k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsJ_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1294|  15.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1295|  15.9k|        match self {
 1296|  7.94k|            Self::String(s) => write!(f, "\"{}\"", str::escape(s.unquoted(), str::EscapeMode::DoubleQuoted)),
 1297|  2.71k|            Self::Number(n) => write!(f, "{n}"),
 1298|    783|            Self::Bool(true) => write!(f, "true"),
 1299|  1.22k|            Self::Bool(false) => write!(f, "false"),
 1300|  3.29k|            Self::Null => write!(f, "null"),
 1301|       |        }
 1302|  15.9k|    }
_RNvXsM_CsmyidsRPtaf_15rsonpath_syntaxNtB5_15SingularSegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1331|  20.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1332|  20.0k|        match self {
 1333|  8.10k|            Self::Name(n) => write!(f, "['{}']", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1334|  11.9k|            Self::Index(i) => write!(f, "[{i}]"),
 1335|       |        }
 1336|  20.0k|    }
_RNvXsz_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1126|  61.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1127|  61.1k|        match self {
 1128|  14.1k|            Self::Child(s) => write!(f, "{s}"),
 1129|  47.0k|            Self::Descendant(s) => write!(f, "..{s}"),
 1130|       |        }
 1131|  61.1k|    }
_RNvXsC_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1161|  35.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1162|  35.3k|        match self {
 1163|  21.6k|            Self::FromStart(idx) => write!(f, "{idx}"),
 1164|  13.6k|            Self::FromEnd(idx) => write!(f, "-{idx}"),
 1165|       |        }
 1166|  35.3k|    }
_RNvXsF_CsmyidsRPtaf_15rsonpath_syntaxNtB5_11LogicalExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1198|   150k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1199|   150k|        match self {
 1200|  22.8k|            Self::Or(lhs, rhs) => {
 1201|  22.8k|                if lhs.precedence() <= self.precedence() {
 1202|  10.3k|                    write!(f, "({lhs})")?;
 1203|       |                } else {
 1204|  12.5k|                    write!(f, "{lhs}")?;
 1205|       |                }
 1206|  22.8k|                write!(f, " || ")?;
 1207|  22.8k|                if rhs.precedence() < self.precedence() {
 1208|      0|                    write!(f, "({rhs})")?;
 1209|       |                } else {
 1210|  22.8k|                    write!(f, "{rhs}")?;
 1211|       |                }
 1212|  22.8k|                Ok(())
 1213|       |            }
 1214|  9.47k|            Self::And(lhs, rhs) => {
 1215|  9.47k|                if lhs.precedence() < self.precedence() {
 1216|  2.45k|                    write!(f, "({lhs})")?;
 1217|       |                } else {
 1218|  7.02k|                    write!(f, "{lhs}")?;
 1219|       |                }
 1220|  9.47k|                write!(f, " && ")?;
 1221|  9.47k|                if rhs.precedence() <= self.precedence() {
 1222|  1.89k|                    write!(f, "({rhs})")?;
 1223|       |                } else {
 1224|  7.58k|                    write!(f, "{rhs}")?;
 1225|       |                }
 1226|  9.47k|                Ok(())
 1227|       |            }
 1228|  37.6k|            Self::Not(expr) => {
 1229|  37.6k|                if expr.precedence() <= self.precedence() {
 1230|  35.3k|                    write!(f, "!({expr})")
 1231|       |                } else {
 1232|  2.30k|                    write!(f, "!{expr}")
 1233|       |                }
 1234|       |            }
 1235|  25.5k|            Self::Comparison(expr) => write!(f, "{expr}"),
 1236|  54.7k|            Self::Test(test) => write!(f, "{test}"),
 1237|       |        }
 1238|   150k|    }
_RNvXs1F_CsmyidsRPtaf_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  588|  15.7k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXsI_CsmyidsRPtaf_15rsonpath_syntaxNtB5_10ComparableNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1271|  51.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1272|  51.0k|        match self {
 1273|  15.9k|            Self::Literal(lit) => write!(f, "{lit}"),
 1274|  9.98k|            Self::RelativeSingularQuery(q) => {
 1275|  9.98k|                write!(f, "@")?;
 1276|  9.98k|                for s in q.segments() {
 1277|  6.07k|                    write!(f, "{s}")?;
 1278|       |                }
 1279|  9.98k|                Ok(())
 1280|       |            }
 1281|  25.1k|            Self::AbsoluteSingularQuery(q) => {
 1282|  25.1k|                write!(f, "$")?;
 1283|  25.1k|                for s in q.segments() {
 1284|  14.0k|                    write!(f, "{s}")?;
 1285|       |                }
 1286|  25.1k|                Ok(())
 1287|       |            }
 1288|       |        }
 1289|  51.0k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9size_hint0Cs5sf5hjJHSjs_21query_fuzz_round_trip:
  831|  4.80k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs27_CsmyidsRPtaf_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  742|  24.8k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsX_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7SegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  368|  52.2k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2A_CsmyidsRPtaf_15rsonpath_syntaxNtB6_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  830|  48.5k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs2t_CsmyidsRPtaf_15rsonpath_syntaxNtB6_15SingularSegmentNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  801|  19.2k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvXs1i_CsmyidsRPtaf_15rsonpath_syntaxNtB6_5IndexNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  451|  39.8k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvXsy_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQueryNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1115|  2.96k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1116|  2.96k|        write!(f, "$")?;
 1117|  11.4k|        for s in &self.segments {
 1118|  8.47k|            write!(f, "{s}")?;
 1119|       |        }
 1120|  2.96k|        Ok(())
 1121|  2.96k|    }
_RNvXsP_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCs5sf5hjJHSjs_21query_fuzz_round_trip:
  181|  2.96k|#[derive(Debug, Clone, Default)]
_RNvXs1M_CsmyidsRPtaf_15rsonpath_syntaxNtB6_11LogicalExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  645|   116k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstCs5sf5hjJHSjs_21query_fuzz_round_trip:
  955|  61.1k|    pub fn first(&self) -> &Selector {
  956|  61.1k|        &self.inner[0]
  957|  61.1k|    }
_RNvMsj_CsmyidsRPtaf_15rsonpath_syntaxNtB5_11LogicalExpr10precedenceCs5sf5hjJHSjs_21query_fuzz_round_trip:
  662|   204k|    fn precedence(&self) -> usize {
  663|   204k|        match self {
  664|  66.0k|            Self::Or(_, _) => 2,
  665|  28.0k|            Self::And(_, _) => 3,
  666|  21.7k|            Self::Comparison(_) => 4,
  667|  73.6k|            Self::Not(_) => 5,
  668|  15.2k|            Self::Test(_) => 10,
  669|       |        }
  670|   204k|    }
_RNvMs2_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6Parser5parseCs5sf5hjJHSjs_21query_fuzz_round_trip:
  358|  2.96k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  359|  2.96k|        crate::parser::parse_with_options(str, &self.options)
  360|  2.96k|    }
_RNvXsE_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1181|  6.80k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1182|  6.80k|        if self.start != Self::DEFAULT_START {
 1183|  6.52k|            write!(f, "{}", self.start)?;
 1184|    283|        }
 1185|  6.80k|        write!(f, ":")?;
 1186|  6.80k|        if let Some(end) = self.end {
 1187|  5.38k|            write!(f, "{end}")?;
 1188|  1.42k|        }
 1189|  6.80k|        if self.step != Self::DEFAULT_STEP {
 1190|  6.78k|            write!(f, ":{}", self.step)?;
 1191|     23|        }
 1192|  6.80k|        Ok(())
 1193|  6.80k|    }
_RNvXsH_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8TestExprNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1250|  54.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1251|  54.7k|        match self {
 1252|  10.7k|            Self::Relative(q) => {
 1253|  10.7k|                write!(f, "@")?;
 1254|  10.9k|                for s in q.segments() {
 1255|  10.9k|                    write!(f, "{s}")?;
 1256|       |                }
 1257|       |            }
 1258|  44.0k|            Self::Absolute(q) => {
 1259|  44.0k|                write!(f, "$")?;
 1260|  44.0k|                for s in q.segments() {
 1261|  41.7k|                    write!(f, "{s}")?;
 1262|       |                }
 1263|       |            }
 1264|       |        }
 1265|  54.7k|        Ok(())
 1266|  54.7k|    }
_RNvXsK_CsmyidsRPtaf_15rsonpath_syntaxNtB5_12ComparisonOpNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1307|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1308|  25.5k|        match self {
 1309|  3.94k|            Self::EqualTo => write!(f, "=="),
 1310|  1.90k|            Self::NotEqualTo => write!(f, "!="),
 1311|    635|            Self::LesserOrEqualTo => write!(f, "<="),
 1312|  5.12k|            Self::GreaterOrEqualTo => write!(f, ">="),
 1313|  9.88k|            Self::LessThan => write!(f, "<"),
 1314|  4.05k|            Self::GreaterThan => write!(f, ">"),
 1315|       |        }
 1316|  25.5k|    }
_RNvXsB_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8SelectorNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1148|   107k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1149|   107k|        match self {
 1150|  27.2k|            Self::Name(n) => write!(f, "'{}'", str::escape(n.unquoted(), str::EscapeMode::SingleQuoted)),
 1151|  13.9k|            Self::Wildcard => write!(f, "*"),
 1152|  11.4k|            Self::Index(idx) => write!(f, "{idx}"),
 1153|  6.80k|            Self::Slice(slice) => write!(f, "{slice}"),
 1154|  47.9k|            Self::Filter(filter) => write!(f, "?{filter}"),
 1155|       |        }
 1156|   107k|    }
_RNvXs20_CsmyidsRPtaf_15rsonpath_syntaxNtB6_14ComparisonExprNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  703|  24.8k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  404|    553|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsb_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  506|  9.50k|    fn from(value: num::JsonInt) -> Self {
  507|  9.50k|        if value.as_i64() >= 0 {
  508|  5.27k|            Self::Forward(value.abs())
  509|       |        } else {
  510|  4.23k|            Self::Backward(value.abs().try_into().expect("checked for zero already"))
  511|       |        }
  512|  9.50k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  743|    773|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__27RECURSIVE_COUNT_LogicalExpr7___getit0B7_:
  646|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  646|  1.84k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  646|   338k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  761|  81.3k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__30RECURSIVE_COUNT_ComparisonExpr7___getit0B7_:
  704|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsu_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8Selector11is_singularB5_:
 1039|  39.2k|    fn is_singular(&self) -> bool {
 1040|  39.2k|        matches!(self, Self::Name(_) | Self::Index(_))
 1041|  39.2k|    }
_RNvXs2a_CsmyidsRPtaf_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  742|  25.0k|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  369|    119|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  589|  1.11k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMsq_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery15try_to_singular:
  846|  34.2k|    fn try_to_singular(self) -> std::result::Result<SingularJsonPathQuery, Self> {
  847|  34.2k|        if self.segments.iter().all(Segment::is_singular) {
  848|  34.2k|            let mut singular_segments = Vec::with_capacity(self.segments.len());
  849|  53.8k|            for segment in self.segments {
  850|  19.6k|                singular_segments.push(segment.into_singular());
  851|  19.6k|            }
  852|  34.2k|            Ok(SingularJsonPathQuery {
  853|  34.2k|                segments: singular_segments,
  854|  34.2k|            })
  855|       |        } else {
  856|      0|            Err(self)
  857|       |        }
  858|  34.2k|    }
_RNvXs9_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num7JsonIntE4fromB5_:
  474|  54.9k|    fn from(value: N) -> Self {
  475|  54.9k|        let value = value.into();
  476|  54.9k|        if value.as_i64() >= 0 {
  477|  35.5k|            Self::FromStart(value.abs())
  478|       |        } else {
  479|  19.4k|            Self::FromEnd(value.abs().try_into().expect("checked for zero already"))
  480|       |        }
  481|  54.9k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB4_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  704|   122k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs1I_CsmyidsRPtaf_15rsonpath_syntaxNtB6_7LiteralNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  588|  5.27k|#[derive(Debug, PartialEq, Eq, Clone, Hash)]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntax1__23RECURSIVE_COUNT_Segment7___getit0B7_:
  369|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__24RECURSIVE_COUNT_TestExpr7___getit0B7_:
  677|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  761|    902|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  404|    553|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  802|  38.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  787|     64|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs7_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8SelectorINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_11LogicalExprE4fromB5_:
  445|  39.6k|    fn from(value: LogicalExpr) -> Self {
  446|  39.6k|        Self::Filter(value)
  447|  39.6k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  704|  40.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  536|     16|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  589|  23.2k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsh_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num10JsonNumberE4from:
  628|  2.70k|    fn from(value: num::JsonNumber) -> Self {
  629|  2.70k|        Self::Number(value)
  630|  2.70k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB6_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  761|    902|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  743|    773|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB4_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  404|   580k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  831|  99.2k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB4_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  677|   297k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs3_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  384|   113k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  385|   113k|        let first = u.arbitrary::<Selector>()?;
  386|  97.9k|        let mut rest = u.arbitrary::<Vec<Selector>>()?;
  387|  88.4k|        rest.push(first);
  388|  88.4k|
  389|  88.4k|        Ok(Self::many(rest))
  390|   113k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  787|  58.1k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  831|    369|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB4_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  589|  67.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__NtB4_10ComparableNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  761|   242k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs6_1__26RECURSIVE_COUNT_Comparable7___getit0B7_:
  761|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB6_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  787|     64|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  536|  9.50k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  369|    119|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB6_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  646|  3.68k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsa_CsmyidsRPtaf_15rsonpath_syntaxNtB5_4StepNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  498|  9.50k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  499|  9.50k|        let num = u.arbitrary::<num::JsonInt>()?;
  500|  9.50k|        Ok(Self::from(num))
  501|  9.50k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__37RECURSIVE_COUNT_SingularJsonPathQuery7___getit0B7_:
  787|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rest:
  831|  14.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  802|    126|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs_CsmyidsRPtaf_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  276|  2.75k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  277|  2.75k|        self.relaxed_whitespace
  278|  2.75k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__23RECURSIVE_COUNT_Literal7___getit0B7_:
  589|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  677|    144|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB4_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  536|  28.4k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__21RECURSIVE_COUNT_Slice7___getit0B7_:
  536|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__31RECURSIVE_COUNT_SingularSegment7___getit0B7_:
  802|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXse_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3str10JsonStringE4fromB5_:
  607|  7.86k|    fn from(value: S) -> Self {
  608|  7.86k|        Self::String(value.into())
  609|  7.86k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  677|  99.2k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB4_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  802|   115k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB6_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  743|  40.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsl_CsmyidsRPtaf_15rsonpath_syntaxNtB5_10ComparableINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_7LiteralE4from:
  773|  8.37k|    fn from(value: Literal) -> Self {
  774|  8.37k|        Self::Literal(value)
  775|  8.37k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs_1__24RECURSIVE_COUNT_Selector7___getit0B7_:
  404|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  704|     31|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  831|  4.80k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsd_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  578|  6.75k|    fn default() -> Self {
  579|  6.75k|        Self {
  580|  6.75k|            start: Index::FromStart(0.into()),
  581|  6.75k|            end: None,
  582|  6.75k|            step: Step::Forward(1.into()),
  583|  6.75k|        }
  584|  6.75k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs4_1__NtB6_14ComparisonExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  704|     31|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__28RECURSIVE_COUNT_ComparisonOp7___getit0B7_:
  743|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment13into_singular:
  915|  19.6k|    fn into_singular(self) -> SingularSegment {
  916|  19.6k|        assert!(self.is_singular());
  917|  19.6k|        match self {
  918|  19.6k|            Self::Child(mut s) => match s.inner.drain(..).next().expect("is_singular") {
  919|  7.98k|                Selector::Name(n) => SingularSegment::Name(n),
  920|  11.6k|                Selector::Index(i) => SingularSegment::Index(i),
  921|      0|                _ => unreachable!(),
  922|       |            },
  923|      0|            Self::Descendant(_) => unreachable!(),
  924|       |        }
  925|  19.6k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment11is_singular:
  908|  39.2k|    fn is_singular(&self) -> bool {
  909|  39.2k|        match self {
  910|  39.2k|            Self::Child(s) => s.len() == 1 && s.first().is_singular(),
  911|      0|            Self::Descendant(_) => false,
  912|       |        }
  913|  39.2k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs_1__NtB6_8SelectorNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  404|   193k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB6_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  831|    369|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs3_1__NtB6_8TestExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  677|    144|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__NtB4_13JsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  831|   296k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  947|   160k|    pub fn many(vec: Vec<Selector>) -> Self {
  948|   160k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  949|   160k|        Self { inner: vec }
  950|   160k|    }
_RNCNvNvNvCsmyidsRPtaf_15rsonpath_syntaxs9_1__29RECURSIVE_COUNT_JsonPathQuery7___getit0B7_:
  831|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXs8_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5IndexNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB5_:
  466|  54.9k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  467|  54.9k|        let num = u.arbitrary::<num::JsonInt>()?;
  468|  54.9k|        Ok(Self::from(num))
  469|  54.9k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs1_1__NtB6_7LiteralNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  589|  1.11k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB6_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B6_:
  369|   113k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstB5_:
  955|  39.2k|    pub fn first(&self) -> &Selector {
  956|  39.2k|        &self.inner[0]
  957|  39.2k|    }
_RNvXNvCsmyidsRPtaf_15rsonpath_syntax1__NtB4_7SegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  369|   340k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs8_1__NtB6_15SingularSegmentNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  802|    126|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs7_1__NtB4_21SingularJsonPathQueryNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  787|   174k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1108|  39.2k|    fn deref(&self) -> &Self::Target {
 1109|  39.2k|        &self.inner
 1110|  39.2k|    }
_RNCNvXNvCsmyidsRPtaf_15rsonpath_syntaxs0_1__NtB6_5SliceNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B6_:
  536|     16|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs2_1__NtB4_11LogicalExprNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  646|  1.01M|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXNvCsmyidsRPtaf_15rsonpath_syntaxs5_1__NtB4_12ComparisonOpNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  743|   120k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]

_RNvXsH_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1022|  1.30k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1023|  1.30k|        write!(f, "{}", self.0)
 1024|  1.30k|    }
_RNvXsV_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
   61|  1.51k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXs1g_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  112|  14.6k|#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvXsK_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1043|  1.41k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1044|  1.41k|        write!(f, "{}", self.0)
 1045|  1.41k|    }
_RNvXsJ_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1036|  16.6k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1037|  16.6k|        write!(f, "{}", self.0)
 1038|  16.6k|    }
_RNvXs2_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  194|  2.70k|    fn eq(&self, other: &Self) -> bool {
  195|  2.70k|        match (self.normalize(), other.normalize()) {
  196|  1.51k|            (Self::Int(l0), Self::Int(r0)) => l0 == r0,
  197|  1.18k|            (Self::Float(l0), Self::Float(r0)) => l0 == r0,
  198|      0|            _ => false,
  199|       |        }
  200|  2.70k|    }
_RNvXs16_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_8JsonUIntNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
   87|  33.3k|#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
_RNvMsb_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeCs5sf5hjJHSjs_21query_fuzz_round_trip:
  588|  5.40k|    pub fn normalize(&self) -> Self {
  589|  5.40k|        match *self {
  590|  2.80k|            Self::Int(x) => Self::Int(x),
  591|  2.59k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|    229|                Ok(int) => Self::Int(int),
  593|  2.36k|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  5.40k|    }
_RNvXsA_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromCs5sf5hjJHSjs_21query_fuzz_round_trip:
  853|  2.59k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  854|  2.59k|        if value.0.fract() != 0.0 {
  855|  1.83k|            return Err(JsonIntOverflowError::fractional(value.0));
  856|    761|        }
  857|    761|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  858|    761|        // We need to check that it is within bounds of JsonInt. This is correct
  859|    761|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  860|    761|        // so every value within is exactly representable as a f64.
  861|    761|        let int_value = value.0.trunc();
  862|    761|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  863|     40|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  864|    721|        }
  865|    721|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  866|    492|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  867|    229|        }
  868|    229|
  869|    229|        // This conversion is now guaranteed to be lossless.
  870|    229|        Ok(Self(int_value as i64))
  871|  2.59k|    }
_RNvXsI_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1029|  25.4k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1030|  25.4k|        write!(f, "{}", self.0)
 1031|  25.4k|    }
_RNvXsL_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberNtNtCslATUeuPuGvJ_4core3fmt7Display3fmtCs5sf5hjJHSjs_21query_fuzz_round_trip:
 1050|  2.71k|    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
 1051|  2.71k|        match self {
 1052|  1.30k|            Self::Int(int) => int.fmt(f),
 1053|  1.41k|            Self::Float(flt) => flt.fmt(f),
 1054|       |        }
 1055|  2.71k|    }
_RNvXs1q_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB6_9JsonFloatNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
  131|  1.18k|#[derive(Clone, Copy, Debug, PartialEq)]
_RNvXsv_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  796|  39.3k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  797|  39.3k|        if value > JSON_UINT_UPPER_LIMIT {
  798|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  799|  39.3k|        } else if let Some(x) = NonZeroU64::new(value) {
  800|  39.3k|            Ok(Self(x))
  801|       |        } else {
  802|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  803|       |        }
  804|  39.3k|    }
_RNvMsb_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeB7_:
  588|  2.70k|    pub fn normalize(&self) -> Self {
  589|  2.70k|        match *self {
  590|      0|            Self::Int(x) => Self::Int(x),
  591|  2.70k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|  1.51k|                Ok(int) => Self::Int(int),
  593|  1.18k|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  2.70k|    }
_RNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB4_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary:
  184|  12.6k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt6as_i64:
  330|  64.4k|    pub const fn as_i64(&self) -> i64 {
  331|  64.4k|        self.0
  332|  64.4k|    }
_RNCNvNvNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__26RECURSIVE_COUNT_JsonNumber7___getit0B9_:
  184|      1|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsP_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1095|  1.97k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1096|  1.97k|        let val = u.arbitrary::<f64>()?;
 1097|       |        // Wrap NaN, +Inf, -Inf into zero.
 1098|  1.97k|        let val = if val.is_nan() {
 1099|    300|            0.0
 1100|  1.67k|        } else if val.is_infinite() {
 1101|      0|            (0.0_f64).copysign(val)
 1102|       |        } else {
 1103|  1.67k|            val
 1104|       |        };
 1105|       |
 1106|  1.97k|        Ok(Self(val))
 1107|  1.97k|    }
_RNvXsM_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
 1062|  66.7k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
 1063|  66.7k|        let val = u.int_in_range(JSON_INT_LOWER_LIMIT..=JSON_INT_UPPER_LIMIT)?;
 1064|       |
 1065|  66.7k|        Ok(Self::new(val))
 1066|  66.7k|    }
_RNvXsc_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  603|  40.7k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  604|  40.7k|        if value > JSON_INT_UPPER_LIMIT {
  605|      0|            Err(JsonIntOverflowError::int_pos_overflow(value))
  606|  40.7k|        } else if value < JSON_INT_LOWER_LIMIT {
  607|      0|            Err(JsonIntOverflowError::int_neg_overflow(value))
  608|       |        } else {
  609|  40.7k|            Ok(Self::new(value))
  610|       |        }
  611|  40.7k|    }
_RNvXsl_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  699|  13.5k|    fn from(value: u32) -> Self {
  700|  13.5k|        Self::new(u64::from(value))
  701|  13.5k|    }
_RNvXsp_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  736|  40.7k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  737|  40.7k|        if value.0 < 0 {
  738|  15.6k|            Err(JsonIntOverflowError::negative_uint(value.0))
  739|       |        } else {
  740|  25.1k|            Ok(Self::new(value.0 as u64))
  741|       |        }
  742|  40.7k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3newB7_:
  286|   107k|    const fn new(index: i64) -> Self {
  287|   107k|        Self(index)
  288|   107k|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  80.1k|    pub const fn abs(&self) -> JsonUInt {
  363|  80.1k|        JsonUInt(self.0.unsigned_abs())
  364|  80.1k|    }
_RNvXsE_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  963|  2.70k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  964|  2.70k|        match f64::from_str(s) {
  965|  2.70k|            Ok(x) => {
  966|  2.70k|                assert!(!s.is_empty()); // Empty strings are not accepted by f64::from_str.
  967|       |                                        // Rule 1.
  968|  2.70k|                if x.is_nan() || x.is_infinite() {
  969|      0|                    return Err(Self::Err::infinite_or_nan(s));
  970|  2.70k|                }
  971|  2.70k|                if let Some((before, after)) = s.split_once('.') {
  972|       |                    // Rule 3. The case `before == "+"` is checked later.
  973|    915|                    if before.is_empty() || before == "-" {
  974|      0|                        return Err(Self::Err::nothing_before_decimal_point(s));
  975|    915|                    }
  976|    915|                    // Rule 4.
  977|    915|                    if after.is_empty() || after.starts_with(['e', 'E']) {
  978|      0|                        return Err(Self::Err::nothing_after_decimal_point(s));
  979|    915|                    }
  980|  1.78k|                }
  981|  2.70k|                let mut chars = s.chars();
  982|  2.70k|                let first_c = chars.next().expect("s is non-empty");
  983|  2.70k|                // Rule 2.
  984|  2.70k|                if first_c == '+' {
  985|      0|                    return Err(Self::Err::leading_plus_sign(s));
  986|  2.70k|                }
  987|       |                // Skip the leading minus if it exists.
  988|  2.70k|                let s_no_sign = if first_c == '-' { chars.as_str() } else { s };
  989|       |                // Rule 5.
  990|       |                // Check for leading zeroes. We strip the first zero from the front and check what's left.
  991|       |                // The only acceptable case is that the next character is not a digit.
  992|  2.70k|                if let Some(rest) = s_no_sign.strip_prefix('0') {
  993|  1.13k|                    if matches!(rest.chars().next(), Some('0'..='9')) {
  994|      0|                        return Err(Self::Err::leading_zeros(s));
  995|  1.13k|                    }
  996|  1.56k|                }
  997|  2.70k|                Ok(Self(x))
  998|       |            }
  999|       |            // Remember that all floats valid in JSON are also accepted by Rust,
 1000|       |            // so this is *definitely* not a valid JSON float.
 1001|      0|            Err(_) => Err(Self::Err::f64_parse_error(s)),
 1002|       |        }
 1003|  2.70k|    }
_RNvXsG_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_9JsonFloatE4fromB7_:
 1015|  2.70k|    fn from(value: JsonFloat) -> Self {
 1016|  2.70k|        Self::Float(value)
 1017|  2.70k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newB7_:
  400|  38.6k|    const fn new(index: u64) -> Self {
  401|  38.6k|        Self(index)
  402|  38.6k|    }
_RNvXsi_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  662|  40.7k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  663|  40.7k|        match i64::from_str(s) {
  664|  40.7k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  665|      0|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  666|       |        }
  667|  40.7k|    }
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys0_0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrary0B8_:
  184|      7|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCsmyidsRPtaf_15rsonpath_syntax3num1__NtB6_10JsonNumberNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitrarys_0B8_:
  184|  4.20k|#[cfg_attr(feature = "arbitrary", derive(arbitrary::Arbitrary))]
_RNvXsx_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  824|  39.3k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  825|  39.3k|        Self::try_from(value.0)
  826|  39.3k|    }
_RNvXsA_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromB7_:
  853|  2.70k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  854|  2.70k|        if value.0.fract() != 0.0 {
  855|    915|            return Err(JsonIntOverflowError::fractional(value.0));
  856|  1.78k|        }
  857|  1.78k|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  858|  1.78k|        // We need to check that it is within bounds of JsonInt. This is correct
  859|  1.78k|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  860|  1.78k|        // so every value within is exactly representable as a f64.
  861|  1.78k|        let int_value = value.0.trunc();
  862|  1.78k|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  863|     20|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  864|  1.76k|        }
  865|  1.76k|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  866|    246|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  867|  1.51k|        }
  868|  1.51k|
  869|  1.51k|        // This conversion is now guaranteed to be lossless.
  870|  1.51k|        Ok(Self(int_value as i64))
  871|  2.70k|    }

_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowCs5sf5hjJHSjs_21query_fuzz_round_trip:
   87|     40|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     40|        Self {
   89|     40|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     40|        }
   91|     40|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowCs5sf5hjJHSjs_21query_fuzz_round_trip:
   81|    492|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    492|        Self {
   83|    492|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    492|        }
   85|    492|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalCs5sf5hjJHSjs_21query_fuzz_round_trip:
   75|  1.83k|    pub(crate) fn fractional(src: f64) -> Self {
   76|  1.83k|        Self {
   77|  1.83k|            kind: JsonIntOverflowKind::Fractional(src),
   78|  1.83k|        }
   79|  1.83k|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalB6_:
   75|    915|    pub(crate) fn fractional(src: f64) -> Self {
   76|    915|        Self {
   77|    915|            kind: JsonIntOverflowKind::Fractional(src),
   78|    915|        }
   79|    915|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   63|  15.6k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  15.6k|        Self {
   65|  15.6k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  15.6k|        }
   67|  15.6k|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_neg_overflowB6_:
   87|     20|    pub(crate) fn int_float_neg_overflow(src: f64) -> Self {
   88|     20|        Self {
   89|     20|            kind: JsonIntOverflowKind::FloatNeg(src),
   90|     20|        }
   91|     20|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowB6_:
   81|    246|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    246|        Self {
   83|    246|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    246|        }
   85|    246|    }

_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0B5_:
  145|  8.45k|        |q| descendant_segment(q, ctx),
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  9.41k|    move |q: &'a str| {
   28|  9.41k|        inner
   29|  9.41k|            .parse(skip_whitespace(q))
   30|  9.41k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  9.41k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment:
  151|  79.7k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  79.7k|    map(
  153|  79.7k|        preceded(
  154|  79.7k|            tag(".."),
  155|  79.7k|            cut(alt((
  156|  79.7k|                |q| bracketed_selection(q, ctx),
  157|  79.7k|                map(wildcard_selector, Selectors::one),
  158|  79.7k|                member_name_shorthand,
  159|  79.7k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  79.7k|            ))),
  161|  79.7k|        ),
  162|  79.7k|        Segment::Descendant,
  163|  79.7k|    )(q)
  164|  79.7k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector:
  290|  89.8k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  89.8k|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  89.8k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1U_E00B8_:
   30|  6.75k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|   124k|    move |q: &'a str| {
   28|   124k|        inner
   29|   124k|            .parse(skip_whitespace(q))
   30|   124k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   124k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment:
  166|  33.6k|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  167|  33.6k|    map(
  168|  33.6k|        alt((
  169|  33.6k|            |q| bracketed_selection(q, ctx),
  170|  33.6k|            // This cut is only correct because we try parsing descendant_segment first.
  171|  33.6k|            preceded(
  172|  33.6k|                char('.'),
  173|  33.6k|                cut(alt((
  174|  33.6k|                    map(wildcard_selector, Selectors::one),
  175|  33.6k|                    member_name_shorthand,
  176|  33.6k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  177|  33.6k|                ))),
  178|  33.6k|            ),
  179|  33.6k|        )),
  180|  33.6k|        Segment::Child,
  181|  33.6k|    )(q)
  182|  33.6k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19bracketed_selection:
  193|  79.7k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  79.7k|    let (mut q, _) = char('[')(q)?;
  195|  79.7k|    let mut selectors = vec![];
  196|  79.7k|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|   124k|        match selector(q, ctx).finish() {
  200|   117k|            Ok((rest, selector)) => {
  201|   117k|                selectors.push(selector);
  202|   117k|                q = rest;
  203|   117k|            }
  204|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|      0|                syntax_errors.push(err);
  206|      0|                q = rest;
  207|      0|            }
  208|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|      0|                syntax_errors.append(&mut errs);
  210|      0|                q = rest;
  211|      0|            }
  212|  7.38k|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|   117k|        q = skip_whitespace(q);
  215|   117k|
  216|   117k|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|  45.0k|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|  72.4k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|  72.4k|                    q = rest;
  221|  72.4k|                    break;
  222|      0|                } else if q.is_empty() {
  223|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|      0|                    break;
  225|       |                } else {
  226|      0|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|  72.4k|    if syntax_errors.is_empty() {
  233|  72.4k|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  79.7k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr:
  383|   117k|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  384|       |    // This is the most involved part of the parser, as it is inherently recursive.
  385|       |    //
  386|       |    // There are two sources of recursion here: parentheses introduce recursion,
  387|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  388|       |    // require checking for an operator, and if any is present recursively parsing
  389|       |    // another filter and wrapping the result in an appropriate node type.
  390|       |    //
  391|       |    // In total, we handle the negation operator at the start and then apply the rules:
  392|       |    // - '(' |=> filter_expression, ')'
  393|       |    // - literal |=> comp_op, comparable
  394|       |    // - query, comp_op |=> comparable
  395|       |    // - query
  396|       |    // where |=> means a cut. We separately apply two additional restrictions:
  397|       |    // - negation cannot immediately precede a comparison,
  398|       |    // - query in a comparison must be singular.
  399|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  400|       |    // these two special cases it can give much clearer error messages about them.
  401|       |    //
  402|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  403|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  404|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  405|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  406|       |    #[derive(Debug, Clone, Copy)]
  407|       |    enum BooleanOp {
  408|       |        And,
  409|       |        Or,
  410|       |    }
  411|       |
  412|   117k|    let Some(ctx) = ctx.increase_nesting() else {
  413|    213|        return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  414|       |    };
  415|       |
  416|   117k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  417|  90.5k|    let mut loop_rest = skip_whitespace(rest);
  418|  90.5k|    let mut final_expr = this_expr;
  419|       |
  420|       |    loop {
  421|   121k|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  422|   121k|            value(BooleanOp::And, tag("&&")),
  423|   121k|            value(BooleanOp::Or, tag("||")),
  424|   121k|        ))))(loop_rest)?;
  425|   121k|        loop_rest = rest;
  426|       |
  427|  31.7k|        match mb_boolean_op {
  428|  9.35k|            Some(BooleanOp::And) => {
  429|  9.41k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  430|  9.35k|                loop_rest = rest;
  431|  9.35k|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  432|       |            }
  433|  21.9k|            Some(BooleanOp::Or) => {
  434|  22.3k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  435|  21.9k|                loop_rest = rest;
  436|  21.9k|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  437|       |            }
  438|  90.1k|            None => break,
  439|  90.1k|        }
  440|  90.1k|    }
  441|  90.1k|
  442|  90.1k|    return Ok((loop_rest, final_expr));
  443|       |
  444|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|       |        let negated = opt_neg.is_some();
  447|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|       |            let rest = skip_whitespace(rest);
  450|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|       |            let selector = if negated {
  454|       |                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|       |                nested_filter
  457|       |            };
  458|       |            return Ok((rest, selector));
  459|       |        }
  460|       |
  461|       |        match literal(rest) {
  462|       |            Ok((rest, lhs)) => {
  463|       |                let rest = skip_whitespace(rest);
  464|       |                let (rest, comp_op) = match comparison_operator(rest) {
  465|       |                    Ok((rest, comp_op)) => (rest, comp_op),
  466|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|       |                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|       |                let rest = skip_whitespace(rest);
  476|       |                let (rest, rhs) = match comparable(rest, ctx) {
  477|       |                    Ok((rest, rhs)) => (rest, rhs),
  478|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|       |                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|       |                if negated {
  488|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|       |                    return Ok((
  491|       |                        rest,
  492|       |                        LogicalExpr::Comparison(ComparisonExpr {
  493|       |                            lhs: Comparable::Literal(lhs),
  494|       |                            op: comp_op,
  495|       |                            rhs,
  496|       |                        }),
  497|       |                    ));
  498|       |                }
  499|       |            }
  500|       |            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|       |            _ => (),
  502|       |        };
  503|       |
  504|       |        match filter_query(rest, ctx) {
  505|       |            Ok((rest, query)) => {
  506|       |                let query_len = q.len() - rest.len();
  507|       |                let rest = skip_whitespace(rest);
  508|       |                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|       |                    let rest = skip_whitespace(rest);
  510|       |                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|       |                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|       |                    let Some(singular_query) = query.try_to_comparable() else {
  514|       |                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|       |                    if negated {
  517|       |                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|       |                        Ok((
  520|       |                            rest,
  521|       |                            LogicalExpr::Comparison(ComparisonExpr {
  522|       |                                lhs: singular_query,
  523|       |                                rhs,
  524|       |                                op: comp_op,
  525|       |                            }),
  526|       |                        ))
  527|       |                    }
  528|       |                } else {
  529|       |                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|       |                    let expr = if negated {
  531|       |                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|       |                        test_expr
  534|       |                    };
  535|       |                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|       |            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|       |            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|       |    }
  542|   117k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|   124k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   124k|where
   25|   124k|    F: nom::Parser<&'a str, T, E>,
   26|   124k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   124k|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single:
  444|   126k|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|   126k|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|   126k|        let negated = opt_neg.is_some();
  447|   126k|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|  48.2k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|  28.5k|            let rest = skip_whitespace(rest);
  450|  28.5k|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|      0|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|  28.5k|            let selector = if negated {
  454|  14.0k|                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|  14.5k|                nested_filter
  457|       |            };
  458|  28.5k|            return Ok((rest, selector));
  459|  78.5k|        }
  460|  78.5k|
  461|  78.5k|        match literal(rest) {
  462|  7.46k|            Ok((rest, lhs)) => {
  463|  7.46k|                let rest = skip_whitespace(rest);
  464|  7.46k|                let (rest, comp_op) = match comparison_operator(rest) {
  465|  7.46k|                    Ok((rest, comp_op)) => (rest, comp_op),
  466|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|      0|                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|  7.46k|                let rest = skip_whitespace(rest);
  476|  7.46k|                let (rest, rhs) = match comparable(rest, ctx) {
  477|  7.46k|                    Ok((rest, rhs)) => (rest, rhs),
  478|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|      0|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|      0|                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|      0|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|  7.46k|                if negated {
  488|      0|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|  7.46k|                    return Ok((
  491|  7.46k|                        rest,
  492|  7.46k|                        LogicalExpr::Comparison(ComparisonExpr {
  493|  7.46k|                            lhs: Comparable::Literal(lhs),
  494|  7.46k|                            op: comp_op,
  495|  7.46k|                            rhs,
  496|  7.46k|                        }),
  497|  7.46k|                    ));
  498|       |                }
  499|       |            }
  500|      0|            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|  71.1k|            _ => (),
  502|  71.1k|        };
  503|  71.1k|
  504|  71.1k|        match filter_query(rest, ctx) {
  505|  63.9k|            Ok((rest, query)) => {
  506|  63.9k|                let query_len = q.len() - rest.len();
  507|  63.9k|                let rest = skip_whitespace(rest);
  508|  63.9k|                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|  17.5k|                    let rest = skip_whitespace(rest);
  510|  17.5k|                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|      0|                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|  17.5k|                    let Some(singular_query) = query.try_to_comparable() else {
  514|      0|                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|  17.5k|                    if negated {
  517|      0|                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|  17.5k|                        Ok((
  520|  17.5k|                            rest,
  521|  17.5k|                            LogicalExpr::Comparison(ComparisonExpr {
  522|  17.5k|                                lhs: singular_query,
  523|  17.5k|                                rhs,
  524|  17.5k|                                op: comp_op,
  525|  17.5k|                            }),
  526|  17.5k|                        ))
  527|       |                    }
  528|       |                } else {
  529|  46.3k|                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|  46.3k|                    let expr = if negated {
  531|  1.73k|                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|  44.6k|                        test_expr
  534|       |                    };
  535|  46.3k|                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|  7.16k|            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|      0|            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|   126k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|   124k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   124k|where
   25|   124k|    F: nom::Parser<&'a str, T, E>,
   26|   124k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   124k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  22.1k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB2_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReBY_NtNtB4_5error18InternalParseErrorTNCINvNtB1A_10combinator5valueB23_BY_B23_B28_NCINvNtNtB1A_5bytes8complete3tagB23_B23_B28_E0E0B2G_EE0B28_EB4_:
   23|   121k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   121k|where
   25|   121k|    F: nom::Parser<&'a str, T, E>,
   26|   121k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   121k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|   124k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   124k|where
   25|   124k|    F: nom::Parser<&'a str, T, E>,
   26|   124k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   124k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  75.9k|    move |q: &'a str| {
   28|  75.9k|        inner
   29|  75.9k|            .parse(skip_whitespace(q))
   30|  75.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  75.9k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0B5_:
  380|  47.0k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNvXs_NvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprNtB4_9BooleanOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB8_:
  406|  31.7k|    #[derive(Debug, Clone, Copy)]
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query:
  571|  87.7k|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  572|  87.7k|    let (rest, root_type) = alt((
  573|  87.7k|        value(RootSelectorType::Absolute, char('$')),
  574|  87.7k|        value(RootSelectorType::Relative, char('@')),
  575|  87.7k|    ))(q)?;
  576|  87.7k|    let rest = skip_whitespace(rest);
  577|  87.7k|    let mut segments = vec![];
  578|  87.7k|    let mut syntax_errors = vec![];
  579|  87.7k|
  580|  87.7k|    let mut q = rest;
  581|       |
  582|       |    loop {
  583|   151k|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  584|  80.5k|            break;
  585|  71.3k|        }
  586|  71.3k|
  587|  71.3k|        q = match alt((
  588|  71.3k|            |q| descendant_segment(q, ctx),
  589|  71.3k|            |q| child_segment(q, ctx),
  590|  71.3k|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  591|  71.3k|        ))(q)
  592|  71.3k|        .finish()
  593|       |        {
  594|  64.1k|            Ok((rest, segment)) => {
  595|  64.1k|                segments.push(segment);
  596|  64.1k|                rest
  597|       |            }
  598|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  599|      0|                syntax_errors.push(err);
  600|      0|                rest
  601|       |            }
  602|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  603|      0|                syntax_errors.append(&mut errs);
  604|      0|                rest
  605|       |            }
  606|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  607|  7.16k|                return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  608|       |            }
  609|      0|            Err(InternalParseError::NomError(err)) => panic!(
  610|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  611|      0|            ),
  612|       |        };
  613|  64.1k|        q = skip_whitespace(q);
  614|       |    }
  615|       |
  616|  80.5k|    if !syntax_errors.is_empty() {
  617|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  618|       |    } else {
  619|  80.5k|        let query = JsonPathQuery { segments };
  620|  80.5k|        let query = match root_type {
  621|  19.3k|            RootSelectorType::Relative => FilterQuery::Relative(query),
  622|  61.2k|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  623|       |        };
  624|  80.5k|        Ok((q, query))
  625|       |    }
  626|  87.7k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|   124k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   124k|where
   25|   124k|    F: nom::Parser<&'a str, T, E>,
   26|   124k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   124k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB2j_B2m_E0E0B2m_E0B6_:
   27|   126k|    move |q: &'a str| {
   28|   126k|        inner
   29|   126k|            .parse(skip_whitespace(q))
   30|   126k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   126k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6stringB3_:
  742|   451k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  743|       |    move |q: &'a str| {
  744|       |        let mut builder = JsonStringBuilder::new();
  745|       |        let mut syntax_errors = vec![];
  746|       |        let mut stream = q.char_indices().peekable();
  747|       |
  748|       |        while let Some((c_idx, c)) = stream.next() {
  749|       |            match (c, mode) {
  750|       |                ('\\', _) => {
  751|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|       |                        Ok(r) => {
  753|       |                            builder.push(r);
  754|       |                        }
  755|       |                        Err(err) => {
  756|       |                            syntax_errors.push(err);
  757|       |                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|       |                    return if syntax_errors.is_empty() {
  763|       |                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|       |                (..='\u{001F}', _) => {
  769|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|       |                    syntax_errors.push(SyntaxError::new(
  771|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|       |                        rest.len() + 1,
  773|       |                        1,
  774|       |                    ))
  775|       |                }
  776|       |                _ => {
  777|       |                    builder.push(c);
  778|       |                }
  779|       |            }
  780|       |        }
  781|       |
  782|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|       |            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|       |    }
  908|   451k|}
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  873|  6.36k|        fn read_hexadecimal_escape<I>(
  874|  6.36k|            q_len: usize,
  875|  6.36k|            c_idx: usize,
  876|  6.36k|            chars: &mut Peekable<I>,
  877|  6.36k|        ) -> std::result::Result<u32, SyntaxError>
  878|  6.36k|        where
  879|  6.36k|            I: Iterator<Item = (usize, char)>,
  880|  6.36k|        {
  881|  6.36k|            let mut x = 0;
  882|  31.8k|            for i in 0..4 {
  883|  25.4k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|  25.4k|                    SyntaxErrorKind::InvalidEscapeSequence,
  885|  25.4k|                    q_len - c_idx + 1,
  886|  25.4k|                    2 + i,
  887|  25.4k|                ))?;
  888|  25.4k|                let v = match c {
  889|  25.4k|                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|  1.97k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|      0|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|      0|                        return Err(SyntaxError::new(
  895|      0|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|      0|                            q_len - c_idx - i - 1,
  897|      0|                            1,
  898|      0|                        ))
  899|       |                    }
  900|       |                };
  901|  25.4k|                x <<= 4;
  902|  25.4k|                x += v;
  903|  25.4k|                chars.next();
  904|       |            }
  905|  6.36k|            Ok(x)
  906|  6.36k|        }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|   124k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   124k|where
   25|   124k|    F: nom::Parser<&'a str, T, E>,
   26|   124k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   124k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  69.1k|    move |q: &'a str| {
   28|  69.1k|        inner
   29|  69.1k|            .parse(skip_whitespace(q))
   30|  69.1k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  69.1k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs0_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  22.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  22.3k|where
   25|  22.3k|    F: nom::Parser<&'a str, T, E>,
   26|  22.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  22.3k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0B5_:
  416|   117k|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNCNvB6_8selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  39.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number:
  680|   103k|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  681|   103k|    map(float, |f| JsonNumber::from(f).normalize())(q)
  682|   103k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0B5_:
  589|  30.1k|            |q| child_segment(q, ctx),
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery17try_to_comparable:
  563|  34.2k|    fn try_to_comparable(self) -> Option<Comparable> {
  564|  34.2k|        match self {
  565|  9.80k|            Self::Relative(q) => q.try_to_singular().ok().map(Comparable::RelativeSingularQuery),
  566|  24.4k|            Self::Absolute(q) => q.try_to_singular().ok().map(Comparable::AbsoluteSingularQuery),
  567|       |        }
  568|  34.2k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1J_9character8complete4charB2h_B2k_E0E0B2k_EB4_:
   23|   126k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   126k|where
   25|   126k|    F: nom::Parser<&'a str, T, E>,
   26|   126k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   126k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|  46.1k|                |q| bracketed_selection(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_json_path_query:
   66|  2.96k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  2.96k|    let original_input = q;
   68|  2.96k|    let mut parse_error = ParseErrorBuilder::new();
   69|  2.96k|    let mut segments = vec![];
   70|  2.96k|    let q = skip_whitespace(q);
   71|  2.96k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  2.96k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|      0|        parse_error.add(SyntaxError::new(
   74|      0|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|      0|            original_input.len(),
   76|      0|            leading_whitespace_len,
   77|      0|        ));
   78|  2.96k|    }
   79|  2.96k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|  2.96k|        Ok((q, _)) => skip_whitespace(q),
   81|      0|        Err(e) => {
   82|      0|            parse_error.add(SyntaxError::new(
   83|      0|                SyntaxErrorKind::MissingRootIdentifier,
   84|      0|                e.input.len(),
   85|      0|                q.chars().next().map_or(1, char::len_utf8),
   86|      0|            ));
   87|      0|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  2.96k|    let mut q = q;
   92|  11.2k|    while !q.is_empty() {
   93|  8.45k|        q = match segment(q, ctx).finish() {
   94|  8.24k|            Ok((rest, segment)) => {
   95|  8.24k|                segments.push(segment);
   96|  8.24k|                rest
   97|       |            }
   98|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|      0|                parse_error.add(err);
  100|      0|                rest
  101|       |            }
  102|      0|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|      0|                parse_error.add_many(errs);
  104|      0|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|    213|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|    213|                    original_input.to_owned(),
  109|    213|                    ctx.options
  110|    213|                        .recursion_limit
  111|    213|                        .expect("recursion limit should exists when exceeded"),
  112|    213|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  8.24k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  2.75k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  2.75k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  2.75k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  2.75k|        if trailing_whitespace_len > 0 {
  127|      0|            parse_error.add(SyntaxError::new(
  128|      0|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|      0|                trailing_whitespace_len,
  130|      0|                trailing_whitespace_len,
  131|      0|            ));
  132|  2.75k|        }
  133|      0|    }
  134|       |
  135|  2.75k|    if parse_error.is_empty() {
  136|  2.75k|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|      0|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  2.96k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1Q_EB4_:
   23|  75.9k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  75.9k|where
   25|  75.9k|    F: nom::Parser<&'a str, T, E>,
   26|  75.9k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  75.9k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1E_cB12_NtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB1E_B2x_E0NCINvNtB1O_10combinator3optB1E_B1E_B2x_NCIB4_B1E_NvB6_3intB2x_E0E0E0B2x_E00B8_:
   30|  6.73k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser28failed_segment_within_filterNtB4_7SegmentEB4_:
  628|  71.3k|fn failed_segment_within_filter<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  629|       |    move |q: &str| {
  630|       |        // We want to find the next segment or close the filter.
  631|       |        let rest = skip_one(q)
  632|       |            .trim_start_matches('.')
  633|       |            .trim_start_matches(|x| x != ',' && x != ']' && x != '.' && x != '[');
  634|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  635|       |    }
  636|  71.3k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs0_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  22.3k|    move |q: &'a str| {
   28|  22.3k|        inner
   29|  22.3k|            .parse(skip_whitespace(q))
   30|  22.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  22.3k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3int:
  726|   158k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  727|   158k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  728|       |
  729|  62.9k|    if int != "0" {
  730|  62.6k|        if int == "-0" {
  731|      0|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  732|  62.6k|        }
  733|  62.6k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  734|  62.6k|        if without_minus.strip_prefix(['0']).is_some() {
  735|      0|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  736|  62.6k|        }
  737|    269|    }
  738|       |
  739|  62.9k|    Ok((rest, int))
  740|   158k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  89.8k|    move |q: &'a str| {
   28|  89.8k|        inner
   29|  89.8k|            .parse(skip_whitespace(q))
   30|  89.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  89.8k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18parse_with_options:
   62|  2.96k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  2.96k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  2.96k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0B5_:
  146|  3.50k|        |q| child_segment(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literal:
  283|   225k|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  284|   225k|    alt((
  285|   225k|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  286|   225k|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  287|   225k|    ))(q)
  288|   225k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0B5_:
  658|  16.6k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selector:
  342|  69.1k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  343|       |    // This has to be called after the slice selector.
  344|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  345|  69.1k|    let (rest, int) = int(q)?;
  346|  22.1k|    match parse_directional_int(int) {
  347|  14.1k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  348|  8.02k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  349|      0|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  350|      0|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  351|      0|            rest,
  352|      0|        ))),
  353|       |    }
  354|  69.1k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB2l_B2o_E0E0B2o_E00B8_:
   30|   126k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvXsa_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_16RootSelectorTypeNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  549|  87.7k|#[derive(Clone, Copy)]
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0B5_:
  429|  9.41k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  47.0k|    move |q: &'a str| {
   28|  47.0k|        inner
   29|  47.0k|            .parse(skip_whitespace(q))
   30|  47.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  47.0k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selector:
  279|   124k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  280|   124k|    map(string_literal, Selector::Name)(q)
  281|   124k|}
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  2.96k|    fn new(options: &'a ParserOptions) -> Self {
   45|  2.96k|        Self {
   46|  2.96k|            options,
   47|  2.96k|            current_nesting: 0,
   48|  2.96k|        }
   49|  2.96k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  13.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector:
  379|  47.0k|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  380|  47.0k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  381|  47.0k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  34.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.75k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|   117k|    fn increase_nesting(&self) -> Option<Self> {
   52|   117k|        match self.options.recursion_limit {
   53|   117k|            Some(limit) if limit <= self.current_nesting => None,
   54|   117k|            _ => Some(Self {
   55|   117k|                options: self.options,
   56|   117k|                current_nesting: self.current_nesting + 1,
   57|   117k|            }),
   58|       |        }
   59|   117k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable:
  657|  25.0k|fn comparable<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  658|  25.0k|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
  659|  25.0k|
  660|  25.0k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  25.0k|        let (rest, query) = filter_query(q, ctx)?;
  662|  25.0k|        let Some(cmp) = query.try_to_comparable() else {
  663|  25.0k|            let query_len = q.len() - rest.len();
  664|  25.0k|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|  25.0k|        };
  666|  25.0k|        Ok((rest, cmp))
  667|  25.0k|    }
  668|  25.0k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0B5_:
  588|  71.3k|            |q| descendant_segment(q, ctx),
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB6_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB12_NtNtB8_5error18InternalParseErrorTNCINvNtB1E_10combinator5valueB27_B12_B27_B2d_NCINvNtNtB1E_5bytes8complete3tagB27_B27_B2d_E0E0B2L_EE0B2d_E00B8_:
   30|  31.7k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_directional_int:
  713|  40.7k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  714|  40.7k|    match JsonInt::from_str(int_str) {
  715|  40.7k|        Ok(int) => {
  716|  40.7k|            if let Ok(uint) = JsonUInt::try_from(int) {
  717|  25.1k|                DirectionalInt::Plus(uint)
  718|       |            } else {
  719|  15.6k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  720|       |            }
  721|       |        }
  722|      0|        Err(err) => DirectionalInt::Error(err),
  723|       |    }
  724|  40.7k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB4_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB10_NtNtB6_5error18InternalParseErrorTNCINvNtB1C_10combinator5valueB25_B10_B25_B2b_NCINvNtNtB1C_5bytes8complete3tagB25_B25_B2b_E0E0B2J_EE0B2b_E0B6_:
   27|   121k|    move |q: &'a str| {
   28|   121k|        inner
   29|   121k|            .parse(skip_whitespace(q))
   30|   121k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   121k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  13.5k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  13.5k|where
   25|  13.5k|    F: nom::Parser<&'a str, T, E>,
   26|  13.5k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  13.5k|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literal:
  670|   103k|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  671|   103k|    alt((
  672|   103k|        into(number),
  673|   103k|        into(string_literal),
  674|   103k|        value(Literal::Bool(true), tag("true")),
  675|   103k|        value(Literal::Bool(false), tag("false")),
  676|   103k|        value(Literal::Null, tag("null")),
  677|   103k|    ))(q)
  678|   103k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0B5_:
  169|  33.6k|            |q| bracketed_selection(q, ctx),
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_float:
  695|   103k|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|   103k|        recognize(tuple((
  697|   103k|            digit1,
  698|   103k|            opt(preceded(char('.'), digit1)),
  699|   103k|            opt(preceded(
  700|   103k|                tag_no_case("e"),
  701|   103k|                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|   103k|            )),
  703|   103k|        )))(q)
  704|   103k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float:
  685|   103k|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  686|       |    // Look ahead to verify that this has a chance to be a number.
  687|   103k|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  688|       |
  689|       |    // It is a number, so after here we can hard cut.
  690|  2.70k|    return match JsonFloat::from_str(valid_str) {
  691|  2.70k|        Ok(n) => Ok((rest, n)),
  692|      0|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  693|       |    };
  694|       |
  695|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|       |        recognize(tuple((
  697|       |            digit1,
  698|       |            opt(preceded(char('.'), digit1)),
  699|       |            opt(preceded(
  700|       |                tag_no_case("e"),
  701|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|       |            )),
  703|       |        )))(q)
  704|       |    }
  705|   103k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  13.8k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  47.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  47.0k|where
   25|  47.0k|    F: nom::Parser<&'a str, T, E>,
   26|  47.0k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  47.0k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  9.35k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15skip_whitespace:
   13|  1.95M|fn skip_whitespace(q: &str) -> &str {
   14|  1.95M|    q.trim_start_matches(WHITESPACE)
   15|  1.95M|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number0B5_:
  681|  2.70k|    map(float, |f| JsonNumber::from(f).normalize())(q)
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  12.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment:
  142|  8.45k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  8.45k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  8.45k|    alt((
  145|  8.45k|        |q| descendant_segment(q, ctx),
  146|  8.45k|        |q| child_segment(q, ctx),
  147|  8.45k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  8.45k|    ))(q)
  149|  8.45k|}
_RNCNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string00B7_:
  761|  42.8k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0B5_:
  743|  42.8k|    move |q: &'a str| {
  744|  42.8k|        let mut builder = JsonStringBuilder::new();
  745|  42.8k|        let mut syntax_errors = vec![];
  746|  42.8k|        let mut stream = q.char_indices().peekable();
  747|       |
  748|   139k|        while let Some((c_idx, c)) = stream.next() {
  749|   139k|            match (c, mode) {
  750|       |                ('\\', _) => {
  751|  32.3k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|  32.3k|                        Ok(r) => {
  753|  32.3k|                            builder.push(r);
  754|  32.3k|                        }
  755|      0|                        Err(err) => {
  756|      0|                            syntax_errors.push(err);
  757|      0|                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|  42.8k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|  42.8k|                    return if syntax_errors.is_empty() {
  763|  42.8k|                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|      0|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|  61.1k|                (..='\u{001F}', _) => {
  769|      0|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|      0|                    syntax_errors.push(SyntaxError::new(
  771|      0|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|      0|                        rest.len() + 1,
  773|      0|                        1,
  774|      0|                    ))
  775|       |                }
  776|  64.6k|                _ => {
  777|  64.6k|                    builder.push(c);
  778|  64.6k|                }
  779|       |            }
  780|       |        }
  781|       |
  782|      0|        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|      0|            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|      0|            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|      0|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|      0|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|  42.8k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  8.45k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  8.45k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1A_cBY_NtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB1A_B2s_E0NCINvNtB1K_10combinator3optB1A_B1A_B2s_NCIB0_B1A_NvB2_3intB2s_E0E0E0B2s_EB4_:
   23|  6.75k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  6.75k|where
   25|  6.75k|    F: nom::Parser<&'a str, T, E>,
   26|  6.75k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  6.75k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|   117k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|   117k|where
   25|   117k|    F: nom::Parser<&'a str, T, E>,
   26|   117k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|   117k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1S_E0B6_:
   27|  75.9k|    move |q: &'a str| {
   28|  75.9k|        inner
   29|  75.9k|            .parse(skip_whitespace(q))
   30|  75.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  75.9k|    }
_RNvXs7_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  273|  2.09k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|   117k|    move |q: &'a str| {
   28|   117k|        inner
   29|   117k|            .parse(skip_whitespace(q))
   30|   117k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|   117k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector:
  262|   124k|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  263|   124k|    alt((
  264|   124k|        ignore_whitespace(name_selector),
  265|   124k|        ignore_whitespace(wildcard_selector),
  266|   124k|        ignore_whitespace(slice_selector),
  267|   124k|        ignore_whitespace(index_selector),
  268|   124k|        ignore_whitespace(|q| filter_selector(q, ctx)),
  269|   124k|        failed_selector,
  270|   124k|    ))(q)
  271|   124k|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs0_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  21.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selector:
  294|  75.9k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  295|  75.9k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  296|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  297|  6.75k|    let mut slice = crate::Slice::default();
  298|       |
  299|  6.75k|    if let Some(start_str) = opt_start {
  300|  6.47k|        match parse_directional_int(start_str) {
  301|  4.11k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  302|  2.35k|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  303|      0|            DirectionalInt::Error(err) => {
  304|      0|                return fail(
  305|      0|                    SyntaxErrorKind::SliceStartParseError(err),
  306|      0|                    q.len(),
  307|      0|                    start_str.len(),
  308|      0|                    rest,
  309|      0|                );
  310|       |            }
  311|       |        };
  312|    283|    }
  313|  6.75k|    let q = rest;
  314|  6.75k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  315|       |
  316|  6.75k|    if let Some(end_str) = opt_end {
  317|  5.36k|        match parse_directional_int(end_str) {
  318|  3.12k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  319|  2.23k|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  320|      0|            DirectionalInt::Error(err) => {
  321|      0|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  322|       |            }
  323|       |        };
  324|  1.39k|    }
  325|       |
  326|  6.75k|    let q = rest;
  327|  6.75k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  328|       |
  329|  6.75k|    if let Some(Some(step_str)) = opt_step {
  330|  6.73k|        match parse_directional_int(step_str) {
  331|  3.74k|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  332|  2.98k|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  333|      0|            DirectionalInt::Error(err) => {
  334|      0|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  335|       |            }
  336|       |        };
  337|     23|    }
  338|       |
  339|  6.75k|    Ok((rest, Selector::Slice(slice)))
  340|  75.9k|}
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery15into_test_queryB6_:
  556|  46.3k|    fn into_test_query(self) -> TestExpr {
  557|  46.3k|        match self {
  558|  9.51k|            Self::Relative(q) => TestExpr::Relative(q),
  559|  36.8k|            Self::Absolute(q) => TestExpr::Absolute(q),
  560|       |        }
  561|  46.3k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0B5_:
  268|  47.0k|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  790|  32.3k|        fn read_escape_sequence<I>(
  791|  32.3k|            q_len: usize,
  792|  32.3k|            c_idx: usize,
  793|  32.3k|            chars: &mut Peekable<I>,
  794|  32.3k|            mode: StringParseMode,
  795|  32.3k|        ) -> std::result::Result<char, SyntaxError>
  796|  32.3k|        where
  797|  32.3k|            I: Iterator<Item = (usize, char)>,
  798|  32.3k|        {
  799|  32.3k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|  32.3k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|  32.3k|                q_len - c_idx,
  802|  32.3k|                1,
  803|  32.3k|            ))?;
  804|  2.09k|            match ctrl {
  805|       |                'u' => {
  806|  6.36k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|  6.36k|                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|      0|                        0xD800..=0xDBFF => {
  810|      0|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|      0|                                q_len - c_idx,
  813|      0|                                6,
  814|      0|                            ))?;
  815|      0|                            if next != '\\' {
  816|      0|                                return Err(SyntaxError::new(
  817|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|      0|                                    q_len - c_idx,
  819|      0|                                    6,
  820|      0|                                ));
  821|      0|                            }
  822|      0|                            chars.next();
  823|      0|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|      0|                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|      0|                                q_len - c_idx,
  826|      0|                                6,
  827|      0|                            ))?;
  828|      0|                            if next != 'u' {
  829|      0|                                return Err(SyntaxError::new(
  830|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|      0|                                    q_len - c_idx,
  832|      0|                                    6,
  833|      0|                                ));
  834|      0|                            }
  835|      0|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|      0|                            match low {
  837|      0|                                0xDC00..=0xDFFF => {
  838|      0|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|      0|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|      0|                                _ => Err(SyntaxError::new(
  842|      0|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|      0|                                    q_len - c_idx,
  844|      0|                                    6,
  845|      0|                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|      0|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|      0|                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|      0|                            q_len - c_idx,
  852|      0|                            6,
  853|      0|                        )),
  854|  6.36k|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|  4.41k|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|    553|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|    173|                'n' => Ok('\n'),       // U+000A LF line feed
  860|    777|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|  2.01k|                'r' => Ok('\r'),       // U+000D CR carriage return
  862|  1.02k|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|  1.06k|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|  15.9k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|      0|                _ => Err(SyntaxError::new(
  866|      0|                    SyntaxErrorKind::InvalidEscapeSequence,
  867|      0|                    q_len - c_idx,
  868|      0|                    2,
  869|      0|                )), // no other escape sequences are allowed
  870|       |            }
  871|  32.3k|        }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  47.0k|    move |q: &'a str| {
   28|  47.0k|        inner
   29|  47.0k|            .parse(skip_whitespace(q))
   30|  47.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  47.0k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|   113k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|   113k|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable14singular_query:
  660|  16.6k|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  16.6k|        let (rest, query) = filter_query(q, ctx)?;
  662|  16.6k|        let Some(cmp) = query.try_to_comparable() else {
  663|      0|            let query_len = q.len() - rest.len();
  664|      0|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|       |        };
  666|  16.6k|        Ok((rest, cmp))
  667|  16.6k|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|  13.4k|    move |q: &'a str| {
   28|  13.4k|        inner
   29|  13.4k|            .parse(skip_whitespace(q))
   30|  13.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  13.4k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19comparison_operator:
  646|  71.3k|fn comparison_operator(q: &str) -> IResult<&str, ComparisonOp, InternalParseError> {
  647|  71.3k|    alt((
  648|  71.3k|        value(ComparisonOp::EqualTo, tag("==")),
  649|  71.3k|        value(ComparisonOp::NotEqualTo, tag("!=")),
  650|  71.3k|        value(ComparisonOp::LesserOrEqualTo, tag("<=")),
  651|  71.3k|        value(ComparisonOp::GreaterOrEqualTo, tag(">=")),
  652|  71.3k|        value(ComparisonOp::LessThan, char('<')),
  653|  71.3k|        value(ComparisonOp::GreaterThan, char('>')),
  654|  71.3k|    ))(q)
  655|  71.3k|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1C_cB10_NtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB1C_B2v_E0NCINvNtB1M_10combinator3optB1C_B1C_B2v_NCIB2_B1C_NvB4_3intB2v_E0E0E0B2v_E0B6_:
   27|  6.75k|    move |q: &'a str| {
   28|  6.75k|        inner
   29|  6.75k|            .parse(skip_whitespace(q))
   30|  6.75k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  6.75k|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  9.41k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  9.41k|where
   25|  9.41k|    F: nom::Parser<&'a str, T, E>,
   26|  9.41k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  9.41k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0B5_:
  434|  22.3k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_expr0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  90.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0B7_:
  448|  48.2k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_15filter_selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  39.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))

_RNvMs2_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonString8unquoted:
  187|   128k|    pub fn unquoted(&self) -> &str {
  188|   128k|        let len = self.quoted.len();
  189|   128k|        debug_assert!(len >= 2);
  190|   128k|        &self.quoted[1..len - 1]
  191|   128k|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eq:
  210|  42.4k|    fn eq(&self, other: &Self) -> bool {
  211|  42.4k|        self.unquoted() == other.unquoted()
  212|  42.4k|    }
_RNvXsc_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10EscapeModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqCs5sf5hjJHSjs_21query_fuzz_round_trip:
   71|  9.72k|#[derive(Clone, Copy, PartialEq, Eq, Debug)]
_RNvNtCsmyidsRPtaf_15rsonpath_syntax3str6escapeCs5sf5hjJHSjs_21query_fuzz_round_trip:
  131|  43.2k|pub fn escape(str: &str, mode: EscapeMode) -> String {
  132|  43.2k|    use std::fmt::Write;
  133|  43.2k|    let mut result = String::new();
  134|  97.6k|    for c in str.chars() {
  135|  3.04k|        match c {
  136|       |            // # Mode-dependent quote escapes.
  137|  4.11k|            '\'' if mode == EscapeMode::SingleQuoted => result.push_str(r"\'"),
  138|  3.04k|            '\'' if mode == EscapeMode::DoubleQuoted => result.push('\''),
  139|  1.53k|            '"' if mode == EscapeMode::SingleQuoted => result.push('"'),
  140|  1.02k|            '"' if mode == EscapeMode::DoubleQuoted => result.push_str(r#"\""#),
  141|       |            // # Mode-independent escapes.
  142|  16.0k|            '\\' => result.push_str(r"\\"),
  143|       |            // ## Special control sequences.
  144|  4.43k|            '\u{0008}' => result.push_str(r"\b"),
  145|    789|            '\u{000C}' => result.push_str(r"\f"),
  146|    173|            '\n' => result.push_str(r"\n"),
  147|  2.01k|            '\r' => result.push_str(r"\r"),
  148|    558|            '\t' => result.push_str(r"\t"),
  149|       |            // ## Other control sequences escaped as Unicode escapes.
  150|  68.0k|            '\u{0000}'..='\u{001F}' => write!(result, "\\u{:0>4x}", c as u8).unwrap(),
  151|       |            // # Non-escapable characters.
  152|  61.6k|            _ => result.push(c),
  153|       |        }
  154|       |    }
  155|       |
  156|  43.2k|    result
  157|  43.2k|}
_RNvXs0_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  87.5k|    fn from(value: JsonStringBuilder) -> Self {
   59|  87.5k|        value.finish()
   60|  87.5k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|   130k|    pub(crate) fn finish(mut self) -> JsonString {
   51|   130k|        self.quoted.push('"');
   52|   130k|        JsonString { quoted: self.quoted }
   53|   130k|    }
_RNvXs6_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringNtCs98o54wqeRSK_9arbitrary9Arbitrary9arbitraryB7_:
  228|  87.5k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
  229|  87.5k|        let chars = u.arbitrary_iter()?;
  230|  87.5k|        let mut builder = JsonStringBuilder::new();
  231|       |
  232|       |        // RFC 7159: All Unicode characters may be placed [in the string],
  233|       |        // except for characters that must be escaped: quotation mark,
  234|       |        // reverse solidus, and the control characters (U+0000 through U+001F).
  235|   200k|        for c in chars {
  236|   112k|            let c = c?;
  237|   112k|            match c {
  238|   112k|                '\u{0000}'..='\u{001F}' | '\"' | '\\' => {
  239|  20.9k|                    builder.push('\\');
  240|  20.9k|                    builder.push(c);
  241|  20.9k|                }
  242|  91.5k|                _ => {
  243|  91.5k|                    builder.push(c);
  244|  91.5k|                }
  245|       |            }
  246|       |        }
  247|       |
  248|  87.5k|        Ok(builder.into())
  249|  87.5k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|   130k|    pub(crate) fn new() -> Self {
   40|   130k|        Self {
   41|   130k|            quoted: String::from('"'),
   42|   130k|        }
   43|   130k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|   230k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|   230k|        self.quoted.push(char);
   47|   230k|        self
   48|   230k|    }

