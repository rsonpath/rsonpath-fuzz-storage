_RNvXsk_CseqPaQU5Ex3q_9arbitraryReNtB5_9Arbitrary9size_hintCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
  868|  1.07k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  1.07k|        (0, None)
  870|  1.07k|    }
_RNvXsk_CseqPaQU5Ex3q_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  1.07k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  1.07k|        let size = u.len();
  864|  1.07k|        arbitrary_str(&mut u, size)
  865|  1.07k|    }

_RNvMNtCseqPaQU5Ex3q_9arbitrary12unstructuredNtB2_12Unstructured3newCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
   85|  1.07k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.07k|        Unstructured { data }
   87|  1.07k|    }
_RNvMNtCseqPaQU5Ex3q_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  1.07k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  1.07k|        self.data.get(..size)
  581|  1.07k|    }
_RNvMNtCseqPaQU5Ex3q_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  1.07k|    pub fn len(&self) -> usize {
  109|  1.07k|        self.data.len()
  110|  1.07k|    }
_RNvMNtCseqPaQU5Ex3q_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  1.07k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  1.07k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  1.07k|        }
  552|  1.07k|
  553|  1.07k|        let (for_buf, rest) = self.data.split_at(size);
  554|  1.07k|        self.data = rest;
  555|  1.07k|        Ok(for_buf)
  556|  1.07k|    }

rust_fuzzer_test_input:
  259|  1.07k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.07k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.07k|
  262|  1.07k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.07k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.07k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.07k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.07k|                // get to longer inputs that actually lead to interesting executions
  267|  1.07k|                // quicker.
  268|  1.07k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.07k|                }
  271|  1.07k|
  272|  1.07k|                let mut u = Unstructured::new(bytes);
  273|  1.07k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.07k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.07k|                }
  291|       |
  292|  1.07k|                let data = match data {
  293|  1.07k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.07k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.07k|                result.to_libfuzzer_code()
  299|  1.07k|            }
_RNvNvCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  1.07k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  1.07k|                $body
  305|  1.07k|            }
_RNvXCs9LliYg8ug9X_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
   30|  1.07k|    fn from(_: ()) -> Self {
   31|  1.07k|        Self::Keep
   32|  1.07k|    }
_RNvMs_Cs9LliYg8ug9X_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
   40|  1.07k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.07k|        match self {
   42|  1.07k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.07k|    }
LLVMFuzzerTestOneInput:
   58|  1.07k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.07k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.07k|    });
   63|  1.07k|
   64|  1.07k|    match test_input {
   65|  1.07k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.07k|}
_RNCNvCs9LliYg8ug9X_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.07k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.07k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.07k|        rust_fuzzer_test_input(data_slice)
   62|  1.07k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator6verifyBz_ccBC_NCINvNtNtB6_9character8complete7none_ofBz_Bz_BC_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB1H_4charBz_BC_E0EE0B2w_:
   50|  22.1k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_Bx_Bz_B1t_NCINvB1X_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1t_NCINvNtB4_8sequence4pairBx_cB2T_B1t_NCINvB1X_6verifyBx_ccB1t_INvNtNtB4_9character8complete7anycharBx_B1t_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1t_NCIB4a_Bx_ccB1t_B4w_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0NCINvB3C_9delimitedBx_cBz_cB1t_NCINvB4z_4charBx_B1t_E0NCIB0_Bx_Bz_B1t_TNCIB7l_Bx_cBz_cB1t_B7N_NCIB1V_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB2Y_6string6StringEBz_B1t_NCINvB1X_3optBx_B9A_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB1V_Bx_IB2U_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvB5I_5many1Bx_Bby_B1t_NCIB0_Bx_Bby_B1t_TNCIB1V_Bx_cBby_B1t_NCIB4a_Bx_ccB1t_NCINvB4z_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtBby_4Char0E0NCIB1V_Bx_cBby_B1t_B7N_NcNtBby_7Escaped0E0EE0E0NcBbW_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB1X_5valueBx_Bx_Bx_B1t_NCINvBax_3tagBx_Bx_B1t_E0E0Bgc_Bgc_Bgc_Bgc_Bgc_Bgc_EE0Bgc_EE0BbW_Bx_cB9A_E0E0NvYBz_INtNtB93_7convert4FromB8Y_E4fromE0B7N_E0NCIB7l_Bx_cBz_cB1t_B7N_NCIB1V_Bx_B8Y_Bz_B1t_NCIBa7_Bx_B9A_B1t_NCIBav_Bx_B1t_NCIB2y_Bx_B2T_B1t_NCIBct_Bx_cB1t_NCIB0_Bx_cB1t_TBdr_B7N_EE0E0E0BfE_Bx_Bx_cB9A_E0E0BhT_E0B7N_E0EE0B7N_E0EEBD_:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator6verifyBx_ccBA_NCINvNtNtB4_9character8complete7none_ofBx_Bx_BA_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB1F_4charBx_BA_E0EEB2u_:
   47|   120k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   120k|  mut l: List,
   49|   120k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReBz_INtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator5valueBz_Bz_Bz_BE_NCINvNtNtB6_5bytes8complete3tagBz_Bz_BE_E0E0B13_B13_B13_B13_B13_B13_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   50|  8.55k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtNtB6_9character8complete4charBz_BC_E0NCINvNtB6_8sequence9delimitedBz_cccBC_B11_B11_B11_E0EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   50|  10.2k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_ccBC_NCINvNtNtB6_9character8complete4charBz_BC_E0B1B_E0NCINvB16_9delimitedBz_cccBC_B1B_B1B_B1B_E0EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   50|  98.5k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_cBB_B1z_NCINvB23_6verifyBz_ccB1z_NCINvNtNtB6_9character8complete7none_ofBz_Bz_B1z_E0NCNvBD_9unescaped0E0NcNtBB_4Char0E0NCIB21_Bz_cBB_B1z_NCINvB33_4charBz_B1z_E0NcNtBB_7Escaped0E0EE0BF_:
   50|  22.5k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_ccBA_NCINvNtNtB4_9character8complete4charBx_BA_E0B1z_E0NCINvB14_9delimitedBx_cccBA_B1z_B1z_B1z_E0EECsaVj0Slin5kQ_15rsonpath_syntax:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededReccINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B12_E0B1q_E0NCINvBB_9delimitedBY_cccB12_B1q_B1q_B1q_E0EINtB4_3AltBY_cB12_E6choiceCsaVj0Slin5kQ_15rsonpath_syntax:
  134|  98.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  98.5k|        match self.0.parse(input.clone()) {
  136|  91.0k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.57k|          res => res,
  138|       |        }
  139|  98.5k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B11_B11_B11_B11_B11_B11_EECsaVj0Slin5kQ_15rsonpath_syntax:
   47|   240k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   240k|  mut l: List,
   49|   240k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   240k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence8precededBz_cBB_B1v_NCINvNtNtB6_9character8complete4charBz_B1v_E0NCINvNtB6_10combinator3mapBz_Bz_BB_B1v_NCINvB3l_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1v_NCINvB1Z_4pairBz_cB4h_B1v_NCINvB3l_6verifyBz_ccB1v_INvB2C_7anycharBz_B1v_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1v_NCIB5o_Bz_ccB1v_B5K_NCNvBD_16member_character0E0E0E0E0NcNtBB_8Borrowed0E0E0NCINvB1Z_9delimitedBz_cBB_cB1v_B2x_NCIB2_Bz_BB_B1v_TNCIB8f_Bz_cBB_cB1v_B2x_NCIB3j_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4m_6string6StringEBB_B1v_NCINvB3l_3optBz_Bab_B1v_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1v_NCIB3j_Bz_IB4i_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1v_NCINvB6A_5many1Bz_Bc9_B1v_NCIB2_Bz_Bc9_B1v_TNCIB3j_Bz_cBc9_B1v_NCIB5o_Bz_ccB1v_NCINvB2C_7none_ofBz_Bz_B1v_E0NCNvBD_9unescaped0E0NcNtBc9_4Char0E0NCIB3j_Bz_cBc9_B1v_B2x_NcNtBc9_7Escaped0E0EE0E0NcBcx_0E0NCIB2_Bz_Bz_B1v_TNCIB2_Bz_Bz_B1v_TNCINvB3l_5valueBz_Bz_Bz_B1v_NCINvBb8_3tagBz_Bz_B1v_E0E0BgN_BgN_BgN_BgN_BgN_BgN_EE0BgN_EE0Bcx_Bz_cBab_E0E0NvYBB_INtNtB9E_7convert4FromB9z_E4fromE0B2x_E0NCIB8f_Bz_cBB_cB1v_B2x_NCIB3j_Bz_B9z_BB_B1v_NCIBaI_Bz_Bab_B1v_NCIBb6_Bz_B1v_NCIB3W_Bz_B4h_B1v_NCIBd4_Bz_cB1v_NCIB2_Bz_cB1v_TBe2_B2x_EE0E0E0Bgf_Bz_Bz_cBab_E0E0Biu_E0B2x_E0EE0B2x_E0EE0BF_:
   50|  90.7k|  move |i: I| l.choice(i)
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBY_ENCINvNtNtB6_9character8complete4charBY_B1V_E0NCINvNtB6_10combinator3mapBY_BY_B11_B1V_NCINvB37_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1V_NCINvBB_4pairBY_cB44_B1V_NCINvB37_6verifyBY_ccB1V_INvB2o_7anycharBY_B1V_ENCNvB13_12member_first0E0NCINvNtB6_5multi5many0BY_cB1V_NCIB5a_BY_ccB1V_B5w_NCNvB13_16member_character0E0E0E0E0NcNtB11_8Borrowed0E0E0NCINvBB_9delimitedBY_cB11_cB1V_B2j_NCINvB4_3altBY_B11_B1V_TNCIB84_BY_cB11_cB1V_B2j_NCIB35_BY_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB49_6string6StringEB11_B1V_NCINvB37_3optBY_Ba8_B1V_NCINvNtNtB6_5bytes8complete17escaped_transformBY_B1V_NCIB35_BY_IB45_NtB13_16MaybeEscapedCharENtB13_19MaybeEscapedCharVecB1V_NCINvB6n_5many1BY_Bc7_B1V_NCIB8D_BY_Bc7_B1V_TNCIB35_BY_cBc7_B1V_NCIB5a_BY_ccB1V_NCINvB2o_7none_ofBY_BY_B1V_E0NCNvB13_9unescaped0E0NcNtBc7_4Char0E0NCIB35_BY_cBc7_B1V_B2j_NcNtBc7_7Escaped0E0EE0E0NcBcw_0E0NCIB8D_BY_BY_B1V_TNCIB8D_BY_BY_B1V_TNCINvB37_5valueBY_BY_BY_B1V_NCINvBb6_3tagBY_BY_B1V_E0E0BgR_BgR_BgR_BgR_BgR_BgR_EE0BgR_EE0Bcw_BY_cBa8_E0E0NvYB11_INtNtB9B_7convert4FromB9w_E4fromE0B2j_E0NCIB84_BY_cB11_cB1V_B2j_NCIB35_BY_B9w_B11_B1V_NCIBaG_BY_Ba8_B1V_NCIBb4_BY_B1V_NCIB3J_BY_B44_B1V_NCIBd4_BY_cB1V_NCIB8D_BY_cB1V_TBe3_B2j_EE0E0E0Bgh_BY_BY_cBa8_E0E0Biy_E0B2j_E0EE0B2j_E0EINtB4_3AltBY_B11_B1V_E6choiceB15_:
  134|  90.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  90.7k|        match self.0.parse(input.clone()) {
  136|  66.4k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  24.3k|          res => res,
  138|       |        }
  139|  90.7k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_Bz_BB_B1v_NCINvB1Z_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1v_NCINvNtB6_8sequence4pairBz_cB2V_B1v_NCINvB1Z_6verifyBz_ccB1v_INvNtNtB6_9character8complete7anycharBz_B1v_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1v_NCIB4c_Bz_ccB1v_B4y_NCNvBD_16member_character0E0E0E0E0NcNtBB_8Borrowed0E0NCINvB3E_9delimitedBz_cBB_cB1v_NCINvB4B_4charBz_B1v_E0NCIB2_Bz_BB_B1v_TNCIB7n_Bz_cBB_cB1v_B7P_NCIB1X_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB30_6string6StringEBB_B1v_NCINvB1Z_3optBz_B9C_B1v_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1v_NCIB1X_Bz_IB2W_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1v_NCINvB5K_5many1Bz_BbA_B1v_NCIB2_Bz_BbA_B1v_TNCIB1X_Bz_cBbA_B1v_NCIB4c_Bz_ccB1v_NCINvB4B_7none_ofBz_Bz_B1v_E0NCNvBD_9unescaped0E0NcNtBbA_4Char0E0NCIB1X_Bz_cBbA_B1v_B7P_NcNtBbA_7Escaped0E0EE0E0NcBbY_0E0NCIB2_Bz_Bz_B1v_TNCIB2_Bz_Bz_B1v_TNCINvB1Z_5valueBz_Bz_Bz_B1v_NCINvBaz_3tagBz_Bz_B1v_E0E0Bge_Bge_Bge_Bge_Bge_Bge_EE0Bge_EE0BbY_Bz_cB9C_E0E0NvYBB_INtNtB95_7convert4FromB90_E4fromE0B7P_E0NCIB7n_Bz_cBB_cB1v_B7P_NCIB1X_Bz_B90_BB_B1v_NCIBa9_Bz_B9C_B1v_NCIBax_Bz_B1v_NCIB2A_Bz_B2V_B1v_NCIBcv_Bz_cB1v_NCIB2_Bz_cB1v_TBdt_B7P_EE0E0E0BfG_Bz_Bz_cB9C_E0E0BhV_E0B7P_E0EE0B7P_E0EE0BF_:
   50|  9.26k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_INtNtB4_5error5ErrorBx_ETNCIB0_Bx_Bx_BC_TNCINvNtB4_10combinator5valueBx_Bx_Bx_BC_NCINvNtNtB4_5bytes8complete3tagBx_Bx_BC_E0E0B1h_B1h_B1h_B1h_B1h_B1h_EE0B1h_EECsaVj0Slin5kQ_15rsonpath_syntax:
   47|   240k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   240k|  mut l: List,
   49|   240k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   240k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB6_5error5ErrorBZ_ENCINvNtNtB6_9character8complete4charBZ_B1X_E0NCINvNtB6_10combinator3mapBZ_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEB12_B1X_NCINvB39_3optBZ_B49_B1X_NCINvNtNtB6_5bytes8complete17escaped_transformBZ_B1X_NCIB37_BZ_INtNtB4d_3vec3VecNtB14_16MaybeEscapedCharENtB14_19MaybeEscapedCharVecB1X_NCINvNtB6_5multi5many1BZ_B6A_B1X_NCINvB4_3altBZ_B6A_B1X_TNCIB37_BZ_cB6A_B1X_NCINvB39_6verifyBZ_ccB1X_NCINvB2q_7none_ofBZ_BZ_B1X_E0NCNvB14_9unescaped0E0NcNtB6A_4Char0E0NCIB37_BZ_cB6A_B1X_B2l_NcNtB6A_7Escaped0E0EE0E0NcB6Z_0E0NCIB84_BZ_BZ_B1X_TNCIB84_BZ_BZ_B1X_TNCINvB39_5valueBZ_BZ_BZ_B1X_NCINvB5n_3tagBZ_BZ_B1X_E0E0BbF_BbF_BbF_BbF_BbF_BbF_EE0BbF_EE0B6Z_BZ_cB49_E0E0NvYB12_INtNtB3C_7convert4FromB3x_E4fromE0B2l_E0NCIBz_BZ_cB12_cB1X_B2l_NCIB37_BZ_B3x_B12_B1X_NCIB4X_BZ_B49_B1X_NCIB5l_BZ_B1X_NCINvB39_9recognizeBZ_IB6k_cEB1X_NCIB7x_BZ_cB1X_NCIB84_BZ_cB1X_TB8I_B2l_EE0E0E0Bb5_BZ_BZ_cB49_E0E0Bdm_E0B2l_E0EINtB4_3AltBZ_B12_B1X_E6choiceB16_:
  134|  14.2k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  14.2k|        match self.0.parse(input.clone()) {
  136|  12.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  2.09k|          res => res,
  138|       |        }
  139|  14.2k|      }
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_10combinator3mapReBW_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBW_ENCINvBB_9recognizeBW_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1V_NCINvNtB6_8sequence4pairBW_cB2G_B1V_NCINvBB_6verifyBW_ccB1V_INvNtNtB6_9character8complete7anycharBW_B1V_ENCNvB13_12member_first0E0NCINvNtB6_5multi5many0BW_cB1V_NCIB3X_BW_ccB1V_B4i_NCNvB13_16member_character0E0E0E0E0NcNtB11_8Borrowed0E0NCINvB3p_9delimitedBW_cB11_cB1V_NCINvB4l_4charBW_B1V_E0NCINvB4_3altBW_B11_B1V_TNCIB7a_BW_cB11_cB1V_B7D_NCIBz_BW_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB2L_6string6StringEB11_B1V_NCINvBB_3optBW_B9x_B1V_NCINvNtNtB6_5bytes8complete17escaped_transformBW_B1V_NCIBz_BW_IB2H_NtB13_16MaybeEscapedCharENtB13_19MaybeEscapedCharVecB1V_NCINvB5v_5many1BW_Bbu_B1V_NCIB83_BW_Bbu_B1V_TNCIBz_BW_cBbu_B1V_NCIB3X_BW_ccB1V_NCINvB4l_7none_ofBW_BW_B1V_E0NCNvB13_9unescaped0E0NcNtBbu_4Char0E0NCIBz_BW_cBbu_B1V_B7D_NcNtBbu_7Escaped0E0EE0E0NcBbT_0E0NCIB83_BW_BW_B1V_TNCIB83_BW_BW_B1V_TNCINvBB_5valueBW_BW_BW_B1V_NCINvBau_3tagBW_BW_B1V_E0E0Bgc_Bgc_Bgc_Bgc_Bgc_Bgc_EE0Bgc_EE0BbT_BW_cB9x_E0E0NvYB11_INtNtB90_7convert4FromB8V_E4fromE0B7D_E0NCIB7a_BW_cB11_cB1V_B7D_NCIBz_BW_B8V_B11_B1V_NCIBa5_BW_B9x_B1V_NCIBas_BW_B1V_NCIB2m_BW_B2G_B1V_NCIBcr_BW_cB1V_NCIB83_BW_cB1V_TBdp_B7D_EE0E0E0BfC_BW_BW_cB9x_E0E0BhS_E0B7D_E0EE0B7D_E0EINtB4_3AltBW_B11_B1V_E6choiceB15_:
  134|  9.26k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  9.26k|        match self.0.parse(input.clone()) {
  136|  5.52k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  3.73k|          res => res,
  138|       |        }
  139|  9.26k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBz_ETNCINvNtB6_8sequence9delimitedBz_cBB_cB1v_NCINvNtNtB6_9character8complete4charBz_B1v_E0NCINvNtB6_10combinator3mapBz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBB_B1v_NCINvB3n_3optBz_B4n_B1v_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1v_NCIB3l_Bz_INtNtB4r_3vec3VecNtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1v_NCINvNtB6_5multi5many1Bz_B6N_B1v_NCIB2_Bz_B6N_B1v_TNCIB3l_Bz_cB6N_B1v_NCINvB3n_6verifyBz_ccB1v_NCINvB2E_7none_ofBz_Bz_B1v_E0NCNvBD_9unescaped0E0NcNtB6N_4Char0E0NCIB3l_Bz_cB6N_B1v_B2z_NcNtB6N_7Escaped0E0EE0E0NcB7b_0E0NCIB2_Bz_Bz_B1v_TNCIB2_Bz_Bz_B1v_TNCINvB3n_5valueBz_Bz_Bz_B1v_NCINvB5A_3tagBz_Bz_B1v_E0E0BbH_BbH_BbH_BbH_BbH_BbH_EE0BbH_EE0B7b_Bz_cB4n_E0E0NvYBB_INtNtB3Q_7convert4FromB3L_E4fromE0B2z_E0NCIB1X_Bz_cBB_cB1v_B2z_NCIB3l_Bz_B3L_BB_B1v_NCIB5a_Bz_B4n_B1v_NCIB5y_Bz_B1v_NCINvB3n_9recognizeBz_IB6x_cEB1v_NCIB7I_Bz_cB1v_NCIB2_Bz_cB1v_TB8N_B2z_EE0E0E0Bb9_Bz_Bz_cB4n_E0E0Bdo_E0B2z_E0EE0BF_:
   50|  14.2k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_NtBD_12MemberStringBB_B1n_NCIB2_Bz_B2f_B1n_TNCIB1P_Bz_Bz_B2f_B1n_NCINvB1R_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1n_NCINvNtB6_8sequence4pairBz_cB3G_B1n_NCINvB1R_6verifyBz_ccB1n_INvNtNtB6_9character8complete7anycharBz_B1n_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1n_NCIB4X_Bz_ccB1n_B5j_NCNvBD_16member_character0E0E0E0E0NcNtB2f_8Borrowed0E0NCINvB4p_9delimitedBz_cB2f_cB1n_NCINvB5m_4charBz_B1n_E0NCIB2_Bz_B2f_B1n_TNCIB89_Bz_cB2f_cB1n_B8C_NCIB1P_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3L_6string6StringEB2f_B1n_NCINvB1R_3optBz_Bar_B1n_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1n_NCIB1P_Bz_IB3H_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1n_NCINvB6v_5many1Bz_Bcq_B1n_NCIB2_Bz_Bcq_B1n_TNCIB1P_Bz_cBcq_B1n_NCIB4X_Bz_ccB1n_NCINvB5m_7none_ofBz_Bz_B1n_E0NCNvBD_9unescaped0E0NcNtBcq_4Char0E0NCIB1P_Bz_cBcq_B1n_B8C_NcNtBcq_7Escaped0E0EE0E0NcBcO_0E0NCIB2_Bz_Bz_B1n_TNCIB2_Bz_Bz_B1n_TNCINvB1R_5valueBz_Bz_Bz_B1n_NCINvBbp_3tagBz_Bz_B1n_E0E0Bh4_Bh4_Bh4_Bh4_Bh4_Bh4_EE0Bh4_EE0BcO_Bz_cBar_E0E0NvYB2f_INtNtB9U_7convert4FromB9P_E4fromE0B8C_E0NCIB89_Bz_cB2f_cB1n_B8C_NCIB1P_Bz_B9P_B2f_B1n_NCIBaZ_Bz_Bar_B1n_NCIBbn_Bz_B1n_NCIB3l_Bz_B3G_B1n_NCIBdl_Bz_cB1n_NCIB2_Bz_cB1n_TBej_B8C_EE0E0E0Bgw_Bz_Bz_cBar_E0E0BiL_E0B8C_E0EE0B8C_E0EE0NcNtBB_10Descendant0E0NCIB1P_Bz_NtNtBF_3num8JsonUIntBB_B1n_NCIB89_Bz_cBn0_cB1n_B8C_NCINvB1R_7map_resBz_Bn0_Bn0_B1n_NtBiV_10InfallibleNCIBnS_Bz_Bz_Bn0_B1n_NtNtBn2_5error17JsonIntParseErrorINvB5m_6digit1Bz_B1n_EINvMNtB9U_3stre5parseBn0_EE0NvYBn0_INtBiV_7TryIntoBn0_E8try_intoE0B8C_E0NcNtBB_20ArrayIndexDescendant0E0EE0BF_:
   50|  9.26k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReBz_INtNtB6_5error5ErrorBz_ETNCIB2_Bz_Bz_BE_TNCINvNtB6_10combinator5valueBz_Bz_Bz_BE_NCINvNtNtB6_5bytes8complete3tagBz_Bz_BE_E0E0B1j_B1j_B1j_B1j_B1j_B1j_EE0B1j_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   50|  8.55k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBz_ETNCINvNtB6_10combinator3mapBz_cBB_B1n_NCIB2_Bz_cB1n_TNCINvNtB6_8sequence8precededBz_ccB1n_NCINvNtNtB6_9character8complete4charBz_B1n_E0B3d_E0NCINvB2H_9delimitedBz_cccB1n_B3d_B3d_B3d_E0EE0NCNvBD_23wildcard_child_selector0E0NCIB1P_Bz_NtBD_12MemberStringBB_B1n_NCIB2_Bz_B5v_B1n_TNCIB2F_Bz_cB5v_B1n_B3d_NCIB1P_Bz_Bz_B5v_B1n_NCINvB1R_9recognizeBz_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1n_NCINvB2H_4pairBz_cB7j_B1n_NCINvB1R_6verifyBz_ccB1n_INvB3i_7anycharBz_B1n_ENCNvBD_12member_first0E0NCINvNtB6_5multi5many0Bz_cB1n_NCIB8q_Bz_ccB1n_B8M_NCNvBD_16member_character0E0E0E0E0NcNtB5v_8Borrowed0E0E0NCIB45_Bz_cB5v_cB1n_B3d_NCIB2_Bz_B5v_B1n_TNCIB45_Bz_cB5v_cB1n_B3d_NCIB1P_Bz_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7o_6string6StringEB5v_B1n_NCINvB1R_3optBz_Bd5_B1n_NCINvNtNtB6_5bytes8complete17escaped_transformBz_B1n_NCIB1P_Bz_IB7k_NtBD_16MaybeEscapedCharENtBD_19MaybeEscapedCharVecB1n_NCINvB9C_5many1Bz_Bf4_B1n_NCIB2_Bz_Bf4_B1n_TNCIB1P_Bz_cBf4_B1n_NCIB8q_Bz_ccB1n_NCINvB3i_7none_ofBz_Bz_B1n_E0NCNvBD_9unescaped0E0NcNtBf4_4Char0E0NCIB1P_Bz_cBf4_B1n_B3d_NcNtBf4_7Escaped0E0EE0E0NcBfs_0E0NCIB2_Bz_Bz_B1n_TNCIB2_Bz_Bz_B1n_TNCINvB1R_5valueBz_Bz_Bz_B1n_NCINvBe3_3tagBz_Bz_B1n_E0E0BjI_BjI_BjI_BjI_BjI_BjI_EE0BjI_EE0Bfs_Bz_cBd5_E0E0NvYB5v_INtNtBcy_7convert4FromBct_E4fromE0B3d_E0NCIB45_Bz_cB5v_cB1n_B3d_NCIB1P_Bz_Bct_B5v_B1n_NCIBdD_Bz_Bd5_B1n_NCIBe1_Bz_B1n_NCIB6Y_Bz_B7j_B1n_NCIBfZ_Bz_cB1n_NCIB2_Bz_cB1n_TBgX_B3d_EE0E0E0Bja_Bz_Bz_cBd5_E0E0Blp_E0B3d_E0EE0B3d_E0EE0NcNtBB_5Child0E0NCIB1P_Bz_NtNtBF_3num8JsonUIntBB_B1n_NCIB45_Bz_cBpy_cB1n_B3d_NCINvB1R_7map_resBz_Bpy_Bpy_B1n_NtBlz_10InfallibleNCIBqq_Bz_Bz_Bpy_B1n_NtNtBpA_5error17JsonIntParseErrorINvB3i_6digit1Bz_B1n_EINvMNtBcy_3stre5parseBpy_EE0NvYBpy_INtBlz_7TryIntoBpy_E8try_intoE0B3d_E0NcNtBB_15ArrayIndexChild0E0NCIB1P_Bz_cBB_B1n_NCIB2F_Bz_Bz_cB1n_Bka_NCIB2_Bz_cB1n_TB3d_B42_EE0E0NCNvBD_28wildcard_descendant_selector0E0NCIB2F_Bz_Bz_BB_B1n_Bka_NCIB2_Bz_BB_B1n_TNCIB1P_Bz_B5v_BB_B1n_NCIB2_Bz_B5v_B1n_TB6A_Bbf_EE0NcNtBB_10Descendant0E0NCIB1P_Bz_Bpy_BB_B1n_BpZ_NcNtBB_20ArrayIndexDescendant0E0EE0E0EE0BF_:
   50|  98.5k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence8precededBx_cBz_B1t_NCINvNtNtB4_9character8complete4charBx_B1t_E0NCINvNtB4_10combinator3mapBx_Bx_Bz_B1t_NCINvB3j_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1t_NCINvB1X_4pairBx_cB4f_B1t_NCINvB3j_6verifyBx_ccB1t_INvB2A_7anycharBx_B1t_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1t_NCIB5m_Bx_ccB1t_B5I_NCNvBB_16member_character0E0E0E0E0NcNtBz_8Borrowed0E0E0NCINvB1X_9delimitedBx_cBz_cB1t_B2v_NCIB0_Bx_Bz_B1t_TNCIB8d_Bx_cBz_cB1t_B2v_NCIB3h_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4k_6string6StringEBz_B1t_NCINvB3j_3optBx_Ba9_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB3h_Bx_IB4g_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvB6y_5many1Bx_Bc7_B1t_NCIB0_Bx_Bc7_B1t_TNCIB3h_Bx_cBc7_B1t_NCIB5m_Bx_ccB1t_NCINvB2A_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtBc7_4Char0E0NCIB3h_Bx_cBc7_B1t_B2v_NcNtBc7_7Escaped0E0EE0E0NcBcv_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB3j_5valueBx_Bx_Bx_B1t_NCINvBb6_3tagBx_Bx_B1t_E0E0BgL_BgL_BgL_BgL_BgL_BgL_EE0BgL_EE0Bcv_Bx_cBa9_E0E0NvYBz_INtNtB9C_7convert4FromB9x_E4fromE0B2v_E0NCIB8d_Bx_cBz_cB1t_B2v_NCIB3h_Bx_B9x_Bz_B1t_NCIBaG_Bx_Ba9_B1t_NCIBb4_Bx_B1t_NCIB3U_Bx_B4f_B1t_NCIBd2_Bx_cB1t_NCIB0_Bx_cB1t_TBe0_B2v_EE0E0E0Bgd_Bx_Bx_cBa9_E0E0Bis_E0B2v_E0EE0B2v_E0EEBD_:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_10combinator6verifyReccINtNtB6_5error5ErrorBZ_ENCINvNtNtB6_9character8complete7none_ofBZ_BZ_B13_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB1w_4charBZ_B13_E0EINtB4_3AltBZ_cB13_E6choiceB2m_:
  134|  22.1k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  22.1k|        match self.0.parse(input.clone()) {
  136|  11.6k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  10.4k|          res => res,
  138|       |        }
  139|  22.1k|      }
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtNtB6_9character8complete4charReINtNtB6_5error5ErrorB16_EE0NCINvNtB6_8sequence9delimitedB16_cccB18_Bw_Bw_Bw_E0EINtB4_3AltB16_cB18_E6choiceCsaVj0Slin5kQ_15rsonpath_syntax:
  134|  10.2k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  10.2k|        match self.0.parse(input.clone()) {
  136|  9.47k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    731|          res => res,
  138|       |        }
  139|  10.2k|      }
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB6_5error5ErrorBW_ENCINvBB_6verifyBW_ccB1X_NCINvNtNtB6_9character8complete7none_ofBW_BW_B1X_E0NCNvB11_9unescaped0E0NcNtBZ_4Char0E0NCIBz_BW_cBZ_B1X_NCINvB2O_4charBW_B1X_E0NcNtBZ_7Escaped0E0EINtB4_3AltBW_BZ_B1X_E6choiceB13_:
  134|  22.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  22.5k|        match self.0.parse(input.clone()) {
  136|  10.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  11.8k|          res => res,
  138|       |        }
  139|  22.5k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1l_NCIB0_Bx_cB1l_TNCINvNtB4_8sequence8precededBx_ccB1l_NCINvNtNtB4_9character8complete4charBx_B1l_E0B3b_E0NCINvB2F_9delimitedBx_cccB1l_B3b_B3b_B3b_E0EE0NCNvBB_23wildcard_child_selector0E0NCIB1N_Bx_NtBB_12MemberStringBz_B1l_NCIB0_Bx_B5t_B1l_TNCIB2D_Bx_cB5t_B1l_B3b_NCIB1N_Bx_Bx_B5t_B1l_NCINvB1P_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1l_NCINvB2F_4pairBx_cB7h_B1l_NCINvB1P_6verifyBx_ccB1l_INvB3g_7anycharBx_B1l_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1l_NCIB8o_Bx_ccB1l_B8K_NCNvBB_16member_character0E0E0E0E0NcNtB5t_8Borrowed0E0E0NCIB43_Bx_cB5t_cB1l_B3b_NCIB0_Bx_B5t_B1l_TNCIB43_Bx_cB5t_cB1l_B3b_NCIB1N_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7m_6string6StringEB5t_B1l_NCINvB1P_3optBx_Bd3_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1l_NCIB1N_Bx_IB7i_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1l_NCINvB9A_5many1Bx_Bf2_B1l_NCIB0_Bx_Bf2_B1l_TNCIB1N_Bx_cBf2_B1l_NCIB8o_Bx_ccB1l_NCINvB3g_7none_ofBx_Bx_B1l_E0NCNvBB_9unescaped0E0NcNtBf2_4Char0E0NCIB1N_Bx_cBf2_B1l_B3b_NcNtBf2_7Escaped0E0EE0E0NcBfq_0E0NCIB0_Bx_Bx_B1l_TNCIB0_Bx_Bx_B1l_TNCINvB1P_5valueBx_Bx_Bx_B1l_NCINvBe1_3tagBx_Bx_B1l_E0E0BjG_BjG_BjG_BjG_BjG_BjG_EE0BjG_EE0Bfq_Bx_cBd3_E0E0NvYB5t_INtNtBcw_7convert4FromBcr_E4fromE0B3b_E0NCIB43_Bx_cB5t_cB1l_B3b_NCIB1N_Bx_Bcr_B5t_B1l_NCIBdB_Bx_Bd3_B1l_NCIBdZ_Bx_B1l_NCIB6W_Bx_B7h_B1l_NCIBfX_Bx_cB1l_NCIB0_Bx_cB1l_TBgV_B3b_EE0E0E0Bj8_Bx_Bx_cBd3_E0E0Bln_E0B3b_E0EE0B3b_E0EE0NcNtBz_5Child0E0NCIB1N_Bx_NtNtBD_3num8JsonUIntBz_B1l_NCIB43_Bx_cBpw_cB1l_B3b_NCINvB1P_7map_resBx_Bpw_Bpw_B1l_NtBlx_10InfallibleNCIBqo_Bx_Bx_Bpw_B1l_NtNtBpy_5error17JsonIntParseErrorINvB3g_6digit1Bx_B1l_EINvMNtBcw_3stre5parseBpw_EE0NvYBpw_INtBlx_7TryIntoBpw_E8try_intoE0B3b_E0NcNtBz_15ArrayIndexChild0E0NCIB1N_Bx_cBz_B1l_NCIB2D_Bx_Bx_cB1l_Bk8_NCIB0_Bx_cB1l_TB3b_B40_EE0E0NCNvBB_28wildcard_descendant_selector0E0NCIB2D_Bx_Bx_Bz_B1l_Bk8_NCIB0_Bx_Bz_B1l_TNCIB1N_Bx_B5t_Bz_B1l_NCIB0_Bx_B5t_B1l_TB6y_Bbd_EE0NcNtBz_10Descendant0E0NCIB1N_Bx_Bpw_Bz_B1l_BpX_NcNtBz_20ArrayIndexDescendant0E0EE0E0EEBD_:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_NtBB_12MemberStringBz_B1l_NCIB0_Bx_B2d_B1l_TNCIB1N_Bx_Bx_B2d_B1l_NCINvB1P_9recognizeBx_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1l_NCINvNtB4_8sequence4pairBx_cB3E_B1l_NCINvB1P_6verifyBx_ccB1l_INvNtNtB4_9character8complete7anycharBx_B1l_ENCNvBB_12member_first0E0NCINvNtB4_5multi5many0Bx_cB1l_NCIB4V_Bx_ccB1l_B5h_NCNvBB_16member_character0E0E0E0E0NcNtB2d_8Borrowed0E0NCINvB4n_9delimitedBx_cB2d_cB1l_NCINvB5k_4charBx_B1l_E0NCIB0_Bx_B2d_B1l_TNCIB87_Bx_cB2d_cB1l_B8A_NCIB1N_Bx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3J_6string6StringEB2d_B1l_NCINvB1P_3optBx_Bap_B1l_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1l_NCIB1N_Bx_IB3F_NtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1l_NCINvB6t_5many1Bx_Bco_B1l_NCIB0_Bx_Bco_B1l_TNCIB1N_Bx_cBco_B1l_NCIB4V_Bx_ccB1l_NCINvB5k_7none_ofBx_Bx_B1l_E0NCNvBB_9unescaped0E0NcNtBco_4Char0E0NCIB1N_Bx_cBco_B1l_B8A_NcNtBco_7Escaped0E0EE0E0NcBcM_0E0NCIB0_Bx_Bx_B1l_TNCIB0_Bx_Bx_B1l_TNCINvB1P_5valueBx_Bx_Bx_B1l_NCINvBbn_3tagBx_Bx_B1l_E0E0Bh2_Bh2_Bh2_Bh2_Bh2_Bh2_EE0Bh2_EE0BcM_Bx_cBap_E0E0NvYB2d_INtNtB9S_7convert4FromB9N_E4fromE0B8A_E0NCIB87_Bx_cB2d_cB1l_B8A_NCIB1N_Bx_B9N_B2d_B1l_NCIBaX_Bx_Bap_B1l_NCIBbl_Bx_B1l_NCIB3j_Bx_B3E_B1l_NCIBdj_Bx_cB1l_NCIB0_Bx_cB1l_TBeh_B8A_EE0E0E0Bgu_Bx_Bx_cBap_E0E0BiJ_E0B8A_E0EE0B8A_E0EE0NcNtBz_10Descendant0E0NCIB1N_Bx_NtNtBD_3num8JsonUIntBz_B1l_NCIB87_Bx_cBmY_cB1l_B8A_NCINvB1P_7map_resBx_BmY_BmY_B1l_NtBiT_10InfallibleNCIBnQ_Bx_Bx_BmY_B1l_NtNtBn0_5error17JsonIntParseErrorINvB5k_6digit1Bx_B1l_EINvMNtB9S_3stre5parseBmY_EE0NvYBmY_INtBiT_7TryIntoBmY_E8try_intoE0B8A_E0NcNtBz_20ArrayIndexDescendant0E0EEBD_:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBx_ETNCINvNtB4_8sequence9delimitedBx_cBz_cB1t_NCINvNtNtB4_9character8complete4charBx_B1t_E0NCINvNtB4_10combinator3mapBx_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBz_B1t_NCINvB3l_3optBx_B4l_B1t_NCINvNtNtB4_5bytes8complete17escaped_transformBx_B1t_NCIB3j_Bx_INtNtB4p_3vec3VecNtBB_16MaybeEscapedCharENtBB_19MaybeEscapedCharVecB1t_NCINvNtB4_5multi5many1Bx_B6L_B1t_NCIB0_Bx_B6L_B1t_TNCIB3j_Bx_cB6L_B1t_NCINvB3l_6verifyBx_ccB1t_NCINvB2C_7none_ofBx_Bx_B1t_E0NCNvBB_9unescaped0E0NcNtB6L_4Char0E0NCIB3j_Bx_cB6L_B1t_B2x_NcNtB6L_7Escaped0E0EE0E0NcB79_0E0NCIB0_Bx_Bx_B1t_TNCIB0_Bx_Bx_B1t_TNCINvB3l_5valueBx_Bx_Bx_B1t_NCINvB5y_3tagBx_Bx_B1t_E0E0BbF_BbF_BbF_BbF_BbF_BbF_EE0BbF_EE0B79_Bx_cB4l_E0E0NvYBz_INtNtB3O_7convert4FromB3J_E4fromE0B2x_E0NCIB1V_Bx_cBz_cB1t_B2x_NCIB3j_Bx_B3J_Bz_B1t_NCIB58_Bx_B4l_B1t_NCIB5w_Bx_B1t_NCINvB3l_9recognizeBx_IB6v_cEB1t_NCIB7G_Bx_cB1t_NCIB0_Bx_cB1t_TB8L_B2x_EE0E0E0Bb7_Bx_Bx_cB4l_E0E0Bdm_E0B2x_E0EEBD_:
   47|   120k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   120k|  mut l: List,
   49|   120k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   120k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtB10_5TokenINtNtB6_5error5ErrorBW_ENCINvB4_3altBW_BY_B24_TNCIBz_BW_BW_BY_B24_NCINvBB_9recognizeBW_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB24_NCINvNtB6_8sequence4pairBW_cB3v_B24_NCINvBB_6verifyBW_ccB24_INvNtNtB6_9character8complete7anycharBW_B24_ENCNvB10_12member_first0E0NCINvNtB6_5multi5many0BW_cB24_NCIB4M_BW_ccB24_B57_NCNvB10_16member_character0E0E0E0E0NcNtBY_8Borrowed0E0NCINvB4e_9delimitedBW_cBY_cB24_NCINvB5a_4charBW_B24_E0NCIB2v_BW_BY_B24_TNCIB7Y_BW_cBY_cB24_B8q_NCIBz_BW_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3A_6string6StringEBY_B24_NCINvBB_3optBW_Bad_B24_NCINvNtNtB6_5bytes8complete17escaped_transformBW_B24_NCIBz_BW_IB3w_NtB10_16MaybeEscapedCharENtB10_19MaybeEscapedCharVecB24_NCINvB6k_5many1BW_Bc9_B24_NCIB2v_BW_Bc9_B24_TNCIBz_BW_cBc9_B24_NCIB4M_BW_ccB24_NCINvB5a_7none_ofBW_BW_B24_E0NCNvB10_9unescaped0E0NcNtBc9_4Char0E0NCIBz_BW_cBc9_B24_B8q_NcNtBc9_7Escaped0E0EE0E0NcBcy_0E0NCIB2v_BW_BW_B24_TNCIB2v_BW_BW_B24_TNCINvBB_5valueBW_BW_BW_B24_NCINvBb9_3tagBW_BW_B24_E0E0BgR_BgR_BgR_BgR_BgR_BgR_EE0BgR_EE0Bcy_BW_cBad_E0E0NvYBY_INtNtB9G_7convert4FromB9B_E4fromE0B8q_E0NCIB7Y_BW_cBY_cB24_B8q_NCIBz_BW_B9B_BY_B24_NCIBaK_BW_Bad_B24_NCIBb7_BW_B24_NCIB3b_BW_B3v_B24_NCIBd6_BW_cB24_NCIB2v_BW_cB24_TBe4_B8q_EE0E0E0Bgh_BW_BW_cBad_E0E0Bix_E0B8q_E0EE0B8q_E0EE0NcNtB1S_10Descendant0E0NCIBz_BW_NtNtB12_3num8JsonUIntB1S_B24_NCIB7Y_BW_cBmJ_cB24_B8q_NCINvBB_7map_resBW_BmJ_BmJ_B24_NtBiG_10InfallibleNCIBnD_BW_BW_BmJ_B24_NtNtBmL_5error17JsonIntParseErrorINvB5a_6digit1BW_B24_EINvMNtB9G_3stre5parseBmJ_EE0NvYBmJ_INtBiG_7TryIntoBmJ_E8try_intoE0B8q_E0NcNtB1S_20ArrayIndexDescendant0E0EINtB4_3AltBW_B1S_B24_E6choiceB12_:
  134|  9.26k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  9.26k|        match self.0.parse(input.clone()) {
  136|  4.97k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.29k|          res => res,
  138|       |        }
  139|  9.26k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB4_5error5ErrorBx_ETNCINvNtB4_10combinator3mapBx_cBz_B1x_NCINvB21_6verifyBx_ccB1x_NCINvNtNtB4_9character8complete7none_ofBx_Bx_B1x_E0NCNvBB_9unescaped0E0NcNtBz_4Char0E0NCIB1Z_Bx_cBz_B1x_NCINvB31_4charBx_B1x_E0NcNtBz_7Escaped0E0EEBD_:
   47|   120k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   120k|  mut l: List,
   49|   120k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   120k|}
_RNvXs2_NtCsijflsOnQTe0_3nom6branchTNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBX_ENCINvB5_3altBX_cB1M_TNCINvNtB7_8sequence8precededBX_ccB1M_NCINvNtNtB7_9character8complete4charBX_B1M_E0B36_E0NCINvB2A_9delimitedBX_cccB1M_B36_B36_B36_E0EE0NCNvB12_23wildcard_child_selector0E0NCIBA_BX_NtB12_12MemberStringB10_B1M_NCIB2d_BX_B5o_B1M_TNCIB2y_BX_cB5o_B1M_B36_NCIBA_BX_BX_B5o_B1M_NCINvBC_9recognizeBX_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1M_NCINvB2A_4pairBX_cB7d_B1M_NCINvBC_6verifyBX_ccB1M_INvB3b_7anycharBX_B1M_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BX_cB1M_NCIB8k_BX_ccB1M_B8F_NCNvB12_16member_character0E0E0E0E0NcNtB5o_8Borrowed0E0E0NCIB3Y_BX_cB5o_cB1M_B36_NCIB2d_BX_B5o_B1M_TNCIB3Y_BX_cB5o_cB1M_B36_NCIBA_BX_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7i_6string6StringEB5o_B1M_NCINvBC_3optBX_Bd0_B1M_NCINvNtNtB7_5bytes8complete17escaped_transformBX_B1M_NCIBA_BX_IB7e_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB1M_NCINvB9w_5many1BX_BeX_B1M_NCIB2d_BX_BeX_B1M_TNCIBA_BX_cBeX_B1M_NCIB8k_BX_ccB1M_NCINvB3b_7none_ofBX_BX_B1M_E0NCNvB12_9unescaped0E0NcNtBeX_4Char0E0NCIBA_BX_cBeX_B1M_B36_NcNtBeX_7Escaped0E0EE0E0NcBfm_0E0NCIB2d_BX_BX_B1M_TNCIB2d_BX_BX_B1M_TNCINvBC_5valueBX_BX_BX_B1M_NCINvBdX_3tagBX_BX_B1M_E0E0BjF_BjF_BjF_BjF_BjF_BjF_EE0BjF_EE0Bfm_BX_cBd0_E0E0NvYB5o_INtNtBct_7convert4FromBco_E4fromE0B36_E0NCIB3Y_BX_cB5o_cB1M_B36_NCIBA_BX_Bco_B5o_B1M_NCIBdy_BX_Bd0_B1M_NCIBdV_BX_B1M_NCIB6T_BX_B7d_B1M_NCIBfU_BX_cB1M_NCIB2d_BX_cB1M_TBgS_B36_EE0E0E0Bj5_BX_BX_cBd0_E0E0Bll_E0B36_E0EE0B36_E0EE0NcNtB10_5Child0E0NCIBA_BX_NtNtB14_3num8JsonUIntB10_B1M_NCIB3Y_BX_cBpu_cB1M_B36_NCINvBC_7map_resBX_Bpu_Bpu_B1M_NtBlv_10InfallibleNCIBqo_BX_BX_Bpu_B1M_NtNtBpw_5error17JsonIntParseErrorINvB3b_6digit1BX_B1M_EINvMNtBct_3stre5parseBpu_EE0NvYBpu_INtBlv_7TryIntoBpu_E8try_intoE0B36_E0NcNtB10_15ArrayIndexChild0E0NCIBA_BX_cB10_B1M_NCIB2y_BX_BX_cB1M_Bk6_NCIB2d_BX_cB1M_TB36_B3V_EE0E0NCNvB12_28wildcard_descendant_selector0E0NCIB2y_BX_BX_B10_B1M_Bk6_NCIB2d_BX_B10_B1M_TNCIBA_BX_B5o_B10_B1M_NCIB2d_BX_B5o_B1M_TB6w_Bba_EE0NcNtB10_10Descendant0E0NCIBA_BX_Bpu_B10_B1M_BpX_NcNtB10_20ArrayIndexDescendant0E0EE0E0EINtB5_3AltBX_B10_B1M_E6choiceB14_:
  134|  98.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  98.5k|        match self.0.parse(input.clone()) {
  136|  90.7k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.81k|          res => res,
  138|       |        }
  139|  98.5k|      }
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvB4_3altReBI_INtNtB6_5error5ErrorBI_ETNCINvNtB6_10combinator5valueBI_BI_BI_BN_NCINvNtNtB6_5bytes8complete3tagBI_BI_BN_E0E0B1c_B1c_B1c_B1c_B1c_B1c_EE0B1c_EINtB4_3AltBI_BI_BN_E6choiceCsaVj0Slin5kQ_15rsonpath_syntax:
  134|  8.55k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  8.55k|        match self.0.parse(input.clone()) {
  136|  1.81k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  6.74k|          res => res,
  138|       |        }
  139|  8.55k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altRecINtNtB4_5error5ErrorBx_ETNCINvNtNtB4_9character8complete4charBx_BA_E0NCINvNtB4_8sequence9delimitedBx_cccBA_BZ_BZ_BZ_E0EECsaVj0Slin5kQ_15rsonpath_syntax:
   47|  60.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  60.0k|  mut l: List,
   49|  60.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  60.0k|}
_RNvXs4_NtCsijflsOnQTe0_3nom6branchTNCINvNtB7_10combinator5valueReBZ_BZ_INtNtB7_5error5ErrorBZ_ENCINvNtNtB7_5bytes8complete3tagBZ_BZ_B17_E0E0Bx_Bx_Bx_Bx_Bx_Bx_EINtB5_3AltBZ_BZ_B17_E6choiceCsaVj0Slin5kQ_15rsonpath_syntax:
  134|  8.55k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  8.55k|        match self.0.parse(input.clone()) {
  136|  8.27k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    279|          res => res,
  138|       |        }
  139|  8.55k|      }

_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB8_5error5ErrorBY_ENCINvNtB8_10combinator3mapBY_INtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB2q_19MaybeEscapedCharVecB10_NCINvNtB8_5multi5many1BY_B2o_B10_NCINvNtB8_6branch3altBY_B2o_B10_TNCIB1r_BY_cB2o_B10_NCINvB1t_6verifyBY_ccB10_NCINvNtNtB8_9character8complete7none_ofBY_BY_B10_E0NCNvB2q_9unescaped0E0NcNtB2o_4Char0E0NCIB1r_BY_cB2o_B10_NCINvB5J_4charBY_B10_E0NcNtB2o_7Escaped0E0EE0E0NcB3n_0E0NCIB4s_BY_BY_B10_TNCIB4s_BY_BY_B10_TNCINvB1t_5valueBY_BY_BY_B10_NCINvB4_3tagBY_BY_B10_E0E0B8R_B8R_B8R_B8R_B8R_B8R_EE0B8R_EE0B3n_BY_cNtNtB1W_6string6StringE0B2s_:
  646|  3.93k|  move |input: Input| {
  647|  3.93k|    let mut index = 0;
  648|  3.93k|    let mut res = input.new_builder();
  649|  3.93k|
  650|  3.93k|    let i = input.clone();
  651|       |
  652|  9.68k|    while index < i.input_len() {
  653|  9.67k|      let current_len = i.input_len();
  654|  9.67k|      let remainder = i.slice(index..);
  655|  9.67k|      match normal.parse(remainder.clone()) {
  656|  3.63k|        Ok((i2, o)) => {
  657|  3.63k|          o.extend_into(&mut res);
  658|  3.63k|          if i2.input_len() == 0 {
  659|    146|            return Ok((i.slice(i.input_len()..), res));
  660|  3.48k|          } else if i2.input_len() == current_len {
  661|      0|            return Ok((remainder, res));
  662|  3.48k|          } else {
  663|  3.48k|            index = input.offset(&i2);
  664|  3.48k|          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|  6.03k|          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|  3.06k|            let next = index + control_char.len_utf8();
  670|  3.06k|            let input_len = input.input_len();
  671|  3.06k|
  672|  3.06k|            if next >= input_len {
  673|     75|              return Err(Err::Error(Error::from_error_kind(
  674|     75|                remainder,
  675|     75|                ErrorKind::EscapedTransform,
  676|     75|              )));
  677|       |            } else {
  678|  2.98k|              match transform.parse(i.slice(next..)) {
  679|  2.34k|                Ok((i2, o)) => {
  680|  2.34k|                  o.extend_into(&mut res);
  681|  2.34k|                  if i2.input_len() == 0 {
  682|     82|                    return Ok((i.slice(i.input_len()..), res));
  683|  2.25k|                  } else {
  684|  2.25k|                    index = input.offset(&i2);
  685|  2.25k|                  }
  686|       |                }
  687|    644|                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|  2.97k|            if index == 0 {
  692|    507|              return Err(Err::Error(Error::from_error_kind(
  693|    507|                remainder,
  694|    507|                ErrorKind::EscapedTransform,
  695|    507|              )));
  696|  2.47k|            }
  697|  2.47k|            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|      0|        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|     13|    Ok((input.slice(index..), res))
  704|  3.93k|  }
_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBJ_INtNtB8_5error5ErrorBJ_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   39|   180k|  move |i: Input| {
   40|   180k|    let tag_len = tag.input_len();
   41|   180k|    let t = tag.clone();
   42|   180k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  26.7k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   153k|        let e: ErrorKind = ErrorKind::Tag;
   46|   153k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   180k|    res
   50|   180k|  }
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator3mapBW_INtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB2o_19MaybeEscapedCharVecBY_NCINvNtB6_5multi5many1BW_B2m_BY_NCINvNtB6_6branch3altBW_B2m_BY_TNCIB1p_BW_cB2m_BY_NCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvB2o_9unescaped0E0NcNtB2m_4Char0E0NCIB1p_BW_cB2m_BY_NCINvB5C_4charBW_BY_E0NcNtB2m_7Escaped0E0EE0E0NcB3l_0E0NCIB4o_BW_BW_BY_TNCIB4o_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B8F_B8F_B8F_B8F_B8F_B8F_EE0B8F_EE0B3l_BW_cNtNtB1U_6string6StringEB2q_:
  623|   120k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|   120k|  mut normal: F,
  625|   120k|  control_char: char,
  626|   120k|  mut transform: G,
  627|   120k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|   120k|where
  629|   120k|  Input: Clone
  630|   120k|    + crate::traits::Offset
  631|   120k|    + InputLength
  632|   120k|    + InputTake
  633|   120k|    + InputTakeAtPosition
  634|   120k|    + Slice<RangeFrom<usize>>
  635|   120k|    + InputIter,
  636|   120k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|   120k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|   120k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|   120k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|   120k|  F: Parser<Input, O1, Error>,
  641|   120k|  G: Parser<Input, O2, Error>,
  642|   120k|  Error: ParseError<Input>,
  643|   120k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|   120k|}
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBH_INtNtB6_5error5ErrorBH_EECsaVj0Slin5kQ_15rsonpath_syntax:
   32|  2.04M|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  2.04M|  tag: T,
   34|  2.04M|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  2.04M|where
   36|  2.04M|  Input: InputTake + Compare<T>,
   37|  2.04M|  T: InputLength + Clone,
   38|  2.04M|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  2.04M|}
_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB8_5error5ErrorBY_ENCINvNtB8_10combinator9recognizeBY_INtNtCshJIxznpEM8j_5alloc3vec3VeccEB10_NCINvNtB8_5multi5many1BY_cB10_NCINvNtB8_6branch3altBY_cB10_TNCINvB1t_6verifyBY_ccB10_NCINvNtNtB8_9character8complete7none_ofBY_BY_B10_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB42_4charBY_B10_E0EE0E0E0NCIB37_BY_BY_B10_TNCIB37_BY_BY_B10_TNCINvB1t_5valueBY_BY_BY_B10_NCINvB4_3tagBY_BY_B10_E0E0B6L_B6L_B6L_B6L_B6L_B6L_EE0B6L_EE0BY_BY_cNtNtB22_6string6StringE0B4S_:
  646|  2.84k|  move |input: Input| {
  647|  2.84k|    let mut index = 0;
  648|  2.84k|    let mut res = input.new_builder();
  649|  2.84k|
  650|  2.84k|    let i = input.clone();
  651|       |
  652|  10.8k|    while index < i.input_len() {
  653|  10.8k|      let current_len = i.input_len();
  654|  10.8k|      let remainder = i.slice(index..);
  655|  10.8k|      match normal.parse(remainder.clone()) {
  656|  3.33k|        Ok((i2, o)) => {
  657|  3.33k|          o.extend_into(&mut res);
  658|  3.33k|          if i2.input_len() == 0 {
  659|    139|            return Ok((i.slice(i.input_len()..), res));
  660|  3.19k|          } else if i2.input_len() == current_len {
  661|      0|            return Ok((remainder, res));
  662|  3.19k|          } else {
  663|  3.19k|            index = input.offset(&i2);
  664|  3.19k|          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|  7.53k|          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|  5.63k|            let next = index + control_char.len_utf8();
  670|  5.63k|            let input_len = input.input_len();
  671|  5.63k|
  672|  5.63k|            if next >= input_len {
  673|     65|              return Err(Err::Error(Error::from_error_kind(
  674|     65|                remainder,
  675|     65|                ErrorKind::EscapedTransform,
  676|     65|              )));
  677|       |            } else {
  678|  5.56k|              match transform.parse(i.slice(next..)) {
  679|  4.93k|                Ok((i2, o)) => {
  680|  4.93k|                  o.extend_into(&mut res);
  681|  4.93k|                  if i2.input_len() == 0 {
  682|    105|                    return Ok((i.slice(i.input_len()..), res));
  683|  4.83k|                  } else {
  684|  4.83k|                    index = input.offset(&i2);
  685|  4.83k|                  }
  686|       |                }
  687|    628|                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|  1.90k|            if index == 0 {
  692|    449|              return Err(Err::Error(Error::from_error_kind(
  693|    449|                remainder,
  694|    449|                ErrorKind::EscapedTransform,
  695|    449|              )));
  696|  1.45k|            }
  697|  1.45k|            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|      0|        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|      5|    Ok((input.slice(index..), res))
  704|  2.84k|  }
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete17escaped_transformReINtNtB6_5error5ErrorBW_ENCINvNtB6_10combinator9recognizeBW_INtNtCshJIxznpEM8j_5alloc3vec3VeccEBY_NCINvNtB6_5multi5many1BW_cBY_NCINvNtB6_6branch3altBW_cBY_TNCINvB1r_6verifyBW_ccBY_NCINvNtNtB6_9character8complete7none_ofBW_BW_BY_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB3W_4charBW_BY_E0EE0E0E0NCIB33_BW_BW_BY_TNCIB33_BW_BW_BY_TNCINvB1r_5valueBW_BW_BW_BY_NCINvB2_3tagBW_BW_BY_E0E0B6B_B6B_B6B_B6B_B6B_B6B_EE0B6B_EE0BW_BW_cNtNtB20_6string6StringEB4L_:
  623|   120k|pub fn escaped_transform<Input, Error, F, G, O1, O2, ExtendItem, Output>(
  624|   120k|  mut normal: F,
  625|   120k|  control_char: char,
  626|   120k|  mut transform: G,
  627|   120k|) -> impl FnMut(Input) -> IResult<Input, Output, Error>
  628|   120k|where
  629|   120k|  Input: Clone
  630|   120k|    + crate::traits::Offset
  631|   120k|    + InputLength
  632|   120k|    + InputTake
  633|   120k|    + InputTakeAtPosition
  634|   120k|    + Slice<RangeFrom<usize>>
  635|   120k|    + InputIter,
  636|   120k|  Input: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  637|   120k|  O1: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  638|   120k|  O2: crate::traits::ExtendInto<Item = ExtendItem, Extender = Output>,
  639|   120k|  <Input as InputIter>::Item: crate::traits::AsChar,
  640|   120k|  F: Parser<Input, O1, Error>,
  641|   120k|  G: Parser<Input, O2, Error>,
  642|   120k|  Error: ParseError<Input>,
  643|   120k|{
  644|       |  use crate::traits::AsChar;
  645|       |
  646|       |  move |input: Input| {
  647|       |    let mut index = 0;
  648|       |    let mut res = input.new_builder();
  649|       |
  650|       |    let i = input.clone();
  651|       |
  652|       |    while index < i.input_len() {
  653|       |      let current_len = i.input_len();
  654|       |      let remainder = i.slice(index..);
  655|       |      match normal.parse(remainder.clone()) {
  656|       |        Ok((i2, o)) => {
  657|       |          o.extend_into(&mut res);
  658|       |          if i2.input_len() == 0 {
  659|       |            return Ok((i.slice(i.input_len()..), res));
  660|       |          } else if i2.input_len() == current_len {
  661|       |            return Ok((remainder, res));
  662|       |          } else {
  663|       |            index = input.offset(&i2);
  664|       |          }
  665|       |        }
  666|       |        Err(Err::Error(_)) => {
  667|       |          // unwrap() should be safe here since index < $i.input_len()
  668|       |          if remainder.iter_elements().next().unwrap().as_char() == control_char {
  669|       |            let next = index + control_char.len_utf8();
  670|       |            let input_len = input.input_len();
  671|       |
  672|       |            if next >= input_len {
  673|       |              return Err(Err::Error(Error::from_error_kind(
  674|       |                remainder,
  675|       |                ErrorKind::EscapedTransform,
  676|       |              )));
  677|       |            } else {
  678|       |              match transform.parse(i.slice(next..)) {
  679|       |                Ok((i2, o)) => {
  680|       |                  o.extend_into(&mut res);
  681|       |                  if i2.input_len() == 0 {
  682|       |                    return Ok((i.slice(i.input_len()..), res));
  683|       |                  } else {
  684|       |                    index = input.offset(&i2);
  685|       |                  }
  686|       |                }
  687|       |                Err(e) => return Err(e),
  688|       |              }
  689|       |            }
  690|       |          } else {
  691|       |            if index == 0 {
  692|       |              return Err(Err::Error(Error::from_error_kind(
  693|       |                remainder,
  694|       |                ErrorKind::EscapedTransform,
  695|       |              )));
  696|       |            }
  697|       |            return Ok((remainder, res));
  698|       |          }
  699|       |        }
  700|       |        Err(e) => return Err(e),
  701|       |      }
  702|       |    }
  703|       |    Ok((input.slice(index..), res))
  704|       |  }
  705|   120k|}

_RINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReINtNtB6_5error5ErrorBO_EECsaVj0Slin5kQ_15rsonpath_syntax:
  435|  13.1k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|  13.1k|where
  437|  13.1k|  T: InputTakeAtPosition,
  438|  13.1k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|  13.1k|{
  440|  13.1k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|  13.1k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete7none_ofReBR_INtNtB8_5error5ErrorBR_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
  119|  44.6k|  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {
  120|  24.6k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
  121|  20.0k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::NoneOf))),
  122|  44.6k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsaVj0Slin5kQ_15rsonpath_syntax:
   32|  1.80M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  1.80M|where
   34|  1.80M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  1.80M|  <I as InputIter>::Item: AsChar,
   36|  1.80M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  1.80M|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReINtNtB8_5error5ErrorBQ_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
  440|  24.7k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7none_ofReBP_INtNtB6_5error5ErrorBP_EECsaVj0Slin5kQ_15rsonpath_syntax:
  113|   240k|pub fn none_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
  114|   240k|where
  115|   240k|  I: Slice<RangeFrom<usize>> + InputIter,
  116|   240k|  <I as InputIter>::Item: AsChar + Copy,
  117|   240k|  T: FindToken<<I as InputIter>::Item>,
  118|   240k|{
  119|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {
  120|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
  121|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::NoneOf))),
  122|       |  }
  123|   240k|}
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsaVj0Slin5kQ_15rsonpath_syntax:
   37|   560k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   560k|    let b = t.as_char() == c;
   39|   560k|    (&c, b)
   40|   560k|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7anycharReINtNtB6_5error5ErrorBP_EECsaVj0Slin5kQ_15rsonpath_syntax:
  309|  82.4k|pub fn anychar<T, E: ParseError<T>>(input: T) -> IResult<T, char, E>
  310|  82.4k|where
  311|  82.4k|  T: InputIter + InputLength + Slice<RangeFrom<usize>>,
  312|  82.4k|  <T as InputIter>::Item: AsChar,
  313|  82.4k|{
  314|  82.4k|  let mut it = input.iter_indices();
  315|  82.4k|  match it.next() {
  316|    326|    None => Err(Err::Error(E::from_error_kind(input, ErrorKind::Eof))),
  317|  82.1k|    Some((_, c)) => match it.next() {
  318|    374|      None => Ok((input.slice(input.input_len()..), c.as_char())),
  319|  81.7k|      Some((idx, _)) => Ok((input.slice(idx..), c.as_char())),
  320|       |    },
  321|       |  }
  322|  82.4k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsaVj0Slin5kQ_15rsonpath_syntax:
   37|   567k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   567k|  }) {
   41|   149k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   417k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   567k|  }
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete7none_ofReBT_INtNtBa_5error5ErrorBT_EE00CsaVj0Slin5kQ_15rsonpath_syntax:
  119|  44.3k|  move |i: I| match (i).iter_elements().next().map(|c| (c, !list.find_token(c))) {

_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB6_5error5ErrorBE_ENCINvNtNtB6_5bytes8complete17escaped_transformBE_B1i_NCINvB4_9recognizeBE_INtNtBK_3vec3VeccEB1i_NCINvNtB6_5multi5many1BE_cB1i_NCINvNtB6_6branch3altBE_cB1i_TNCINvB4_6verifyBE_ccB1i_NCINvNtNtB6_9character8complete7none_ofBE_BE_B1i_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB4F_4charBE_B1i_E0EE0E0E0NCIB3L_BE_BE_B1i_TNCIB3L_BE_BE_B1i_TNCINvB4_5valueBE_BE_BE_B1i_NCINvB1L_3tagBE_BE_B1i_E0E0B7o_B7o_B7o_B7o_B7o_B7o_EE0B7o_EE0BE_BE_cBG_E0E0B5v_:
  243|  2.84k|  move |input: I| {
  244|  2.84k|    let i = input.clone();
  245|  2.84k|    match f.parse(input) {
  246|  1.70k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.14k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  2.84k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBE_ENCINvB4_3optBE_B1i_B2P_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B2P_NCIB2_BE_INtNtB1m_3vec3VecNtB1X_16MaybeEscapedCharENtB1X_19MaybeEscapedCharVecB2P_NCINvNtB6_5multi5many1BE_B4R_B2P_NCINvNtB6_6branch3altBE_B4R_B2P_TNCIB2_BE_cB4R_B2P_NCINvB4_6verifyBE_ccB2P_NCINvNtNtB6_9character8complete7none_ofBE_BE_B2P_E0NCNvB1X_9unescaped0E0NcNtB4R_4Char0E0NCIB2_BE_cB4R_B2P_NCINvB7A_4charBE_B2P_E0NcNtB4R_7Escaped0E0EE0E0NcB5g_0E0NCIB6l_BE_BE_B2P_TNCIB6l_BE_BE_B2P_TNCINvB4_5valueBE_BE_BE_B2P_NCINvB3F_3tagBE_BE_B2P_E0E0BaH_BaH_BaH_BaH_BaH_BaH_EE0BaH_EE0B5g_BE_cB1i_E0E0NvYB1V_INtNtBL_7convert4FromBG_E4fromE0B1Z_:
   78|  3.93k|  move |input: I| {
   79|  3.93k|    let (input, o1) = parser.parse(input)?;
   80|  3.93k|    Ok((input, f(o1)))
   81|  3.93k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence8precededBC_BC_cB1r_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1r_E0NCINvNtB4_6branch3altBC_cB1r_TNCINvNtNtB4_9character8complete4charBC_B1r_E0NCINvB1U_9delimitedBC_cccB1r_B3D_B3D_B3D_E0EE0E0NCNvBH_28wildcard_descendant_selector0EBJ_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB6_5error5ErrorBK_ENCINvNtB6_5multi5many1BK_cB1l_NCINvNtB6_6branch3altBK_cB1l_TNCINvB4_6verifyBK_ccB1l_NCINvNtNtB6_9character8complete7none_ofBK_BK_B1l_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB3a_4charBK_B1l_E0EE0E0E0B40_:
  512|  10.8k|  move |input: I| {
  513|  10.8k|    let i = input.clone();
  514|  10.8k|    match parser.parse(i) {
  515|  3.33k|      Ok((i, _)) => {
  516|  3.33k|        let index = input.offset(&i);
  517|  3.33k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  7.53k|      Err(e) => Err(e),
  520|       |    }
  521|  10.8k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1J_TNCINvNtB4_8sequence8precededBC_cBE_B1J_NCINvNtNtB4_9character8complete4charBC_B1J_E0NCIB0_BC_BC_BE_B1J_NCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1J_NCINvB2I_4pairBC_cB4F_B1J_NCINvB2_6verifyBC_ccB1J_INvB3l_7anycharBC_B1J_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1J_NCIB5M_BC_ccB1J_B67_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0E0NCINvB2I_9delimitedBC_cBE_cB1J_B3g_NCIB2a_BC_BE_B1J_TNCIB8C_BC_cBE_cB1J_B3g_NCIB0_BC_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4K_6string6StringEBE_B1J_NCINvB2_3optBC_Bay_B1J_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1J_NCIB0_BC_IB4G_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1J_NCINvB6X_5many1BC_Bcu_B1J_NCIB2a_BC_Bcu_B1J_TNCIB0_BC_cBcu_B1J_NCIB5M_BC_ccB1J_NCINvB3l_7none_ofBC_BC_B1J_E0NCNvBG_9unescaped0E0NcNtBcu_4Char0E0NCIB0_BC_cBcu_B1J_B3g_NcNtBcu_7Escaped0E0EE0E0NcBcS_0E0NCIB2a_BC_BC_B1J_TNCIB2a_BC_BC_B1J_TNCINvB2_5valueBC_BC_BC_B1J_NCINvBbu_3tagBC_BC_B1J_E0E0Bh9_Bh9_Bh9_Bh9_Bh9_Bh9_EE0Bh9_EE0BcS_BC_cBay_E0E0NvYBE_INtNtBa1_7convert4FromB9W_E4fromE0B3g_E0NCIB8C_BC_cBE_cB1J_B3g_NCIB0_BC_B9W_BE_B1J_NCIBb5_BC_Bay_B1J_NCIBbs_BC_B1J_NCIB4l_BC_B4F_B1J_NCIBdp_BC_cB1J_NCIB2a_BC_cB1J_TBen_B3g_EE0E0E0Bgz_BC_BC_cBay_E0E0BiP_E0B3g_E0EE0B3g_E0EE0NcNtB1y_5Child0EBI_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtBG_5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_BE_B1J_TNCIB0_BC_BC_BE_B1J_NCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1J_NCINvNtB4_8sequence4pairBC_cB3j_B1J_NCINvB2_6verifyBC_ccB1J_INvNtNtB4_9character8complete7anycharBC_B1J_ENCNvBG_12member_first0E0NCINvNtB4_5multi5many0BC_cB1J_NCIB4A_BC_ccB1J_B4V_NCNvBG_16member_character0E0E0E0E0NcNtBE_8Borrowed0E0NCINvB42_9delimitedBC_cBE_cB1J_NCINvB4Y_4charBC_B1J_E0NCIB2a_BC_BE_B1J_TNCIB7K_BC_cBE_cB1J_B8c_NCIB0_BC_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3o_6string6StringEBE_B1J_NCINvB2_3optBC_B9Z_B1J_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B1J_NCIB0_BC_IB3k_NtBG_16MaybeEscapedCharENtBG_19MaybeEscapedCharVecB1J_NCINvB67_5many1BC_BbV_B1J_NCIB2a_BC_BbV_B1J_TNCIB0_BC_cBbV_B1J_NCIB4A_BC_ccB1J_NCINvB4Y_7none_ofBC_BC_B1J_E0NCNvBG_9unescaped0E0NcNtBbV_4Char0E0NCIB0_BC_cBbV_B1J_B8c_NcNtBbV_7Escaped0E0EE0E0NcBcj_0E0NCIB2a_BC_BC_B1J_TNCIB2a_BC_BC_B1J_TNCINvB2_5valueBC_BC_BC_B1J_NCINvBaV_3tagBC_BC_B1J_E0E0BgA_BgA_BgA_BgA_BgA_BgA_EE0BgA_EE0Bcj_BC_cB9Z_E0E0NvYBE_INtNtB9s_7convert4FromB9n_E4fromE0B8c_E0NCIB7K_BC_cBE_cB1J_B8c_NCIB0_BC_B9n_BE_B1J_NCIBaw_BC_B9Z_B1J_NCIBaT_BC_B1J_NCIB2Z_BC_B3j_B1J_NCIBcQ_BC_cB1J_NCIB2a_BC_cB1J_TBdO_B8c_EE0E0E0Bg0_BC_BC_cB9Z_E0E0Big_E0B8c_E0EE0B8c_E0EE0NcNtB1y_10Descendant0EBI_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReBE_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBE_ENCINvB4_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1D_NCINvNtB6_8sequence4pairBE_cB2o_B1D_NCINvB4_6verifyBE_ccB1D_INvNtNtB6_9character8complete7anycharBE_B1D_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BE_cB1D_NCIB3F_BE_ccB1D_B40_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0BN_:
   78|  47.5k|  move |input: I| {
   79|  47.5k|    let (input, o1) = parser.parse(input)?;
   80|  28.1k|    Ok((input, f(o1)))
   81|  47.5k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB1K_NCINvNtNtB4_9character8complete4charBC_B1K_E0NCINvB2_7map_resBC_BE_BE_B1K_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3z_BC_BC_BE_B1K_NtNtBG_5error17JsonIntParseErrorINvB2S_6digit1BC_B1K_EINvMNtB43_3stre5parseBE_EE0NvYBE_INtB41_7TryIntoBE_E8try_intoE0B2N_E0NcNtB1q_15ArrayIndexChild0EBI_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1D_E0NcNtBF_7Escaped0EBJ_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtBI_5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_BG_B1L_TNCIB2_BE_BE_BG_B1L_NCINvB4_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1L_NCINvNtB6_8sequence4pairBE_cB3l_B1L_NCINvB4_6verifyBE_ccB1L_INvNtNtB6_9character8complete7anycharBE_B1L_ENCNvBI_12member_first0E0NCINvNtB6_5multi5many0BE_cB1L_NCIB4C_BE_ccB1L_B4X_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0E0NCINvB44_9delimitedBE_cBG_cB1L_NCINvB50_4charBE_B1L_E0NCIB2c_BE_BG_B1L_TNCIB7M_BE_cBG_cB1L_B8e_NCIB2_BE_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3q_6string6StringEBG_B1L_NCINvB4_3optBE_Ba1_B1L_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B1L_NCIB2_BE_IB3m_NtBI_16MaybeEscapedCharENtBI_19MaybeEscapedCharVecB1L_NCINvB69_5many1BE_BbX_B1L_NCIB2c_BE_BbX_B1L_TNCIB2_BE_cBbX_B1L_NCIB4C_BE_ccB1L_NCINvB50_7none_ofBE_BE_B1L_E0NCNvBI_9unescaped0E0NcNtBbX_4Char0E0NCIB2_BE_cBbX_B1L_B8e_NcNtBbX_7Escaped0E0EE0E0NcBcl_0E0NCIB2c_BE_BE_B1L_TNCIB2c_BE_BE_B1L_TNCINvB4_5valueBE_BE_BE_B1L_NCINvBaX_3tagBE_BE_B1L_E0E0BgC_BgC_BgC_BgC_BgC_BgC_EE0BgC_EE0Bcl_BE_cBa1_E0E0NvYBG_INtNtB9u_7convert4FromB9p_E4fromE0B8e_E0NCIB7M_BE_cBG_cB1L_B8e_NCIB2_BE_B9p_BG_B1L_NCIBay_BE_Ba1_B1L_NCIBaV_BE_B1L_NCIB31_BE_B3l_B1L_NCIBcS_BE_cB1L_NCIB2c_BE_cB1L_TBdQ_B8e_EE0E0E0Bg2_BE_BE_cBa1_E0E0Bii_E0B8e_E0EE0B8e_E0EE0NcNtB1A_10Descendant0E0BK_:
   78|  9.26k|  move |input: I| {
   79|  9.26k|    let (input, o1) = parser.parse(input)?;
   80|  4.29k|    Ok((input, f(o1)))
   81|  9.26k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB6_5error5ErrorBH_EINvNtNtB6_9character8complete7anycharBH_BL_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0E0B1X_:
  427|  34.9k|  move |input: I| {
  428|  34.9k|    let i = input.clone();
  429|  34.9k|    let (input, o) = first.parse(input)?;
  430|       |
  431|  34.6k|    if second(o.borrow()) {
  432|  6.78k|      Ok((input, o))
  433|       |    } else {
  434|  27.8k|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|  34.9k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBC_ENCINvB2_3mapBC_cBE_B1q_NCINvNtNtB4_9character8complete4charBC_B1q_E0NCNvBG_8jsonpath0E0EBI_:
  239|  1.07k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  1.07k|where
  241|  1.07k|  F: Parser<I, O, E>,
  242|  1.07k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  1.07k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB6_5error5ErrorBE_ENCINvNtNtB6_5bytes8complete17escaped_transformBE_B1i_NCINvB4_3mapBE_INtNtBK_3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB34_19MaybeEscapedCharVecB1i_NCINvNtB6_5multi5many1BE_B32_B1i_NCINvNtB6_6branch3altBE_B32_B1i_TNCIB2A_BE_cB32_B1i_NCINvB4_6verifyBE_ccB1i_NCINvNtNtB6_9character8complete7none_ofBE_BE_B1i_E0NCNvB34_9unescaped0E0NcNtB32_4Char0E0NCIB2A_BE_cB32_B1i_NCINvB6m_4charBE_B1i_E0NcNtB32_7Escaped0E0EE0E0NcB41_0E0NCIB56_BE_BE_B1i_TNCIB56_BE_BE_B1i_TNCINvB4_5valueBE_BE_BE_B1i_NCINvB1L_3tagBE_BE_B1i_E0E0B9u_B9u_B9u_B9u_B9u_B9u_EE0B9u_EE0B41_BE_cBG_E0E0B36_:
  243|  3.93k|  move |input: I| {
  244|  3.93k|    let i = input.clone();
  245|  3.93k|    match f.parse(input) {
  246|  2.71k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.22k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  3.93k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtBK_6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence9delimitedBE_cBG_cB1M_NCINvNtNtB6_9character8complete4charBE_B1M_E0NCINvB4_7map_resBE_BG_BG_B1M_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3B_BE_BE_BG_B1M_NtNtBI_5error17JsonIntParseErrorINvB2U_6digit1BE_B1M_EINvMNtB45_3stre5parseBG_EE0NvYBG_INtB43_7TryIntoBG_E8try_intoE0B2P_E0NcNtB1s_20ArrayIndexDescendant0E0BK_:
   78|  4.97k|  move |input: I| {
   79|  4.97k|    let (input, o1) = parser.parse(input)?;
   80|    197|    Ok((input, f(o1)))
   81|  4.97k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_9recognizeBC_INtNtBI_3vec3VeccEB1g_NCINvNtB4_5multi5many1BC_cB1g_NCINvNtB4_6branch3altBC_cB1g_TNCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB4D_4charBC_B1g_E0EE0E0E0NCIB3J_BC_BC_B1g_TNCIB3J_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B7m_B7m_B7m_B7m_B7m_B7m_EE0B7m_EE0BC_BC_cBE_E0EB5t_:
  239|   120k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   120k|where
  241|   120k|  F: Parser<I, O, E>,
  242|   120k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator7map_resReBG_NtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntINtNtB4_5error5ErrorBG_ENtNtBN_5error17JsonIntParseErrorINvNtNtB4_9character8complete6digit1BG_B1x_EINvMNtCslATUeuPuGvJ_4core3stre5parseBL_EEBP_:
  104|   120k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|   120k|  mut parser: F,
  106|   120k|  mut f: G,
  107|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|   120k|where
  109|   120k|  F: Parser<I, O1, E>,
  110|   120k|  G: FnMut(O1) -> Result<O2, E2>,
  111|   120k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_cB1t_TNCINvNtB6_8sequence8precededBE_ccB1t_NCINvNtNtB6_9character8complete4charBE_B1t_E0B2W_E0NCINvB2q_9delimitedBE_cccB1t_B2W_B2W_B2W_E0EE0NCNvBJ_23wildcard_child_selector0E0BL_:
   78|  98.5k|  move |input: I| {
   79|  98.5k|    let (input, o1) = parser.parse(input)?;
   80|  7.81k|    Ok((input, f(o1)))
   81|  98.5k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB1d_19MaybeEscapedCharVecINtNtB4_5error5ErrorBC_ENCINvNtB4_5multi5many1BC_B1b_B2B_NCINvNtB4_6branch3altBC_B1b_B2B_TNCIB0_BC_cB1b_B2B_NCINvB2_6verifyBC_ccB2B_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2B_E0NCNvB1d_9unescaped0E0NcNtB1b_4Char0E0NCIB0_BC_cB1b_B2B_NCINvB4O_4charBC_B2B_E0NcNtB1b_7Escaped0E0EE0E0NcB2a_0EB1f_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB6_5error5ErrorBE_ENCINvB4_6verifyBE_ccB1F_NCINvNtNtB6_9character8complete7none_ofBE_BE_B1F_E0NCNvBJ_9unescaped0E0NcNtBH_4Char0E0BL_:
   78|  22.5k|  move |input: I| {
   79|  22.5k|    let (input, o1) = parser.parse(input)?;
   80|  11.8k|    Ok((input, f(o1)))
   81|  22.5k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB4_5error5ErrorBI_ENCINvNtB4_5multi5many1BI_cB1j_NCINvNtB4_6branch3altBI_cB1j_TNCINvB2_6verifyBI_ccB1j_NCINvNtNtB4_9character8complete7none_ofBI_BI_B1j_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB38_4charBI_B1j_E0EE0E0EB3Y_:
  506|   120k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   120k|  mut parser: F,
  508|   120k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   120k|where
  510|   120k|  F: Parser<I, O, E>,
  511|   120k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2N_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2N_NCIB0_BC_INtNtB1k_3vec3VecNtB1V_16MaybeEscapedCharENtB1V_19MaybeEscapedCharVecB2N_NCINvNtB4_5multi5many1BC_B4P_B2N_NCINvNtB4_6branch3altBC_B4P_B2N_TNCIB0_BC_cB4P_B2N_NCINvB2_6verifyBC_ccB2N_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2N_E0NCNvB1V_9unescaped0E0NcNtB4P_4Char0E0NCIB0_BC_cB4P_B2N_NCINvB7y_4charBC_B2N_E0NcNtB4P_7Escaped0E0EE0E0NcB5e_0E0NCIB6j_BC_BC_B2N_TNCIB6j_BC_BC_B2N_TNCINvB2_5valueBC_BC_BC_B2N_NCINvB3D_3tagBC_BC_B2N_E0E0BaF_BaF_BaF_BaF_BaF_BaF_EE0BaF_EE0B5e_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1X_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete7none_ofBF_BF_BJ_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0EB21_:
  417|   240k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|   240k|  mut first: F,
  419|   240k|  second: G,
  420|   240k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|   240k|where
  422|   240k|  F: Parser<I, O1, E>,
  423|   240k|  G: Fn(&O2) -> bool,
  424|   240k|  O1: Borrow<O2>,
  425|   240k|  O2: ?Sized,
  426|   240k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|   240k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB4_5error5ErrorBC_ENCINvNtNtB4_5bytes8complete17escaped_transformBC_B1g_NCINvB2_3mapBC_INtNtBI_3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB32_19MaybeEscapedCharVecB1g_NCINvNtB4_5multi5many1BC_B30_B1g_NCINvNtB4_6branch3altBC_B30_B1g_TNCIB2y_BC_cB30_B1g_NCINvB2_6verifyBC_ccB1g_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1g_E0NCNvB32_9unescaped0E0NcNtB30_4Char0E0NCIB2y_BC_cB30_B1g_NCINvB6k_4charBC_B1g_E0NcNtB30_7Escaped0E0EE0E0NcB3Z_0E0NCIB54_BC_BC_B1g_TNCIB54_BC_BC_B1g_TNCINvB2_5valueBC_BC_BC_B1g_NCINvB1J_3tagBC_BC_B1g_E0E0B9s_B9s_B9s_B9s_B9s_B9s_EE0B9s_EE0B3Z_BC_cBE_E0EB34_:
  239|   120k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|   120k|where
  241|   120k|  F: Parser<I, O, E>,
  242|   120k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator7map_resReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntBI_INtNtB4_5error5ErrorBG_ENtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB0_BG_BG_BI_B1x_NtNtBK_5error17JsonIntParseErrorINvNtNtB4_9character8complete6digit1BG_B1x_EINvMNtB1Z_3stre5parseBI_EE0NvYBI_INtB1X_7TryIntoBI_E8try_intoEBM_:
  104|   120k|pub fn map_res<I: Clone, O1, O2, E: FromExternalError<I, E2>, E2, F, G>(
  105|   120k|  mut parser: F,
  106|   120k|  mut f: G,
  107|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  108|   120k|where
  109|   120k|  F: Parser<I, O1, E>,
  110|   120k|  G: FnMut(O1) -> Result<O2, E2>,
  111|   120k|{
  112|       |  move |input: I| {
  113|       |    let i = input.clone();
  114|       |    let (input, o1) = parser.parse(input)?;
  115|       |    match f(o1) {
  116|       |      Ok(o2) => Ok((input, o2)),
  117|       |      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|       |  }
  120|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator7map_resReBI_NtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntINtNtB6_5error5ErrorBI_ENtNtBP_5error17JsonIntParseErrorINvNtNtB6_9character8complete6digit1BI_B1z_EINvMNtCslATUeuPuGvJ_4core3stre5parseBN_EE0BR_:
  112|  13.1k|  move |input: I| {
  113|  13.1k|    let i = input.clone();
  114|  13.1k|    let (input, o1) = parser.parse(input)?;
  115|  2.98k|    match f(o1) {
  116|  2.56k|      Ok(o2) => Ok((input, o2)),
  117|    420|      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|  13.1k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtNtB4_9character8complete4charBC_B1r_E0NCNvBH_8jsonpath0EBJ_:
   73|  1.07k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  1.07k|where
   75|  1.07k|  F: Parser<I, O1, E>,
   76|  1.07k|  G: FnMut(O1) -> O2,
   77|  1.07k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  1.07k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBE_ENCINvB4_3optBE_B1i_B2P_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B2P_NCINvB4_9recognizeBE_INtNtB1m_3vec3VeccEB2P_NCINvNtB6_5multi5many1BE_cB2P_NCINvNtB6_6branch3altBE_cB2P_TNCINvB4_6verifyBE_ccB2P_NCINvNtNtB6_9character8complete7none_ofBE_BE_B2P_E0NCNvB1X_9unescaped0E0NCINvB6A_4charBE_B2P_E0EE0E0E0NCIB5G_BE_BE_B2P_TNCIB5G_BE_BE_B2P_TNCINvB4_5valueBE_BE_BE_B2P_NCINvB3F_3tagBE_BE_B2P_E0E0B8J_B8J_B8J_B8J_B8J_B8J_EE0B8J_EE0BE_BE_cB1i_E0E0NvYB1V_INtNtBL_7convert4FromBG_E4fromE0B1Z_:
   78|  2.84k|  move |input: I| {
   79|  2.84k|    let (input, o1) = parser.parse(input)?;
   80|  2.84k|    Ok((input, f(o1)))
   81|  2.84k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB6_5error5ErrorBE_ENCINvNtNtB6_9character8complete4charBE_B1F_E0NcNtBH_7Escaped0E0BL_:
   78|  10.7k|  move |input: I| {
   79|  10.7k|    let (input, o1) = parser.parse(input)?;
   80|  1.03k|    Ok((input, f(o1)))
   81|  10.7k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtBI_6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_8sequence9delimitedBC_cBE_cB1K_NCINvNtNtB4_9character8complete4charBC_B1K_E0NCINvB2_7map_resBC_BE_BE_B1K_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3z_BC_BC_BE_B1K_NtNtBG_5error17JsonIntParseErrorINvB2S_6digit1BC_B1K_EINvMNtB43_3stre5parseBE_EE0NvYBE_INtB41_7TryIntoBE_E8try_intoE0B2N_E0NcNtB1q_20ArrayIndexDescendant0EBI_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB4_5error5ErrorBC_ENCINvB2_6verifyBC_ccB1D_NCINvNtNtB4_9character8complete7none_ofBC_BC_B1D_E0NCNvBH_9unescaped0E0NcNtBF_4Char0EBJ_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB1f_19MaybeEscapedCharVecINtNtB6_5error5ErrorBE_ENCINvNtB6_5multi5many1BE_B1d_B2D_NCINvNtB6_6branch3altBE_B1d_B2D_TNCIB2_BE_cB1d_B2D_NCINvB4_6verifyBE_ccB2D_NCINvNtNtB6_9character8complete7none_ofBE_BE_B2D_E0NCNvB1f_9unescaped0E0NcNtB1d_4Char0E0NCIB2_BE_cB1d_B2D_NCINvB4Q_4charBE_B2D_E0NcNtB1d_7Escaped0E0EE0E0NcB2c_0E0B1h_:
   78|  9.67k|  move |input: I| {
   79|  9.67k|    let (input, o1) = parser.parse(input)?;
   80|  3.63k|    Ok((input, f(o1)))
   81|  9.67k|  }
_RNCNCINvNtCsijflsOnQTe0_3nom10combinator5valueReBI_BI_INtNtB8_5error5ErrorBI_ENCINvNtNtB8_5bytes8complete3tagBI_BI_BQ_E0E00CsaVj0Slin5kQ_15rsonpath_syntax:
  460|  7.27k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0EB1V_:
  417|   120k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|   120k|  mut first: F,
  419|   120k|  second: G,
  420|   120k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|   120k|where
  422|   120k|  F: Parser<I, O1, E>,
  423|   120k|  G: Fn(&O2) -> bool,
  424|   120k|  O1: Borrow<O2>,
  425|   120k|  O2: ?Sized,
  426|   120k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator5valueReBE_BE_INtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BM_E0ECsaVj0Slin5kQ_15rsonpath_syntax:
  453|  1.92M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  1.92M|  val: O1,
  455|  1.92M|  mut parser: F,
  456|  1.92M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  1.92M|where
  458|  1.92M|  F: Parser<I, O2, E>,
  459|  1.92M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  1.92M|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete7none_ofBH_BH_BL_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0B23_:
  427|  44.6k|  move |input: I| {
  428|  44.6k|    let i = input.clone();
  429|  44.6k|    let (input, o) = first.parse(input)?;
  430|       |
  431|  24.6k|    if second(o.borrow()) {
  432|  22.3k|      Ok((input, o))
  433|       |    } else {
  434|  2.26k|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|  44.6k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReBC_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_9recognizeBC_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1B_NCINvNtB4_8sequence4pairBC_cB2m_B1B_NCINvB2_6verifyBC_ccB1B_INvNtNtB4_9character8complete7anycharBC_B1B_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BC_cB1B_NCIB3D_BC_ccB1B_B3Y_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0EBL_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator5valueReBG_BG_INtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_BO_E0E0CsaVj0Slin5kQ_15rsonpath_syntax:
  460|  50.6k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtBK_6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence9delimitedBE_cBG_cB1M_NCINvNtNtB6_9character8complete4charBE_B1M_E0NCINvB4_7map_resBE_BG_BG_B1M_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3B_BE_BE_BG_B1M_NtNtBI_5error17JsonIntParseErrorINvB2U_6digit1BE_B1M_EINvMNtB45_3stre5parseBG_EE0NvYBG_INtB43_7TryIntoBG_E8try_intoE0B2P_E0NcNtB1s_15ArrayIndexChild0E0BK_:
   78|  65.8k|  move |input: I| {
   79|  65.8k|    let (input, o1) = parser.parse(input)?;
   80|    356|    Ok((input, f(o1)))
   81|  65.8k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBC_ENCINvB2_3optBC_B1g_B2N_NCINvNtNtB4_5bytes8complete17escaped_transformBC_B2N_NCINvB2_9recognizeBC_INtNtB1k_3vec3VeccEB2N_NCINvNtB4_5multi5many1BC_cB2N_NCINvNtB4_6branch3altBC_cB2N_TNCINvB2_6verifyBC_ccB2N_NCINvNtNtB4_9character8complete7none_ofBC_BC_B2N_E0NCNvB1V_9unescaped0E0NCINvB6y_4charBC_B2N_E0EE0E0E0NCIB5E_BC_BC_B2N_TNCIB5E_BC_BC_B2N_TNCINvB2_5valueBC_BC_BC_B2N_NCINvB3D_3tagBC_BC_B2N_E0E0B8H_B8H_B8H_B8H_B8H_B8H_EE0B8H_EE0BC_BC_cB1g_E0E0NvYB1T_INtNtBJ_7convert4FromBE_E4fromEB1X_:
   73|   120k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   120k|where
   75|   120k|  F: Parser<I, O1, E>,
   76|   120k|  G: FnMut(O1) -> O2,
   77|   120k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtNtB6_9character8complete4charBE_B1t_E0NCNvBJ_8jsonpath0E0BL_:
   78|  1.07k|  move |input: I| {
   79|  1.07k|    let (input, o1) = parser.parse(input)?;
   80|     16|    Ok((input, f(o1)))
   81|  1.07k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator7map_resReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntBK_INtNtB6_5error5ErrorBI_ENtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB2_BI_BI_BK_B1z_NtNtBM_5error17JsonIntParseErrorINvNtNtB6_9character8complete6digit1BI_B1z_EINvMNtB21_3stre5parseBK_EE0NvYBK_INtB1Z_7TryIntoBK_E8try_intoE0BO_:
  112|  13.1k|  move |input: I| {
  113|  13.1k|    let i = input.clone();
  114|  13.1k|    let (input, o1) = parser.parse(input)?;
  115|  2.56k|    match f(o1) {
  116|  2.56k|      Ok(o2) => Ok((input, o2)),
  117|      0|      Err(e) => Err(Err::Error(E::from_external_error(i, ErrorKind::MapRes, e))),
  118|       |    }
  119|  13.1k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB6_5error5ErrorBK_ENCINvNtB6_8sequence4pairBK_cBO_B1o_NCINvB4_6verifyBK_ccB1o_INvNtNtB6_9character8complete7anycharBK_B1o_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB6_5multi5many0BK_cB1o_NCIB2o_BK_ccB1o_B2J_NCNvB3w_16member_character0E0E0E0E0B3y_:
  512|  47.5k|  move |input: I| {
  513|  47.5k|    let i = input.clone();
  514|  47.5k|    match parser.parse(i) {
  515|  28.1k|      Ok((i, _)) => {
  516|  28.1k|        let index = input.offset(&i);
  517|  28.1k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  19.4k|      Err(e) => Err(e),
  520|       |    }
  521|  47.5k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_8sequence8precededBE_BE_cB1t_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1t_E0NCINvNtB6_6branch3altBE_cB1t_TNCINvNtNtB6_9character8complete4charBE_B1t_E0NCINvB1W_9delimitedBE_cccB1t_B3F_B3F_B3F_E0EE0E0NCNvBJ_28wildcard_descendant_selector0E0BL_:
   78|  65.5k|  move |input: I| {
   79|  65.5k|    let (input, o1) = parser.parse(input)?;
   80|    942|    Ok((input, f(o1)))
   81|  65.5k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB6_5error5ErrorBH_EINvNtNtB6_9character8complete7anycharBH_BL_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0B1X_:
  427|  47.5k|  move |input: I| {
  428|  47.5k|    let i = input.clone();
  429|  47.5k|    let (input, o) = first.parse(input)?;
  430|       |
  431|  47.4k|    if second(o.borrow()) {
  432|  28.1k|      Ok((input, o))
  433|       |    } else {
  434|  19.3k|      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|  47.5k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBE_ENCINvB4_3mapBE_cBG_B1s_NCINvNtNtB6_9character8complete4charBE_B1s_E0NCNvBI_8jsonpath0E0E0BK_:
  243|  1.07k|  move |input: I| {
  244|  1.07k|    let i = input.clone();
  245|  1.07k|    match f.parse(input) {
  246|     16|      Ok((i, o)) => Ok((i, Some(o))),
  247|  1.06k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  1.07k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBC_ENCINvNtB4_6branch3altBC_cB1r_TNCINvNtB4_8sequence8precededBC_ccB1r_NCINvNtNtB4_9character8complete4charBC_B1r_E0B2U_E0NCINvB2o_9delimitedBC_cccB1r_B2U_B2U_B2U_E0EE0NCNvBH_23wildcard_child_selector0EBJ_:
   73|  60.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  60.0k|where
   75|  60.0k|  F: Parser<I, O1, E>,
   76|  60.0k|  G: FnMut(O1) -> O2,
   77|  60.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator6verifyReccINtNtB4_5error5ErrorBF_EINvNtNtB4_9character8complete7anycharBF_BJ_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0EB1V_:
  417|   120k|pub fn verify<I: Clone, O1, O2, E: ParseError<I>, F, G>(
  418|   120k|  mut first: F,
  419|   120k|  second: G,
  420|   120k|) -> impl FnMut(I) -> IResult<I, O1, E>
  421|   120k|where
  422|   120k|  F: Parser<I, O1, E>,
  423|   120k|  G: Fn(&O2) -> bool,
  424|   120k|  O1: Borrow<O2>,
  425|   120k|  O2: ?Sized,
  426|   120k|{
  427|       |  move |input: I| {
  428|       |    let i = input.clone();
  429|       |    let (input, o) = first.parse(input)?;
  430|       |
  431|       |    if second(o.borrow()) {
  432|       |      Ok((input, o))
  433|       |    } else {
  434|       |      Err(Err::Error(E::from_error_kind(i, ErrorKind::Verify)))
  435|       |    }
  436|       |  }
  437|   120k|}
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB4_5error5ErrorBI_ENCINvNtB4_8sequence4pairBI_cBM_B1m_NCINvB2_6verifyBI_ccB1m_INvNtNtB4_9character8complete7anycharBI_B1m_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB4_5multi5many0BI_cB1m_NCIB2m_BI_ccB1m_B2H_NCNvB3u_16member_character0E0E0E0EB3w_:
  506|   120k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   120k|  mut parser: F,
  508|   120k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   120k|where
  510|   120k|  F: Parser<I, O, E>,
  511|   120k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtBI_5TokenINtNtB6_5error5ErrorBE_ENCINvNtB6_6branch3altBE_BG_B1L_TNCINvNtB6_8sequence8precededBE_cBG_B1L_NCINvNtNtB6_9character8complete4charBE_B1L_E0NCIB2_BE_BE_BG_B1L_NCINvB4_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1L_NCINvB2K_4pairBE_cB4H_B1L_NCINvB4_6verifyBE_ccB1L_INvB3n_7anycharBE_B1L_ENCNvBI_12member_first0E0NCINvNtB6_5multi5many0BE_cB1L_NCIB5O_BE_ccB1L_B69_NCNvBI_16member_character0E0E0E0E0NcNtBG_8Borrowed0E0E0NCINvB2K_9delimitedBE_cBG_cB1L_B3i_NCIB2c_BE_BG_B1L_TNCIB8E_BE_cBG_cB1L_B3i_NCIB2_BE_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4M_6string6StringEBG_B1L_NCINvB4_3optBE_BaA_B1L_NCINvNtNtB6_5bytes8complete17escaped_transformBE_B1L_NCIB2_BE_IB4I_NtBI_16MaybeEscapedCharENtBI_19MaybeEscapedCharVecB1L_NCINvB6Z_5many1BE_Bcw_B1L_NCIB2c_BE_Bcw_B1L_TNCIB2_BE_cBcw_B1L_NCIB5O_BE_ccB1L_NCINvB3n_7none_ofBE_BE_B1L_E0NCNvBI_9unescaped0E0NcNtBcw_4Char0E0NCIB2_BE_cBcw_B1L_B3i_NcNtBcw_7Escaped0E0EE0E0NcBcU_0E0NCIB2c_BE_BE_B1L_TNCIB2c_BE_BE_B1L_TNCINvB4_5valueBE_BE_BE_B1L_NCINvBbw_3tagBE_BE_B1L_E0E0Bhb_Bhb_Bhb_Bhb_Bhb_Bhb_EE0Bhb_EE0BcU_BE_cBaA_E0E0NvYBG_INtNtBa3_7convert4FromB9Y_E4fromE0B3i_E0NCIB8E_BE_cBG_cB1L_B3i_NCIB2_BE_B9Y_BG_B1L_NCIBb7_BE_BaA_B1L_NCIBbu_BE_B1L_NCIB4n_BE_B4H_B1L_NCIBdr_BE_cB1L_NCIB2c_BE_cB1L_TBep_B3i_EE0E0E0BgB_BE_BE_cBaA_E0E0BiR_E0B3i_E0EE0B3i_E0EE0NcNtB1A_5Child0E0BK_:
   78|  90.7k|  move |input: I| {
   79|  90.7k|    let (input, o1) = parser.parse(input)?;
   80|  24.9k|    Ok((input, f(o1)))
   81|  90.7k|  }

_RNvXs1_NtCsijflsOnQTe0_3nom5errorINtB5_5ErrorReEINtB5_17FromExternalErrorBH_NtNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num5error17JsonIntParseErrorE19from_external_errorB1i_:
   86|    420|  fn from_external_error(input: I, kind: ErrorKind, _e: E) -> Self {
   87|    420|    Error { input, code: kind }
   88|    420|  }
_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E2orCsaVj0Slin5kQ_15rsonpath_syntax:
   32|   498k|  fn or(self, other: Self) -> Self {
   33|   498k|    other
   34|   498k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsaVj0Slin5kQ_15rsonpath_syntax:
   73|   652k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|   652k|    Error { input, code: kind }
   75|   652k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsaVj0Slin5kQ_15rsonpath_syntax:
   77|   283k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   283k|    other
   79|   283k|  }
_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsaVj0Slin5kQ_15rsonpath_syntax:
   26|   417k|  fn from_char(input: I, _: char) -> Self {
   27|   417k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   417k|  }

_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB7_5error5ErrorBY_ENCINvNtNtB7_5bytes8complete17escaped_transformBY_B1C_NCINvBD_3mapBY_INtNtB14_3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB3p_19MaybeEscapedCharVecB1C_NCINvNtB7_5multi5many1BY_B3n_B1C_NCINvNtB7_6branch3altBY_B3n_B1C_TNCIB2U_BY_cB3n_B1C_NCINvBD_6verifyBY_ccB1C_NCINvNtNtB7_9character8complete7none_ofBY_BY_B1C_E0NCNvB3p_9unescaped0E0NcNtB3n_4Char0E0NCIB2U_BY_cB3n_B1C_NCINvB6H_4charBY_B1C_E0NcNtB3n_7Escaped0E0EE0E0NcB4m_0E0NCIB5r_BY_BY_B1C_TNCIB5r_BY_BY_B1C_TNCINvBD_5valueBY_BY_BY_B1C_NCINvB25_3tagBY_BY_B1C_E0E0B9P_B9P_B9P_B9P_B9P_B9P_EE0B9P_EE0B4m_BY_cB10_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionB10_EB1C_E5parseB3r_:
  324|  3.93k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.93k|    self(i)
  326|  3.93k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi5many0RecINtNtB7_5error5ErrorBU_ENCINvNtB7_10combinator6verifyBU_ccBX_INvNtNtB7_9character8complete7anycharBU_BX_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0E0E0INtB5_6ParserBU_INtNtCshJIxznpEM8j_5alloc3vec3VeccEBX_E5parseB2K_:
  324|  28.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  28.1k|    self(i)
  326|  28.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_cINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B17_E0NCINvNtB7_6branch3altB10_cB17_TNCINvNtNtB7_9character8complete4charB10_B17_E0NCINvBD_9delimitedB10_cccB17_B2K_B2K_B2K_E0EE0E0INtB5_6ParserB10_cB17_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  65.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  65.5k|    self(i)
  326|  65.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence9delimitedBT_cBV_cB1P_NCINvNtNtB7_9character8complete4charBT_B1P_E0NCINvNtB7_10combinator3mapBT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBV_B1P_NCINvB3H_3optBT_B4H_B1P_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1P_NCIB3F_BT_INtNtB4L_3vec3VecNtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1P_NCINvNtB7_5multi5many1BT_B77_B1P_NCIBB_BT_B77_B1P_TNCIB3F_BT_cB77_B1P_NCINvB3H_6verifyBT_ccB1P_NCINvB2Y_7none_ofBT_BT_B1P_E0NCNvBX_9unescaped0E0NcNtB77_4Char0E0NCIB3F_BT_cB77_B1P_B2T_NcNtB77_7Escaped0E0EE0E0NcB7v_0E0NCIBB_BT_BT_B1P_TNCIBB_BT_BT_B1P_TNCINvB3H_5valueBT_BT_BT_B1P_NCINvB5U_3tagBT_BT_B1P_E0E0Bc1_Bc1_Bc1_Bc1_Bc1_Bc1_EE0Bc1_EE0B7v_BT_cB4H_E0E0NvYBV_INtNtB4a_7convert4FromB45_E4fromE0B2T_E0NCIB2h_BT_cBV_cB1P_B2T_NCIB3F_BT_B45_BV_B1P_NCIB5u_BT_B4H_B1P_NCIB5S_BT_B1P_NCINvB3H_9recognizeBT_IB6R_cEB1P_NCIB82_BT_cB1P_NCIBB_BT_cB1P_TB97_B2T_EE0E0E0Bbt_BT_BT_cB4H_E0E0BdI_E0B2T_E0EE0INtB5_6ParserBT_BV_B1P_E5parseBZ_:
  324|  14.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.2k|    self(i)
  326|  14.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_NtBX_12MemberStringBV_B1H_NCIBB_BT_B2z_B1H_TNCIB29_BT_BT_B2z_B1H_NCINvB2b_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1H_NCINvNtB7_8sequence4pairBT_cB40_B1H_NCINvB2b_6verifyBT_ccB1H_INvNtNtB7_9character8complete7anycharBT_B1H_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1H_NCIB5h_BT_ccB1H_B5D_NCNvBX_16member_character0E0E0E0E0NcNtB2z_8Borrowed0E0NCINvB4J_9delimitedBT_cB2z_cB1H_NCINvB5G_4charBT_B1H_E0NCIBB_BT_B2z_B1H_TNCIB8t_BT_cB2z_cB1H_B8W_NCIB29_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB45_6string6StringEB2z_B1H_NCINvB2b_3optBT_BaL_B1H_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1H_NCIB29_BT_IB41_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1H_NCINvB6P_5many1BT_BcK_B1H_NCIBB_BT_BcK_B1H_TNCIB29_BT_cBcK_B1H_NCIB5h_BT_ccB1H_NCINvB5G_7none_ofBT_BT_B1H_E0NCNvBX_9unescaped0E0NcNtBcK_4Char0E0NCIB29_BT_cBcK_B1H_B8W_NcNtBcK_7Escaped0E0EE0E0NcBd8_0E0NCIBB_BT_BT_B1H_TNCIBB_BT_BT_B1H_TNCINvB2b_5valueBT_BT_BT_B1H_NCINvBbJ_3tagBT_BT_B1H_E0E0Bho_Bho_Bho_Bho_Bho_Bho_EE0Bho_EE0Bd8_BT_cBaL_E0E0NvYB2z_INtNtBae_7convert4FromBa9_E4fromE0B8W_E0NCIB8t_BT_cB2z_cB1H_B8W_NCIB29_BT_Ba9_B2z_B1H_NCIBbj_BT_BaL_B1H_NCIBbH_BT_B1H_NCIB3F_BT_B40_B1H_NCIBdF_BT_cB1H_NCIBB_BT_cB1H_TBeD_B8W_EE0E0E0BgQ_BT_BT_cBaL_E0E0Bj5_E0B8W_E0EE0B8W_E0EE0NcNtBV_10Descendant0E0NCIB29_BT_NtNtBZ_3num8JsonUIntBV_B1H_NCIB8t_BT_cBnk_cB1H_B8W_NCINvB2b_7map_resBT_Bnk_Bnk_B1H_NtBjf_10InfallibleNCIBoc_BT_BT_Bnk_B1H_NtNtBnm_5error17JsonIntParseErrorINvB5G_6digit1BT_B1H_EINvMNtBae_3stre5parseBnk_EE0NvYBnk_INtBjf_7TryIntoBnk_E8try_intoE0B8W_E0NcNtBV_20ArrayIndexDescendant0E0EE0INtB5_6ParserBT_BV_B1H_E5parseBZ_:
  324|  9.26k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.26k|    self(i)
  326|  9.26k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReBT_INtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator5valueBT_BT_BT_BY_NCINvNtNtB7_5bytes8complete3tagBT_BT_BY_E0E0B1n_B1n_B1n_B1n_B1n_B1n_EE0INtB5_6ParserBT_BT_BY_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  8.55k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.55k|    self(i)
  326|  8.55k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1R_E0NCINvNtB7_10combinator7map_resB11_B14_B14_B1R_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB33_B11_B11_B14_B1R_NtNtB16_5error17JsonIntParseErrorINvB2l_6digit1B11_B1R_EINvMNtB3O_3stre5parseB14_EE0NvYB14_INtB3M_7TryIntoB14_E8try_intoE0B2g_E0INtB5_6ParserB11_B14_B1R_E5parseB18_:
  324|  70.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  70.8k|    self(i)
  326|  70.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_INtNtB7_5error5ErrorB13_EE0INtB5_6ParserB13_B13_B19_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|   180k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   180k|    self(i)
  326|   180k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator9recognizeReTcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEINtNtB7_5error5ErrorB14_ENCINvNtB7_8sequence4pairB14_cB18_B1I_NCINvBD_6verifyB14_ccB1I_INvNtNtB7_9character8complete7anycharB14_B1I_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB7_5multi5many0B14_cB1I_NCIB2L_B14_ccB1I_B37_NCNvB3V_16member_character0E0E0E0E0INtB5_6ParserB14_B14_B1I_E5parseB3X_:
  324|  47.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.5k|    self(i)
  326|  47.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBY_ENCINvBD_3mapBY_cB10_B1M_NCINvNtNtB7_9character8complete4charBY_B1M_E0NCNvB12_8jsonpath0E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionB10_EB1M_E5parseB14_:
  324|  1.07k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.07k|    self(i)
  326|  1.07k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecccINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B16_E0B1v_B1v_E0INtB5_6ParserB11_cB16_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|   100k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   100k|    self(i)
  326|   100k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReNtNtCshJIxznpEM8j_5alloc6string6StringINtNtB7_5error5ErrorBY_ENCINvNtNtB7_5bytes8complete17escaped_transformBY_B1C_NCINvBD_9recognizeBY_INtNtB14_3vec3VeccEB1C_NCINvNtB7_5multi5many1BY_cB1C_NCINvNtB7_6branch3altBY_cB1C_TNCINvBD_6verifyBY_ccB1C_NCINvNtNtB7_9character8complete7none_ofBY_BY_B1C_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB50_4charBY_B1C_E0EE0E0E0NCIB46_BY_BY_B1C_TNCIB46_BY_BY_B1C_TNCINvBD_5valueBY_BY_BY_B1C_NCINvB25_3tagBY_BY_B1C_E0E0B7J_B7J_B7J_B7J_B7J_B7J_EE0B7J_EE0BY_BY_cB10_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionB10_EB1C_E5parseB5Q_:
  324|  2.84k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.84k|    self(i)
  326|  2.84k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_cBV_B1H_NCIBB_BT_cB1H_TNCINvNtB7_8sequence8precededBT_ccB1H_NCINvNtNtB7_9character8complete4charBT_B1H_E0B3x_E0NCINvB31_9delimitedBT_cccB1H_B3x_B3x_B3x_E0EE0NCNvBX_23wildcard_child_selector0E0NCIB29_BT_NtBX_12MemberStringBV_B1H_NCIBB_BT_B5P_B1H_TNCIB2Z_BT_cB5P_B1H_B3x_NCIB29_BT_BT_B5P_B1H_NCINvB2b_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1H_NCINvB31_4pairBT_cB7D_B1H_NCINvB2b_6verifyBT_ccB1H_INvB3C_7anycharBT_B1H_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1H_NCIB8K_BT_ccB1H_B96_NCNvBX_16member_character0E0E0E0E0NcNtB5P_8Borrowed0E0E0NCIB4p_BT_cB5P_cB1H_B3x_NCIBB_BT_B5P_B1H_TNCIB4p_BT_cB5P_cB1H_B3x_NCIB29_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7I_6string6StringEB5P_B1H_NCINvB2b_3optBT_Bdp_B1H_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1H_NCIB29_BT_IB7E_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1H_NCINvB9W_5many1BT_Bfo_B1H_NCIBB_BT_Bfo_B1H_TNCIB29_BT_cBfo_B1H_NCIB8K_BT_ccB1H_NCINvB3C_7none_ofBT_BT_B1H_E0NCNvBX_9unescaped0E0NcNtBfo_4Char0E0NCIB29_BT_cBfo_B1H_B3x_NcNtBfo_7Escaped0E0EE0E0NcBfM_0E0NCIBB_BT_BT_B1H_TNCIBB_BT_BT_B1H_TNCINvB2b_5valueBT_BT_BT_B1H_NCINvBen_3tagBT_BT_B1H_E0E0Bk2_Bk2_Bk2_Bk2_Bk2_Bk2_EE0Bk2_EE0BfM_BT_cBdp_E0E0NvYB5P_INtNtBcS_7convert4FromBcN_E4fromE0B3x_E0NCIB4p_BT_cB5P_cB1H_B3x_NCIB29_BT_BcN_B5P_B1H_NCIBdX_BT_Bdp_B1H_NCIBel_BT_B1H_NCIB7i_BT_B7D_B1H_NCIBgj_BT_cB1H_NCIBB_BT_cB1H_TBhh_B3x_EE0E0E0Bju_BT_BT_cBdp_E0E0BlJ_E0B3x_E0EE0B3x_E0EE0NcNtBV_5Child0E0NCIB29_BT_NtNtBZ_3num8JsonUIntBV_B1H_NCIB4p_BT_cBpS_cB1H_B3x_NCINvB2b_7map_resBT_BpS_BpS_B1H_NtBlT_10InfallibleNCIBqK_BT_BT_BpS_B1H_NtNtBpU_5error17JsonIntParseErrorINvB3C_6digit1BT_B1H_EINvMNtBcS_3stre5parseBpS_EE0NvYBpS_INtBlT_7TryIntoBpS_E8try_intoE0B3x_E0NcNtBV_15ArrayIndexChild0E0NCIB29_BT_cBV_B1H_NCIB2Z_BT_BT_cB1H_Bku_NCIBB_BT_cB1H_TB3x_B4m_EE0E0NCNvBX_28wildcard_descendant_selector0E0NCIB2Z_BT_BT_BV_B1H_Bku_NCIBB_BT_BV_B1H_TNCIB29_BT_B5P_BV_B1H_NCIBB_BT_B5P_B1H_TB6U_Bbz_EE0NcNtBV_10Descendant0E0NCIB29_BT_BpS_BV_B1H_Bqj_NcNtBV_20ArrayIndexDescendant0E0EE0E0EE0INtB5_6ParserBT_BV_B1H_E5parseBZ_:
  324|  98.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  98.5k|    self(i)
  326|  98.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1Z_E0NCINvNtB7_10combinator3mapB11_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEB14_B1Z_NCINvB3d_3optB11_B4e_B1Z_NCINvNtNtB7_5bytes8complete17escaped_transformB11_B1Z_NCIB3b_B11_INtNtB4i_3vec3VecNtB16_16MaybeEscapedCharENtB16_19MaybeEscapedCharVecB1Z_NCINvNtB7_5multi5many1B11_B6I_B1Z_NCINvNtB7_6branch3altB11_B6I_B1Z_TNCIB3b_B11_cB6I_B1Z_NCINvB3d_6verifyB11_ccB1Z_NCINvB2t_7none_ofB11_B11_B1Z_E0NCNvB16_9unescaped0E0NcNtB6I_4Char0E0NCIB3b_B11_cB6I_B1Z_B2o_NcNtB6I_7Escaped0E0EE0E0NcB77_0E0NCIB8d_B11_B11_B1Z_TNCIB8d_B11_B11_B1Z_TNCINvB3d_5valueB11_B11_B11_B1Z_NCINvB5t_3tagB11_B11_B1Z_E0E0Bc7_Bc7_Bc7_Bc7_Bc7_Bc7_EE0Bc7_EE0B77_B11_cB4e_E0E0NvYB14_INtNtB3H_7convert4FromB3C_E4fromE0B2o_E0INtB5_6ParserB11_B14_B1Z_E5parseB18_:
  324|  14.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.2k|    self(i)
  326|  14.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB11_EINvNtNtB7_9character8complete7anycharB11_B15_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0INtB5_6ParserB11_cB15_E5parseB2k_:
  324|  47.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.5k|    self(i)
  326|  47.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete7none_ofReB1b_INtNtB7_5error5ErrorB1b_EE0INtB5_6ParserB1b_cB1h_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  44.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  44.6k|    self(i)
  326|  44.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi5many1ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB7_5error5ErrorBU_ENCINvNtB7_6branch3altBU_BW_B1U_TNCINvNtB7_10combinator3mapBU_cBW_B1U_NCINvB2T_6verifyBU_ccB1U_NCINvNtNtB7_9character8complete7none_ofBU_BU_B1U_E0NCNvBY_9unescaped0E0NcNtBW_4Char0E0NCIB2R_BU_cBW_B1U_NCINvB3T_4charBU_B1U_E0NcNtBW_7Escaped0E0EE0E0INtB5_6ParserBU_INtNtCshJIxznpEM8j_5alloc3vec3VecBW_EB1U_E5parseB10_:
  324|  9.67k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.67k|    self(i)
  326|  9.67k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator9recognizeReINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB7_5error5ErrorB14_ENCINvNtB7_5multi5many1B14_cB1F_NCINvNtB7_6branch3altB14_cB1F_TNCINvBD_6verifyB14_ccB1F_NCINvNtNtB7_9character8complete7none_ofB14_B14_B1F_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB3y_4charB14_B1F_E0EE0E0E0INtB5_6ParserB14_B14_B1F_E5parseB4q_:
  324|  10.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.8k|    self(i)
  326|  10.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_cBV_B1P_NCINvNtNtB7_9character8complete4charBT_B1P_E0NCINvNtB7_10combinator3mapBT_BT_BV_B1P_NCINvB3F_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1P_NCINvB2j_4pairBT_cB4B_B1P_NCINvB3F_6verifyBT_ccB1P_INvB2W_7anycharBT_B1P_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1P_NCIB5I_BT_ccB1P_B64_NCNvBX_16member_character0E0E0E0E0NcNtBV_8Borrowed0E0E0NCINvB2j_9delimitedBT_cBV_cB1P_B2R_NCIBB_BT_BV_B1P_TNCIB8z_BT_cBV_cB1P_B2R_NCIB3D_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB4G_6string6StringEBV_B1P_NCINvB3F_3optBT_Bav_B1P_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1P_NCIB3D_BT_IB4C_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1P_NCINvB6U_5many1BT_Bct_B1P_NCIBB_BT_Bct_B1P_TNCIB3D_BT_cBct_B1P_NCIB5I_BT_ccB1P_NCINvB2W_7none_ofBT_BT_B1P_E0NCNvBX_9unescaped0E0NcNtBct_4Char0E0NCIB3D_BT_cBct_B1P_B2R_NcNtBct_7Escaped0E0EE0E0NcBcR_0E0NCIBB_BT_BT_B1P_TNCIBB_BT_BT_B1P_TNCINvB3F_5valueBT_BT_BT_B1P_NCINvBbs_3tagBT_BT_B1P_E0E0Bh7_Bh7_Bh7_Bh7_Bh7_Bh7_EE0Bh7_EE0BcR_BT_cBav_E0E0NvYBV_INtNtB9Y_7convert4FromB9T_E4fromE0B2R_E0NCIB8z_BT_cBV_cB1P_B2R_NCIB3D_BT_B9T_BV_B1P_NCIBb2_BT_Bav_B1P_NCIBbq_BT_B1P_NCIB4g_BT_B4B_B1P_NCIBdo_BT_cB1P_NCIBB_BT_cB1P_TBem_B2R_EE0E0E0Bgz_BT_BT_cBav_E0E0BiO_E0B2R_E0EE0B2R_E0EE0INtB5_6ParserBT_BV_B1P_E5parseBZ_:
  324|  90.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  90.7k|    self(i)
  326|  90.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB7_5error5ErrorBY_ENCINvNtNtB7_9character8complete4charBY_B1Z_E0NcNtB11_7Escaped0E0INtB5_6ParserBY_B11_B1Z_E5parseB15_:
  324|  10.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.7k|    self(i)
  326|  10.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator7map_resReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntB14_INtNtB7_5error5ErrorB12_ENtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIBB_B12_B12_B14_B1U_NtNtB16_5error17JsonIntParseErrorINvNtNtB7_9character8complete6digit1B12_B1U_EINvMNtB2n_3stre5parseB14_EE0NvYB14_INtB2l_7TryIntoB14_E8try_intoE0INtB5_6ParserB12_B14_B1U_E5parseB18_:
  324|  13.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.1k|    self(i)
  326|  13.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete4charReINtNtB7_5error5ErrorB18_EE0INtB5_6ParserB18_cB1a_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|   567k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   567k|    self(i)
  326|   567k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator7map_resReB12_NtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntINtNtB7_5error5ErrorB12_ENtNtB1a_5error17JsonIntParseErrorINvNtNtB7_9character8complete6digit1B12_B1U_EINvMNtCslATUeuPuGvJ_4core3stre5parseB18_EE0INtB5_6ParserB12_B18_B1U_E5parseB1c_:
  324|  13.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.1k|    self(i)
  326|  13.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi5many0ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBU_ENCINvNtB7_6branch3altBU_BW_B1I_TNCINvNtB7_10combinator3mapBU_cBW_B1I_NCIB29_BU_cB1I_TNCINvNtB7_8sequence8precededBU_ccB1I_NCINvNtNtB7_9character8complete4charBU_B1I_E0B44_E0NCINvB3y_9delimitedBU_cccB1I_B44_B44_B44_E0EE0NCNvBY_23wildcard_child_selector0E0NCIB2F_BU_NtBY_12MemberStringBW_B1I_NCIB29_BU_B6m_B1I_TNCIB3w_BU_cB6m_B1I_B44_NCIB2F_BU_BU_B6m_B1I_NCINvB2H_9recognizeBU_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1I_NCINvB3y_4pairBU_cB8b_B1I_NCINvB2H_6verifyBU_ccB1I_INvB49_7anycharBU_B1I_ENCNvBY_12member_first0E0NCIBB_BU_cB1I_NCIB9i_BU_ccB1I_B9E_NCNvBY_16member_character0E0E0E0E0NcNtB6m_8Borrowed0E0E0NCIB4W_BU_cB6m_cB1I_B44_NCIB29_BU_B6m_B1I_TNCIB4W_BU_cB6m_cB1I_B44_NCIB2F_BU_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB8g_6string6StringEB6m_B1I_NCINvB2H_3optBU_BdI_B1I_NCINvNtNtB7_5bytes8complete17escaped_transformBU_B1I_NCIB2F_BU_IB8c_NtBY_16MaybeEscapedCharENtBY_19MaybeEscapedCharVecB1I_NCINvBD_5many1BU_BfH_B1I_NCIB29_BU_BfH_B1I_TNCIB2F_BU_cBfH_B1I_NCIB9i_BU_ccB1I_NCINvB49_7none_ofBU_BU_B1I_E0NCNvBY_9unescaped0E0NcNtBfH_4Char0E0NCIB2F_BU_cBfH_B1I_B44_NcNtBfH_7Escaped0E0EE0E0NcBg5_0E0NCIB29_BU_BU_B1I_TNCIB29_BU_BU_B1I_TNCINvB2H_5valueBU_BU_BU_B1I_NCINvBeG_3tagBU_BU_B1I_E0E0Bkn_Bkn_Bkn_Bkn_Bkn_Bkn_EE0Bkn_EE0Bg5_BU_cBdI_E0E0NvYB6m_INtNtBdb_7convert4FromBd6_E4fromE0B44_E0NCIB4W_BU_cB6m_cB1I_B44_NCIB2F_BU_Bd6_B6m_B1I_NCIBeg_BU_BdI_B1I_NCIBeE_BU_B1I_NCIB7Q_BU_B8b_B1I_NCIBgC_BU_cB1I_NCIB29_BU_cB1I_TBhA_B44_EE0E0E0BjN_BU_BU_cBdI_E0E0Bm4_E0B44_E0EE0B44_E0EE0NcNtBW_5Child0E0NCIB2F_BU_NtNtB10_3num8JsonUIntBW_B1I_NCIB4W_BU_cBqe_cB1I_B44_NCINvB2H_7map_resBU_Bqe_Bqe_B1I_NtBme_10InfallibleNCIBr7_BU_BU_Bqe_B1I_NtNtBqg_5error17JsonIntParseErrorINvB49_6digit1BU_B1I_EINvMNtBdb_3stre5parseBqe_EE0NvYBqe_INtBme_7TryIntoBqe_E8try_intoE0B44_E0NcNtBW_15ArrayIndexChild0E0NCIB2F_BU_cBW_B1I_NCIB3w_BU_BU_cB1I_BkP_NCIB29_BU_cB1I_TB44_B4T_EE0E0NCNvBY_28wildcard_descendant_selector0E0NCIB3w_BU_BU_BW_B1I_BkP_NCIB29_BU_BW_B1I_TNCIB2F_BU_B6m_BW_B1I_NCIB29_BU_B6m_B1I_TB7s_BbR_EE0NcNtBW_10Descendant0E0NCIB2F_BU_Bqe_BW_B1I_BqG_NcNtBW_20ArrayIndexDescendant0E0EE0E0EE0E0INtB5_6ParserBU_IB8c_BW_EB1I_E5parseB10_:
  324|  1.07k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.07k|    self(i)
  326|  1.07k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1Z_E0NCINvNtB7_10combinator3mapB11_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEB14_B1Z_NCINvB3d_3optB11_B4e_B1Z_NCINvNtNtB7_5bytes8complete17escaped_transformB11_B1Z_NCINvB3d_9recognizeB11_INtNtB4i_3vec3VeccEB1Z_NCINvNtB7_5multi5many1B11_cB1Z_NCINvNtB7_6branch3altB11_cB1Z_TNCINvB3d_6verifyB11_ccB1Z_NCINvB2t_7none_ofB11_B11_B1Z_E0NCNvB16_9unescaped0E0B2o_EE0E0E0NCIB7y_B11_B11_B1Z_TNCIB7y_B11_B11_B1Z_TNCINvB3d_5valueB11_B11_B11_B1Z_NCINvB5t_3tagB11_B11_B1Z_E0E0Ba5_Ba5_Ba5_Ba5_Ba5_Ba5_EE0Ba5_EE0B11_B11_cB4e_E0E0NvYB14_INtNtB3H_7convert4FromB3C_E4fromE0B2o_E0INtB5_6ParserB11_B14_B1Z_E5parseB18_:
  324|  12.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.1k|    self(i)
  326|  12.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_cB1N_TNCINvNtB7_8sequence8precededBY_ccB1N_NCINvNtNtB7_9character8complete4charBY_B1N_E0B3g_E0NCINvB2K_9delimitedBY_cccB1N_B3g_B3g_B3g_E0EE0NCNvB13_23wildcard_child_selector0E0INtB5_6ParserBY_B11_B1N_E5parseB15_:
  324|  98.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  98.5k|    self(i)
  326|  98.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete4charB11_B1Z_E0NCINvNtB7_6branch3altB11_B14_B1Z_TNCIBB_B11_cB14_cB1Z_B2o_NCINvNtB7_10combinator3mapB11_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEB14_B1Z_NCINvB49_3optB11_B5a_B1Z_NCINvNtNtB7_5bytes8complete17escaped_transformB11_B1Z_NCIB47_B11_INtNtB5e_3vec3VecNtB16_16MaybeEscapedCharENtB16_19MaybeEscapedCharVecB1Z_NCINvNtB7_5multi5many1B11_B7E_B1Z_NCIB3b_B11_B7E_B1Z_TNCIB47_B11_cB7E_B1Z_NCINvB49_6verifyB11_ccB1Z_NCINvB2t_7none_ofB11_B11_B1Z_E0NCNvB16_9unescaped0E0NcNtB7E_4Char0E0NCIB47_B11_cB7E_B1Z_B2o_NcNtB7E_7Escaped0E0EE0E0NcB83_0E0NCIB3b_B11_B11_B1Z_TNCIB3b_B11_B11_B1Z_TNCINvB49_5valueB11_B11_B11_B1Z_NCINvB6p_3tagB11_B11_B1Z_E0E0BcP_BcP_BcP_BcP_BcP_BcP_EE0BcP_EE0B83_B11_cB5a_E0E0NvYB14_INtNtB4D_7convert4FromB4y_E4fromE0B2o_E0NCIBB_B11_cB14_cB1Z_B2o_NCIB47_B11_B4y_B14_B1Z_NCIB5Y_B11_B5a_B1Z_NCIB6n_B11_B1Z_NCINvB49_9recognizeB11_IB7o_cEB1Z_NCIB8B_B11_cB1Z_NCIB3b_B11_cB1Z_TB9K_B2o_EE0E0E0Bcb_B11_B11_cB5a_E0E0BeC_E0B2o_E0EE0B2o_E0INtB5_6ParserB11_B14_B1Z_E5parseB18_:
  324|  71.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  71.9k|    self(i)
  326|  71.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B1X_E0NCINvNtB7_10combinator3mapB10_B10_B13_B1X_NCINvB3b_9recognizeB10_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1X_NCINvBD_4pairB10_cB4b_B1X_NCINvB3b_6verifyB10_ccB1X_INvB2r_7anycharB10_B1X_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0B10_cB1X_NCIB5i_B10_ccB1X_B5F_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0E0INtB5_6ParserB10_B13_B1X_E5parseB17_:
  324|  90.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  90.7k|    self(i)
  326|  90.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete17escaped_transformReINtNtB7_5error5ErrorB1i_ENCINvNtB7_10combinator9recognizeB1i_INtNtCshJIxznpEM8j_5alloc3vec3VeccEB1k_NCINvNtB7_5multi5many1B1i_cB1k_NCINvNtB7_6branch3altB1i_cB1k_TNCINvB1O_6verifyB1i_ccB1k_NCINvNtNtB7_9character8complete7none_ofB1i_B1i_B1k_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB4r_4charB1i_B1k_E0EE0E0E0NCIB3u_B1i_B1i_B1k_TNCIB3u_B1i_B1i_B1k_TNCINvB1O_5valueB1i_B1i_B1i_B1k_NCINvBD_3tagB1i_B1i_B1k_E0E0B7h_B7h_B7h_B7h_B7h_B7h_EE0B7h_EE0B1i_B1i_cNtNtB2o_6string6StringE0INtB5_6ParserB1i_B8V_B1k_E5parseB5j_:
  324|  2.84k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.84k|    self(i)
  326|  2.84k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtB12_5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_B10_B26_TNCIBB_BY_BY_B10_B26_NCINvBD_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB26_NCINvNtB7_8sequence4pairBY_cB3I_B26_NCINvBD_6verifyBY_ccB26_INvNtNtB7_9character8complete7anycharBY_B26_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BY_cB26_NCIB4Z_BY_ccB26_B5k_NCNvB12_16member_character0E0E0E0E0NcNtB10_8Borrowed0E0NCINvB4r_9delimitedBY_cB10_cB26_NCINvB5n_4charBY_B26_E0NCIB2x_BY_B10_B26_TNCIB8c_BY_cB10_cB26_B8F_NCIBB_BY_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3N_6string6StringEB10_B26_NCINvBD_3optBY_Bau_B26_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B26_NCIBB_BY_IB3J_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB26_NCINvB6x_5many1BY_Bcr_B26_NCIB2x_BY_Bcr_B26_TNCIBB_BY_cBcr_B26_NCIB4Z_BY_ccB26_NCINvB5n_7none_ofBY_BY_B26_E0NCNvB12_9unescaped0E0NcNtBcr_4Char0E0NCIBB_BY_cBcr_B26_B8F_NcNtBcr_7Escaped0E0EE0E0NcBcQ_0E0NCIB2x_BY_BY_B26_TNCIB2x_BY_BY_B26_TNCINvBD_5valueBY_BY_BY_B26_NCINvBbr_3tagBY_BY_B26_E0E0Bh9_Bh9_Bh9_Bh9_Bh9_Bh9_EE0Bh9_EE0BcQ_BY_cBau_E0E0NvYB10_INtNtB9X_7convert4FromB9S_E4fromE0B8F_E0NCIB8c_BY_cB10_cB26_B8F_NCIBB_BY_B9S_B10_B26_NCIBb2_BY_Bau_B26_NCIBbp_BY_B26_NCIB3o_BY_B3I_B26_NCIBdo_BY_cB26_NCIB2x_BY_cB26_TBem_B8F_EE0E0E0Bgz_BY_BY_cBau_E0E0BiP_E0B8F_E0EE0B8F_E0EE0NcNtB1U_10Descendant0E0INtB5_6ParserBY_B1U_B26_E5parseB14_:
  324|  9.26k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.26k|    self(i)
  326|  9.26k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenEEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_B1a_B2F_E6finishB1L_:
   36|  59.0k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  59.0k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  59.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReBT_INtNtB7_5error5ErrorBT_ETNCIBB_BT_BT_BY_TNCINvNtB7_10combinator5valueBT_BT_BT_BY_NCINvNtNtB7_5bytes8complete3tagBT_BT_BY_E0E0B1D_B1D_B1D_B1D_B1D_B1D_EE0B1D_EE0INtB5_6ParserBT_BT_BY_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  8.55k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.55k|    self(i)
  326|  8.55k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete6digit1ReINtNtB7_5error5ErrorB18_EEINtB5_6ParserB18_B18_B1a_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  13.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.1k|    self(i)
  326|  13.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB7_5error5ErrorBY_ENCINvBD_6verifyBY_ccB1Z_NCINvNtNtB7_9character8complete7none_ofBY_BY_B1Z_E0NCNvB13_9unescaped0E0NcNtB11_4Char0E0INtB5_6ParserBY_B11_B1Z_E5parseB15_:
  324|  22.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.5k|    self(i)
  326|  22.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi5many1RecINtNtB7_5error5ErrorBU_ENCINvNtB7_6branch3altBU_cBX_TNCINvNtB7_10combinator6verifyBU_ccBX_NCINvNtNtB7_9character8complete7none_ofBU_BU_BX_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB2u_4charBU_BX_E0EE0E0INtB5_6ParserBU_INtNtCshJIxznpEM8j_5alloc3vec3VeccEBX_E5parseB3j_:
  324|  10.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.8k|    self(i)
  326|  10.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtNtB7_9character8complete4charBY_B1N_E0NCNvB13_8jsonpath0E0INtB5_6ParserBY_B11_B1N_E5parseB15_:
  324|  1.07k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.07k|    self(i)
  326|  1.07k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator5valueReB10_B10_INtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B1a_E0E0INtB5_6ParserB10_B10_B1a_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  50.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  50.6k|    self(i)
  326|  50.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBY_ENCINvBD_3optBY_B1C_B39_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B39_NCIBB_BY_INtNtB1G_3vec3VecNtB2h_16MaybeEscapedCharENtB2h_19MaybeEscapedCharVecB39_NCINvNtB7_5multi5many1BY_B5b_B39_NCINvNtB7_6branch3altBY_B5b_B39_TNCIBB_BY_cB5b_B39_NCINvBD_6verifyBY_ccB39_NCINvNtNtB7_9character8complete7none_ofBY_BY_B39_E0NCNvB2h_9unescaped0E0NcNtB5b_4Char0E0NCIBB_BY_cB5b_B39_NCINvB7U_4charBY_B39_E0NcNtB5b_7Escaped0E0EE0E0NcB5A_0E0NCIB6F_BY_BY_B39_TNCIB6F_BY_BY_B39_TNCINvBD_5valueBY_BY_BY_B39_NCINvB3Z_3tagBY_BY_B39_E0E0Bb1_Bb1_Bb1_Bb1_Bb1_Bb1_EE0Bb1_EE0B5A_BY_cB1C_E0E0NvYB2f_INtNtB15_7convert4FromB10_E4fromE0INtB5_6ParserBY_B2f_B39_E5parseB2j_:
  324|  3.93k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.93k|    self(i)
  326|  3.93k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence8precededBY_BY_cB1N_NCINvNtNtB7_5bytes8complete3tagBY_BY_B1N_E0NCINvNtB7_6branch3altBY_cB1N_TNCINvNtNtB7_9character8complete4charBY_B1N_E0NCINvB2g_9delimitedBY_cccB1N_B3Z_B3Z_B3Z_E0EE0E0NCNvB13_28wildcard_descendant_selector0E0INtB5_6ParserBY_B11_B1N_E5parseB15_:
  324|  65.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  65.5k|    self(i)
  326|  65.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete7anycharReINtNtB7_5error5ErrorB19_EEINtB5_6ParserB19_cB1b_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  82.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  82.4k|    self(i)
  326|  82.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB7_5error5ErrorB10_ENCINvNtNtB7_5bytes8complete3tagB10_B10_B1S_E0NCINvNtB7_6branch3altB10_B16_B1S_TNCINvNtB7_10combinator3mapB10_NtB18_12MemberStringB16_B1S_NCIB33_B10_B42_B1S_TNCIB3B_B10_B10_B42_B1S_NCINvB3D_9recognizeB10_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1S_NCINvBD_4pairB10_cB5A_B1S_NCINvB3D_6verifyB10_ccB1S_INvNtNtB7_9character8complete7anycharB10_B1S_ENCNvB18_12member_first0E0NCINvNtB7_5multi5many0B10_cB1S_NCIB6H_B10_ccB1S_B74_NCNvB18_16member_character0E0E0E0E0NcNtB42_8Borrowed0E0NCINvBD_9delimitedB10_cB42_cB1S_NCINvB77_4charB10_B1S_E0NCIB33_B10_B42_B1S_TNCIB9Z_B10_cB42_cB1S_Bas_NCIB3B_B10_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB5F_6string6StringEB42_B1S_NCINvB3D_3optB10_Bcm_B1S_NCINvB2m_17escaped_transformB10_B1S_NCIB3B_B10_IB5B_NtB18_16MaybeEscapedCharENtB18_19MaybeEscapedCharVecB1S_NCINvB8i_5many1B10_Be6_B1S_NCIB33_B10_Be6_B1S_TNCIB3B_B10_cBe6_B1S_NCIB6H_B10_ccB1S_NCINvB77_7none_ofB10_B10_B1S_E0NCNvB18_9unescaped0E0NcNtBe6_4Char0E0NCIB3B_B10_cBe6_B1S_Bas_NcNtBe6_7Escaped0E0EE0E0NcBev_0E0NCIB33_B10_B10_B1S_TNCIB33_B10_B10_B1S_TNCINvB3D_5valueB10_B10_B10_B1S_B2h_E0Bj1_Bj1_Bj1_Bj1_Bj1_Bj1_EE0Bj1_EE0Bev_B10_cBcm_E0E0NvYB42_INtNtBbP_7convert4FromBbK_E4fromE0Bas_E0NCIB9Z_B10_cB42_cB1S_Bas_NCIB3B_B10_BbK_B42_B1S_NCIBcU_B10_Bcm_B1S_NCIBdj_B10_B1S_NCIB5e_B10_B5A_B1S_NCIBf3_B10_cB1S_NCIB33_B10_cB1S_TBg5_Bas_EE0E0E0Bin_B10_B10_cBcm_E0E0Bkr_E0Bas_E0EE0Bas_E0EE0NcNtB16_10Descendant0E0NCIB3B_B10_NtNtB1a_3num8JsonUIntB16_B1S_NCIB9Z_B10_cBoS_cB1S_Bas_NCINvB3D_7map_resB10_BoS_BoS_B1S_NtBkB_10InfallibleNCIBpN_B10_B10_BoS_B1S_NtNtBoU_5error17JsonIntParseErrorINvB77_6digit1B10_B1S_EINvMNtBbP_3stre5parseBoS_EE0NvYBoS_INtBkB_7TryIntoBoS_E8try_intoE0Bas_E0NcNtB16_20ArrayIndexDescendant0E0EE0E0INtB5_6ParserB10_B16_B1S_E5parseB1a_:
  324|  64.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  64.5k|    self(i)
  326|  64.5k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReTINtNtBA_6option6OptionNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1x_EEEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_B1a_B38_E6finishB1B_:
   36|  1.07k|  fn finish(self) -> Result<(I, O), E> {
   37|      0|    match self {
   38|  1.07k|      Ok(res) => Ok(res),
   39|      0|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  1.07k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_cBV_B1T_NCINvB2n_6verifyBT_ccB1T_NCINvNtNtB7_9character8complete7none_ofBT_BT_B1T_E0NCNvBX_9unescaped0E0NcNtBV_4Char0E0NCIB2l_BT_cBV_B1T_NCINvB3n_4charBT_B1T_E0NcNtBV_7Escaped0E0EE0INtB5_6ParserBT_BV_B1T_E5parseBZ_:
  324|  22.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.5k|    self(i)
  326|  22.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtB7_8sequence8precededBT_ccBW_NCINvNtNtB7_9character8complete4charBT_BW_E0B1V_E0NCINvB1q_9delimitedBT_cccBW_B1V_B1V_B1V_E0EE0INtB5_6ParserBT_cBW_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  98.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  98.5k|    self(i)
  326|  98.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtB14_6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence9delimitedBY_cB10_cB27_NCINvNtNtB7_9character8complete4charBY_B27_E0NCINvBD_7map_resBY_B10_B10_B27_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3X_BY_BY_B10_B27_NtNtB12_5error17JsonIntParseErrorINvB3g_6digit1BY_B27_EINvMNtB4t_3stre5parseB10_EE0NvYB10_INtB4r_7TryIntoB10_E8try_intoE0B3b_E0NcNtB1M_15ArrayIndexChild0E0INtB5_6ParserBY_B1M_B27_E5parseB14_:
  324|  65.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  65.8k|    self(i)
  326|  65.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReBY_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBY_ENCINvBD_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1X_NCINvNtB7_8sequence4pairBY_cB2I_B1X_NCINvBD_6verifyBY_ccB1X_INvNtNtB7_9character8complete7anycharBY_B1X_ENCNvB15_12member_first0E0NCINvNtB7_5multi5many0BY_cB1X_NCIB3Z_BY_ccB1X_B4k_NCNvB15_16member_character0E0E0E0E0NcNtB13_8Borrowed0E0INtB5_6ParserBY_B13_B1X_E5parseB17_:
  324|  47.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.5k|    self(i)
  326|  47.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB11_EINvNtNtB7_9character8complete7anycharB11_B15_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0E0INtB5_6ParserB11_cB15_E5parseB2k_:
  324|  34.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  34.9k|    self(i)
  326|  34.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtNtB7_9character8complete4charBT_BW_E0NCINvNtB7_8sequence9delimitedBT_cccBW_B1l_B1l_B1l_E0EE0INtB5_6ParserBT_cBW_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  10.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.2k|    self(i)
  326|  10.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete17escaped_transformReINtNtB7_5error5ErrorB1i_ENCINvNtB7_10combinator3mapB1i_INtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB2M_19MaybeEscapedCharVecB1k_NCINvNtB7_5multi5many1B1i_B2K_B1k_NCINvNtB7_6branch3altB1i_B2K_B1k_TNCIB1M_B1i_cB2K_B1k_NCINvB1O_6verifyB1i_ccB1k_NCINvNtNtB7_9character8complete7none_ofB1i_B1i_B1k_E0NCNvB2M_9unescaped0E0NcNtB2K_4Char0E0NCIB1M_B1i_cB2K_B1k_NCINvB69_4charB1i_B1k_E0NcNtB2K_7Escaped0E0EE0E0NcB3J_0E0NCIB4P_B1i_B1i_B1k_TNCIB4P_B1i_B1i_B1k_TNCINvB1O_5valueB1i_B1i_B1i_B1k_NCINvBD_3tagB1i_B1i_B1k_E0E0B9p_B9p_B9p_B9p_B9p_B9p_EE0B9p_EE0B3J_B1i_cNtNtB2i_6string6StringE0INtB5_6ParserB1i_Bb3_B1k_E5parseB2O_:
  324|  3.93k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.93k|    self(i)
  326|  3.93k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntNtNtB14_6parser5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_8sequence9delimitedBY_cB10_cB27_NCINvNtNtB7_9character8complete4charBY_B27_E0NCINvBD_7map_resBY_B10_B10_B27_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB3X_BY_BY_B10_B27_NtNtB12_5error17JsonIntParseErrorINvB3g_6digit1BY_B27_EINvMNtB4t_3stre5parseB10_EE0NvYB10_INtB4r_7TryIntoB10_E8try_intoE0B3b_E0NcNtB1M_20ArrayIndexDescendant0E0INtB5_6ParserBY_B1M_B27_E5parseB14_:
  324|  4.97k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.97k|    self(i)
  326|  4.97k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator3mapBT_BT_BV_B1P_NCINvB2j_9recognizeBT_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1P_NCINvNtB7_8sequence4pairBT_cB3f_B1P_NCINvB2j_6verifyBT_ccB1P_INvNtNtB7_9character8complete7anycharBT_B1P_ENCNvBX_12member_first0E0NCINvNtB7_5multi5many0BT_cB1P_NCIB4w_BT_ccB1P_B4S_NCNvBX_16member_character0E0E0E0E0NcNtBV_8Borrowed0E0NCINvB3Y_9delimitedBT_cBV_cB1P_NCINvB4V_4charBT_B1P_E0NCIBB_BT_BV_B1P_TNCIB7H_BT_cBV_cB1P_B89_NCIB2h_BT_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB3k_6string6StringEBV_B1P_NCINvB2j_3optBT_B9W_B1P_NCINvNtNtB7_5bytes8complete17escaped_transformBT_B1P_NCIB2h_BT_IB3g_NtBX_16MaybeEscapedCharENtBX_19MaybeEscapedCharVecB1P_NCINvB64_5many1BT_BbU_B1P_NCIBB_BT_BbU_B1P_TNCIB2h_BT_cBbU_B1P_NCIB4w_BT_ccB1P_NCINvB4V_7none_ofBT_BT_B1P_E0NCNvBX_9unescaped0E0NcNtBbU_4Char0E0NCIB2h_BT_cBbU_B1P_B89_NcNtBbU_7Escaped0E0EE0E0NcBci_0E0NCIBB_BT_BT_B1P_TNCIBB_BT_BT_B1P_TNCINvB2j_5valueBT_BT_BT_B1P_NCINvBaT_3tagBT_BT_B1P_E0E0Bgy_Bgy_Bgy_Bgy_Bgy_Bgy_EE0Bgy_EE0Bci_BT_cB9W_E0E0NvYBV_INtNtB9p_7convert4FromB9k_E4fromE0B89_E0NCIB7H_BT_cBV_cB1P_B89_NCIB2h_BT_B9k_BV_B1P_NCIBat_BT_B9W_B1P_NCIBaR_BT_B1P_NCIB2U_BT_B3f_B1P_NCIBcP_BT_cB1P_NCIBB_BT_cB1P_TBdN_B89_EE0E0E0Bg0_BT_BT_cB9W_E0E0Bif_E0B89_E0EE0B89_E0EE0INtB5_6ParserBT_BV_B1P_E5parseBZ_:
  324|  9.26k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.26k|    self(i)
  326|  9.26k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReccINtNtB7_5error5ErrorB10_ENCINvNtNtB7_9character8complete4charB10_B14_E0B1t_E0INtB5_6ParserB10_cB14_E5parseCsaVj0Slin5kQ_15rsonpath_syntax:
  324|  98.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  98.5k|    self(i)
  326|  98.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringENtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB7_5error5ErrorBY_ENCINvBD_3optBY_B1C_B39_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B39_NCINvBD_9recognizeBY_INtNtB1G_3vec3VeccEB39_NCINvNtB7_5multi5many1BY_cB39_NCINvNtB7_6branch3altBY_cB39_TNCINvBD_6verifyBY_ccB39_NCINvNtNtB7_9character8complete7none_ofBY_BY_B39_E0NCNvB2h_9unescaped0E0NCINvB6U_4charBY_B39_E0EE0E0E0NCIB60_BY_BY_B39_TNCIB60_BY_BY_B39_TNCINvBD_5valueBY_BY_BY_B39_NCINvB3Z_3tagBY_BY_B39_E0E0B93_B93_B93_B93_B93_B93_EE0B93_EE0BY_BY_cB1C_E0E0NvYB2f_INtNtB15_7convert4FromB10_E4fromE0INtB5_6ParserBY_B2f_B39_E5parseB2j_:
  324|  2.84k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  2.84k|    self(i)
  326|  2.84k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringNtB12_5TokenINtNtB7_5error5ErrorBY_ENCINvNtB7_6branch3altBY_B10_B26_TNCINvNtB7_8sequence8precededBY_cB10_B26_NCINvNtNtB7_9character8complete4charBY_B26_E0NCIBB_BY_BY_B10_B26_NCINvBD_9recognizeBY_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB26_NCINvB36_4pairBY_cB55_B26_NCINvBD_6verifyBY_ccB26_INvB3K_7anycharBY_B26_ENCNvB12_12member_first0E0NCINvNtB7_5multi5many0BY_cB26_NCIB6c_BY_ccB26_B6x_NCNvB12_16member_character0E0E0E0E0NcNtB10_8Borrowed0E0E0NCINvB36_9delimitedBY_cB10_cB26_B3F_NCIB2x_BY_B10_B26_TNCIB95_BY_cB10_cB26_B3F_NCIBB_BY_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB5a_6string6StringEB10_B26_NCINvBD_3optBY_Bb4_B26_NCINvNtNtB7_5bytes8complete17escaped_transformBY_B26_NCIBB_BY_IB56_NtB12_16MaybeEscapedCharENtB12_19MaybeEscapedCharVecB26_NCINvB7o_5many1BY_Bd1_B26_NCIB2x_BY_Bd1_B26_TNCIBB_BY_cBd1_B26_NCIB6c_BY_ccB26_NCINvB3K_7none_ofBY_BY_B26_E0NCNvB12_9unescaped0E0NcNtBd1_4Char0E0NCIBB_BY_cBd1_B26_B3F_NcNtBd1_7Escaped0E0EE0E0NcBdq_0E0NCIB2x_BY_BY_B26_TNCIB2x_BY_BY_B26_TNCINvBD_5valueBY_BY_BY_B26_NCINvBc1_3tagBY_BY_B26_E0E0BhJ_BhJ_BhJ_BhJ_BhJ_BhJ_EE0BhJ_EE0Bdq_BY_cBb4_E0E0NvYB10_INtNtBax_7convert4FromBas_E4fromE0B3F_E0NCIB95_BY_cB10_cB26_B3F_NCIBB_BY_Bas_B10_B26_NCIBbC_BY_Bb4_B26_NCIBbZ_BY_B26_NCIB4L_BY_B55_B26_NCIBdY_BY_cB26_NCIB2x_BY_cB26_TBeW_B3F_EE0E0E0Bh9_BY_BY_cBb4_E0E0Bjp_E0B3F_E0EE0B3F_E0EE0NcNtB1U_5Child0E0INtB5_6ParserBY_B1U_B26_E5parseB14_:
  324|  90.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  90.7k|    self(i)
  326|  90.7k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator6verifyReccINtNtB7_5error5ErrorB11_ENCINvNtNtB7_9character8complete7none_ofB11_B11_B15_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0INtB5_6ParserB11_cB15_E5parseB2r_:
  324|  44.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  44.6k|    self(i)
  326|  44.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altRecINtNtB7_5error5ErrorBT_ETNCINvNtB7_10combinator6verifyBT_ccBW_NCINvNtNtB7_9character8complete7none_ofBT_BT_BW_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB21_4charBT_BW_E0EE0INtB5_6ParserBT_cBW_E5parseB2Q_:
  324|  22.1k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.1k|    self(i)
  326|  22.1k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB7_5error5ErrorBW_ENCINvNtB7_10combinator6verifyBW_ccB1y_INvNtNtB7_9character8complete7anycharBW_B1y_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB7_5multi5many0BW_cB1y_NCIB1Z_BW_ccB1y_B2y_NCNvB3l_16member_character0E0E0E0INtB5_6ParserBW_TcBZ_EB1y_E5parseB3n_:
  324|  47.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.5k|    self(i)
  326|  47.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReINtNtCshJIxznpEM8j_5alloc3vec3VecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharENtB1z_19MaybeEscapedCharVecINtNtB7_5error5ErrorBY_ENCINvNtB7_5multi5many1BY_B1x_B2X_NCINvNtB7_6branch3altBY_B1x_B2X_TNCIBB_BY_cB1x_B2X_NCINvBD_6verifyBY_ccB2X_NCINvNtNtB7_9character8complete7none_ofBY_BY_B2X_E0NCNvB1z_9unescaped0E0NcNtB1x_4Char0E0NCIBB_BY_cB1x_B2X_NCINvB5a_4charBY_B2X_E0NcNtB1x_7Escaped0E0EE0E0NcB2w_0E0INtB5_6ParserBY_B2w_B2X_E5parseB1B_:
  324|  9.67k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.67k|    self(i)
  326|  9.67k|  }

_RINvNtCsijflsOnQTe0_3nom5multi5many0RecINtNtB4_5error5ErrorBy_ENCINvNtB4_10combinator6verifyBy_ccBB_INvNtNtB4_9character8complete7anycharBy_BB_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0E0EB2o_:
   53|   120k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|   120k|where
   55|   120k|  I: Clone + InputLength,
   56|   120k|  F: Parser<I, O, E>,
   57|   120k|  E: ParseError<I>,
   58|   120k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom5multi5many1RecINtNtB6_5error5ErrorBA_ENCINvNtB6_6branch3altBA_cBD_TNCINvNtB6_10combinator6verifyBA_ccBD_NCINvNtNtB6_9character8complete7none_ofBA_BA_BD_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB2a_4charBA_BD_E0EE0E0B2Z_:
  114|  10.8k|  move |mut i: I| match f.parse(i.clone()) {
  115|  7.53k|    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|      0|    Err(e) => Err(e),
  117|  3.33k|    Ok((i1, o)) => {
  118|  3.33k|      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|  3.33k|      acc.push(o);
  120|  3.33k|      i = i1;
  121|       |
  122|  11.2k|      loop {
  123|  11.2k|        let len = i.input_len();
  124|  11.2k|        match f.parse(i.clone()) {
  125|  3.33k|          Err(Err::Error(_)) => return Ok((i, acc)),
  126|      0|          Err(e) => return Err(e),
  127|  7.90k|          Ok((i1, o)) => {
  128|  7.90k|            // infinite loop check: the parser must always consume
  129|  7.90k|            if i1.input_len() == len {
  130|      0|              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|  7.90k|            }
  132|  7.90k|
  133|  7.90k|            i = i1;
  134|  7.90k|            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|  10.8k|  }
_RNCINvNtCsijflsOnQTe0_3nom5multi5many1ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB6_5error5ErrorBA_ENCINvNtB6_6branch3altBA_BC_B1A_TNCINvNtB6_10combinator3mapBA_cBC_B1A_NCINvB2z_6verifyBA_ccB1A_NCINvNtNtB6_9character8complete7none_ofBA_BA_B1A_E0NCNvBE_9unescaped0E0NcNtBC_4Char0E0NCIB2x_BA_cBC_B1A_NCINvB3z_4charBA_B1A_E0NcNtBC_7Escaped0E0EE0E0BG_:
  114|  9.67k|  move |mut i: I| match f.parse(i.clone()) {
  115|  6.03k|    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|      0|    Err(e) => Err(e),
  117|  3.63k|    Ok((i1, o)) => {
  118|  3.63k|      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|  3.63k|      acc.push(o);
  120|  3.63k|      i = i1;
  121|       |
  122|  12.8k|      loop {
  123|  12.8k|        let len = i.input_len();
  124|  12.8k|        match f.parse(i.clone()) {
  125|  3.63k|          Err(Err::Error(_)) => return Ok((i, acc)),
  126|      0|          Err(e) => return Err(e),
  127|  9.26k|          Ok((i1, o)) => {
  128|  9.26k|            // infinite loop check: the parser must always consume
  129|  9.26k|            if i1.input_len() == len {
  130|      0|              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|  9.26k|            }
  132|  9.26k|
  133|  9.26k|            i = i1;
  134|  9.26k|            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|  9.67k|  }
_RINvNtCsijflsOnQTe0_3nom5multi5many1ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16MaybeEscapedCharINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1y_TNCINvNtB4_10combinator3mapBy_cBA_B1y_NCINvB2x_6verifyBy_ccB1y_NCINvNtNtB4_9character8complete7none_ofBy_By_B1y_E0NCNvBC_9unescaped0E0NcNtBA_4Char0E0NCIB2v_By_cBA_B1y_NCINvB3x_4charBy_B1y_E0NcNtBA_7Escaped0E0EE0EBE_:
  108|   120k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|   120k|where
  110|   120k|  I: Clone + InputLength,
  111|   120k|  F: Parser<I, O, E>,
  112|   120k|  E: ParseError<I>,
  113|   120k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|   120k|}
_RINvNtCsijflsOnQTe0_3nom5multi5many0ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_BA_B1m_TNCINvNtB4_10combinator3mapBy_cBA_B1m_NCIB1N_By_cB1m_TNCINvNtB4_8sequence8precededBy_ccB1m_NCINvNtNtB4_9character8complete4charBy_B1m_E0B3I_E0NCINvB3c_9delimitedBy_cccB1m_B3I_B3I_B3I_E0EE0NCNvBC_23wildcard_child_selector0E0NCIB2j_By_NtBC_12MemberStringBA_B1m_NCIB1N_By_B60_B1m_TNCIB3a_By_cB60_B1m_B3I_NCIB2j_By_By_B60_B1m_NCINvB2l_9recognizeBy_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1m_NCINvB3c_4pairBy_cB7P_B1m_NCINvB2l_6verifyBy_ccB1m_INvB3N_7anycharBy_B1m_ENCNvBC_12member_first0E0NCIB0_By_cB1m_NCIB8W_By_ccB1m_B9i_NCNvBC_16member_character0E0E0E0E0NcNtB60_8Borrowed0E0E0NCIB4A_By_cB60_cB1m_B3I_NCIB1N_By_B60_B1m_TNCIB4A_By_cB60_cB1m_B3I_NCIB2j_By_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7U_6string6StringEB60_B1m_NCINvB2l_3optBy_Bdm_B1m_NCINvNtNtB4_5bytes8complete17escaped_transformBy_B1m_NCIB2j_By_IB7Q_NtBC_16MaybeEscapedCharENtBC_19MaybeEscapedCharVecB1m_NCINvB2_5many1By_Bfl_B1m_NCIB1N_By_Bfl_B1m_TNCIB2j_By_cBfl_B1m_NCIB8W_By_ccB1m_NCINvB3N_7none_ofBy_By_B1m_E0NCNvBC_9unescaped0E0NcNtBfl_4Char0E0NCIB2j_By_cBfl_B1m_B3I_NcNtBfl_7Escaped0E0EE0E0NcBfJ_0E0NCIB1N_By_By_B1m_TNCIB1N_By_By_B1m_TNCINvB2l_5valueBy_By_By_B1m_NCINvBek_3tagBy_By_B1m_E0E0Bk1_Bk1_Bk1_Bk1_Bk1_Bk1_EE0Bk1_EE0BfJ_By_cBdm_E0E0NvYB60_INtNtBcP_7convert4FromBcK_E4fromE0B3I_E0NCIB4A_By_cB60_cB1m_B3I_NCIB2j_By_BcK_B60_B1m_NCIBdU_By_Bdm_B1m_NCIBei_By_B1m_NCIB7u_By_B7P_B1m_NCIBgg_By_cB1m_NCIB1N_By_cB1m_TBhe_B3I_EE0E0E0Bjr_By_By_cBdm_E0E0BlI_E0B3I_E0EE0B3I_E0EE0NcNtBA_5Child0E0NCIB2j_By_NtNtBE_3num8JsonUIntBA_B1m_NCIB4A_By_cBpS_cB1m_B3I_NCINvB2l_7map_resBy_BpS_BpS_B1m_NtBlS_10InfallibleNCIBqK_By_By_BpS_B1m_NtNtBpU_5error17JsonIntParseErrorINvB3N_6digit1By_B1m_EINvMNtBcP_3stre5parseBpS_EE0NvYBpS_INtBlS_7TryIntoBpS_E8try_intoE0B3I_E0NcNtBA_15ArrayIndexChild0E0NCIB2j_By_cBA_B1m_NCIB3a_By_By_cB1m_Bkt_NCIB1N_By_cB1m_TB3I_B4x_EE0E0NCNvBC_28wildcard_descendant_selector0E0NCIB3a_By_By_BA_B1m_Bkt_NCIB1N_By_BA_B1m_TNCIB2j_By_B60_BA_B1m_NCIB1N_By_B60_B1m_TB76_Bbv_EE0NcNtBA_10Descendant0E0NCIB2j_By_BpS_BA_B1m_Bqj_NcNtBA_20ArrayIndexDescendant0E0EE0E0EE0EBE_:
   53|  60.0k|pub fn many0<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
   54|  60.0k|where
   55|  60.0k|  I: Clone + InputLength,
   56|  60.0k|  F: Parser<I, O, E>,
   57|  60.0k|  E: ParseError<I>,
   58|  60.0k|{
   59|       |  move |mut i: I| {
   60|       |    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|       |    loop {
   62|       |      let len = i.input_len();
   63|       |      match f.parse(i.clone()) {
   64|       |        Err(Err::Error(_)) => return Ok((i, acc)),
   65|       |        Err(e) => return Err(e),
   66|       |        Ok((i1, o)) => {
   67|       |          // infinite loop check: the parser must always consume
   68|       |          if i1.input_len() == len {
   69|       |            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|       |          }
   71|       |
   72|       |          i = i1;
   73|       |          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|       |  }
   78|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom5multi5many1RecINtNtB4_5error5ErrorBy_ENCINvNtB4_6branch3altBy_cBB_TNCINvNtB4_10combinator6verifyBy_ccBB_NCINvNtNtB4_9character8complete7none_ofBy_By_BB_E0NCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0E0NCINvB28_4charBy_BB_E0EE0EB2X_:
  108|   120k|pub fn many1<I, O, E, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Vec<O>, E>
  109|   120k|where
  110|   120k|  I: Clone + InputLength,
  111|   120k|  F: Parser<I, O, E>,
  112|   120k|  E: ParseError<I>,
  113|   120k|{
  114|       |  move |mut i: I| match f.parse(i.clone()) {
  115|       |    Err(Err::Error(err)) => Err(Err::Error(E::append(i, ErrorKind::Many1, err))),
  116|       |    Err(e) => Err(e),
  117|       |    Ok((i1, o)) => {
  118|       |      let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
  119|       |      acc.push(o);
  120|       |      i = i1;
  121|       |
  122|       |      loop {
  123|       |        let len = i.input_len();
  124|       |        match f.parse(i.clone()) {
  125|       |          Err(Err::Error(_)) => return Ok((i, acc)),
  126|       |          Err(e) => return Err(e),
  127|       |          Ok((i1, o)) => {
  128|       |            // infinite loop check: the parser must always consume
  129|       |            if i1.input_len() == len {
  130|       |              return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many1)));
  131|       |            }
  132|       |
  133|       |            i = i1;
  134|       |            acc.push(o);
  135|       |          }
  136|       |        }
  137|       |      }
  138|       |    }
  139|       |  }
  140|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom5multi5many0ReNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBA_ENCINvNtB6_6branch3altBA_BC_B1o_TNCINvNtB6_10combinator3mapBA_cBC_B1o_NCIB1P_BA_cB1o_TNCINvNtB6_8sequence8precededBA_ccB1o_NCINvNtNtB6_9character8complete4charBA_B1o_E0B3K_E0NCINvB3e_9delimitedBA_cccB1o_B3K_B3K_B3K_E0EE0NCNvBE_23wildcard_child_selector0E0NCIB2l_BA_NtBE_12MemberStringBC_B1o_NCIB1P_BA_B62_B1o_TNCIB3c_BA_cB62_B1o_B3K_NCIB2l_BA_BA_B62_B1o_NCINvB2n_9recognizeBA_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1o_NCINvB3e_4pairBA_cB7R_B1o_NCINvB2n_6verifyBA_ccB1o_INvB3P_7anycharBA_B1o_ENCNvBE_12member_first0E0NCIB2_BA_cB1o_NCIB8Y_BA_ccB1o_B9k_NCNvBE_16member_character0E0E0E0E0NcNtB62_8Borrowed0E0E0NCIB4C_BA_cB62_cB1o_B3K_NCIB1P_BA_B62_B1o_TNCIB4C_BA_cB62_cB1o_B3K_NCIB2l_BA_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB7W_6string6StringEB62_B1o_NCINvB2n_3optBA_Bdo_B1o_NCINvNtNtB6_5bytes8complete17escaped_transformBA_B1o_NCIB2l_BA_IB7S_NtBE_16MaybeEscapedCharENtBE_19MaybeEscapedCharVecB1o_NCINvB4_5many1BA_Bfn_B1o_NCIB1P_BA_Bfn_B1o_TNCIB2l_BA_cBfn_B1o_NCIB8Y_BA_ccB1o_NCINvB3P_7none_ofBA_BA_B1o_E0NCNvBE_9unescaped0E0NcNtBfn_4Char0E0NCIB2l_BA_cBfn_B1o_B3K_NcNtBfn_7Escaped0E0EE0E0NcBfL_0E0NCIB1P_BA_BA_B1o_TNCIB1P_BA_BA_B1o_TNCINvB2n_5valueBA_BA_BA_B1o_NCINvBem_3tagBA_BA_B1o_E0E0Bk3_Bk3_Bk3_Bk3_Bk3_Bk3_EE0Bk3_EE0BfL_BA_cBdo_E0E0NvYB62_INtNtBcR_7convert4FromBcM_E4fromE0B3K_E0NCIB4C_BA_cB62_cB1o_B3K_NCIB2l_BA_BcM_B62_B1o_NCIBdW_BA_Bdo_B1o_NCIBek_BA_B1o_NCIB7w_BA_B7R_B1o_NCIBgi_BA_cB1o_NCIB1P_BA_cB1o_TBhg_B3K_EE0E0E0Bjt_BA_BA_cBdo_E0E0BlK_E0B3K_E0EE0B3K_E0EE0NcNtBC_5Child0E0NCIB2l_BA_NtNtBG_3num8JsonUIntBC_B1o_NCIB4C_BA_cBpU_cB1o_B3K_NCINvB2n_7map_resBA_BpU_BpU_B1o_NtBlU_10InfallibleNCIBqM_BA_BA_BpU_B1o_NtNtBpW_5error17JsonIntParseErrorINvB3P_6digit1BA_B1o_EINvMNtBcR_3stre5parseBpU_EE0NvYBpU_INtBlU_7TryIntoBpU_E8try_intoE0B3K_E0NcNtBC_15ArrayIndexChild0E0NCIB2l_BA_cBC_B1o_NCIB3c_BA_BA_cB1o_Bkv_NCIB1P_BA_cB1o_TB3K_B4z_EE0E0NCNvBE_28wildcard_descendant_selector0E0NCIB3c_BA_BA_BC_B1o_Bkv_NCIB1P_BA_BC_B1o_TNCIB2l_BA_B62_BC_B1o_NCIB1P_BA_B62_B1o_TB78_Bbx_EE0NcNtBC_10Descendant0E0NCIB2l_BA_BpU_BC_B1o_Bql_NcNtBC_20ArrayIndexDescendant0E0EE0E0EE0E0BG_:
   59|  60.0k|  move |mut i: I| {
   60|  60.0k|    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|  98.5k|    loop {
   62|  98.5k|      let len = i.input_len();
   63|  98.5k|      match f.parse(i.clone()) {
   64|  60.0k|        Err(Err::Error(_)) => return Ok((i, acc)),
   65|      0|        Err(e) => return Err(e),
   66|  38.5k|        Ok((i1, o)) => {
   67|  38.5k|          // infinite loop check: the parser must always consume
   68|  38.5k|          if i1.input_len() == len {
   69|      0|            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|  38.5k|          }
   71|  38.5k|
   72|  38.5k|          i = i1;
   73|  38.5k|          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|  60.0k|  }
_RNCINvNtCsijflsOnQTe0_3nom5multi5many0RecINtNtB6_5error5ErrorBA_ENCINvNtB6_10combinator6verifyBA_ccBD_INvNtNtB6_9character8complete7anycharBA_BD_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0E0E0B2q_:
   59|  28.1k|  move |mut i: I| {
   60|  28.1k|    let mut acc = crate::lib::std::vec::Vec::with_capacity(4);
   61|  34.9k|    loop {
   62|  34.9k|      let len = i.input_len();
   63|  34.9k|      match f.parse(i.clone()) {
   64|  28.1k|        Err(Err::Error(_)) => return Ok((i, acc)),
   65|      0|        Err(e) => return Err(e),
   66|  6.78k|        Ok((i1, o)) => {
   67|  6.78k|          // infinite loop check: the parser must always consume
   68|  6.78k|          if i1.input_len() == len {
   69|      0|            return Err(Err::Error(E::from_error_kind(i, ErrorKind::Many0)));
   70|  6.78k|          }
   71|  6.78k|
   72|  6.78k|          i = i1;
   73|  6.78k|          acc.push(o);
   74|       |        }
   75|       |      }
   76|       |    }
   77|  28.1k|  }

_RNCNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB8_5error5ErrorBJ_ENCINvNtNtB8_9character8complete4charBJ_B1H_E0NCINvNtB8_10combinator3mapBJ_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBM_B1H_NCINvB2T_3optBJ_B3T_B1H_NCINvNtNtB8_5bytes8complete17escaped_transformBJ_B1H_NCIB2R_BJ_INtNtB3X_3vec3VecNtBO_16MaybeEscapedCharENtBO_19MaybeEscapedCharVecB1H_NCINvNtB8_5multi5many1BJ_B6j_B1H_NCINvNtB8_6branch3altBJ_B6j_B1H_TNCIB2R_BJ_cB6j_B1H_NCINvB2T_6verifyBJ_ccB1H_NCINvB2a_7none_ofBJ_BJ_B1H_E0NCNvBO_9unescaped0E0NcNtB6j_4Char0E0NCIB2R_BJ_cB6j_B1H_B25_NcNtB6j_7Escaped0E0EE0E0NcB6H_0E0NCIB7L_BJ_BJ_B1H_TNCIB7L_BJ_BJ_B1H_TNCINvB2T_5valueBJ_BJ_BJ_B1H_NCINvB56_3tagBJ_BJ_B1H_E0E0Bbu_Bbu_Bbu_Bbu_Bbu_Bbu_EE0Bbu_EE0B6H_BJ_cB3T_E0E0NvYBM_INtNtB3m_7convert4FromB3h_E4fromE0B25_E00BQ_:
  185|  2.09k|    third.parse(input).map(|(i, _)| (i, o2))
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB8_5error5ErrorBJ_ENCINvNtNtB8_9character8complete4charBJ_B1H_E0NCINvNtB8_6branch3altBJ_BM_B1H_TNCIB4_BJ_cBM_cB1H_B25_NCINvNtB8_10combinator3mapBJ_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBM_B1H_NCINvB3L_3optBJ_B4L_B1H_NCINvNtNtB8_5bytes8complete17escaped_transformBJ_B1H_NCIB3J_BJ_INtNtB4P_3vec3VecNtBO_16MaybeEscapedCharENtBO_19MaybeEscapedCharVecB1H_NCINvNtB8_5multi5many1BJ_B7b_B1H_NCIB2R_BJ_B7b_B1H_TNCIB3J_BJ_cB7b_B1H_NCINvB3L_6verifyBJ_ccB1H_NCINvB2a_7none_ofBJ_BJ_B1H_E0NCNvBO_9unescaped0E0NcNtB7b_4Char0E0NCIB3J_BJ_cB7b_B1H_B25_NcNtB7b_7Escaped0E0EE0E0NcB7z_0E0NCIB2R_BJ_BJ_B1H_TNCIB2R_BJ_BJ_B1H_TNCINvB3L_5valueBJ_BJ_BJ_B1H_NCINvB5Y_3tagBJ_BJ_B1H_E0E0Bc8_Bc8_Bc8_Bc8_Bc8_Bc8_EE0Bc8_EE0B7z_BJ_cB4L_E0E0NvYBM_INtNtB4e_7convert4FromB49_E4fromE0B25_E0NCIB4_BJ_cBM_cB1H_B25_NCIB3J_BJ_B49_BM_B1H_NCIB5y_BJ_B4L_B1H_NCIB5W_BJ_B1H_NCINvB3L_9recognizeBJ_IB6V_cEB1H_NCIB86_BJ_cB1H_NCIB2R_BJ_cB1H_TB9c_B25_EE0E0E0Bby_BJ_BJ_cB4L_E0E0BdP_E0B25_E0EE0B25_E00BQ_:
  185|  1.07k|    third.parse(input).map(|(i, _)| (i, o2))
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecccINtNtB8_5error5ErrorBJ_ENCINvNtNtB8_9character8complete4charBJ_BO_E0B1c_B1c_E00CsaVj0Slin5kQ_15rsonpath_syntax:
  185|    453|    third.parse(input).map(|(i, _)| (i, o2))
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_6branch3altBF_BI_B1D_TNCIB0_BF_cBI_cB1D_B21_NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1D_NCINvB3H_3optBF_B4H_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCIB3F_BF_INtNtB4L_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1D_NCINvNtB4_5multi5many1BF_B77_B1D_NCIB2N_BF_B77_B1D_TNCIB3F_BF_cB77_B1D_NCINvB3H_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0NcNtB77_4Char0E0NCIB3F_BF_cB77_B1D_B21_NcNtB77_7Escaped0E0EE0E0NcB7v_0E0NCIB2N_BF_BF_B1D_TNCIB2N_BF_BF_B1D_TNCINvB3H_5valueBF_BF_BF_B1D_NCINvB5U_3tagBF_BF_B1D_E0E0Bc4_Bc4_Bc4_Bc4_Bc4_Bc4_EE0Bc4_EE0B7v_BF_cB4H_E0E0NvYBI_INtNtB4a_7convert4FromB45_E4fromE0B21_E0NCIB0_BF_cBI_cB1D_B21_NCIB3F_BF_B45_BI_B1D_NCIB5u_BF_B4H_B1D_NCIB5S_BF_B1D_NCINvB3H_9recognizeBF_IB6R_cEB1D_NCIB82_BF_cB1D_NCIB2N_BF_cB1D_TB98_B21_EE0E0E0Bbu_BF_BF_cB4H_E0E0BdL_E0B21_E0EE0B21_EBM_:
  172|   120k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|   120k|  mut first: F,
  174|   120k|  mut second: G,
  175|   120k|  mut third: H,
  176|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|   120k|where
  178|   120k|  F: Parser<I, O1, E>,
  179|   120k|  G: Parser<I, O2, E>,
  180|   120k|  H: Parser<I, O3, E>,
  181|   120k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|   120k|}
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntcINtNtB8_5error5ErrorBJ_ENCINvNtNtB8_9character8complete4charBJ_B1z_E0NCINvNtB8_10combinator7map_resBJ_BM_BM_B1z_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB2J_BJ_BJ_BM_B1z_NtNtBO_5error17JsonIntParseErrorINvB22_6digit1BJ_B1z_EINvMNtB3r_3stre5parseBM_EE0NvYBM_INtB3p_7TryIntoBM_E8try_intoE0B1X_E00BQ_:
  185|    553|    third.parse(input).map(|(i, _)| (i, o2))
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1F_E0NCINvNtB6_10combinator3mapBH_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBK_B1F_NCINvB2R_3optBH_B3R_B1F_NCINvNtNtB6_5bytes8complete17escaped_transformBH_B1F_NCINvB2R_9recognizeBH_INtNtB3V_3vec3VeccEB1F_NCINvNtB6_5multi5many1BH_cB1F_NCINvNtB6_6branch3altBH_cB1F_TNCINvB2R_6verifyBH_ccB1F_NCINvB28_7none_ofBH_BH_B1F_E0NCNvBM_9unescaped0E0B23_EE0E0E0NCIB76_BH_BH_B1F_TNCIB76_BH_BH_B1F_TNCINvB2R_5valueBH_BH_BH_B1F_NCINvB54_3tagBH_BH_B1F_E0E0B9u_B9u_B9u_B9u_B9u_B9u_EE0B9u_EE0BH_BH_cB3R_E0E0NvYBK_INtNtB3k_7convert4FromB3f_E4fromE0B23_E0BO_:
  182|  12.1k|  move |input: I| {
  183|  12.1k|    let (input, _) = first.parse(input)?;
  184|  2.84k|    let (input, o2) = second.parse(input)?;
  185|  2.84k|    third.parse(input).map(|(i, _)| (i, o2))
  186|  12.1k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1F_E0NCINvNtB6_6branch3altBH_BK_B1F_TNCIB2_BH_cBK_cB1F_B23_NCINvNtB6_10combinator3mapBH_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBK_B1F_NCINvB3J_3optBH_B4J_B1F_NCINvNtNtB6_5bytes8complete17escaped_transformBH_B1F_NCIB3H_BH_INtNtB4N_3vec3VecNtBM_16MaybeEscapedCharENtBM_19MaybeEscapedCharVecB1F_NCINvNtB6_5multi5many1BH_B79_B1F_NCIB2P_BH_B79_B1F_TNCIB3H_BH_cB79_B1F_NCINvB3J_6verifyBH_ccB1F_NCINvB28_7none_ofBH_BH_B1F_E0NCNvBM_9unescaped0E0NcNtB79_4Char0E0NCIB3H_BH_cB79_B1F_B23_NcNtB79_7Escaped0E0EE0E0NcB7x_0E0NCIB2P_BH_BH_B1F_TNCIB2P_BH_BH_B1F_TNCINvB3J_5valueBH_BH_BH_B1F_NCINvB5W_3tagBH_BH_B1F_E0E0Bc6_Bc6_Bc6_Bc6_Bc6_Bc6_EE0Bc6_EE0B7x_BH_cB4J_E0E0NvYBK_INtNtB4c_7convert4FromB47_E4fromE0B23_E0NCIB2_BH_cBK_cB1F_B23_NCIB3H_BH_B47_BK_B1F_NCIB5w_BH_B4J_B1F_NCIB5U_BH_B1F_NCINvB3J_9recognizeBH_IB6T_cEB1F_NCIB84_BH_cB1F_NCIB2P_BH_cB1F_TB9a_B23_EE0E0E0Bbw_BH_BH_cB4J_E0E0BdN_E0B23_E0EE0B23_E0BO_:
  182|  71.9k|  move |input: I| {
  183|  71.9k|    let (input, _) = first.parse(input)?;
  184|  14.2k|    let (input, o2) = second.parse(input)?;
  185|  3.54k|    third.parse(input).map(|(i, _)| (i, o2))
  186|  71.9k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1F_E0NCINvNtB6_10combinator3mapBH_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBK_B1F_NCINvB2R_3optBH_B3R_B1F_NCINvNtNtB6_5bytes8complete17escaped_transformBH_B1F_NCIB2P_BH_INtNtB3V_3vec3VecNtBM_16MaybeEscapedCharENtBM_19MaybeEscapedCharVecB1F_NCINvNtB6_5multi5many1BH_B6h_B1F_NCINvNtB6_6branch3altBH_B6h_B1F_TNCIB2P_BH_cB6h_B1F_NCINvB2R_6verifyBH_ccB1F_NCINvB28_7none_ofBH_BH_B1F_E0NCNvBM_9unescaped0E0NcNtB6h_4Char0E0NCIB2P_BH_cB6h_B1F_B23_NcNtB6h_7Escaped0E0EE0E0NcB6F_0E0NCIB7J_BH_BH_B1F_TNCIB7J_BH_BH_B1F_TNCINvB2R_5valueBH_BH_BH_B1F_NCINvB54_3tagBH_BH_B1F_E0E0Bbs_Bbs_Bbs_Bbs_Bbs_Bbs_EE0Bbs_EE0B6F_BH_cB3R_E0E0NvYBK_INtNtB3k_7convert4FromB3f_E4fromE0B23_E0BO_:
  182|  14.2k|  move |input: I| {
  183|  14.2k|    let (input, _) = first.parse(input)?;
  184|  3.93k|    let (input, o2) = second.parse(input)?;
  185|  3.93k|    third.parse(input).map(|(i, _)| (i, o2))
  186|  14.2k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_cINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_BM_E0NCINvNtB6_6branch3altBG_cBM_TNCINvNtNtB6_9character8complete4charBG_BM_E0NCINvB4_9delimitedBG_cccBM_B2j_B2j_B2j_E0EE0E0CsaVj0Slin5kQ_15rsonpath_syntax:
   71|  65.5k|  move |input: I| {
   72|  65.5k|    let (input, _) = first.parse(input)?;
   73|  10.2k|    second.parse(input)
   74|  65.5k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator6verifyBC_ccB1e_INvNtNtB6_9character8complete7anycharBC_B1e_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB6_5multi5many0BC_cB1e_NCIB1F_BC_ccB1e_B2e_NCNvB31_16member_character0E0E0E0B33_:
   37|  47.5k|  move |input: I| {
   38|  47.5k|    let (input, o1) = first.parse(input)?;
   39|  28.1k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|  47.5k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReccINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_BI_E0B16_ECsaVj0Slin5kQ_15rsonpath_syntax:
   63|  60.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  60.0k|  mut first: F,
   65|  60.0k|  mut second: G,
   66|  60.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  60.0k|where
   68|  60.0k|  F: Parser<I, O1, E>,
   69|  60.0k|  G: Parser<I, O2, E>,
   70|  60.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  60.0k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1g_EINtNtB6_5error5ErrorBC_ENCINvNtB6_10combinator3optBC_B1g_B2F_NCINvB38_3mapBC_cB1g_B2F_NCINvNtNtB6_9character8complete4charBC_B2F_E0NCNvB1i_8jsonpath0E0E0NCINvNtB6_5multi5many0BC_B1g_B2F_NCINvNtB6_6branch3altBC_B1g_B2F_TNCIB3H_BC_cB1g_B2F_NCIB5I_BC_cB2F_TNCINvB4_8precededBC_ccB2F_B43_B43_E0NCINvB4_9delimitedBC_cccB2F_B43_B43_B43_E0EE0NCNvB1i_23wildcard_child_selector0E0NCIB3H_BC_NtB1i_12MemberStringB1g_B2F_NCIB5I_BC_B8O_B2F_TNCIB6O_BC_cB8O_B2F_B43_NCIB3H_BC_BC_B8O_B2F_NCINvB38_9recognizeBC_TcIB24_cEEB2F_NCIB2_BC_cBaF_B2F_NCINvB38_6verifyBC_ccB2F_INvB48_7anycharBC_B2F_ENCNvB1i_12member_first0E0NCIB5b_BC_cB2F_NCIBbc_BC_ccB2F_Bby_NCNvB1i_16member_character0E0E0E0E0NcNtB8O_8Borrowed0E0E0NCIB7o_BC_cB8O_cB2F_B43_NCIB5I_BC_B8O_B2F_TNCIB7o_BC_cB8O_cB2F_B43_NCIB3H_BC_IBF_NtNtB28_6string6StringEB8O_B2F_NCIB36_BC_Bf7_B2F_NCINvNtNtB6_5bytes8complete17escaped_transformBC_B2F_NCIB3H_BC_IB24_NtB1i_16MaybeEscapedCharENtB1i_19MaybeEscapedCharVecB2F_NCINvB5d_5many1BC_Bh0_B2F_NCIB5I_BC_Bh0_B2F_TNCIB3H_BC_cBh0_B2F_NCIBbc_BC_ccB2F_NCINvB48_7none_ofBC_BC_B2F_E0NCNvB1i_9unescaped0E0NcNtBh0_4Char0E0NCIB3H_BC_cBh0_B2F_B43_NcNtBh0_7Escaped0E0EE0E0NcBhp_0E0NCIB5I_BC_BC_B2F_TNCIB5I_BC_BC_B2F_TNCINvB38_5valueBC_BC_BC_B2F_NCINvBfZ_3tagBC_BC_B2F_E0E0BlK_BlK_BlK_BlK_BlK_BlK_EE0BlK_EE0Bhp_BC_cBf7_E0E0NvYB8O_INtNtBJ_7convert4FromBf3_E4fromE0B43_E0NCIB7o_BC_cB8O_cB2F_B43_NCIB3H_BC_Bf3_B8O_B2F_NCIB36_BC_Bf7_B2F_NCIBfX_BC_B2F_NCIBak_BC_BaF_B2F_NCIBhX_BC_cB2F_NCIB5I_BC_cB2F_TBiW_B43_EE0E0E0Bla_BC_BC_cBf7_E0E0Bnr_E0B43_E0EE0B43_E0EE0NcNtB1g_5Child0E0NCIB3H_BC_NtNtB1k_3num8JsonUIntB1g_B2F_NCIB7o_BC_cBrB_cB2F_B43_NCINvB38_7map_resBC_BrB_BrB_B2F_NtBnB_10InfallibleNCIBsv_BC_BC_BrB_B2F_NtNtBrD_5error17JsonIntParseErrorINvB48_6digit1BC_B2F_EINvMNtBJ_3stre5parseBrB_EE0NvYBrB_INtBnB_7TryIntoBrB_E8try_intoE0B43_E0NcNtB1g_15ArrayIndexChild0E0NCIB3H_BC_cB1g_B2F_NCIB6O_BC_BC_cB2F_Bmc_NCIB5I_BC_cB2F_TB43_B7l_EE0E0NCNvB1i_28wildcard_descendant_selector0E0NCIB6O_BC_BC_B1g_B2F_Bmc_NCIB5I_BC_B1g_B2F_TNCIB3H_BC_B8O_B1g_B2F_NCIB5I_BC_B8O_B2F_TB9W_BdO_EE0NcNtB1g_10Descendant0E0NCIB3H_BC_BrB_B1g_B2F_Bs4_NcNtB1g_20ArrayIndexDescendant0E0EE0E0EE0E0E0B1k_:
   37|  1.07k|  move |input: I| {
   38|  1.07k|    let (input, o1) = first.parse(input)?;
   39|  1.07k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|  1.07k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator6verifyBA_ccB1c_INvNtNtB4_9character8complete7anycharBA_B1c_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB4_5multi5many0BA_cB1c_NCIB1D_BA_ccB1c_B2c_NCNvB2Z_16member_character0E0E0EB31_:
   29|   120k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|   120k|  mut first: F,
   31|   120k|  mut second: G,
   32|   120k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|   120k|where
   34|   120k|  F: Parser<I, O1, E>,
   35|   120k|  G: Parser<I, O2, E>,
   36|   120k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|   120k|}
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1i_EINtNtB8_5error5ErrorBE_ENCINvNtB8_10combinator3optBE_B1i_B2H_NCINvB3a_3mapBE_cB1i_B2H_NCINvNtNtB8_9character8complete4charBE_B2H_E0NCNvB1k_8jsonpath0E0E0NCINvNtB8_5multi5many0BE_B1i_B2H_NCINvNtB8_6branch3altBE_B1i_B2H_TNCIB3J_BE_cB1i_B2H_NCIB5K_BE_cB2H_TNCINvB6_8precededBE_ccB2H_B45_B45_E0NCINvB6_9delimitedBE_cccB2H_B45_B45_B45_E0EE0NCNvB1k_23wildcard_child_selector0E0NCIB3J_BE_NtB1k_12MemberStringB1i_B2H_NCIB5K_BE_B8Q_B2H_TNCIB6Q_BE_cB8Q_B2H_B45_NCIB3J_BE_BE_B8Q_B2H_NCINvB3a_9recognizeBE_TcIB26_cEEB2H_NCIB4_BE_cBaH_B2H_NCINvB3a_6verifyBE_ccB2H_INvB4a_7anycharBE_B2H_ENCNvB1k_12member_first0E0NCIB5d_BE_cB2H_NCIBbe_BE_ccB2H_BbA_NCNvB1k_16member_character0E0E0E0E0NcNtB8Q_8Borrowed0E0E0NCIB7q_BE_cB8Q_cB2H_B45_NCIB5K_BE_B8Q_B2H_TNCIB7q_BE_cB8Q_cB2H_B45_NCIB3J_BE_IBH_NtNtB2a_6string6StringEB8Q_B2H_NCIB38_BE_Bf9_B2H_NCINvNtNtB8_5bytes8complete17escaped_transformBE_B2H_NCIB3J_BE_IB26_NtB1k_16MaybeEscapedCharENtB1k_19MaybeEscapedCharVecB2H_NCINvB5f_5many1BE_Bh2_B2H_NCIB5K_BE_Bh2_B2H_TNCIB3J_BE_cBh2_B2H_NCIBbe_BE_ccB2H_NCINvB4a_7none_ofBE_BE_B2H_E0NCNvB1k_9unescaped0E0NcNtBh2_4Char0E0NCIB3J_BE_cBh2_B2H_B45_NcNtBh2_7Escaped0E0EE0E0NcBhr_0E0NCIB5K_BE_BE_B2H_TNCIB5K_BE_BE_B2H_TNCINvB3a_5valueBE_BE_BE_B2H_NCINvBg1_3tagBE_BE_B2H_E0E0BlM_BlM_BlM_BlM_BlM_BlM_EE0BlM_EE0Bhr_BE_cBf9_E0E0NvYB8Q_INtNtBL_7convert4FromBf5_E4fromE0B45_E0NCIB7q_BE_cB8Q_cB2H_B45_NCIB3J_BE_Bf5_B8Q_B2H_NCIB38_BE_Bf9_B2H_NCIBfZ_BE_B2H_NCIBam_BE_BaH_B2H_NCIBhZ_BE_cB2H_NCIB5K_BE_cB2H_TBiY_B45_EE0E0E0Blc_BE_BE_cBf9_E0E0Bnt_E0B45_E0EE0B45_E0EE0NcNtB1i_5Child0E0NCIB3J_BE_NtNtB1m_3num8JsonUIntB1i_B2H_NCIB7q_BE_cBrD_cB2H_B45_NCINvB3a_7map_resBE_BrD_BrD_B2H_NtBnD_10InfallibleNCIBsx_BE_BE_BrD_B2H_NtNtBrF_5error17JsonIntParseErrorINvB4a_6digit1BE_B2H_EINvMNtBL_3stre5parseBrD_EE0NvYBrD_INtBnD_7TryIntoBrD_E8try_intoE0B45_E0NcNtB1i_15ArrayIndexChild0E0NCIB3J_BE_cB1i_B2H_NCIB6Q_BE_BE_cB2H_Bme_NCIB5K_BE_cB2H_TB45_B7n_EE0E0NCNvB1k_28wildcard_descendant_selector0E0NCIB6Q_BE_BE_B1i_B2H_Bme_NCIB5K_BE_B1i_B2H_TNCIB3J_BE_B8Q_B1i_B2H_NCIB5K_BE_B8Q_B2H_TB9Y_BdQ_EE0NcNtB1i_10Descendant0E0NCIB3J_BE_BrD_B1i_B2H_Bs6_NcNtB1i_20ArrayIndexDescendant0E0EE0E0EE0E0E00B1m_:
   39|  1.07k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_B1D_E0NCINvNtB6_10combinator3mapBG_BG_BJ_B1D_NCINvB2P_9recognizeBG_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1D_NCINvB4_4pairBG_cB3L_B1D_NCINvB2P_6verifyBG_ccB1D_INvB26_7anycharBG_B1D_ENCNvBL_12member_first0E0NCINvNtB6_5multi5many0BG_cB1D_NCIB4R_BG_ccB1D_B5d_NCNvBL_16member_character0E0E0E0E0NcNtBJ_8Borrowed0E0E0BN_:
   71|  90.7k|  move |input: I| {
   72|  90.7k|    let (input, _) = first.parse(input)?;
   73|  38.2k|    second.parse(input)
   74|  90.7k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecccINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_BM_E0B1a_B1a_E0CsaVj0Slin5kQ_15rsonpath_syntax:
  182|   100k|  move |input: I| {
  183|   100k|    let (input, _) = first.parse(input)?;
  184|  14.6k|    let (input, o2) = second.parse(input)?;
  185|  1.14k|    third.parse(input).map(|(i, _)| (i, o2))
  186|   100k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1D_NCINvB2P_3optBF_B3P_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCINvB2P_9recognizeBF_INtNtB3T_3vec3VeccEB1D_NCINvNtB4_5multi5many1BF_cB1D_NCINvNtB4_6branch3altBF_cB1D_TNCINvB2P_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0B21_EE0E0E0NCIB74_BF_BF_B1D_TNCIB74_BF_BF_B1D_TNCINvB2P_5valueBF_BF_BF_B1D_NCINvB52_3tagBF_BF_B1D_E0E0B9s_B9s_B9s_B9s_B9s_B9s_EE0B9s_EE0BF_BF_cB3P_E0E0NvYBI_INtNtB3i_7convert4FromB3d_E4fromE0B21_EBM_:
  172|   120k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|   120k|  mut first: F,
  174|   120k|  mut second: G,
  175|   120k|  mut third: H,
  176|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|   120k|where
  178|   120k|  F: Parser<I, O1, E>,
  179|   120k|  G: Parser<I, O2, E>,
  180|   120k|  H: Parser<I, O3, E>,
  181|   120k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB6_5error5ErrorBG_ENCINvNtNtB6_5bytes8complete3tagBG_BG_B1x_E0NCINvNtB6_6branch3altBG_BL_B1x_TNCINvNtB6_10combinator3mapBG_NtBN_12MemberStringBL_B1x_NCIB2F_BG_B3B_B1x_TNCIB3b_BG_BG_B3B_B1x_NCINvB3d_9recognizeBG_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1x_NCINvB4_4pairBG_cB53_B1x_NCINvB3d_6verifyBG_ccB1x_INvNtNtB6_9character8complete7anycharBG_B1x_ENCNvBN_12member_first0E0NCINvNtB6_5multi5many0BG_cB1x_NCIB69_BG_ccB1x_B6v_NCNvBN_16member_character0E0E0E0E0NcNtB3B_8Borrowed0E0NCINvB4_9delimitedBG_cB3B_cB1x_NCINvB6y_4charBG_B1x_E0NCIB2F_BG_B3B_B1x_TNCIB9l_BG_cB3B_cB1x_B9N_NCIB3b_BG_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB58_6string6StringEB3B_B1x_NCINvB3d_3optBG_BbD_B1x_NCINvB20_17escaped_transformBG_B1x_NCIB3b_BG_IB54_NtBN_16MaybeEscapedCharENtBN_19MaybeEscapedCharVecB1x_NCINvB7H_5many1BG_Bdk_B1x_NCIB2F_BG_Bdk_B1x_TNCIB3b_BG_cBdk_B1x_NCIB69_BG_ccB1x_NCINvB6y_7none_ofBG_BG_B1x_E0NCNvBN_9unescaped0E0NcNtBdk_4Char0E0NCIB3b_BG_cBdk_B1x_B9N_NcNtBdk_7Escaped0E0EE0E0NcBdI_0E0NCIB2F_BG_BG_B1x_TNCIB2F_BG_BG_B1x_TNCINvB3d_5valueBG_BG_BG_B1x_B1V_E0Bi1_Bi1_Bi1_Bi1_Bi1_Bi1_EE0Bi1_EE0BdI_BG_cBbD_E0E0NvYB3B_INtNtBb6_7convert4FromBb1_E4fromE0B9N_E0NCIB9l_BG_cB3B_cB1x_B9N_NCIB3b_BG_Bb1_B3B_B1x_NCIBcb_BG_BbD_B1x_NCIBcz_BG_B1x_NCIB4I_BG_B53_B1x_NCIBef_BG_cB1x_NCIB2F_BG_cB1x_TBfe_B9N_EE0E0E0Bhr_BG_BG_cBbD_E0E0Bjn_E0B9N_E0EE0B9N_E0EE0NcNtBL_10Descendant0E0NCIB3b_BG_NtNtBP_3num8JsonUIntBL_B1x_NCIB9l_BG_cBnD_cB1x_B9N_NCINvB3d_7map_resBG_BnD_BnD_B1x_NtBjx_10InfallibleNCIBov_BG_BG_BnD_B1x_NtNtBnF_5error17JsonIntParseErrorINvB6y_6digit1BG_B1x_EINvMNtBb6_3stre5parseBnD_EE0NvYBnD_INtBjx_7TryIntoBnD_E8try_intoE0B9N_E0NcNtBL_20ArrayIndexDescendant0E0EE0E0BP_:
   71|  64.5k|  move |input: I| {
   72|  64.5k|    let (input, _) = first.parse(input)?;
   73|  9.26k|    second.parse(input)
   74|  64.5k|  }
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence4pairRecINtNtCshJIxznpEM8j_5alloc3vec3VeccEINtNtB8_5error5ErrorBE_ENCINvNtB8_10combinator6verifyBE_ccB1g_INvNtNtB8_9character8complete7anycharBE_B1g_ENCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0E0NCINvNtB8_5multi5many0BE_cB1g_NCIB1H_BE_ccB1g_B2g_NCNvB33_16member_character0E0E0E00B35_:
   39|  28.1k|    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_cINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_BK_E0NCINvNtB4_6branch3altBE_cBK_TNCINvNtNtB4_9character8complete4charBE_BK_E0NCINvB2_9delimitedBE_cccBK_B2h_B2h_B2h_E0EE0ECsaVj0Slin5kQ_15rsonpath_syntax:
   63|  60.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  60.0k|  mut first: F,
   65|  60.0k|  mut second: G,
   66|  60.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  60.0k|where
   68|  60.0k|  F: Parser<I, O1, E>,
   69|  60.0k|  G: Parser<I, O2, E>,
   70|  60.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  60.0k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntcINtNtB6_5error5ErrorBH_ENCINvNtNtB6_9character8complete4charBH_B1x_E0NCINvNtB6_10combinator7map_resBH_BK_BK_B1x_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB2H_BH_BH_BK_B1x_NtNtBM_5error17JsonIntParseErrorINvB20_6digit1BH_B1x_EINvMNtB3p_3stre5parseBK_EE0NvYBK_INtB3n_7TryIntoBK_E8try_intoE0B1V_E0BO_:
  182|  70.8k|  move |input: I| {
  183|  70.8k|    let (input, _) = first.parse(input)?;
  184|  13.1k|    let (input, o2) = second.parse(input)?;
  185|  2.56k|    third.parse(input).map(|(i, _)| (i, o2))
  186|  70.8k|  }
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB8_5error5ErrorBJ_ENCINvNtNtB8_9character8complete4charBJ_B1H_E0NCINvNtB8_10combinator3mapBJ_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBM_B1H_NCINvB2T_3optBJ_B3T_B1H_NCINvNtNtB8_5bytes8complete17escaped_transformBJ_B1H_NCINvB2T_9recognizeBJ_INtNtB3X_3vec3VeccEB1H_NCINvNtB8_5multi5many1BJ_cB1H_NCINvNtB8_6branch3altBJ_cB1H_TNCINvB2T_6verifyBJ_ccB1H_NCINvB2a_7none_ofBJ_BJ_B1H_E0NCNvBO_9unescaped0E0B25_EE0E0E0NCIB78_BJ_BJ_B1H_TNCIB78_BJ_BJ_B1H_TNCINvB2T_5valueBJ_BJ_BJ_B1H_NCINvB56_3tagBJ_BJ_B1H_E0E0B9w_B9w_B9w_B9w_B9w_B9w_EE0B9w_EE0BJ_BJ_cB3T_E0E0NvYBM_INtNtB3m_7convert4FromB3h_E4fromE0B25_E00BQ_:
  185|  1.45k|    third.parse(input).map(|(i, _)| (i, o2))
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_NtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenINtNtB4_5error5ErrorBE_ENCINvNtNtB4_5bytes8complete3tagBE_BE_B1v_E0NCINvNtB4_6branch3altBE_BJ_B1v_TNCINvNtB4_10combinator3mapBE_NtBL_12MemberStringBJ_B1v_NCIB2D_BE_B3z_B1v_TNCIB39_BE_BE_B3z_B1v_NCINvB3b_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1v_NCINvB2_4pairBE_cB51_B1v_NCINvB3b_6verifyBE_ccB1v_INvNtNtB4_9character8complete7anycharBE_B1v_ENCNvBL_12member_first0E0NCINvNtB4_5multi5many0BE_cB1v_NCIB67_BE_ccB1v_B6t_NCNvBL_16member_character0E0E0E0E0NcNtB3z_8Borrowed0E0NCINvB2_9delimitedBE_cB3z_cB1v_NCINvB6w_4charBE_B1v_E0NCIB2D_BE_B3z_B1v_TNCIB9j_BE_cB3z_cB1v_B9L_NCIB39_BE_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtB56_6string6StringEB3z_B1v_NCINvB3b_3optBE_BbB_B1v_NCINvB1Y_17escaped_transformBE_B1v_NCIB39_BE_IB52_NtBL_16MaybeEscapedCharENtBL_19MaybeEscapedCharVecB1v_NCINvB7F_5many1BE_Bdi_B1v_NCIB2D_BE_Bdi_B1v_TNCIB39_BE_cBdi_B1v_NCIB67_BE_ccB1v_NCINvB6w_7none_ofBE_BE_B1v_E0NCNvBL_9unescaped0E0NcNtBdi_4Char0E0NCIB39_BE_cBdi_B1v_B9L_NcNtBdi_7Escaped0E0EE0E0NcBdG_0E0NCIB2D_BE_BE_B1v_TNCIB2D_BE_BE_B1v_TNCINvB3b_5valueBE_BE_BE_B1v_B1T_E0BhZ_BhZ_BhZ_BhZ_BhZ_BhZ_EE0BhZ_EE0BdG_BE_cBbB_E0E0NvYB3z_INtNtBb4_7convert4FromBaZ_E4fromE0B9L_E0NCIB9j_BE_cB3z_cB1v_B9L_NCIB39_BE_BaZ_B3z_B1v_NCIBc9_BE_BbB_B1v_NCIBcx_BE_B1v_NCIB4G_BE_B51_B1v_NCIBed_BE_cB1v_NCIB2D_BE_cB1v_TBfc_B9L_EE0E0E0Bhp_BE_BE_cBbB_E0E0Bjl_E0B9L_E0EE0B9L_E0EE0NcNtBJ_10Descendant0E0NCIB39_BE_NtNtBN_3num8JsonUIntBJ_B1v_NCIB9j_BE_cBnB_cB1v_B9L_NCINvB3b_7map_resBE_BnB_BnB_B1v_NtBjv_10InfallibleNCIBot_BE_BE_BnB_B1v_NtNtBnD_5error17JsonIntParseErrorINvB6w_6digit1BE_B1v_EINvMNtBb4_3stre5parseBnB_EE0NvYBnB_INtBjv_7TryIntoBnB_E8try_intoE0B9L_E0NcNtBJ_20ArrayIndexDescendant0E0EE0EBN_:
   63|  60.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  60.0k|  mut first: F,
   65|  60.0k|  mut second: G,
   66|  60.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  60.0k|where
   68|  60.0k|  F: Parser<I, O1, E>,
   69|  60.0k|  G: Parser<I, O2, E>,
   70|  60.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  60.0k|}
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1D_E0NCINvNtB4_10combinator3mapBF_INtNtCslATUeuPuGvJ_4core6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEBI_B1D_NCINvB2P_3optBF_B3P_B1D_NCINvNtNtB4_5bytes8complete17escaped_transformBF_B1D_NCIB2N_BF_INtNtB3T_3vec3VecNtBK_16MaybeEscapedCharENtBK_19MaybeEscapedCharVecB1D_NCINvNtB4_5multi5many1BF_B6f_B1D_NCINvNtB4_6branch3altBF_B6f_B1D_TNCIB2N_BF_cB6f_B1D_NCINvB2P_6verifyBF_ccB1D_NCINvB26_7none_ofBF_BF_B1D_E0NCNvBK_9unescaped0E0NcNtB6f_4Char0E0NCIB2N_BF_cB6f_B1D_B21_NcNtB6f_7Escaped0E0EE0E0NcB6D_0E0NCIB7H_BF_BF_B1D_TNCIB7H_BF_BF_B1D_TNCINvB2P_5valueBF_BF_BF_B1D_NCINvB52_3tagBF_BF_B1D_E0E0Bbq_Bbq_Bbq_Bbq_Bbq_Bbq_EE0Bbq_EE0B6D_BF_cB3P_E0E0NvYBI_INtNtB3i_7convert4FromB3d_E4fromE0B21_EBM_:
  172|   120k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|   120k|  mut first: F,
  174|   120k|  mut second: G,
  175|   120k|  mut third: H,
  176|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|   120k|where
  178|   120k|  F: Parser<I, O1, E>,
  179|   120k|  G: Parser<I, O2, E>,
  180|   120k|  H: Parser<I, O3, E>,
  181|   120k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|   120k|}
_RINvNtCsijflsOnQTe0_3nom8sequence4pairReINtNtCslATUeuPuGvJ_4core6option6OptionNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser5TokenEINtNtCshJIxznpEM8j_5alloc3vec3VecB1e_EINtNtB4_5error5ErrorBA_ENCINvNtB4_10combinator3optBA_B1e_B2D_NCINvB36_3mapBA_cB1e_B2D_NCINvNtNtB4_9character8complete4charBA_B2D_E0NCNvB1g_8jsonpath0E0E0NCINvNtB4_5multi5many0BA_B1e_B2D_NCINvNtB4_6branch3altBA_B1e_B2D_TNCIB3F_BA_cB1e_B2D_NCIB5G_BA_cB2D_TNCINvB2_8precededBA_ccB2D_B41_B41_E0NCINvB2_9delimitedBA_cccB2D_B41_B41_B41_E0EE0NCNvB1g_23wildcard_child_selector0E0NCIB3F_BA_NtB1g_12MemberStringB1e_B2D_NCIB5G_BA_B8M_B2D_TNCIB6M_BA_cB8M_B2D_B41_NCIB3F_BA_BA_B8M_B2D_NCINvB36_9recognizeBA_TcIB22_cEEB2D_NCIB0_BA_cBaD_B2D_NCINvB36_6verifyBA_ccB2D_INvB46_7anycharBA_B2D_ENCNvB1g_12member_first0E0NCIB59_BA_cB2D_NCIBba_BA_ccB2D_Bbw_NCNvB1g_16member_character0E0E0E0E0NcNtB8M_8Borrowed0E0E0NCIB7m_BA_cB8M_cB2D_B41_NCIB5G_BA_B8M_B2D_TNCIB7m_BA_cB8M_cB2D_B41_NCIB3F_BA_IBD_NtNtB26_6string6StringEB8M_B2D_NCIB34_BA_Bf5_B2D_NCINvNtNtB4_5bytes8complete17escaped_transformBA_B2D_NCIB3F_BA_IB22_NtB1g_16MaybeEscapedCharENtB1g_19MaybeEscapedCharVecB2D_NCINvB5b_5many1BA_BgY_B2D_NCIB5G_BA_BgY_B2D_TNCIB3F_BA_cBgY_B2D_NCIBba_BA_ccB2D_NCINvB46_7none_ofBA_BA_B2D_E0NCNvB1g_9unescaped0E0NcNtBgY_4Char0E0NCIB3F_BA_cBgY_B2D_B41_NcNtBgY_7Escaped0E0EE0E0NcBhn_0E0NCIB5G_BA_BA_B2D_TNCIB5G_BA_BA_B2D_TNCINvB36_5valueBA_BA_BA_B2D_NCINvBfX_3tagBA_BA_B2D_E0E0BlI_BlI_BlI_BlI_BlI_BlI_EE0BlI_EE0Bhn_BA_cBf5_E0E0NvYB8M_INtNtBH_7convert4FromBf1_E4fromE0B41_E0NCIB7m_BA_cB8M_cB2D_B41_NCIB3F_BA_Bf1_B8M_B2D_NCIB34_BA_Bf5_B2D_NCIBfV_BA_B2D_NCIBai_BA_BaD_B2D_NCIBhV_BA_cB2D_NCIB5G_BA_cB2D_TBiU_B41_EE0E0E0Bl8_BA_BA_cBf5_E0E0Bnp_E0B41_E0EE0B41_E0EE0NcNtB1e_5Child0E0NCIB3F_BA_NtNtB1i_3num8JsonUIntB1e_B2D_NCIB7m_BA_cBrz_cB2D_B41_NCINvB36_7map_resBA_Brz_Brz_B2D_NtBnz_10InfallibleNCIBst_BA_BA_Brz_B2D_NtNtBrB_5error17JsonIntParseErrorINvB46_6digit1BA_B2D_EINvMNtBH_3stre5parseBrz_EE0NvYBrz_INtBnz_7TryIntoBrz_E8try_intoE0B41_E0NcNtB1e_15ArrayIndexChild0E0NCIB3F_BA_cB1e_B2D_NCIB6M_BA_BA_cB2D_Bma_NCIB5G_BA_cB2D_TB41_B7j_EE0E0NCNvB1g_28wildcard_descendant_selector0E0NCIB6M_BA_BA_B1e_B2D_Bma_NCIB5G_BA_B1e_B2D_TNCIB3F_BA_B8M_B1e_B2D_NCIB5G_BA_B8M_B2D_TB9U_BdM_EE0NcNtB1e_10Descendant0E0NCIB3F_BA_Brz_B1e_B2D_Bs2_NcNtB1e_20ArrayIndexDescendant0E0EE0E0EE0E0EB1i_:
   29|  1.07k|pub fn pair<I, O1, O2, E: ParseError<I>, F, G>(
   30|  1.07k|  mut first: F,
   31|  1.07k|  mut second: G,
   32|  1.07k|) -> impl FnMut(I) -> IResult<I, (O1, O2), E>
   33|  1.07k|where
   34|  1.07k|  F: Parser<I, O1, E>,
   35|  1.07k|  G: Parser<I, O2, E>,
   36|  1.07k|{
   37|       |  move |input: I| {
   38|       |    let (input, o1) = first.parse(input)?;
   39|       |    second.parse(input).map(|(i, o2)| (i, (o1, o2)))
   40|       |  }
   41|  1.07k|}
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num8JsonUIntcINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_B1v_E0NCINvNtB4_10combinator7map_resBF_BI_BI_B1v_NtNtCslATUeuPuGvJ_4core7convert10InfallibleNCIB2F_BF_BF_BI_B1v_NtNtBK_5error17JsonIntParseErrorINvB1Y_6digit1BF_B1v_EINvMNtB3n_3stre5parseBI_EE0NvYBI_INtB3l_7TryIntoBI_E8try_intoE0B1T_EBM_:
  172|   120k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|   120k|  mut first: F,
  174|   120k|  mut second: G,
  175|   120k|  mut third: H,
  176|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|   120k|where
  178|   120k|  F: Parser<I, O1, E>,
  179|   120k|  G: Parser<I, O2, E>,
  180|   120k|  H: Parser<I, O3, E>,
  181|   120k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|   120k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReccINtNtB6_5error5ErrorBG_ENCINvNtNtB6_9character8complete4charBG_BK_E0B18_E0CsaVj0Slin5kQ_15rsonpath_syntax:
   71|  98.5k|  move |input: I| {
   72|  98.5k|    let (input, _) = first.parse(input)?;
   73|  45.8k|    second.parse(input)
   74|  98.5k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence9delimitedRecccINtNtB4_5error5ErrorBF_ENCINvNtNtB4_9character8complete4charBF_BK_E0B18_B18_ECsaVj0Slin5kQ_15rsonpath_syntax:
  172|   120k|pub fn delimited<I, O1, O2, O3, E: ParseError<I>, F, G, H>(
  173|   120k|  mut first: F,
  174|   120k|  mut second: G,
  175|   120k|  mut third: H,
  176|   120k|) -> impl FnMut(I) -> IResult<I, O2, E>
  177|   120k|where
  178|   120k|  F: Parser<I, O1, E>,
  179|   120k|  G: Parser<I, O2, E>,
  180|   120k|  H: Parser<I, O3, E>,
  181|   120k|{
  182|       |  move |input: I| {
  183|       |    let (input, _) = first.parse(input)?;
  184|       |    let (input, o2) = second.parse(input)?;
  185|       |    third.parse(input).map(|(i, _)| (i, o2))
  186|       |  }
  187|   120k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12MemberStringINtNtB4_5error5ErrorBE_ENCINvNtNtB4_9character8complete4charBE_B1B_E0NCINvNtB4_10combinator3mapBE_BE_BH_B1B_NCINvB2N_9recognizeBE_TcINtNtCshJIxznpEM8j_5alloc3vec3VeccEEB1B_NCINvB2_4pairBE_cB3J_B1B_NCINvB2N_6verifyBE_ccB1B_INvB24_7anycharBE_B1B_ENCNvBJ_12member_first0E0NCINvNtB4_5multi5many0BE_cB1B_NCIB4P_BE_ccB1B_B5b_NCNvBJ_16member_character0E0E0E0E0NcNtBH_8Borrowed0E0EBL_:
   63|  60.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  60.0k|  mut first: F,
   65|  60.0k|  mut second: G,
   66|  60.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  60.0k|where
   68|  60.0k|  F: Parser<I, O1, E>,
   69|  60.0k|  G: Parser<I, O2, E>,
   70|  60.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  60.0k|}

_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar7as_charCsaVj0Slin5kQ_15rsonpath_syntax:
  272|   149k|  fn as_char(self) -> char {
  273|   149k|    *self
  274|   149k|  }
_RINvXsj_NtCsijflsOnQTe0_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_INtNtB8_5error5ErrorBx_EE0B27_ECsaVj0Slin5kQ_15rsonpath_syntax:
  675|  13.1k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|  13.1k|    &self,
  677|  13.1k|    predicate: P,
  678|  13.1k|    e: ErrorKind,
  679|  13.1k|  ) -> IResult<Self, Self, E>
  680|  13.1k|  where
  681|  13.1k|    P: Fn(Self::Item) -> bool,
  682|  13.1k|  {
  683|  13.1k|    match self.find(predicate) {
  684|  10.1k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  2.96k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|     74|        if self.is_empty() {
  689|     52|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|     22|            Ok((
  694|     22|              self.get_unchecked(self.len()..),
  695|     22|              self.get_unchecked(..self.len()),
  696|     22|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|  13.1k|  }
_RNvXsn_NtCsijflsOnQTe0_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   180k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   180k|    self.as_bytes().compare(t.as_bytes())
  841|   180k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar3lenCsaVj0Slin5kQ_15rsonpath_syntax:
  265|  24.6k|  fn len(self) -> usize {
  266|  24.6k|    self.len_utf8()
  267|  24.6k|  }
_RNvXsF_NtCsijflsOnQTe0_3nom6traitsReNtB5_10ExtendInto11new_builderCsaVj0Slin5kQ_15rsonpath_syntax:
 1204|  6.78k|  fn new_builder(&self) -> String {
 1205|  6.78k|    String::new()
 1206|  6.78k|  }
_RNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   180k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   180k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   180k|
  742|   180k|    match pos {
  743|   151k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  29.0k|        if self.len() >= t.len() {
  746|  26.7k|          CompareResult::Ok
  747|       |        } else {
  748|  2.27k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   180k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar8is_alphaCsaVj0Slin5kQ_15rsonpath_syntax:
  245|  47.4k|  fn is_alpha(self) -> bool {
  246|  47.4k|    self.is_ascii_alphabetic()
  247|  47.4k|  }
_RNCNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB7_7CompareBy_E7compare0CsaVj0Slin5kQ_15rsonpath_syntax:
  740|   205k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar7as_charCsaVj0Slin5kQ_15rsonpath_syntax:
  241|   680k|  fn as_char(self) -> char {
  242|   680k|    self
  243|   680k|  }
_RNvXsg_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputTake10take_splitCsaVj0Slin5kQ_15rsonpath_syntax:
  424|  26.7k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  26.7k|    let (prefix, suffix) = self.split_at(count);
  426|  26.7k|    (suffix, prefix)
  427|  26.7k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar3lenCsaVj0Slin5kQ_15rsonpath_syntax:
  296|   149k|  fn len(self) -> usize {
  297|   149k|    self.len_utf8()
  298|   149k|  }
_RNvXsF_NtCsijflsOnQTe0_3nom6traitsReNtB5_10ExtendInto11extend_intoCsaVj0Slin5kQ_15rsonpath_syntax:
 1208|  10.6k|  fn extend_into(&self, acc: &mut String) {
 1209|  10.6k|    acc.push_str(self);
 1210|  10.6k|  }
_RNvXs5_NtCsijflsOnQTe0_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   180k|  fn as_bytes(&self) -> &[u8] {
   98|   180k|    (*self).as_bytes()
   99|   180k|  }
_RNvXs_NtCsijflsOnQTe0_3nom6traitsReNtB4_11InputLength9input_lenCsaVj0Slin5kQ_15rsonpath_syntax:
   33|   472k|  fn input_len(&self) -> usize {
   34|   472k|    self.len()
   35|   472k|  }
_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter13iter_elementsCsaVj0Slin5kQ_15rsonpath_syntax:
  386|   625k|  fn iter_elements(&self) -> Self::IterElem {
  387|   625k|    self.chars()
  388|   625k|  }
_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter12iter_indicesCsaVj0Slin5kQ_15rsonpath_syntax:
  382|  82.4k|  fn iter_indices(&self) -> Self::Iter {
  383|  82.4k|    self.char_indices()
  384|  82.4k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar12is_dec_digitCsaVj0Slin5kQ_15rsonpath_syntax:
  253|  24.7k|  fn is_dec_digit(self) -> bool {
  254|  24.7k|    self.is_ascii_digit()
  255|  24.7k|  }
_RNvXs23_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  31.4k|    fn slice(&self, range: $ty) -> Self {
 1014|  31.4k|      &self[range]
 1015|  31.4k|    }
_RNvXs4_NtCsijflsOnQTe0_3nom6traitsReNtB5_6Offset6offset:
   81|  45.2k|  fn offset(&self, second: &Self) -> usize {
   82|  45.2k|    let fst = self.as_ptr();
   83|  45.2k|    let snd = second.as_ptr();
   84|  45.2k|
   85|  45.2k|    snd as usize - fst as usize
   86|  45.2k|  }
_RNCNvXsu_NtCsijflsOnQTe0_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|   120k|    self.chars().any(|i| i == token)
_RNvXsu_NtCsijflsOnQTe0_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|  44.3k|  fn find_token(&self, token: char) -> bool {
  913|  44.3k|    self.chars().any(|i| i == token)
  914|  44.3k|  }
_RNvXs24_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   286k|    fn slice(&self, range: $ty) -> Self {
 1014|   286k|      &self[range]
 1015|   286k|    }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
   49|  1.07k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.07k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.07k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.07k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.07k|        // `SeqCst` operations on the slow path.
   54|  1.07k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.07k|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs5tukGsfU3Ik_26query_fuzz_arbitrary_bytes:
  965|  1.07k|        pub fn get(&self) -> Option<&T> {
  966|  1.07k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  1.07k|                None
  971|       |            }
  972|  1.07k|        }

_RNvMs1_NtCsaVj0Slin5kQ_15rsonpath_syntax5errorNtB5_16ParseErrorReport3newB7_:
  112|    836|    pub(crate) fn new() -> Self {
  113|    836|        Self { errors: vec![] }
  114|    836|    }
_RNvMs1_NtCsaVj0Slin5kQ_15rsonpath_syntax5errorNtB5_16ParseErrorReport7add_new:
  130|  8.41k|    fn add_new(&mut self, idx: usize) {
  131|  8.41k|        self.errors.push(ParseError { start_idx: idx, len: 1 })
  132|  8.41k|    }
_RNvMs0_NtCsaVj0Slin5kQ_15rsonpath_syntax5errorNtB5_10ParseError7end_idx:
  106|  58.1k|    fn end_idx(&self) -> usize {
  107|  58.1k|        self.start_idx + self.len - 1
  108|  58.1k|    }
_RNvMs1_NtCsaVj0Slin5kQ_15rsonpath_syntax5errorNtB5_16ParseErrorReport9record_at:
  116|  59.0k|    pub(crate) fn record_at(&mut self, idx: usize) {
  117|  59.0k|        match self.errors.last_mut() {
  118|  58.1k|            Some(last_error) if last_error.end_idx() + 1 == idx => last_error.len += 1,
  119|  8.41k|            _ => self.add_new(idx),
  120|       |        }
  121|  59.0k|    }

_RNvMs0_CsaVj0Slin5kQ_15rsonpath_syntaxNtB5_13JsonPathQuery5parse:
  217|  1.07k|    pub fn parse(query_string: &str) -> Result<Self, ParserError> {
  218|  1.07k|        self::parser::parse_json_path_query(query_string)
  219|  1.07k|    }
_RNvMs0_CsaVj0Slin5kQ_15rsonpath_syntaxNtB5_13JsonPathQuery3newB5_:
  227|    242|    pub fn new(node: Box<JsonPathQueryNode>) -> Self {
  228|    242|        let root = if node.is_root() {
  229|    242|            node
  230|       |        } else {
  231|      0|            Box::new(Root(Some(node)))
  232|       |        };
  233|       |
  234|    242|        Self { root }
  235|    242|    }
_RNvXs3_CsaVj0Slin5kQ_15rsonpath_syntaxNtB5_17JsonPathQueryNodeNtB5_21JsonPathQueryNodeType7is_root:
  295|    482|    fn is_root(&self) -> bool {
  296|    482|        matches!(self, Root(_))
  297|    482|    }

_RNvMs_NtCsaVj0Slin5kQ_15rsonpath_syntax3numNtB4_8JsonUInt3newB6_:
  188|  2.56k|    const fn new(index: u64) -> Self {
  189|  2.56k|        Self(index)
  190|  2.56k|    }
_RNCNvXsd_NtCsaVj0Slin5kQ_15rsonpath_syntax3numNtB7_8JsonUIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_str0B9_:
  378|    194|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvXsd_NtCsaVj0Slin5kQ_15rsonpath_syntax3numNtB5_8JsonUIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  375|  2.98k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  376|  2.98k|        match i64::from_str(s) {
  377|       |            // u64 would work but i64 gives us a better error message for negative values.
  378|  2.75k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  379|    226|            Err(err) => Err(Self::Err::uint_parse_error(s, err.kind())),
  380|       |        }
  381|  2.98k|    }
_RNvXs7_NtCsaVj0Slin5kQ_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  308|  2.75k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  309|  2.75k|        if value > JSON_UINT_UPPER_LIMIT {
  310|    194|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  311|       |        } else {
  312|  2.56k|            Ok(Self::new(value))
  313|       |        }
  314|  2.75k|    }
_RNvXs8_NtCsaVj0Slin5kQ_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  321|  2.75k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  322|  2.75k|        if value < 0 {
  323|      0|            Err(JsonIntOverflowError::negative_uint(value))
  324|       |        } else {
  325|  2.75k|            Self::try_from(value as u64)
  326|       |        }
  327|  2.75k|    }

_RNvMNtNtCsaVj0Slin5kQ_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError17uint_pos_overflowB6_:
   44|    194|    pub(crate) fn uint_pos_overflow(src: u64) -> Self {
   45|    194|        Self {
   46|    194|            kind: JsonIntOverflowKind::UIntPos(src),
   47|    194|        }
   48|    194|    }
_RNvMs_NtNtCsaVj0Slin5kQ_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError16uint_parse_error:
   82|    226|    pub(crate) fn uint_parse_error(src: &str, err: &IntErrorKind) -> Self {
   83|    226|        Self {
   84|    226|            kind: match err {
   85|    226|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
   86|      0|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
   87|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonUInt value.
   88|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
   89|       |            },
   90|       |        }
   91|    226|    }
_RNvMs_NtNtCsaVj0Slin5kQ_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
   69|    194|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
   70|    194|        Self {
   71|    194|            kind: match err.kind {
   72|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
   73|      0|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
   74|       |                }
   75|      0|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
   76|    194|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
   77|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
   78|       |            },
   79|       |        }
   80|    194|    }

_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser6memberB3_:
  203|   120k|fn member<'a>() -> impl Parser<'a, MemberString<'a>> {
  204|   120k|    map(
  205|   120k|        recognize(pair(member_first(), many0(member_character()))),
  206|   120k|        MemberString::Borrowed,
  207|   120k|    )
  208|   120k|}
_RNvXs1_NtCsaVj0Slin5kQ_15rsonpath_syntax6parserNtB5_12MemberStringINtNtCslATUeuPuGvJ_4core7convert4FromINtNtB17_6option6OptionNtNtCshJIxznpEM8j_5alloc6string6StringEE4fromB7_:
   63|  6.78k|    fn from(value: Option<String>) -> Self {
   64|  6.78k|        match value {
   65|  4.41k|            Some(member) => MemberString::Owned(member),
   66|  2.36k|            None => MemberString::Borrowed(""),
   67|       |        }
   68|  6.78k|    }
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser8jsonpath:
  144|  1.07k|fn jsonpath<'a>() -> impl Parser<'a, (Option<Token<'a>>, Vec<Token<'a>>)> {
  145|  1.07k|    pair(
  146|  1.07k|        opt(map(char('$'), |_| Token::Root)), // root selector
  147|  1.07k|        non_root(),
  148|  1.07k|    )
  149|  1.07k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser23wildcard_child_selector0B5_:
  162|  7.81k|    map(alt((dot_wildcard_selector(), index_wildcard_selector())), |_| {
  163|  7.81k|        Token::WildcardChild()
  164|  7.81k|    })
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser26array_index_child_selectorB3_:
  218|  60.0k|fn array_index_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  219|  60.0k|    map(array_index_selector(), Token::ArrayIndexChild)
  220|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser23wildcard_child_selectorB3_:
  161|  60.0k|fn wildcard_child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  162|  60.0k|    map(alt((dot_wildcard_selector(), index_wildcard_selector())), |_| {
  163|       |        Token::WildcardChild()
  164|  60.0k|    })
  165|  60.0k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescaped0B5_:
  291|  24.6k|    verify(none_of(r#"'"\"#), |&c| u32::from(c) >= 0x20)
_RINvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser14tokens_to_nodeINtNtNtCshJIxznpEM8j_5alloc3vec9into_iter8IntoIterNtB2_5TokenEEB4_:
  105|  32.4k|fn tokens_to_node<'a, I: Iterator<Item = Token<'a>>>(tokens: &mut I) -> Result<Option<JsonPathQueryNode>, ParserError> {
  106|  32.4k|    match tokens.next() {
  107|  32.1k|        Some(token) => {
  108|  32.1k|            let child_node = tokens_to_node(tokens)?.map(Box::new);
  109|  32.1k|            match token {
  110|      0|                Token::Root => Ok(Some(JsonPathQueryNode::Root(child_node))),
  111|  21.9k|                Token::Child(member) => Ok(Some(JsonPathQueryNode::Child(
  112|  21.9k|                    JsonString::new(member.borrow()),
  113|  21.9k|                    child_node,
  114|  21.9k|                ))),
  115|     97|                Token::ArrayIndexChild(i) => Ok(Some(JsonPathQueryNode::ArrayIndexChild(i, child_node))),
  116|  7.15k|                Token::WildcardChild() => Ok(Some(JsonPathQueryNode::AnyChild(child_node))),
  117|  2.29k|                Token::Descendant(member) => Ok(Some(JsonPathQueryNode::Descendant(
  118|  2.29k|                    JsonString::new(member.borrow()),
  119|  2.29k|                    child_node,
  120|  2.29k|                ))),
  121|     69|                Token::ArrayIndexDescendant(i) => Ok(Some(JsonPathQueryNode::ArrayIndexDescendant(i, child_node))),
  122|    657|                Token::WildcardDescendant() => Ok(Some(JsonPathQueryNode::AnyDescendant(child_node))),
  123|       |            }
  124|       |        }
  125|    242|        _ => Ok(None),
  126|       |    }
  127|  32.4k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_first0B5_:
  211|  47.4k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser21parse_json_path_querys0_0B5_:
   96|  59.0k|                        continuation = non_root()(&remaining[next_char_boundary..]).finish().map(|x| x.0);
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_character0B5_:
  215|  34.6k|    verify(anychar, |&x| x.is_alphanumeric() || x == '_' || !x.is_ascii())
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser21parse_json_path_querys_0B5_:
   94|  70.7k|                            .find(|x| remaining.is_char_boundary(*x))
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser21dot_wildcard_selectorB3_:
  175|  60.0k|fn dot_wildcard_selector<'a>() -> impl Parser<'a, char> {
  176|  60.0k|    preceded(char('.'), char('*'))
  177|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser18parsed_array_indexB3_:
  234|   120k|fn parsed_array_index<'a>() -> impl Parser<'a, JsonUInt> {
  235|   120k|    map_res(digit1, str::parse)
  236|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser13quoted_member:
  238|   120k|fn quoted_member<'a>() -> impl Parser<'a, MemberString<'a>> {
  239|   120k|    alt((
  240|   120k|        delimited(
  241|   120k|            char('\''),
  242|   120k|            map(opt(single_quoted_member()), MemberString::from),
  243|   120k|            char('\''),
  244|   120k|        ),
  245|   120k|        delimited(
  246|   120k|            char('"'),
  247|   120k|            map(opt(double_quoted_member()), MemberString::from),
  248|   120k|            char('"'),
  249|   120k|        ),
  250|   120k|    ))
  251|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser19descendant_selector:
  179|  60.0k|fn descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  180|  60.0k|    preceded(
  181|  60.0k|        tag(".."),
  182|  60.0k|        alt((
  183|  60.0k|            map(alt((member(), index_selector())), Token::Descendant),
  184|  60.0k|            array_index_descendant_selector(),
  185|  60.0k|        )),
  186|  60.0k|    )
  187|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser20single_quoted_member:
  253|   120k|fn single_quoted_member<'a>() -> impl Parser<'a, String> {
  254|   120k|    escaped_transform(
  255|   120k|        // If ['"'] is parsed, we want the string to be \", not ", since
  256|   120k|        // in a valid JSON document the only way to represent a double quote in a string is with an escape.
  257|   120k|        map(
  258|   120k|            many1(alt((
  259|   120k|                map(unescaped(), MaybeEscapedChar::Char),
  260|   120k|                map(char('"'), MaybeEscapedChar::Escaped),
  261|   120k|            ))),
  262|   120k|            MaybeEscapedCharVec,
  263|   120k|        ),
  264|   120k|        '\\',
  265|   120k|        alt((escaped(), value("'", tag("'")))),
  266|   120k|    )
  267|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12member_firstB3_:
  210|   120k|fn member_first<'a>() -> impl Parser<'a, char> {
  211|   120k|    verify(anychar, |&x| x.is_alpha() || x == '_' || !x.is_ascii())
  212|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser9unescapedB3_:
  290|   240k|fn unescaped<'a>() -> impl Parser<'a, char> {
  291|   240k|    verify(none_of(r#"'"\"#), |&c| u32::from(c) >= 0x20)
  292|   240k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser16member_characterB3_:
  214|   120k|fn member_character<'a>() -> impl Parser<'a, char> {
  215|   120k|    verify(anychar, |&x| x.is_alphanumeric() || x == '_' || !x.is_ascii())
  216|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser31array_index_descendant_selectorB3_:
  222|  60.0k|fn array_index_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  223|  60.0k|    map(array_index_selector(), Token::ArrayIndexDescendant)
  224|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser23nonnegative_array_indexB3_:
  230|   120k|fn nonnegative_array_index<'a>() -> impl Parser<'a, JsonUInt> {
  231|   120k|    map_res(parsed_array_index(), TryInto::try_into)
  232|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser14child_selector:
  167|  60.0k|fn child_selector<'a>() -> impl Parser<'a, Token<'a>> {
  168|  60.0k|    map(alt((dot_selector(), index_selector())), Token::Child)
  169|  60.0k|}
_RNvXs3_NtCsaVj0Slin5kQ_15rsonpath_syntax6parserNtB5_19MaybeEscapedCharVecNtNtCsijflsOnQTe0_3nom6traits10ExtendInto11extend_into:
  306|  3.63k|    fn extend_into(&self, acc: &mut Self::Extender) {
  307|  16.5k|        for maybe_escaped in &self.0 {
  308|  12.8k|            match maybe_escaped {
  309|  11.8k|                MaybeEscapedChar::Char(c) => acc.push(*c),
  310|  1.03k|                MaybeEscapedChar::Escaped(c) => {
  311|  1.03k|                    acc.push('\\');
  312|  1.03k|                    acc.push(*c);
  313|  1.03k|                }
  314|       |            }
  315|       |        }
  316|  3.63k|    }
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser12dot_selectorB3_:
  171|  60.0k|fn dot_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  172|  60.0k|    preceded(char('.'), member())
  173|  60.0k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser28wildcard_descendant_selector0B5_:
  190|    942|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  191|    942|        Token::WildcardDescendant()
  192|    942|    })
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser14index_selector:
  195|   120k|fn index_selector<'a>() -> impl Parser<'a, MemberString<'a>> {
  196|   120k|    delimited(char('['), quoted_member(), char(']'))
  197|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser23index_wildcard_selectorB3_:
  199|   120k|fn index_wildcard_selector<'a>() -> impl Parser<'a, char> {
  200|   120k|    delimited(char('['), char('*'), char(']'))
  201|   120k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser20double_quoted_member:
  269|   120k|fn double_quoted_member<'a>() -> impl Parser<'a, String> {
  270|   120k|    escaped_transform(
  271|   120k|        recognize(many1(alt((unescaped(), char('\''))))),
  272|   120k|        '\\',
  273|   120k|        // If ["\""] is parsed the string must be \". Same reason as in single_quoted_member.
  274|   120k|        alt((escaped(), value("\\\"", tag("\"")))),
  275|   120k|    )
  276|   120k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser8jsonpath0B5_:
  146|     16|        opt(map(char('$'), |_| Token::Root)), // root selector
_RNvXs0_NtCsaVj0Slin5kQ_15rsonpath_syntax6parserNtB5_12MemberStringINtNtCslATUeuPuGvJ_4core6borrow6BorroweE6borrowB7_:
   53|  24.2k|    fn borrow(&self) -> &str {
   54|  24.2k|        match self {
   55|  24.0k|            MemberString::Borrowed(member) => member,
   56|    132|            MemberString::Owned(member) => member,
   57|       |        }
   58|  24.2k|    }
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser8non_root:
  151|  60.0k|fn non_root<'a>() -> impl Parser<'a, Vec<Token<'a>>> {
  152|  60.0k|    many0(alt((
  153|  60.0k|        wildcard_child_selector(),
  154|  60.0k|        child_selector(),
  155|  60.0k|        array_index_child_selector(),
  156|  60.0k|        wildcard_descendant_selector(),
  157|  60.0k|        descendant_selector(),
  158|  60.0k|    )))
  159|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser21parse_json_path_query:
   71|  1.07k|pub(crate) fn parse_json_path_query(query_string: &str) -> Result<JsonPathQuery, ParserError> {
   72|  1.07k|    let tokens_result = jsonpath()(query_string);
   73|  1.07k|    let finished = tokens_result.finish();
   74|  1.07k|
   75|  1.07k|    match finished {
   76|  1.07k|        Ok(("", (_root_token, tokens))) => {
   77|    242|            let node = tokens_to_node(&mut tokens.into_iter())?;
   78|    240|            Ok(match node {
   79|      2|                None => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(None))),
   80|    240|                Some(node) if node.is_root() => JsonPathQuery::new(Box::new(node)),
   81|    240|                Some(node) => JsonPathQuery::new(Box::new(JsonPathQueryNode::Root(Some(Box::new(node))))),
   82|       |            })
   83|       |        }
   84|       |        _ => {
   85|    836|            let mut parse_errors = ParseErrorReport::new();
   86|    836|            let mut continuation = finished.map(|x| x.0);
   87|  59.8k|            loop {
   88|  59.8k|                match continuation {
   89|  59.8k|                    Ok("") => return Err(ParserError::SyntaxError { report: parse_errors }),
   90|  59.0k|                    Ok(remaining) => {
   91|  59.0k|                        let error_character_index = query_string.len() - remaining.len();
   92|  59.0k|                        parse_errors.record_at(error_character_index);
   93|  59.0k|                        let next_char_boundary = (1..=4)
   94|  59.0k|                            .find(|x| remaining.is_char_boundary(*x))
   95|  59.0k|                            .expect("longest UTF8 char is 4 bytes");
   96|  59.0k|                        continuation = non_root()(&remaining[next_char_boundary..]).finish().map(|x| x.0);
   97|  59.0k|                    }
   98|      0|                    Err(e) => return Err(nom::error::Error::new(query_string.to_owned(), e.code).into()),
   99|       |                }
  100|       |            }
  101|       |        }
  102|       |    }
  103|  1.07k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser20array_index_selectorB3_:
  226|   120k|fn array_index_selector<'a>() -> impl Parser<'a, JsonUInt> {
  227|   120k|    delimited(char('['), nonnegative_array_index(), char(']'))
  228|   120k|}
_RNCNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser21parse_json_path_query0B5_:
   86|    836|            let mut continuation = finished.map(|x| x.0);
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser28wildcard_descendant_selectorB3_:
  189|  60.0k|fn wildcard_descendant_selector<'a>() -> impl Parser<'a, Token<'a>> {
  190|  60.0k|    map(preceded(tag(".."), alt((char('*'), index_wildcard_selector()))), |_| {
  191|       |        Token::WildcardDescendant()
  192|  60.0k|    })
  193|  60.0k|}
_RNvNtCsaVj0Slin5kQ_15rsonpath_syntax6parser7escapedB3_:
  278|   240k|fn escaped<'a>() -> impl Parser<'a, &'a str> {
  279|   240k|    alt((
  280|   240k|        value("\\b", tag("b")),
  281|   240k|        value("\\f", tag("f")),
  282|   240k|        value("\\n", tag("n")),
  283|   240k|        value("\\r", tag("r")),
  284|   240k|        value("\\t", tag("t")),
  285|   240k|        value("\\\\", tag("\\")),
  286|   240k|        value("/", tag("/")),
  287|   240k|    ))
  288|   240k|}

_RNvMs0_NtCsaVj0Slin5kQ_15rsonpath_syntax6stringNtB5_10JsonString3newB7_:
   48|  24.2k|    pub fn new(string: &str) -> Self {
   49|  24.2k|        let bytes = string.as_bytes();
   50|  24.2k|        let without_quotes = Vec::from(bytes);
   51|  24.2k|
   52|  24.2k|        let mut with_quotes = Vec::with_capacity(bytes.len() + 2);
   53|  24.2k|        with_quotes.push(b'"');
   54|  24.2k|        with_quotes.extend(bytes);
   55|  24.2k|        with_quotes.push(b'"');
   56|  24.2k|
   57|  24.2k|        Self {
   58|  24.2k|            string: without_quotes,
   59|  24.2k|            string_with_quotes: with_quotes,
   60|  24.2k|        }
   61|  24.2k|    }

