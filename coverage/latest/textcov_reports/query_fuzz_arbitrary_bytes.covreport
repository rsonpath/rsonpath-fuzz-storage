_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary9size_hintCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
  868|  2.08k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  2.08k|        (0, None)
  870|  2.08k|    }
_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  2.08k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  2.08k|        let size = u.len();
  864|  2.08k|        arbitrary_str(&mut u, size)
  865|  2.08k|    }

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
   85|  2.08k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.08k|        Unstructured { data }
   87|  2.08k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  2.08k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  2.08k|        self.data.get(..size)
  581|  2.08k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  2.08k|    pub fn len(&self) -> usize {
  109|  2.08k|        self.data.len()
  110|  2.08k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  2.08k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  2.08k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  2.08k|        }
  552|  2.08k|
  553|  2.08k|        let (for_buf, rest) = self.data.split_at(size);
  554|  2.08k|        self.data = rest;
  555|  2.08k|        Ok(for_buf)
  556|  2.08k|    }

_RNvXCsfeQOFZTz9nJ_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
   30|  2.08k|    fn from(_: ()) -> Self {
   31|  2.08k|        Self::Keep
   32|  2.08k|    }
_RNvNvCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  2.08k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.08k|                $body
  305|  2.08k|            }
rust_fuzzer_test_input:
  259|  2.08k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.08k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.08k|
  262|  2.08k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.08k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.08k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.08k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.08k|                // get to longer inputs that actually lead to interesting executions
  267|  2.08k|                // quicker.
  268|  2.08k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.08k|                }
  271|  2.08k|
  272|  2.08k|                let mut u = Unstructured::new(bytes);
  273|  2.08k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.08k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.08k|                }
  291|       |
  292|  2.08k|                let data = match data {
  293|  2.08k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.08k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.08k|                result.to_libfuzzer_code()
  299|  2.08k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
   40|  2.08k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.08k|        match self {
   42|  2.08k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  2.08k|    }
LLVMFuzzerTestOneInput:
   58|  2.08k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.08k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.08k|    });
   63|  2.08k|
   64|  2.08k|    match test_input {
   65|  2.08k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.08k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.08k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.08k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.08k|        rust_fuzzer_test_input(data_slice)
   62|  2.08k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvBy_9name_char0ReNtNtBC_5error18InternalParseErrorE0EINtB4_3AltB2I_cB2K_E6choiceBC_:
  134|  19.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  19.9k|        match self.0.parse(input.clone()) {
  136|  8.93k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  11.0k|          res => res,
  138|       |        }
  139|  19.9k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|  55.3k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|  25.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  25.9k|  mut l: List,
   49|  25.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  25.9k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|  36.8k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  36.8k|        match self.0.parse(input.clone()) {
  136|  34.0k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  2.77k|          res => res,
  138|       |        }
  139|  36.8k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvNtBD_6parser17wildcard_selectorNvMst_BD_BB_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBB_E0EE0BD_:
   50|  9.49k|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1U_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  31.4k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  31.4k|        match self.0.parse(input.clone()) {
  136|  25.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.54k|          res => res,
  138|       |        }
  139|  31.4k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|  36.8k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EEBB_:
   47|  31.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  31.4k|  mut l: List,
   49|  31.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  31.4k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1O_s_0NCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|  31.4k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  31.4k|  mut l: List,
   49|  31.4k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  31.4k|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1e_B1e_NvNtBB_6parser6numberE0NCIB1P_Bx_NtNtBB_3str10JsonStringBz_B1e_B1e_NvB2Q_14string_literalE0NCINvB1R_5valueBx_Bz_Bx_B1e_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1e_E0E0B4h_B4h_EEBB_:
   47|     10|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|     10|  mut l: List,
   49|     10|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|     10|}
_RNvXs2_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB23_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1P_B23_B23_NvB2H_14string_literalE0NCINvBC_5valueBY_B1P_BY_B23_NCINvNtNtB7_5bytes8complete3tagBY_BY_B23_E0E0B4a_B4a_EINtB5_3AltBY_B1P_B23_E6choiceB14_:
  134|     10|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|     10|        match self.0.parse(input.clone()) {
  136|     10|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|     10|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|     10|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|     10|        match self.0.parse(input.clone()) {
  136|     10|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|     10|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3L_3mapBx_NtBB_8SelectorBz_B1g_NvB1S_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  25.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  25.9k|  mut l: List,
   49|  25.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  25.9k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  55.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  55.3k|        match self.0.parse(input.clone()) {
  136|  49.1k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  6.15k|          res => res,
  138|       |        }
  139|  55.3k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1A_EEBE_:
   47|     10|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|     10|  mut l: List,
   49|     10|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|     10|}
_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2g_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2g_E0EINtB5_3AltB20_B2g_B2v_E6choiceBD_:
  134|  5.54k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  5.54k|        match self.0.parse(input.clone()) {
  136|  4.11k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.42k|          res => res,
  138|       |        }
  139|  5.54k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3N_3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  25.9k|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBG_6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvB1E_9name_char0Bz_BC_E0EE0BG_:
   50|  19.9k|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtB11_9SelectorsNtNtB11_5error18InternalParseErrorNvNtB11_6parser17wildcard_selectorNvMst_B11_B1F_3oneE0NvB2v_21member_name_shorthandNCINvB2v_14failed_segmentB1F_E0EINtB5_3AltBX_B1F_B1V_E6choiceB11_:
  134|  9.49k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  9.49k|        match self.0.parse(input.clone()) {
  136|  8.64k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    843|          res => res,
  138|       |        }
  139|  9.49k|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14slice_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NCIB1S_BB_NCNvB1U_8selector0B1h_E0NvB1U_15failed_selectorEE0BD_:
   50|  36.7k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|  36.8k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  36.8k|  mut l: List,
   49|  36.8k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  36.8k|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1z_NCINvNtNtB6_9character8complete4charBz_B1z_E0E0B27_EE0BF_:
   50|     10|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1Q_s_0NCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|  31.4k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14slice_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NCIB1Q_Bz_NCNvB1S_8selector0B1f_E0NvB1S_15failed_selectorEEBB_:
   47|  36.7k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  36.7k|  mut l: List,
   49|  36.7k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  36.7k|}
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14slice_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NCIBA_B1z_NCNvBC_8selector0B27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|  36.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  36.7k|        match self.0.parse(input.clone()) {
  136|  31.6k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.15k|          res => res,
  138|       |        }
  139|  36.7k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|  55.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  55.3k|  mut l: List,
   49|  55.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  55.3k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Z_E0E0Bw_EINtB4_3AltBY_B10_B1Z_E6choiceB14_:
  134|     10|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|     10|        match self.0.parse(input.clone()) {
  136|     10|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|      0|          res => res,
  138|       |        }
  139|     10|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBE_6parser21member_name_shorthand10name_firstNCINvNtNtB4_9character8complete7satisfyNCNvB1C_9name_char0Bx_BA_E0EEBE_:
   47|  19.9k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  19.9k|  mut l: List,
   49|  19.9k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  19.9k|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1W_B2e_E0NCINvNtB6_10combinator3cutB1W_B1Z_B2e_NCINvB4_3altB1W_B1Z_B2e_TNCINvB3A_3mapB1W_NtBC_8SelectorB1Z_B2e_NvBA_17wildcard_selectorNvMst_BC_B1Z_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Z_E0EE0E0E0EINtB4_3AltB1W_B1Z_B2e_E6choiceBC_:
  134|  25.9k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  25.9k|        match self.0.parse(input.clone()) {
  136|  17.4k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  8.43k|          res => res,
  138|       |        }
  139|  25.9k|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2W_EEBG_:
   47|     10|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|     10|  mut l: List,
   49|     10|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1g_B1g_NvNtBD_6parser6numberE0NCIB1R_Bz_NtNtBD_3str10JsonStringBB_B1g_B1g_NvB2S_14string_literalE0NCINvB1T_5valueBz_BB_Bz_B1g_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1g_E0E0B4j_B4j_EE0BD_:
   50|     10|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1x_NCINvNtNtB4_9character8complete4charBx_B1x_E0E0B25_EEBD_:
   47|     10|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|     10|  mut l: List,
   49|     10|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2Y_EE0BI_:
   50|     10|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1U_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1U_21member_name_shorthandNCINvB1U_14failed_segmentBB_E0EE0BD_:
   50|  5.54k|  move |i: I| l.choice(i)

_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|  76.7k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|  76.7k|  tag: T,
   34|  76.7k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|  76.7k|where
   36|  76.7k|  Input: InputTake + Compare<T>,
   37|  76.7k|  T: InputLength + Clone,
   38|  76.7k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|  76.7k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|  76.7k|  move |i: Input| {
   40|  76.7k|    let tag_len = tag.input_len();
   41|  76.7k|    let t = tag.clone();
   42|  76.7k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  12.0k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|  64.6k|        let e: ErrorKind = ErrorKind::Tag;
   46|  64.6k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|  76.7k|    res
   50|  76.7k|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBQ_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|     10|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|     10|  tag: T,
   76|     10|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|     10|where
   78|     10|  Input: InputTake + Compare<T>,
   79|     10|  T: InputLength + Clone,
   80|     10|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|     10|}

_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  32.1k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  32.1k|    let c = t.as_char();
   69|  32.1k|    let b = cond(c);
   70|  32.1k|    (c, b)
   71|  32.1k|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   150k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|  56.6k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|  56.6k|where
  437|  56.6k|  T: InputTakeAtPosition,
  438|  56.6k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|  56.6k|{
  440|  56.6k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|  56.6k|}
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs2slMccTFvwW_15rsonpath_syntax:
   32|  69.2k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  69.2k|where
   34|  69.2k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  69.2k|  <I as InputIter>::Item: AsChar,
   36|  69.2k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  69.2k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Cs2slMccTFvwW_15rsonpath_syntax:
   37|  66.3k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  66.3k|    let b = t.as_char() == c;
   39|  66.3k|    (&c, b)
   40|  66.3k|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE0Cs2slMccTFvwW_15rsonpath_syntax:
   37|     10|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|     10|  }) {
   41|      0|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|     10|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|     10|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|   217k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   217k|    let b = t.as_char() == c;
   39|   217k|    (&c, b)
   40|   217k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|   230k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   230k|where
   34|   230k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   230k|  <I as InputIter>::Item: AsChar,
   36|   230k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   230k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  8.80k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  8.80k|    let c = t.as_char();
   69|  8.80k|    let b = cond(c);
   70|  8.80k|    (c, b)
   71|  8.80k|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  32.3k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  32.3k|  }) {
   72|  19.5k|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  12.8k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  32.3k|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  8.93k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  8.93k|  }) {
   72|    442|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  8.49k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  8.93k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuECs2slMccTFvwW_15rsonpath_syntax:
   32|     10|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|     10|where
   34|     10|  I: Slice<RangeFrom<usize>> + InputIter,
   35|     10|  <I as InputIter>::Item: AsChar,
   36|     10|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|     10|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs2slMccTFvwW_15rsonpath_syntax:
   37|  69.2k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  69.2k|  }) {
   41|  14.9k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  54.3k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  69.2k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  32.3k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  32.3k|where
   63|  32.3k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  32.3k|  <I as InputIter>::Item: AsChar,
   65|  32.3k|  F: Fn(char) -> bool,
   66|  32.3k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  32.3k|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|   218k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   218k|  }) {
   41|  43.2k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   175k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   218k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  19.9k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  19.9k|where
   63|  19.9k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  19.9k|  <I as InputIter>::Item: AsChar,
   65|  19.9k|  F: Fn(char) -> bool,
   66|  19.9k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  19.9k|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE00Cs2slMccTFvwW_15rsonpath_syntax:
   37|     10|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|     10|    let b = t.as_char() == c;
   39|     10|    (&c, b)
   40|     10|  }) {

_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs2slMccTFvwW_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1o_E0EBI_:
  453|     30|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|     30|  val: O1,
  455|     30|  mut parser: F,
  456|     30|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|     30|where
  458|     30|  F: Parser<I, O2, E>,
  459|     30|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|     30|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtBM_6parser21member_name_shorthand10name_firstE0BM_:
  308|  12.3k|  move |input: I| {
  309|  12.3k|    let i = input.clone();
  310|  12.3k|    match f.parse(input) {
  311|  8.49k|      Ok((_, o)) => Ok((i, o)),
  312|  3.87k|      Err(e) => Err(e),
  313|       |    }
  314|  12.3k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|  55.3k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  55.3k|  mut parser: F,
  508|  55.3k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  55.3k|where
  510|  55.3k|  F: Parser<I, O, E>,
  511|  55.3k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  55.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser6numberE0BL_:
  672|     10|  move |input: I| match parser.parse(input) {
  673|      0|    Ok((i, o)) => Ok((i, o.into())),
  674|     10|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|     10|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser6numberEBJ_:
  663|     10|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|     10|where
  665|     10|  O1: Into<O2>,
  666|     10|  E1: Into<E2>,
  667|     10|  E1: ParseError<I>,
  668|     10|  E2: ParseError<I>,
  669|     10|  F: Parser<I, O1, E1>,
  670|     10|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvNtBI_6parser17wildcard_selectorNvMst_BI_BG_3oneE0NvB32_21member_name_shorthandNCINvB32_14failed_segmentBG_E0EE0E0BI_:
  635|  9.49k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  9.49k|    rest => rest,
  638|  9.49k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1k_3oneEBG_:
   73|  57.3k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  57.3k|where
   75|  57.3k|  F: Parser<I, O1, E>,
   76|  57.3k|  G: FnMut(O1) -> O2,
   77|  57.3k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  57.3k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2s_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBE_E0EE0EBG_:
  631|  31.4k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  31.4k|where
  633|  31.4k|  F: Parser<I, O, E>,
  634|  31.4k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  31.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B27_EE0EBJ_:
  239|     10|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|     10|where
  241|     10|  F: Parser<I, O, E>,
  242|     10|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2j_6number0E0BK_:
   78|     10|  move |input: I| {
   79|     10|    let (input, o1) = parser.parse(input)?;
   80|      0|    Ok((input, f(o1)))
   81|     10|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs2slMccTFvwW_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1F_NCINvNtB6_8sequence8precededBF_cBH_B1F_NCINvNtNtB6_9character8complete4charBF_B1F_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3H_15filter_selector0B1F_E0E0E0BJ_:
  672|  11.6k|  move |input: I| match parser.parse(input) {
  673|      0|    Ok((i, o)) => Ok((i, o.into())),
  674|  11.6k|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|     10|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  11.6k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1t_4Name0EBI_:
   73|  36.7k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  36.7k|where
   75|  36.7k|  F: Parser<I, O1, E>,
   76|  36.7k|  G: FnMut(O1) -> O2,
   77|  36.7k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  36.7k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2n_6digit1BC_BH_EE0EBL_:
  239|     10|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|     10|where
  241|     10|  F: Parser<I, O, E>,
  242|     10|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|     10|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtBK_6parser21member_name_shorthand10name_firstEBK_:
  304|  12.3k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  12.3k|where
  306|  12.3k|  F: Parser<I, O, E>,
  307|  12.3k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  12.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2u_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2u_21member_name_shorthandNCINvB2u_14failed_segmentBG_E0EE0E0BI_:
  635|  5.54k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  5.54k|    rest => rest,
  638|  5.54k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  26.3k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  26.3k|where
  241|  26.3k|  F: Parser<I, O, E>,
  242|  26.3k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  26.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|  55.3k|  move |input: I| {
  513|  55.3k|    let i = input.clone();
  514|  55.3k|    match parser.parse(i) {
  515|  20.6k|      Ok((i, _)) => {
  516|  20.6k|        let index = input.offset(&i);
  517|  20.6k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  34.6k|      Err(e) => Err(e),
  520|       |    }
  521|  55.3k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBI_INtNtCslATUeuPuGvJ_4core6option6OptionBI_EBO_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2C_8precededBI_cBI_B1y_NCINvB3a_4charBI_B1y_E0B37_E0E0NCIB3S_BI_BI_B1y_NCIB4e_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4e_BI_IBP_cEBI_B1y_NCIB3S_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4E_B4E_EE0E0B37_E0E0E0EE0EB1C_:
  506|     10|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|     10|  mut parser: F,
  508|     10|) -> impl FnMut(I) -> IResult<I, I, E>
  509|     10|where
  510|     10|  F: Parser<I, O, E>,
  511|     10|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|     10|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1y_NvB4n_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|  31.4k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  31.4k|where
   75|  31.4k|  F: Parser<I, O1, E>,
   76|  31.4k|  G: FnMut(O1) -> O2,
   77|  31.4k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  31.4k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1J_BC_INtNtCslATUeuPuGvJ_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4J_EE0E0INvB4O_6digit1BC_BH_EE0E0EBL_:
  239|     10|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|     10|where
  241|     10|  F: Parser<I, O, E>,
  242|     10|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|     10|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3B_EE0EBR_:
  506|     10|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|     10|  mut parser: F,
  508|     10|) -> impl FnMut(I) -> IResult<I, I, E>
  509|     10|where
  510|     10|  F: Parser<I, O, E>,
  511|     10|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1N_3intBJ_E0E0BN_:
  243|  10.9k|  move |input: I| {
  244|  10.9k|    let i = input.clone();
  245|  10.9k|    match f.parse(input) {
  246|  3.68k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  5.85k|      Err(Err::Error(_)) => Ok((i, None)),
  248|  1.40k|      Err(e) => Err(e),
  249|       |    }
  250|  10.9k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  45.2k|  move |input: I| {
   79|  45.2k|    let (input, o1) = parser.parse(input)?;
   80|  6.51k|    Ok((input, f(o1)))
   81|  45.2k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCs2slMccTFvwW_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1D_NCINvNtB4_8sequence8precededBD_cBF_B1D_NCINvNtNtB4_9character8complete4charBD_B1D_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3F_15filter_selector0B1D_E0E0EBH_:
  663|  11.6k|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  11.6k|where
  665|  11.6k|  O1: Into<O2>,
  666|  11.6k|  E1: Into<E2>,
  667|  11.6k|  E1: ParseError<I>,
  668|  11.6k|  E2: ParseError<I>,
  669|  11.6k|  F: Parser<I, O1, E1>,
  670|  11.6k|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  11.6k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|  25.9k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  25.9k|where
  633|  25.9k|  F: Parser<I, O, E>,
  634|  25.9k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  25.9k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1F_E0EBK_:
  453|     20|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|     20|  val: O1,
  455|     20|  mut parser: F,
  456|     20|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|     20|where
  458|     20|  F: Parser<I, O2, E>,
  459|     20|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|     20|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|     10|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|     10|where
  241|     10|  F: Parser<I, O, E>,
  242|     10|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|     10|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2h_6number0EBI_:
   73|     10|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|     10|where
   75|     10|  F: Parser<I, O1, E>,
   76|     10|  G: FnMut(O1) -> O2,
   77|     10|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCs2slMccTFvwW_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1q_E0E0BK_:
  460|     30|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2m_BC_NvB2o_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  6.27k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  6.27k|where
  241|  6.27k|  F: Parser<I, O, E>,
  242|  6.27k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  6.27k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBK_INtNtCslATUeuPuGvJ_4core6option6OptionBK_EBQ_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2E_8precededBK_cBK_B1A_NCINvB3c_4charBK_B1A_E0B39_E0E0NCIB3U_BK_BK_B1A_NCIB4g_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4g_BK_IBR_cEBK_B1A_NCIB3U_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4G_B4G_EE0E0B39_E0E0E0EE0E0B1E_:
  512|     10|  move |input: I| {
  513|     10|    let i = input.clone();
  514|     10|    match parser.parse(i) {
  515|      0|      Ok((i, _)) => {
  516|      0|        let index = input.offset(&i);
  517|      0|        Ok((i, input.slice(..index)))
  518|       |      }
  519|     10|      Err(e) => Err(e),
  520|       |    }
  521|     10|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2H_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2H_21member_name_shorthandNCINvB2H_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|  25.9k|  move |input: I| {
   79|  25.9k|    let (input, o1) = parser.parse(input)?;
   80|  8.17k|    Ok((input, f(o1)))
   81|  25.9k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1L_3intBH_E0EBL_:
  239|  13.5k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  13.5k|where
  241|  13.5k|  F: Parser<I, O, E>,
  242|  13.5k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  13.5k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  45.2k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  45.2k|where
   75|  45.2k|  F: Parser<I, O1, E>,
   76|  45.2k|  G: FnMut(O1) -> O2,
   77|  45.2k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  45.2k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2o_BE_NvB2q_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  6.27k|  move |input: I| {
  244|  6.27k|    let i = input.clone();
  245|  6.27k|    match f.parse(input) {
  246|  3.06k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  2.60k|      Err(Err::Error(_)) => Ok((i, None)),
  248|    604|      Err(e) => Err(e),
  249|       |    }
  250|  6.27k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3str17JsonStringBuilderNtBK_9SelectorsNtNtBK_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBG_B1R_NCINvB4_4peekBE_cB1R_NvNvNtBK_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BE_cB1R_NvB3o_9name_charNCB3o_0NvMs_BI_BG_3newBG_E0E0NCB3o_s_0E0BK_:
   78|  12.3k|  move |input: I| {
   79|  12.3k|    let (input, o1) = parser.parse(input)?;
   80|  8.49k|    Ok((input, f(o1)))
   81|  12.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3D_EE0E0BT_:
  512|     10|  move |input: I| {
  513|     10|    let i = input.clone();
  514|     10|    match parser.parse(i) {
  515|      0|      Ok((i, _)) => {
  516|      0|        let index = input.offset(&i);
  517|      0|        Ok((i, input.slice(..index)))
  518|       |      }
  519|     10|      Err(e) => Err(e),
  520|       |    }
  521|     10|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3str17JsonStringBuilderNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBE_B1P_NCINvB2_4peekBC_cB1P_NvNvNtBI_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BC_cB1P_NvB3m_9name_charNCB3m_0NvMs_BG_BE_3newBE_E0E0NCB3m_s_0EBI_:
   73|  12.3k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  12.3k|where
   75|  12.3k|  F: Parser<I, O1, E>,
   76|  12.3k|  G: FnMut(O1) -> O2,
   77|  12.3k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  12.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1v_4Name0E0BK_:
   78|  36.7k|  move |input: I| {
   79|  36.7k|    let (input, o1) = parser.parse(input)?;
   80|  2.59k|    Ok((input, f(o1)))
   81|  36.7k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1A_NvB4p_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|  31.4k|  move |input: I| {
   79|  31.4k|    let (input, o1) = parser.parse(input)?;
   80|  2.48k|    Ok((input, f(o1)))
   81|  31.4k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2F_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|  25.9k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  25.9k|where
   75|  25.9k|  F: Parser<I, O1, E>,
   76|  25.9k|  G: FnMut(O1) -> O2,
   77|  25.9k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  25.9k|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1H_E0E0BM_:
  460|     20|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMst_BI_B1m_3oneE0BI_:
   78|  13.6k|  move |input: I| {
   79|  13.6k|    let (input, o1) = parser.parse(input)?;
   80|  1.24k|    Ok((input, f(o1)))
   81|  13.6k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1H_NvNtBJ_6parser14string_literalEBJ_:
  663|     10|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|     10|where
  665|     10|  O1: Into<O2>,
  666|     10|  E1: Into<E2>,
  667|     10|  E1: ParseError<I>,
  668|     10|  E2: ParseError<I>,
  669|     10|  F: Parser<I, O1, E1>,
  670|     10|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  26.3k|  move |input: I| {
  244|  26.3k|    let i = input.clone();
  245|  26.3k|    match f.parse(input) {
  246|  8.34k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  17.2k|      Err(Err::Error(_)) => Ok((i, None)),
  248|    796|      Err(e) => Err(e),
  249|       |    }
  250|  26.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1J_NvNtBL_6parser14string_literalE0BL_:
  672|     10|  move |input: I| match parser.parse(input) {
  673|      0|    Ok((i, o)) => Ok((i, o.into())),
  674|     10|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|      0|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|     10|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|     10|  move |input: I| {
  244|     10|    let i = input.clone();
  245|     10|    match f.parse(input) {
  246|      0|      Ok((i, o)) => Ok((i, Some(o))),
  247|     10|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|     10|  }

_RNvYNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE2orB6_:
   32|   166k|  fn or(self, other: Self) -> Self {
   33|   166k|    other
   34|   166k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs2slMccTFvwW_15rsonpath_syntax:
   73|   351k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|   351k|    Error { input, code: kind }
   75|   351k|  }
_RNvYNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|   175k|  fn from_char(input: I, _: char) -> Self {
   27|   175k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   175k|  }
_RNvYuINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charCs2slMccTFvwW_15rsonpath_syntax:
   26|     10|  fn from_char(input: I, _: char) -> Self {
   27|     10|    Self::from_error_kind(input, ErrorKind::Char)
   28|     10|  }
_RNvYINtNtCs6HefjSGhhBw_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCs2slMccTFvwW_15rsonpath_syntax:
   26|  54.3k|  fn from_char(input: I, _: char) -> Self {
   27|  54.3k|    Self::from_error_kind(input, ErrorKind::Char)
   28|  54.3k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCs2slMccTFvwW_15rsonpath_syntax:
   77|  82.8k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|  82.8k|    other
   79|  82.8k|  }
_RNvXs7_NtCs6HefjSGhhBw_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCs2slMccTFvwW_15rsonpath_syntax:
  122|     10|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|  76.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  76.7k|    self(i)
  326|  76.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCslATUeuPuGvJ_4core6option6OptionBX_EB13_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2R_4charBX_B1O_E0B2O_E0E0NCIB3z_BX_BX_B1O_NCIB49_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB49_BX_IB14_cEBX_B1O_NCIB3z_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4y_B4y_EE0E0B2O_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete7satisfyNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB1j_5error18InternalParseErrorE0INtB5_6ParserB2t_cB2v_E5parseB1j_:
  324|  8.93k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.93k|    self(i)
  326|  8.93k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str17JsonStringBuilderNtNtB17_5error18InternalParseErrorNCINvNtB7_10combinator4peekB10_cB1Z_NvNvNtB17_6parser21member_name_shorthand10name_firstE0NCINvNtB7_5multi10fold_many0B10_cB1Z_NvB39_9name_charNCB39_0NvMs_B15_B13_3newB13_E0E0INtB5_6ParserB10_B13_B1Z_E5parseB17_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  55.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  55.3k|    self(i)
  326|  55.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  5.54k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.54k|    self(i)
  326|  5.54k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|  56.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  56.6k|    self(i)
  326|  56.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  26.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.3k|    self(i)
  326|  26.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4peekRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtB16_6parser21member_name_shorthand10name_firstE0INtB5_6ParserBZ_cB12_E5parseB16_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  25.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.9k|    self(i)
  326|  25.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3cutB10_B13_B1K_NCINvNtB7_6branch3altB10_B13_B1K_TNCINvB37_3mapB10_NtB15_8SelectorB13_B1K_NvNtB15_6parser17wildcard_selectorNvMst_B15_B13_3oneE0NvB4S_21member_name_shorthandNCINvB4S_14failed_segmentB13_E0EE0E0E0INtB5_6ParserB10_B13_B1K_E5parseB15_:
  324|  17.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  17.4k|    self(i)
  326|  17.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB3a_15filter_selector0B1N_E0E0INtB5_6ParserB10_B13_B1N_E5parseB15_:
  324|  11.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.6k|    self(i)
  326|  11.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2c_cB1A_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2c_B2Q_E0NCINvNtB7_10combinator3optB2c_B2c_B2Q_NCIBB_B2c_NvBD_3intB2Q_E0E0E0B2Q_E0INtB5_6ParserB2c_B1A_B2Q_E5parseBF_:
  324|  6.27k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.27k|    self(i)
  326|  6.27k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvNtB12_6parser17wildcard_selectorNvMst_B12_B10_3oneE0NvB3q_21member_name_shorthandNCINvB3q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  9.49k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.49k|    self(i)
  326|  9.49k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B25_E5parseBF_:
  324|  11.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.6k|    self(i)
  326|  11.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2h_E5parseBF_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB4a_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  6.27k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.27k|    self(i)
  326|  6.27k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  5.54k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.54k|    self(i)
  326|  5.54k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvNtBX_6parser17wildcard_selectorNvMst_BX_BV_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  9.49k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  9.49k|    self(i)
  326|  9.49k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthandINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  12.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.3k|    self(i)
  326|  12.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtBF_7SegmentE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  7.98k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.98k|    self(i)
  326|  7.98k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  26.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.3k|    self(i)
  326|  26.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  31.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.4k|    self(i)
  326|  31.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_5multi10fold_many0RecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtB17_6parser21member_name_shorthand9name_charNCB24_0NvMs_NtB17_3strNtB32_17JsonStringBuilder3newB3c_E0INtB5_6ParserB10_B3c_B13_E5parseB17_:
  324|  8.49k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  8.49k|    self(i)
  326|  8.49k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtBF_9SelectorsE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  3.87k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.87k|    self(i)
  326|  3.87k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs2slMccTFvwW_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  31.4k|  fn finish(self) -> Result<(I, O), E> {
   37|  20.7k|    match self {
   38|  10.6k|      Ok(res) => Ok(res),
   39|  20.7k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  31.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   187k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   187k|    self(i)
  326|   187k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  36.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  36.7k|    self(i)
  326|  36.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2d_E0INtB5_6ParserB2b_cB2d_E5parseBF_:
  324|  25.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.5k|    self(i)
  326|  25.5k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  25.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.9k|    self(i)
  326|  25.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15failed_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  11.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.6k|    self(i)
  326|  11.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  18.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.0k|    self(i)
  326|  18.0k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB24_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1Q_B24_E5parseB15_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_charINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  19.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  19.9k|    self(i)
  326|  19.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCs2slMccTFvwW_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1L_E0E0INtB5_6ParserB10_B12_B1L_E5parseB14_:
  324|     30|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     30|    self(i)
  326|     30|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|  70.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  70.8k|    self(i)
  326|  70.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|  31.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.6k|    self(i)
  326|  31.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNtCs2slMccTFvwW_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B21_E0E0INtB5_6ParserB10_B12_B21_E5parseB16_:
  324|     20|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     20|    self(i)
  326|     20|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  11.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.6k|    self(i)
  326|  11.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  5.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.15k|    self(i)
  326|  5.15k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB47_3mapBT_NtBX_8SelectorBV_B1C_NvB2e_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2e_21member_name_shorthandNCINvB2e_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  25.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.9k|    self(i)
  326|  25.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCs2slMccTFvwW_15rsonpath_syntax:
   36|  2.08k|  fn finish(self) -> Result<(I, O), E> {
   37|  1.94k|    match self {
   38|    137|      Ok(res) => Ok(res),
   39|  1.94k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  2.08k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  55.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  55.3k|    self(i)
  326|  55.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  36.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  36.8k|    self(i)
  326|  36.8k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNCNvNtB18_6parser18descendant_segment0NCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4i_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4i_21member_name_shorthandNCINvB4i_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|  31.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.4k|    self(i)
  326|  31.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB27_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  3.66k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  3.66k|    self(i)
  326|  3.66k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser3intINtB5_6ParserReB1v_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  37.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  37.3k|    self(i)
  326|  37.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1L_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  45.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  45.2k|    self(i)
  326|  45.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1A_B1A_B1L_E5parseBF_:
  324|  10.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.9k|    self(i)
  326|  10.9k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  26.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  26.3k|    self(i)
  326|  26.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3mapReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMst_B12_B1G_3oneE0INtB5_6ParserBY_B1G_B1W_E5parseB12_:
  324|  13.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.6k|    self(i)
  326|  13.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|     10|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|     10|    self(i)
  326|     10|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_firstINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  32.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.3k|    self(i)
  326|  32.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2Q_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2Q_21member_name_shorthandNCINvB2Q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  5.54k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.54k|    self(i)
  326|  5.54k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs2slMccTFvwW_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|  36.7k|  fn finish(self) -> Result<(I, O), E> {
   37|  18.3k|    match self {
   38|  18.4k|      Ok(res) => Ok(res),
   39|  18.3k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  36.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|  36.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  36.7k|    self(i)
  326|  36.7k|  }

_RNCINvNtCs6HefjSGhhBw_3nom5multi10fold_many0RecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtBN_6parser21member_name_shorthand9name_charNCB1K_0NvMs_NtBN_3strNtB2H_17JsonStringBuilder3newB2Q_E0BN_:
  701|  8.49k|  move |i: I| {
  702|  8.49k|    let mut res = init();
  703|  8.49k|    let mut input = i;
  704|       |
  705|  19.9k|    loop {
  706|  19.9k|      let i_ = input.clone();
  707|  19.9k|      let len = input.input_len();
  708|  19.9k|      match f.parse(i_) {
  709|  11.4k|        Ok((i, o)) => {
  710|  11.4k|          // infinite loop check: the parser must always consume
  711|  11.4k|          if i.input_len() == len {
  712|      0|            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|  11.4k|          }
  714|  11.4k|
  715|  11.4k|          res = g(res, o);
  716|  11.4k|          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|  8.49k|          return Ok((input, res));
  720|       |        }
  721|      0|        Err(e) => {
  722|      0|          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|  8.49k|  }
_RINvNtCs6HefjSGhhBw_3nom5multi10fold_many0RecNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNvNvNtBL_6parser21member_name_shorthand9name_charNCB1I_0NvMs_NtBL_3strNtB2F_17JsonStringBuilder3newB2O_EBL_:
  689|  12.3k|pub fn fold_many0<I, O, E, F, G, H, R>(
  690|  12.3k|  mut f: F,
  691|  12.3k|  mut init: H,
  692|  12.3k|  mut g: G,
  693|  12.3k|) -> impl FnMut(I) -> IResult<I, R, E>
  694|  12.3k|where
  695|  12.3k|  I: Clone + InputLength,
  696|  12.3k|  F: Parser<I, O, E>,
  697|  12.3k|  G: FnMut(R, O) -> R,
  698|  12.3k|  H: FnMut() -> R,
  699|  12.3k|  E: ParseError<I>,
  700|  12.3k|{
  701|       |  move |i: I| {
  702|       |    let mut res = init();
  703|       |    let mut input = i;
  704|       |
  705|       |    loop {
  706|       |      let i_ = input.clone();
  707|       |      let len = input.input_len();
  708|       |      match f.parse(i_) {
  709|       |        Ok((i, o)) => {
  710|       |          // infinite loop check: the parser must always consume
  711|       |          if i.input_len() == len {
  712|       |            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|       |          }
  714|       |
  715|       |          res = g(res, o);
  716|       |          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|       |          return Ok((input, res));
  720|       |        }
  721|       |        Err(e) => {
  722|       |          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|       |  }
  727|  12.3k|}

_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str17JsonStringBuilderNtNtBN_5error18InternalParseErrorNCINvNtB6_10combinator4peekBG_cB1F_NvNvNtBN_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BG_cB1F_NvB2N_9name_charNCB2N_0NvMs_BL_BJ_3newBJ_E0E0BN_:
   71|  12.3k|  move |input: I| {
   72|  12.3k|    let (input, _) = first.parse(input)?;
   73|  8.49k|    second.parse(input)
   74|  12.3k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3o_EE0E0INvB3t_6digit1BE_B1n_EEB1r_:
   63|     10|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|     10|  mut first: F,
   65|     10|  mut second: G,
   66|     10|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|     10|where
   68|     10|  F: Parser<I, O1, E>,
   69|     10|  G: Parser<I, O2, E>,
   70|     10|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|     10|}
_RNCNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB35_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  7.56k|    second.parse(input).map(|(i, _)| (i, o1))
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1q_E0NCINvNtB6_10combinator3cutBG_BJ_B1q_NCINvNtB6_6branch3altBG_BJ_B1q_TNCINvB2L_3mapBG_NtBL_8SelectorBJ_B1q_NvNtBL_6parser17wildcard_selectorNvMst_BL_BJ_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBJ_E0EE0E0E0BL_:
   71|  17.4k|  move |input: I| {
   72|  17.4k|    let (input, _) = first.parse(input)?;
   73|  9.49k|    second.parse(input)
   74|  17.4k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|  70.8k|  move |input: I| {
   72|  70.8k|    let (input, _) = first.parse(input)?;
   73|  5.15k|    second.parse(input)
   74|  70.8k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB33_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  26.3k|  move |input: I| {
  106|  26.3k|    let (input, o1) = first.parse(input)?;
  107|  25.5k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  26.3k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBD_INtNtCslATUeuPuGvJ_4core6option6OptionBD_EBJ_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2w_4charBD_B1t_E0B2t_E0E0NCIB3e_BD_BD_B1t_NCIB3O_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3O_BD_IBK_cEBD_B1t_NCIB3e_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4d_B4d_EE0E0B2t_E0E0E0EE0B1x_:
  278|     10|  move |i: I| l.parse(i)
_RNvXs1_NtCs6HefjSGhhBw_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2e_B19_B19_B1b_NCIB2Q_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2Q_B19_INtNtCslATUeuPuGvJ_4core6option6OptioncEB19_B1b_NCIB2e_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3h_B3h_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5v_B19_EB7J_EB1b_E5parseB1f_:
  226|     10|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|     10|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|     10|      }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_BE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4t_EE0E0INvB4y_6digit1BE_BM_EE0EBQ_:
   63|     10|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|     10|  mut first: F,
   65|     10|  mut second: G,
   66|     10|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|     10|where
   68|     10|  F: Parser<I, O1, E>,
   69|     10|  G: Parser<I, O2, E>,
   70|     10|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|     10|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|     10|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|     10|  mut first: F,
   65|     10|  mut second: G,
   66|     10|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|     10|where
   68|     10|  F: Parser<I, O1, E>,
   69|     10|  G: Parser<I, O2, E>,
   70|     10|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|     10|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|  55.3k|  move |input: I| {
   72|  55.3k|    let (input, _) = first.parse(input)?;
   73|  7.45k|    second.parse(input)
   74|  55.3k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNCNvNtBL_6parser18descendant_segment0NCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3O_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBJ_E0EE0E0EBL_:
   63|  31.4k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  31.4k|  mut first: F,
   65|  31.4k|  mut second: G,
   66|  31.4k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  31.4k|where
   68|  31.4k|  F: Parser<I, O1, E>,
   69|  31.4k|  G: Parser<I, O2, E>,
   70|  31.4k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  31.4k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2O_15filter_selector0B1t_E0E0BL_:
   71|  11.6k|  move |input: I| {
   72|  11.6k|    let (input, _) = first.parse(input)?;
   73|     10|    second.parse(input)
   74|  11.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|     10|  move |input: I| {
   72|     10|    let (input, _) = first.parse(input)?;
   73|      0|    second.parse(input)
   74|     10|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3M_3intB1p_E0E0E0B1t_:
   71|  6.27k|  move |input: I| {
   72|  6.27k|    let (input, _) = first.parse(input)?;
   73|  3.66k|    second.parse(input)
   74|  6.27k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2M_15filter_selector0B1r_E0EBJ_:
   63|  11.6k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  11.6k|  mut first: F,
   65|  11.6k|  mut second: G,
   66|  11.6k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  11.6k|where
   68|  11.6k|  F: Parser<I, O1, E>,
   69|  11.6k|  G: Parser<I, O2, E>,
   70|  11.6k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  11.6k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str17JsonStringBuilderNtNtBL_5error18InternalParseErrorNCINvNtB4_10combinator4peekBE_cB1D_NvNvNtBL_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BE_cB1D_NvB2L_9name_charNCB2L_0NvMs_BJ_BH_3newBH_E0EBL_:
   63|  12.3k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  12.3k|  mut first: F,
   65|  12.3k|  mut second: G,
   66|  12.3k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  12.3k|where
   68|  12.3k|  F: Parser<I, O1, E>,
   69|  12.3k|  G: Parser<I, O2, E>,
   70|  12.3k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  12.3k|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNCNvNtBN_6parser18descendant_segment0NCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3Q_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3Q_21member_name_shorthandNCINvB3Q_14failed_segmentBL_E0EE0E0E0BN_:
   71|  31.4k|  move |input: I| {
   72|  31.4k|    let (input, _) = first.parse(input)?;
   73|  5.54k|    second.parse(input)
   74|  31.4k|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCs2slMccTFvwW_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|  73.6k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  73.6k|  mut first: F,
   65|  73.6k|  mut second: G,
   66|  73.6k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  73.6k|where
   68|  73.6k|  F: Parser<I, O1, E>,
   69|  73.6k|  G: Parser<I, O2, E>,
   70|  73.6k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  73.6k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB31_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  26.3k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  26.3k|  mut first: F,
   99|  26.3k|  mut second: G,
  100|  26.3k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  26.3k|where
  102|  26.3k|  F: Parser<I, O1, E>,
  103|  26.3k|  G: Parser<I, O2, E>,
  104|  26.3k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  26.3k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|  55.3k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  55.3k|  mut first: F,
   65|  55.3k|  mut second: G,
   66|  55.3k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  55.3k|where
   68|  55.3k|  F: Parser<I, O1, E>,
   69|  55.3k|  G: Parser<I, O2, E>,
   70|  55.3k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  55.3k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCs2slMccTFvwW_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|  25.9k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  25.9k|  mut first: F,
   65|  25.9k|  mut second: G,
   66|  25.9k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  25.9k|where
   68|  25.9k|  F: Parser<I, O1, E>,
   69|  25.9k|  G: Parser<I, O2, E>,
   70|  25.9k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  25.9k|}
_RINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBB_INtNtCslATUeuPuGvJ_4core6option6OptionBB_EBH_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2u_4charBB_B1r_E0B2r_E0E0NCIB3c_BB_BB_B1r_NCIB3M_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3M_BB_IBI_cEBB_B1r_NCIB3c_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4b_B4b_EE0E0B2r_E0E0E0EEB1v_:
  275|     10|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|     10|  mut l: List,
  277|     10|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|     10|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3K_3intB1n_E0E0EB1r_:
   63|  6.27k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  6.27k|  mut first: F,
   65|  6.27k|  mut second: G,
   66|  6.27k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  6.27k|where
   68|  6.27k|  F: Parser<I, O1, E>,
   69|  6.27k|  G: Parser<I, O2, E>,
   70|  6.27k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  6.27k|}

_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs2slMccTFvwW_15rsonpath_syntax:
  740|  91.5k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar12is_dec_digitCs2slMccTFvwW_15rsonpath_syntax:
  253|   150k|  fn is_dec_digit(self) -> bool {
  254|   150k|    self.is_ascii_digit()
  255|   150k|  }
_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCs2slMccTFvwW_15rsonpath_syntax:
  386|   329k|  fn iter_elements(&self) -> Self::IterElem {
  387|   329k|    self.chars()
  388|   329k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar3lenCs2slMccTFvwW_15rsonpath_syntax:
  265|  19.9k|  fn len(self) -> usize {
  266|  19.9k|    self.len_utf8()
  267|  19.9k|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|  76.7k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|  76.7k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|  76.7k|
  742|  76.7k|    match pos {
  743|  64.4k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  12.2k|        if self.len() >= t.len() {
  746|  12.0k|          CompareResult::Ok
  747|       |        } else {
  748|    189|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|  76.7k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCs2slMccTFvwW_15rsonpath_syntax:
  424|  12.0k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  12.0k|    let (prefix, suffix) = self.split_at(count);
  426|  12.0k|    (suffix, prefix)
  427|  12.0k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCs2slMccTFvwW_15rsonpath_syntax:
  272|  58.1k|  fn as_char(self) -> char {
  273|  58.1k|    *self
  274|  58.1k|  }
_RINvXsj_NtCs6HefjSGhhBw_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCs2slMccTFvwW_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|  56.6k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|  56.6k|    &self,
  677|  56.6k|    predicate: P,
  678|  56.6k|    e: ErrorKind,
  679|  56.6k|  ) -> IResult<Self, Self, E>
  680|  56.6k|  where
  681|  56.6k|    P: Fn(Self::Item) -> bool,
  682|  56.6k|  {
  683|  56.6k|    match self.find(predicate) {
  684|  35.6k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  20.3k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|    540|        if self.is_empty() {
  689|    307|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|    233|            Ok((
  694|    233|              self.get_unchecked(self.len()..),
  695|    233|              self.get_unchecked(..self.len()),
  696|    233|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|  56.6k|  }
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCs2slMccTFvwW_15rsonpath_syntax:
   33|   108k|  fn input_len(&self) -> usize {
   34|   108k|    self.len()
   35|   108k|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|  76.7k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|  76.7k|    self.as_bytes().compare(t.as_bytes())
  841|  76.7k|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCs2slMccTFvwW_15rsonpath_syntax:
  241|   325k|  fn as_char(self) -> char {
  242|   325k|    self
  243|   325k|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|  76.7k|  fn as_bytes(&self) -> &[u8] {
   98|  76.7k|    (*self).as_bytes()
   99|  76.7k|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCs2slMccTFvwW_15rsonpath_syntax:
  296|  58.1k|  fn len(self) -> usize {
  297|  58.1k|    self.len_utf8()
  298|  58.1k|  }
_RNvXs23_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  20.6k|    fn slice(&self, range: $ty) -> Self {
 1014|  20.6k|      &self[range]
 1015|  20.6k|    }
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|  78.1k|    fn slice(&self, range: $ty) -> Self {
 1014|  78.1k|      &self[range]
 1015|  78.1k|    }
_RNvXs4_NtCs6HefjSGhhBw_3nom6traitsReNtB5_6Offset6offset:
   81|  20.6k|  fn offset(&self, second: &Self) -> usize {
   82|  20.6k|    let fst = self.as_ptr();
   83|  20.6k|    let snd = second.as_ptr();
   84|  20.6k|
   85|  20.6k|    snd as usize - fst as usize
   86|  20.6k|  }

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
   49|  2.08k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.08k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.08k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.08k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.08k|        // `SeqCst` operations on the slow path.
   54|  2.08k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.08k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
  963|  2.08k|        pub fn get(&self) -> Option<&T> {
  964|  2.08k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.08k|                None
  969|       |            }
  970|  2.08k|        }

_RNvMNtCs2slMccTFvwW_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3newB4_:
   32|  2.08k|    pub(crate) fn new() -> Self {
   33|  2.08k|        Self { syntax_errors: vec![] }
   34|  2.08k|    }
_RNvXs2_NtCs2slMccTFvwW_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE6append:
  425|  82.8k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  426|  82.8k|        match other {
  427|  82.8k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  428|      0|            _ => other,
  429|       |        }
  430|  82.8k|    }
_RNvXsm_NtCs2slMccTFvwW_15rsonpath_syntax5errorNtB5_15SyntaxErrorKindNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  107|  11.8k|#[derive(Debug, PartialEq, Eq, Clone)]
_RNvMs0_NtCs2slMccTFvwW_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  151|   100k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  152|   100k|        Self { kind, rev_idx, len }
  153|   100k|    }
_RNvXs2_NtCs2slMccTFvwW_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  421|   297k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  422|   297k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  423|   297k|    }
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8is_emptyB4_:
   44|  2.08k|    pub(crate) fn is_empty(&self) -> bool {
   45|  2.08k|        self.syntax_errors.is_empty()
   46|  2.08k|    }
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8add_many:
   40|  8.93k|    pub(crate) fn add_many(&mut self, mut syntax_errors: Vec<SyntaxError>) {
   41|  8.93k|        self.syntax_errors.append(&mut syntax_errors)
   42|  8.93k|    }
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3add:
   36|  14.3k|    pub(crate) fn add(&mut self, syntax_error: SyntaxError) {
   37|  14.3k|        self.syntax_errors.push(syntax_error)
   38|  14.3k|    }
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder5buildB4_:
   48|  2.04k|    pub(crate) fn build(self, str: String) -> ParseError {
   49|  2.04k|        ParseError {
   50|  2.04k|            input: str,
   51|  2.04k|            syntax_errors: self.syntax_errors,
   52|  2.04k|        }
   53|  2.04k|    }

_RNvXs0_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  282|  2.08k|    fn default() -> Self {
  283|  2.08k|        Self {
  284|  2.08k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  285|  2.08k|            relaxed_whitespace: false,
  286|  2.08k|        }
  287|  2.08k|    }
_RNvMs2_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_6Parser5parseCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
  357|  2.08k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  358|  2.08k|        crate::parser::parse_with_options(str, &self.options)
  359|  2.08k|    }
_RNvCs2slMccTFvwW_15rsonpath_syntax5parseCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
  333|  2.08k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  334|  2.08k|    Parser::default().parse(str)
  335|  2.08k|}
_RNvXsO_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCsiIHC6xBD6O_26query_fuzz_arbitrary_bytes:
  181|  2.08k|#[derive(Debug, Clone, Default)]
_RNvXsd_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  577|  7.56k|    fn default() -> Self {
  578|  7.56k|        Self {
  579|  7.56k|            start: Index::FromStart(0.into()),
  580|  7.56k|            end: None,
  581|  7.56k|            step: Step::Forward(1.into()),
  582|  7.56k|        }
  583|  7.56k|    }
_RNvMst_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_9Selectors3one:
  931|  9.73k|    pub fn one(selector: Selector) -> Self {
  932|  9.73k|        Self { inner: vec![selector] }
  933|  9.73k|    }
_RNvMst_Cs2slMccTFvwW_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  946|    923|    pub fn many(vec: Vec<Selector>) -> Self {
  947|    923|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  948|    923|        Self { inner: vec }
  949|    923|    }
_RNvMs_Cs2slMccTFvwW_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  275|  2.08k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  276|  2.08k|        self.relaxed_whitespace
  277|  2.08k|    }
_RNvMs_Cs2slMccTFvwW_15rsonpath_syntaxNtB4_13ParserOptions29is_leading_whitespace_allowedB4_:
  271|     78|    fn is_leading_whitespace_allowed(&self) -> bool {
  272|     78|        self.relaxed_whitespace
  273|     78|    }

_RNvXsc_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  603|  11.2k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  604|  11.2k|        if value > JSON_INT_UPPER_LIMIT {
  605|    684|            Err(JsonIntOverflowError::int_pos_overflow(value))
  606|  10.5k|        } else if value < JSON_INT_LOWER_LIMIT {
  607|    507|            Err(JsonIntOverflowError::int_neg_overflow(value))
  608|       |        } else {
  609|  10.0k|            Ok(Self::new(value))
  610|       |        }
  611|  11.2k|    }
_RNvXsi_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  662|  12.0k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  663|  12.0k|        match i64::from_str(s) {
  664|  11.2k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  665|    801|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  666|       |        }
  667|  12.0k|    }
_RNvMs7_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  2.28k|    pub const fn abs(&self) -> JsonUInt {
  363|  2.28k|        JsonUInt(self.0.unsigned_abs())
  364|  2.28k|    }
_RNvMs8_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_8JsonUInt3newB7_:
  400|  22.8k|    const fn new(index: u64) -> Self {
  401|  22.8k|        Self(index)
  402|  22.8k|    }
_RNvXsl_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  699|  15.1k|    fn from(value: u32) -> Self {
  700|  15.1k|        Self::new(u64::from(value))
  701|  15.1k|    }
_RNCNvXsi_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB7_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_str0B9_:
  664|  1.19k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvXso_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  728|  10.0k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  729|  10.0k|        if value.0 < 0 {
  730|  2.28k|            Err(JsonIntOverflowError::negative_uint(value.0))
  731|       |        } else {
  732|  7.75k|            Ok(Self::new(value.0 as u64))
  733|       |        }
  734|  10.0k|    }
_RNvMs7_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_7JsonInt3newB7_:
  286|  10.0k|    const fn new(index: i64) -> Self {
  287|  10.0k|        Self(index)
  288|  10.0k|    }
_RNvXsw_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  816|  2.28k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  817|  2.28k|        Self::try_from(value.0)
  818|  2.28k|    }
_RNvXsu_NtCs2slMccTFvwW_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  788|  2.28k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  789|  2.28k|        if value > JSON_UINT_UPPER_LIMIT {
  790|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  791|  2.28k|        } else if let Some(x) = NonZeroU64::new(value) {
  792|  2.28k|            Ok(Self(x))
  793|       |        } else {
  794|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  795|       |        }
  796|  2.28k|    }

_RNvMNtNtCs2slMccTFvwW_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_neg_overflowB6_:
   51|    507|    pub(crate) fn int_neg_overflow(src: i64) -> Self {
   52|    507|        Self {
   53|    507|            kind: JsonIntOverflowKind::IntNeg(src),
   54|    507|        }
   55|    507|    }
_RNvMs_NtNtCs2slMccTFvwW_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
  106|  1.19k|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
  107|  1.19k|        Self {
  108|  1.19k|            kind: match err.kind {
  109|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
  110|    684|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
  111|       |                }
  112|    507|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  113|      0|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
  114|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
  115|      0|                JsonIntOverflowKind::NonZeroUIntZero => JsonIntParseErrorKind::NonZeroUIntZero(src.to_string()),
  116|       |                JsonIntOverflowKind::Fractional(_)
  117|       |                | JsonIntOverflowKind::FloatPos(_)
  118|      0|                | JsonIntOverflowKind::FloatNeg(_) => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  119|       |            },
  120|       |        }
  121|  1.19k|    }
_RNvMNtNtCs2slMccTFvwW_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_pos_overflowB6_:
   39|    684|    pub(crate) fn int_pos_overflow(src: i64) -> Self {
   40|    684|        Self {
   41|    684|            kind: JsonIntOverflowKind::IntPos(src),
   42|    684|        }
   43|    684|    }
_RNvMs_NtNtCs2slMccTFvwW_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError15int_parse_error:
   95|    801|    pub(crate) fn int_parse_error(src: &str, err: &IntErrorKind) -> Self {
   96|    801|        Self {
   97|    801|            kind: match err {
   98|    350|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::IntPosOverflow(src.to_string()),
   99|    451|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  100|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonInt value.
  101|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  102|       |            },
  103|       |        }
  104|    801|    }
_RNvMNtNtCs2slMccTFvwW_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   63|  2.28k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  2.28k|        Self {
   65|  2.28k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  2.28k|        }
   67|  2.28k|    }

_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21parse_json_path_query:
   66|  2.08k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  2.08k|    let original_input = q;
   68|  2.08k|    let mut parse_error = ParseErrorBuilder::new();
   69|  2.08k|    let mut segments = vec![];
   70|  2.08k|    let q = skip_whitespace(q);
   71|  2.08k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  2.08k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|     78|        parse_error.add(SyntaxError::new(
   74|     78|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|     78|            original_input.len(),
   76|     78|            leading_whitespace_len,
   77|     78|        ));
   78|  2.00k|    }
   79|  2.08k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|    137|        Ok((q, _)) => skip_whitespace(q),
   81|  1.94k|        Err(e) => {
   82|  1.94k|            parse_error.add(SyntaxError::new(
   83|  1.94k|                SyntaxErrorKind::MissingRootIdentifier,
   84|  1.94k|                e.input.len(),
   85|  1.94k|                q.chars().next().map_or(1, char::len_utf8),
   86|  1.94k|            ));
   87|  1.94k|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  2.08k|    let mut q = q;
   92|  33.5k|    while !q.is_empty() {
   93|  31.4k|        q = match segment(q, ctx).finish() {
   94|  10.6k|            Ok((rest, segment)) => {
   95|  10.6k|                segments.push(segment);
   96|  10.6k|                rest
   97|       |            }
   98|  11.8k|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|  11.8k|                parse_error.add(err);
  100|  11.8k|                rest
  101|       |            }
  102|  8.93k|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|  8.93k|                parse_error.add_many(errs);
  104|  8.93k|                rest
  105|       |            }
  106|      0|            Err(InternalParseError::NomError(err)) => panic!(
  107|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  108|      0|            ),
  109|       |        };
  110|  31.4k|        q = skip_whitespace(q);
  111|       |    }
  112|       |
  113|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  114|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  115|  2.08k|    if !ctx.options.is_trailing_whitespace_allowed() {
  116|  2.08k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  117|  2.08k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  118|  2.08k|        if trailing_whitespace_len > 0 {
  119|    451|            parse_error.add(SyntaxError::new(
  120|    451|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  121|    451|                trailing_whitespace_len,
  122|    451|                trailing_whitespace_len,
  123|    451|            ));
  124|  1.63k|        }
  125|      0|    }
  126|       |
  127|  2.08k|    if parse_error.is_empty() {
  128|     43|        Ok(JsonPathQuery { segments })
  129|       |    } else {
  130|  2.04k|        Err(parse_error.build(original_input.to_owned()))
  131|       |    }
  132|  2.08k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser8selector:
  254|  36.7k|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  255|  36.7k|    alt((
  256|  36.7k|        ignore_whitespace(name_selector),
  257|  36.7k|        ignore_whitespace(wildcard_selector),
  258|  36.7k|        ignore_whitespace(slice_selector),
  259|  36.7k|        ignore_whitespace(index_selector),
  260|  36.7k|        ignore_whitespace(|q| filter_selector(q, ctx)),
  261|  36.7k|        failed_selector,
  262|  36.7k|    ))(q)
  263|  36.7k|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser12logical_expr0B5_:
  404|     10|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  11.6k|    move |q: &'a str| {
   28|  11.6k|        inner
   29|  11.6k|            .parse(skip_whitespace(q))
   30|  11.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  11.6k|    }
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  5.22k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser4failNtB4_7SegmentEB4_:
  886|  7.98k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  887|  7.98k|    Err(Err::Failure(InternalParseError::SyntaxError(
  888|  7.98k|        SyntaxError::new(kind, rev_idx, err_len),
  889|  7.98k|        rest,
  890|  7.98k|    )))
  891|  7.98k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB8_9SelectorsE00B8_:
  180|  9.37k|            .trim_start_matches(|x| x != '.' && x != '[');
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser24failed_filter_expressionNtB4_11LogicalExprEB4_:
  614|     10|fn failed_filter_expression<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  615|       |    move |q: &str| {
  616|       |        // We want to close the filter, so just try to find the next ']' or ','
  617|       |        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  618|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  619|       |    }
  620|     10|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB6_7SegmentE0B6_:
  177|  7.98k|    move |q: &str| {
  178|  7.98k|        let rest = skip_one(q)
  179|  7.98k|            .trim_start_matches('.')
  180|  7.98k|            .trim_start_matches(|x| x != '.' && x != '[');
  181|  7.98k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  182|  7.98k|    }
_RNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_first:
  243|  32.3k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  244|  32.3k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  245|  32.3k|            q,
  246|  32.3k|        )
  247|  32.3k|    }
_RNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser12logical_expr12parse_single:
  432|     10|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  433|     10|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  434|     10|        let negated = opt_neg.is_some();
  435|     10|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  436|      0|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  437|      0|            let rest = skip_whitespace(rest);
  438|      0|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  439|      0|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  440|       |            };
  441|      0|            let selector = if negated {
  442|      0|                LogicalExpr::Not(Box::new(nested_filter))
  443|       |            } else {
  444|      0|                nested_filter
  445|       |            };
  446|      0|            Ok((rest, selector))
  447|     10|        } else if let Ok((rest, lhs)) = literal(rest) {
  448|      0|            let rest = skip_whitespace(rest);
  449|      0|            let Ok((rest, comp_op)) = comparison_operator(rest) else {
  450|      0|                if peek(char::<_, ()>(']'))(rest).is_ok() {
  451|      0|                    return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  452|       |                } else {
  453|      0|                    return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  454|       |                };
  455|       |            };
  456|      0|            let rest = skip_whitespace(rest);
  457|      0|            let Ok((rest, rhs)) = comparable(rest, ctx) else {
  458|      0|                if peek(char::<_, ()>(']'))(rest).is_ok() {
  459|      0|                    return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  460|       |                } else {
  461|      0|                    return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  462|       |                };
  463|       |            };
  464|      0|            if negated {
  465|      0|                return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  466|       |            } else {
  467|      0|                Ok((
  468|      0|                    rest,
  469|      0|                    LogicalExpr::Comparison(ComparisonExpr {
  470|      0|                        lhs: Comparable::Literal(lhs),
  471|      0|                        op: comp_op,
  472|      0|                        rhs,
  473|      0|                    }),
  474|      0|                ))
  475|       |            }
  476|     10|        } else if let Ok((rest, query)) = filter_query(rest, ctx) {
  477|      0|            let query_len = q.len() - rest.len();
  478|      0|            let rest = skip_whitespace(rest);
  479|      0|            if let Ok((rest, comp_op)) = comparison_operator(rest) {
  480|      0|                let rest = skip_whitespace(rest);
  481|      0|                let Ok((rest, rhs)) = comparable(rest, ctx) else {
  482|      0|                    return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  483|       |                };
  484|      0|                let Some(singular_query) = query.try_to_comparable() else {
  485|      0|                    return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  486|       |                };
  487|      0|                if negated {
  488|      0|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|      0|                    Ok((
  491|      0|                        rest,
  492|      0|                        LogicalExpr::Comparison(ComparisonExpr {
  493|      0|                            lhs: singular_query,
  494|      0|                            rhs,
  495|      0|                            op: comp_op,
  496|      0|                        }),
  497|      0|                    ))
  498|       |                }
  499|       |            } else {
  500|      0|                let test_expr = LogicalExpr::Test(query.into_test_query());
  501|      0|                let expr = if negated {
  502|      0|                    LogicalExpr::Not(Box::new(test_expr))
  503|       |                } else {
  504|      0|                    test_expr
  505|       |                };
  506|      0|                Ok((rest, expr))
  507|       |            }
  508|       |        } else {
  509|     10|            failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest)
  510|       |        }
  511|     10|    }
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand0B5_:
  235|  11.4k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  236|  11.4k|                acc.push(x);
  237|  11.4k|                acc
  238|  11.4k|            }),
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|     10|    fn increase_nesting(&self) -> Option<Self> {
   52|     10|        match self.options.recursion_limit {
   53|     10|            Some(limit) if limit <= self.current_nesting => None,
   54|     10|            _ => Some(Self {
   55|     10|                options: self.options,
   56|     10|                current_nesting: self.current_nesting + 1,
   57|     10|            }),
   58|       |        }
   59|     10|    }
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  176|  57.3k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  177|       |    move |q: &str| {
  178|       |        let rest = skip_one(q)
  179|       |            .trim_start_matches('.')
  180|       |            .trim_start_matches(|x| x != '.' && x != '[');
  181|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  182|       |    }
  183|  57.3k|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1D_cB11_NtNtB6_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB1D_B2w_E0NCINvNtB1N_10combinator3optB1D_B1D_B2w_NCIB2_B1D_NvB4_3intB2w_E0E0E0B2w_E0B6_:
   27|  6.27k|    move |q: &'a str| {
   28|  6.27k|        inner
   29|  6.27k|            .parse(skip_whitespace(q))
   30|  6.27k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  6.27k|    }
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15failed_selector0B5_:
  349|  49.6k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string0B5_:
  719|  5.15k|    move |q: &'a str| {
  720|  5.15k|        let mut builder = JsonStringBuilder::new();
  721|  5.15k|        let mut syntax_errors = vec![];
  722|  5.15k|        let mut stream = q.char_indices().peekable();
  723|       |
  724|  52.1k|        while let Some((c_idx, c)) = stream.next() {
  725|  51.6k|            match (c, mode) {
  726|       |                ('\\', _) => {
  727|  10.5k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  728|  3.98k|                        Ok(r) => {
  729|  3.98k|                            builder.push(r);
  730|  3.98k|                        }
  731|  6.59k|                        Err(err) => {
  732|  6.59k|                            syntax_errors.push(err);
  733|  6.59k|                        }
  734|       |                    };
  735|       |                }
  736|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  737|  4.68k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  738|  4.68k|                    return if syntax_errors.is_empty() {
  739|  2.59k|                        Ok((rest, builder.finish()))
  740|       |                    } else {
  741|  2.09k|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  742|       |                    };
  743|       |                }
  744|  35.5k|                (..='\u{001F}', _) => {
  745|  9.25k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  746|  9.25k|                    syntax_errors.push(SyntaxError::new(
  747|  9.25k|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  748|  9.25k|                        rest.len() + 1,
  749|  9.25k|                        1,
  750|  9.25k|                    ))
  751|       |                }
  752|  27.1k|                _ => {
  753|  27.1k|                    builder.push(c);
  754|  27.1k|                }
  755|       |            }
  756|       |        }
  757|       |
  758|    466|        let err_kind = if mode == StringParseMode::SingleQuoted {
  759|    230|            SyntaxErrorKind::MissingClosingSingleQuote
  760|       |        } else {
  761|    236|            SyntaxErrorKind::MissingClosingDoubleQuote
  762|       |        };
  763|    466|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  764|    466|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  765|       |
  766|       |        fn read_escape_sequence<I>(
  767|       |            q_len: usize,
  768|       |            c_idx: usize,
  769|       |            chars: &mut Peekable<I>,
  770|       |            mode: StringParseMode,
  771|       |        ) -> std::result::Result<char, SyntaxError>
  772|       |        where
  773|       |            I: Iterator<Item = (usize, char)>,
  774|       |        {
  775|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  776|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  777|       |                q_len - c_idx,
  778|       |                1,
  779|       |            ))?;
  780|       |            match ctrl {
  781|       |                'u' => {
  782|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  783|       |                    match raw_c {
  784|       |                        // High surrogate, start of a UTF-16 pair.
  785|       |                        0xD800..=0xDBFF => {
  786|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  787|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  788|       |                                q_len - c_idx,
  789|       |                                6,
  790|       |                            ))?;
  791|       |                            if next != '\\' {
  792|       |                                return Err(SyntaxError::new(
  793|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  794|       |                                    q_len - c_idx,
  795|       |                                    6,
  796|       |                                ));
  797|       |                            }
  798|       |                            chars.next();
  799|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  800|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  801|       |                                q_len - c_idx,
  802|       |                                6,
  803|       |                            ))?;
  804|       |                            if next != 'u' {
  805|       |                                return Err(SyntaxError::new(
  806|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  807|       |                                    q_len - c_idx,
  808|       |                                    6,
  809|       |                                ));
  810|       |                            }
  811|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  812|       |                            match low {
  813|       |                                0xDC00..=0xDFFF => {
  814|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  815|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  816|       |                                }
  817|       |                                _ => Err(SyntaxError::new(
  818|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  819|       |                                    q_len - c_idx,
  820|       |                                    6,
  821|       |                                )),
  822|       |                            }
  823|       |                        }
  824|       |                        // Low surrogate, invalid escape sequence.
  825|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  826|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  827|       |                            q_len - c_idx,
  828|       |                            6,
  829|       |                        )),
  830|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  831|       |                    }
  832|       |                }
  833|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  834|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  835|       |                'n' => Ok('\n'),       // U+000A LF line feed
  836|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  837|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  838|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  839|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  840|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  841|       |                _ => Err(SyntaxError::new(
  842|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  843|       |                    q_len - c_idx,
  844|       |                    2,
  845|       |                )), // no other escape sequences are allowed
  846|       |            }
  847|       |        }
  848|       |
  849|       |        fn read_hexadecimal_escape<I>(
  850|       |            q_len: usize,
  851|       |            c_idx: usize,
  852|       |            chars: &mut Peekable<I>,
  853|       |        ) -> std::result::Result<u32, SyntaxError>
  854|       |        where
  855|       |            I: Iterator<Item = (usize, char)>,
  856|       |        {
  857|       |            let mut x = 0;
  858|       |            for i in 0..4 {
  859|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  860|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  861|       |                    q_len - c_idx + 1,
  862|       |                    2 + i,
  863|       |                ))?;
  864|       |                let v = match c {
  865|       |                    '0'..='9' => c as u32 - '0' as u32,
  866|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  867|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  868|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  869|       |                    _ => {
  870|       |                        return Err(SyntaxError::new(
  871|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  872|       |                            q_len - c_idx - i - 1,
  873|       |                            1,
  874|       |                        ))
  875|       |                    }
  876|       |                };
  877|       |                x <<= 4;
  878|       |                x += v;
  879|       |                chars.next();
  880|       |            }
  881|       |            Ok(x)
  882|       |        }
  883|  5.15k|    }
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  2.59k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB8_7SegmentE00B8_:
  180|  18.8k|            .trim_start_matches(|x| x != '.' && x != '[');
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  11.6k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  11.6k|where
   25|  11.6k|    F: nom::Parser<&'a str, T, E>,
   26|  11.6k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  11.6k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser12filter_query:
  541|     10|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  542|     10|    let Some(ctx) = ctx.increase_nesting() else {
  543|      0|        return fail(
  544|      0|            SyntaxErrorKind::QueryNestingLimitExceeded(ctx.options.recursion_limit.expect("limit exists if exceeded")),
  545|      0|            q.len(),
  546|      0|            q.len(),
  547|      0|            "",
  548|      0|        );
  549|       |    };
  550|       |
  551|     10|    let (rest, root_type) = alt((
  552|     10|        value(RootSelectorType::Absolute, char('$')),
  553|     10|        value(RootSelectorType::Relative, char('@')),
  554|     10|    ))(q)?;
  555|      0|    let rest = skip_whitespace(rest);
  556|      0|    let mut segments = vec![];
  557|      0|    let mut syntax_errors = vec![];
  558|      0|
  559|      0|    let mut q = rest;
  560|       |
  561|       |    loop {
  562|      0|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  563|      0|            break;
  564|      0|        }
  565|      0|
  566|      0|        q = match alt((
  567|      0|            |q| descendant_segment(q, ctx),
  568|      0|            |q| child_segment(q, ctx),
  569|      0|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  570|      0|        ))(q)
  571|      0|        .finish()
  572|       |        {
  573|      0|            Ok((rest, segment)) => {
  574|      0|                segments.push(segment);
  575|      0|                rest
  576|       |            }
  577|      0|            Err(InternalParseError::SyntaxError(err, rest)) => {
  578|      0|                syntax_errors.push(err);
  579|      0|                rest
  580|       |            }
  581|      0|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  582|      0|                syntax_errors.append(&mut errs);
  583|      0|                rest
  584|       |            }
  585|      0|            Err(InternalParseError::NomError(err)) => panic!(
  586|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  587|      0|            ),
  588|       |        };
  589|      0|        q = skip_whitespace(q);
  590|       |    }
  591|       |
  592|      0|    if !syntax_errors.is_empty() {
  593|      0|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  594|       |    } else {
  595|      0|        let query = JsonPathQuery { segments };
  596|      0|        let query = match root_type {
  597|      0|            RootSelectorType::Relative => FilterQuery::Relative(query),
  598|      0|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  599|       |        };
  600|      0|        Ok((q, query))
  601|       |    }
  602|     10|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|  10.9k|    move |q: &'a str| {
   28|  10.9k|        inner
   29|  10.9k|            .parse(skip_whitespace(q))
   30|  10.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  10.9k|    }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15skip_whitespace:
   13|   279k|fn skip_whitespace(q: &str) -> &str {
   14|   279k|    q.trim_start_matches(WHITESPACE)
   15|   279k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser3int:
  702|  55.3k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  703|  55.3k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  704|       |
  705|  20.6k|    if int != "0" {
  706|  19.4k|        if int == "-0" {
  707|    972|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  708|  18.4k|        }
  709|  18.4k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  710|  18.4k|        if without_minus.strip_prefix(['0']).is_some() {
  711|  1.23k|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  712|  17.2k|        }
  713|  1.20k|    }
  714|       |
  715|  18.4k|    Ok((rest, int))
  716|  55.3k|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser8selector0B5_:
  260|  11.6k|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1R_EB4_:
   23|  26.3k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  26.3k|where
   25|  26.3k|    F: nom::Parser<&'a str, T, E>,
   26|  26.3k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  26.3k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  5.27k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser24failed_filter_expressionNtB6_11LogicalExprE0B6_:
  615|     10|    move |q: &str| {
  616|     10|        // We want to close the filter, so just try to find the next ']' or ','
  617|     10|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  618|     10|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  619|     10|    }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser18parse_with_options:
   62|  2.08k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  2.08k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  2.08k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser4failNtB4_9SelectorsEB4_:
  886|  3.87k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  887|  3.87k|    Err(Err::Failure(InternalParseError::SyntaxError(
  888|  3.87k|        SyntaxError::new(kind, rev_idx, err_len),
  889|  3.87k|        rest,
  890|  3.87k|    )))
  891|  3.87k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  36.7k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  36.7k|where
   25|  36.7k|    F: nom::Parser<&'a str, T, E>,
   26|  36.7k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  36.7k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser18descendant_segment:
  143|  31.4k|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  144|  31.4k|    map(
  145|  31.4k|        preceded(
  146|  31.4k|            tag(".."),
  147|  31.4k|            cut(alt((
  148|  31.4k|                |q| bracketed_selection(q, ctx),
  149|  31.4k|                map(wildcard_selector, Selectors::one),
  150|  31.4k|                member_name_shorthand,
  151|  31.4k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  152|  31.4k|            ))),
  153|  31.4k|        ),
  154|  31.4k|        Segment::Descendant,
  155|  31.4k|    )(q)
  156|  31.4k|}
_RNvXs7_NtCs2slMccTFvwW_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  265|  1.65k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  36.7k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  36.7k|where
   25|  36.7k|    F: nom::Parser<&'a str, T, E>,
   26|  36.7k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  36.7k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  3.68k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21parse_directional_int:
  689|  12.0k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  690|  12.0k|    match JsonInt::from_str(int_str) {
  691|  10.0k|        Ok(int) => {
  692|  10.0k|            if let Ok(uint) = JsonUInt::try_from(int) {
  693|  7.75k|                DirectionalInt::Plus(uint)
  694|       |            } else {
  695|  2.28k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  696|       |            }
  697|       |        }
  698|  1.99k|        Err(err) => DirectionalInt::Error(err),
  699|       |    }
  700|  12.0k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|     10|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|     10|where
   25|     10|    F: nom::Parser<&'a str, T, E>,
   26|     10|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|     10|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1T_E0B6_:
   27|  25.5k|    move |q: &'a str| {
   28|  25.5k|        inner
   29|  25.5k|            .parse(skip_whitespace(q))
   30|  25.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  25.5k|    }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14string_literal:
  275|  36.8k|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  276|  36.8k|    alt((
  277|  36.8k|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  278|  36.8k|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  279|  36.8k|    ))(q)
  280|  36.8k|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|     10|    move |q: &'a str| {
   28|     10|        inner
   29|     10|            .parse(skip_whitespace(q))
   30|     10|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|     10|    }
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13child_segment0B5_:
  161|  25.9k|            |q| bracketed_selection(q, ctx),
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1B_cBZ_NtNtB4_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB1B_B2t_E0NCINvNtB1L_10combinator3optB1B_B1B_B2t_NCIB0_B1B_NvB2_3intB2t_E0E0E0B2t_EB4_:
   23|  6.27k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  6.27k|where
   25|  6.27k|    F: nom::Parser<&'a str, T, E>,
   26|  6.27k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  6.27k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15failed_selector:
  348|  11.6k|fn failed_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  349|  11.6k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
  350|  11.6k|    let error_len = q.len() - rest.len();
  351|  11.6k|    let error_span = &q[..error_len];
  352|  11.6k|
  353|  11.6k|    Err(Err::Failure(InternalParseError::SyntaxError(
  354|  11.6k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
  355|  2.22k|            SyntaxError::new(SyntaxErrorKind::EmptySelector, q.len() + 1, error_len + 2)
  356|       |        } else {
  357|  9.39k|            let meaningful_span = skip_whitespace(error_span);
  358|  9.39k|            let skipped_whitespace_len = error_span.len() - meaningful_span.len();
  359|  9.39k|            let trimmed_span = meaningful_span.trim_end_matches(WHITESPACE);
  360|  9.39k|
  361|  9.39k|            SyntaxError::new(
  362|  9.39k|                SyntaxErrorKind::InvalidSelector,
  363|  9.39k|                q.len() - skipped_whitespace_len,
  364|  9.39k|                trimmed_span.len(),
  365|  9.39k|            )
  366|       |        },
  367|  11.6k|        rest,
  368|  11.6k|    )))
  369|  11.6k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1F_cB13_NtNtB8_5error18InternalParseErrorNCINvNtNtB1P_9character8complete4charB1F_B2y_E0NCINvNtB1P_10combinator3optB1F_B1F_B2y_NCIB4_B1F_NvB6_3intB2y_E0E0E0B2y_E00B8_:
   30|  3.06k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  849|  5.52k|        fn read_hexadecimal_escape<I>(
  850|  5.52k|            q_len: usize,
  851|  5.52k|            c_idx: usize,
  852|  5.52k|            chars: &mut Peekable<I>,
  853|  5.52k|        ) -> std::result::Result<u32, SyntaxError>
  854|  5.52k|        where
  855|  5.52k|            I: Iterator<Item = (usize, char)>,
  856|  5.52k|        {
  857|  5.52k|            let mut x = 0;
  858|  21.0k|            for i in 0..4 {
  859|  17.4k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  860|  17.4k|                    SyntaxErrorKind::InvalidEscapeSequence,
  861|  17.4k|                    q_len - c_idx + 1,
  862|  17.4k|                    2 + i,
  863|  17.4k|                ))?;
  864|  17.4k|                let v = match c {
  865|  17.3k|                    '0'..='9' => c as u32 - '0' as u32,
  866|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  867|  6.26k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  868|  2.94k|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  869|       |                    _ => {
  870|  1.96k|                        return Err(SyntaxError::new(
  871|  1.96k|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  872|  1.96k|                            q_len - c_idx - i - 1,
  873|  1.96k|                            1,
  874|  1.96k|                        ))
  875|       |                    }
  876|       |                };
  877|  15.5k|                x <<= 4;
  878|  15.5k|                x += v;
  879|  15.5k|                chars.next();
  880|       |            }
  881|  3.53k|            Ok(x)
  882|  5.52k|        }
_RNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char:
  249|  19.9k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  250|  19.9k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  251|  19.9k|    }
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|     10|    move |q: &'a str| {
   28|     10|        inner
   29|     10|            .parse(skip_whitespace(q))
   30|     10|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|     10|    }
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  176|  31.4k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  177|       |    move |q: &str| {
  178|       |        let rest = skip_one(q)
  179|       |            .trim_start_matches('.')
  180|       |            .trim_start_matches(|x| x != '.' && x != '[');
  181|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  182|       |    }
  183|  31.4k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14index_selector:
  334|  18.0k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  335|       |    // This has to be called after the slice selector.
  336|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  337|  18.0k|    let (rest, int) = int(q)?;
  338|  6.37k|    match parse_directional_int(int) {
  339|  3.96k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  340|  1.35k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  341|  1.05k|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  342|  1.05k|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  343|  1.05k|            rest,
  344|  1.05k|        ))),
  345|       |    }
  346|  18.0k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  5.32k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser4failNtB4_11LogicalExprEB4_:
  886|     10|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  887|     10|    Err(Err::Failure(InternalParseError::SyntaxError(
  888|     10|        SyntaxError::new(kind, rev_idx, err_len),
  889|     10|        rest,
  890|     10|    )))
  891|     10|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  36.7k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  36.7k|where
   25|  36.7k|    F: nom::Parser<&'a str, T, E>,
   26|  36.7k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  36.7k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser24failed_filter_expressionNtB8_11LogicalExprE00B8_:
  617|     19|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser14failed_segmentNtB6_9SelectorsE0B6_:
  177|  3.87k|    move |q: &str| {
  178|  3.87k|        let rest = skip_one(q)
  179|  3.87k|            .trim_start_matches('.')
  180|  3.87k|            .trim_start_matches(|x| x != '.' && x != '[');
  181|  3.87k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  182|  3.87k|    }
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  36.7k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  36.7k|where
   25|  36.7k|    F: nom::Parser<&'a str, T, E>,
   26|  36.7k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  36.7k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6number:
  656|     10|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  657|     10|    map(float, |f| JsonNumber::from(f).normalize())(q)
  658|     10|}
_RNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand9name_char0B7_:
  250|  8.80k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7literal:
  646|     10|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  647|     10|    alt((
  648|     10|        into(number),
  649|     10|        into(string_literal),
  650|     10|        value(Literal::Bool(true), tag("true")),
  651|     10|        value(Literal::Bool(false), tag("false")),
  652|     10|        value(Literal::Null, tag("null")),
  653|     10|    ))(q)
  654|     10|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  36.7k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  36.7k|where
   25|  36.7k|    F: nom::Parser<&'a str, T, E>,
   26|  36.7k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  36.7k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser4failReEB4_:
  886|  2.20k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  887|  2.20k|    Err(Err::Failure(InternalParseError::SyntaxError(
  888|  2.20k|        SyntaxError::new(kind, rev_idx, err_len),
  889|  2.20k|        rest,
  890|  2.20k|    )))
  891|  2.20k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13child_segment:
  158|  25.9k|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  159|  25.9k|    map(
  160|  25.9k|        alt((
  161|  25.9k|            |q| bracketed_selection(q, ctx),
  162|  25.9k|            // This cut is only correct because we try parsing descendant_segment first.
  163|  25.9k|            preceded(
  164|  25.9k|                char('.'),
  165|  25.9k|                cut(alt((
  166|  25.9k|                    map(wildcard_selector, Selectors::one),
  167|  25.9k|                    member_name_shorthand,
  168|  25.9k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  169|  25.9k|                ))),
  170|  25.9k|            ),
  171|  25.9k|        )),
  172|  25.9k|        Segment::Child,
  173|  25.9k|    )(q)
  174|  25.9k|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15failed_selectors_0B5_:
  354|  11.4k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser8skip_one:
   17|  11.8k|fn skip_one(q: &str) -> &str {
   18|  11.8k|    let mut chars = q.chars();
   19|  11.8k|    chars.next();
   20|  11.8k|    chars.as_str()
   21|  11.8k|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB2m_B2p_E0E0B2p_E00B8_:
   30|     10|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand:
  231|  12.3k|fn member_name_shorthand(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  232|  12.3k|    return map(
  233|  12.3k|        preceded(
  234|  12.3k|            peek(name_first),
  235|  12.3k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  236|       |                acc.push(x);
  237|       |                acc
  238|  12.3k|            }),
  239|  12.3k|        ),
  240|  12.3k|        |x| Selectors::one(Selector::Name(x.into())),
  241|  12.3k|    )(q);
  242|  12.3k|
  243|  12.3k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  244|  12.3k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  245|  12.3k|            q,
  246|  12.3k|        )
  247|  12.3k|    }
  248|  12.3k|
  249|  12.3k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  250|  12.3k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  251|  12.3k|    }
  252|  12.3k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser4failNtB4_8SelectorEB4_:
  886|    934|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  887|    934|    Err(Err::Failure(InternalParseError::SyntaxError(
  888|    934|        SyntaxError::new(kind, rev_idx, err_len),
  889|    934|        rest,
  890|    934|    )))
  891|    934|}
_RNCNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1V_E00B8_:
   30|  7.56k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15filter_selector0B5_:
  372|     10|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNCNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string0s_0B7_:
  745|  9.20k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser13name_selector:
  271|  36.7k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  272|  36.7k|    map(string_literal, Selector::Name)(q)
  273|  36.7k|}
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser14slice_selector:
  286|  26.3k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  287|  26.3k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  288|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  289|  7.56k|    let mut slice = crate::Slice::default();
  290|       |
  291|  7.56k|    if let Some(start_str) = opt_start {
  292|  1.97k|        match parse_directional_int(start_str) {
  293|  1.23k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  294|    448|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  295|    284|            DirectionalInt::Error(err) => {
  296|    284|                return fail(
  297|    284|                    SyntaxErrorKind::SliceStartParseError(err),
  298|    284|                    q.len(),
  299|    284|                    start_str.len(),
  300|    284|                    rest,
  301|    284|                );
  302|       |            }
  303|       |        };
  304|  5.59k|    }
  305|  7.28k|    let q = rest;
  306|  7.28k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  307|       |
  308|  6.47k|    if let Some(end_str) = opt_end {
  309|  2.06k|        match parse_directional_int(end_str) {
  310|  1.74k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  311|    111|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  312|    204|            DirectionalInt::Error(err) => {
  313|    204|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  314|       |            }
  315|       |        };
  316|  4.41k|    }
  317|       |
  318|  6.27k|    let q = rest;
  319|  6.27k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  320|       |
  321|  5.67k|    if let Some(Some(step_str)) = opt_step {
  322|  1.62k|        match parse_directional_int(step_str) {
  323|    809|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  324|    372|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  325|    446|            DirectionalInt::Error(err) => {
  326|    446|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  327|       |            }
  328|       |        };
  329|  4.04k|    }
  330|       |
  331|  5.22k|    Ok((rest, Selector::Slice(slice)))
  332|  26.3k|}
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB2i_B2l_E0E0B2l_EB4_:
   23|     10|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|     10|where
   25|     10|    F: nom::Parser<&'a str, T, E>,
   26|     10|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|     10|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser18descendant_segment0B5_:
  148|  5.54k|                |q| bracketed_selection(q, ctx),
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthands_0B5_:
  240|  8.49k|        |x| Selectors::one(Selector::Name(x.into())),
_RINvNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  766|  10.5k|        fn read_escape_sequence<I>(
  767|  10.5k|            q_len: usize,
  768|  10.5k|            c_idx: usize,
  769|  10.5k|            chars: &mut Peekable<I>,
  770|  10.5k|            mode: StringParseMode,
  771|  10.5k|        ) -> std::result::Result<char, SyntaxError>
  772|  10.5k|        where
  773|  10.5k|            I: Iterator<Item = (usize, char)>,
  774|  10.5k|        {
  775|  10.5k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  776|  10.5k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  777|  10.5k|                q_len - c_idx,
  778|  10.5k|                1,
  779|  10.5k|            ))?;
  780|  1.19k|            match ctrl {
  781|       |                'u' => {
  782|  4.58k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  783|  2.82k|                    match raw_c {
  784|       |                        // High surrogate, start of a UTF-16 pair.
  785|  2.58k|                        0xD800..=0xDBFF => {
  786|  2.29k|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  787|  2.29k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  788|  2.29k|                                q_len - c_idx,
  789|  2.29k|                                6,
  790|  2.29k|                            ))?;
  791|  2.29k|                            if next != '\\' {
  792|    745|                                return Err(SyntaxError::new(
  793|    745|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  794|    745|                                    q_len - c_idx,
  795|    745|                                    6,
  796|    745|                                ));
  797|  1.54k|                            }
  798|  1.54k|                            chars.next();
  799|  1.54k|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  800|  1.54k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  801|  1.54k|                                q_len - c_idx,
  802|  1.54k|                                6,
  803|  1.54k|                            ))?;
  804|  1.54k|                            if next != 'u' {
  805|    607|                                return Err(SyntaxError::new(
  806|    607|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  807|    607|                                    q_len - c_idx,
  808|    607|                                    6,
  809|    607|                                ));
  810|    939|                            }
  811|    939|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  812|    719|                            match low {
  813|    397|                                0xDC00..=0xDFFF => {
  814|    396|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  815|    396|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  816|       |                                }
  817|    323|                                _ => Err(SyntaxError::new(
  818|    323|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  819|    323|                                    q_len - c_idx,
  820|    323|                                    6,
  821|    323|                                )),
  822|       |                            }
  823|       |                        }
  824|       |                        // Low surrogate, invalid escape sequence.
  825|    289|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  826|    254|                            SyntaxErrorKind::UnpairedLowSurrogate,
  827|    254|                            q_len - c_idx,
  828|    254|                            6,
  829|    254|                        )),
  830|    273|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  831|       |                    }
  832|       |                }
  833|    322|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  834|    888|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  835|    194|                'n' => Ok('\n'),       // U+000A LF line feed
  836|    200|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  837|    452|                'r' => Ok('\r'),       // U+000D CR carriage return
  838|    769|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  839|    423|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  840|    961|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  841|  2.64k|                _ => Err(SyntaxError::new(
  842|  2.64k|                    SyntaxErrorKind::InvalidEscapeSequence,
  843|  2.64k|                    q_len - c_idx,
  844|  2.64k|                    2,
  845|  2.64k|                )), // no other escape sequences are allowed
  846|       |            }
  847|  10.5k|        }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6stringB3_:
  718|  73.6k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  719|       |    move |q: &'a str| {
  720|       |        let mut builder = JsonStringBuilder::new();
  721|       |        let mut syntax_errors = vec![];
  722|       |        let mut stream = q.char_indices().peekable();
  723|       |
  724|       |        while let Some((c_idx, c)) = stream.next() {
  725|       |            match (c, mode) {
  726|       |                ('\\', _) => {
  727|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  728|       |                        Ok(r) => {
  729|       |                            builder.push(r);
  730|       |                        }
  731|       |                        Err(err) => {
  732|       |                            syntax_errors.push(err);
  733|       |                        }
  734|       |                    };
  735|       |                }
  736|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  737|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  738|       |                    return if syntax_errors.is_empty() {
  739|       |                        Ok((rest, builder.finish()))
  740|       |                    } else {
  741|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  742|       |                    };
  743|       |                }
  744|       |                (..='\u{001F}', _) => {
  745|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  746|       |                    syntax_errors.push(SyntaxError::new(
  747|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  748|       |                        rest.len() + 1,
  749|       |                        1,
  750|       |                    ))
  751|       |                }
  752|       |                _ => {
  753|       |                    builder.push(c);
  754|       |                }
  755|       |            }
  756|       |        }
  757|       |
  758|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  759|       |            SyntaxErrorKind::MissingClosingSingleQuote
  760|       |        } else {
  761|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  762|       |        };
  763|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  764|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  765|       |
  766|       |        fn read_escape_sequence<I>(
  767|       |            q_len: usize,
  768|       |            c_idx: usize,
  769|       |            chars: &mut Peekable<I>,
  770|       |            mode: StringParseMode,
  771|       |        ) -> std::result::Result<char, SyntaxError>
  772|       |        where
  773|       |            I: Iterator<Item = (usize, char)>,
  774|       |        {
  775|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  776|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  777|       |                q_len - c_idx,
  778|       |                1,
  779|       |            ))?;
  780|       |            match ctrl {
  781|       |                'u' => {
  782|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  783|       |                    match raw_c {
  784|       |                        // High surrogate, start of a UTF-16 pair.
  785|       |                        0xD800..=0xDBFF => {
  786|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  787|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  788|       |                                q_len - c_idx,
  789|       |                                6,
  790|       |                            ))?;
  791|       |                            if next != '\\' {
  792|       |                                return Err(SyntaxError::new(
  793|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  794|       |                                    q_len - c_idx,
  795|       |                                    6,
  796|       |                                ));
  797|       |                            }
  798|       |                            chars.next();
  799|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  800|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  801|       |                                q_len - c_idx,
  802|       |                                6,
  803|       |                            ))?;
  804|       |                            if next != 'u' {
  805|       |                                return Err(SyntaxError::new(
  806|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  807|       |                                    q_len - c_idx,
  808|       |                                    6,
  809|       |                                ));
  810|       |                            }
  811|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  812|       |                            match low {
  813|       |                                0xDC00..=0xDFFF => {
  814|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  815|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  816|       |                                }
  817|       |                                _ => Err(SyntaxError::new(
  818|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  819|       |                                    q_len - c_idx,
  820|       |                                    6,
  821|       |                                )),
  822|       |                            }
  823|       |                        }
  824|       |                        // Low surrogate, invalid escape sequence.
  825|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  826|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  827|       |                            q_len - c_idx,
  828|       |                            6,
  829|       |                        )),
  830|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  831|       |                    }
  832|       |                }
  833|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  834|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  835|       |                'n' => Ok('\n'),       // U+000A LF line feed
  836|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  837|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  838|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  839|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  840|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  841|       |                _ => Err(SyntaxError::new(
  842|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  843|       |                    q_len - c_idx,
  844|       |                    2,
  845|       |                )), // no other escape sequences are allowed
  846|       |            }
  847|       |        }
  848|       |
  849|       |        fn read_hexadecimal_escape<I>(
  850|       |            q_len: usize,
  851|       |            c_idx: usize,
  852|       |            chars: &mut Peekable<I>,
  853|       |        ) -> std::result::Result<u32, SyntaxError>
  854|       |        where
  855|       |            I: Iterator<Item = (usize, char)>,
  856|       |        {
  857|       |            let mut x = 0;
  858|       |            for i in 0..4 {
  859|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  860|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  861|       |                    q_len - c_idx + 1,
  862|       |                    2 + i,
  863|       |                ))?;
  864|       |                let v = match c {
  865|       |                    '0'..='9' => c as u32 - '0' as u32,
  866|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  867|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  868|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  869|       |                    _ => {
  870|       |                        return Err(SyntaxError::new(
  871|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  872|       |                            q_len - c_idx - i - 1,
  873|       |                            1,
  874|       |                        ))
  875|       |                    }
  876|       |                };
  877|       |                x <<= 4;
  878|       |                x += v;
  879|       |                chars.next();
  880|       |            }
  881|       |            Ok(x)
  882|       |        }
  883|       |    }
  884|  73.6k|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segment0B5_:
  137|  31.4k|        |q| descendant_segment(q, ctx),
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser17wildcard_selector:
  282|  45.2k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  283|  45.2k|    map(tag("*"), |_| Selector::Wildcard)(q)
  284|  45.2k|}
_RNCNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser6string00B7_:
  737|  4.66k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser15filter_selector:
  371|  11.6k|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  372|  11.6k|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  373|  11.6k|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB2k_B2n_E0E0B2n_E0B6_:
   27|     10|    move |q: &'a str| {
   28|     10|        inner
   29|     10|            .parse(skip_whitespace(q))
   30|     10|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|     10|    }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser12logical_expr:
  375|     10|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  376|       |    // This is the most involved part of the parser, as it is inherently recursive.
  377|       |    //
  378|       |    // There are two sources of recursion here: parentheses introduce recursion,
  379|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  380|       |    // require checking for an operator, and if any is present recursively parsing
  381|       |    // another filter and wrapping the result in an appropriate node type.
  382|       |    //
  383|       |    // In total, we handle the negation operator at the start and then apply the rules:
  384|       |    // - '(' |=> filter_expression, ')'
  385|       |    // - literal |=> comp_op, comparable
  386|       |    // - query, comp_op |=> comparable
  387|       |    // - query
  388|       |    // where |=> means a cut. We separately apply two additional restrictions:
  389|       |    // - negation cannot immediately precede a comparison,
  390|       |    // - query in a comparison must be singular.
  391|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  392|       |    // these two special cases it can give much clearer error messages about them.
  393|       |    //
  394|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  395|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  396|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  397|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  398|       |    #[derive(Debug, Clone, Copy)]
  399|       |    enum BooleanOp {
  400|       |        And,
  401|       |        Or,
  402|       |    }
  403|       |
  404|     10|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  405|      0|    let mut loop_rest = skip_whitespace(rest);
  406|      0|    let mut final_expr = this_expr;
  407|       |
  408|       |    loop {
  409|      0|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  410|      0|            value(BooleanOp::And, tag("&&")),
  411|      0|            value(BooleanOp::Or, tag("||")),
  412|      0|        ))))(loop_rest)?;
  413|      0|        loop_rest = rest;
  414|       |
  415|      0|        match mb_boolean_op {
  416|      0|            Some(BooleanOp::And) => {
  417|      0|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  418|      0|                loop_rest = rest;
  419|      0|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  420|       |            }
  421|      0|            Some(BooleanOp::Or) => {
  422|      0|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  423|      0|                loop_rest = rest;
  424|      0|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  425|       |            }
  426|      0|            None => break,
  427|      0|        }
  428|      0|    }
  429|      0|
  430|      0|    return Ok((loop_rest, final_expr));
  431|       |
  432|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  433|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  434|       |        let negated = opt_neg.is_some();
  435|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  436|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  437|       |            let rest = skip_whitespace(rest);
  438|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  439|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  440|       |            };
  441|       |            let selector = if negated {
  442|       |                LogicalExpr::Not(Box::new(nested_filter))
  443|       |            } else {
  444|       |                nested_filter
  445|       |            };
  446|       |            Ok((rest, selector))
  447|       |        } else if let Ok((rest, lhs)) = literal(rest) {
  448|       |            let rest = skip_whitespace(rest);
  449|       |            let Ok((rest, comp_op)) = comparison_operator(rest) else {
  450|       |                if peek(char::<_, ()>(']'))(rest).is_ok() {
  451|       |                    return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  452|       |                } else {
  453|       |                    return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  454|       |                };
  455|       |            };
  456|       |            let rest = skip_whitespace(rest);
  457|       |            let Ok((rest, rhs)) = comparable(rest, ctx) else {
  458|       |                if peek(char::<_, ()>(']'))(rest).is_ok() {
  459|       |                    return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  460|       |                } else {
  461|       |                    return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  462|       |                };
  463|       |            };
  464|       |            if negated {
  465|       |                return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  466|       |            } else {
  467|       |                Ok((
  468|       |                    rest,
  469|       |                    LogicalExpr::Comparison(ComparisonExpr {
  470|       |                        lhs: Comparable::Literal(lhs),
  471|       |                        op: comp_op,
  472|       |                        rhs,
  473|       |                    }),
  474|       |                ))
  475|       |            }
  476|       |        } else if let Ok((rest, query)) = filter_query(rest, ctx) {
  477|       |            let query_len = q.len() - rest.len();
  478|       |            let rest = skip_whitespace(rest);
  479|       |            if let Ok((rest, comp_op)) = comparison_operator(rest) {
  480|       |                let rest = skip_whitespace(rest);
  481|       |                let Ok((rest, rhs)) = comparable(rest, ctx) else {
  482|       |                    return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  483|       |                };
  484|       |                let Some(singular_query) = query.try_to_comparable() else {
  485|       |                    return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  486|       |                };
  487|       |                if negated {
  488|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|       |                    Ok((
  491|       |                        rest,
  492|       |                        LogicalExpr::Comparison(ComparisonExpr {
  493|       |                            lhs: singular_query,
  494|       |                            rhs,
  495|       |                            op: comp_op,
  496|       |                        }),
  497|       |                    ))
  498|       |                }
  499|       |            } else {
  500|       |                let test_expr = LogicalExpr::Test(query.into_test_query());
  501|       |                let expr = if negated {
  502|       |                    LogicalExpr::Not(Box::new(test_expr))
  503|       |                } else {
  504|       |                    test_expr
  505|       |                };
  506|       |                Ok((rest, expr))
  507|       |            }
  508|       |        } else {
  509|       |            failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest)
  510|       |        }
  511|       |    }
  512|     10|}
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser17wildcard_selector0B5_:
  283|  6.51k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser5float:
  661|     10|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  662|       |    // Look ahead to verify that this has a chance to be a number.
  663|     10|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  664|       |
  665|       |    // It is a number, so after here we can hard cut.
  666|      0|    return match JsonFloat::from_str(valid_str) {
  667|      0|        Ok(n) => Ok((rest, n)),
  668|      0|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  669|       |    };
  670|       |
  671|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  672|       |        recognize(tuple((
  673|       |            digit1,
  674|       |            opt(preceded(char('.'), digit1)),
  675|       |            opt(preceded(
  676|       |                tag_no_case("e"),
  677|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  678|       |            )),
  679|       |        )))(q)
  680|       |    }
  681|     10|}
_RNvMNtCs2slMccTFvwW_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  2.08k|    fn new(options: &'a ParserOptions) -> Self {
   45|  2.08k|        Self {
   46|  2.08k|            options,
   47|  2.08k|            current_nesting: 0,
   48|  2.08k|        }
   49|  2.08k|    }
_RINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  13.5k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  13.5k|where
   25|  13.5k|    F: nom::Parser<&'a str, T, E>,
   26|  13.5k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  13.5k|}
_RNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser5float10base_float:
  671|     10|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  672|     10|        recognize(tuple((
  673|     10|            digit1,
  674|     10|            opt(preceded(char('.'), digit1)),
  675|     10|            opt(preceded(
  676|     10|                tag_no_case("e"),
  677|     10|                preceded(opt(alt((char('+'), char('-')))), digit1),
  678|     10|            )),
  679|     10|        )))(q)
  680|     10|    }
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  36.7k|    move |q: &'a str| {
   28|  36.7k|        inner
   29|  36.7k|            .parse(skip_whitespace(q))
   30|  36.7k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  36.7k|    }
_RNCNvNvNtCs2slMccTFvwW_15rsonpath_syntax6parser21member_name_shorthand10name_first0B7_:
  244|  32.1k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  31.6k|    move |q: &'a str| {
   28|  31.6k|        inner
   29|  31.6k|            .parse(skip_whitespace(q))
   30|  31.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  31.6k|    }
_RNCNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segments_0B5_:
  138|  25.9k|        |q| child_segment(q, ctx),
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser7segment:
  134|  31.4k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  135|  31.4k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  136|  31.4k|    alt((
  137|  31.4k|        |q| descendant_segment(q, ctx),
  138|  31.4k|        |q| child_segment(q, ctx),
  139|  31.4k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  140|  31.4k|    ))(q)
  141|  31.4k|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  26.3k|    move |q: &'a str| {
   28|  26.3k|        inner
   29|  26.3k|            .parse(skip_whitespace(q))
   30|  26.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  26.3k|    }
_RNvNtCs2slMccTFvwW_15rsonpath_syntax6parser19bracketed_selection:
  185|  31.4k|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  186|  31.4k|    let (mut q, _) = char('[')(q)?;
  187|  9.86k|    let mut selectors = vec![];
  188|  9.86k|    let mut syntax_errors = vec![];
  189|       |
  190|       |    loop {
  191|  36.7k|        match selector(q, ctx).finish() {
  192|  18.4k|            Ok((rest, selector)) => {
  193|  18.4k|                selectors.push(selector);
  194|  18.4k|                q = rest;
  195|  18.4k|            }
  196|  15.8k|            Err(InternalParseError::SyntaxError(err, rest)) => {
  197|  15.8k|                syntax_errors.push(err);
  198|  15.8k|                q = rest;
  199|  15.8k|            }
  200|  2.56k|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  201|  2.56k|                syntax_errors.append(&mut errs);
  202|  2.56k|                q = rest;
  203|  2.56k|            }
  204|      0|            Err(err) => return Err(Err::Failure(err)),
  205|       |        }
  206|  36.7k|        q = skip_whitespace(q);
  207|  36.7k|
  208|  36.7k|        match char::<_, nom::error::Error<_>>(',')(q) {
  209|  6.38k|            Ok((rest, _)) => q = rest,
  210|       |            Err(_) => {
  211|  30.4k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  212|  8.40k|                    q = rest;
  213|  8.40k|                    break;
  214|  22.0k|                } else if q.is_empty() {
  215|  1.45k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  216|  1.45k|                    break;
  217|       |                } else {
  218|  20.5k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  219|       |                }
  220|       |            }
  221|       |        }
  222|       |    }
  223|       |
  224|  9.86k|    if syntax_errors.is_empty() {
  225|    923|        Ok((q, Selectors::many(selectors)))
  226|       |    } else {
  227|  8.93k|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  228|       |    }
  229|  31.4k|}
_RNCINvNtCs2slMccTFvwW_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  18.0k|    move |q: &'a str| {
   28|  18.0k|        inner
   29|  18.0k|            .parse(skip_whitespace(q))
   30|  18.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  18.0k|    }

_RNvMs_NtCs2slMccTFvwW_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  11.0k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  11.0k|        self.quoted.push('"');
   52|  11.0k|        JsonString { quoted: self.quoted }
   53|  11.0k|    }
_RNvMs_NtCs2slMccTFvwW_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  42.5k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  42.5k|        self.quoted.push(char);
   47|  42.5k|        self
   48|  42.5k|    }
_RNvMs_NtCs2slMccTFvwW_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  13.6k|    pub(crate) fn new() -> Self {
   40|  13.6k|        Self {
   41|  13.6k|            quoted: String::from('"'),
   42|  13.6k|        }
   43|  13.6k|    }
_RNvXs0_NtCs2slMccTFvwW_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  8.49k|    fn from(value: JsonStringBuilder) -> Self {
   59|  8.49k|        value.finish()
   60|  8.49k|    }

