_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary9size_hintCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
  868|  4.63k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  4.63k|        (0, None)
  870|  4.63k|    }
_RNvXsk_Cs98o54wqeRSK_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  4.63k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  4.63k|        let size = u.len();
  864|  4.63k|        arbitrary_str(&mut u, size)
  865|  4.63k|    }

_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3newCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
   85|  4.63k|    pub fn new(data: &'a [u8]) -> Self {
   86|  4.63k|        Unstructured { data }
   87|  4.63k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  4.63k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  4.63k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  4.63k|        }
  552|  4.63k|
  553|  4.63k|        let (for_buf, rest) = self.data.split_at(size);
  554|  4.63k|        self.data = rest;
  555|  4.63k|        Ok(for_buf)
  556|  4.63k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  4.63k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  4.63k|        self.data.get(..size)
  581|  4.63k|    }
_RNvMNtCs98o54wqeRSK_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  4.63k|    pub fn len(&self) -> usize {
  109|  4.63k|        self.data.len()
  110|  4.63k|    }

_RNvXCsfeQOFZTz9nJ_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
   30|  4.63k|    fn from(_: ()) -> Self {
   31|  4.63k|        Self::Keep
   32|  4.63k|    }
_RNvNvCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  4.63k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  4.63k|                $body
  305|  4.63k|            }
rust_fuzzer_test_input:
  259|  4.63k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  4.63k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  4.63k|
  262|  4.63k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  4.63k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  4.63k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  4.63k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  4.63k|                // get to longer inputs that actually lead to interesting executions
  267|  4.63k|                // quicker.
  268|  4.63k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  4.63k|                }
  271|  4.63k|
  272|  4.63k|                let mut u = Unstructured::new(bytes);
  273|  4.63k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  4.63k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  4.63k|                }
  291|       |
  292|  4.63k|                let data = match data {
  293|  4.63k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  4.63k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  4.63k|                result.to_libfuzzer_code()
  299|  4.63k|            }
_RNvMs_CsfeQOFZTz9nJ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
   40|  4.63k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  4.63k|        match self {
   42|  4.63k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  4.63k|    }
LLVMFuzzerTestOneInput:
   58|  4.63k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  4.63k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  4.63k|    });
   63|  4.63k|
   64|  4.63k|    match test_input {
   65|  4.63k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  4.63k|}
_RNCNvCsfeQOFZTz9nJ_13libfuzzer_sys15test_input_wrap0B3_:
   59|  4.63k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  4.63k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  4.63k|        rust_fuzzer_test_input(data_slice)
   62|  4.63k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBD_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_cB1w_NCINvNtNtB4_9character8complete4charBx_B1w_E0E0B24_EEBD_:
   47|  29.1M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  29.1M|  mut l: List,
   49|  29.1M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  29.1M|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtNtB6_9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0Bw_EINtB4_3AltB16_cB18_E6choiceB1c_:
  134|  22.7k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  22.7k|        match self.0.parse(input.clone()) {
  136|  22.5k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    247|          res => res,
  138|       |        }
  139|  22.7k|      }
_RNvXs1_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0NCINvNtB7_10combinator3mapReNtBD_8SelectorNtBD_9SelectorsNtNtBD_5error18InternalParseErrorNvBB_17wildcard_selectorNvMst_BD_B2f_3oneE0NvBB_21member_name_shorthandNCINvBB_14failed_segmentB2f_E0EINtB5_3AltB1Z_B2f_B2u_E6choiceBD_:
  134|  13.3M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  13.3M|        match self.0.parse(input.clone()) {
  136|  13.3M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  5.03k|          res => res,
  138|       |        }
  139|  13.3M|      }
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtB11_9SelectorsNtNtB11_5error18InternalParseErrorNvNtB11_6parser17wildcard_selectorNvMst_B11_B1E_3oneE0NvB2u_21member_name_shorthandNCINvB2u_14failed_segmentB1E_E0EINtB5_3AltBX_B1E_B1U_E6choiceB11_:
  134|  1.00M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.00M|        match self.0.parse(input.clone()) {
  136|  1.00M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  9.37k|          res => res,
  138|       |        }
  139|  1.00M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1p_NCINvNtNtB6_9character8complete4charBz_B1p_E0NCNvNtBF_6parser6string0E0B1X_EE0BF_:
   50|  90.5M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser7segment0NCB1N_s_0NCINvB1P_14failed_segmentBz_E0EEBB_:
   47|  45.3k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  45.3k|  mut l: List,
   49|  45.3k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  45.3k|}
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0NCBz_s_0NCINvBB_14failed_segmentNtBD_7SegmentE0EINtB5_3AltReB1T_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  45.3k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  45.3k|        match self.0.parse(input.clone()) {
  136|  32.4k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  12.9k|          res => res,
  138|       |        }
  139|  45.3k|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1P_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1P_E6choiceB15_:
  134|  90.5M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  90.5M|        match self.0.parse(input.clone()) {
  136|  90.3M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   205k|          res => res,
  138|       |        }
  139|  90.5M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser18descendant_segment0NCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0BD_:
   50|  13.3M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser13child_segment0NCINvNtB4_8sequence8precededBx_cBz_B1f_NCINvNtNtB4_9character8complete4charBx_B1f_E0NCINvNtB4_10combinator3cutBx_Bz_B1f_NCIB0_Bx_Bz_B1f_TNCINvB3K_3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  28.7M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  28.7M|  mut l: List,
   49|  28.7M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  28.7M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser12filter_query0NCB1P_s_0NCINvB1R_28failed_segment_within_filterBB_E0EE0BD_:
   50|  42.0M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser12filter_query0NCB1N_s_0NCINvB1P_28failed_segment_within_filterBz_E0EEBB_:
   47|  42.0M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  42.0M|  mut l: List,
   49|  42.0M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  42.0M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1h_NvNtBD_6parser17wildcard_selectorNvMst_BD_BB_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBB_E0EE0BD_:
   50|  1.00M|  move |i: I| l.choice(i)
_RNvXs0_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0NCBz_s_0NCINvBB_28failed_segment_within_filterNtBD_7SegmentE0EINtB5_3AltReB2d_NtNtBD_5error18InternalParseErrorE6choiceBD_:
  134|  42.0M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  42.0M|        match self.0.parse(input.clone()) {
  136|  28.6M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  13.3M|          res => res,
  138|       |        }
  139|  42.0M|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvBy_9name_char0ReNtNtBC_5error18InternalParseErrorE0EINtB4_3AltB2H_cB2J_E6choiceBC_:
  134|  1.30M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  1.30M|        match self.0.parse(input.clone()) {
  136|   651k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   654k|          res => res,
  138|       |        }
  139|  1.30M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypeNtNtBF_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_cB1y_NCINvNtNtB6_9character8complete4charBz_B1y_E0E0B26_EE0BF_:
   50|  29.1M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1n_NCINvNtNtB4_9character8complete4charBx_B1n_E0NCNvNtBD_6parser6string0E0B1V_EEBD_:
   47|  90.5M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  90.5M|  mut l: List,
   49|  90.5M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  90.5M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtBD_7LiteralBB_B1j_B1j_NvNtBD_6parser7literalE0NCNvB2L_10comparable0EE0BD_:
   50|  5.37M|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0NCINvNtB6_8sequence8precededRecNtBC_9SelectorsNtNtBC_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1V_B2d_E0NCINvNtB6_10combinator3cutB1V_B1Y_B2d_NCINvB4_3altB1V_B1Y_B2d_TNCINvB3z_3mapB1V_NtBC_8SelectorB1Y_B2d_NvBA_17wildcard_selectorNvMst_BC_B1Y_3oneE0NvBA_21member_name_shorthandNCINvBA_14failed_segmentB1Y_E0EE0E0E0EINtB4_3AltB1V_B1Y_B2d_E6choiceBC_:
  134|  28.7M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  28.7M|        match self.0.parse(input.clone()) {
  136|  1.01M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  27.7M|          res => res,
  138|       |        }
  139|  28.7M|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtNtBB_3num10JsonNumberBz_B1d_B1d_NvNtBB_6parser6numberE0NCIB1O_Bx_NtNtBB_3str10JsonStringBz_B1d_B1d_NvB2P_14string_literalE0NCINvB1Q_5valueBx_Bz_Bx_B1d_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1d_E0E0B4g_B4g_EEBB_:
   47|  29.2M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  29.2M|  mut l: List,
   49|  29.2M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1R_13name_selectorB1e_E0NCIB1P_Bz_NvB1R_17wildcard_selectorB1e_E0NCIB1P_Bz_NvB1R_14slice_selectorB1e_E0NCIB1P_Bz_NvB1R_14index_selectorB1e_E0NCIB1P_Bz_NCNvB1R_8selector0B1e_E0NvB1R_15failed_selectorEEBB_:
   47|  61.3M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  61.3M|  mut l: List,
   49|  61.3M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  61.3M|}
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0NvNvNtB18_6parser5float10base_floatE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|  29.2M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  29.2M|        match self.0.parse(input.clone()) {
  136|  29.2M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|    621|          res => res,
  138|       |        }
  139|  29.2M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser13child_segment0NCINvNtB6_8sequence8precededBz_cBB_B1h_NCINvNtNtB6_9character8complete4charBz_B1h_E0NCINvNtB6_10combinator3cutBz_BB_B1h_NCIB2_Bz_BB_B1h_TNCINvB3M_3mapBz_NtBD_8SelectorBB_B1h_NvB1T_17wildcard_selectorNvMst_BD_BB_3oneE0NvB1T_21member_name_shorthandNCINvB1T_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  28.7M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB4_9character8complete4charBx_BA_E0B1z_EEBE_:
   47|  29.2M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  29.2M|  mut l: List,
   49|  29.2M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBG_6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvB1D_9name_char0Bz_BC_E0EE0BG_:
   50|  1.30M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1j_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1j_E0E0B1R_B1R_B1R_NCIB1U_Bx_Bz_cB1j_NCINvNtNtB4_9character8complete4charBx_B1j_E0E0B3r_EEBB_:
   47|  11.8M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  11.8M|  mut l: List,
   49|  11.8M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  11.8M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1l_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1l_E0E0B1T_B1T_B1T_NCIB1W_Bz_BB_cB1l_NCINvNtNtB6_9character8complete4charBz_B1l_E0E0B3t_EE0BD_:
   50|  11.8M|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBE_6parser21member_name_shorthand10name_firstNCINvNtNtB4_9character8complete7satisfyNCNvB1B_9name_char0Bx_BA_E0EEBE_:
   47|  1.30M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  1.30M|  mut l: List,
   49|  1.30M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  1.30M|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCNvNtBB_6parser18descendant_segment0NCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvB1R_17wildcard_selectorNvMst_BB_Bz_3oneE0NvB1R_21member_name_shorthandNCINvB1R_14failed_segmentBz_E0EEBB_:
   47|  42.1M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  42.1M|  mut l: List,
   49|  42.1M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  42.1M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2k_6digit1Bz_BE_EE0B2X_EE0BI_:
   50|   122M|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB11_10ComparableNtNtB11_5error18InternalParseErrorB1V_NvNtB11_6parser7literalE0NCNvB2z_10comparable0EINtB4_3AltBX_B1D_B1V_E6choiceB11_:
  134|  5.37M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  5.37M|        match self.0.parse(input.clone()) {
  136|  5.34M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  31.5k|          res => res,
  138|       |        }
  139|  5.37M|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB27_6digit1BY_B14_EE0B2L_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   122M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   122M|        match self.0.parse(input.clone()) {
  136|   122M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  25.8k|          res => res,
  138|       |        }
  139|   122M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1T_13name_selectorB1g_E0NCIB1R_BB_NvB1T_17wildcard_selectorB1g_E0NCIB1R_BB_NvB1T_14slice_selectorB1g_E0NCIB1R_BB_NvB1T_14index_selectorB1g_E0NCIB1R_BB_NCNvB1T_8selector0B1g_E0NvB1T_15failed_selectorEE0BD_:
   50|  61.3M|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator4intoBz_NtNtBD_3num10JsonNumberBB_B1f_B1f_NvNtBD_6parser6numberE0NCIB1Q_Bz_NtNtBD_3str10JsonStringBB_B1f_B1f_NvB2R_14string_literalE0NCINvB1S_5valueBz_BB_Bz_B1f_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1f_E0E0B4i_B4i_EE0BD_:
   50|  29.2M|  move |i: I| l.choice(i)
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBH_5error18InternalParseErrorTNCINvNtB6_10combinator5valueBz_BB_Bz_B1G_NCINvNtNtB6_5bytes8complete3tagBz_Bz_B1G_E0E0B2e_EE0BH_:
   50|  6.63M|  move |i: I| l.choice(i)
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1y_NvBC_17wildcard_selectorB26_E0NCIBA_B1y_NvBC_14slice_selectorB26_E0NCIBA_B1y_NvBC_14index_selectorB26_E0NCIBA_B1y_NCNvBC_8selector0B26_E0NvBC_15failed_selectorEINtB5_3AltReB1y_B26_E6choiceBE_:
  134|  61.3M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  61.3M|        match self.0.parse(input.clone()) {
  136|  61.1M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   187k|          res => res,
  138|       |        }
  139|  61.3M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNCNvNtBD_6parser7segment0NCB1P_s_0NCINvB1R_14failed_segmentBB_E0EE0BD_:
   50|  45.3k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax10ComparableNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator4intoBx_NtBB_7LiteralBz_B1h_B1h_NvNtBB_6parser7literalE0NCNvB2J_10comparable0EEBB_:
   47|  5.37M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  5.37M|  mut l: List,
   49|  5.37M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  5.37M|}
_RNvXs2_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB14_7LiteralNtNtB14_5error18InternalParseErrorB22_NvNtB14_6parser6numberE0NCIBA_BY_NtNtB14_3str10JsonStringB1O_B22_B22_NvB2G_14string_literalE0NCINvBC_5valueBY_B1O_BY_B22_NCINvNtNtB7_5bytes8complete3tagBY_BY_B22_E0E0B49_B49_EINtB5_3AltBY_B1O_B22_E6choiceB14_:
  134|  29.2M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  29.2M|        match self.0.parse(input.clone()) {
  136|  29.2M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  38.6k|          res => res,
  138|       |        }
  139|  29.2M|      }
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altReBz_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0NvNvNtBI_6parser5float10base_floatE0B2X_EE0BI_:
   50|  29.2M|  move |i: I| l.choice(i)
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBY_NtNtB16_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBY_BY_B28_E0E0Bw_EINtB4_3AltBY_B10_B28_E6choiceB16_:
  134|  6.63M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  6.63M|        match self.0.parse(input.clone()) {
  136|  6.62M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.35k|          res => res,
  138|       |        }
  139|  6.63M|      }
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBF_5error18InternalParseErrorTNCINvNtB4_10combinator5valueBx_Bz_Bx_B1E_NCINvNtNtB4_5bytes8complete3tagBx_Bx_B1E_E0E0B2c_EEBF_:
   47|  6.63M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  6.63M|  mut l: List,
   49|  6.63M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  6.63M|}
_RNCINvNtCs6HefjSGhhBw_3nom6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB6_9character8complete4charBz_BC_E0B1B_EE0BG_:
   50|  22.7k|  move |i: I| l.choice(i)
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2i_6digit1Bx_BC_EE0B2V_EEBG_:
   47|   122M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   122M|  mut l: List,
   49|   122M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   122M|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1f_NvNtBB_6parser17wildcard_selectorNvMst_BB_Bz_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBz_E0EEBB_:
   47|  28.7M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  28.7M|  mut l: List,
   49|  28.7M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  28.7M|}
_RINvNtCs6HefjSGhhBw_3nom6branch3altReBx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0NvNvNtBG_6parser5float10base_floatE0B2V_EEBG_:
   47|  29.2M|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  29.2M|  mut l: List,
   49|  29.2M|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  29.2M|}
_RNvXs3_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBZ_NtNtB13_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagBZ_BZ_B1O_E0E0Bx_Bx_Bx_NCIBA_BZ_B11_cB1O_NCINvNtNtB7_9character8complete4charBZ_B1O_E0E0B3e_EINtB5_3AltBZ_B11_B1O_E6choiceB13_:
  134|  11.8M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  11.8M|        match self.0.parse(input.clone()) {
  136|  11.8M|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.14k|          res => res,
  138|       |        }
  139|  11.8M|      }
_RNvXs_NtCs6HefjSGhhBw_3nom6branchTNCINvNtB6_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB14_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Y_E0E0Bw_EINtB4_3AltBY_B10_B1Y_E6choiceB14_:
  134|  29.1M|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  29.1M|        match self.0.parse(input.clone()) {
  136|   134k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  29.0M|          res => res,
  138|       |        }
  139|  29.1M|      }

_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBQ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBZ_:
   74|  29.2M|pub fn tag_no_case<T, Input, Error: ParseError<Input>>(
   75|  29.2M|  tag: T,
   76|  29.2M|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   77|  29.2M|where
   78|  29.2M|  Input: InputTake + Compare<T>,
   79|  29.2M|  T: InputLength + Clone,
   80|  29.2M|{
   81|       |  move |i: Input| {
   82|       |    let tag_len = tag.input_len();
   83|       |    let t = tag.clone();
   84|       |
   85|       |    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|       |        let e: ErrorKind = ErrorKind::Tag;
   89|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|       |    res
   93|       |  }
   94|  29.2M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBJ_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   266M|  move |i: Input| {
   40|   266M|    let tag_len = tag.input_len();
   41|   266M|    let t = tag.clone();
   42|   266M|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  13.4M|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   252M|        let e: ErrorKind = ErrorKind::Tag;
   46|   252M|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   266M|    res
   50|   266M|  }
_RINvNtNtCs6HefjSGhhBw_3nom5bytes8complete3tagReBH_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|   266M|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|   266M|  tag: T,
   34|   266M|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|   266M|where
   36|   266M|  Input: InputTake + Compare<T>,
   37|   266M|  T: InputLength + Clone,
   38|   266M|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|   266M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom5bytes8complete11tag_no_caseReBS_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B11_:
   81|  38.6k|  move |i: Input| {
   82|  38.6k|    let tag_len = tag.input_len();
   83|  38.6k|    let t = tag.clone();
   84|       |
   85|  38.6k|    let res: IResult<_, _, Error> = match (i).compare_no_case(t) {
   86|  22.7k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   87|       |      _ => {
   88|  15.8k|        let e: ErrorKind = ErrorKind::Tag;
   89|  15.8k|        Err(Err::Error(Error::from_error_kind(i, e)))
   90|       |      }
   91|       |    };
   92|  38.6k|    res
   93|  38.6k|  }

_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00CsmyidsRPtaf_15rsonpath_syntax:
   37|  87.5M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  87.5M|    let b = t.as_char() == c;
   39|  87.5M|    (&c, b)
   40|  87.5M|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBO_uECsmyidsRPtaf_15rsonpath_syntax:
   89|  71.1M|pub fn one_of<I, T, Error: ParseError<I>>(list: T) -> impl Fn(I) -> IResult<I, char, Error>
   90|  71.1M|where
   91|  71.1M|  I: Slice<RangeFrom<usize>> + InputIter,
   92|  71.1M|  <I as InputIter>::Item: AsChar + Copy,
   93|  71.1M|  T: FindToken<<I as InputIter>::Item>,
   94|  71.1M|{
   95|       |  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|       |  }
   99|  71.1M|}
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|   151M|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|   151M|where
  437|   151M|  T: InputTakeAtPosition,
  438|   151M|  <T as InputTakeAtPosition>::Item: AsChar,
  439|   151M|{
  440|   151M|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|   151M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBQ_uE0CsmyidsRPtaf_15rsonpath_syntax:
   95|  71.1M|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
   96|  42.0M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   97|  29.0M|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::OneOf))),
   98|  71.1M|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  1.30M|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  1.30M|where
   63|  1.30M|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  1.30M|  <I as InputIter>::Item: AsChar,
   65|  1.30M|  F: Fn(char) -> bool,
   66|  1.30M|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  1.30M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  15.6M|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  15.6M|  }) {
   72|  1.30M|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  14.3M|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  15.6M|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  15.6M|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  15.6M|    let c = t.as_char();
   69|  15.6M|    let b = cond(c);
   70|  15.6M|    (c, b)
   71|  15.6M|  }) {
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|   651k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|   651k|  }) {
   72|    804|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|   650k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|   651k|  }
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuECsmyidsRPtaf_15rsonpath_syntax:
   32|  24.2M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  24.2M|where
   34|  24.2M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  24.2M|  <I as InputIter>::Item: AsChar,
   36|  24.2M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  24.2M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE0CsmyidsRPtaf_15rsonpath_syntax:
   37|  24.2M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  24.2M|  }) {
   41|   301k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  23.9M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  24.2M|  }
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReuE00CsmyidsRPtaf_15rsonpath_syntax:
   37|  24.2M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  24.2M|    let b = t.as_char() == c;
   39|  24.2M|    (&c, b)
   40|  24.2M|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|   718M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   718M|where
   34|   718M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   718M|  <I as InputIter>::Item: AsChar,
   36|   718M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   718M|}
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6one_ofReBS_uE00CsmyidsRPtaf_15rsonpath_syntax:
   95|  54.0M|  move |i: I| match (i).iter_elements().next().map(|c| (c, list.find_token(c))) {
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|   649k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|   649k|    let c = t.as_char();
   69|   649k|    let b = cond(c);
   70|   649k|    (c, b)
   71|   649k|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  15.6M|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  15.6M|where
   63|  15.6M|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  15.6M|  <I as InputIter>::Item: AsChar,
   65|  15.6M|  F: Fn(char) -> bool,
   66|  15.6M|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  15.6M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   156M|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|   567M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   567M|    let b = t.as_char() == c;
   39|   567M|    (&c, b)
   40|   567M|  }) {
_RINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsmyidsRPtaf_15rsonpath_syntax:
   32|   120M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   120M|where
   34|   120M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   120M|  <I as InputIter>::Item: AsChar,
   36|   120M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   120M|}
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0CsmyidsRPtaf_15rsonpath_syntax:
   37|   120M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   120M|  }) {
   41|  13.0M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   107M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   120M|  }
_RNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|   568M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   568M|  }) {
   41|   112M|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   455M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   568M|  }

_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBI_NtNtBM_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1x_E0E00BM_:
  460|  3.91k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1x_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser18descendant_segment0NCIB0_BC_NtBG_8SelectorBE_B1x_NvB4m_17wildcard_selectorNvMst_BG_BE_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBE_E0EE0E0E0NcNtB1k_10Descendant0EBG_:
   73|  42.1M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  42.1M|where
   75|  42.1M|  F: Parser<I, O1, E>,
   76|  42.1M|  G: FnMut(O1) -> O2,
   77|  42.1M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  42.1M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1x_TNCNvNtBG_6parser13child_segment0NCINvNtB4_8sequence8precededBC_cBE_B1x_NCINvNtNtB4_9character8complete4charBC_B1x_E0NCINvB2_3cutBC_BE_B1x_NCIB27_BC_BE_B1x_TNCIB0_BC_NtBG_8SelectorBE_B1x_NvB2E_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBE_E0EE0E0E0EE0NcNtB1k_5Child0EBG_:
   73|  28.7M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  28.7M|where
   75|  28.7M|  F: Parser<I, O1, E>,
   76|  28.7M|  G: FnMut(O1) -> O2,
   77|  28.7M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  28.7M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBJ_8SelectorNtNtBJ_5error18InternalParseErrorB1E_NCINvNtB6_8sequence8precededBF_cBH_B1E_NCINvNtNtB6_9character8complete4charBF_B1E_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB3G_15filter_selector0B1E_E0E0E0BJ_:
  672|  34.1M|  move |input: I| match parser.parse(input) {
  673|  6.61M|    Ok((i, o)) => Ok((i, o.into())),
  674|  10.2M|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  17.2M|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  34.1M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2l_BC_NvB2n_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  24.7M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  24.7M|where
  241|  24.7M|  F: Parser<I, O, E>,
  242|  24.7M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  24.7M|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBM_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1v_E0E00BM_:
  460|  5.37M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser14string_literalE0BL_:
  672|  29.2M|  move |input: I| match parser.parse(input) {
  673|  1.35k|    Ok((i, o)) => Ok((i, o.into())),
  674|  29.1M|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  25.8k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB2Z_6digit1BK_BP_EE0B3C_EE0E0BT_:
  512|   122M|  move |input: I| {
  513|   122M|    let i = input.clone();
  514|   122M|    match parser.parse(i) {
  515|  4.49M|      Ok((i, _)) => {
  516|  4.49M|        let index = input.offset(&i);
  517|  4.49M|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   118M|      Err(e) => Err(e),
  520|       |    }
  521|   122M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1m_TNCNvNtBI_6parser18descendant_segment0NCINvB4_3mapBE_NtBI_8SelectorBG_B1m_NvB2t_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2t_21member_name_shorthandNCINvB2t_14failed_segmentBG_E0EE0E0BI_:
  635|  13.3M|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  13.3M|    rest => rest,
  638|  13.3M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBK_INtNtCslATUeuPuGvJ_4core6option6OptionBK_EBQ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence5tupleBK_BM_B1A_TINvNtNtB6_9character8complete6digit1BK_B1A_ENCINvB4_3optBK_BK_B1A_NCINvB2D_8precededBK_cBK_B1A_NCINvB3b_4charBK_B1A_E0B38_E0E0NCIB3T_BK_BK_B1A_NCIB4f_BK_BK_BK_B1A_NCINvNtNtB6_5bytes8complete11tag_no_caseBK_BK_B1A_E0NCIB4f_BK_IBR_cEBK_B1A_NCIB3T_BK_cB1A_NCINvNtB6_6branch3altBK_cB1A_TB4F_B4F_EE0E0B38_E0E0E0EE0E0B1E_:
  512|  29.2M|  move |input: I| {
  513|  29.2M|    let i = input.clone();
  514|  29.2M|    match parser.parse(i) {
  515|  38.6k|      Ok((i, _)) => {
  516|  38.6k|        let index = input.offset(&i);
  517|  38.6k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  29.2M|      Err(e) => Err(e),
  520|       |    }
  521|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser13child_segment0NCINvNtB6_8sequence8precededBE_cBG_B1z_NCINvNtNtB6_9character8complete4charBE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCIB29_BE_BG_B1z_TNCIB2_BE_NtBI_8SelectorBG_B1z_NvB2G_17wildcard_selectorNvMst_BI_BG_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBG_E0EE0E0E0EE0NcNtB1m_5Child0E0BI_:
   78|  28.7M|  move |input: I| {
   79|  28.7M|    let (input, o1) = parser.parse(input)?;
   80|   599k|    Ok((input, f(o1)))
   81|  28.7M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1K_3intBH_E0EBL_:
  239|  49.5M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  49.5M|where
  241|  49.5M|  F: Parser<I, O, E>,
  242|  49.5M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  49.5M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNvNtBI_6parser14string_literalNcNtB1s_4Name0EBI_:
   73|  61.3M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  61.3M|where
   75|  61.3M|  F: Parser<I, O1, E>,
   76|  61.3M|  G: FnMut(O1) -> O2,
   77|  61.3M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  61.3M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1n_E0EBI_:
  453|  87.7M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  87.7M|  val: O1,
  455|  87.7M|  mut parser: F,
  456|  87.7M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  87.7M|where
  458|  87.7M|  F: Parser<I, O2, E>,
  459|  87.7M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  87.7M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReTBI_INtNtCslATUeuPuGvJ_4core6option6OptionBI_EBO_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence5tupleBI_BK_B1y_TINvNtNtB4_9character8complete6digit1BI_B1y_ENCINvB2_3optBI_BI_B1y_NCINvB2B_8precededBI_cBI_B1y_NCINvB39_4charBI_B1y_E0B36_E0E0NCIB3R_BI_BI_B1y_NCIB4d_BI_BI_BI_B1y_NCINvNtNtB4_5bytes8complete11tag_no_caseBI_BI_B1y_E0NCIB4d_BI_IBP_cEBI_B1y_NCIB3R_BI_cB1y_NCINvNtB4_6branch3altBI_cB1y_TB4D_B4D_EE0E0B36_E0E0E0EE0EB1C_:
  506|  29.2M|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  29.2M|  mut parser: F,
  508|  29.2M|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  29.2M|where
  510|  29.2M|  F: Parser<I, O, E>,
  511|  29.2M|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete4charBF_uE0E0CsmyidsRPtaf_15rsonpath_syntax:
  308|  30.2k|  move |input: I| {
  309|  30.2k|    let i = input.clone();
  310|  30.2k|    match f.parse(input) {
  311|  1.12k|      Ok((_, o)) => Ok((i, o)),
  312|  29.1k|      Err(e) => Err(e),
  313|       |    }
  314|  30.2k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2X_6digit1BI_BN_EE0B3A_EE0EBR_:
  506|   122M|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   122M|  mut parser: F,
  508|   122M|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   122M|where
  510|   122M|  F: Parser<I, O, E>,
  511|   122M|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   122M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BC_BH_NCINvNtNtB4_5bytes8complete11tag_no_caseBC_BC_BH_E0NCIB1I_BC_INtNtCslATUeuPuGvJ_4core6option6OptioncEBC_BH_NCIB0_BC_cBH_NCINvNtB4_6branch3altBC_cBH_TNCINvNtNtB4_9character8complete4charBC_BH_E0B4I_EE0E0INvB4N_6digit1BC_BH_EE0E0EBL_:
  239|  29.2M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  29.2M|where
  241|  29.2M|  F: Parser<I, O, E>,
  242|  29.2M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBC_BF_E0EBJ_:
  239|  24.1M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  24.1M|where
  241|  24.1M|  F: Parser<I, O, E>,
  242|  24.1M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  24.1M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser6numberEBJ_:
  663|  29.2M|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  29.2M|where
  665|  29.2M|  O1: Into<O2>,
  666|  29.2M|  E1: Into<E2>,
  667|  29.2M|  E1: ParseError<I>,
  668|  29.2M|  E2: ParseError<I>,
  669|  29.2M|  F: Parser<I, O1, E1>,
  670|  29.2M|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBI_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0NvNvNtBR_6parser5float10base_floatE0B3A_EE0EBR_:
  506|  29.2M|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|  29.2M|  mut parser: F,
  508|  29.2M|) -> impl FnMut(I) -> IResult<I, I, E>
  509|  29.2M|where
  510|  29.2M|  F: Parser<I, O, E>,
  511|  29.2M|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBH_10ComparableNtNtBH_5error18InternalParseErrorB1A_NvNtBH_6parser7literalEBH_:
  663|  5.37M|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  5.37M|where
  665|  5.37M|  O1: Into<O2>,
  666|  5.37M|  E1: Into<E2>,
  667|  5.37M|  E1: ParseError<I>,
  668|  5.37M|  E2: ParseError<I>,
  669|  5.37M|  F: Parser<I, O1, E1>,
  670|  5.37M|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  5.37M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1M_3intBJ_E0E0BN_:
  243|  25.0M|  move |input: I| {
  244|  25.0M|    let i = input.clone();
  245|  25.0M|    match f.parse(input) {
  246|  26.2k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  25.0M|      Err(Err::Error(_)) => Ok((i, None)),
  248|  2.95k|      Err(e) => Err(e),
  249|       |    }
  250|  25.0M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNvNtBK_6parser14string_literalNcNtB1u_4Name0E0BK_:
   78|  61.3M|  move |input: I| {
   79|  61.3M|    let (input, o1) = parser.parse(input)?;
   80|  14.1k|    Ok((input, f(o1)))
   81|  61.3M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1z_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1z_E0NCINvB4_3cutBE_BG_B1z_NCINvNtB6_6branch3altBE_BG_B1z_TNCNvNtBI_6parser18descendant_segment0NCIB2_BE_NtBI_8SelectorBG_B1z_NvB4o_17wildcard_selectorNvMst_BI_BG_3oneE0NvB4o_21member_name_shorthandNCINvB4o_14failed_segmentBG_E0EE0E0E0NcNtB1m_10Descendant0E0BI_:
   78|  42.1M|  move |input: I| {
   79|  42.1M|    let (input, o1) = parser.parse(input)?;
   80|  72.1k|    Ok((input, f(o1)))
   81|  42.1M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBC_cBF_TNCINvNtNtB4_9character8complete4charBC_BF_E0B26_EE0EBJ_:
  239|  29.2M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  29.2M|where
  241|  29.2M|  F: Parser<I, O, E>,
  242|  29.2M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReBE_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1o_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  75.5M|  move |input: I| {
   79|  75.5M|    let (input, o1) = parser.parse(input)?;
   80|  26.5k|    Ok((input, f(o1)))
   81|  75.5M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCNvNtBG_6parser18descendant_segment0NCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvB2r_17wildcard_selectorNvMst_BG_BE_3oneE0NvB2r_21member_name_shorthandNCINvB2r_14failed_segmentBE_E0EE0EBG_:
  631|  42.1M|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  42.1M|where
  633|  42.1M|  F: Parser<I, O, E>,
  634|  42.1M|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  42.1M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBE_BH_E0E0BL_:
  243|  24.1M|  move |input: I| {
  244|  24.1M|    let i = input.clone();
  245|  24.1M|    match f.parse(input) {
  246|  3.15k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  24.1M|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  24.1M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtBH_8SelectorNtNtBH_5error18InternalParseErrorB1C_NCINvNtB4_8sequence8precededBD_cBF_B1C_NCINvNtNtB4_9character8complete4charBD_B1C_E0NCINvNtBH_6parser17ignore_whitespaceBF_NCNvB3E_15filter_selector0B1C_E0E0EBH_:
  663|  34.1M|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  34.1M|where
  665|  34.1M|  O1: Into<O2>,
  666|  34.1M|  E1: Into<E2>,
  667|  34.1M|  E1: ParseError<I>,
  668|  34.1M|  E2: ParseError<I>,
  669|  34.1M|  F: Parser<I, O1, E1>,
  670|  34.1M|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  34.1M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete6one_ofBD_BD_uE0ECsmyidsRPtaf_15rsonpath_syntax:
  304|  71.1M|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  71.1M|where
  306|  71.1M|  F: Parser<I, O, E>,
  307|  71.1M|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  71.1M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMst_BI_B1l_3oneE0BI_:
   78|  14.3M|  move |input: I| {
   79|  14.3M|    let (input, o1) = parser.parse(input)?;
   80|  15.4k|    Ok((input, f(o1)))
   81|  14.3M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMst_BG_B1j_3oneEBG_:
   73|  70.8M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  70.8M|where
   75|  70.8M|  F: Parser<I, O1, E>,
   76|  70.8M|  G: FnMut(O1) -> O2,
   77|  70.8M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  70.8M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBM_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1G_E0E0BM_:
  460|  29.3M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBI_10JsonNumberNtNtBK_5error18InternalParseErrorNvNtBK_6parser5floatNCNvB2i_6number0E0BK_:
   78|  29.2M|  move |input: I| {
   79|  29.2M|    let (input, o1) = parser.parse(input)?;
   80|  37.4k|    Ok((input, f(o1)))
   81|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB6_9character8complete6one_ofBF_BF_uE0E0CsmyidsRPtaf_15rsonpath_syntax:
  308|  71.1M|  move |input: I| {
  309|  71.1M|    let i = input.clone();
  310|  71.1M|    match f.parse(input) {
  311|  42.0M|      Ok((_, o)) => Ok((i, o)),
  312|  29.0M|      Err(e) => Err(e),
  313|       |    }
  314|  71.1M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3num9JsonFloatNtBG_10JsonNumberNtNtBI_5error18InternalParseErrorNvNtBI_6parser5floatNCNvB2g_6number0EBI_:
   73|  29.2M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  29.2M|where
   75|  29.2M|  F: Parser<I, O1, E>,
   76|  29.2M|  G: FnMut(O1) -> O2,
   77|  29.2M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBK_5error18InternalParseErrorNCINvBI_17ignore_whitespaceBE_NCINvNtB4_6branch3altBC_BE_B1J_TNCINvB2_5valueBC_BE_BC_B1J_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1J_E0E0B3g_EE0B1J_E0EBK_:
  239|  6.63M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  6.63M|where
  241|  6.63M|  F: Parser<I, O, E>,
  242|  6.63M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  6.63M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBE_BJ_NCINvNtNtB6_9character8complete4charBE_BJ_E0INvB2o_6digit1BE_BJ_EE0E0BN_:
  243|  38.6k|  move |input: I| {
  244|  38.6k|    let i = input.clone();
  245|  38.6k|    match f.parse(input) {
  246|    930|      Ok((i, o)) => Ok((i, Some(o))),
  247|  37.6k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  38.6k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBG_5error18InternalParseErrorNCNvNvNtBG_6parser12logical_expr12parse_single0EBG_:
  631|   300k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|   300k|where
  633|   300k|  F: Parser<I, O, E>,
  634|   300k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|   300k|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBE_NtNtBM_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1O_E0EBM_:
  453|  13.2M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  13.2M|  val: O1,
  455|  13.2M|  mut parser: F,
  456|  13.2M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  13.2M|where
  458|  13.2M|  F: Parser<I, O2, E>,
  459|  13.2M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  13.2M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecuNCINvNtNtB4_9character8complete4charBD_uE0ECsmyidsRPtaf_15rsonpath_syntax:
  304|  30.2k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  30.2k|where
  306|  30.2k|  F: Parser<I, O, E>,
  307|  30.2k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  30.2k|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBO_5error18InternalParseErrorNCINvNtNtB8_9character8complete4charBI_B1I_E0E00BO_:
  460|  29.0M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2n_BE_NvB2p_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  24.7M|  move |input: I| {
  244|  24.7M|    let i = input.clone();
  245|  24.7M|    match f.parse(input) {
  246|   318k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  24.4M|      Err(Err::Error(_)) => Ok((i, None)),
  248|    724|      Err(e) => Err(e),
  249|       |    }
  250|  24.7M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1m_TNCINvB4_3mapBE_NtBI_8SelectorBG_B1m_NvNtBI_6parser17wildcard_selectorNvMst_BI_BG_3oneE0NvB31_21member_name_shorthandNCINvB31_14failed_segmentBG_E0EE0E0BI_:
  635|  1.00M|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  1.00M|    rest => rest,
  638|  1.00M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtBL_7LiteralNtNtBL_5error18InternalParseErrorB1I_NvNtBL_6parser6numberE0BL_:
  672|  29.2M|  move |input: I| match parser.parse(input) {
  673|  37.4k|    Ok((i, o)) => Ok((i, o.into())),
  674|  29.2M|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  1.17k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str17JsonStringBuilderNtBK_9SelectorsNtNtBK_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBG_B1Q_NCINvB4_4peekBE_cB1Q_NvNvNtBK_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BE_cB1Q_NvB3n_9name_charNCB3n_0NvMs_BI_BG_3newBG_E0E0NCB3n_s_0E0BK_:
   78|  14.3M|  move |input: I| {
   79|  14.3M|    let (input, o1) = parser.parse(input)?;
   80|   650k|    Ok((input, f(o1)))
   81|  14.3M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBE_cBH_TNCINvNtNtB6_9character8complete4charBE_BH_E0B28_EE0E0BL_:
  243|  22.7k|  move |input: I| {
  244|  22.7k|    let i = input.clone();
  245|  22.7k|    match f.parse(input) {
  246|    447|      Ok((i, o)) => Ok((i, Some(o))),
  247|  22.3k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  22.7k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtBJ_10ComparableNtNtBJ_5error18InternalParseErrorB1C_NvNtBJ_6parser7literalE0BJ_:
  672|  5.37M|  move |input: I| match parser.parse(input) {
  673|  5.55k|    Ok((i, o)) => Ok((i, o.into())),
  674|  5.34M|    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|  26.0k|    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|      0|    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|  5.37M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBG_NtNtBO_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1Q_E0E0BO_:
  460|  13.2M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1k_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1k_NvNtBG_6parser17wildcard_selectorNvMst_BG_BE_3oneE0NvB2Z_21member_name_shorthandNCINvB2Z_14failed_segmentBE_E0EE0EBG_:
  631|  28.7M|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  28.7M|where
  633|  28.7M|  F: Parser<I, O, E>,
  634|  28.7M|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  28.7M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtBM_5error18InternalParseErrorNCINvBK_17ignore_whitespaceBG_NCINvNtB6_6branch3altBE_BG_B1L_TNCINvB4_5valueBE_BG_BE_B1L_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1L_E0E0B3i_EE0B1L_E0E0BM_:
  243|  6.63M|  move |input: I| {
  244|  6.63M|    let i = input.clone();
  245|  6.63M|    match f.parse(input) {
  246|  8.44k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  6.62M|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  6.63M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtBK_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1E_E0EBK_:
  453|  58.3M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  58.3M|  val: O1,
  455|  58.3M|  mut parser: F,
  456|  58.3M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  58.3M|where
  458|  58.3M|  F: Parser<I, O2, E>,
  459|  58.3M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  58.3M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBE_NtNtBI_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1t_E0EBI_:
  453|  47.5M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  47.5M|  val: O1,
  455|  47.5M|  mut parser: F,
  456|  47.5M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  47.5M|where
  458|  47.5M|  F: Parser<I, O2, E>,
  459|  47.5M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  47.5M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtBJ_7LiteralNtNtBJ_5error18InternalParseErrorB1G_NvNtBJ_6parser14string_literalEBJ_:
  663|  29.2M|pub fn into<I, O1, O2, E1, E2, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O2, E2>
  664|  29.2M|where
  665|  29.2M|  O1: Into<O2>,
  666|  29.2M|  E1: Into<E2>,
  667|  29.2M|  E1: ParseError<I>,
  668|  29.2M|  E2: ParseError<I>,
  669|  29.2M|  F: Parser<I, O1, E1>,
  670|  29.2M|{
  671|       |  //map(parser, Into::into)
  672|       |  move |input: I| match parser.parse(input) {
  673|       |    Ok((i, o)) => Ok((i, o.into())),
  674|       |    Err(Err::Error(e)) => Err(Err::Error(e.into())),
  675|       |    Err(Err::Failure(e)) => Err(Err::Failure(e.into())),
  676|       |    Err(Err::Incomplete(e)) => Err(Err::Incomplete(e)),
  677|       |  }
  678|  29.2M|}
_RNCNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpBI_NtNtBQ_5error18InternalParseErrorNCINvNtNtB8_5bytes8complete3tagBI_BI_B1S_E0E00BQ_:
  460|  8.44k|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  61.1M|  move |input: I| {
  244|  61.1M|    let i = input.clone();
  245|  61.1M|    match f.parse(input) {
  246|  2.24M|      Ok((i, o)) => Ok((i, Some(o))),
  247|  58.9M|      Err(Err::Error(_)) => Ok((i, None)),
  248|  2.18k|      Err(e) => Err(e),
  249|       |    }
  250|  61.1M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1p_E0E0BK_:
  460|  87.5M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBC_BH_NCINvNtNtB4_9character8complete4charBC_BH_E0INvB2m_6digit1BC_BH_EE0EBL_:
  239|  29.2M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  29.2M|where
  241|  29.2M|  F: Parser<I, O, E>,
  242|  29.2M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpBG_NtNtBK_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1v_E0E0BK_:
  460|  47.5M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RINvNtCs6HefjSGhhBw_3nom10combinator4peekRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtBK_6parser21member_name_shorthand10name_firstEBK_:
  304|  14.3M|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  14.3M|where
  306|  14.3M|  F: Parser<I, O, E>,
  307|  14.3M|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  14.3M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator9recognizeReBK_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0NvNvNtBT_6parser5float10base_floatE0B3C_EE0E0BT_:
  512|  29.2M|  move |input: I| {
  513|  29.2M|    let i = input.clone();
  514|  29.2M|    match parser.parse(i) {
  515|  38.6k|      Ok((i, _)) => {
  516|  38.6k|        let index = input.offset(&i);
  517|  38.6k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  29.2M|      Err(e) => Err(e),
  520|       |    }
  521|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBI_5error18InternalParseErrorNCNvNvNtBI_6parser12logical_expr12parse_single0E0BI_:
  635|   300k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|   300k|    rest => rest,
  638|   300k|  }
_RNCINvNtCs6HefjSGhhBw_3nom10combinator4peekRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtBM_6parser21member_name_shorthand10name_firstE0BM_:
  308|  14.3M|  move |input: I| {
  309|  14.3M|    let i = input.clone();
  310|  14.3M|    match f.parse(input) {
  311|   650k|      Ok((_, o)) => Ok((i, o)),
  312|  13.7M|      Err(e) => Err(e),
  313|       |    }
  314|  14.3M|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReBC_NtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1m_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  75.5M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  75.5M|where
   75|  75.5M|  F: Parser<I, O1, E>,
   76|  75.5M|  G: FnMut(O1) -> O2,
   77|  75.5M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  75.5M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator3optReBC_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  61.1M|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  61.1M|where
  241|  61.1M|  F: Parser<I, O, E>,
  242|  61.1M|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  61.1M|}
_RNCINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBK_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1t_E0E0BK_:
  460|  18.4M|  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
_RNCINvNtCs6HefjSGhhBw_3nom10combinator3optReBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BE_BJ_NCINvNtNtB6_5bytes8complete11tag_no_caseBE_BE_BJ_E0NCIB1K_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BJ_NCIB2_BE_cBJ_NCINvNtB6_6branch3altBE_cBJ_TNCINvNtNtB6_9character8complete4charBE_BJ_E0B4K_EE0E0INvB4P_6digit1BE_BJ_EE0E0E0BN_:
  243|  38.6k|  move |input: I| {
  244|  38.6k|    let i = input.clone();
  245|  38.6k|    match f.parse(input) {
  246|    831|      Ok((i, o)) => Ok((i, Some(o))),
  247|  37.7k|      Err(Err::Error(_)) => Ok((i, None)),
  248|      0|      Err(e) => Err(e),
  249|       |    }
  250|  38.6k|  }
_RINvNtCs6HefjSGhhBw_3nom10combinator3mapReNtNtCsmyidsRPtaf_15rsonpath_syntax3str17JsonStringBuilderNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBE_B1O_NCINvB2_4peekBC_cB1O_NvNvNtBI_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BC_cB1O_NvB3l_9name_charNCB3l_0NvMs_BG_BE_3newBE_E0E0NCB3l_s_0EBI_:
   73|  14.3M|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  14.3M|where
   75|  14.3M|  F: Parser<I, O1, E>,
   76|  14.3M|  G: FnMut(O1) -> O2,
   77|  14.3M|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  14.3M|}
_RINvNtCs6HefjSGhhBw_3nom10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtBI_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1r_E0EBI_:
  453|  23.7M|pub fn value<I, O1: Clone, O2, E: ParseError<I>, F>(
  454|  23.7M|  val: O1,
  455|  23.7M|  mut parser: F,
  456|  23.7M|) -> impl FnMut(I) -> IResult<I, O1, E>
  457|  23.7M|where
  458|  23.7M|  F: Parser<I, O2, E>,
  459|  23.7M|{
  460|       |  move |input: I| parser.parse(input).map(|(i, _)| (i, val.clone()))
  461|  23.7M|}

_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charB6_:
   26|   455M|  fn from_char(input: I, _: char) -> Self {
   27|   455M|    Self::from_error_kind(input, ErrorKind::Char)
   28|   455M|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsmyidsRPtaf_15rsonpath_syntax:
   77|   280M|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   280M|    other
   79|   280M|  }
_RNvXs_NtCs6HefjSGhhBw_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
   73|   978M|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|   978M|    Error { input, code: kind }
   75|   978M|  }
_RNvYINtNtCs6HefjSGhhBw_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|   107M|  fn from_char(input: I, _: char) -> Self {
   27|   107M|    Self::from_error_kind(input, ErrorKind::Char)
   28|   107M|  }
_RNvYNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE2orB6_:
   32|   579M|  fn or(self, other: Self) -> Self {
   33|   579M|    other
   34|   579M|  }
_RNvXs7_NtCs6HefjSGhhBw_3nom5erroruINtB5_10ParseErrorReE15from_error_kindCsmyidsRPtaf_15rsonpath_syntax:
  122|  52.9M|  fn from_error_kind(_: I, _: ErrorKind) -> Self {}
_RNvYuINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE9from_charCsmyidsRPtaf_15rsonpath_syntax:
   26|  23.9M|  fn from_char(input: I, _: char) -> Self {
   27|  23.9M|    Self::from_error_kind(input, ErrorKind::Char)
   28|  23.9M|  }

_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  61.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.1M|    self(i)
  326|  61.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser18descendant_segment0NCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  13.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.3M|    self(i)
  326|  13.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3num10JsonNumberNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser6numberE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete11tag_no_caseReB1c_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB1c_B1c_B1i_E5parseB1m_:
  324|  38.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  38.6k|    self(i)
  326|  38.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3intINtB5_6ParserReB1u_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  86.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  86.2M|    self(i)
  326|  86.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  13.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.3M|    self(i)
  326|  13.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  75.5M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  75.5M|    self(i)
  326|  75.5M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  32.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.4k|    self(i)
  326|  32.4k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpNtNtB11_5error18InternalParseErrorTNCINvNtB7_10combinator5valueBT_BV_BT_B20_NCINvNtNtB7_5bytes8complete3tagBT_BT_B20_E0E0B2z_EE0INtB5_6ParserBT_BV_B20_E5parseB11_:
  324|  6.63M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.63M|    self(i)
  326|  6.63M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  36.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  36.3M|    self(i)
  326|  36.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  42.0M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  42.0M|    self(i)
  326|  42.0M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  28.6M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  28.6M|    self(i)
  326|  28.6M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1G_TNCINvBD_3mapBY_NtB12_8SelectorB10_B1G_NvNtB12_6parser17wildcard_selectorNvMst_B12_B10_3oneE0NvB3p_21member_name_shorthandNCINvB3p_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1G_E5parseB12_:
  324|  1.00M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.00M|    self(i)
  326|  1.00M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpcNtNtB14_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1N_E0E0INtB5_6ParserB10_B12_B1N_E5parseB14_:
  324|  18.4M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.4M|    self(i)
  326|  18.4M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0INtB5_6ParserReNtBE_8SelectorNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  34.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  34.1M|    self(i)
  326|  34.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  23.8M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.8M|    self(i)
  326|  23.8M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0INtB5_6ParserReNtBG_11LogicalExprNtNtBG_5error18InternalParseErrorE5parseBG_:
  324|   300k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   300k|    self(i)
  326|   300k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralNtB13_10ComparableNtNtB13_5error18InternalParseErrorB1X_NvNtB13_6parser7literalE0INtB5_6ParserBZ_B1F_B1X_E5parseB13_:
  324|  5.37M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.37M|    self(i)
  326|  5.37M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2E_6digit1BT_BY_EE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   122M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   122M|    self(i)
  326|   122M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1B_NvNtBX_6parser17wildcard_selectorNvMst_BX_BV_3oneE0NvB2Z_21member_name_shorthandNCINvB2Z_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  1.00M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.00M|    self(i)
  326|  1.00M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_6branch3altBY_cB11_TNCINvNtNtB7_9character8complete4charBY_B11_E0B2t_EE0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|  22.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.7k|    self(i)
  326|  22.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1R_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1R_E5parseB17_:
  324|   180M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   180M|    self(i)
  326|   180M|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B1Z_E6finishB1c_:
   36|  42.1M|  fn finish(self) -> Result<(I, O), E> {
   37|  41.4M|    match self {
   38|   671k|      Ok(res) => Ok(res),
   39|  41.4M|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  42.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCNvNtBX_6parser13child_segment0NCINvNtB7_8sequence8precededBT_cBV_B1B_NCINvNtNtB7_9character8complete4charBT_B1B_E0NCINvNtB7_10combinator3cutBT_BV_B1B_NCIBB_BT_BV_B1B_TNCINvB46_3mapBT_NtBX_8SelectorBV_B1B_NvB2d_17wildcard_selectorNvMst_BX_BV_3oneE0NvB2d_21member_name_shorthandNCINvB2d_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1B_E5parseBX_:
  324|  28.7M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  28.7M|    self(i)
  326|  28.7M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1M_E0NCINvNtB7_10combinator3cutB10_B16_B1M_NCINvNtB7_6branch3altB10_B16_B1M_TNCNvNtB18_6parser18descendant_segment0NCINvB38_3mapB10_NtB18_8SelectorB16_B1M_NvB4h_17wildcard_selectorNvMst_B18_B16_3oneE0NvB4h_21member_name_shorthandNCINvB4h_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1M_E5parseB18_:
  324|  42.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  42.1M|    self(i)
  326|  42.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  24.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  24.1M|    self(i)
  326|  24.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str17JsonStringBuilderNtNtB17_5error18InternalParseErrorNCINvNtB7_10combinator4peekB10_cB1Y_NvNvNtB17_6parser21member_name_shorthand10name_firstE0NCINvNtB7_5multi10fold_many0B10_cB1Y_NvB38_9name_charNCB38_0NvMs_B15_B13_3newB13_E0E0INtB5_6ParserB10_B13_B1Y_E5parseB17_:
  324|  14.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.3M|    self(i)
  326|  14.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_5multi10fold_many0RecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtB17_6parser21member_name_shorthand9name_charNCB23_0NvMs_NtB17_3strNtB31_17JsonStringBuilder3newB3b_E0INtB5_6ParserB10_B3b_B13_E5parseB17_:
  324|   650k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   650k|    self(i)
  326|   650k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtNtB7_9character8complete4charBT_BW_E0B1V_EE0INtB5_6ParserBT_cBW_E5parseB10_:
  324|  22.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.7k|    self(i)
  326|  22.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB26_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|   319k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   319k|    self(i)
  326|   319k|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsmyidsRPtaf_15rsonpath_syntax:
   36|  4.63k|  fn finish(self) -> Result<(I, O), E> {
   37|  4.41k|    match self {
   38|    222|      Ok(res) => Ok(res),
   39|  4.41k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  4.63k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtBF_9SelectorsE0INtB5_6ParserReB1w_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  13.7M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.7M|    self(i)
  326|  13.7M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4peekRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtB16_6parser21member_name_shorthand10name_firstE0INtB5_6ParserBZ_cB12_E5parseB16_:
  324|  14.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.3M|    self(i)
  326|  14.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6numberINtB5_6ParserReNtNtBC_3num10JsonNumberNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  61.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.1M|    self(i)
  326|  61.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literalINtB5_6ParserReNtNtBC_3str10JsonStringNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  90.5M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  90.5M|    self(i)
  326|  90.5M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optRecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charBY_B11_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptioncEB11_E5parseB15_:
  324|  24.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  24.1M|    self(i)
  326|  24.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1z_B1z_B1K_E5parseBF_:
  324|  25.0M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  25.0M|    self(i)
  326|  25.0M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence5tupleReTBX_INtNtCslATUeuPuGvJ_4core6option6OptionBX_EB13_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB7_9character8complete6digit1BX_B1O_ENCINvNtB7_10combinator3optBX_BX_B1O_NCINvBD_8precededBX_cBX_B1O_NCINvB2Q_4charBX_B1O_E0B2N_E0E0NCIB3y_BX_BX_B1O_NCIB48_BX_BX_BX_B1O_NCINvNtNtB7_5bytes8complete11tag_no_caseBX_BX_B1O_E0NCIB48_BX_IB14_cEBX_B1O_NCIB3y_BX_cB1O_NCINvNtB7_6branch3altBX_cB1O_TB4x_B4x_EE0E0B2N_E0E0E0EE0INtB5_6ParserBX_BZ_B1O_E5parseB1S_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_cBY_B13_NCINvNtNtB7_9character8complete4charBY_B13_E0INvB2J_6digit1BY_B13_EE0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  38.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  38.6k|    self(i)
  326|  38.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   525M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   525M|    self(i)
  326|   525M|  }
_RNvXNtCs6HefjSGhhBw_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  61.3M|  fn finish(self) -> Result<(I, O), E> {
   37|  27.7M|    match self {
   38|  33.6M|      Ok(res) => Ok(res),
   39|  27.7M|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  61.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_8sequence8precededBY_BY_BY_B13_NCINvNtNtB7_5bytes8complete11tag_no_caseBY_BY_B13_E0NCIB24_BY_INtNtCslATUeuPuGvJ_4core6option6OptioncEBY_B13_NCIBB_BY_cB13_NCINvNtB7_6branch3altBY_cB13_TNCINvNtNtB7_9character8complete4charBY_B13_E0B59_EE0E0INvB5e_6digit1BY_B13_EE0E0E0INtB5_6ParserBY_IB3H_BY_EB13_E5parseB17_:
  324|  38.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  38.6k|    self(i)
  326|  38.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2b_E5parseBF_:
  324|  61.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.1M|    self(i)
  326|  61.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   266M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   266M|    self(i)
  326|   266M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_charINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  1.30M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.30M|    self(i)
  326|  1.30M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtBF_7SegmentE0INtB5_6ParserReB1w_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  6.15k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.15k|    self(i)
  326|  6.15k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete4charReuE0INtB5_6ParserB18_cuE5parseCsmyidsRPtaf_15rsonpath_syntax:
  324|  30.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  30.2k|    self(i)
  326|  30.2k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax12ComparisonOpB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1Q_E0E0INtB5_6ParserB10_B12_B1Q_E5parseB14_:
  324|  47.5M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  47.5M|    self(i)
  326|  47.5M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReB10_B10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_5bytes8complete11tag_no_caseB10_B10_B1a_E0NCIBB_B10_INtNtCslATUeuPuGvJ_4core6option6OptioncEB10_B1a_NCINvNtB7_10combinator3optB10_cB1a_NCINvNtB7_6branch3altB10_cB1a_TNCINvNtNtB7_9character8complete4charB10_B1a_E0B50_EE0E0INvB55_6digit1B10_B1a_EE0E0INtB5_6ParserB10_B10_B1a_E5parseB1e_:
  324|  38.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  38.6k|    self(i)
  326|  38.6k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B28_E5parseBF_:
  324|  36.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  36.3M|    self(i)
  326|  36.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete7satisfyNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB1j_5error18InternalParseErrorE0INtB5_6ParserB2s_cB2u_E5parseB1j_:
  324|   651k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   651k|    self(i)
  326|   651k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  61.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.1M|    self(i)
  326|  61.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNtCsmyidsRPtaf_15rsonpath_syntax6parser16RootSelectorTypecNtNtB16_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B20_E0E0INtB5_6ParserB10_B12_B20_E5parseB16_:
  324|  29.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.3M|    self(i)
  326|  29.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B27_E5parseBF_:
  324|  61.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.3M|    self(i)
  326|  61.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvBD_12logical_expr9BooleanOpNCINvNtB7_6branch3altReB1z_NtNtBF_5error18InternalParseErrorTNCINvNtB7_10combinator5valueB2p_B1z_B2p_B2v_NCINvNtNtB7_5bytes8complete3tagB2p_B2p_B2v_E0E0B33_EE0B2v_E0INtB5_6ParserB2p_B1z_B2v_E5parseBF_:
  324|  6.63M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.63M|    self(i)
  326|  6.63M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5floatINtB5_6ParserReNtNtBC_3num9JsonFloatNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_floatINtB5_6ParserReB1K_NtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtNtB7_9character8complete6one_ofReB1a_uE0INtB5_6ParserB1a_cuE5parseCsmyidsRPtaf_15rsonpath_syntax:
  324|  71.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  71.1M|    self(i)
  326|  71.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0INtB5_6ParserReNtBE_9SelectorsNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  28.7M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  28.7M|    self(i)
  326|  28.7M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1M_E0NCINvNtB15_6parser17ignore_whitespaceB13_NCNvB39_15filter_selector0B1M_E0E0INtB5_6ParserB10_B13_B1M_E5parseB15_:
  324|  34.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  34.1M|    self(i)
  326|  34.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1J_E0NCINvNtB7_10combinator3cutB10_B13_B1J_NCINvNtB7_6branch3altB10_B13_B1J_TNCINvB36_3mapB10_NtB15_8SelectorB13_B1J_NvNtB15_6parser17wildcard_selectorNvMst_B15_B13_3oneE0NvB4R_21member_name_shorthandNCINvB4R_14failed_segmentB13_E0EE0E0E0INtB5_6ParserB10_B13_B1J_E5parseB15_:
  324|  1.01M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  1.01M|    self(i)
  326|  1.01M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  4.35k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.35k|    self(i)
  326|  4.35k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2b_cB1z_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2b_B2P_E0NCINvNtB7_10combinator3optB2b_B2b_B2P_NCIBB_B2b_NvBD_3intB2P_E0E0E0B2P_E0INtB5_6ParserB2b_B1z_B2P_E5parseBF_:
  324|  24.7M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  24.7M|    self(i)
  326|  24.7M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0NvNvNtB12_6parser5float10base_floatE0B3h_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0INtB5_6ParserReNtBE_11LogicalExprNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  4.09k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.09k|    self(i)
  326|  4.09k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15failed_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  10.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.2M|    self(i)
  326|  10.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNCNvBD_8selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B24_E5parseBF_:
  324|  34.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  34.1M|    self(i)
  326|  34.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr9BooleanOpB10_NtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B2b_E0E0INtB5_6ParserB10_B12_B2b_E5parseB18_:
  324|  13.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.2M|    self(i)
  326|  13.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  61.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.3M|    self(i)
  326|  61.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtBF_11LogicalExprNCNvBD_15filter_selector0NtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1z_B2g_E5parseBF_:
  324|  23.8M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  23.8M|    self(i)
  326|  23.8M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB7_10combinator3optB10_cB1K_NCINvNtB7_6branch3altB10_cB1K_TNCINvNtNtB7_9character8complete4charB10_B1K_E0B3M_EE0E0INvB3R_6digit1B10_B1K_EE0INtB5_6ParserB10_B10_B1K_E5parseB1O_:
  324|  22.7k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  22.7k|    self(i)
  326|  22.7k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literalINtB5_6ParserReNtBC_7LiteralNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  5.37M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.37M|    self(i)
  326|  5.37M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB49_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  24.7M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  24.7M|    self(i)
  326|  24.7M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator4intoReNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtB15_7LiteralNtNtB15_5error18InternalParseErrorB23_NvNtB15_6parser14string_literalE0INtB5_6ParserBZ_B1P_B23_E5parseB15_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3mapReNtCsmyidsRPtaf_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMst_B12_B1F_3oneE0INtB5_6ParserBY_B1F_B1V_E5parseB12_:
  324|  14.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.3M|    self(i)
  326|  14.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator5valueReNtCsmyidsRPtaf_15rsonpath_syntax7LiteralB10_NtNtB14_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1K_E0E0INtB5_6ParserB10_B12_B1K_E5parseB14_:
  324|  87.5M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  87.5M|    self(i)
  326|  87.5M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0INtB5_6ParserReNtBE_10ComparableNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  5.34M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  5.34M|    self(i)
  326|  5.34M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0NvNvNtB1b_6parser5float10base_floatE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|  29.2M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.2M|    self(i)
  326|  29.2M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_firstINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  15.6M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  15.6M|    self(i)
  326|  15.6M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2a_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   122M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   122M|    self(i)
  326|   122M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthandINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  14.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  14.3M|    self(i)
  326|  14.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|   151M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   151M|    self(i)
  326|   151M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2c_E0INtB5_6ParserB2a_cB2c_E5parseBF_:
  324|  61.1M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.1M|    self(i)
  326|  61.1M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0INtB5_6ParserReNtBE_7SegmentNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  45.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  45.3k|    self(i)
  326|  45.3k|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCINvNtB7_10combinator3cutReNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1G_TNCNvNtB12_6parser18descendant_segment0NCINvBD_3mapBY_NtB12_8SelectorB10_B1G_NvB2P_17wildcard_selectorNvMst_B12_B10_3oneE0NvB2P_21member_name_shorthandNCINvB2P_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1G_E5parseB12_:
  324|  13.3M|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  13.3M|    self(i)
  326|  13.3M|  }
_RNvXsa_NtCs6HefjSGhhBw_3nom8internalNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   215k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   215k|    self(i)
  326|   215k|  }

_RNCINvNtCs6HefjSGhhBw_3nom5multi10fold_many0RecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtBN_6parser21member_name_shorthand9name_charNCB1J_0NvMs_NtBN_3strNtB2G_17JsonStringBuilder3newB2P_E0BN_:
  701|   650k|  move |i: I| {
  702|   650k|    let mut res = init();
  703|   650k|    let mut input = i;
  704|       |
  705|  1.30M|    loop {
  706|  1.30M|      let i_ = input.clone();
  707|  1.30M|      let len = input.input_len();
  708|  1.30M|      match f.parse(i_) {
  709|   655k|        Ok((i, o)) => {
  710|   655k|          // infinite loop check: the parser must always consume
  711|   655k|          if i.input_len() == len {
  712|      0|            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|   655k|          }
  714|   655k|
  715|   655k|          res = g(res, o);
  716|   655k|          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|   650k|          return Ok((input, res));
  720|       |        }
  721|      0|        Err(e) => {
  722|      0|          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|   650k|  }
_RINvNtCs6HefjSGhhBw_3nom5multi10fold_many0RecNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNvNvNtBL_6parser21member_name_shorthand9name_charNCB1H_0NvMs_NtBL_3strNtB2E_17JsonStringBuilder3newB2N_EBL_:
  689|  14.3M|pub fn fold_many0<I, O, E, F, G, H, R>(
  690|  14.3M|  mut f: F,
  691|  14.3M|  mut init: H,
  692|  14.3M|  mut g: G,
  693|  14.3M|) -> impl FnMut(I) -> IResult<I, R, E>
  694|  14.3M|where
  695|  14.3M|  I: Clone + InputLength,
  696|  14.3M|  F: Parser<I, O, E>,
  697|  14.3M|  G: FnMut(R, O) -> R,
  698|  14.3M|  H: FnMut() -> R,
  699|  14.3M|  E: ParseError<I>,
  700|  14.3M|{
  701|       |  move |i: I| {
  702|       |    let mut res = init();
  703|       |    let mut input = i;
  704|       |
  705|       |    loop {
  706|       |      let i_ = input.clone();
  707|       |      let len = input.input_len();
  708|       |      match f.parse(i_) {
  709|       |        Ok((i, o)) => {
  710|       |          // infinite loop check: the parser must always consume
  711|       |          if i.input_len() == len {
  712|       |            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|       |          }
  714|       |
  715|       |          res = g(res, o);
  716|       |          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|       |          return Ok((input, res));
  720|       |        }
  721|       |        Err(e) => {
  722|       |          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|       |  }
  727|  14.3M|}

_RNCNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB34_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  24.7M|    second.parse(input).map(|(i, _)| (i, o1))
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3L_3intB1p_E0E0E0B1t_:
   71|  24.7M|  move |input: I| {
   72|  24.7M|    let (input, _) = first.parse(input)?;
   73|   319k|    second.parse(input)
   74|  24.7M|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3cutBG_BJ_B1p_NCINvNtB6_6branch3altBG_BJ_B1p_TNCINvB2K_3mapBG_NtBL_8SelectorBJ_B1p_NvNtBL_6parser17wildcard_selectorNvMst_BL_BJ_3oneE0NvB4o_21member_name_shorthandNCINvB4o_14failed_segmentBJ_E0EE0E0E0BL_:
   71|  1.01M|  move |input: I| {
   72|  1.01M|    let (input, _) = first.parse(input)?;
   73|  1.00M|    second.parse(input)
   74|  1.01M|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_BE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_5bytes8complete11tag_no_caseBE_BE_BM_E0NCIB0_BE_INtNtCslATUeuPuGvJ_4core6option6OptioncEBE_BM_NCINvNtB4_10combinator3optBE_cBM_NCINvNtB4_6branch3altBE_cBM_TNCINvNtNtB4_9character8complete4charBE_BM_E0B4s_EE0E0INvB4x_6digit1BE_BM_EE0EBQ_:
   63|  29.2M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  29.2M|  mut first: F,
   65|  29.2M|  mut second: G,
   66|  29.2M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  29.2M|where
   68|  29.2M|  F: Parser<I, O1, E>,
   69|  29.2M|  G: Parser<I, O2, E>,
   70|  29.2M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1q_E0NCINvNtBJ_6parser17ignore_whitespaceBH_NCNvB2L_15filter_selector0B1q_E0EBJ_:
   63|  34.1M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  34.1M|  mut first: F,
   65|  34.1M|  mut second: G,
   66|  34.1M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  34.1M|where
   68|  34.1M|  F: Parser<I, O1, E>,
   69|  34.1M|  G: Parser<I, O2, E>,
   70|  34.1M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  34.1M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0NvNvNtBO_6parser5float10base_floatEBO_:
   63|  29.2M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  29.2M|  mut first: F,
   65|  29.2M|  mut second: G,
   66|  29.2M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  29.2M|where
   68|  29.2M|  F: Parser<I, O1, E>,
   69|  29.2M|  G: Parser<I, O2, E>,
   70|  29.2M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_BG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_5bytes8complete11tag_no_caseBG_BG_BO_E0NCIB2_BG_INtNtCslATUeuPuGvJ_4core6option6OptioncEBG_BO_NCINvNtB6_10combinator3optBG_cBO_NCINvNtB6_6branch3altBG_cBO_TNCINvNtNtB6_9character8complete4charBG_BO_E0B4u_EE0E0INvB4z_6digit1BG_BO_EE0E0BS_:
   71|  38.6k|  move |input: I| {
   72|  38.6k|    let (input, _) = first.parse(input)?;
   73|  22.7k|    second.parse(input)
   74|  38.6k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax11LogicalExprNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1s_E0NCINvNtBL_6parser17ignore_whitespaceBJ_NCNvB2N_15filter_selector0B1s_E0E0BL_:
   71|  34.1M|  move |input: I| {
   72|  34.1M|    let (input, _) = first.parse(input)?;
   73|  23.8M|    second.parse(input)
   74|  34.1M|  }
_RNvXs1_NtCs6HefjSGhhBw_3nom8sequenceTINvNtNtB7_9character8complete6digit1ReNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorENCINvNtB7_10combinator3optB19_B19_B1b_NCINvB5_8precededB19_cB19_B1b_NCINvBC_4charB19_B1b_E0Bz_E0E0NCIB2d_B19_B19_B1b_NCIB2P_B19_B19_B19_B1b_NCINvNtNtB7_5bytes8complete11tag_no_caseB19_B19_B1b_E0NCIB2P_B19_INtNtCslATUeuPuGvJ_4core6option6OptioncEB19_B1b_NCIB2d_B19_cB1b_NCINvNtB7_6branch3altB19_cB1b_TB3g_B3g_EE0E0Bz_E0E0E0EINtB5_5TupleB19_TB19_IB5u_B19_EB7I_EB1b_E5parseB1f_:
  226|  29.2M|      fn parse(&mut self, input: Input) -> IResult<Input, ( $($ty),+ ), Error> {
  227|  29.2M|        tuple_trait_inner!(0, self, input, (), $($name)+)
  228|       |
  229|  29.2M|      }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str17JsonStringBuilderNtNtBN_5error18InternalParseErrorNCINvNtB6_10combinator4peekBG_cB1E_NvNvNtBN_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BG_cB1E_NvB2M_9name_charNCB2M_0NvMs_BL_BJ_3newBJ_E0E0BN_:
   71|  14.3M|  move |input: I| {
   72|  14.3M|    let (input, _) = first.parse(input)?;
   73|   650k|    second.parse(input)
   74|  14.3M|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3cutBE_BH_B1n_NCINvNtB4_6branch3altBE_BH_B1n_TNCINvB2I_3mapBE_NtBJ_8SelectorBH_B1n_NvNtBJ_6parser17wildcard_selectorNvMst_BJ_BH_3oneE0NvB4m_21member_name_shorthandNCINvB4m_14failed_segmentBH_E0EE0E0EBJ_:
   63|  28.7M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  28.7M|  mut first: F,
   65|  28.7M|  mut second: G,
   66|  28.7M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  28.7M|where
   68|  28.7M|  F: Parser<I, O1, E>,
   69|  28.7M|  G: Parser<I, O2, E>,
   70|  28.7M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  28.7M|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReBG_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1r_E0NCINvNtB6_10combinator3cutBG_BL_B1r_NCINvNtB6_6branch3altBG_BL_B1r_TNCNvNtBN_6parser18descendant_segment0NCINvB2K_3mapBG_NtBN_8SelectorBL_B1r_NvB3P_17wildcard_selectorNvMst_BN_BL_3oneE0NvB3P_21member_name_shorthandNCINvB3P_14failed_segmentBL_E0EE0E0E0BN_:
   71|  42.1M|  move |input: I| {
   72|  42.1M|    let (input, _) = first.parse(input)?;
   73|  13.3M|    second.parse(input)
   74|  42.1M|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBG_cB1p_NCINvNtB6_6branch3altBG_cB1p_TNCINvNtNtB6_9character8complete4charBG_B1p_E0B3p_EE0E0INvB3u_6digit1BG_B1p_EE0B1t_:
   71|  22.7k|  move |input: I| {
   72|  22.7k|    let (input, _) = first.parse(input)?;
   73|  22.7k|    second.parse(input)
   74|  22.7k|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBD_INtNtCslATUeuPuGvJ_4core6option6OptionBD_EBJ_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB6_9character8complete6digit1BD_B1t_ENCINvNtB6_10combinator3optBD_BD_B1t_NCINvB4_8precededBD_cBD_B1t_NCINvB2v_4charBD_B1t_E0B2s_E0E0NCIB3d_BD_BD_B1t_NCIB3N_BD_BD_BD_B1t_NCINvNtNtB6_5bytes8complete11tag_no_caseBD_BD_B1t_E0NCIB3N_BD_IBK_cEBD_B1t_NCIB3d_BD_cB1t_NCINvNtB6_6branch3altBD_cB1t_TB4c_B4c_EE0E0B2s_E0E0E0EE0B1x_:
  278|  29.2M|  move |i: I| l.parse(i)
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3J_3intB1n_E0E0EB1r_:
   63|  24.7M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  24.7M|  mut first: F,
   65|  24.7M|  mut second: G,
   66|  24.7M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  24.7M|where
   68|  24.7M|  F: Parser<I, O1, E>,
   69|  24.7M|  G: Parser<I, O2, E>,
   70|  24.7M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  24.7M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReBE_NtCsmyidsRPtaf_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1p_E0NCINvNtB4_10combinator3cutBE_BJ_B1p_NCINvNtB4_6branch3altBE_BJ_B1p_TNCNvNtBL_6parser18descendant_segment0NCINvB2I_3mapBE_NtBL_8SelectorBJ_B1p_NvB3N_17wildcard_selectorNvMst_BL_BJ_3oneE0NvB3N_21member_name_shorthandNCINvB3N_14failed_segmentBJ_E0EE0E0EBL_:
   63|  42.1M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  42.1M|  mut first: F,
   65|  42.1M|  mut second: G,
   66|  42.1M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  42.1M|where
   68|  42.1M|  F: Parser<I, O1, E>,
   69|  42.1M|  G: Parser<I, O2, E>,
   70|  42.1M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  42.1M|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1P_6digit1BG_BM_EE0BQ_:
   71|   122M|  move |input: I| {
   72|   122M|    let (input, _) = first.parse(input)?;
   73|  29.4k|    second.parse(input)
   74|   122M|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1N_6digit1BE_BK_EEBO_:
   63|   151M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   151M|  mut first: F,
   65|   151M|  mut second: G,
   66|   151M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   151M|where
   68|   151M|  F: Parser<I, O1, E>,
   69|   151M|  G: Parser<I, O2, E>,
   70|   151M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   151M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence5tupleReTBB_INtNtCslATUeuPuGvJ_4core6option6OptionBB_EBH_ENtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorTINvNtNtB4_9character8complete6digit1BB_B1r_ENCINvNtB4_10combinator3optBB_BB_B1r_NCINvB2_8precededBB_cBB_B1r_NCINvB2t_4charBB_B1r_E0B2q_E0E0NCIB3b_BB_BB_B1r_NCIB3L_BB_BB_BB_B1r_NCINvNtNtB4_5bytes8complete11tag_no_caseBB_BB_B1r_E0NCIB3L_BB_IBI_cEBB_B1r_NCIB3b_BB_cB1r_NCINvNtB4_6branch3altBB_cB1r_TB4a_B4a_EE0E0B2q_E0E0E0EEB1v_:
  275|  29.2M|pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(
  276|  29.2M|  mut l: List,
  277|  29.2M|) -> impl FnMut(I) -> IResult<I, O, E> {
  278|       |  move |i: I| l.parse(i)
  279|  29.2M|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecBG_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0NvNvNtBQ_6parser5float10base_floatE0BQ_:
   71|  29.2M|  move |input: I| {
   72|  29.2M|    let (input, _) = first.parse(input)?;
   73|  1.28k|    second.parse(input)
   74|  29.2M|  }
_RNCINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1x_E0NCNvNtBN_6parser6string0E0BN_:
   71|   180M|  move |input: I| {
   72|   180M|    let (input, _) = first.parse(input)?;
   73|   215k|    second.parse(input)
   74|   180M|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str17JsonStringBuilderNtNtBL_5error18InternalParseErrorNCINvNtB4_10combinator4peekBE_cB1C_NvNvNtBL_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BE_cB1C_NvB2K_9name_charNCB2K_0NvMs_BJ_BH_3newBH_E0EBL_:
   63|  14.3M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  14.3M|  mut first: F,
   65|  14.3M|  mut second: G,
   66|  14.3M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  14.3M|where
   68|  14.3M|  F: Parser<I, O1, E>,
   69|  14.3M|  G: Parser<I, O2, E>,
   70|  14.3M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  14.3M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededRecNtNtCsmyidsRPtaf_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1v_E0NCNvNtBL_6parser6string0EBL_:
   63|   181M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   181M|  mut first: F,
   65|   181M|  mut second: G,
   66|   181M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   181M|where
   68|   181M|  F: Parser<I, O1, E>,
   69|   181M|  G: Parser<I, O2, E>,
   70|   181M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   181M|}
_RNCINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB32_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  61.1M|  move |input: I| {
  106|  61.1M|    let (input, o1) = first.parse(input)?;
  107|  61.1M|    second.parse(input).map(|(i, _)| (i, o1))
  108|  61.1M|  }
_RINvNtCs6HefjSGhhBw_3nom8sequence8precededReINtNtCslATUeuPuGvJ_4core6option6OptioncEBE_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBE_cB1n_NCINvNtB4_6branch3altBE_cB1n_TNCINvNtNtB4_9character8complete4charBE_B1n_E0B3n_EE0E0INvB3s_6digit1BE_B1n_EEB1r_:
   63|  29.2M|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  29.2M|  mut first: F,
   65|  29.2M|  mut second: G,
   66|  29.2M|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  29.2M|where
   68|  29.2M|  F: Parser<I, O1, E>,
   69|  29.2M|  G: Parser<I, O2, E>,
   70|  29.2M|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  29.2M|}
_RINvNtCs6HefjSGhhBw_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB30_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  61.1M|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  61.1M|  mut first: F,
   99|  61.1M|  mut second: G,
  100|  61.1M|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  61.1M|where
  102|  61.1M|  F: Parser<I, O1, E>,
  103|  61.1M|  G: Parser<I, O2, E>,
  104|  61.1M|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  61.1M|}

_RNCNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB7_7CompareBy_E15compare_no_case0CsmyidsRPtaf_15rsonpath_syntax:
  849|  37.6k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  272|   125M|  fn as_char(self) -> char {
  273|   125M|    *self
  274|   125M|  }
_RNCNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB7_7CompareBy_E7compare0CsmyidsRPtaf_15rsonpath_syntax:
  740|   284M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar12is_dec_digitCsmyidsRPtaf_15rsonpath_syntax:
  253|   156M|  fn is_dec_digit(self) -> bool {
  254|   156M|    self.is_ascii_digit()
  255|   156M|  }
_RNvXs_NtCs6HefjSGhhBw_3nom6traitsReNtB4_11InputLength9input_lenCsmyidsRPtaf_15rsonpath_syntax:
   33|   268M|  fn input_len(&self) -> usize {
   34|   268M|    self.len()
   35|   268M|  }
_RNvXsk_NtCs6HefjSGhhBw_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   266M|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   266M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   266M|
  742|   266M|    match pos {
  743|   251M|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  14.3M|        if self.len() >= t.len() {
  746|  13.4M|          CompareResult::Ok
  747|       |        } else {
  748|   923k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   266M|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  265|  43.3M|  fn len(self) -> usize {
  266|  43.3M|    self.len_utf8()
  267|  43.3M|  }
_RINvXsj_NtCs6HefjSGhhBw_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCsmyidsRPtaf_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|   151M|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|   151M|    &self,
  677|   151M|    predicate: P,
  678|   151M|    e: ErrorKind,
  679|   151M|  ) -> IResult<Self, Self, E>
  680|   151M|  where
  681|   151M|    P: Fn(Self::Item) -> bool,
  682|   151M|  {
  683|   151M|    match self.find(predicate) {
  684|   147M|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  4.53M|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|  11.4k|        if self.is_empty() {
  689|  8.50k|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|  2.92k|            Ok((
  694|  2.92k|              self.get_unchecked(self.len()..),
  695|  2.92k|              self.get_unchecked(..self.len()),
  696|  2.92k|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|   151M|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   266M|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   266M|    self.as_bytes().compare(t.as_bytes())
  841|   266M|  }
_RNvXsc_NtCs6HefjSGhhBw_3nom6traitsRcNtB5_6AsChar3lenCsmyidsRPtaf_15rsonpath_syntax:
  296|   125M|  fn len(self) -> usize {
  297|   125M|    self.len_utf8()
  298|   125M|  }
_RNvXsb_NtCs6HefjSGhhBw_3nom6traitscNtB5_6AsChar7as_charCsmyidsRPtaf_15rsonpath_syntax:
  241|   737M|  fn as_char(self) -> char {
  242|   737M|    self
  243|   737M|  }
_RNvXsn_NtCs6HefjSGhhBw_3nom6traitsReINtB5_7CompareBw_E15compare_no_case:
  845|  38.6k|  fn compare_no_case(&self, t: &'b str) -> CompareResult {
  846|  38.6k|    let pos = self
  847|  38.6k|      .chars()
  848|  38.6k|      .zip(t.chars())
  849|  38.6k|      .position(|(a, b)| a.to_lowercase().ne(b.to_lowercase()));
  850|  38.6k|
  851|  38.6k|    match pos {
  852|  14.8k|      Some(_) => CompareResult::Error,
  853|       |      None => {
  854|  23.7k|        if self.len() >= t.len() {
  855|  22.7k|          CompareResult::Ok
  856|       |        } else {
  857|    987|          CompareResult::Incomplete
  858|       |        }
  859|       |      }
  860|       |    }
  861|  38.6k|  }
_RNvXsg_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputTake10take_splitCsmyidsRPtaf_15rsonpath_syntax:
  424|  13.4M|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  13.4M|    let (prefix, suffix) = self.split_at(count);
  426|  13.4M|    (suffix, prefix)
  427|  13.4M|  }
_RNvXsf_NtCs6HefjSGhhBw_3nom6traitsReNtB5_9InputIter13iter_elementsCsmyidsRPtaf_15rsonpath_syntax:
  386|   800M|  fn iter_elements(&self) -> Self::IterElem {
  387|   800M|    self.chars()
  388|   800M|  }
_RNvXs5_NtCs6HefjSGhhBw_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   266M|  fn as_bytes(&self) -> &[u8] {
   98|   266M|    (*self).as_bytes()
   99|   266M|  }
_RNvXs23_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  4.57M|    fn slice(&self, range: $ty) -> Self {
 1014|  4.57M|      &self[range]
 1015|  4.57M|    }
_RNvXs4_NtCs6HefjSGhhBw_3nom6traitsReNtB5_6Offset6offset:
   81|  4.57M|  fn offset(&self, second: &Self) -> usize {
   82|  4.57M|    let fst = self.as_ptr();
   83|  4.57M|    let snd = second.as_ptr();
   84|  4.57M|
   85|  4.57M|    snd as usize - fst as usize
   86|  4.57M|  }
_RNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB5_9FindTokencE10find_token:
  912|  54.0M|  fn find_token(&self, token: char) -> bool {
  913|  54.0M|    self.chars().any(|i| i == token)
  914|  54.0M|  }
_RNvXs24_NtCs6HefjSGhhBw_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   169M|    fn slice(&self, range: $ty) -> Self {
 1014|   169M|      &self[range]
 1015|   169M|    }
_RNCNvXsu_NtCs6HefjSGhhBw_3nom6traitsReINtB7_9FindTokencE10find_token0B9_:
  913|  93.7M|    self.chars().any(|i| i == token)

_RNvMs2_NtCs7ggUkGA1Scd_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
   49|  4.63k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  4.63k|        // An `Acquire` load is enough because that makes all the initialization
   51|  4.63k|        // operations visible to us, and, this being a fast path, weaker
   52|  4.63k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  4.63k|        // `SeqCst` operations on the slow path.
   54|  4.63k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  4.63k|    }

_RNvMs4_NtCs7ggUkGA1Scd_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
  963|  4.63k|        pub fn get(&self) -> Option<&T> {
  964|  4.63k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  4.63k|                None
  969|       |            }
  970|  4.63k|        }

_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE15from_error_kindB7_:
  462|   870M|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  463|   870M|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  464|   870M|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder24recursion_limit_exceededB6_:
   70|     39|    pub(crate) fn recursion_limit_exceeded(str: String, recursion_limit: usize) -> ParseError {
   71|     39|        ParseError {
   72|     39|            input: str,
   73|     39|            inner: InnerParseError::RecursionLimit(recursion_limit),
   74|     39|        }
   75|     39|    }
_RNvXs3_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCs6HefjSGhhBw_3nom5error10ParseErrorReE6append:
  466|   280M|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  467|   280M|        match other {
  468|   280M|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  469|      0|            _ => other,
  470|       |        }
  471|   280M|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3add:
   51|  24.6k|    pub(crate) fn add(&mut self, syntax_error: SyntaxError) {
   52|  24.6k|        self.syntax_errors.push(syntax_error)
   53|  24.6k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder3newB6_:
   47|  4.63k|    pub(crate) fn new() -> Self {
   48|  4.63k|        Self { syntax_errors: vec![] }
   49|  4.63k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder5buildB6_:
   63|  4.52k|    pub(crate) fn build(self, str: String) -> ParseError {
   64|  4.52k|        ParseError {
   65|  4.52k|            input: str,
   66|  4.52k|            inner: InnerParseError::Syntax(self.syntax_errors),
   67|  4.52k|        }
   68|  4.52k|    }
_RNvMs1_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  192|   113M|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  193|   113M|        Self { kind, rev_idx, len }
  194|   113M|    }
_RNvXso_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB5_15SyntaxErrorKindNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  149|  19.0M|#[derive(Debug, PartialEq, Eq, Clone)]
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8is_emptyB6_:
   59|  4.59k|    pub(crate) fn is_empty(&self) -> bool {
   60|  4.59k|        self.syntax_errors.is_empty()
   61|  4.59k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax5errorNtB4_17ParseErrorBuilder8add_many:
   55|  15.6k|    pub(crate) fn add_many(&mut self, mut syntax_errors: Vec<SyntaxError>) {
   56|  15.6k|        self.syntax_errors.append(&mut syntax_errors)
   57|  15.6k|    }

_RNvMs2_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6Parser5parseCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
  358|  4.63k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  359|  4.63k|        crate::parser::parse_with_options(str, &self.options)
  360|  4.63k|    }
_RNvXsP_CsmyidsRPtaf_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
  181|  4.63k|#[derive(Debug, Clone, Default)]
_RNvCsmyidsRPtaf_15rsonpath_syntax5parseCsjNUSzFhM0un_26query_fuzz_arbitrary_bytes:
  334|  4.63k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  335|  4.63k|    Parser::default().parse(str)
  336|  4.63k|}
_RNvXs0_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  283|  4.63k|    fn default() -> Self {
  284|  4.63k|        Self {
  285|  4.63k|            recursion_limit: Some(Parser::RECURSION_LIMIT_DEFAULT),
  286|  4.63k|            relaxed_whitespace: false,
  287|  4.63k|        }
  288|  4.63k|    }
_RNvMsu_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8Selector11is_singularB5_:
 1039|  4.74k|    fn is_singular(&self) -> bool {
 1040|  4.74k|        matches!(self, Self::Name(_) | Self::Index(_))
 1041|  4.74k|    }
_RNvXs2a_CsmyidsRPtaf_15rsonpath_syntaxNtB6_12ComparisonOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB6_:
  742|  5.37M|#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
_RNvMsq_CsmyidsRPtaf_15rsonpath_syntaxNtB5_13JsonPathQuery15try_to_singular:
  846|   258k|    fn try_to_singular(self) -> std::result::Result<SingularJsonPathQuery, Self> {
  847|   258k|        if self.segments.iter().all(Segment::is_singular) {
  848|   257k|            let mut singular_segments = Vec::with_capacity(self.segments.len());
  849|   259k|            for segment in self.segments {
  850|  2.19k|                singular_segments.push(segment.into_singular());
  851|  2.19k|            }
  852|   257k|            Ok(SingularJsonPathQuery {
  853|   257k|                segments: singular_segments,
  854|   257k|            })
  855|       |        } else {
  856|  1.60k|            Err(self)
  857|       |        }
  858|   258k|    }
_RNvXs7_CsmyidsRPtaf_15rsonpath_syntaxNtB5_8SelectorINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_11LogicalExprE4fromB5_:
  445|  6.61M|    fn from(value: LogicalExpr) -> Self {
  446|  6.61M|        Self::Filter(value)
  447|  6.61M|    }
_RNvXsh_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3num10JsonNumberE4from:
  628|  37.4k|    fn from(value: num::JsonNumber) -> Self {
  629|  37.4k|        Self::Number(value)
  630|  37.4k|    }
_RNvMs_CsmyidsRPtaf_15rsonpath_syntaxNtB4_13ParserOptions29is_leading_whitespace_allowedB4_:
  272|    369|    fn is_leading_whitespace_allowed(&self) -> bool {
  273|    369|        self.relaxed_whitespace
  274|    369|    }
_RNvMs_CsmyidsRPtaf_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  276|  4.59k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  277|  4.59k|        self.relaxed_whitespace
  278|  4.59k|    }
_RNvXse_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7LiteralINtNtCslATUeuPuGvJ_4core7convert4FromNtNtB5_3str10JsonStringE4fromB5_:
  607|  1.35k|    fn from(value: S) -> Self {
  608|  1.35k|        Self::String(value.into())
  609|  1.35k|    }
_RNvXsl_CsmyidsRPtaf_15rsonpath_syntaxNtB5_10ComparableINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_7LiteralE4from:
  773|  5.55k|    fn from(value: Literal) -> Self {
  774|  5.55k|        Self::Literal(value)
  775|  5.55k|    }
_RNvXsd_CsmyidsRPtaf_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  578|  24.7M|    fn default() -> Self {
  579|  24.7M|        Self {
  580|  24.7M|            start: Index::FromStart(0.into()),
  581|  24.7M|            end: None,
  582|  24.7M|            step: Step::Forward(1.into()),
  583|  24.7M|        }
  584|  24.7M|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment13into_singular:
  915|  2.19k|    fn into_singular(self) -> SingularSegment {
  916|  2.19k|        assert!(self.is_singular());
  917|  2.19k|        match self {
  918|  2.19k|            Self::Child(mut s) => match s.inner.drain(..).next().expect("is_singular") {
  919|  1.45k|                Selector::Name(n) => SingularSegment::Name(n),
  920|    742|                Selector::Index(i) => SingularSegment::Index(i),
  921|      0|                _ => unreachable!(),
  922|       |            },
  923|      0|            Self::Descendant(_) => unreachable!(),
  924|       |        }
  925|  2.19k|    }
_RNvMss_CsmyidsRPtaf_15rsonpath_syntaxNtB5_7Segment11is_singular:
  908|  5.99k|    fn is_singular(&self) -> bool {
  909|  5.99k|        match self {
  910|  4.94k|            Self::Child(s) => s.len() == 1 && s.first().is_singular(),
  911|  1.04k|            Self::Descendant(_) => false,
  912|       |        }
  913|  5.99k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  947|  5.56k|    pub fn many(vec: Vec<Selector>) -> Self {
  948|  5.56k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  949|  5.56k|        Self { inner: vec }
  950|  5.56k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors5firstB5_:
  955|  4.74k|    pub fn first(&self) -> &Selector {
  956|  4.74k|        &self.inner[0]
  957|  4.74k|    }
_RNvMst_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9Selectors3one:
  932|   665k|    pub fn one(selector: Selector) -> Self {
  933|   665k|        Self { inner: vec![selector] }
  934|   665k|    }
_RNvXsx_CsmyidsRPtaf_15rsonpath_syntaxNtB5_9SelectorsNtNtNtCslATUeuPuGvJ_4core3ops5deref5Deref5deref:
 1108|  4.94k|    fn deref(&self) -> &Self::Target {
 1109|  4.94k|        &self.inner
 1110|  4.94k|    }

_RNvXsv_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  796|  18.4k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  797|  18.4k|        if value > JSON_UINT_UPPER_LIMIT {
  798|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  799|  18.4k|        } else if let Some(x) = NonZeroU64::new(value) {
  800|  18.4k|            Ok(Self(x))
  801|       |        } else {
  802|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  803|       |        }
  804|  18.4k|    }
_RNvMsb_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumber9normalizeB7_:
  588|  37.4k|    pub fn normalize(&self) -> Self {
  589|  37.4k|        match *self {
  590|      0|            Self::Int(x) => Self::Int(x),
  591|  37.4k|            Self::Float(x) => match JsonInt::try_from(x) {
  592|  36.0k|                Ok(int) => Self::Int(int),
  593|  1.35k|                Err(_) => Self::Float(x),
  594|       |            },
  595|       |        }
  596|  37.4k|    }
_RNCNvXsi_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB7_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_str0B9_:
  664|  3.77k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvXsc_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  603|  2.26M|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  604|  2.26M|        if value > JSON_INT_UPPER_LIMIT {
  605|  1.93k|            Err(JsonIntOverflowError::int_pos_overflow(value))
  606|  2.26M|        } else if value < JSON_INT_LOWER_LIMIT {
  607|  1.84k|            Err(JsonIntOverflowError::int_neg_overflow(value))
  608|       |        } else {
  609|  2.26M|            Ok(Self::new(value))
  610|       |        }
  611|  2.26M|    }
_RNvXsl_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  699|  49.5M|    fn from(value: u32) -> Self {
  700|  49.5M|        Self::new(u64::from(value))
  701|  49.5M|    }
_RNvXsp_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  736|  2.26M|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  737|  2.26M|        if value.0 < 0 {
  738|  18.4k|            Err(JsonIntOverflowError::negative_uint(value.0))
  739|       |        } else {
  740|  2.24M|            Ok(Self::new(value.0 as u64))
  741|       |        }
  742|  2.26M|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3newB7_:
  286|  2.26M|    const fn new(index: i64) -> Self {
  287|  2.26M|        Self(index)
  288|  2.26M|    }
_RNvMs7_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonInt3abs:
  362|  18.4k|    pub const fn abs(&self) -> JsonUInt {
  363|  18.4k|        JsonUInt(self.0.unsigned_abs())
  364|  18.4k|    }
_RNvXsE_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_9JsonFloatNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  963|  38.6k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  964|  38.6k|        match f64::from_str(s) {
  965|  38.6k|            Ok(x) => {
  966|  38.6k|                assert!(!s.is_empty()); // Empty strings are not accepted by f64::from_str.
  967|       |                                        // Rule 1.
  968|  38.6k|                if x.is_nan() || x.is_infinite() {
  969|    387|                    return Err(Self::Err::infinite_or_nan(s));
  970|  38.2k|                }
  971|  38.2k|                if let Some((before, after)) = s.split_once('.') {
  972|       |                    // Rule 3. The case `before == "+"` is checked later.
  973|    930|                    if before.is_empty() || before == "-" {
  974|      0|                        return Err(Self::Err::nothing_before_decimal_point(s));
  975|    930|                    }
  976|    930|                    // Rule 4.
  977|    930|                    if after.is_empty() || after.starts_with(['e', 'E']) {
  978|      0|                        return Err(Self::Err::nothing_after_decimal_point(s));
  979|    930|                    }
  980|  37.2k|                }
  981|  38.2k|                let mut chars = s.chars();
  982|  38.2k|                let first_c = chars.next().expect("s is non-empty");
  983|  38.2k|                // Rule 2.
  984|  38.2k|                if first_c == '+' {
  985|      0|                    return Err(Self::Err::leading_plus_sign(s));
  986|  38.2k|                }
  987|       |                // Skip the leading minus if it exists.
  988|  38.2k|                let s_no_sign = if first_c == '-' { chars.as_str() } else { s };
  989|       |                // Rule 5.
  990|       |                // Check for leading zeroes. We strip the first zero from the front and check what's left.
  991|       |                // The only acceptable case is that the next character is not a digit.
  992|  38.2k|                if let Some(rest) = s_no_sign.strip_prefix('0') {
  993|  25.7k|                    if matches!(rest.chars().next(), Some('0'..='9')) {
  994|    790|                        return Err(Self::Err::leading_zeros(s));
  995|  24.9k|                    }
  996|  12.4k|                }
  997|  37.4k|                Ok(Self(x))
  998|       |            }
  999|       |            // Remember that all floats valid in JSON are also accepted by Rust,
 1000|       |            // so this is *definitely* not a valid JSON float.
 1001|      0|            Err(_) => Err(Self::Err::f64_parse_error(s)),
 1002|       |        }
 1003|  38.6k|    }
_RNvXsG_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_10JsonNumberINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_9JsonFloatE4fromB7_:
 1015|  37.4k|    fn from(value: JsonFloat) -> Self {
 1016|  37.4k|        Self::Float(value)
 1017|  37.4k|    }
_RNvMs8_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_8JsonUInt3newB7_:
  400|  51.7M|    const fn new(index: u64) -> Self {
  401|  51.7M|        Self(index)
  402|  51.7M|    }
_RNvXsi_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  662|  2.26M|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  663|  2.26M|        match i64::from_str(s) {
  664|  2.26M|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  665|  1.01k|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  666|       |        }
  667|  2.26M|    }
_RNvXsx_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  824|  18.4k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  825|  18.4k|        Self::try_from(value.0)
  826|  18.4k|    }
_RNvXsA_NtCsmyidsRPtaf_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_9JsonFloatE8try_fromB7_:
  853|  37.4k|    fn try_from(value: JsonFloat) -> Result<Self, Self::Error> {
  854|  37.4k|        if value.0.fract() != 0.0 {
  855|  1.06k|            return Err(JsonIntOverflowError::fractional(value.0));
  856|  36.3k|        }
  857|  36.3k|        // At this point the fractional part must be 0.0, so the value is *an* integer.
  858|  36.3k|        // We need to check that it is within bounds of JsonInt. This is correct
  859|  36.3k|        // only because JsonInt bounds are guaranteed to be interoperable with f64,
  860|  36.3k|        // so every value within is exactly representable as a f64.
  861|  36.3k|        let int_value = value.0.trunc();
  862|  36.3k|        if int_value < JSON_INT_LOWER_LIMIT as f64 {
  863|      0|            return Err(JsonIntOverflowError::int_float_neg_overflow(value.0));
  864|  36.3k|        }
  865|  36.3k|        if int_value > JSON_INT_UPPER_LIMIT as f64 {
  866|    292|            return Err(JsonIntOverflowError::int_float_pos_overflow(value.0));
  867|  36.0k|        }
  868|  36.0k|
  869|  36.0k|        // This conversion is now guaranteed to be lossless.
  870|  36.0k|        Ok(Self(int_value as i64))
  871|  37.4k|    }

_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError10fractionalB6_:
   75|  1.06k|    pub(crate) fn fractional(src: f64) -> Self {
   76|  1.06k|        Self {
   77|  1.06k|            kind: JsonIntOverflowKind::Fractional(src),
   78|  1.06k|        }
   79|  1.06k|    }
_RNvMs1_NtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB5_19JsonFloatParseError13leading_zeros:
  167|    790|    pub(crate) fn leading_zeros(src: &str) -> Self {
  168|    790|        Self {
  169|    790|            kind: JsonFloatParseErrorKind::LeadingZeros(src.to_string()),
  170|    790|        }
  171|    790|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   63|  18.4k|    pub(crate) fn negative_uint(src: i64) -> Self {
   64|  18.4k|        Self {
   65|  18.4k|            kind: JsonIntOverflowKind::UIntNeg(src),
   66|  18.4k|        }
   67|  18.4k|    }
_RNvMs1_NtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB5_19JsonFloatParseError15infinite_or_nan:
  155|    387|    pub(crate) fn infinite_or_nan(src: &str) -> Self {
  156|    387|        Self {
  157|    387|            kind: JsonFloatParseErrorKind::InfinityOrNaN(src.to_string()),
  158|    387|        }
  159|    387|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_pos_overflowB6_:
   39|  1.93k|    pub(crate) fn int_pos_overflow(src: i64) -> Self {
   40|  1.93k|        Self {
   41|  1.93k|            kind: JsonIntOverflowKind::IntPos(src),
   42|  1.93k|        }
   43|  1.93k|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError22int_float_pos_overflowB6_:
   81|    292|    pub(crate) fn int_float_pos_overflow(src: f64) -> Self {
   82|    292|        Self {
   83|    292|            kind: JsonIntOverflowKind::FloatPos(src),
   84|    292|        }
   85|    292|    }
_RNvMs_NtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
  106|  3.77k|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
  107|  3.77k|        Self {
  108|  3.77k|            kind: match err.kind {
  109|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
  110|  1.93k|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
  111|       |                }
  112|  1.84k|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  113|      0|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
  114|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
  115|      0|                JsonIntOverflowKind::NonZeroUIntZero => JsonIntParseErrorKind::NonZeroUIntZero(src.to_string()),
  116|       |                JsonIntOverflowKind::Fractional(_)
  117|       |                | JsonIntOverflowKind::FloatPos(_)
  118|      0|                | JsonIntOverflowKind::FloatNeg(_) => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  119|       |            },
  120|       |        }
  121|  3.77k|    }
_RNvMNtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_neg_overflowB6_:
   51|  1.84k|    pub(crate) fn int_neg_overflow(src: i64) -> Self {
   52|  1.84k|        Self {
   53|  1.84k|            kind: JsonIntOverflowKind::IntNeg(src),
   54|  1.84k|        }
   55|  1.84k|    }
_RNvMs_NtNtCsmyidsRPtaf_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError15int_parse_error:
   95|  1.01k|    pub(crate) fn int_parse_error(src: &str, err: &IntErrorKind) -> Self {
   96|  1.01k|        Self {
   97|  1.01k|            kind: match err {
   98|    472|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::IntPosOverflow(src.to_string()),
   99|    538|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
  100|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonInt value.
  101|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
  102|       |            },
  103|       |        }
  104|  1.01k|    }

_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment0B5_:
  145|  45.3k|        |q| descendant_segment(q, ctx),
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  4.35k|    move |q: &'a str| {
   28|  4.35k|        inner
   29|  4.35k|            .parse(skip_whitespace(q))
   30|  4.35k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  4.35k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment:
  151|  42.1M|fn descendant_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  152|  42.1M|    map(
  153|  42.1M|        preceded(
  154|  42.1M|            tag(".."),
  155|  42.1M|            cut(alt((
  156|  42.1M|                |q| bracketed_selection(q, ctx),
  157|  42.1M|                map(wildcard_selector, Selectors::one),
  158|  42.1M|                member_name_shorthand,
  159|  42.1M|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  160|  42.1M|            ))),
  161|  42.1M|        ),
  162|  42.1M|        Segment::Descendant,
  163|  42.1M|    )(q)
  164|  42.1M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector:
  290|  75.5M|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  291|  75.5M|    map(tag("*"), |_| Selector::Wildcard)(q)
  292|  75.5M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1U_E00B8_:
   30|  24.7M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  61.3M|    move |q: &'a str| {
   28|  61.3M|        inner
   29|  61.3M|            .parse(skip_whitespace(q))
   30|  61.3M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  61.3M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment:
  166|  28.7M|fn child_segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  167|  28.7M|    map(
  168|  28.7M|        alt((
  169|  28.7M|            |q| bracketed_selection(q, ctx),
  170|  28.7M|            // This cut is only correct because we try parsing descendant_segment first.
  171|  28.7M|            preceded(
  172|  28.7M|                char('.'),
  173|  28.7M|                cut(alt((
  174|  28.7M|                    map(wildcard_selector, Selectors::one),
  175|  28.7M|                    member_name_shorthand,
  176|  28.7M|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  177|  28.7M|                ))),
  178|  28.7M|            ),
  179|  28.7M|        )),
  180|  28.7M|        Segment::Child,
  181|  28.7M|    )(q)
  182|  28.7M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19bracketed_selection:
  193|  42.1M|fn bracketed_selection<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selectors, InternalParseError<'q>> {
  194|  42.1M|    let (mut q, _) = char('[')(q)?;
  195|  27.7M|    let mut selectors = vec![];
  196|  27.7M|    let mut syntax_errors = vec![];
  197|       |
  198|       |    loop {
  199|  61.3M|        match selector(q, ctx).finish() {
  200|  33.6M|            Ok((rest, selector)) => {
  201|  33.6M|                selectors.push(selector);
  202|  33.6M|                q = rest;
  203|  33.6M|            }
  204|  15.5M|            Err(InternalParseError::SyntaxError(err, rest)) => {
  205|  15.5M|                syntax_errors.push(err);
  206|  15.5M|                q = rest;
  207|  15.5M|            }
  208|  12.1M|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  209|  12.1M|                syntax_errors.append(&mut errs);
  210|  12.1M|                q = rest;
  211|  12.1M|            }
  212|  21.0k|            Err(err) => return Err(Err::Failure(err)),
  213|       |        }
  214|  61.3M|        q = skip_whitespace(q);
  215|  61.3M|
  216|  61.3M|        match char::<_, nom::error::Error<_>>(',')(q) {
  217|  1.95M|            Ok((rest, _)) => q = rest,
  218|       |            Err(_) => {
  219|  59.3M|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  220|  11.1M|                    q = rest;
  221|  11.1M|                    break;
  222|  48.2M|                } else if q.is_empty() {
  223|  16.5M|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  224|  16.5M|                    break;
  225|       |                } else {
  226|  31.6M|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  227|       |                }
  228|       |            }
  229|       |        }
  230|       |    }
  231|       |
  232|  27.6M|    if syntax_errors.is_empty() {
  233|  5.56k|        Ok((q, Selectors::many(selectors)))
  234|       |    } else {
  235|  27.6M|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  236|       |    }
  237|  42.1M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr:
  383|  24.1M|fn logical_expr<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  384|       |    // This is the most involved part of the parser, as it is inherently recursive.
  385|       |    //
  386|       |    // There are two sources of recursion here: parentheses introduce recursion,
  387|       |    // since the rule is simply '(' filter_expression ')'; and the boolean combinations
  388|       |    // require checking for an operator, and if any is present recursively parsing
  389|       |    // another filter and wrapping the result in an appropriate node type.
  390|       |    //
  391|       |    // In total, we handle the negation operator at the start and then apply the rules:
  392|       |    // - '(' |=> filter_expression, ')'
  393|       |    // - literal |=> comp_op, comparable
  394|       |    // - query, comp_op |=> comparable
  395|       |    // - query
  396|       |    // where |=> means a cut. We separately apply two additional restrictions:
  397|       |    // - negation cannot immediately precede a comparison,
  398|       |    // - query in a comparison must be singular.
  399|       |    // It would be possible to directly disallow them by the rules, but if the parser understands
  400|       |    // these two special cases it can give much clearer error messages about them.
  401|       |    //
  402|       |    // At the end, we check for `&&` and `||``, recurse and wrap if needed; if not, we end parsing
  403|       |    // and leave the rest to the parsers higher up the stack. They might accept the next
  404|       |    // character (e.g. it's `)` called from a recursive filter call, `,` chaining selectors,
  405|       |    // `]` ending a segment...) and are responsible for error handling otherwise.
  406|       |    #[derive(Debug, Clone, Copy)]
  407|       |    enum BooleanOp {
  408|       |        And,
  409|       |        Or,
  410|       |    }
  411|       |
  412|  24.1M|    let Some(ctx) = ctx.increase_nesting() else {
  413|  2.44k|        return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  414|       |    };
  415|       |
  416|  24.1M|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
  417|  6.62M|    let mut loop_rest = skip_whitespace(rest);
  418|  6.62M|    let mut final_expr = this_expr;
  419|       |
  420|       |    loop {
  421|  6.63M|        let (rest, mb_boolean_op) = opt(ignore_whitespace(alt((
  422|  6.63M|            value(BooleanOp::And, tag("&&")),
  423|  6.63M|            value(BooleanOp::Or, tag("||")),
  424|  6.63M|        ))))(loop_rest)?;
  425|  6.63M|        loop_rest = rest;
  426|       |
  427|  8.44k|        match mb_boolean_op {
  428|  1.51k|            Some(BooleanOp::And) => {
  429|  4.35k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
  430|  1.51k|                loop_rest = rest;
  431|  1.51k|                final_expr = LogicalExpr::And(Box::new(final_expr), Box::new(rhs_expr));
  432|       |            }
  433|  1.48k|            Some(BooleanOp::Or) => {
  434|  4.09k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
  435|  1.48k|                loop_rest = rest;
  436|  1.48k|                final_expr = LogicalExpr::Or(Box::new(final_expr), Box::new(rhs_expr));
  437|       |            }
  438|  6.62M|            None => break,
  439|  6.62M|        }
  440|  6.62M|    }
  441|  6.62M|
  442|  6.62M|    return Ok((loop_rest, final_expr));
  443|       |
  444|       |    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|       |        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|       |        let negated = opt_neg.is_some();
  447|       |        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|       |            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|       |            let rest = skip_whitespace(rest);
  450|       |            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|       |                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|       |            let selector = if negated {
  454|       |                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|       |                nested_filter
  457|       |            };
  458|       |            return Ok((rest, selector));
  459|       |        }
  460|       |
  461|       |        match literal(rest) {
  462|       |            Ok((rest, lhs)) => {
  463|       |                let rest = skip_whitespace(rest);
  464|       |                let (rest, comp_op) = match comparison_operator(rest) {
  465|       |                    Ok((rest, comp_op)) => (rest, comp_op),
  466|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|       |                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|       |                let rest = skip_whitespace(rest);
  476|       |                let (rest, rhs) = match comparable(rest, ctx) {
  477|       |                    Ok((rest, rhs)) => (rest, rhs),
  478|       |                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|       |                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|       |                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|       |                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|       |                if negated {
  488|       |                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|       |                    return Ok((
  491|       |                        rest,
  492|       |                        LogicalExpr::Comparison(ComparisonExpr {
  493|       |                            lhs: Comparable::Literal(lhs),
  494|       |                            op: comp_op,
  495|       |                            rhs,
  496|       |                        }),
  497|       |                    ));
  498|       |                }
  499|       |            }
  500|       |            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|       |            _ => (),
  502|       |        };
  503|       |
  504|       |        match filter_query(rest, ctx) {
  505|       |            Ok((rest, query)) => {
  506|       |                let query_len = q.len() - rest.len();
  507|       |                let rest = skip_whitespace(rest);
  508|       |                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|       |                    let rest = skip_whitespace(rest);
  510|       |                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|       |                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|       |                    let Some(singular_query) = query.try_to_comparable() else {
  514|       |                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|       |                    if negated {
  517|       |                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|       |                        Ok((
  520|       |                            rest,
  521|       |                            LogicalExpr::Comparison(ComparisonExpr {
  522|       |                                lhs: singular_query,
  523|       |                                rhs,
  524|       |                                op: comp_op,
  525|       |                            }),
  526|       |                        ))
  527|       |                    }
  528|       |                } else {
  529|       |                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|       |                    let expr = if negated {
  531|       |                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|       |                        test_expr
  534|       |                    };
  535|       |                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|       |            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|       |            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|       |    }
  542|  24.1M|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  61.3M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.3M|where
   25|  61.3M|    F: nom::Parser<&'a str, T, E>,
   26|  61.3M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.3M|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single:
  444|  24.1M|    fn parse_single<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, LogicalExpr, InternalParseError<'q>> {
  445|  24.1M|        let (rest, opt_neg) = ignore_whitespace(opt(char('!')))(q)?;
  446|  24.1M|        let negated = opt_neg.is_some();
  447|  24.1M|        if let Ok((rest, _)) = char::<_, ()>('(')(rest) {
  448|   300k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
  449|  2.39k|            let rest = skip_whitespace(rest);
  450|  2.39k|            let Ok((rest, _)) = char::<_, ()>(')')(rest) else {
  451|  1.91k|                return failed_filter_expression(SyntaxErrorKind::MissingClosingParenthesis)(rest);
  452|       |            };
  453|    482|            let selector = if negated {
  454|      0|                LogicalExpr::Not(Box::new(nested_filter))
  455|       |            } else {
  456|    482|                nested_filter
  457|       |            };
  458|    482|            return Ok((rest, selector));
  459|  23.8M|        }
  460|  23.8M|
  461|  23.8M|        match literal(rest) {
  462|  33.2k|            Ok((rest, lhs)) => {
  463|  33.2k|                let rest = skip_whitespace(rest);
  464|  33.2k|                let (rest, comp_op) = match comparison_operator(rest) {
  465|  6.99k|                    Ok((rest, comp_op)) => (rest, comp_op),
  466|      0|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  467|       |                    _ => {
  468|  26.2k|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  469|    605|                            return fail(SyntaxErrorKind::MissingComparisonOperator, rest.len(), 1, rest);
  470|       |                        } else {
  471|  25.6k|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparisonOperator)(rest);
  472|       |                        };
  473|       |                    }
  474|       |                };
  475|  6.99k|                let rest = skip_whitespace(rest);
  476|  6.99k|                let (rest, rhs) = match comparable(rest, ctx) {
  477|  2.42k|                    Ok((rest, rhs)) => (rest, rhs),
  478|    511|                    Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  479|       |                    _ => {
  480|  4.06k|                        if peek(char::<_, ()>(']'))(rest).is_ok() {
  481|    516|                            return fail(SyntaxErrorKind::InvalidComparable, rest.len(), 1, rest);
  482|       |                        } else {
  483|  3.54k|                            return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  484|       |                        };
  485|       |                    }
  486|       |                };
  487|  2.42k|                if negated {
  488|    274|                    return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  489|       |                } else {
  490|  2.14k|                    return Ok((
  491|  2.14k|                        rest,
  492|  2.14k|                        LogicalExpr::Comparison(ComparisonExpr {
  493|  2.14k|                            lhs: Comparable::Literal(lhs),
  494|  2.14k|                            op: comp_op,
  495|  2.14k|                            rhs,
  496|  2.14k|                        }),
  497|  2.14k|                    ));
  498|       |                }
  499|       |            }
  500|  1.00k|            Err(Err::Failure(err)) => return Err(Err::Failure(err)),
  501|  23.8M|            _ => (),
  502|  23.8M|        };
  503|  23.8M|
  504|  23.8M|        match filter_query(rest, ctx) {
  505|  11.8M|            Ok((rest, query)) => {
  506|  11.8M|                let query_len = q.len() - rest.len();
  507|  11.8M|                let rest = skip_whitespace(rest);
  508|  11.8M|                if let Ok((rest, comp_op)) = comparison_operator(rest) {
  509|  5.36M|                    let rest = skip_whitespace(rest);
  510|  5.36M|                    let Ok((rest, rhs)) = comparable(rest, ctx) else {
  511|  5.23M|                        return failed_filter_expression(SyntaxErrorKind::InvalidComparable)(rest);
  512|       |                    };
  513|   130k|                    let Some(singular_query) = query.try_to_comparable() else {
  514|    355|                        return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  515|       |                    };
  516|   129k|                    if negated {
  517|    212|                        return fail(SyntaxErrorKind::InvalidNegation, q.len(), 1, rest);
  518|       |                    } else {
  519|   129k|                        Ok((
  520|   129k|                            rest,
  521|   129k|                            LogicalExpr::Comparison(ComparisonExpr {
  522|   129k|                                lhs: singular_query,
  523|   129k|                                rhs,
  524|   129k|                                op: comp_op,
  525|   129k|                            }),
  526|   129k|                        ))
  527|       |                    }
  528|       |                } else {
  529|  6.49M|                    let test_expr = LogicalExpr::Test(query.into_test_query());
  530|  6.49M|                    let expr = if negated {
  531|    409|                        LogicalExpr::Not(Box::new(test_expr))
  532|       |                    } else {
  533|  6.49M|                        test_expr
  534|       |                    };
  535|  6.49M|                    Ok((rest, expr))
  536|       |                }
  537|       |            }
  538|  11.9M|            Err(Err::Failure(err)) => Err(Err::Failure(err)),
  539|  24.7k|            _ => failed_filter_expression(SyntaxErrorKind::InvalidFilter)(rest),
  540|       |        }
  541|  24.1M|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  61.3M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.3M|where
   25|  61.3M|    F: nom::Parser<&'a str, T, E>,
   26|  61.3M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.3M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  2.22M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB2_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReBY_NtNtB4_5error18InternalParseErrorTNCINvNtB1A_10combinator5valueB23_BY_B23_B28_NCINvNtNtB1A_5bytes8complete3tagB23_B23_B28_E0E0B2G_EE0B28_EB4_:
   23|  6.63M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  6.63M|where
   25|  6.63M|    F: nom::Parser<&'a str, T, E>,
   26|  6.63M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  6.63M|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  61.3M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.3M|where
   25|  61.3M|    F: nom::Parser<&'a str, T, E>,
   26|  61.3M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.3M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  61.1M|    move |q: &'a str| {
   28|  61.1M|        inner
   29|  61.1M|            .parse(skip_whitespace(q))
   30|  61.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  61.1M|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector0B5_:
  380|  23.8M|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
_RNvXs_NvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprNtB4_9BooleanOpNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB8_:
  406|  8.44k|    #[derive(Debug, Clone, Copy)]
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15failed_selector:
  356|  10.2M|fn failed_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  357|  10.2M|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
  358|  10.2M|    let error_len = q.len() - rest.len();
  359|  10.2M|    let error_span = &q[..error_len];
  360|  10.2M|
  361|  10.2M|    Err(Err::Failure(InternalParseError::SyntaxError(
  362|  10.2M|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
  363|  15.9k|            SyntaxError::new(SyntaxErrorKind::EmptySelector, q.len() + 1, error_len + 2)
  364|       |        } else {
  365|  10.2M|            let meaningful_span = skip_whitespace(error_span);
  366|  10.2M|            let skipped_whitespace_len = error_span.len() - meaningful_span.len();
  367|  10.2M|            let trimmed_span = meaningful_span.trim_end_matches(WHITESPACE);
  368|  10.2M|
  369|  10.2M|            SyntaxError::new(
  370|  10.2M|                SyntaxErrorKind::InvalidSelector,
  371|  10.2M|                q.len() - skipped_whitespace_len,
  372|  10.2M|                trimmed_span.len(),
  373|  10.2M|            )
  374|       |        },
  375|  10.2M|        rest,
  376|  10.2M|    )))
  377|  10.2M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query:
  571|  29.1M|fn filter_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, FilterQuery, InternalParseError<'q>> {
  572|  29.1M|    let (rest, root_type) = alt((
  573|  29.1M|        value(RootSelectorType::Absolute, char('$')),
  574|  29.1M|        value(RootSelectorType::Relative, char('@')),
  575|  29.1M|    ))(q)?;
  576|  29.0M|    let rest = skip_whitespace(rest);
  577|  29.0M|    let mut segments = vec![];
  578|  29.0M|    let mut syntax_errors = vec![];
  579|  29.0M|
  580|  29.0M|    let mut q = rest;
  581|       |
  582|       |    loop {
  583|  71.1M|        if peek(one_of::<_, _, ()>(".["))(q).is_err() {
  584|  29.0M|            break;
  585|  42.0M|        }
  586|  42.0M|
  587|  42.0M|        q = match alt((
  588|  42.0M|            |q| descendant_segment(q, ctx),
  589|  42.0M|            |q| child_segment(q, ctx),
  590|  42.0M|            failed_segment_within_filter(SyntaxErrorKind::InvalidSegmentStart),
  591|  42.0M|        ))(q)
  592|  42.0M|        .finish()
  593|       |        {
  594|   660k|            Ok((rest, segment)) => {
  595|   660k|                segments.push(segment);
  596|   660k|                rest
  597|       |            }
  598|  13.7M|            Err(InternalParseError::SyntaxError(err, rest)) => {
  599|  13.7M|                syntax_errors.push(err);
  600|  13.7M|                rest
  601|       |            }
  602|  27.6M|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  603|  27.6M|                syntax_errors.append(&mut errs);
  604|  27.6M|                rest
  605|       |            }
  606|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  607|  21.0k|                return Err(Err::Failure(InternalParseError::RecursionLimitExceeded));
  608|       |            }
  609|      0|            Err(InternalParseError::NomError(err)) => panic!(
  610|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  611|      0|            ),
  612|       |        };
  613|  42.0M|        q = skip_whitespace(q);
  614|       |    }
  615|       |
  616|  29.0M|    if !syntax_errors.is_empty() {
  617|  17.0M|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  618|       |    } else {
  619|  11.9M|        let query = JsonPathQuery { segments };
  620|  11.9M|        let query = match root_type {
  621|  2.72k|            RootSelectorType::Relative => FilterQuery::Relative(query),
  622|  11.9M|            RootSelectorType::Absolute => FilterQuery::Absolute(query),
  623|       |        };
  624|  11.9M|        Ok((q, query))
  625|       |    }
  626|  29.1M|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   23|  61.3M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.3M|where
   25|  61.3M|    F: nom::Parser<&'a str, T, E>,
   26|  61.3M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.3M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB6_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB2j_B2m_E0E0B2m_E0B6_:
   27|  24.1M|    move |q: &'a str| {
   28|  24.1M|        inner
   29|  24.1M|            .parse(skip_whitespace(q))
   30|  24.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  24.1M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6stringB3_:
  742|   181M|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  743|       |    move |q: &'a str| {
  744|       |        let mut builder = JsonStringBuilder::new();
  745|       |        let mut syntax_errors = vec![];
  746|       |        let mut stream = q.char_indices().peekable();
  747|       |
  748|       |        while let Some((c_idx, c)) = stream.next() {
  749|       |            match (c, mode) {
  750|       |                ('\\', _) => {
  751|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|       |                        Ok(r) => {
  753|       |                            builder.push(r);
  754|       |                        }
  755|       |                        Err(err) => {
  756|       |                            syntax_errors.push(err);
  757|       |                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|       |                    return if syntax_errors.is_empty() {
  763|       |                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|       |                (..='\u{001F}', _) => {
  769|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|       |                    syntax_errors.push(SyntaxError::new(
  771|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|       |                        rest.len() + 1,
  773|       |                        1,
  774|       |                    ))
  775|       |                }
  776|       |                _ => {
  777|       |                    builder.push(c);
  778|       |                }
  779|       |            }
  780|       |        }
  781|       |
  782|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|       |            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|       |    }
  908|   181M|}
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  873|  13.4k|        fn read_hexadecimal_escape<I>(
  874|  13.4k|            q_len: usize,
  875|  13.4k|            c_idx: usize,
  876|  13.4k|            chars: &mut Peekable<I>,
  877|  13.4k|        ) -> std::result::Result<u32, SyntaxError>
  878|  13.4k|        where
  879|  13.4k|            I: Iterator<Item = (usize, char)>,
  880|  13.4k|        {
  881|  13.4k|            let mut x = 0;
  882|  45.9k|            for i in 0..4 {
  883|  38.5k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|  38.5k|                    SyntaxErrorKind::InvalidEscapeSequence,
  885|  38.5k|                    q_len - c_idx + 1,
  886|  38.5k|                    2 + i,
  887|  38.5k|                ))?;
  888|  38.3k|                let v = match c {
  889|  36.8k|                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|  11.3k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|  4.99k|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|  5.78k|                        return Err(SyntaxError::new(
  895|  5.78k|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|  5.78k|                            q_len - c_idx - i - 1,
  897|  5.78k|                            1,
  898|  5.78k|                        ))
  899|       |                    }
  900|       |                };
  901|  32.5k|                x <<= 4;
  902|  32.5k|                x += v;
  903|  32.5k|                chars.next();
  904|       |            }
  905|  7.38k|            Ok(x)
  906|  13.4k|        }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNCNvB2_8selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  61.3M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.3M|where
   25|  61.3M|    F: nom::Parser<&'a str, T, E>,
   26|  61.3M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.3M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  36.3M|    move |q: &'a str| {
   28|  36.3M|        inner
   29|  36.3M|            .parse(skip_whitespace(q))
   30|  36.3M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  36.3M|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs0_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  4.09k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  4.09k|where
   25|  4.09k|    F: nom::Parser<&'a str, T, E>,
   26|  4.09k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  4.09k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr0B5_:
  416|  24.1M|    let (rest, this_expr) = ignore_whitespace(|q| parse_single(q, ctx))(q)?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNCNvB6_8selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.61M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number:
  680|  29.2M|fn number(q: &str) -> IResult<&str, JsonNumber, InternalParseError> {
  681|  29.2M|    map(float, |f| JsonNumber::from(f).normalize())(q)
  682|  29.2M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser24failed_filter_expressionNtB8_11LogicalExprE00B8_:
  641|   411M|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_querys_0B5_:
  589|  28.6M|            |q| child_segment(q, ctx),
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery17try_to_comparable:
  563|   258k|    fn try_to_comparable(self) -> Option<Comparable> {
  564|   258k|        match self {
  565|  1.54k|            Self::Relative(q) => q.try_to_singular().ok().map(Comparable::RelativeSingularQuery),
  566|   257k|            Self::Absolute(q) => q.try_to_singular().ok().map(Comparable::AbsoluteSingularQuery),
  567|       |        }
  568|   258k|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB6_9SelectorsE0B6_:
  185|  13.7M|    move |q: &str| {
  186|  13.7M|        let rest = skip_one(q)
  187|  13.7M|            .trim_start_matches('.')
  188|  13.7M|            .trim_start_matches(|x| x != '.' && x != '[');
  189|  13.7M|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|  13.7M|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB4_5error18InternalParseErrorNCINvNtNtB1J_9character8complete4charB2h_B2k_E0E0B2k_EB4_:
   23|  24.1M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  24.1M|where
   25|  24.1M|    F: nom::Parser<&'a str, T, E>,
   26|  24.1M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  24.1M|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18descendant_segment0B5_:
  156|  13.3M|                |q| bracketed_selection(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_json_path_query:
   66|  4.63k|fn parse_json_path_query(q: &str, ctx: ParseCtx) -> Result<JsonPathQuery> {
   67|  4.63k|    let original_input = q;
   68|  4.63k|    let mut parse_error = ParseErrorBuilder::new();
   69|  4.63k|    let mut segments = vec![];
   70|  4.63k|    let q = skip_whitespace(q);
   71|  4.63k|    let leading_whitespace_len = original_input.len() - q.len();
   72|  4.63k|    if leading_whitespace_len > 0 && !ctx.options.is_leading_whitespace_allowed() {
   73|    369|        parse_error.add(SyntaxError::new(
   74|    369|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   75|    369|            original_input.len(),
   76|    369|            leading_whitespace_len,
   77|    369|        ));
   78|  4.26k|    }
   79|  4.63k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   80|    222|        Ok((q, _)) => skip_whitespace(q),
   81|  4.41k|        Err(e) => {
   82|  4.41k|            parse_error.add(SyntaxError::new(
   83|  4.41k|                SyntaxErrorKind::MissingRootIdentifier,
   84|  4.41k|                e.input.len(),
   85|  4.41k|                q.chars().next().map_or(1, char::len_utf8),
   86|  4.41k|            ));
   87|  4.41k|            e.input
   88|       |        }
   89|       |    };
   90|       |
   91|  4.63k|    let mut q = q;
   92|  49.9k|    while !q.is_empty() {
   93|  45.3k|        q = match segment(q, ctx).finish() {
   94|  11.0k|            Ok((rest, segment)) => {
   95|  11.0k|                segments.push(segment);
   96|  11.0k|                rest
   97|       |            }
   98|  18.6k|            Err(InternalParseError::SyntaxError(err, rest)) => {
   99|  18.6k|                parse_error.add(err);
  100|  18.6k|                rest
  101|       |            }
  102|  15.6k|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
  103|  15.6k|                parse_error.add_many(errs);
  104|  15.6k|                rest
  105|       |            }
  106|       |            Err(InternalParseError::RecursionLimitExceeded) => {
  107|     39|                return Err(ParseErrorBuilder::recursion_limit_exceeded(
  108|     39|                    original_input.to_owned(),
  109|     39|                    ctx.options
  110|     39|                        .recursion_limit
  111|     39|                        .expect("recursion limit should exists when exceeded"),
  112|     39|                ));
  113|       |            }
  114|      0|            Err(InternalParseError::NomError(err)) => panic!(
  115|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
  116|      0|            ),
  117|       |        };
  118|  45.3k|        q = skip_whitespace(q);
  119|       |    }
  120|       |
  121|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
  122|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
  123|  4.59k|    if !ctx.options.is_trailing_whitespace_allowed() {
  124|  4.59k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
  125|  4.59k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
  126|  4.59k|        if trailing_whitespace_len > 0 {
  127|  1.24k|            parse_error.add(SyntaxError::new(
  128|  1.24k|                SyntaxErrorKind::DisallowedTrailingWhitespace,
  129|  1.24k|                trailing_whitespace_len,
  130|  1.24k|                trailing_whitespace_len,
  131|  1.24k|            ));
  132|  3.35k|        }
  133|      0|    }
  134|       |
  135|  4.59k|    if parse_error.is_empty() {
  136|     71|        Ok(JsonPathQuery { segments })
  137|       |    } else {
  138|  4.52k|        Err(parse_error.build(original_input.to_owned()))
  139|       |    }
  140|  4.63k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1Q_EB4_:
   23|  61.1M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  61.1M|where
   25|  61.1M|    F: nom::Parser<&'a str, T, E>,
   26|  61.1M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  61.1M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1E_cB12_NtNtB8_5error18InternalParseErrorNCINvNtNtB1O_9character8complete4charB1E_B2x_E0NCINvNtB1O_10combinator3optB1E_B1E_B2x_NCIB4_B1E_NvB6_3intB2x_E0E0E0B2x_E00B8_:
   30|   318k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser28failed_segment_within_filterNtB4_7SegmentEB4_:
  628|  42.0M|fn failed_segment_within_filter<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  629|       |    move |q: &str| {
  630|       |        // We want to find the next segment or close the filter.
  631|       |        let rest = skip_one(q)
  632|       |            .trim_start_matches('.')
  633|       |            .trim_start_matches(|x| x != ',' && x != ']' && x != '.' && x != '[');
  634|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  635|       |    }
  636|  42.0M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_exprs0_0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  4.09k|    move |q: &'a str| {
   28|  4.09k|        inner
   29|  4.09k|            .parse(skip_whitespace(q))
   30|  4.09k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  4.09k|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser3int:
  726|   122M|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  727|   122M|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  728|       |
  729|  4.49M|    if int != "0" {
  730|  3.60M|        if int == "-0" {
  731|  3.02k|            return fail(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len(), rest);
  732|  3.60M|        }
  733|  3.60M|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  734|  3.60M|        if without_minus.strip_prefix(['0']).is_some() {
  735|  2.11k|            return fail(SyntaxErrorKind::LeadingZeros, q.len(), int.len(), rest);
  736|  3.59M|        }
  737|   893k|    }
  738|       |
  739|  4.49M|    Ok((rest, int))
  740|   122M|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser24failed_filter_expressionNtB4_11LogicalExprEB4_:
  638|  5.29M|fn failed_filter_expression<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  639|       |    move |q: &str| {
  640|       |        // We want to close the filter, so just try to find the next ']' or ','
  641|       |        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  642|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  643|       |    }
  644|  5.29M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   27|  61.1M|    move |q: &'a str| {
   28|  61.1M|        inner
   29|  61.1M|            .parse(skip_whitespace(q))
   30|  61.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  61.1M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser18parse_with_options:
   62|  4.63k|pub(crate) fn parse_with_options(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   63|  4.63k|    parse_json_path_query(q, ParseCtx::new(options))
   64|  4.63k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtB4_10ComparableEB4_:
  910|  1.25k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  1.25k|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  1.25k|        SyntaxError::new(kind, rev_idx, err_len),
  913|  1.25k|        rest,
  914|  1.25k|    )))
  915|  1.25k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segments_0B5_:
  146|  32.4k|        |q| child_segment(q, ctx),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14string_literal:
  283|  90.5M|fn string_literal(q: &str) -> IResult<&str, JsonString, InternalParseError> {
  284|  90.5M|    alt((
  285|  90.5M|        preceded(char('\''), string(StringParseMode::SingleQuoted)),
  286|  90.5M|        preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  287|  90.5M|    ))(q)
  288|  90.5M|}
_RNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char0B7_:
  258|   649k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable0B5_:
  658|  5.34M|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15failed_selectors_0B5_:
  362|  11.8M|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14index_selector:
  342|  36.3M|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  343|       |    // This has to be called after the slice selector.
  344|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  345|  36.3M|    let (rest, int) = int(q)?;
  346|  2.22M|    match parse_directional_int(int) {
  347|  2.22M|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  348|  1.05k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  349|  1.46k|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  350|  1.46k|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  351|  1.46k|            rest,
  352|  1.46k|        ))),
  353|       |    }
  354|  36.3M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptioncENCINvNtCs6HefjSGhhBw_3nom10combinator3optRecNtNtB8_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB2l_B2o_E0E0B2o_E00B8_:
   30|  24.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthands_0B5_:
  248|   650k|        |x| Selectors::one(Selector::Name(x.into())),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand:
  239|  14.3M|fn member_name_shorthand(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  240|  14.3M|    return map(
  241|  14.3M|        preceded(
  242|  14.3M|            peek(name_first),
  243|  14.3M|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  244|       |                acc.push(x);
  245|       |                acc
  246|  14.3M|            }),
  247|  14.3M|        ),
  248|  14.3M|        |x| Selectors::one(Selector::Name(x.into())),
  249|  14.3M|    )(q);
  250|  14.3M|
  251|  14.3M|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  252|  14.3M|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  253|  14.3M|            q,
  254|  14.3M|        )
  255|  14.3M|    }
  256|  14.3M|
  257|  14.3M|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  258|  14.3M|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  259|  14.3M|    }
  260|  14.3M|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15failed_selector0B5_:
  357|   365M|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtB4_11LogicalExprEB4_:
  910|  5.29M|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  5.29M|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  5.29M|        SyntaxError::new(kind, rev_idx, err_len),
  913|  5.29M|        rest,
  914|  5.29M|    )))
  915|  5.29M|}
_RNvXsa_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_16RootSelectorTypeNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  549|  29.0M|#[derive(Clone, Copy)]
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs_0B5_:
  429|  4.35k|                let (rest, rhs_expr) = ignore_whitespace(|q| parse_single(q, ctx))(loop_rest)?;
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNCNvB4_8selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  34.1M|    move |q: &'a str| {
   28|  34.1M|        inner
   29|  34.1M|            .parse(skip_whitespace(q))
   30|  34.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  34.1M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13name_selector:
  279|  61.3M|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  280|  61.3M|    map(string_literal, Selector::Name)(q)
  281|  61.3M|}
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx3newB4_:
   44|  4.63k|    fn new(options: &'a ParserOptions) -> Self {
   45|  4.63k|        Self {
   46|  4.63k|            options,
   47|  4.63k|            current_nesting: 0,
   48|  4.63k|        }
   49|  4.63k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  11.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15filter_selector:
  379|  34.1M|fn filter_selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  380|  34.1M|    into(preceded(char('?'), ignore_whitespace(|q| logical_expr(q, ctx))))(q)
  381|  34.1M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  14.1k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   30|  24.7M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtB4_7SegmentEB4_:
  910|  6.15k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  6.15k|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  6.15k|        SyntaxError::new(kind, rev_idx, err_len),
  913|  6.15k|        rest,
  914|  6.15k|    )))
  915|  6.15k|}
_RNvMNtCsmyidsRPtaf_15rsonpath_syntax6parserNtB2_8ParseCtx16increase_nesting:
   51|  24.1M|    fn increase_nesting(&self) -> Option<Self> {
   52|  24.1M|        match self.options.recursion_limit {
   53|  24.1M|            Some(limit) if limit <= self.current_nesting => None,
   54|  24.1M|            _ => Some(Self {
   55|  24.1M|                options: self.options,
   56|  24.1M|                current_nesting: self.current_nesting + 1,
   57|  24.1M|            }),
   58|       |        }
   59|  24.1M|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand0B5_:
  243|   655k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  244|   655k|                acc.push(x);
  245|   655k|                acc
  246|   655k|            }),
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable:
  657|  5.37M|fn comparable<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  658|  5.37M|    return alt((into(literal), |q| singular_query(q, ctx)))(q);
  659|  5.37M|
  660|  5.37M|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  5.37M|        let (rest, query) = filter_query(q, ctx)?;
  662|  5.37M|        let Some(cmp) = query.try_to_comparable() else {
  663|  5.37M|            let query_len = q.len() - rest.len();
  664|  5.37M|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|  5.37M|        };
  666|  5.37M|        Ok((rest, cmp))
  667|  5.37M|    }
  668|  5.37M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB6_7SegmentE0B6_:
  185|  6.15k|    move |q: &str| {
  186|  6.15k|        let rest = skip_one(q)
  187|  6.15k|            .trim_start_matches('.')
  188|  6.15k|            .trim_start_matches(|x| x != '.' && x != '[');
  189|  6.15k|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|  6.15k|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12filter_query0B5_:
  588|  42.0M|            |q| descendant_segment(q, ctx),
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB6_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB12_NtNtB8_5error18InternalParseErrorTNCINvNtB1E_10combinator5valueB27_B12_B27_B2d_NCINvNtNtB1E_5bytes8complete3tagB27_B27_B2d_E0E0B2L_EE0B2d_E00B8_:
   30|  8.44k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21parse_directional_int:
  713|  2.26M|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  714|  2.26M|    match JsonInt::from_str(int_str) {
  715|  2.26M|        Ok(int) => {
  716|  2.26M|            if let Ok(uint) = JsonUInt::try_from(int) {
  717|  2.24M|                DirectionalInt::Plus(uint)
  718|       |            } else {
  719|  18.4k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  720|       |            }
  721|       |        }
  722|  4.78k|        Err(err) => DirectionalInt::Error(err),
  723|       |    }
  724|  2.26M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtNvB4_12logical_expr9BooleanOpNCINvNtCs6HefjSGhhBw_3nom6branch3altReB10_NtNtB6_5error18InternalParseErrorTNCINvNtB1C_10combinator5valueB25_B10_B25_B2b_NCINvNtNtB1C_5bytes8complete3tagB25_B25_B2b_E0E0B2J_EE0B2b_E0B6_:
   27|  6.63M|    move |q: &'a str| {
   28|  6.63M|        inner
   29|  6.63M|            .parse(skip_whitespace(q))
   30|  6.63M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  6.63M|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   23|  49.5M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  49.5M|where
   25|  49.5M|    F: nom::Parser<&'a str, T, E>,
   26|  49.5M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  49.5M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7literal:
  670|  29.2M|fn literal(q: &str) -> IResult<&str, Literal, InternalParseError> {
  671|  29.2M|    alt((
  672|  29.2M|        into(number),
  673|  29.2M|        into(string_literal),
  674|  29.2M|        value(Literal::Bool(true), tag("true")),
  675|  29.2M|        value(Literal::Bool(false), tag("false")),
  676|  29.2M|        value(Literal::Null, tag("null")),
  677|  29.2M|    ))(q)
  678|  29.2M|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser13child_segment0B5_:
  169|  28.7M|            |q| bracketed_selection(q, ctx),
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float10base_float:
  695|  29.2M|    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|  29.2M|        recognize(tuple((
  697|  29.2M|            digit1,
  698|  29.2M|            opt(preceded(char('.'), digit1)),
  699|  29.2M|            opt(preceded(
  700|  29.2M|                tag_no_case("e"),
  701|  29.2M|                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|  29.2M|            )),
  703|  29.2M|        )))(q)
  704|  29.2M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser5float:
  685|  29.2M|fn float(q: &str) -> IResult<&str, JsonFloat, InternalParseError> {
  686|       |    // Look ahead to verify that this has a chance to be a number.
  687|  29.2M|    let (rest, valid_str) = recognize(alt((preceded(char('-'), base_float), base_float)))(q)?;
  688|       |
  689|       |    // It is a number, so after here we can hard cut.
  690|  38.6k|    return match JsonFloat::from_str(valid_str) {
  691|  37.4k|        Ok(n) => Ok((rest, n)),
  692|  1.17k|        Err(e) => fail(SyntaxErrorKind::NumberParseError(e), rest.len(), valid_str.len(), q),
  693|       |    };
  694|       |
  695|       |    fn base_float(q: &str) -> IResult<&str, &str, InternalParseError> {
  696|       |        recognize(tuple((
  697|       |            digit1,
  698|       |            opt(preceded(char('.'), digit1)),
  699|       |            opt(preceded(
  700|       |                tag_no_case("e"),
  701|       |                preceded(opt(alt((char('+'), char('-')))), digit1),
  702|       |            )),
  703|       |        )))(q)
  704|       |    }
  705|  29.2M|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser17wildcard_selector0B5_:
  291|  26.5k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_15filter_selector0NtNtB4_5error18InternalParseErrorEB4_:
   23|  34.1M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  34.1M|where
   25|  34.1M|    F: nom::Parser<&'a str, T, E>,
   26|  34.1M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  34.1M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser24failed_filter_expressionNtB6_11LogicalExprE0B6_:
  639|  5.29M|    move |q: &str| {
  640|  5.29M|        // We want to close the filter, so just try to find the next ']' or ','
  641|  5.29M|        let rest = skip_one(q).trim_start_matches(|x| x != ',' && x != ']');
  642|  5.29M|        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  643|  5.29M|    }
_RNCNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0s_0B7_:
  769|  35.5M|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  1.51k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser15skip_whitespace:
   13|   707M|fn skip_whitespace(q: &str) -> &str {
   14|   707M|    q.trim_start_matches(WHITESPACE)
   15|   707M|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand9name_char:
  257|  1.30M|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  258|  1.30M|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  259|  1.30M|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6number0B5_:
  681|  37.4k|    map(float, |f| JsonNumber::from(f).normalize())(q)
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   30|  26.2k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser7segment:
  142|  45.3k|fn segment<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Segment, InternalParseError<'q>> {
  143|  45.3k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  144|  45.3k|    alt((
  145|  45.3k|        |q| descendant_segment(q, ctx),
  146|  45.3k|        |q| child_segment(q, ctx),
  147|  45.3k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  148|  45.3k|    ))(q)
  149|  45.3k|}
_RNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_first0B7_:
  252|  15.6M|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtB4_8SelectorEB4_:
  910|  3.32k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  3.32k|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  3.32k|        SyntaxError::new(kind, rev_idx, err_len),
  913|  3.32k|        rest,
  914|  3.32k|    )))
  915|  3.32k|}
_RNCNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string00B7_:
  761|  17.1k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string0B5_:
  743|   215k|    move |q: &'a str| {
  744|   215k|        let mut builder = JsonStringBuilder::new();
  745|   215k|        let mut syntax_errors = vec![];
  746|   215k|        let mut stream = q.char_indices().peekable();
  747|       |
  748|  61.7M|        while let Some((c_idx, c)) = stream.next() {
  749|  61.5M|            match (c, mode) {
  750|       |                ('\\', _) => {
  751|  21.5k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  752|  3.73k|                        Ok(r) => {
  753|  3.73k|                            builder.push(r);
  754|  3.73k|                        }
  755|  17.7k|                        Err(err) => {
  756|  17.7k|                            syntax_errors.push(err);
  757|  17.7k|                        }
  758|       |                    };
  759|       |                }
  760|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  761|  17.4k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  762|  17.4k|                    return if syntax_errors.is_empty() {
  763|  15.5k|                        Ok((rest, builder.finish()))
  764|       |                    } else {
  765|  1.91k|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  766|       |                    };
  767|       |                }
  768|  61.4M|                (..='\u{001F}', _) => {
  769|  35.7M|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  770|  35.7M|                    syntax_errors.push(SyntaxError::new(
  771|  35.7M|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  772|  35.7M|                        rest.len() + 1,
  773|  35.7M|                        1,
  774|  35.7M|                    ))
  775|       |                }
  776|  25.7M|                _ => {
  777|  25.7M|                    builder.push(c);
  778|  25.7M|                }
  779|       |            }
  780|       |        }
  781|       |
  782|   197k|        let err_kind = if mode == StringParseMode::SingleQuoted {
  783|   195k|            SyntaxErrorKind::MissingClosingSingleQuote
  784|       |        } else {
  785|  2.01k|            SyntaxErrorKind::MissingClosingDoubleQuote
  786|       |        };
  787|   197k|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  788|   197k|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  789|       |
  790|       |        fn read_escape_sequence<I>(
  791|       |            q_len: usize,
  792|       |            c_idx: usize,
  793|       |            chars: &mut Peekable<I>,
  794|       |            mode: StringParseMode,
  795|       |        ) -> std::result::Result<char, SyntaxError>
  796|       |        where
  797|       |            I: Iterator<Item = (usize, char)>,
  798|       |        {
  799|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|       |                q_len - c_idx,
  802|       |                1,
  803|       |            ))?;
  804|       |            match ctrl {
  805|       |                'u' => {
  806|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|       |                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|       |                        0xD800..=0xDBFF => {
  810|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|       |                                q_len - c_idx,
  813|       |                                6,
  814|       |                            ))?;
  815|       |                            if next != '\\' {
  816|       |                                return Err(SyntaxError::new(
  817|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|       |                                    q_len - c_idx,
  819|       |                                    6,
  820|       |                                ));
  821|       |                            }
  822|       |                            chars.next();
  823|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|       |                                q_len - c_idx,
  826|       |                                6,
  827|       |                            ))?;
  828|       |                            if next != 'u' {
  829|       |                                return Err(SyntaxError::new(
  830|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|       |                                    q_len - c_idx,
  832|       |                                    6,
  833|       |                                ));
  834|       |                            }
  835|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|       |                            match low {
  837|       |                                0xDC00..=0xDFFF => {
  838|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|       |                                _ => Err(SyntaxError::new(
  842|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|       |                                    q_len - c_idx,
  844|       |                                    6,
  845|       |                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|       |                            q_len - c_idx,
  852|       |                            6,
  853|       |                        )),
  854|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|       |                'n' => Ok('\n'),       // U+000A LF line feed
  860|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  862|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|       |                _ => Err(SyntaxError::new(
  866|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  867|       |                    q_len - c_idx,
  868|       |                    2,
  869|       |                )), // no other escape sequences are allowed
  870|       |            }
  871|       |        }
  872|       |
  873|       |        fn read_hexadecimal_escape<I>(
  874|       |            q_len: usize,
  875|       |            c_idx: usize,
  876|       |            chars: &mut Peekable<I>,
  877|       |        ) -> std::result::Result<u32, SyntaxError>
  878|       |        where
  879|       |            I: Iterator<Item = (usize, char)>,
  880|       |        {
  881|       |            let mut x = 0;
  882|       |            for i in 0..4 {
  883|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  884|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  885|       |                    q_len - c_idx + 1,
  886|       |                    2 + i,
  887|       |                ))?;
  888|       |                let v = match c {
  889|       |                    '0'..='9' => c as u32 - '0' as u32,
  890|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  891|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  892|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  893|       |                    _ => {
  894|       |                        return Err(SyntaxError::new(
  895|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  896|       |                            q_len - c_idx - i - 1,
  897|       |                            1,
  898|       |                        ))
  899|       |                    }
  900|       |                };
  901|       |                x <<= 4;
  902|       |                x += v;
  903|       |                chars.next();
  904|       |            }
  905|       |            Ok(x)
  906|       |        }
  907|   215k|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB8_7SegmentE00B8_:
  188|  30.1k|            .trim_start_matches(|x| x != '.' && x != '[');
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  184|  45.3k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  45.3k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1A_cBY_NtNtB4_5error18InternalParseErrorNCINvNtNtB1K_9character8complete4charB1A_B2s_E0NCINvNtB1K_10combinator3optB1A_B1A_B2s_NCIB0_B1A_NvB2_3intB2s_E0E0E0B2s_EB4_:
   23|  24.7M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  24.7M|where
   25|  24.7M|    F: nom::Parser<&'a str, T, E>,
   26|  24.7M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  24.7M|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_expr0NtNtB4_5error18InternalParseErrorEB4_:
   23|  24.1M|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  24.1M|where
   25|  24.1M|    F: nom::Parser<&'a str, T, E>,
   26|  24.1M|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  24.1M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCs6HefjSGhhBw_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1S_E0B6_:
   27|  61.1M|    move |q: &'a str| {
   28|  61.1M|        inner
   29|  61.1M|            .parse(skip_whitespace(q))
   30|  61.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  61.1M|    }
_RNvXs7_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  273|   200k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser21member_name_shorthand10name_first:
  251|  15.6M|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  252|  15.6M|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  253|  15.6M|            q,
  254|  15.6M|        )
  255|  15.6M|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_12logical_expr0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  24.1M|    move |q: &'a str| {
   28|  24.1M|        inner
   29|  24.1M|            .parse(skip_whitespace(q))
   30|  24.1M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  24.1M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector:
  262|  61.3M|fn selector<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Selector, InternalParseError<'q>> {
  263|  61.3M|    alt((
  264|  61.3M|        ignore_whitespace(name_selector),
  265|  61.3M|        ignore_whitespace(wildcard_selector),
  266|  61.3M|        ignore_whitespace(slice_selector),
  267|  61.3M|        ignore_whitespace(index_selector),
  268|  61.3M|        ignore_whitespace(|q| filter_selector(q, ctx)),
  269|  61.3M|        failed_selector,
  270|  61.3M|    ))(q)
  271|  61.3M|}
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_exprs0_0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  1.48k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser14slice_selector:
  294|  61.1M|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  295|  61.1M|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  296|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  297|  24.7M|    let mut slice = crate::Slice::default();
  298|       |
  299|  24.7M|    if let Some(start_str) = opt_start {
  300|  14.9k|        match parse_directional_int(start_str) {
  301|  13.1k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  302|    575|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  303|  1.20k|            DirectionalInt::Error(err) => {
  304|  1.20k|                return fail(
  305|  1.20k|                    SyntaxErrorKind::SliceStartParseError(err),
  306|  1.20k|                    q.len(),
  307|  1.20k|                    start_str.len(),
  308|  1.20k|                    rest,
  309|  1.20k|                );
  310|       |            }
  311|       |        };
  312|  24.7M|    }
  313|  24.7M|    let q = rest;
  314|  24.7M|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  315|       |
  316|  24.7M|    if let Some(end_str) = opt_end {
  317|  21.8k|        match parse_directional_int(end_str) {
  318|  5.90k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  319|  15.0k|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  320|    944|            DirectionalInt::Error(err) => {
  321|    944|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  322|       |            }
  323|       |        };
  324|  24.7M|    }
  325|       |
  326|  24.7M|    let q = rest;
  327|  24.7M|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  328|       |
  329|  24.7M|    if let Some(Some(step_str)) = opt_step {
  330|  4.39k|        match parse_directional_int(step_str) {
  331|  1.41k|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  332|  1.80k|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  333|  1.17k|            DirectionalInt::Error(err) => {
  334|  1.17k|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  335|       |            }
  336|       |        };
  337|  24.7M|    }
  338|       |
  339|  24.7M|    Ok((rest, Selector::Slice(slice)))
  340|  61.1M|}
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax6parserNtB4_11FilterQuery15into_test_queryB6_:
  556|  6.49M|    fn into_test_query(self) -> TestExpr {
  557|  6.49M|        match self {
  558|  1.07k|            Self::Relative(q) => TestExpr::Relative(q),
  559|  6.49M|            Self::Absolute(q) => TestExpr::Absolute(q),
  560|       |        }
  561|  6.49M|    }
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8selector0B5_:
  268|  34.1M|        ignore_whitespace(|q| filter_selector(q, ctx)),
_RINvNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  790|  21.5k|        fn read_escape_sequence<I>(
  791|  21.5k|            q_len: usize,
  792|  21.5k|            c_idx: usize,
  793|  21.5k|            chars: &mut Peekable<I>,
  794|  21.5k|            mode: StringParseMode,
  795|  21.5k|        ) -> std::result::Result<char, SyntaxError>
  796|  21.5k|        where
  797|  21.5k|            I: Iterator<Item = (usize, char)>,
  798|  21.5k|        {
  799|  21.5k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  800|  21.5k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  801|  21.5k|                q_len - c_idx,
  802|  21.5k|                1,
  803|  21.5k|            ))?;
  804|  3.01k|            match ctrl {
  805|       |                'u' => {
  806|  12.6k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  807|  6.79k|                    match raw_c {
  808|       |                        // High surrogate, start of a UTF-16 pair.
  809|  6.54k|                        0xD800..=0xDBFF => {
  810|  6.25k|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  811|  6.25k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  812|  6.25k|                                q_len - c_idx,
  813|  6.25k|                                6,
  814|  6.25k|                            ))?;
  815|  5.74k|                            if next != '\\' {
  816|  3.64k|                                return Err(SyntaxError::new(
  817|  3.64k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  818|  3.64k|                                    q_len - c_idx,
  819|  3.64k|                                    6,
  820|  3.64k|                                ));
  821|  2.10k|                            }
  822|  2.10k|                            chars.next();
  823|  2.10k|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  824|  2.10k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  825|  2.10k|                                q_len - c_idx,
  826|  2.10k|                                6,
  827|  2.10k|                            ))?;
  828|  1.88k|                            if next != 'u' {
  829|  1.07k|                                return Err(SyntaxError::new(
  830|  1.07k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  831|  1.07k|                                    q_len - c_idx,
  832|  1.07k|                                    6,
  833|  1.07k|                                ));
  834|    806|                            }
  835|    806|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  836|    587|                            match low {
  837|    266|                                0xDC00..=0xDFFF => {
  838|    265|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  839|    265|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  840|       |                                }
  841|    322|                                _ => Err(SyntaxError::new(
  842|    322|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  843|    322|                                    q_len - c_idx,
  844|    322|                                    6,
  845|    322|                                )),
  846|       |                            }
  847|       |                        }
  848|       |                        // Low surrogate, invalid escape sequence.
  849|    282|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  850|    247|                            SyntaxErrorKind::UnpairedLowSurrogate,
  851|    247|                            q_len - c_idx,
  852|    247|                            6,
  853|    247|                        )),
  854|    290|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  855|       |                    }
  856|       |                }
  857|    196|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  858|    360|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  859|    322|                'n' => Ok('\n'),       // U+000A LF line feed
  860|    333|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  861|    194|                'r' => Ok('\r'),       // U+000D CR carriage return
  862|  1.92k|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  863|  1.08k|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  864|    576|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  865|  5.43k|                _ => Err(SyntaxError::new(
  866|  5.43k|                    SyntaxErrorKind::InvalidEscapeSequence,
  867|  5.43k|                    q_len - c_idx,
  868|  5.43k|                    2,
  869|  5.43k|                )), // no other escape sequences are allowed
  870|       |            }
  871|  21.5k|        }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtB4_9SelectorsEB4_:
  910|  13.7M|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  13.7M|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  13.7M|        SyntaxError::new(kind, rev_idx, err_len),
  913|  13.7M|        rest,
  914|  13.7M|    )))
  915|  13.7M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB6_11LogicalExprNCNvB4_15filter_selector0NtNtB6_5error18InternalParseErrorE0B6_:
   27|  23.8M|    move |q: &'a str| {
   28|  23.8M|        inner
   29|  23.8M|            .parse(skip_whitespace(q))
   30|  23.8M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  23.8M|    }
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB8_9SelectorsE00B8_:
  188|   154M|            .trim_start_matches(|x| x != '.' && x != '[');
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  184|  70.8M|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  185|       |    move |q: &str| {
  186|       |        let rest = skip_one(q)
  187|       |            .trim_start_matches('.')
  188|       |            .trim_start_matches(|x| x != '.' && x != '[');
  189|       |        fail(kind.clone(), q.len(), q.len() - rest.len(), rest)
  190|       |    }
  191|  70.8M|}
_RNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser10comparable14singular_query:
  660|  5.34M|    fn singular_query<'q>(q: &'q str, ctx: ParseCtx) -> IResult<&'q str, Comparable, InternalParseError<'q>> {
  661|  5.34M|        let (rest, query) = filter_query(q, ctx)?;
  662|   128k|        let Some(cmp) = query.try_to_comparable() else {
  663|  1.25k|            let query_len = q.len() - rest.len();
  664|  1.25k|            return fail(SyntaxErrorKind::NonSingularQueryInComparison, q.len(), query_len, rest);
  665|       |        };
  666|   127k|        Ok((rest, cmp))
  667|  5.34M|    }
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   27|  25.0M|    move |q: &'a str| {
   28|  25.0M|        inner
   29|  25.0M|            .parse(skip_whitespace(q))
   30|  25.0M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  25.0M|    }
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser8skip_one:
   17|  19.0M|fn skip_one(q: &str) -> &str {
   18|  19.0M|    let mut chars = q.chars();
   19|  19.0M|    chars.next();
   20|  19.0M|    chars.as_str()
   21|  19.0M|}
_RNvNtCsmyidsRPtaf_15rsonpath_syntax6parser19comparison_operator:
  646|  11.8M|fn comparison_operator(q: &str) -> IResult<&str, ComparisonOp, InternalParseError> {
  647|  11.8M|    alt((
  648|  11.8M|        value(ComparisonOp::EqualTo, tag("==")),
  649|  11.8M|        value(ComparisonOp::NotEqualTo, tag("!=")),
  650|  11.8M|        value(ComparisonOp::LesserOrEqualTo, tag("<=")),
  651|  11.8M|        value(ComparisonOp::GreaterOrEqualTo, tag(">=")),
  652|  11.8M|        value(ComparisonOp::LessThan, char('<')),
  653|  11.8M|        value(ComparisonOp::GreaterThan, char('>')),
  654|  11.8M|    ))(q)
  655|  11.8M|}
_RNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCs6HefjSGhhBw_3nom8sequence8precededB1C_cB10_NtNtB6_5error18InternalParseErrorNCINvNtNtB1M_9character8complete4charB1C_B2v_E0NCINvNtB1M_10combinator3optB1C_B1C_B2v_NCIB2_B1C_NvB4_3intB2v_E0E0E0B2v_E0B6_:
   27|  24.7M|    move |q: &'a str| {
   28|  24.7M|        inner
   29|  24.7M|            .parse(skip_whitespace(q))
   30|  24.7M|            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|  24.7M|    }
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB4_11LogicalExprNCNvB2_12logical_exprs_0NtNtB4_5error18InternalParseErrorEB4_:
   23|  4.35k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   24|  4.35k|where
   25|  4.35k|    F: nom::Parser<&'a str, T, E>,
   26|  4.35k|{
   27|       |    move |q: &'a str| {
   28|       |        inner
   29|       |            .parse(skip_whitespace(q))
   30|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   31|       |    }
   32|  4.35k|}
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failNtNtB4_3num9JsonFloatEB4_:
  910|  1.17k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  1.17k|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  1.17k|        SyntaxError::new(kind, rev_idx, err_len),
  913|  1.17k|        rest,
  914|  1.17k|    )))
  915|  1.17k|}
_RNCNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_exprs0_0B5_:
  434|  4.09k|                let (rest, rhs_expr) = ignore_whitespace(|q| logical_expr(q, ctx))(loop_rest)?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_12logical_expr0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.62M|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsmyidsRPtaf_15rsonpath_syntax6parser4failReEB4_:
  910|  5.14k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  911|  5.14k|    Err(Err::Failure(InternalParseError::SyntaxError(
  912|  5.14k|        SyntaxError::new(kind, rev_idx, err_len),
  913|  5.14k|        rest,
  914|  5.14k|    )))
  915|  5.14k|}
_RNCNvNvNtCsmyidsRPtaf_15rsonpath_syntax6parser12logical_expr12parse_single0B7_:
  448|   300k|            let (rest, nested_filter) = cut(|q| logical_expr(q, ctx))(skip_whitespace(rest))?;
_RNCNCINvNtCsmyidsRPtaf_15rsonpath_syntax6parser17ignore_whitespaceNtB8_11LogicalExprNCNvB6_15filter_selector0NtNtB8_5error18InternalParseErrorE00B8_:
   30|  6.61M|            .map(|(rest, res)| (skip_whitespace(rest), res))

_RNvXs0_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|   650k|    fn from(value: JsonStringBuilder) -> Self {
   59|   650k|        value.finish()
   60|   650k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|   665k|    pub(crate) fn finish(mut self) -> JsonString {
   51|   665k|        self.quoted.push('"');
   52|   665k|        JsonString { quoted: self.quoted }
   53|   665k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|   865k|    pub(crate) fn new() -> Self {
   40|   865k|        Self {
   41|   865k|            quoted: String::from('"'),
   42|   865k|        }
   43|   865k|    }
_RNvMs_NtCsmyidsRPtaf_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  26.4M|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  26.4M|        self.quoted.push(char);
   47|  26.4M|        self
   48|  26.4M|    }

