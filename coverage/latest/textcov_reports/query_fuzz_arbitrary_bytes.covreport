_RNvXsk_Cs6flZAYNibw_9arbitraryReNtB5_9Arbitrary9size_hintCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
  868|  14.9k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  14.9k|        (0, None)
  870|  14.9k|    }
_RNvXsk_Cs6flZAYNibw_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  14.9k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  14.9k|        let size = u.len();
  864|  14.9k|        arbitrary_str(&mut u, size)
  865|  14.9k|    }

_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3newCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
   85|  14.9k|    pub fn new(data: &'a [u8]) -> Self {
   86|  14.9k|        Unstructured { data }
   87|  14.9k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  14.9k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  14.9k|        self.data.get(..size)
  581|  14.9k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  14.9k|    pub fn len(&self) -> usize {
  109|  14.9k|        self.data.len()
  110|  14.9k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  14.9k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  14.9k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  14.9k|        }
  552|  14.9k|
  553|  14.9k|        let (for_buf, rest) = self.data.split_at(size);
  554|  14.9k|        self.data = rest;
  555|  14.9k|        Ok(for_buf)
  556|  14.9k|    }

_RNvXCs6dKByMwQImo_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
   30|  14.9k|    fn from(_: ()) -> Self {
   31|  14.9k|        Self::Keep
   32|  14.9k|    }
_RNvNvCscCEiTOryTIp_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  14.9k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  14.9k|                $body
  305|  14.9k|            }
rust_fuzzer_test_input:
  259|  14.9k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  14.9k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  14.9k|
  262|  14.9k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  14.9k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  14.9k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  14.9k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  14.9k|                // get to longer inputs that actually lead to interesting executions
  267|  14.9k|                // quicker.
  268|  14.9k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  14.9k|                }
  271|  14.9k|
  272|  14.9k|                let mut u = Unstructured::new(bytes);
  273|  14.9k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  14.9k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  14.9k|                }
  291|       |
  292|  14.9k|                let data = match data {
  293|  14.9k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  14.9k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  14.9k|                result.to_libfuzzer_code()
  299|  14.9k|            }
_RNvMs_Cs6dKByMwQImo_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
   40|  14.9k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  14.9k|        match self {
   42|  14.9k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  14.9k|    }
LLVMFuzzerTestOneInput:
   58|  14.9k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  14.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  14.9k|    });
   63|  14.9k|
   64|  14.9k|    match test_input {
   65|  14.9k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  14.9k|}
_RNCNvCs6dKByMwQImo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  14.9k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  14.9k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  14.9k|        rust_fuzzer_test_input(data_slice)
   62|  14.9k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNCINvNtCsijflsOnQTe0_3nom6branch3altReBz_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|   164k|  move |i: I| l.choice(i)
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|   324k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   324k|        match self.0.parse(input.clone()) {
  136|   246k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  78.2k|          res => res,
  138|       |        }
  139|   324k|      }
_RNvXs1_NtCsijflsOnQTe0_3nom6branchTNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|   324k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   324k|        match self.0.parse(input.clone()) {
  136|   222k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   102k|          res => res,
  138|       |        }
  139|   324k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3O_3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMs4_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|   335k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   335k|  mut l: List,
   49|   335k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   335k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvBy_9name_char0ReNtNtBC_5error18InternalParseErrorE0EINtB4_3AltB2I_cB2K_E6choiceBC_:
  134|   258k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   258k|        match self.0.parse(input.clone()) {
  136|   111k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   147k|          res => res,
  138|       |        }
  139|   258k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMs4_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|   496k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   496k|  mut l: List,
   49|   496k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   496k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMs4_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|   161k|  move |i: I| l.choice(i)
_RNvXs1_NtCsijflsOnQTe0_3nom6branchTNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB7_10combinator3mapReNtBB_8SelectorNtBB_9SelectorsNtNtBB_5error18InternalParseErrorNvBz_17wildcard_selectorNvMs4_BB_B2e_3oneE0NvBz_21member_name_shorthandNCINvBz_14failed_segmentB2e_E0EINtB5_3AltB1Y_B2e_B2t_E6choiceBB_:
  134|   161k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   161k|        match self.0.parse(input.clone()) {
  136|  66.9k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  94.0k|          res => res,
  138|       |        }
  139|   161k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NvB1U_15failed_selectorEE0BD_:
   50|   324k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|   164k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   164k|  mut l: List,
   49|   164k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   164k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNvNtBD_6parser18descendant_segmentNvB1Q_13child_segmentNCINvB1Q_14failed_segmentBB_E0EE0BD_:
   50|   496k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|   324k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3Q_3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMs4_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|   335k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNvNtBB_6parser18descendant_segmentNvB1O_13child_segmentNCINvB1O_14failed_segmentBz_E0EEBB_:
   47|   496k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   496k|  mut l: List,
   49|   496k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   496k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMs4_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|   335k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   335k|  mut l: List,
   49|   335k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   335k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NvB1S_15failed_selectorEEBB_:
   47|   324k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   324k|  mut l: List,
   49|   324k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   324k|}
_RNvXs0_NtCsijflsOnQTe0_3nom6branchTNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser18descendant_segmentNvBz_13child_segmentNCINvBz_14failed_segmentNtBB_7SegmentE0EINtB5_3AltReB2f_NtNtBB_5error18InternalParseErrorE6choiceBB_:
  134|   496k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   496k|        match self.0.parse(input.clone()) {
  136|   335k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   161k|          res => res,
  138|       |        }
  139|   496k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBE_6parser21member_name_shorthand10name_firstNCINvNtNtB4_9character8complete7satisfyNCNvB1C_9name_char0Bx_BA_E0EEBE_:
   47|   258k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   258k|  mut l: List,
   49|   258k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   258k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|   324k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   324k|  mut l: List,
   49|   324k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   324k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   164k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   164k|        match self.0.parse(input.clone()) {
  136|   156k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  8.36k|          res => res,
  138|       |        }
  139|   164k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvNtBD_6parser17wildcard_selectorNvMs4_BD_BB_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBB_E0EE0BD_:
   50|   136k|  move |i: I| l.choice(i)
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB6_8sequence8precededRecNtBA_9SelectorsNtNtBA_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1Z_B2h_E0NCINvNtB6_10combinator3cutB1Z_B22_B2h_NCINvB4_3altB1Z_B22_B2h_TNCINvB3D_3mapB1Z_NtBA_8SelectorB22_B2h_NvBy_17wildcard_selectorNvMs4_BA_B22_3oneE0NvBy_21member_name_shorthandNCINvBy_14failed_segmentB22_E0EE0E0E0EINtB4_3AltB1Z_B22_B2h_E6choiceBA_:
  134|   335k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   335k|        match self.0.parse(input.clone()) {
  136|   229k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|   105k|          res => res,
  138|       |        }
  139|   335k|      }
_RNvXs0_NtCsijflsOnQTe0_3nom6branchTNCINvNtB7_10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtB11_9SelectorsNtNtB11_5error18InternalParseErrorNvNtB11_6parser17wildcard_selectorNvMs4_B11_B1F_3oneE0NvB2v_21member_name_shorthandNCINvB2v_14failed_segmentB1F_E0EINtB5_3AltBX_B1F_B1V_E6choiceB11_:
  134|   136k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   136k|        match self.0.parse(input.clone()) {
  136|   103k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  32.9k|          res => res,
  138|       |        }
  139|   136k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBG_6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvB1E_9name_char0Bz_BC_E0EE0BG_:
   50|   258k|  move |i: I| l.choice(i)

_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBH_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|   922k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|   922k|  tag: T,
   34|   922k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|   922k|where
   36|   922k|  Input: InputTake + Compare<T>,
   37|   922k|  T: InputLength + Clone,
   38|   922k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|   922k|}
_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBJ_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   922k|  move |i: Input| {
   40|   922k|    let tag_len = tag.input_len();
   41|   922k|    let t = tag.clone();
   42|   922k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|   255k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   666k|        let e: ErrorKind = ErrorKind::Tag;
   46|   666k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   922k|    res
   50|   922k|  }

_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   526k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|  1.46M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|  1.46M|    let b = t.as_char() == c;
   39|  1.46M|    (&c, b)
   40|  1.46M|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|  1.64M|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|  1.64M|where
   34|  1.64M|  I: Slice<RangeFrom<usize>> + InputIter,
   35|  1.64M|  <I as InputIter>::Item: AsChar,
   36|  1.64M|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|  1.64M|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|   425k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|   425k|  }) {
   72|   254k|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|   170k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|   425k|  }
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|   110k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|   110k|    let c = t.as_char();
   69|   110k|    let b = cond(c);
   70|   110k|    (c, b)
   71|   110k|  }) {
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|  1.46M|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|  1.46M|  }) {
   41|   451k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|  1.01M|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|  1.46M|  }
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|   111k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|   111k|  }) {
   72|  3.83k|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|   107k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|   111k|  }
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Cs8kepUdDqpxJ_15rsonpath_syntax:
   37|   637k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   637k|  }) {
   41|   217k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   419k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   637k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECs8kepUdDqpxJ_15rsonpath_syntax:
   32|   637k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   637k|where
   34|   637k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   637k|  <I as InputIter>::Item: AsChar,
   36|   637k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   637k|}
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|   425k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|   425k|where
   63|   425k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|   425k|  <I as InputIter>::Item: AsChar,
   65|   425k|  F: Fn(char) -> bool,
   66|   425k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|   425k|}
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|   258k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|   258k|where
   63|   258k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|   258k|  <I as InputIter>::Item: AsChar,
   65|   258k|  F: Fn(char) -> bool,
   66|   258k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|   258k|}
_RINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|   168k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|   168k|where
  437|   168k|  T: InputTakeAtPosition,
  438|   168k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|   168k|{
  440|   168k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|   168k|}
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|   424k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|   424k|    let c = t.as_char();
   69|   424k|    let b = cond(c);
   70|   424k|    (c, b)
   71|   424k|  }) {
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Cs8kepUdDqpxJ_15rsonpath_syntax:
   37|   615k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   615k|    let b = t.as_char() == c;
   39|   615k|    (&c, b)
   40|   615k|  }) {

_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str17JsonStringBuilderNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBE_B1P_NCINvB2_4peekBC_cB1P_NvNvNtBI_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BC_cB1P_NvB3m_9name_charNCB3m_0NvMs_BG_BE_3newBE_E0E0NCB3m_s_0EBI_:
   73|   166k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   166k|where
   75|   166k|  F: Parser<I, O1, E>,
   76|   166k|  G: FnMut(O1) -> O2,
   77|   166k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   166k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNvNtBG_6parser19bracketed_selectionNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2q_17wildcard_selectorNvMs4_BG_BE_3oneE0NvB2q_21member_name_shorthandNCINvB2q_14failed_segmentBE_E0EE0EBG_:
  631|   496k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|   496k|where
  633|   496k|  F: Parser<I, O, E>,
  634|   496k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|   496k|}
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBI_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|   164k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   164k|  mut parser: F,
  508|   164k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   164k|where
  510|   164k|  F: Parser<I, O, E>,
  511|   164k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   164k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMs4_BG_B1k_3oneEBG_:
   73|   832k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   832k|where
   75|   832k|  F: Parser<I, O1, E>,
   76|   832k|  G: FnMut(O1) -> O2,
   77|   832k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   832k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReBE_NtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|   426k|  move |input: I| {
   79|   426k|    let (input, o1) = parser.parse(input)?;
   80|  94.8k|    Ok((input, f(o1)))
   81|   426k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBK_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|   164k|  move |input: I| {
  513|   164k|    let i = input.clone();
  514|   164k|    match parser.parse(i) {
  515|  77.8k|      Ok((i, _)) => {
  516|  77.8k|        let index = input.offset(&i);
  517|  77.8k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|  86.6k|      Err(e) => Err(e),
  520|       |    }
  521|   164k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReBC_NtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|   426k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   426k|where
   75|   426k|  F: Parser<I, O1, E>,
   76|   426k|  G: FnMut(O1) -> O2,
   77|   426k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   426k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCIB2_BE_NtBI_8SelectorBG_B1A_NvB4n_17wildcard_selectorNvMs4_BI_BG_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|   496k|  move |input: I| {
   79|   496k|    let (input, o1) = parser.parse(input)?;
   80|  97.3k|    Ok((input, f(o1)))
   81|   496k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMs4_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|   335k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|   335k|where
  633|   335k|  F: Parser<I, O, E>,
  634|   335k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|   335k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2D_17wildcard_selectorNvMs4_BG_BE_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|   335k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   335k|where
   75|   335k|  F: Parser<I, O1, E>,
   76|   335k|  G: FnMut(O1) -> O2,
   77|   335k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   335k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator4peekRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtBM_6parser21member_name_shorthand10name_firstE0BM_:
  308|   166k|  move |input: I| {
  309|   166k|    let i = input.clone();
  310|   166k|    match f.parse(input) {
  311|   107k|      Ok((_, o)) => Ok((i, o)),
  312|  59.4k|      Err(e) => Err(e),
  313|       |    }
  314|   166k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMs4_BI_B1m_3oneE0BI_:
   78|   203k|  move |input: I| {
   79|   203k|    let (input, o1) = parser.parse(input)?;
   80|  36.6k|    Ok((input, f(o1)))
   81|   203k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1J_TNCINvNtB6_8sequence8precededBE_cBG_B1J_NCINvNtNtB6_9character8complete4charBE_B1J_E0NCNvNtBK_6parser6string0E0B2M_EE0NcNtB1v_4Name0E0BK_:
   78|   324k|  move |input: I| {
   79|   324k|    let (input, o1) = parser.parse(input)?;
   80|  81.4k|    Ok((input, f(o1)))
   81|   324k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str17JsonStringBuilderNtBK_9SelectorsNtNtBK_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBG_B1R_NCINvB4_4peekBE_cB1R_NvNvNtBK_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BE_cB1R_NvB3o_9name_charNCB3o_0NvMs_BI_BG_3newBG_E0E0NCB3o_s_0E0BK_:
   78|   166k|  move |input: I| {
   79|   166k|    let (input, o1) = parser.parse(input)?;
   80|   107k|    Ok((input, f(o1)))
   81|   166k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNvNtBI_6parser19bracketed_selectionNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2s_17wildcard_selectorNvMs4_BI_BG_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBG_E0EE0E0BI_:
  635|   161k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|   161k|    rest => rest,
  638|   161k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator4peekRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtBK_6parser21member_name_shorthand10name_firstEBK_:
  304|   166k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|   166k|where
  306|   166k|  F: Parser<I, O, E>,
  307|   166k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|   166k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2F_17wildcard_selectorNvMs4_BI_BG_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|   335k|  move |input: I| {
   79|   335k|    let (input, o1) = parser.parse(input)?;
   80|   163k|    Ok((input, f(o1)))
   81|   335k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCIB0_BC_NtBG_8SelectorBE_B1y_NvB4l_17wildcard_selectorNvMs4_BG_BE_3oneE0NvB4l_21member_name_shorthandNCINvB4l_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|   496k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   496k|where
   75|   496k|  F: Parser<I, O1, E>,
   76|   496k|  G: FnMut(O1) -> O2,
   77|   496k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   496k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1H_TNCINvNtB4_8sequence8precededBC_cBE_B1H_NCINvNtNtB4_9character8complete4charBC_B1H_E0NCNvNtBI_6parser6string0E0B2K_EE0NcNtB1t_4Name0EBI_:
   73|   324k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|   324k|where
   75|   324k|  F: Parser<I, O1, E>,
   76|   324k|  G: FnMut(O1) -> O2,
   77|   324k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|   324k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvNtBI_6parser17wildcard_selectorNvMs4_BI_BG_3oneE0NvB32_21member_name_shorthandNCINvB32_14failed_segmentBG_E0EE0E0BI_:
  635|   136k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|   136k|    rest => rest,
  638|   136k|  }

_RNvYNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE9from_charB6_:
   26|  1.01M|  fn from_char(input: I, _: char) -> Self {
   27|  1.01M|    Self::from_error_kind(input, ErrorKind::Char)
   28|  1.01M|  }
_RNvYNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE2orB6_:
   32|   976k|  fn or(self, other: Self) -> Self {
   33|   976k|    other
   34|   976k|  }
_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCs8kepUdDqpxJ_15rsonpath_syntax:
   26|   419k|  fn from_char(input: I, _: char) -> Self {
   27|   419k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   419k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCs8kepUdDqpxJ_15rsonpath_syntax:
   77|   509k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   509k|    other
   79|   509k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCs8kepUdDqpxJ_15rsonpath_syntax:
   73|  2.46M|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|  2.46M|    Error { input, code: kind }
   75|  2.46M|  }

_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   164k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   164k|    self(i)
  326|   164k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvNtBX_6parser17wildcard_selectorNvMs4_BX_BV_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|   136k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   136k|    self(i)
  326|   136k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCs8kepUdDqpxJ_15rsonpath_syntax:
   36|  14.9k|  fn finish(self) -> Result<(I, O), E> {
   37|  13.5k|    match self {
   38|  1.45k|      Ok(res) => Ok(res),
   39|  13.5k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  14.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete7satisfyNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB1j_5error18InternalParseErrorE0INtB5_6ParserB2t_cB2v_E5parseB1j_:
  324|   111k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   111k|    self(i)
  326|   111k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNvNtB18_6parser19bracketed_selectionNCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4g_17wildcard_selectorNvMs4_B18_B16_3oneE0NvB4g_21member_name_shorthandNCINvB4g_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|   496k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   496k|    self(i)
  326|   496k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtBZ_5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBV_B1K_NCINvNtNtB7_9character8complete4charBT_B1K_E0NCNvNtBZ_6parser6string0E0B2i_EE0INtB5_6ParserBT_BV_B1K_E5parseBZ_:
  324|   324k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   324k|    self(i)
  326|   324k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNvNtB12_6parser19bracketed_selectionNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2O_17wildcard_selectorNvMs4_B12_B10_3oneE0NvB2O_21member_name_shorthandNCINvB2O_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|   161k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   161k|    self(i)
  326|   161k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|   164k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   164k|    self(i)
  326|   164k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB4a_3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMs4_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|   335k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   335k|    self(i)
  326|   335k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_charINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   258k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   258k|    self(i)
  326|   258k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|   168k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   168k|    self(i)
  326|   168k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs8kepUdDqpxJ_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|   496k|  fn finish(self) -> Result<(I, O), E> {
   37|   235k|    match self {
   38|   261k|      Ok(res) => Ok(res),
   39|   235k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|   496k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|   222k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   222k|    self(i)
  326|   222k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser19bracketed_selectionINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   496k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   496k|    self(i)
  326|   496k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|   324k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   324k|    self(i)
  326|   324k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   164k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   164k|    self(i)
  326|   164k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|   571k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   571k|    self(i)
  326|   571k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   164k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   164k|    self(i)
  326|   164k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser18descendant_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   496k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   496k|    self(i)
  326|   496k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMs4_B12_B1G_3oneE0INtB5_6ParserBY_B1G_B1W_E5parseB12_:
  324|   203k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   203k|    self(i)
  326|   203k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   426k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   426k|    self(i)
  326|   426k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser15failed_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  86.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  86.6k|    self(i)
  326|  86.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator4peekRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtB16_6parser21member_name_shorthand10name_firstE0INtB5_6ParserBZ_cB12_E5parseB16_:
  324|   166k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   166k|    self(i)
  326|   166k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthandINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   166k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   166k|    self(i)
  326|   166k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3cutReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvNtB12_6parser17wildcard_selectorNvMs4_B12_B10_3oneE0NvB3q_21member_name_shorthandNCINvB3q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|   136k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   136k|    self(i)
  326|   136k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi10fold_many0RecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtB17_6parser21member_name_shorthand9name_charNCB24_0NvMs_NtB17_3strNtB32_17JsonStringBuilder3newB3c_E0INtB5_6ParserB10_B3c_B13_E5parseB17_:
  324|   107k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   107k|    self(i)
  326|   107k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str17JsonStringBuilderNtNtB17_5error18InternalParseErrorNCINvNtB7_10combinator4peekB10_cB1Z_NvNvNtB17_6parser21member_name_shorthand10name_firstE0NCINvNtB7_5multi10fold_many0B10_cB1Z_NvB39_9name_charNCB39_0NvMs_B15_B13_3newB13_E0E0INtB5_6ParserB10_B13_B1Z_E5parseB17_:
  324|   166k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   166k|    self(i)
  326|   166k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_firstINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   425k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   425k|    self(i)
  326|   425k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   922k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   922k|    self(i)
  326|   922k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|   102k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   102k|    self(i)
  326|   102k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   965k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   965k|    self(i)
  326|   965k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   324k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   324k|    self(i)
  326|   324k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtBF_7SegmentE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  92.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  92.9k|    self(i)
  326|  92.9k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCs8kepUdDqpxJ_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|   324k|  fn finish(self) -> Result<(I, O), E> {
   37|   123k|    match self {
   38|   201k|      Ok(res) => Ok(res),
   39|   123k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|   324k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMs4_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|   161k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   161k|    self(i)
  326|   161k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3cutB10_B13_B1K_NCINvNtB7_6branch3altB10_B13_B1K_TNCINvB37_3mapB10_NtB15_8SelectorB13_B1K_NvNtB15_6parser17wildcard_selectorNvMs4_B15_B13_3oneE0NvB4S_21member_name_shorthandNCINvB4S_14failed_segmentB13_E0EE0E0E0INtB5_6ParserB10_B13_B1K_E5parseB15_:
  324|   229k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   229k|    self(i)
  326|   229k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser13child_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   335k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   335k|    self(i)
  326|   335k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtBF_9SelectorsE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  59.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  59.4k|    self(i)
  326|  59.4k|  }

_RINvNtCsijflsOnQTe0_3nom5multi10fold_many0RecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtBL_6parser21member_name_shorthand9name_charNCB1I_0NvMs_NtBL_3strNtB2F_17JsonStringBuilder3newB2O_EBL_:
  689|   166k|pub fn fold_many0<I, O, E, F, G, H, R>(
  690|   166k|  mut f: F,
  691|   166k|  mut init: H,
  692|   166k|  mut g: G,
  693|   166k|) -> impl FnMut(I) -> IResult<I, R, E>
  694|   166k|where
  695|   166k|  I: Clone + InputLength,
  696|   166k|  F: Parser<I, O, E>,
  697|   166k|  G: FnMut(R, O) -> R,
  698|   166k|  H: FnMut() -> R,
  699|   166k|  E: ParseError<I>,
  700|   166k|{
  701|       |  move |i: I| {
  702|       |    let mut res = init();
  703|       |    let mut input = i;
  704|       |
  705|       |    loop {
  706|       |      let i_ = input.clone();
  707|       |      let len = input.input_len();
  708|       |      match f.parse(i_) {
  709|       |        Ok((i, o)) => {
  710|       |          // infinite loop check: the parser must always consume
  711|       |          if i.input_len() == len {
  712|       |            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|       |          }
  714|       |
  715|       |          res = g(res, o);
  716|       |          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|       |          return Ok((input, res));
  720|       |        }
  721|       |        Err(e) => {
  722|       |          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|       |  }
  727|   166k|}
_RNCINvNtCsijflsOnQTe0_3nom5multi10fold_many0RecNtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNvNvNtBN_6parser21member_name_shorthand9name_charNCB1K_0NvMs_NtBN_3strNtB2H_17JsonStringBuilder3newB2Q_E0BN_:
  701|   107k|  move |i: I| {
  702|   107k|    let mut res = init();
  703|   107k|    let mut input = i;
  704|       |
  705|   258k|    loop {
  706|   258k|      let i_ = input.clone();
  707|   258k|      let len = input.input_len();
  708|   258k|      match f.parse(i_) {
  709|   151k|        Ok((i, o)) => {
  710|   151k|          // infinite loop check: the parser must always consume
  711|   151k|          if i.input_len() == len {
  712|      0|            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|   151k|          }
  714|   151k|
  715|   151k|          res = g(res, o);
  716|   151k|          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|   107k|          return Ok((input, res));
  720|       |        }
  721|      0|        Err(e) => {
  722|      0|          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|   107k|  }

_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1q_E0NCINvNtB6_10combinator3cutBG_BJ_B1q_NCINvNtB6_6branch3altBG_BJ_B1q_TNCINvB2L_3mapBG_NtBL_8SelectorBJ_B1q_NvNtBL_6parser17wildcard_selectorNvMs4_BL_BJ_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBJ_E0EE0E0E0BL_:
   71|   229k|  move |input: I| {
   72|   229k|    let (input, _) = first.parse(input)?;
   73|   136k|    second.parse(input)
   74|   229k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_NtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNvNtBL_6parser19bracketed_selectionNCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3M_17wildcard_selectorNvMs4_BL_BJ_3oneE0NvB3M_21member_name_shorthandNCINvB3M_14failed_segmentBJ_E0EE0E0EBL_:
   63|   496k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   496k|  mut first: F,
   65|   496k|  mut second: G,
   66|   496k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   496k|where
   68|   496k|  F: Parser<I, O1, E>,
   69|   496k|  G: Parser<I, O2, E>,
   70|   496k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   496k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str17JsonStringBuilderNtNtBN_5error18InternalParseErrorNCINvNtB6_10combinator4peekBG_cB1F_NvNvNtBN_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BG_cB1F_NvB2N_9name_charNCB2N_0NvMs_BL_BJ_3newBJ_E0E0BN_:
   71|   166k|  move |input: I| {
   72|   166k|    let (input, _) = first.parse(input)?;
   73|   107k|    second.parse(input)
   74|   166k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecBE_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|   164k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   164k|  mut first: F,
   65|   164k|  mut second: G,
   66|   164k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   164k|where
   68|   164k|  F: Parser<I, O1, E>,
   69|   164k|  G: Parser<I, O2, E>,
   70|   164k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   164k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMs4_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|   335k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   335k|  mut first: F,
   65|   335k|  mut second: G,
   66|   335k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   335k|where
   68|   335k|  F: Parser<I, O1, E>,
   69|   335k|  G: Parser<I, O2, E>,
   70|   335k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   335k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecBG_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|   164k|  move |input: I| {
   72|   164k|    let (input, _) = first.parse(input)?;
   73|  12.3k|    second.parse(input)
   74|   164k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|   571k|  move |input: I| {
   72|   571k|    let (input, _) = first.parse(input)?;
   73|   102k|    second.parse(input)
   74|   571k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str17JsonStringBuilderNtNtBL_5error18InternalParseErrorNCINvNtB4_10combinator4peekBE_cB1D_NvNvNtBL_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BE_cB1D_NvB2L_9name_charNCB2L_0NvMs_BJ_BH_3newBH_E0EBL_:
   63|   166k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   166k|  mut first: F,
   65|   166k|  mut second: G,
   66|   166k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   166k|where
   68|   166k|  F: Parser<I, O1, E>,
   69|   166k|  G: Parser<I, O2, E>,
   70|   166k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   166k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_NtCs8kepUdDqpxJ_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNvNtBN_6parser19bracketed_selectionNCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3O_17wildcard_selectorNvMs4_BN_BL_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBL_E0EE0E0E0BN_:
   71|   496k|  move |input: I| {
   72|   496k|    let (input, _) = first.parse(input)?;
   73|   161k|    second.parse(input)
   74|   496k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCs8kepUdDqpxJ_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|   649k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   649k|  mut first: F,
   65|   649k|  mut second: G,
   66|   649k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   649k|where
   68|   649k|  F: Parser<I, O1, E>,
   69|   649k|  G: Parser<I, O2, E>,
   70|   649k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   649k|}

_RNvXs_NtCsijflsOnQTe0_3nom6traitsReNtB4_11InputLength9input_lenCs8kepUdDqpxJ_15rsonpath_syntax:
   33|  1.33M|  fn input_len(&self) -> usize {
   34|  1.33M|    self.len()
   35|  1.33M|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar3lenCs8kepUdDqpxJ_15rsonpath_syntax:
  296|   668k|  fn len(self) -> usize {
  297|   668k|    self.len_utf8()
  298|   668k|  }
_RNvXsg_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputTake10take_splitCs8kepUdDqpxJ_15rsonpath_syntax:
  424|   255k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|   255k|    let (prefix, suffix) = self.split_at(count);
  426|   255k|    (suffix, prefix)
  427|   255k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar12is_dec_digitCs8kepUdDqpxJ_15rsonpath_syntax:
  253|   526k|  fn is_dec_digit(self) -> bool {
  254|   526k|    self.is_ascii_digit()
  255|   526k|  }
_RNCNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB7_7CompareBy_E7compare0Cs8kepUdDqpxJ_15rsonpath_syntax:
  740|  1.21M|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXs5_NtCsijflsOnQTe0_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   922k|  fn as_bytes(&self) -> &[u8] {
   98|   922k|    (*self).as_bytes()
   99|   922k|  }
_RNvXsn_NtCsijflsOnQTe0_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   922k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   922k|    self.as_bytes().compare(t.as_bytes())
  841|   922k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar7as_charCs8kepUdDqpxJ_15rsonpath_syntax:
  241|  2.61M|  fn as_char(self) -> char {
  242|  2.61M|    self
  243|  2.61M|  }
_RINvXsj_NtCsijflsOnQTe0_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCs8kepUdDqpxJ_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|   168k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|   168k|    &self,
  677|   168k|    predicate: P,
  678|   168k|    e: ErrorKind,
  679|   168k|  ) -> IResult<Self, Self, E>
  680|   168k|  where
  681|   168k|    P: Fn(Self::Item) -> bool,
  682|   168k|  {
  683|   168k|    match self.find(predicate) {
  684|  90.0k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  77.4k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|    900|        if self.is_empty() {
  689|    538|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|    362|            Ok((
  694|    362|              self.get_unchecked(self.len()..),
  695|    362|              self.get_unchecked(..self.len()),
  696|    362|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|   168k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar7as_charCs8kepUdDqpxJ_15rsonpath_syntax:
  272|   668k|  fn as_char(self) -> char {
  273|   668k|    *self
  274|   668k|  }
_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter13iter_elementsCs8kepUdDqpxJ_15rsonpath_syntax:
  386|  2.63M|  fn iter_elements(&self) -> Self::IterElem {
  387|  2.63M|    self.chars()
  388|  2.63M|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar3lenCs8kepUdDqpxJ_15rsonpath_syntax:
  265|   258k|  fn len(self) -> usize {
  266|   258k|    self.len_utf8()
  267|   258k|  }
_RNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   922k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   922k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   922k|
  742|   922k|    match pos {
  743|   665k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|   257k|        if self.len() >= t.len() {
  746|   255k|          CompareResult::Ok
  747|       |        } else {
  748|  1.36k|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   922k|  }
_RNvXs23_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  77.8k|    fn slice(&self, range: $ty) -> Self {
 1014|  77.8k|      &self[range]
 1015|  77.8k|    }
_RNvXs24_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   927k|    fn slice(&self, range: $ty) -> Self {
 1014|   927k|      &self[range]
 1015|   927k|    }
_RNvXs4_NtCsijflsOnQTe0_3nom6traitsReNtB5_6Offset6offset:
   81|  77.8k|  fn offset(&self, second: &Self) -> usize {
   82|  77.8k|    let fst = self.as_ptr();
   83|  77.8k|    let snd = second.as_ptr();
   84|  77.8k|
   85|  77.8k|    snd as usize - fst as usize
   86|  77.8k|  }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
   49|  14.9k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  14.9k|        // An `Acquire` load is enough because that makes all the initialization
   51|  14.9k|        // operations visible to us, and, this being a fast path, weaker
   52|  14.9k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  14.9k|        // `SeqCst` operations on the slow path.
   54|  14.9k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  14.9k|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
  965|  14.9k|        pub fn get(&self) -> Option<&T> {
  966|  14.9k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  14.9k|                None
  971|       |            }
  972|  14.9k|        }

_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3add:
   36|   165k|    pub(crate) fn add(&mut self, syntax_error: SyntaxError) {
   37|   165k|        self.syntax_errors.push(syntax_error)
   38|   165k|    }
_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder5buildB4_:
   48|  14.3k|    pub(crate) fn build(self, str: String) -> ParseError {
   49|  14.3k|        ParseError {
   50|  14.3k|            input: str,
   51|  14.3k|            syntax_errors: self.syntax_errors,
   52|  14.3k|        }
   53|  14.3k|    }
_RNvXs2_NtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE15from_error_kindB7_:
  384|  2.04M|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  385|  2.04M|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  386|  2.04M|    }
_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8is_emptyB4_:
   44|  14.9k|    pub(crate) fn is_empty(&self) -> bool {
   45|  14.9k|        self.syntax_errors.is_empty()
   46|  14.9k|    }
_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8add_many:
   40|  83.0k|    pub(crate) fn add_many(&mut self, mut syntax_errors: Vec<SyntaxError>) {
   41|  83.0k|        self.syntax_errors.append(&mut syntax_errors)
   42|  83.0k|    }
_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3newB4_:
   32|  14.9k|    pub(crate) fn new() -> Self {
   33|  14.9k|        Self { syntax_errors: vec![] }
   34|  14.9k|    }
_RNvXs2_NtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE6append:
  388|   509k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  389|   509k|        match other {
  390|   509k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  391|      0|            _ => other,
  392|       |        }
  393|   509k|    }
_RNvMs0_NtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  130|  1.05M|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  131|  1.05M|        Self { kind, rev_idx, len }
  132|  1.05M|    }
_RNvXsm_NtCs8kepUdDqpxJ_15rsonpath_syntax5errorNtB5_15SyntaxErrorKindNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  107|   152k|#[derive(Debug, PartialEq, Eq, Clone)]

_RNvMs_Cs8kepUdDqpxJ_15rsonpath_syntaxNtB4_6Parser5parseCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
  181|  14.9k|    pub fn parse(&mut self, str: &str) -> Result<JsonPathQuery> {
  182|  14.9k|        crate::parser::parse_json_path_query(str)
  183|  14.9k|    }
_RNvXsd_Cs8kepUdDqpxJ_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
  143|  14.9k|#[derive(Debug, Clone, Default)]
_RNvCs8kepUdDqpxJ_15rsonpath_syntax5parseCscCEiTOryTIp_26query_fuzz_arbitrary_bytes:
  168|  14.9k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  169|  14.9k|    Parser::default().parse(str)
  170|  14.9k|}
_RNvMs4_Cs8kepUdDqpxJ_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  324|   116k|    pub fn many(vec: Vec<Selector>) -> Self {
  325|   116k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  326|   116k|        Self { inner: vec }
  327|   116k|    }
_RNvMs4_Cs8kepUdDqpxJ_15rsonpath_syntaxNtB5_9Selectors3one:
  309|   144k|    pub fn one(selector: Selector) -> Self {
  310|   144k|        Self { inner: vec![selector] }
  311|   144k|    }

_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB2_7JsonInt3newB4_:
  117|  61.9k|    const fn new(index: i64) -> Self {
  118|  61.9k|        Self(index)
  119|  61.9k|    }
_RNvMNtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB2_7JsonInt3abs:
  169|  1.98k|    pub const fn abs(&self) -> JsonUInt {
  170|  1.98k|        JsonUInt(self.0.unsigned_abs())
  171|  1.98k|    }
_RNvXs6_NtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  305|  70.2k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  306|  70.2k|        match i64::from_str(s) {
  307|  64.6k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  308|  5.54k|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  309|       |        }
  310|  70.2k|    }
_RNvXs0_NtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  246|  64.6k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  247|  64.6k|        if value > JSON_INT_UPPER_LIMIT {
  248|  1.91k|            Err(JsonIntOverflowError::int_pos_overflow(value))
  249|  62.7k|        } else if value < JSON_INT_LOWER_LIMIT {
  250|    788|            Err(JsonIntOverflowError::int_neg_overflow(value))
  251|       |        } else {
  252|  61.9k|            Ok(Self::new(value))
  253|       |        }
  254|  64.6k|    }
_RNvXsc_NtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  371|  61.9k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  372|  61.9k|        if value.0 < 0 {
  373|  1.98k|            Err(JsonIntOverflowError::negative_uint(value.0))
  374|       |        } else {
  375|  59.9k|            Ok(Self::new(value.0 as u64))
  376|       |        }
  377|  61.9k|    }
_RNCNvXs6_NtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB7_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_str0B9_:
  307|  2.70k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvMs_NtCs8kepUdDqpxJ_15rsonpath_syntax3numNtB4_8JsonUInt3newB6_:
  197|  59.9k|    const fn new(index: u64) -> Self {
  198|  59.9k|        Self(index)
  199|  59.9k|    }

_RNvMs_NtNtCs8kepUdDqpxJ_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
   69|  2.70k|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
   70|  2.70k|        Self {
   71|  2.70k|            kind: match err.kind {
   72|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
   73|  1.91k|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
   74|       |                }
   75|    788|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
   76|      0|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
   77|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
   78|       |            },
   79|       |        }
   80|  2.70k|    }
_RNvMNtNtCs8kepUdDqpxJ_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_neg_overflowB6_:
   38|    788|    pub(crate) fn int_neg_overflow(src: i64) -> Self {
   39|    788|        Self {
   40|    788|            kind: JsonIntOverflowKind::IntNeg(src),
   41|    788|        }
   42|    788|    }
_RNvMNtNtCs8kepUdDqpxJ_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   50|  1.98k|    pub(crate) fn negative_uint(src: i64) -> Self {
   51|  1.98k|        Self {
   52|  1.98k|            kind: JsonIntOverflowKind::UIntNeg(src),
   53|  1.98k|        }
   54|  1.98k|    }
_RNvMNtNtCs8kepUdDqpxJ_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_pos_overflowB6_:
   26|  1.91k|    pub(crate) fn int_pos_overflow(src: i64) -> Self {
   27|  1.91k|        Self {
   28|  1.91k|            kind: JsonIntOverflowKind::IntPos(src),
   29|  1.91k|        }
   30|  1.91k|    }
_RNvMs_NtNtCs8kepUdDqpxJ_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError15int_parse_error:
   58|  5.54k|    pub(crate) fn int_parse_error(src: &str, err: &IntErrorKind) -> Self {
   59|  5.54k|        Self {
   60|  5.54k|            kind: match err {
   61|  3.11k|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::IntPosOverflow(src.to_string()),
   62|  2.43k|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
   63|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonInt value.
   64|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
   65|       |            },
   66|       |        }
   67|  5.54k|    }

_RNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_first:
  191|   425k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  192|   425k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  193|   425k|            q,
  194|   425k|        )
  195|   425k|    }
_RNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|   324k|    move |q: &'a str| {
   27|   324k|        inner
   28|   324k|            .parse(skip_whitespace(q))
   29|   324k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|   324k|    }
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser15skip_whitespace:
   12|  1.81M|fn skip_whitespace(q: &str) -> &str {
   13|  1.81M|    q.trim_start_matches(WHITESPACE)
   14|  1.81M|}
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser15failed_selector:
  248|  86.6k|fn failed_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  249|  86.6k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
  250|  86.6k|    let error_len = q.len() - rest.len();
  251|  86.6k|    let error_span = &q[..error_len];
  252|  86.6k|
  253|  86.6k|    Err(Err::Failure(InternalParseError::SyntaxError(
  254|  86.6k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
  255|  21.4k|            SyntaxError::new(SyntaxErrorKind::EmptySelector, q.len() + 1, error_len + 2)
  256|       |        } else {
  257|  65.1k|            let meaningful_span = skip_whitespace(error_span);
  258|  65.1k|            let skipped_whitespace_len = error_span.len() - meaningful_span.len();
  259|  65.1k|            let trimmed_span = meaningful_span.trim_end_matches(WHITESPACE);
  260|  65.1k|
  261|  65.1k|            SyntaxError::new(
  262|  65.1k|                SyntaxErrorKind::InvalidSelector,
  263|  65.1k|                q.len() - skipped_whitespace_len,
  264|  65.1k|                trimmed_span.len(),
  265|  65.1k|            )
  266|       |        },
  267|  86.6k|        rest,
  268|  86.6k|    )))
  269|  86.6k|}
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand0B5_:
  183|   151k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  184|   151k|                acc.push(x);
  185|   151k|                acc
  186|   151k|            }),
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser7segment:
   79|   496k|fn segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
   80|   496k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
   81|   496k|    alt((
   82|   496k|        descendant_segment,
   83|   496k|        child_segment,
   84|   496k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
   85|   496k|    ))(q)
   86|   496k|}
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string0B5_:
  294|   102k|    move |q: &'a str| {
  295|   102k|        let mut builder = JsonStringBuilder::new();
  296|   102k|        let mut syntax_errors = vec![];
  297|   102k|        let mut stream = q.char_indices().peekable();
  298|       |
  299|  1.34M|        while let Some((c_idx, c)) = stream.next() {
  300|  1.33M|            match (c, mode) {
  301|       |                ('\\', _) => {
  302|   182k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  303|   104k|                        Ok(r) => {
  304|   104k|                            builder.push(r);
  305|   104k|                        }
  306|  77.0k|                        Err(err) => {
  307|  77.0k|                            syntax_errors.push(err);
  308|  77.0k|                        }
  309|       |                    };
  310|       |                }
  311|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  312|  97.2k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  313|  97.2k|                    return if syntax_errors.is_empty() {
  314|  81.4k|                        Ok((rest, builder.finish()))
  315|       |                    } else {
  316|  15.7k|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  317|       |                    };
  318|       |                }
  319|  1.02M|                (..='\u{0019}', _) => {
  320|   227k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  321|   227k|                    syntax_errors.push(SyntaxError::new(
  322|   227k|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  323|   227k|                        rest.len() + 1,
  324|   227k|                        1,
  325|   227k|                    ))
  326|       |                }
  327|   831k|                _ => {
  328|   831k|                    builder.push(c);
  329|   831k|                }
  330|       |            }
  331|       |        }
  332|       |
  333|  4.77k|        let err_kind = if mode == StringParseMode::SingleQuoted {
  334|  2.33k|            SyntaxErrorKind::MissingClosingSingleQuote
  335|       |        } else {
  336|  2.43k|            SyntaxErrorKind::MissingClosingDoubleQuote
  337|       |        };
  338|  4.77k|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  339|  4.77k|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  340|       |
  341|       |        fn read_escape_sequence<I>(
  342|       |            q_len: usize,
  343|       |            c_idx: usize,
  344|       |            chars: &mut Peekable<I>,
  345|       |            mode: StringParseMode,
  346|       |        ) -> std::result::Result<char, SyntaxError>
  347|       |        where
  348|       |            I: Iterator<Item = (usize, char)>,
  349|       |        {
  350|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  351|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  352|       |                q_len - c_idx,
  353|       |                1,
  354|       |            ))?;
  355|       |            match ctrl {
  356|       |                'u' => {
  357|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  358|       |                    match raw_c {
  359|       |                        // High surrogate, start of a UTF-16 pair.
  360|       |                        0xD800..=0xDBFF => {
  361|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  362|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  363|       |                                q_len - c_idx,
  364|       |                                6,
  365|       |                            ))?;
  366|       |                            if next != '\\' {
  367|       |                                return Err(SyntaxError::new(
  368|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  369|       |                                    q_len - c_idx,
  370|       |                                    6,
  371|       |                                ));
  372|       |                            }
  373|       |                            chars.next();
  374|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  375|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  376|       |                                q_len - c_idx,
  377|       |                                6,
  378|       |                            ))?;
  379|       |                            if next != 'u' {
  380|       |                                return Err(SyntaxError::new(
  381|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  382|       |                                    q_len - c_idx,
  383|       |                                    6,
  384|       |                                ));
  385|       |                            }
  386|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  387|       |                            match low {
  388|       |                                0xDC00..=0xDFFF => {
  389|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  390|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  391|       |                                }
  392|       |                                _ => Err(SyntaxError::new(
  393|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  394|       |                                    q_len - c_idx,
  395|       |                                    6,
  396|       |                                )),
  397|       |                            }
  398|       |                        }
  399|       |                        // Low surrogate, invalid escape sequence.
  400|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  401|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  402|       |                            q_len - c_idx,
  403|       |                            6,
  404|       |                        )),
  405|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  406|       |                    }
  407|       |                }
  408|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  409|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  410|       |                'n' => Ok('\n'),       // U+000A LF line feed
  411|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  412|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  413|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  414|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  415|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  416|       |                _ => Err(SyntaxError::new(
  417|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  418|       |                    q_len - c_idx,
  419|       |                    2,
  420|       |                )), // no other escape sequences are allowed
  421|       |            }
  422|       |        }
  423|       |
  424|       |        fn read_hexadecimal_escape<I>(
  425|       |            q_len: usize,
  426|       |            c_idx: usize,
  427|       |            chars: &mut Peekable<I>,
  428|       |        ) -> std::result::Result<u32, SyntaxError>
  429|       |        where
  430|       |            I: Iterator<Item = (usize, char)>,
  431|       |        {
  432|       |            let mut x = 0;
  433|       |            for i in 0..4 {
  434|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  435|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  436|       |                    q_len - c_idx + 1,
  437|       |                    2 + i,
  438|       |                ))?;
  439|       |                let v = match c {
  440|       |                    '0'..='9' => c as u32 - '0' as u32,
  441|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  442|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  443|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  444|       |                    _ => {
  445|       |                        return Err(SyntaxError::new(
  446|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  447|       |                            q_len - c_idx - i - 1,
  448|       |                            1,
  449|       |                        ))
  450|       |                    }
  451|       |                };
  452|       |                x <<= 4;
  453|       |                x += v;
  454|       |                chars.next();
  455|       |            }
  456|       |            Ok(x)
  457|       |        }
  458|   102k|    }
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser19bracketed_selection:
  133|   496k|fn bracketed_selection(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  134|   496k|    let (mut q, _) = char('[')(q)?;
  135|   199k|    let mut selectors = vec![];
  136|   199k|    let mut syntax_errors = vec![];
  137|       |
  138|       |    loop {
  139|   324k|        match selector(q).finish() {
  140|   201k|            Ok((rest, selector)) => {
  141|   201k|                selectors.push(selector);
  142|   201k|                q = rest;
  143|   201k|            }
  144|   102k|            Err(InternalParseError::SyntaxError(err, rest)) => {
  145|   102k|                syntax_errors.push(err);
  146|   102k|                q = rest;
  147|   102k|            }
  148|  20.5k|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  149|  20.5k|                syntax_errors.append(&mut errs);
  150|  20.5k|                q = rest;
  151|  20.5k|            }
  152|      0|            Err(err) => return Err(Err::Failure(err)),
  153|       |        }
  154|   324k|        q = skip_whitespace(q);
  155|   324k|
  156|   324k|        match char::<_, nom::error::Error<_>>(',')(q) {
  157|  27.0k|            Ok((rest, _)) => q = rest,
  158|       |            Err(_) => {
  159|   297k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  160|   189k|                    q = rest;
  161|   189k|                    break;
  162|   108k|                } else if q.is_empty() {
  163|  10.6k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  164|  10.6k|                    break;
  165|       |                } else {
  166|  97.6k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  167|       |                }
  168|       |            }
  169|       |        }
  170|       |    }
  171|       |
  172|   199k|    if syntax_errors.is_empty() {
  173|   116k|        Ok((q, Selectors::many(selectors)))
  174|       |    } else {
  175|  83.0k|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  176|       |    }
  177|   496k|}
_RINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  121|   496k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  122|       |    move |q: &str| {
  123|       |        let rest = skip_one(q)
  124|       |            .trim_start_matches('.')
  125|       |            .trim_start_matches(|x| x != '.' && x != '[');
  126|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  127|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  128|       |            rest,
  129|       |        )))
  130|       |    }
  131|   496k|}
_RINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|   324k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|   324k|where
   24|   324k|    F: nom::Parser<&'a str, T, E>,
   25|   324k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|   324k|}
_RNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char0B7_:
  198|   110k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
_RNCNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string00B7_:
  312|  97.1k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21parse_json_path_query:
   33|  14.9k|pub(crate) fn parse_json_path_query(q: &str) -> Result<JsonPathQuery> {
   34|  14.9k|    let original_input = q;
   35|  14.9k|    let mut parse_error = ParseErrorBuilder::new();
   36|  14.9k|    let mut segments = vec![];
   37|  14.9k|    let q = skip_whitespace(q);
   38|  14.9k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   39|  1.45k|        Ok((q, _)) => skip_whitespace(q),
   40|  13.5k|        Err(e) => {
   41|  13.5k|            parse_error.add(SyntaxError::new(
   42|  13.5k|                SyntaxErrorKind::MissingRootIdentifier,
   43|  13.5k|                e.input.len(),
   44|  13.5k|                1,
   45|  13.5k|            ));
   46|  13.5k|            e.input
   47|       |        }
   48|       |    };
   49|       |
   50|  14.9k|    let mut q = q;
   51|   511k|    while !q.is_empty() {
   52|   496k|        q = match segment(q).finish() {
   53|   261k|            Ok((rest, segment)) => {
   54|   261k|                segments.push(segment);
   55|   261k|                rest
   56|       |            }
   57|   152k|            Err(InternalParseError::SyntaxError(err, rest)) => {
   58|   152k|                parse_error.add(err);
   59|   152k|                rest
   60|       |            }
   61|  83.0k|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
   62|  83.0k|                parse_error.add_many(errs);
   63|  83.0k|                rest
   64|       |            }
   65|      0|            Err(InternalParseError::NomError(err)) => panic!(
   66|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
   67|      0|            ),
   68|       |        };
   69|   496k|        q = skip_whitespace(q);
   70|       |    }
   71|       |
   72|  14.9k|    if parse_error.is_empty() {
   73|    615|        Ok(JsonPathQuery { segments })
   74|       |    } else {
   75|  14.3k|        Err(parse_error.build(original_input.to_owned()))
   76|       |    }
   77|  14.9k|}
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand:
  179|   166k|fn member_name_shorthand(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  180|   166k|    return map(
  181|   166k|        preceded(
  182|   166k|            peek(name_first),
  183|   166k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  184|       |                acc.push(x);
  185|       |                acc
  186|   166k|            }),
  187|   166k|        ),
  188|   166k|        |x| Selectors::one(Selector::Name(x.into())),
  189|   166k|    )(q);
  190|   166k|
  191|   166k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  192|   166k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  193|   166k|            q,
  194|   166k|        )
  195|   166k|    }
  196|   166k|
  197|   166k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  198|   166k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  199|   166k|    }
  200|   166k|}
_RNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB6_7SegmentE0B6_:
  122|  92.9k|    move |q: &str| {
  123|  92.9k|        let rest = skip_one(q)
  124|  92.9k|            .trim_start_matches('.')
  125|  92.9k|            .trim_start_matches(|x| x != '.' && x != '[');
  126|  92.9k|        Err(Err::Failure(InternalParseError::SyntaxError(
  127|  92.9k|            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  128|  92.9k|            rest,
  129|  92.9k|        )))
  130|  92.9k|    }
_RNCNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB8_9SelectorsE00B8_:
  125|   159k|            .trim_start_matches(|x| x != '.' && x != '[');
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17wildcard_selector:
  227|   426k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  228|   426k|    map(tag("*"), |_| Selector::Wildcard)(q)
  229|   426k|}
_RNCNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  58.1k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  341|   182k|        fn read_escape_sequence<I>(
  342|   182k|            q_len: usize,
  343|   182k|            c_idx: usize,
  344|   182k|            chars: &mut Peekable<I>,
  345|   182k|            mode: StringParseMode,
  346|   182k|        ) -> std::result::Result<char, SyntaxError>
  347|   182k|        where
  348|   182k|            I: Iterator<Item = (usize, char)>,
  349|   182k|        {
  350|   182k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  351|   182k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  352|   182k|                q_len - c_idx,
  353|   182k|                1,
  354|   182k|            ))?;
  355|  26.1k|            match ctrl {
  356|       |                'u' => {
  357|  49.0k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  358|  19.6k|                    match raw_c {
  359|       |                        // High surrogate, start of a UTF-16 pair.
  360|  15.3k|                        0xD800..=0xDBFF => {
  361|  14.1k|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  362|  14.1k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  363|  14.1k|                                q_len - c_idx,
  364|  14.1k|                                6,
  365|  14.1k|                            ))?;
  366|  14.0k|                            if next != '\\' {
  367|  4.51k|                                return Err(SyntaxError::new(
  368|  4.51k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  369|  4.51k|                                    q_len - c_idx,
  370|  4.51k|                                    6,
  371|  4.51k|                                ));
  372|  9.58k|                            }
  373|  9.58k|                            chars.next();
  374|  9.58k|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  375|  9.58k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  376|  9.58k|                                q_len - c_idx,
  377|  9.58k|                                6,
  378|  9.58k|                            ))?;
  379|  9.57k|                            if next != 'u' {
  380|  5.08k|                                return Err(SyntaxError::new(
  381|  5.08k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  382|  5.08k|                                    q_len - c_idx,
  383|  5.08k|                                    6,
  384|  5.08k|                                ));
  385|  4.49k|                            }
  386|  4.49k|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  387|  2.43k|                            match low {
  388|  1.40k|                                0xDC00..=0xDFFF => {
  389|  1.40k|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  390|  1.40k|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  391|       |                                }
  392|  1.02k|                                _ => Err(SyntaxError::new(
  393|  1.02k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  394|  1.02k|                                    q_len - c_idx,
  395|  1.02k|                                    6,
  396|  1.02k|                                )),
  397|       |                            }
  398|       |                        }
  399|       |                        // Low surrogate, invalid escape sequence.
  400|  1.26k|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  401|  1.22k|                            SyntaxErrorKind::UnpairedLowSurrogate,
  402|  1.22k|                            q_len - c_idx,
  403|  1.22k|                            6,
  404|  1.22k|                        )),
  405|  4.36k|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  406|       |                    }
  407|       |                }
  408|  1.43k|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  409|  29.3k|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  410|    773|                'n' => Ok('\n'),       // U+000A LF line feed
  411|  1.72k|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  412|  1.65k|                'r' => Ok('\r'),       // U+000D CR carriage return
  413|  8.61k|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  414|  17.5k|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  415|  46.3k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  416|  33.5k|                _ => Err(SyntaxError::new(
  417|  33.5k|                    SyntaxErrorKind::InvalidEscapeSequence,
  418|  33.5k|                    q_len - c_idx,
  419|  33.5k|                    2,
  420|  33.5k|                )), // no other escape sequences are allowed
  421|       |            }
  422|   182k|        }
_RINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|   324k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|   324k|where
   24|   324k|    F: nom::Parser<&'a str, T, E>,
   25|   324k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|   324k|}
_RNCNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  81.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|   324k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|   324k|where
   24|   324k|    F: nom::Parser<&'a str, T, E>,
   25|   324k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|   324k|}
_RNvXs2_NtCs8kepUdDqpxJ_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  211|  30.8k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand9name_char:
  197|   258k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  198|   258k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  199|   258k|    }
_RINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  121|   832k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  122|       |    move |q: &str| {
  123|       |        let rest = skip_one(q)
  124|       |            .trim_start_matches('.')
  125|       |            .trim_start_matches(|x| x != '.' && x != '[');
  126|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  127|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  128|       |            rest,
  129|       |        )))
  130|       |    }
  131|   832k|}
_RNCNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  61.9k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6stringB3_:
  293|   649k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  294|       |    move |q: &'a str| {
  295|       |        let mut builder = JsonStringBuilder::new();
  296|       |        let mut syntax_errors = vec![];
  297|       |        let mut stream = q.char_indices().peekable();
  298|       |
  299|       |        while let Some((c_idx, c)) = stream.next() {
  300|       |            match (c, mode) {
  301|       |                ('\\', _) => {
  302|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  303|       |                        Ok(r) => {
  304|       |                            builder.push(r);
  305|       |                        }
  306|       |                        Err(err) => {
  307|       |                            syntax_errors.push(err);
  308|       |                        }
  309|       |                    };
  310|       |                }
  311|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  312|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  313|       |                    return if syntax_errors.is_empty() {
  314|       |                        Ok((rest, builder.finish()))
  315|       |                    } else {
  316|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  317|       |                    };
  318|       |                }
  319|       |                (..='\u{0019}', _) => {
  320|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  321|       |                    syntax_errors.push(SyntaxError::new(
  322|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  323|       |                        rest.len() + 1,
  324|       |                        1,
  325|       |                    ))
  326|       |                }
  327|       |                _ => {
  328|       |                    builder.push(c);
  329|       |                }
  330|       |            }
  331|       |        }
  332|       |
  333|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  334|       |            SyntaxErrorKind::MissingClosingSingleQuote
  335|       |        } else {
  336|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  337|       |        };
  338|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  339|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  340|       |
  341|       |        fn read_escape_sequence<I>(
  342|       |            q_len: usize,
  343|       |            c_idx: usize,
  344|       |            chars: &mut Peekable<I>,
  345|       |            mode: StringParseMode,
  346|       |        ) -> std::result::Result<char, SyntaxError>
  347|       |        where
  348|       |            I: Iterator<Item = (usize, char)>,
  349|       |        {
  350|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  351|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  352|       |                q_len - c_idx,
  353|       |                1,
  354|       |            ))?;
  355|       |            match ctrl {
  356|       |                'u' => {
  357|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  358|       |                    match raw_c {
  359|       |                        // High surrogate, start of a UTF-16 pair.
  360|       |                        0xD800..=0xDBFF => {
  361|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  362|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  363|       |                                q_len - c_idx,
  364|       |                                6,
  365|       |                            ))?;
  366|       |                            if next != '\\' {
  367|       |                                return Err(SyntaxError::new(
  368|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  369|       |                                    q_len - c_idx,
  370|       |                                    6,
  371|       |                                ));
  372|       |                            }
  373|       |                            chars.next();
  374|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  375|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  376|       |                                q_len - c_idx,
  377|       |                                6,
  378|       |                            ))?;
  379|       |                            if next != 'u' {
  380|       |                                return Err(SyntaxError::new(
  381|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  382|       |                                    q_len - c_idx,
  383|       |                                    6,
  384|       |                                ));
  385|       |                            }
  386|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  387|       |                            match low {
  388|       |                                0xDC00..=0xDFFF => {
  389|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  390|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  391|       |                                }
  392|       |                                _ => Err(SyntaxError::new(
  393|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  394|       |                                    q_len - c_idx,
  395|       |                                    6,
  396|       |                                )),
  397|       |                            }
  398|       |                        }
  399|       |                        // Low surrogate, invalid escape sequence.
  400|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  401|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  402|       |                            q_len - c_idx,
  403|       |                            6,
  404|       |                        )),
  405|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  406|       |                    }
  407|       |                }
  408|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  409|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  410|       |                'n' => Ok('\n'),       // U+000A LF line feed
  411|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  412|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  413|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  414|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  415|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  416|       |                _ => Err(SyntaxError::new(
  417|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  418|       |                    q_len - c_idx,
  419|       |                    2,
  420|       |                )), // no other escape sequences are allowed
  421|       |            }
  422|       |        }
  423|       |
  424|       |        fn read_hexadecimal_escape<I>(
  425|       |            q_len: usize,
  426|       |            c_idx: usize,
  427|       |            chars: &mut Peekable<I>,
  428|       |        ) -> std::result::Result<u32, SyntaxError>
  429|       |        where
  430|       |            I: Iterator<Item = (usize, char)>,
  431|       |        {
  432|       |            let mut x = 0;
  433|       |            for i in 0..4 {
  434|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  435|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  436|       |                    q_len - c_idx + 1,
  437|       |                    2 + i,
  438|       |                ))?;
  439|       |                let v = match c {
  440|       |                    '0'..='9' => c as u32 - '0' as u32,
  441|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  442|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  443|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  444|       |                    _ => {
  445|       |                        return Err(SyntaxError::new(
  446|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  447|       |                            q_len - c_idx - i - 1,
  448|       |                            1,
  449|       |                        ))
  450|       |                    }
  451|       |                };
  452|       |                x <<= 4;
  453|       |                x += v;
  454|       |                chars.next();
  455|       |            }
  456|       |            Ok(x)
  457|       |        }
  458|       |    }
  459|   649k|}
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser13name_selector:
  217|   324k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  218|   324k|    return map(
  219|   324k|        alt((
  220|   324k|            preceded(char('\''), string(StringParseMode::SingleQuoted)),
  221|   324k|            preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  222|   324k|        )),
  223|   324k|        Selector::Name,
  224|   324k|    )(q);
  225|   324k|}
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17wildcard_selector0B5_:
  228|  94.8k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|   222k|    move |q: &'a str| {
   27|   222k|        inner
   28|   222k|            .parse(skip_whitespace(q))
   29|   222k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|   222k|    }
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser18descendant_segment:
   88|   496k|fn descendant_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
   89|   496k|    map(
   90|   496k|        preceded(
   91|   496k|            tag(".."),
   92|   496k|            cut(alt((
   93|   496k|                bracketed_selection,
   94|   496k|                map(wildcard_selector, Selectors::one),
   95|   496k|                member_name_shorthand,
   96|   496k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
   97|   496k|            ))),
   98|   496k|        ),
   99|   496k|        Segment::Descendant,
  100|   496k|    )(q)
  101|   496k|}
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser8skip_one:
   16|   152k|fn skip_one(q: &str) -> &str {
   17|   152k|    let mut chars = q.chars();
   18|   152k|    chars.next();
   19|   152k|    chars.as_str()
   20|   152k|}
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser8selector:
  202|   324k|fn selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  203|   324k|    alt((
  204|   324k|        ignore_whitespace(name_selector),
  205|   324k|        ignore_whitespace(wildcard_selector),
  206|   324k|        ignore_whitespace(index_selector),
  207|   324k|        failed_selector,
  208|   324k|    ))(q)
  209|   324k|}
_RNCNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string0s_0B7_:
  320|   226k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser15failed_selector0B5_:
  249|  1.35M|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
_RNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB6_9SelectorsE0B6_:
  122|  59.4k|    move |q: &str| {
  123|  59.4k|        let rest = skip_one(q)
  124|  59.4k|            .trim_start_matches('.')
  125|  59.4k|            .trim_start_matches(|x| x != '.' && x != '[');
  126|  59.4k|        Err(Err::Failure(InternalParseError::SyntaxError(
  127|  59.4k|            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  128|  59.4k|            rest,
  129|  59.4k|        )))
  130|  59.4k|    }
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser15failed_selectors_0B5_:
  254|   112k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
_RNCNvNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthand10name_first0B7_:
  192|   424k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14index_selector:
  231|   164k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  232|   164k|    let (rest, int) = int(q)?;
  233|  70.2k|    match JsonInt::from_str(int) {
  234|  61.9k|        Ok(int) => {
  235|  61.9k|            if let Ok(uint) = JsonUInt::try_from(int) {
  236|  59.9k|                Ok((rest, Selector::Index(Index::FromStart(uint))))
  237|       |            } else {
  238|  1.98k|                Ok((rest, Selector::Index(Index::FromEnd(int.abs()))))
  239|       |            }
  240|       |        }
  241|  8.24k|        Err(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  242|  8.24k|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  243|  8.24k|            rest,
  244|  8.24k|        ))),
  245|       |    }
  246|   164k|}
_RNCNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser14failed_segmentNtB8_7SegmentE00B8_:
  125|   400k|            .trim_start_matches(|x| x != '.' && x != '[');
_RNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser21member_name_shorthands_0B5_:
  188|   107k|        |x| Selectors::one(Selector::Name(x.into())),
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser3int:
  271|   164k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  272|   164k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  273|       |
  274|  77.8k|    if int != "0" {
  275|  68.8k|        if int == "-0" {
  276|  3.13k|            return Err(Err::Failure(InternalParseError::SyntaxError(
  277|  3.13k|                SyntaxError::new(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len()),
  278|  3.13k|                rest,
  279|  3.13k|            )));
  280|  65.6k|        }
  281|  65.6k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  282|  65.6k|        if without_minus.strip_prefix(['0']).is_some() {
  283|  4.50k|            return Err(Err::Failure(InternalParseError::SyntaxError(
  284|  4.50k|                SyntaxError::new(SyntaxErrorKind::LeadingZeros, q.len(), int.len()),
  285|  4.50k|                rest,
  286|  4.50k|            )));
  287|  61.1k|        }
  288|  9.03k|    }
  289|       |
  290|  70.2k|    Ok((rest, int))
  291|   164k|}
_RNCINvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|   164k|    move |q: &'a str| {
   27|   164k|        inner
   28|   164k|            .parse(skip_whitespace(q))
   29|   164k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|   164k|    }
_RINvNCNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  424|  53.5k|        fn read_hexadecimal_escape<I>(
  425|  53.5k|            q_len: usize,
  426|  53.5k|            c_idx: usize,
  427|  53.5k|            chars: &mut Peekable<I>,
  428|  53.5k|        ) -> std::result::Result<u32, SyntaxError>
  429|  53.5k|        where
  430|  53.5k|            I: Iterator<Item = (usize, char)>,
  431|  53.5k|        {
  432|  53.5k|            let mut x = 0;
  433|   181k|            for i in 0..4 {
  434|   159k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  435|   159k|                    SyntaxErrorKind::InvalidEscapeSequence,
  436|   159k|                    q_len - c_idx + 1,
  437|   159k|                    2 + i,
  438|   159k|                ))?;
  439|   159k|                let v = match c {
  440|   150k|                    '0'..='9' => c as u32 - '0' as u32,
  441|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  442|  52.5k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  443|  35.0k|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  444|       |                    _ => {
  445|  31.2k|                        return Err(SyntaxError::new(
  446|  31.2k|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  447|  31.2k|                            q_len - c_idx - i - 1,
  448|  31.2k|                            1,
  449|  31.2k|                        ))
  450|       |                    }
  451|       |                };
  452|   128k|                x <<= 4;
  453|   128k|                x += v;
  454|   128k|                chars.next();
  455|       |            }
  456|  22.1k|            Ok(x)
  457|  53.5k|        }
_RNvNtCs8kepUdDqpxJ_15rsonpath_syntax6parser13child_segment:
  103|   335k|fn child_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  104|   335k|    map(
  105|   335k|        alt((
  106|   335k|            bracketed_selection,
  107|   335k|            // This cut is only correct because we try parsing descendant_segment first.
  108|   335k|            preceded(
  109|   335k|                char('.'),
  110|   335k|                cut(alt((
  111|   335k|                    map(wildcard_selector, Selectors::one),
  112|   335k|                    member_name_shorthand,
  113|   335k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  114|   335k|                ))),
  115|   335k|            ),
  116|   335k|        )),
  117|   335k|        Segment::Child,
  118|   335k|    )(q)
  119|   335k|}

_RNvMs_NtCs8kepUdDqpxJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   42|  1.08M|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   43|  1.08M|        self.quoted.push(char);
   44|  1.08M|        self
   45|  1.08M|    }
_RNvMs_NtCs8kepUdDqpxJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   36|   209k|    pub(crate) fn new() -> Self {
   37|   209k|        Self {
   38|   209k|            quoted: String::from('"'),
   39|   209k|        }
   40|   209k|    }
_RNvXs0_NtCs8kepUdDqpxJ_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   55|   107k|    fn from(value: JsonStringBuilder) -> Self {
   56|   107k|        value.finish()
   57|   107k|    }
_RNvMs_NtCs8kepUdDqpxJ_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   47|   188k|    pub(crate) fn finish(mut self) -> JsonString {
   48|   188k|        self.quoted.push('"');
   49|   188k|        JsonString { quoted: self.quoted }
   50|   188k|    }

