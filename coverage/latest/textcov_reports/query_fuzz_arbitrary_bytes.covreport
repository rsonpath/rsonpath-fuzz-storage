_RNvXsk_Cs6flZAYNibw_9arbitraryReNtB5_9Arbitrary9size_hintCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
  868|  2.47k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  2.47k|        (0, None)
  870|  2.47k|    }
_RNvXsk_Cs6flZAYNibw_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  2.47k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  2.47k|        let size = u.len();
  864|  2.47k|        arbitrary_str(&mut u, size)
  865|  2.47k|    }

_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3newCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
   85|  2.47k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.47k|        Unstructured { data }
   87|  2.47k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  2.47k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  2.47k|        self.data.get(..size)
  581|  2.47k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  2.47k|    pub fn len(&self) -> usize {
  109|  2.47k|        self.data.len()
  110|  2.47k|    }
_RNvMNtCs6flZAYNibw_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  2.47k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  2.47k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  2.47k|        }
  552|  2.47k|
  553|  2.47k|        let (for_buf, rest) = self.data.split_at(size);
  554|  2.47k|        self.data = rest;
  555|  2.47k|        Ok(for_buf)
  556|  2.47k|    }

_RNvXCs6dKByMwQImo_13libfuzzer_sysNtB2_6CorpusINtNtCslATUeuPuGvJ_4core7convert4FromuE4fromCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
   30|  2.47k|    fn from(_: ()) -> Self {
   31|  2.47k|        Self::Keep
   32|  2.47k|    }
_RNvNvCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes1__19___libfuzzer_sys_run:
  303|  2.47k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  2.47k|                $body
  305|  2.47k|            }
rust_fuzzer_test_input:
  259|  2.47k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.47k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.47k|
  262|  2.47k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.47k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.47k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.47k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.47k|                // get to longer inputs that actually lead to interesting executions
  267|  2.47k|                // quicker.
  268|  2.47k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  2.47k|                }
  271|  2.47k|
  272|  2.47k|                let mut u = Unstructured::new(bytes);
  273|  2.47k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.47k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.47k|                }
  291|       |
  292|  2.47k|                let data = match data {
  293|  2.47k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.47k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.47k|                result.to_libfuzzer_code()
  299|  2.47k|            }
_RNvMs_Cs6dKByMwQImo_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
   40|  2.47k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.47k|        match self {
   42|  2.47k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  2.47k|    }
LLVMFuzzerTestOneInput:
   58|  2.47k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.47k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.47k|    });
   63|  2.47k|
   64|  2.47k|    match test_input {
   65|  2.47k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.47k|}
_RNCNvCs6dKByMwQImo_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.47k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.47k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.47k|        rust_fuzzer_test_input(data_slice)
   62|  2.47k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBD_5error18InternalParseErrorTNCINvNtBD_6parser17ignore_whitespaceBB_NvB1U_13name_selectorB1h_E0NCIB1S_BB_NvB1U_17wildcard_selectorB1h_E0NCIB1S_BB_NvB1U_14slice_selectorB1h_E0NCIB1S_BB_NvB1U_14index_selectorB1h_E0NvB1U_15failed_selectorEE0BD_:
   50|  84.0k|  move |i: I| l.choice(i)
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvBy_9name_char0ReNtNtBC_5error18InternalParseErrorE0EINtB4_3AltB2I_cB2K_E6choiceBC_:
  134|  17.5k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  17.5k|        match self.0.parse(input.clone()) {
  136|  7.42k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  10.1k|          res => res,
  138|       |        }
  139|  17.5k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvNtBD_6parser17wildcard_selectorNvMsf_BD_BB_3oneE0NvB2G_21member_name_shorthandNCINvB2G_14failed_segmentBB_E0EE0BD_:
   50|  7.73k|  move |i: I| l.choice(i)
_RNvXs2_NtCsijflsOnQTe0_3nom6branchTNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBE_8SelectorNvBC_13name_selectorNtNtBE_5error18InternalParseErrorE0NCIBA_B1z_NvBC_17wildcard_selectorB27_E0NCIBA_B1z_NvBC_14slice_selectorB27_E0NCIBA_B1z_NvBC_14index_selectorB27_E0NvBC_15failed_selectorEINtB5_3AltReB1z_B27_E6choiceBE_:
  134|  84.0k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  84.0k|        match self.0.parse(input.clone()) {
  136|  76.6k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.38k|          res => res,
  138|       |        }
  139|  84.0k|      }
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtB15_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B1Q_E0NCNvNtB15_6parser6string0E0Bw_EINtB4_3AltBY_B11_B1Q_E6choiceB15_:
  134|  84.0k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  84.0k|        match self.0.parse(input.clone()) {
  136|  79.4k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  4.54k|          res => res,
  138|       |        }
  139|  84.0k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altRecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBG_6parser21member_name_shorthand10name_firstNCINvNtNtB6_9character8complete7satisfyNCNvB1E_9name_char0Bz_BC_E0EE0BG_:
   50|  17.5k|  move |i: I| l.choice(i)
_RNvXs1_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB7_10combinator3mapReNtBB_8SelectorNtBB_9SelectorsNtNtBB_5error18InternalParseErrorNvBz_17wildcard_selectorNvMsf_BB_B2e_3oneE0NvBz_21member_name_shorthandNCINvBz_14failed_segmentB2e_E0EINtB5_3AltB1Y_B2e_B2t_E6choiceBB_:
  134|  7.17k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  7.17k|        match self.0.parse(input.clone()) {
  136|  5.26k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.90k|          res => res,
  138|       |        }
  139|  7.17k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBz_cBB_B1i_NCINvNtNtB6_9character8complete4charBz_B1i_E0NCINvNtB6_10combinator3cutBz_BB_B1i_NCIB2_Bz_BB_B1i_TNCINvB3Q_3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMsf_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0E0E0EE0BD_:
   50|  32.0k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBF_5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBB_B1q_NCINvNtNtB6_9character8complete4charBz_B1q_E0NCNvNtBF_6parser6string0E0B1Y_EE0BF_:
   50|  84.0k|  move |i: I| l.choice(i)
_RNvXs0_NtCsijflsOnQTe0_3nom6branchTNCINvNtB7_10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtB11_9SelectorsNtNtB11_5error18InternalParseErrorNvNtB11_6parser17wildcard_selectorNvMsf_B11_B1F_3oneE0NvB2v_21member_name_shorthandNCINvB2v_14failed_segmentB1F_E0EINtB5_3AltBX_B1F_B1V_E6choiceB11_:
  134|  7.73k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  7.73k|        match self.0.parse(input.clone()) {
  136|  6.63k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  1.10k|          res => res,
  138|       |        }
  139|  7.73k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBx_cBz_B1g_NCINvNtNtB4_9character8complete4charBx_B1g_E0NCINvNtB4_10combinator3cutBx_Bz_B1g_NCIB0_Bx_Bz_B1g_TNCINvB3O_3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EE0E0E0EEBB_:
   47|  32.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  32.0k|  mut l: List,
   49|  32.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  32.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altRecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNvNvNtBE_6parser21member_name_shorthand10name_firstNCINvNtNtB4_9character8complete7satisfyNCNvB1C_9name_char0Bx_BA_E0EEBE_:
   47|  17.5k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  17.5k|  mut l: List,
   49|  17.5k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  17.5k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionNCINvNtB6_8sequence8precededRecNtBA_9SelectorsNtNtBA_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charB1Z_B2h_E0NCINvNtB6_10combinator3cutB1Z_B22_B2h_NCINvB4_3altB1Z_B22_B2h_TNCINvB3D_3mapB1Z_NtBA_8SelectorB22_B2h_NvBy_17wildcard_selectorNvMsf_BA_B22_3oneE0NvBy_21member_name_shorthandNCINvBy_14failed_segmentB22_E0EE0E0E0EINtB4_3AltB1Z_B22_B2h_E6choiceBA_:
  134|  32.0k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  32.0k|        match self.0.parse(input.clone()) {
  136|  18.3k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  13.7k|          res => res,
  138|       |        }
  139|  32.0k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBB_5error18InternalParseErrorTNCINvNtBB_6parser17ignore_whitespaceBz_NvB1S_13name_selectorB1f_E0NCIB1Q_Bz_NvB1S_17wildcard_selectorB1f_E0NCIB1Q_Bz_NvB1S_14slice_selectorB1f_E0NCIB1Q_Bz_NvB1S_14index_selectorB1f_E0NvB1S_15failed_selectorEEBB_:
   47|  84.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  84.0k|  mut l: List,
   49|  84.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  84.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNvNtBB_6parser19bracketed_selectionNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvB1Q_17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB1Q_21member_name_shorthandNCINvB1Q_14failed_segmentBz_E0EEBB_:
   47|  39.2k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  39.2k|  mut l: List,
   49|  39.2k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  39.2k|}
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReBz_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB6_8sequence8precededBz_cBz_BE_NCINvNtNtB6_9character8complete4charBz_BE_E0INvB2l_6digit1Bz_BE_EE0B2Y_EE0BI_:
   50|   161k|  move |i: I| l.choice(i)
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax7SegmentNtNtBD_5error18InternalParseErrorTNvNtBD_6parser18descendant_segmentNvB1Q_13child_segmentNCINvB1Q_14failed_segmentBB_E0EE0BD_:
   50|  39.2k|  move |i: I| l.choice(i)
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax7SegmentNtNtBB_5error18InternalParseErrorTNvNtBB_6parser18descendant_segmentNvB1O_13child_segmentNCINvB1O_14failed_segmentBz_E0EEBB_:
   47|  39.2k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  39.2k|  mut l: List,
   49|  39.2k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  39.2k|}
_RNvXs_NtCsijflsOnQTe0_3nom6branchTNCINvNtB6_8sequence8precededRecBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBY_B14_E0INvB28_6digit1BY_B14_EE0B2M_EINtB4_3AltBY_BY_B14_E6choiceB18_:
  134|   161k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|   161k|        match self.0.parse(input.clone()) {
  136|   150k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  11.2k|          res => res,
  138|       |        }
  139|   161k|      }
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBB_5error18InternalParseErrorTNCINvNtB4_10combinator3mapBx_NtBB_8SelectorBz_B1g_NvNtBB_6parser17wildcard_selectorNvMsf_BB_Bz_3oneE0NvB2E_21member_name_shorthandNCINvB2E_14failed_segmentBz_E0EEBB_:
   47|  32.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  32.0k|  mut l: List,
   49|  32.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  32.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBD_5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBz_B1o_NCINvNtNtB4_9character8complete4charBx_B1o_E0NCNvNtBD_6parser6string0E0B1W_EEBD_:
   47|  84.0k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|  84.0k|  mut l: List,
   49|  84.0k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|  84.0k|}
_RINvNtCsijflsOnQTe0_3nom6branch3altReBx_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB4_8sequence8precededBx_cBx_BC_NCINvNtNtB4_9character8complete4charBx_BC_E0INvB2j_6digit1Bx_BC_EE0B2W_EEBG_:
   47|   161k|pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(
   48|   161k|  mut l: List,
   49|   161k|) -> impl FnMut(I) -> IResult<I, O, E> {
   50|       |  move |i: I| l.choice(i)
   51|   161k|}
_RNvXs0_NtCsijflsOnQTe0_3nom6branchTNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segmentNvBz_13child_segmentNCINvBz_14failed_segmentNtBB_7SegmentE0EINtB5_3AltReB2f_NtNtBB_5error18InternalParseErrorE6choiceBB_:
  134|  39.2k|      fn choice(&mut self, input: Input) -> IResult<Input, Output, Error> {
  135|  39.2k|        match self.0.parse(input.clone()) {
  136|  32.0k|          Err(Err::Error(e)) => alt_trait_inner!(1, self, input, e, $($id)+),
  137|  7.17k|          res => res,
  138|       |        }
  139|  39.2k|      }
_RNCINvNtCsijflsOnQTe0_3nom6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBD_5error18InternalParseErrorTNvNtBD_6parser19bracketed_selectionNCINvNtB6_10combinator3mapBz_NtBD_8SelectorBB_B1i_NvB1S_17wildcard_selectorNvMsf_BD_BB_3oneE0NvB1S_21member_name_shorthandNCINvB1S_14failed_segmentBB_E0EE0BD_:
   50|  7.17k|  move |i: I| l.choice(i)

_RNCINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBJ_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BS_:
   39|   128k|  move |i: Input| {
   40|   128k|    let tag_len = tag.input_len();
   41|   128k|    let t = tag.clone();
   42|   128k|    let res: IResult<_, _, Error> = match i.compare(t) {
   43|  16.8k|      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|   112k|        let e: ErrorKind = ErrorKind::Tag;
   46|   112k|        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|   128k|    res
   50|   128k|  }
_RINvNtNtCsijflsOnQTe0_3nom5bytes8complete3tagReBH_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBQ_:
   32|   128k|pub fn tag<T, Input, Error: ParseError<Input>>(
   33|   128k|  tag: T,
   34|   128k|) -> impl Fn(Input) -> IResult<Input, Input, Error>
   35|   128k|where
   36|   128k|  Input: InputTake + Compare<T>,
   37|   128k|  T: InputLength + Clone,
   38|   128k|{
   39|       |  move |i: Input| {
   40|       |    let tag_len = tag.input_len();
   41|       |    let t = tag.clone();
   42|       |    let res: IResult<_, _, Error> = match i.compare(t) {
   43|       |      CompareResult::Ok => Ok(i.take_split(tag_len)),
   44|       |      _ => {
   45|       |        let e: ErrorKind = ErrorKind::Tag;
   46|       |        Err(Err::Error(Error::from_error_kind(i, e)))
   47|       |      }
   48|       |    };
   49|       |    res
   50|       |  }
   51|   128k|}

_RINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  29.0k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  29.0k|where
   63|  29.0k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  29.0k|  <I as InputIter>::Item: AsChar,
   65|  29.0k|  F: Fn(char) -> bool,
   66|  29.0k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  29.0k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BU_:
   37|   481k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   481k|  }) {
   41|   106k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   375k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   481k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBX_5error18InternalParseErrorEBX_:
   61|  17.5k|pub fn satisfy<F, I, Error: ParseError<I>>(cond: F) -> impl Fn(I) -> IResult<I, char, Error>
   62|  17.5k|where
   63|  17.5k|  I: Slice<RangeFrom<usize>> + InputIter,
   64|  17.5k|  <I as InputIter>::Item: AsChar,
   65|  17.5k|  F: Fn(char) -> bool,
   66|  17.5k|{
   67|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|       |  }) {
   72|       |    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|       |    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|       |  }
   75|  17.5k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB8_5error5ErrorBO_EE0Csiia64awkvAv_15rsonpath_syntax:
   37|   157k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|   157k|  }) {
   41|  26.5k|    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|   131k|    _ => Err(Err::Error(Error::from_char(i, c))),
   43|   157k|  }
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  28.8k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  28.8k|    let c = t.as_char();
   69|  28.8k|    let b = cond(c);
   70|  28.8k|    (c, b)
   71|  28.8k|  }) {
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_first0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  29.0k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  29.0k|  }) {
   72|  17.0k|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  12.0k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  29.0k|  }
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0BW_:
  440|   411k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB11_5error18InternalParseErrorE00B11_:
   67|  7.28k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|  7.28k|    let c = t.as_char();
   69|  7.28k|    let b = cond(c);
   70|  7.28k|    (c, b)
   71|  7.28k|  }) {
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE00BW_:
   37|   480k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   480k|    let b = t.as_char() == c;
   39|   480k|    (&c, b)
   40|   480k|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtB6_5error5ErrorBM_EECsiia64awkvAv_15rsonpath_syntax:
   32|   157k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   157k|where
   34|   157k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   157k|  <I as InputIter>::Item: AsChar,
   36|   157k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   157k|}
_RNCINvNtNtCsijflsOnQTe0_3nom9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtBZ_5error18InternalParseErrorE0BZ_:
   67|  7.42k|  move |i: I| match (i).iter_elements().next().map(|t| {
   68|       |    let c = t.as_char();
   69|       |    let b = cond(c);
   70|       |    (c, b)
   71|  7.42k|  }) {
   72|    561|    Some((c, true)) => Ok((i.slice(c.len()..), c)),
   73|  6.86k|    _ => Err(Err::Error(Error::from_error_kind(i, ErrorKind::Satisfy))),
   74|  7.42k|  }
_RINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBS_:
   32|   501k|pub fn char<I, Error: ParseError<I>>(c: char) -> impl Fn(I) -> IResult<I, char, Error>
   33|   501k|where
   34|   501k|  I: Slice<RangeFrom<usize>> + InputIter,
   35|   501k|  <I as InputIter>::Item: AsChar,
   36|   501k|{
   37|       |  move |i: I| match (i).iter_elements().next().map(|t| {
   38|       |    let b = t.as_char() == c;
   39|       |    (&c, b)
   40|       |  }) {
   41|       |    Some((c, true)) => Ok((i.slice(c.len()..), c.as_char())),
   42|       |    _ => Err(Err::Error(Error::from_char(i, c))),
   43|       |  }
   44|   501k|}
_RNCNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReINtNtBa_5error5ErrorBQ_EE00Csiia64awkvAv_15rsonpath_syntax:
   37|   154k|  move |i: I| match (i).iter_elements().next().map(|t| {
   38|   154k|    let b = t.as_char() == c;
   39|   154k|    (&c, b)
   40|   154k|  }) {
_RINvNtNtCsijflsOnQTe0_3nom9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEBU_:
  435|   163k|pub fn digit1<T, E: ParseError<T>>(input: T) -> IResult<T, T, E>
  436|   163k|where
  437|   163k|  T: InputTakeAtPosition,
  438|   163k|  <T as InputTakeAtPosition>::Item: AsChar,
  439|   163k|{
  440|   163k|  input.split_at_position1_complete(|item| !item.is_dec_digit(), ErrorKind::Digit)
  441|   163k|}

_RINvNtCsijflsOnQTe0_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBC_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1o_6parser17ignore_whitespaceBE_NCINvNtB4_8sequence8precededBC_cBE_B1k_NCINvNtNtB4_9character8complete4charBC_B1k_E0NCIB0_BC_BC_B1k_NCIB2m_BC_NvB2o_3intB1k_E0E0E0B1k_E0EB1o_:
  239|  32.0k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  32.0k|where
  241|  32.0k|  F: Parser<I, O, E>,
  242|  32.0k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  32.0k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtBN_6parser3intE0BN_:
  243|  68.5k|  move |input: I| {
  244|  68.5k|    let i = input.clone();
  245|  68.5k|    match f.parse(input) {
  246|  15.7k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  50.6k|      Err(Err::Error(_)) => Ok((i, None)),
  248|  2.10k|      Err(e) => Err(e),
  249|       |    }
  250|  68.5k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3optReBC_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtBL_6parser17ignore_whitespaceBC_NvB1L_3intBH_E0EBL_:
  239|  65.5k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  65.5k|where
  241|  65.5k|  F: Parser<I, O, E>,
  242|  65.5k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  65.5k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvNtBI_6parser17wildcard_selectorNvMsf_BI_BG_3oneE0NvB32_21member_name_shorthandNCINvB32_14failed_segmentBG_E0EE0E0BI_:
  635|  7.73k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  7.73k|    rest => rest,
  638|  7.73k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCINvNtB4_8sequence8precededBC_cBE_B1y_NCINvNtNtB4_9character8complete4charBC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCIB28_BC_BE_B1y_TNCIB0_BC_NtBG_8SelectorBE_B1y_NvB2D_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB2D_21member_name_shorthandNCINvB2D_14failed_segmentBE_E0EE0E0E0EE0NcNtB1l_5Child0EBG_:
   73|  32.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  32.0k|where
   75|  32.0k|  F: Parser<I, O1, E>,
   76|  32.0k|  G: FnMut(O1) -> O2,
   77|  32.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  32.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReBC_NtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBC_BC_B1n_E0NCNvNtBJ_6parser17wildcard_selector0EBJ_:
   73|  89.6k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  89.6k|where
   75|  89.6k|  F: Parser<I, O1, E>,
   76|  89.6k|  G: FnMut(O1) -> O2,
   77|  89.6k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  89.6k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtBN_6parser17ignore_whitespaceBE_NvB1N_3intBJ_E0E0BN_:
  243|  61.4k|  move |input: I| {
  244|  61.4k|    let i = input.clone();
  245|  61.4k|    match f.parse(input) {
  246|  10.8k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  49.4k|      Err(Err::Error(_)) => Ok((i, None)),
  248|  1.11k|      Err(e) => Err(e),
  249|       |    }
  250|  61.4k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator4peekRecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtBM_6parser21member_name_shorthand10name_firstE0BM_:
  308|  11.4k|  move |input: I| {
  309|  11.4k|    let i = input.clone();
  310|  11.4k|    match f.parse(input) {
  311|  6.86k|      Ok((_, o)) => Ok((i, o)),
  312|  4.61k|      Err(e) => Err(e),
  313|       |    }
  314|  11.4k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator4peekRecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtBK_6parser21member_name_shorthand10name_firstEBK_:
  304|  11.4k|pub fn peek<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, O, E>
  305|  11.4k|where
  306|  11.4k|  F: Parser<I, O, E>,
  307|  11.4k|{
  308|       |  move |input: I| {
  309|       |    let i = input.clone();
  310|       |    match f.parse(input) {
  311|       |      Ok((_, o)) => Ok((i, o)),
  312|       |      Err(e) => Err(e),
  313|       |    }
  314|       |  }
  315|  11.4k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_BE_BG_B1A_NCINvNtNtB6_5bytes8complete3tagBE_BE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCIB2_BE_NtBI_8SelectorBG_B1A_NvB4n_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBG_E0EE0E0E0NcNtB1n_10Descendant0E0BI_:
   78|  39.2k|  move |input: I| {
   79|  39.2k|    let (input, o1) = parser.parse(input)?;
   80|  3.15k|    Ok((input, f(o1)))
   81|  39.2k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReBE_NtCsiia64awkvAv_15rsonpath_syntax8SelectorNtNtBL_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBE_BE_B1p_E0NCNvNtBL_6parser17wildcard_selector0E0BL_:
   78|  89.6k|  move |input: I| {
   79|  89.6k|    let (input, o1) = parser.parse(input)?;
   80|  9.64k|    Ok((input, f(o1)))
   81|  89.6k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNvNtBG_6parser19bracketed_selectionNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvB2q_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB2q_21member_name_shorthandNCINvB2q_14failed_segmentBE_E0EE0EBG_:
  631|  39.2k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  39.2k|where
  633|  39.2k|  F: Parser<I, O, E>,
  634|  39.2k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  39.2k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBG_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1l_TNCINvB2_3mapBC_NtBG_8SelectorBE_B1l_NvNtBG_6parser17wildcard_selectorNvMsf_BG_BE_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBE_E0EE0EBG_:
  631|  32.0k|pub fn cut<I, O, E: ParseError<I>, F>(mut parser: F) -> impl FnMut(I) -> IResult<I, O, E>
  632|  32.0k|where
  633|  32.0k|  F: Parser<I, O, E>,
  634|  32.0k|{
  635|       |  move |input: I| match parser.parse(input) {
  636|       |    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|       |    rest => rest,
  638|       |  }
  639|  32.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBG_7SegmentNtNtBG_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_BC_BE_B1y_NCINvNtNtB4_5bytes8complete3tagBC_BC_B1y_E0NCINvB2_3cutBC_BE_B1y_NCINvNtB4_6branch3altBC_BE_B1y_TNvNtBG_6parser19bracketed_selectionNCIB0_BC_NtBG_8SelectorBE_B1y_NvB4l_17wildcard_selectorNvMsf_BG_BE_3oneE0NvB4l_21member_name_shorthandNCINvB4l_14failed_segmentBE_E0EE0E0E0NcNtB1l_10Descendant0EBG_:
   73|  39.2k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  39.2k|where
   75|  39.2k|  F: Parser<I, O1, E>,
   76|  39.2k|  G: FnMut(O1) -> O2,
   77|  39.2k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  39.2k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1n_TNvNtBI_6parser19bracketed_selectionNCINvB4_3mapBE_NtBI_8SelectorBG_B1n_NvB2s_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB2s_21member_name_shorthandNCINvB2s_14failed_segmentBG_E0EE0E0BI_:
  635|  7.17k|  move |input: I| match parser.parse(input) {
  636|      0|    Err(Err::Error(e)) => Err(Err::Failure(e)),
  637|  7.17k|    rest => rest,
  638|  7.17k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNvNtBI_6parser17wildcard_selectorNvMsf_BI_B1m_3oneE0BI_:
   78|  12.9k|  move |input: I| {
   79|  12.9k|    let (input, o1) = parser.parse(input)?;
   80|  1.51k|    Ok((input, f(o1)))
   81|  12.9k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBI_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_6branch3altBI_BI_BN_TNCINvNtB4_8sequence8precededBI_cBI_BN_NCINvNtNtB4_9character8complete4charBI_BN_E0INvB2Y_6digit1BI_BN_EE0B3B_EE0EBR_:
  506|   161k|pub fn recognize<I: Clone + Offset + Slice<RangeTo<usize>>, O, E: ParseError<I>, F>(
  507|   161k|  mut parser: F,
  508|   161k|) -> impl FnMut(I) -> IResult<I, I, E>
  509|   161k|where
  510|   161k|  F: Parser<I, O, E>,
  511|   161k|{
  512|       |  move |input: I| {
  513|       |    let i = input.clone();
  514|       |    match parser.parse(i) {
  515|       |      Ok((i, _)) => {
  516|       |        let index = input.offset(&i);
  517|       |        Ok((i, input.slice(..index)))
  518|       |      }
  519|       |      Err(e) => Err(e),
  520|       |    }
  521|       |  }
  522|   161k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str17JsonStringBuilderNtBK_9SelectorsNtNtBK_5error18InternalParseErrorNCINvNtB6_8sequence8precededBE_cBG_B1R_NCINvB4_4peekBE_cB1R_NvNvNtBK_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BE_cB1R_NvB3o_9name_charNCB3o_0NvMs_BI_BG_3newBG_E0E0NCB3o_s_0E0BK_:
   78|  11.4k|  move |input: I| {
   79|  11.4k|    let (input, o1) = parser.parse(input)?;
   80|  6.86k|    Ok((input, f(o1)))
   81|  11.4k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtBG_9SelectorsNtNtBG_5error18InternalParseErrorNvNtBG_6parser17wildcard_selectorNvMsf_BG_B1k_3oneEBG_:
   73|  71.2k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  71.2k|where
   75|  71.2k|  F: Parser<I, O1, E>,
   76|  71.2k|  G: FnMut(O1) -> O2,
   77|  71.2k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  71.2k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtBI_8SelectorNtNtBI_5error18InternalParseErrorNCINvNtB4_6branch3altBC_BE_B1H_TNCINvNtB4_8sequence8precededBC_cBE_B1H_NCINvNtNtB4_9character8complete4charBC_B1H_E0NCNvNtBI_6parser6string0E0B2K_EE0NcNtB1t_4Name0EBI_:
   73|  84.0k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  84.0k|where
   75|  84.0k|  F: Parser<I, O1, E>,
   76|  84.0k|  G: FnMut(O1) -> O2,
   77|  84.0k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  84.0k|}
_RINvNtCsijflsOnQTe0_3nom10combinator3optReBC_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtBL_6parser3intEBL_:
  239|  68.5k|pub fn opt<I: Clone, O, E: ParseError<I>, F>(mut f: F) -> impl FnMut(I) -> IResult<I, Option<O>, E>
  240|  68.5k|where
  241|  68.5k|  F: Parser<I, O, E>,
  242|  68.5k|{
  243|       |  move |input: I| {
  244|       |    let i = input.clone();
  245|       |    match f.parse(input) {
  246|       |      Ok((i, o)) => Ok((i, Some(o))),
  247|       |      Err(Err::Error(_)) => Ok((i, None)),
  248|       |      Err(e) => Err(e),
  249|       |    }
  250|       |  }
  251|  68.5k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3optReINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB1q_6parser17ignore_whitespaceBG_NCINvNtB6_8sequence8precededBE_cBG_B1m_NCINvNtNtB6_9character8complete4charBE_B1m_E0NCIB2_BE_BE_B1m_NCIB2o_BE_NvB2q_3intB1m_E0E0E0B1m_E0E0B1q_:
  243|  32.0k|  move |input: I| {
  244|  32.0k|    let i = input.clone();
  245|  32.0k|    match f.parse(input) {
  246|  27.3k|      Ok((i, o)) => Ok((i, Some(o))),
  247|  4.13k|      Err(Err::Error(_)) => Ok((i, None)),
  248|    612|      Err(e) => Err(e),
  249|       |    }
  250|  32.0k|  }
_RINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str17JsonStringBuilderNtBI_9SelectorsNtNtBI_5error18InternalParseErrorNCINvNtB4_8sequence8precededBC_cBE_B1P_NCINvB2_4peekBC_cB1P_NvNvNtBI_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BC_cB1P_NvB3m_9name_charNCB3m_0NvMs_BG_BE_3newBE_E0E0NCB3m_s_0EBI_:
   73|  11.4k|pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>
   74|  11.4k|where
   75|  11.4k|  F: Parser<I, O1, E>,
   76|  11.4k|  G: FnMut(O1) -> O2,
   77|  11.4k|{
   78|       |  move |input: I| {
   79|       |    let (input, o1) = parser.parse(input)?;
   80|       |    Ok((input, f(o1)))
   81|       |  }
   82|  11.4k|}
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtBI_7SegmentNtNtBI_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1A_TNvNtBI_6parser19bracketed_selectionNCINvNtB6_8sequence8precededBE_cBG_B1A_NCINvNtNtB6_9character8complete4charBE_B1A_E0NCINvB4_3cutBE_BG_B1A_NCIB2a_BE_BG_B1A_TNCIB2_BE_NtBI_8SelectorBG_B1A_NvB2F_17wildcard_selectorNvMsf_BI_BG_3oneE0NvB2F_21member_name_shorthandNCINvB2F_14failed_segmentBG_E0EE0E0E0EE0NcNtB1n_5Child0E0BI_:
   78|  32.0k|  move |input: I| {
   79|  32.0k|    let (input, o1) = parser.parse(input)?;
   80|  6.58k|    Ok((input, f(o1)))
   81|  32.0k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator9recognizeReBK_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_6branch3altBK_BK_BP_TNCINvNtB6_8sequence8precededBK_cBK_BP_NCINvNtNtB6_9character8complete4charBK_BP_E0INvB30_6digit1BK_BP_EE0B3D_EE0E0BT_:
  512|   161k|  move |input: I| {
  513|   161k|    let i = input.clone();
  514|   161k|    match parser.parse(i) {
  515|  40.4k|      Ok((i, _)) => {
  516|  40.4k|        let index = input.offset(&i);
  517|  40.4k|        Ok((i, input.slice(..index)))
  518|       |      }
  519|   121k|      Err(e) => Err(e),
  520|       |    }
  521|   161k|  }
_RNCINvNtCsijflsOnQTe0_3nom10combinator3mapReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtBK_8SelectorNtNtBK_5error18InternalParseErrorNCINvNtB6_6branch3altBE_BG_B1J_TNCINvNtB6_8sequence8precededBE_cBG_B1J_NCINvNtNtB6_9character8complete4charBE_B1J_E0NCNvNtBK_6parser6string0E0B2M_EE0NcNtB1v_4Name0E0BK_:
   78|  84.0k|  move |input: I| {
   79|  84.0k|    let (input, o1) = parser.parse(input)?;
   80|  4.60k|    Ok((input, f(o1)))
   81|  84.0k|  }

_RNvYINtNtCsijflsOnQTe0_3nom5error5ErrorReEINtB5_10ParseErrorBB_E9from_charCsiia64awkvAv_15rsonpath_syntax:
   26|   131k|  fn from_char(input: I, _: char) -> Self {
   27|   131k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   131k|  }
_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE2orB6_:
   32|   357k|  fn or(self, other: Self) -> Self {
   33|   357k|    other
   34|   357k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E6appendCsiia64awkvAv_15rsonpath_syntax:
   77|   215k|  fn append(_: I, _: ErrorKind, other: Self) -> Self {
   78|   215k|    other
   79|   215k|  }
_RNvXs_NtCsijflsOnQTe0_3nom5errorINtB4_5ErrorReEINtB4_10ParseErrorBG_E15from_error_kindCsiia64awkvAv_15rsonpath_syntax:
   73|   760k|  fn from_error_kind(input: I, kind: ErrorKind) -> Self {
   74|   760k|    Error { input, code: kind }
   75|   760k|  }
_RNvYNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE9from_charB6_:
   26|   375k|  fn from_char(input: I, _: char) -> Self {
   27|   375k|    Self::from_error_kind(input, ErrorKind::Char)
   28|   375k|  }

_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTRecEINtB2_3ErrINtNtB4_5error5ErrorB18_EEEINtB2_6FinishB18_cB1m_E6finishCsiia64awkvAv_15rsonpath_syntax:
   36|  2.47k|  fn finish(self) -> Result<(I, O), E> {
   37|  2.33k|    match self {
   38|    143|      Ok(res) => Ok(res),
   39|  2.33k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  2.47k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_17wildcard_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B2c_E5parseBF_:
  324|  76.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  76.6k|    self(i)
  326|  76.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB17_6parser17ignore_whitespaceBY_NvB27_3intB13_E0E0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  27.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  27.9k|    self(i)
  326|  27.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtB7_9character8complete4charReNtNtBF_5error18InternalParseErrorE0B2d_E0INtB5_6ParserB2b_cB2d_E5parseBF_:
  324|  66.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  66.4k|    self(i)
  326|  66.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecB10_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B17_E0INvB2b_6digit1B10_B17_EE0INtB5_6ParserB10_B10_B17_E5parseB1b_:
  324|   161k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   161k|    self(i)
  326|   161k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string0INtB5_6ParserReNtNtBE_3str10JsonStringNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  7.38k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.38k|    self(i)
  326|  7.38k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete4charReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB18_cB1a_E5parseB1e_:
  324|   442k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   442k|    self(i)
  326|   442k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBZ_5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBV_B1K_NCINvNtNtB7_9character8complete4charBT_B1K_E0NCNvNtBZ_6parser6string0E0B2i_EE0INtB5_6ParserBT_BV_B1K_E5parseBZ_:
  324|  84.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  84.0k|    self(i)
  326|  84.0k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsiia64awkvAv_15rsonpath_syntax8SelectorEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B21_E6finishB1c_:
   36|  84.0k|  fn finish(self) -> Result<(I, O), E> {
   37|  31.8k|    match self {
   38|  52.1k|      Ok(res) => Ok(res),
   39|  31.8k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  84.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_5multi10fold_many0RecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtB17_6parser21member_name_shorthand9name_charNCB24_0NvMs_NtB17_3strNtB32_17JsonStringBuilder3newB3c_E0INtB5_6ParserB10_B3c_B13_E5parseB17_:
  324|  6.86k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  6.86k|    self(i)
  326|  6.86k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReBT_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorTNCINvNtB7_8sequence8precededBT_cBT_BY_NCINvNtNtB7_9character8complete4charBT_BY_E0INvB2F_6digit1BT_BY_EE0B3i_EE0INtB5_6ParserBT_BT_BY_E5parseB12_:
  324|   161k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   161k|    self(i)
  326|   161k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtB7_8sequence8precededB2c_cB1A_NtNtBF_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB2c_B2Q_E0NCINvNtB7_10combinator3optB2c_B2c_B2Q_NCIBB_B2c_NvBD_3intB2Q_E0E0E0B2Q_E0INtB5_6ParserB2c_B1A_B2Q_E5parseBF_:
  324|  32.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.0k|    self(i)
  326|  32.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str17JsonStringBuilderNtNtB17_5error18InternalParseErrorNCINvNtB7_10combinator4peekB10_cB1Z_NvNvNtB17_6parser21member_name_shorthand10name_firstE0NCINvNtB7_5multi10fold_many0B10_cB1Z_NvB39_9name_charNCB39_0NvMs_B15_B13_3newB13_E0E0INtB5_6ParserB10_B13_B1Z_E5parseB17_:
  324|  11.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.4k|    self(i)
  326|  11.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_firstINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  29.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  29.0k|    self(i)
  326|  29.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtBF_9SelectorsE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  4.61k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  4.61k|    self(i)
  326|  4.61k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionB10_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3optB10_B10_B1K_NCINvNtB1O_6parser17ignore_whitespaceB10_NvB4a_3intB1K_E0E0E0INtB5_6ParserB10_B13_B1K_E5parseB1O_:
  324|  32.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.0k|    self(i)
  326|  32.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser3intINtB5_6ParserReB1v_NtNtBC_5error18InternalParseErrorE5parseBC_:
  324|   129k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   129k|    self(i)
  326|   129k|  }
_RNvXNtCsijflsOnQTe0_3nom8internalINtNtCslATUeuPuGvJ_4core6result6ResultTReNtCsiia64awkvAv_15rsonpath_syntax7SegmentEINtB2_3ErrNtNtB1c_5error18InternalParseErrorEEINtB2_6FinishB18_B1a_B20_E6finishB1c_:
   36|  39.2k|  fn finish(self) -> Result<(I, O), E> {
   37|  29.4k|    match self {
   38|  9.73k|      Ok(res) => Ok(res),
   39|  29.4k|      Err(Err::Error(e)) | Err(Err::Failure(e)) => Err(e),
   40|       |      Err(Err::Incomplete(_)) => {
   41|      0|        panic!("Cannot call `finish()` on `Err(Err::Incomplete(_))`: this result means that the parser does not have enough data to decide, you should gather more data and try to reapply  the parser instead")
   42|       |      }
   43|       |    }
   44|  39.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3mapReNtCsiia64awkvAv_15rsonpath_syntax8SelectorNtB12_9SelectorsNtNtB12_5error18InternalParseErrorNvNtB12_6parser17wildcard_selectorNvMsf_B12_B1G_3oneE0INtB5_6ParserBY_B1G_B1W_E5parseB12_:
  324|  12.9k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  12.9k|    self(i)
  326|  12.9k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededReB10_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB18_5error18InternalParseErrorNCINvNtNtB7_5bytes8complete3tagB10_B10_B1N_E0NCINvNtB7_10combinator3cutB10_B16_B1N_NCINvNtB7_6branch3altB10_B16_B1N_TNvNtB18_6parser19bracketed_selectionNCINvB39_3mapB10_NtB18_8SelectorB16_B1N_NvB4g_17wildcard_selectorNvMsf_B18_B16_3oneE0NvB4g_21member_name_shorthandNCINvB4g_14failed_segmentB16_E0EE0E0E0INtB5_6ParserB10_B16_B1N_E5parseB18_:
  324|  39.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  39.2k|    self(i)
  326|  39.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtBF_7SegmentE0INtB5_6ParserReB1x_NtNtBF_5error18InternalParseErrorE5parseBF_:
  324|  10.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  10.5k|    self(i)
  326|  10.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  89.6k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  89.6k|    self(i)
  326|  89.6k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB15_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1K_E0NCINvNtB7_10combinator3cutB10_B13_B1K_NCINvNtB7_6branch3altB10_B13_B1K_TNCINvB37_3mapB10_NtB15_8SelectorB13_B1K_NvNtB15_6parser17wildcard_selectorNvMsf_B15_B13_3oneE0NvB4S_21member_name_shorthandNCINvB4S_14failed_segmentB13_E0EE0E0E0INtB5_6ParserB10_B13_B1K_E5parseB15_:
  324|  18.3k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  18.3k|    self(i)
  326|  18.3k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser13child_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  32.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.0k|    self(i)
  326|  32.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator4peekRecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtB16_6parser21member_name_shorthand10name_firstE0INtB5_6ParserBZ_cB12_E5parseB16_:
  324|  11.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.4k|    self(i)
  326|  11.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3optReBY_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNtB17_6parser3intE0INtB5_6ParserBY_INtNtCslATUeuPuGvJ_4core6option6OptionBY_EB13_E5parseB17_:
  324|  68.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  68.5k|    self(i)
  326|  68.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14slice_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  68.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  68.5k|    self(i)
  326|  68.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvBD_3intNtNtBF_5error18InternalParseErrorE0INtB5_6ParserB1A_B1A_B1L_E5parseBF_:
  324|  61.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  61.4k|    self(i)
  326|  61.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selectionINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  39.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  39.2k|    self(i)
  326|  39.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNvNtB12_6parser19bracketed_selectionNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvB2O_17wildcard_selectorNvMsf_B12_B10_3oneE0NvB2O_21member_name_shorthandNCINvB2O_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  7.17k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.17k|    self(i)
  326|  7.17k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_charINtB5_6ParserRecNtNtBE_5error18InternalParseErrorE5parseBE_:
  324|  17.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  17.5k|    self(i)
  326|  17.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_10combinator3cutReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtB12_5error18InternalParseErrorNCINvNtB7_6branch3altBY_B10_B1H_TNCINvBD_3mapBY_NtB12_8SelectorB10_B1H_NvNtB12_6parser17wildcard_selectorNvMsf_B12_B10_3oneE0NvB3q_21member_name_shorthandNCINvB3q_14failed_segmentB10_E0EE0E0INtB5_6ParserBY_B10_B1H_E5parseB12_:
  324|  7.73k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.73k|    self(i)
  326|  7.73k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segmentINtB5_6ParserReNtBC_7SegmentNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  39.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  39.2k|    self(i)
  326|  39.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_8sequence8precededBT_cBV_B1C_NCINvNtNtB7_9character8complete4charBT_B1C_E0NCINvNtB7_10combinator3cutBT_BV_B1C_NCIBB_BT_BV_B1C_TNCINvB4a_3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMsf_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0E0E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  32.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  32.0k|    self(i)
  326|  32.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_13name_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B28_E5parseBF_:
  324|  84.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  84.0k|    self(i)
  326|  84.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvNtBX_6parser17wildcard_selectorNvMsf_BX_BV_3oneE0NvB30_21member_name_shorthandNCINvB30_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  7.73k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.73k|    self(i)
  326|  7.73k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_9character8complete7satisfyNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char0ReNtNtB1j_5error18InternalParseErrorE0INtB5_6ParserB2t_cB2v_E5parseB1j_:
  324|  7.42k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.42k|    self(i)
  326|  7.42k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtB17_5error18InternalParseErrorNCINvNtNtB7_9character8complete4charB10_B1S_E0NCNvNtB17_6parser6string0E0INtB5_6ParserB10_B13_B1S_E5parseB17_:
  324|   163k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   163k|    self(i)
  326|   163k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtBF_8SelectorNvBD_14index_selectorNtNtBF_5error18InternalParseErrorE0INtB5_6ParserReB1A_B29_E5parseBF_:
  324|  31.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.8k|    self(i)
  326|  31.8k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtNtB7_5bytes8complete3tagReB13_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0INtB5_6ParserB13_B13_B19_E5parseB1d_:
  324|   128k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   128k|    self(i)
  326|   128k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser15failed_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  21.2k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  21.2k|    self(i)
  326|  21.2k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser13name_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  84.0k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  84.0k|    self(i)
  326|  84.0k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalINvNtNtB7_9character8complete6digit1ReNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorEINtB5_6ParserB18_B18_B1a_E5parseB1e_:
  324|   163k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|   163k|    self(i)
  326|   163k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthandINtB5_6ParserReNtBC_9SelectorsNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  11.4k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  11.4k|    self(i)
  326|  11.4k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser14slice_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  68.5k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  68.5k|    self(i)
  326|  68.5k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNCINvNtB7_6branch3altReNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBX_5error18InternalParseErrorTNvNtBX_6parser19bracketed_selectionNCINvNtB7_10combinator3mapBT_NtBX_8SelectorBV_B1C_NvB2c_17wildcard_selectorNvMsf_BX_BV_3oneE0NvB2c_21member_name_shorthandNCINvB2c_14failed_segmentBV_E0EE0INtB5_6ParserBT_BV_B1C_E5parseBX_:
  324|  7.17k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  7.17k|    self(i)
  326|  7.17k|  }
_RNvXsa_NtCsijflsOnQTe0_3nom8internalNvNtCsiia64awkvAv_15rsonpath_syntax6parser14index_selectorINtB5_6ParserReNtBC_8SelectorNtNtBC_5error18InternalParseErrorE5parseBC_:
  324|  31.8k|  fn parse(&mut self, i: I) -> IResult<I, O, E> {
  325|  31.8k|    self(i)
  326|  31.8k|  }

_RNCINvNtCsijflsOnQTe0_3nom5multi10fold_many0RecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtBN_6parser21member_name_shorthand9name_charNCB1K_0NvMs_NtBN_3strNtB2H_17JsonStringBuilder3newB2Q_E0BN_:
  701|  6.86k|  move |i: I| {
  702|  6.86k|    let mut res = init();
  703|  6.86k|    let mut input = i;
  704|       |
  705|  17.5k|    loop {
  706|  17.5k|      let i_ = input.clone();
  707|  17.5k|      let len = input.input_len();
  708|  17.5k|      match f.parse(i_) {
  709|  10.7k|        Ok((i, o)) => {
  710|  10.7k|          // infinite loop check: the parser must always consume
  711|  10.7k|          if i.input_len() == len {
  712|      0|            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|  10.7k|          }
  714|  10.7k|
  715|  10.7k|          res = g(res, o);
  716|  10.7k|          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|  6.86k|          return Ok((input, res));
  720|       |        }
  721|      0|        Err(e) => {
  722|      0|          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|  6.86k|  }
_RINvNtCsijflsOnQTe0_3nom5multi10fold_many0RecNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNvNvNtBL_6parser21member_name_shorthand9name_charNCB1I_0NvMs_NtBL_3strNtB2F_17JsonStringBuilder3newB2O_EBL_:
  689|  11.4k|pub fn fold_many0<I, O, E, F, G, H, R>(
  690|  11.4k|  mut f: F,
  691|  11.4k|  mut init: H,
  692|  11.4k|  mut g: G,
  693|  11.4k|) -> impl FnMut(I) -> IResult<I, R, E>
  694|  11.4k|where
  695|  11.4k|  I: Clone + InputLength,
  696|  11.4k|  F: Parser<I, O, E>,
  697|  11.4k|  G: FnMut(R, O) -> R,
  698|  11.4k|  H: FnMut() -> R,
  699|  11.4k|  E: ParseError<I>,
  700|  11.4k|{
  701|       |  move |i: I| {
  702|       |    let mut res = init();
  703|       |    let mut input = i;
  704|       |
  705|       |    loop {
  706|       |      let i_ = input.clone();
  707|       |      let len = input.input_len();
  708|       |      match f.parse(i_) {
  709|       |        Ok((i, o)) => {
  710|       |          // infinite loop check: the parser must always consume
  711|       |          if i.input_len() == len {
  712|       |            return Err(Err::Error(E::from_error_kind(input, ErrorKind::Many0)));
  713|       |          }
  714|       |
  715|       |          res = g(res, o);
  716|       |          input = i;
  717|       |        }
  718|       |        Err(Err::Error(_)) => {
  719|       |          return Ok((input, res));
  720|       |        }
  721|       |        Err(e) => {
  722|       |          return Err(e);
  723|       |        }
  724|       |      }
  725|       |    }
  726|       |  }
  727|  11.4k|}

_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBE_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1n_E0NCINvNtB4_10combinator3optBE_BE_B1n_NCINvNtB1r_6parser17ignore_whitespaceBE_NvB3K_3intB1n_E0E0EB1r_:
   63|  32.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  32.0k|  mut first: F,
   65|  32.0k|  mut second: G,
   66|  32.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  32.0k|where
   68|  32.0k|  F: Parser<I, O1, E>,
   69|  32.0k|  G: Parser<I, O2, E>,
   70|  32.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  32.0k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1q_E0NCINvNtB6_10combinator3cutBG_BJ_B1q_NCINvNtB6_6branch3altBG_BJ_B1q_TNCINvB2L_3mapBG_NtBL_8SelectorBJ_B1q_NvNtBL_6parser17wildcard_selectorNvMsf_BL_BJ_3oneE0NvB4p_21member_name_shorthandNCINvB4p_14failed_segmentBJ_E0EE0E0E0BL_:
   71|  18.3k|  move |input: I| {
   72|  18.3k|    let (input, _) = first.parse(input)?;
   73|  7.73k|    second.parse(input)
   74|  18.3k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str17JsonStringBuilderNtNtBN_5error18InternalParseErrorNCINvNtB6_10combinator4peekBG_cB1F_NvNvNtBN_6parser21member_name_shorthand10name_firstE0NCINvNtB6_5multi10fold_many0BG_cB1F_NvB2N_9name_charNCB2N_0NvMs_BL_BJ_3newBJ_E0E0BN_:
   71|  11.4k|  move |input: I| {
   72|  11.4k|    let (input, _) = first.parse(input)?;
   73|  6.86k|    second.parse(input)
   74|  11.4k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBJ_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1o_E0NCINvNtB4_10combinator3cutBE_BH_B1o_NCINvNtB4_6branch3altBE_BH_B1o_TNCINvB2J_3mapBE_NtBJ_8SelectorBH_B1o_NvNtBJ_6parser17wildcard_selectorNvMsf_BJ_BH_3oneE0NvB4n_21member_name_shorthandNCINvB4n_14failed_segmentBH_E0EE0E0EBJ_:
   63|  32.0k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  32.0k|  mut first: F,
   65|  32.0k|  mut second: G,
   66|  32.0k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  32.0k|where
   68|  32.0k|  F: Parser<I, O1, E>,
   69|  32.0k|  G: Parser<I, O2, E>,
   70|  32.0k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  32.0k|}
_RNCNCINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBL_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB8_10combinator3optBL_BL_B1u_NvNtB1y_6parser3intE0NCINvB35_17ignore_whitespacecNCINvNtNtB8_9character8complete4charBL_B1u_E0B1u_E0E00B1y_:
  107|  34.5k|    second.parse(input).map(|(i, _)| (i, o1))
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str17JsonStringBuilderNtNtBL_5error18InternalParseErrorNCINvNtB4_10combinator4peekBE_cB1D_NvNvNtBL_6parser21member_name_shorthand10name_firstE0NCINvNtB4_5multi10fold_many0BE_cB1D_NvB2L_9name_charNCB2L_0NvMs_BJ_BH_3newBH_E0EBL_:
   63|  11.4k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  11.4k|  mut first: F,
   65|  11.4k|  mut second: G,
   66|  11.4k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  11.4k|where
   68|  11.4k|  F: Parser<I, O1, E>,
   69|  11.4k|  G: Parser<I, O2, E>,
   70|  11.4k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  11.4k|}
_RINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBH_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB4_10combinator3optBH_BH_B1q_NvNtB1u_6parser3intE0NCINvB31_17ignore_whitespacecNCINvNtNtB4_9character8complete4charBH_B1q_E0B1q_E0EB1u_:
   97|  68.5k|pub fn terminated<I, O1, O2, E: ParseError<I>, F, G>(
   98|  68.5k|  mut first: F,
   99|  68.5k|  mut second: G,
  100|  68.5k|) -> impl FnMut(I) -> IResult<I, O1, E>
  101|  68.5k|where
  102|  68.5k|  F: Parser<I, O1, E>,
  103|  68.5k|  G: Parser<I, O2, E>,
  104|  68.5k|{
  105|       |  move |input: I| {
  106|       |    let (input, o1) = first.parse(input)?;
  107|       |    second.parse(input).map(|(i, _)| (i, o1))
  108|       |  }
  109|  68.5k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence10terminatedReINtNtCslATUeuPuGvJ_4core6option6OptionBJ_EcNtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtB6_10combinator3optBJ_BJ_B1s_NvNtB1w_6parser3intE0NCINvB33_17ignore_whitespacecNCINvNtNtB6_9character8complete4charBJ_B1s_E0B1s_E0E0B1w_:
  105|  68.5k|  move |input: I| {
  106|  68.5k|    let (input, o1) = first.parse(input)?;
  107|  66.4k|    second.parse(input).map(|(i, _)| (i, o1))
  108|  68.5k|  }
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecBE_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_BK_E0INvB1O_6digit1BE_BK_EEBO_:
   63|   161k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   161k|  mut first: F,
   65|   161k|  mut second: G,
   66|   161k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   161k|where
   68|   161k|  F: Parser<I, O1, E>,
   69|   161k|  G: Parser<I, O2, E>,
   70|   161k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   161k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBL_5error18InternalParseErrorNCINvNtNtB4_9character8complete4charBE_B1w_E0NCNvNtBL_6parser6string0EBL_:
   63|   168k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|   168k|  mut first: F,
   65|   168k|  mut second: G,
   66|   168k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|   168k|where
   68|   168k|  F: Parser<I, O1, E>,
   69|   168k|  G: Parser<I, O2, E>,
   70|   168k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|   168k|}
_RINvNtCsijflsOnQTe0_3nom8sequence8precededReBE_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBL_5error18InternalParseErrorNCINvNtNtB4_5bytes8complete3tagBE_BE_B1q_E0NCINvNtB4_10combinator3cutBE_BJ_B1q_NCINvNtB4_6branch3altBE_BJ_B1q_TNvNtBL_6parser19bracketed_selectionNCINvB2J_3mapBE_NtBL_8SelectorBJ_B1q_NvB3M_17wildcard_selectorNvMsf_BL_BJ_3oneE0NvB3M_21member_name_shorthandNCINvB3M_14failed_segmentBJ_E0EE0E0EBL_:
   63|  39.2k|pub fn preceded<I, O1, O2, E: ParseError<I>, F, G>(
   64|  39.2k|  mut first: F,
   65|  39.2k|  mut second: G,
   66|  39.2k|) -> impl FnMut(I) -> IResult<I, O2, E>
   67|  39.2k|where
   68|  39.2k|  F: Parser<I, O1, E>,
   69|  39.2k|  G: Parser<I, O2, E>,
   70|  39.2k|{
   71|       |  move |input: I| {
   72|       |    let (input, _) = first.parse(input)?;
   73|       |    second.parse(input)
   74|       |  }
   75|  39.2k|}
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededReBG_NtCsiia64awkvAv_15rsonpath_syntax9SelectorsNtNtBN_5error18InternalParseErrorNCINvNtNtB6_5bytes8complete3tagBG_BG_B1s_E0NCINvNtB6_10combinator3cutBG_BL_B1s_NCINvNtB6_6branch3altBG_BL_B1s_TNvNtBN_6parser19bracketed_selectionNCINvB2L_3mapBG_NtBN_8SelectorBL_B1s_NvB3O_17wildcard_selectorNvMsf_BN_BL_3oneE0NvB3O_21member_name_shorthandNCINvB3O_14failed_segmentBL_E0EE0E0E0BN_:
   71|  39.2k|  move |input: I| {
   72|  39.2k|    let (input, _) = first.parse(input)?;
   73|  7.17k|    second.parse(input)
   74|  39.2k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecINtNtCslATUeuPuGvJ_4core6option6OptionBG_ENtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1p_E0NCINvNtB6_10combinator3optBG_BG_B1p_NCINvNtB1t_6parser17ignore_whitespaceBG_NvB3M_3intB1p_E0E0E0B1t_:
   71|  32.0k|  move |input: I| {
   72|  32.0k|    let (input, _) = first.parse(input)?;
   73|  27.9k|    second.parse(input)
   74|  32.0k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecNtNtCsiia64awkvAv_15rsonpath_syntax3str10JsonStringNtNtBN_5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_B1y_E0NCNvNtBN_6parser6string0E0BN_:
   71|   163k|  move |input: I| {
   72|   163k|    let (input, _) = first.parse(input)?;
   73|  7.38k|    second.parse(input)
   74|   163k|  }
_RNCINvNtCsijflsOnQTe0_3nom8sequence8precededRecBG_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorNCINvNtNtB6_9character8complete4charBG_BM_E0INvB1Q_6digit1BG_BM_EE0BQ_:
   71|   161k|  move |input: I| {
   72|   161k|    let (input, _) = first.parse(input)?;
   73|  12.8k|    second.parse(input)
   74|   161k|  }

_RNvXs5_NtCsijflsOnQTe0_3nom6traitsReNtB5_7AsBytes8as_bytes:
   97|   128k|  fn as_bytes(&self) -> &[u8] {
   98|   128k|    (*self).as_bytes()
   99|   128k|  }
_RNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB5_7CompareBw_E7compare:
  739|   128k|  fn compare(&self, t: &'b [u8]) -> CompareResult {
  740|   128k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
  741|   128k|
  742|   128k|    match pos {
  743|   111k|      Some(_) => CompareResult::Error,
  744|       |      None => {
  745|  17.0k|        if self.len() >= t.len() {
  746|  16.8k|          CompareResult::Ok
  747|       |        } else {
  748|    219|          CompareResult::Incomplete
  749|       |        }
  750|       |      }
  751|       |    }
  752|       |
  753|       |    /*
  754|       |    let len = self.len();
  755|       |    let blen = t.len();
  756|       |    let m = if len < blen { len } else { blen };
  757|       |    let reduced = &self[..m];
  758|       |    let b = &t[..m];
  759|       |
  760|       |    if reduced != b {
  761|       |      CompareResult::Error
  762|       |    } else if m < blen {
  763|       |      CompareResult::Incomplete
  764|       |    } else {
  765|       |      CompareResult::Ok
  766|       |    }
  767|       |    */
  768|   128k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar12is_dec_digitCsiia64awkvAv_15rsonpath_syntax:
  253|   411k|  fn is_dec_digit(self) -> bool {
  254|   411k|    self.is_ascii_digit()
  255|   411k|  }
_RNCNvXsk_NtCsijflsOnQTe0_3nom6traitsRShINtB7_7CompareBy_E7compare0Csiia64awkvAv_15rsonpath_syntax:
  740|   143k|    let pos = self.iter().zip(t.iter()).position(|(a, b)| a != b);
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar3lenCsiia64awkvAv_15rsonpath_syntax:
  296|   132k|  fn len(self) -> usize {
  297|   132k|    self.len_utf8()
  298|   132k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar7as_charCsiia64awkvAv_15rsonpath_syntax:
  241|   670k|  fn as_char(self) -> char {
  242|   670k|    self
  243|   670k|  }
_RNvXsg_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputTake10take_splitCsiia64awkvAv_15rsonpath_syntax:
  424|  16.8k|  fn take_split(&self, count: usize) -> (Self, Self) {
  425|  16.8k|    let (prefix, suffix) = self.split_at(count);
  426|  16.8k|    (suffix, prefix)
  427|  16.8k|  }
_RINvXsj_NtCsijflsOnQTe0_3nom6traitsReNtB6_19InputTakeAtPosition27split_at_position1_completeNCINvNtNtB8_9character8complete6digit1Bx_NtNtCsiia64awkvAv_15rsonpath_syntax5error18InternalParseErrorE0B27_EB2b_:
  675|   163k|  fn split_at_position1_complete<P, E: ParseError<Self>>(
  676|   163k|    &self,
  677|   163k|    predicate: P,
  678|   163k|    e: ErrorKind,
  679|   163k|  ) -> IResult<Self, Self, E>
  680|   163k|  where
  681|   163k|    P: Fn(Self::Item) -> bool,
  682|   163k|  {
  683|   163k|    match self.find(predicate) {
  684|   122k|      Some(0) => Err(Err::Error(E::from_error_kind(self, e))),
  685|       |      // find() returns a byte index that is already in the slice at a char boundary
  686|  40.1k|      Some(i) => unsafe { Ok((self.get_unchecked(i..), self.get_unchecked(..i))) },
  687|       |      None => {
  688|    670|        if self.is_empty() {
  689|    368|          Err(Err::Error(E::from_error_kind(self, e)))
  690|       |        } else {
  691|       |          // the end of slice is a char boundary
  692|       |          unsafe {
  693|    302|            Ok((
  694|    302|              self.get_unchecked(self.len()..),
  695|    302|              self.get_unchecked(..self.len()),
  696|    302|            ))
  697|       |          }
  698|       |        }
  699|       |      }
  700|       |    }
  701|   163k|  }
_RNvXsn_NtCsijflsOnQTe0_3nom6traitsReINtB5_7CompareBw_E7compare:
  839|   128k|  fn compare(&self, t: &'b str) -> CompareResult {
  840|   128k|    self.as_bytes().compare(t.as_bytes())
  841|   128k|  }
_RNvXsc_NtCsijflsOnQTe0_3nom6traitsRcNtB5_6AsChar7as_charCsiia64awkvAv_15rsonpath_syntax:
  272|   132k|  fn as_char(self) -> char {
  273|   132k|    *self
  274|   132k|  }
_RNvXsf_NtCsijflsOnQTe0_3nom6traitsReNtB5_9InputIter13iter_elementsCsiia64awkvAv_15rsonpath_syntax:
  386|   675k|  fn iter_elements(&self) -> Self::IterElem {
  387|   675k|    self.chars()
  388|   675k|  }
_RNvXsb_NtCsijflsOnQTe0_3nom6traitscNtB5_6AsChar3lenCsiia64awkvAv_15rsonpath_syntax:
  265|  17.5k|  fn len(self) -> usize {
  266|  17.5k|    self.len_utf8()
  267|  17.5k|  }
_RNvXs_NtCsijflsOnQTe0_3nom6traitsReNtB4_11InputLength9input_lenCsiia64awkvAv_15rsonpath_syntax:
   33|   157k|  fn input_len(&self) -> usize {
   34|   157k|    self.len()
   35|   157k|  }
_RNvXs23_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range7RangeTojEE5slice:
 1013|  40.4k|    fn slice(&self, range: $ty) -> Self {
 1014|  40.4k|      &self[range]
 1015|  40.4k|    }
_RNvXs24_NtCsijflsOnQTe0_3nom6traitsReINtB6_5SliceINtNtNtCslATUeuPuGvJ_4core3ops5range9RangeFromjEE5slice:
 1013|   150k|    fn slice(&self, range: $ty) -> Self {
 1014|   150k|      &self[range]
 1015|   150k|    }
_RNvXs4_NtCsijflsOnQTe0_3nom6traitsReNtB5_6Offset6offset:
   81|  40.4k|  fn offset(&self, second: &Self) -> usize {
   82|  40.4k|    let fst = self.as_ptr();
   83|  40.4k|    let snd = second.as_ptr();
   84|  40.4k|
   85|  40.4k|    snd as usize - fst as usize
   86|  40.4k|  }

_RNvMs2_NtCs5dLr1ro1CwM_9once_cell3impINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE14is_initializedCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
   49|  2.47k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.47k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.47k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.47k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.47k|        // `SeqCst` operations on the slow path.
   54|  2.47k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.47k|    }

_RNvMs4_NtCs5dLr1ro1CwM_9once_cell4syncINtB5_8OnceCellNtNtCshJIxznpEM8j_5alloc6string6StringE3getCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
  965|  2.47k|        pub fn get(&self) -> Option<&T> {
  966|  2.47k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  2.47k|                None
  971|       |            }
  972|  2.47k|        }

_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE6append:
  397|   215k|    fn append(input: &'a str, kind: nom::error::ErrorKind, other: Self) -> Self {
  398|   215k|        match other {
  399|   215k|            Self::NomError(e) => Self::NomError(nom::error::Error::append(input, kind, e)),
  400|      0|            _ => other,
  401|       |        }
  402|   215k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8is_emptyB4_:
   44|  2.47k|    pub(crate) fn is_empty(&self) -> bool {
   45|  2.47k|        self.syntax_errors.is_empty()
   46|  2.47k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder8add_many:
   40|  14.2k|    pub(crate) fn add_many(&mut self, mut syntax_errors: Vec<SyntaxError>) {
   41|  14.2k|        self.syntax_errors.append(&mut syntax_errors)
   42|  14.2k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3add:
   36|  18.1k|    pub(crate) fn add(&mut self, syntax_error: SyntaxError) {
   37|  18.1k|        self.syntax_errors.push(syntax_error)
   38|  18.1k|    }
_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_18InternalParseErrorINtNtCsijflsOnQTe0_3nom5error10ParseErrorReE15from_error_kindB7_:
  393|   629k|    fn from_error_kind(input: &'a str, kind: nom::error::ErrorKind) -> Self {
  394|   629k|        Self::NomError(nom::error::Error::from_error_kind(input, kind))
  395|   629k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder3newB4_:
   32|  2.47k|    pub(crate) fn new() -> Self {
   33|  2.47k|        Self { syntax_errors: vec![] }
   34|  2.47k|    }
_RNvMs0_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_11SyntaxError3newB7_:
  135|   165k|    pub(crate) fn new(kind: SyntaxErrorKind, rev_idx: usize, len: usize) -> Self {
  136|   165k|        Self { kind, rev_idx, len }
  137|   165k|    }
_RNvXsm_NtCsiia64awkvAv_15rsonpath_syntax5errorNtB5_15SyntaxErrorKindNtNtCslATUeuPuGvJ_4core5clone5Clone5cloneB7_:
  107|  15.2k|#[derive(Debug, PartialEq, Eq, Clone)]
_RNvMNtCsiia64awkvAv_15rsonpath_syntax5errorNtB2_17ParseErrorBuilder5buildB4_:
   48|  2.43k|    pub(crate) fn build(self, str: String) -> ParseError {
   49|  2.43k|        ParseError {
   50|  2.43k|            input: str,
   51|  2.43k|            syntax_errors: self.syntax_errors,
   52|  2.43k|        }
   53|  2.43k|    }

_RNvMs2_Csiia64awkvAv_15rsonpath_syntaxNtB5_6Parser5parseCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
  298|  2.47k|    pub fn parse(&self, str: &str) -> Result<JsonPathQuery> {
  299|  2.47k|        crate::parser::parse_json_path_query(str, &self.options)
  300|  2.47k|    }
_RNvCsiia64awkvAv_15rsonpath_syntax5parseCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
  283|  2.47k|pub fn parse(str: &str) -> Result<JsonPathQuery> {
  284|  2.47k|    Parser::default().parse(str)
  285|  2.47k|}
_RNvXss_Csiia64awkvAv_15rsonpath_syntaxNtB5_6ParserNtNtCslATUeuPuGvJ_4core7default7Default7defaultCs7ygs9j6EcjK_26query_fuzz_arbitrary_bytes:
  160|  2.47k|#[derive(Debug, Clone, Default)]
_RNvXs0_Csiia64awkvAv_15rsonpath_syntaxNtB5_13ParserOptionsNtNtCslATUeuPuGvJ_4core7default7Default7default:
  233|  2.47k|    fn default() -> Self {
  234|  2.47k|        Self {
  235|  2.47k|            relaxed_whitespace: false,
  236|  2.47k|        }
  237|  2.47k|    }
_RNvMs_Csiia64awkvAv_15rsonpath_syntaxNtB4_13ParserOptions30is_trailing_whitespace_allowedB4_:
  226|  2.47k|    fn is_trailing_whitespace_allowed(&self) -> bool {
  227|  2.47k|        self.relaxed_whitespace
  228|  2.47k|    }
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors4manyB5_:
  642|  1.35k|    pub fn many(vec: Vec<Selector>) -> Self {
  643|  1.35k|        assert!(!vec.is_empty(), "cannot create an empty Selectors collection");
  644|  1.35k|        Self { inner: vec }
  645|  1.35k|    }
_RNvMs_Csiia64awkvAv_15rsonpath_syntaxNtB4_13ParserOptions29is_leading_whitespace_allowedB4_:
  222|    113|    fn is_leading_whitespace_allowed(&self) -> bool {
  223|    113|        self.relaxed_whitespace
  224|    113|    }
_RNvMsf_Csiia64awkvAv_15rsonpath_syntaxNtB5_9Selectors3one:
  627|  8.38k|    pub fn one(selector: Selector) -> Self {
  628|  8.38k|        Self { inner: vec![selector] }
  629|  8.38k|    }
_RNvXs9_Csiia64awkvAv_15rsonpath_syntaxNtB5_5SliceNtNtCslATUeuPuGvJ_4core7default7Default7defaultB5_:
  502|  34.5k|    fn default() -> Self {
  503|  34.5k|        Self {
  504|  34.5k|            start: Index::FromStart(0.into()),
  505|  34.5k|            end: None,
  506|  34.5k|            step: Step::Forward(1.into()),
  507|  34.5k|        }
  508|  34.5k|    }

_RNvXs1_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntINtNtCslATUeuPuGvJ_4core7convert7TryFromxE8try_fromB7_:
  381|  24.0k|    fn try_from(value: i64) -> Result<Self, Self::Error> {
  382|  24.0k|        if value > JSON_INT_UPPER_LIMIT {
  383|    867|            Err(JsonIntOverflowError::int_pos_overflow(value))
  384|  23.2k|        } else if value < JSON_INT_LOWER_LIMIT {
  385|  1.12k|            Err(JsonIntOverflowError::int_neg_overflow(value))
  386|       |        } else {
  387|  22.0k|            Ok(Self::new(value))
  388|       |        }
  389|  24.0k|    }
_RNvXs7_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_strB7_:
  440|  26.6k|    fn from_str(s: &str) -> Result<Self, Self::Err> {
  441|  26.6k|        match i64::from_str(s) {
  442|  24.0k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
  443|  2.59k|            Err(err) => Err(Self::Err::int_parse_error(s, err.kind())),
  444|       |        }
  445|  26.6k|    }
_RNvXsa_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert4FrommE4fromB7_:
  477|  69.1k|    fn from(value: u32) -> Self {
  478|  69.1k|        Self::new(u64::from(value))
  479|  69.1k|    }
_RNvXsl_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_8JsonUIntE8try_fromB7_:
  594|  5.00k|    fn try_from(value: JsonUInt) -> Result<Self, Self::Error> {
  595|  5.00k|        Self::try_from(value.0)
  596|  5.00k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3newB4_:
  167|  22.0k|    const fn new(index: i64) -> Self {
  168|  22.0k|        Self(index)
  169|  22.0k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3numNtB4_8JsonUInt3newB6_:
  281|  86.2k|    const fn new(index: u64) -> Self {
  282|  86.2k|        Self(index)
  283|  86.2k|    }
_RNCNvXs7_NtCsiia64awkvAv_15rsonpath_syntax3numNtB7_7JsonIntNtNtNtCslATUeuPuGvJ_4core3str6traits7FromStr8from_str0B9_:
  442|  1.99k|            Ok(x) => x.try_into().map_err(|e| Self::Err::parse_conversion_err(s, &e)),
_RNvXsj_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_15JsonNonZeroUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromyE8try_fromB7_:
  566|  5.00k|    fn try_from(value: u64) -> Result<Self, Self::Error> {
  567|  5.00k|        if value > JSON_UINT_UPPER_LIMIT {
  568|      0|            Err(JsonIntOverflowError::uint_pos_overflow(value))
  569|  5.00k|        } else if let Some(x) = NonZeroU64::new(value) {
  570|  5.00k|            Ok(Self(x))
  571|       |        } else {
  572|      0|            Err(JsonIntOverflowError::zero_non_zero_uint())
  573|       |        }
  574|  5.00k|    }
_RNvXsd_NtCsiia64awkvAv_15rsonpath_syntax3numNtB5_8JsonUIntINtNtCslATUeuPuGvJ_4core7convert7TryFromNtB5_7JsonIntE8try_fromB7_:
  506|  22.0k|    fn try_from(value: JsonInt) -> Result<Self, Self::Error> {
  507|  22.0k|        if value.0 < 0 {
  508|  5.00k|            Err(JsonIntOverflowError::negative_uint(value.0))
  509|       |        } else {
  510|  17.0k|            Ok(Self::new(value.0 as u64))
  511|       |        }
  512|  22.0k|    }
_RNvMNtCsiia64awkvAv_15rsonpath_syntax3numNtB2_7JsonInt3abs:
  243|  5.00k|    pub const fn abs(&self) -> JsonUInt {
  244|  5.00k|        JsonUInt(self.0.unsigned_abs())
  245|  5.00k|    }

_RNvMNtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_pos_overflowB6_:
   26|    867|    pub(crate) fn int_pos_overflow(src: i64) -> Self {
   27|    867|        Self {
   28|    867|            kind: JsonIntOverflowKind::IntPos(src),
   29|    867|        }
   30|    867|    }
_RNvMs_NtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError20parse_conversion_err:
   75|  1.99k|    pub(crate) fn parse_conversion_err(src: &str, err: &JsonIntOverflowError) -> Self {
   76|  1.99k|        Self {
   77|  1.99k|            kind: match err.kind {
   78|       |                JsonIntOverflowKind::IntPosU(_) | JsonIntOverflowKind::IntPos(_) => {
   79|    867|                    JsonIntParseErrorKind::IntPosOverflow(src.to_string())
   80|       |                }
   81|  1.12k|                JsonIntOverflowKind::IntNeg(_) => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
   82|      0|                JsonIntOverflowKind::UIntPos(_) => JsonIntParseErrorKind::UIntPosOverflow(src.to_string()),
   83|      0|                JsonIntOverflowKind::UIntNeg(_) => JsonIntParseErrorKind::UIntNegOverflow(src.to_string()),
   84|      0|                JsonIntOverflowKind::NonZeroUIntZero => JsonIntParseErrorKind::NonZeroUIntZero(src.to_string()),
   85|       |            },
   86|       |        }
   87|  1.99k|    }
_RNvMs_NtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB4_17JsonIntParseError15int_parse_error:
   64|  2.59k|    pub(crate) fn int_parse_error(src: &str, err: &IntErrorKind) -> Self {
   65|  2.59k|        Self {
   66|  2.59k|            kind: match err {
   67|  1.38k|                IntErrorKind::PosOverflow => JsonIntParseErrorKind::IntPosOverflow(src.to_string()),
   68|  1.20k|                IntErrorKind::NegOverflow => JsonIntParseErrorKind::IntNegOverflow(src.to_string()),
   69|      0|                IntErrorKind::Zero => unreachable!(), // Zero is always a valid JsonInt value.
   70|      0|                _ => JsonIntParseErrorKind::InvalidFormat(src.to_string()),
   71|       |            },
   72|       |        }
   73|  2.59k|    }
_RNvMNtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError16int_neg_overflowB6_:
   38|  1.12k|    pub(crate) fn int_neg_overflow(src: i64) -> Self {
   39|  1.12k|        Self {
   40|  1.12k|            kind: JsonIntOverflowKind::IntNeg(src),
   41|  1.12k|        }
   42|  1.12k|    }
_RNvMNtNtCsiia64awkvAv_15rsonpath_syntax3num5errorNtB2_20JsonIntOverflowError13negative_uintB6_:
   50|  5.00k|    pub(crate) fn negative_uint(src: i64) -> Self {
   51|  5.00k|        Self {
   52|  5.00k|            kind: JsonIntOverflowKind::UIntNeg(src),
   53|  5.00k|        }
   54|  5.00k|    }

_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser14index_selector:
  302|  31.8k|fn index_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  303|       |    // This has to be called after the slice selector.
  304|       |    // Thanks to that we can make a hard cut if we parsed an integer but it doesn't work as an index.
  305|  31.8k|    let (rest, int) = int(q)?;
  306|  10.5k|    match parse_directional_int(int) {
  307|  7.14k|        DirectionalInt::Plus(int) => Ok((rest, Selector::Index(Index::FromStart(int)))),
  308|  1.53k|        DirectionalInt::Minus(int) => Ok((rest, Selector::Index(Index::FromEnd(int)))),
  309|  1.88k|        DirectionalInt::Error(err) => Err(Err::Failure(InternalParseError::SyntaxError(
  310|  1.88k|            SyntaxError::new(SyntaxErrorKind::IndexParseError(err), q.len(), int.len()),
  311|  1.88k|            rest,
  312|  1.88k|        ))),
  313|       |    }
  314|  31.8k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser14slice_selector:
  254|  68.5k|fn slice_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  255|  68.5k|    let (rest, opt_start) = terminated(opt(int), ignore_whitespace(char(':')))(q)?;
  256|       |    // We have parsed a ':', so this *must* be a slice selector. Any errors after here are fatal.
  257|  34.5k|    let mut slice = crate::Slice::default();
  258|       |
  259|  34.5k|    if let Some(start_str) = opt_start {
  260|  5.22k|        match parse_directional_int(start_str) {
  261|  2.05k|            DirectionalInt::Plus(int) => slice.start = Index::FromStart(int),
  262|  2.09k|            DirectionalInt::Minus(int) => slice.start = Index::FromEnd(int),
  263|  1.06k|            DirectionalInt::Error(err) => {
  264|  1.06k|                return fail(
  265|  1.06k|                    SyntaxErrorKind::SliceStartParseError(err),
  266|  1.06k|                    q.len(),
  267|  1.06k|                    start_str.len(),
  268|  1.06k|                    rest,
  269|  1.06k|                );
  270|       |            }
  271|       |        };
  272|  29.3k|    }
  273|  33.5k|    let q = rest;
  274|  33.5k|    let (rest, opt_end) = opt(ignore_whitespace(int))(q)?;
  275|       |
  276|  33.0k|    if let Some(end_str) = opt_end {
  277|  5.05k|        match parse_directional_int(end_str) {
  278|  3.46k|            DirectionalInt::Plus(int) => slice.end = Some(Index::FromStart(int)),
  279|    630|            DirectionalInt::Minus(int) => slice.end = Some(Index::FromEnd(int)),
  280|    954|            DirectionalInt::Error(err) => {
  281|    954|                return fail(SyntaxErrorKind::SliceEndParseError(err), q.len(), end_str.len(), rest);
  282|       |            }
  283|       |        };
  284|  27.9k|    }
  285|       |
  286|  32.0k|    let q = rest;
  287|  32.0k|    let (rest, opt_step) = opt(ignore_whitespace(preceded(char(':'), opt(ignore_whitespace(int)))))(q)?;
  288|       |
  289|  31.4k|    if let Some(Some(step_str)) = opt_step {
  290|  5.83k|        match parse_directional_int(step_str) {
  291|  4.41k|            DirectionalInt::Plus(int) => slice.step = Step::Forward(int),
  292|    743|            DirectionalInt::Minus(int) => slice.step = Step::Backward(int),
  293|    679|            DirectionalInt::Error(err) => {
  294|    679|                return fail(SyntaxErrorKind::SliceStepParseError(err), q.len(), step_str.len(), rest);
  295|       |            }
  296|       |        };
  297|  25.6k|    }
  298|       |
  299|  30.7k|    Ok((rest, Selector::Slice(slice)))
  300|  68.5k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_13name_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  4.60k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1B_cBZ_NtNtB4_5error18InternalParseErrorNCINvNtNtB1L_9character8complete4charB1B_B2t_E0NCINvNtB1L_10combinator3optB1B_B1B_B2t_NCIB0_B1B_NvB2_3intB2t_E0E0E0B2t_EB4_:
   22|  32.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  32.0k|where
   24|  32.0k|    F: nom::Parser<&'a str, T, E>,
   25|  32.0k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  32.0k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14index_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  84.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  84.0k|where
   24|  84.0k|    F: nom::Parser<&'a str, T, E>,
   25|  84.0k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  84.0k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB8_5error18InternalParseErrorE0B1V_E00B8_:
   29|  34.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14slice_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  68.5k|    move |q: &'a str| {
   27|  68.5k|        inner
   28|  68.5k|            .parse(skip_whitespace(q))
   29|  68.5k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  68.5k|    }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_17wildcard_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  84.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  84.0k|where
   24|  84.0k|    F: nom::Parser<&'a str, T, E>,
   25|  84.0k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  84.0k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selector:
  250|  89.6k|fn wildcard_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  251|  89.6k|    map(tag("*"), |_| Selector::Wildcard)(q)
  252|  89.6k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_17wildcard_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  8.12k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_13name_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  84.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  84.0k|where
   24|  84.0k|    F: nom::Parser<&'a str, T, E>,
   25|  84.0k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  84.0k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser15failed_selector:
  316|  21.2k|fn failed_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  317|  21.2k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
  318|  21.2k|    let error_len = q.len() - rest.len();
  319|  21.2k|    let error_span = &q[..error_len];
  320|  21.2k|
  321|  21.2k|    Err(Err::Failure(InternalParseError::SyntaxError(
  322|  21.2k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
  323|  3.32k|            SyntaxError::new(SyntaxErrorKind::EmptySelector, q.len() + 1, error_len + 2)
  324|       |        } else {
  325|  17.9k|            let meaningful_span = skip_whitespace(error_span);
  326|  17.9k|            let skipped_whitespace_len = error_span.len() - meaningful_span.len();
  327|  17.9k|            let trimmed_span = meaningful_span.trim_end_matches(WHITESPACE);
  328|  17.9k|
  329|  17.9k|            SyntaxError::new(
  330|  17.9k|                SyntaxErrorKind::InvalidSelector,
  331|  17.9k|                q.len() - skipped_whitespace_len,
  332|  17.9k|                trimmed_span.len(),
  333|  17.9k|            )
  334|       |        },
  335|  21.2k|        rest,
  336|  21.2k|    )))
  337|  21.2k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1D_cB11_NtNtB6_5error18InternalParseErrorNCINvNtNtB1N_9character8complete4charB1D_B2w_E0NCINvNtB1N_10combinator3optB1D_B1D_B2w_NCIB2_B1D_NvB4_3intB2w_E0E0E0B2w_E0B6_:
   26|  32.0k|    move |q: &'a str| {
   27|  32.0k|        inner
   28|  32.0k|            .parse(skip_whitespace(q))
   29|  32.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  32.0k|    }
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_14index_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  31.8k|    move |q: &'a str| {
   27|  31.8k|        inner
   28|  31.8k|            .parse(skip_whitespace(q))
   29|  31.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  31.8k|    }
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser15failed_selectors_0B5_:
  322|  21.6k|        if error_span.chars().all(|x| [' ', '\n', '\r', '\t'].contains(&x)) {
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser19bracketed_selection:
  155|  39.2k|fn bracketed_selection(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  156|  39.2k|    let (mut q, _) = char('[')(q)?;
  157|  15.6k|    let mut selectors = vec![];
  158|  15.6k|    let mut syntax_errors = vec![];
  159|       |
  160|       |    loop {
  161|  84.0k|        match selector(q).finish() {
  162|  52.1k|            Ok((rest, selector)) => {
  163|  52.1k|                selectors.push(selector);
  164|  52.1k|                q = rest;
  165|  52.1k|            }
  166|  29.0k|            Err(InternalParseError::SyntaxError(err, rest)) => {
  167|  29.0k|                syntax_errors.push(err);
  168|  29.0k|                q = rest;
  169|  29.0k|            }
  170|  2.78k|            Err(InternalParseError::SyntaxErrors(mut errs, rest)) => {
  171|  2.78k|                syntax_errors.append(&mut errs);
  172|  2.78k|                q = rest;
  173|  2.78k|            }
  174|      0|            Err(err) => return Err(Err::Failure(err)),
  175|       |        }
  176|  84.0k|        q = skip_whitespace(q);
  177|  84.0k|
  178|  84.0k|        match char::<_, nom::error::Error<_>>(',')(q) {
  179|  12.6k|            Ok((rest, _)) => q = rest,
  180|       |            Err(_) => {
  181|  71.3k|                if let Ok((rest, _)) = char::<_, nom::error::Error<_>>(']')(q) {
  182|  13.7k|                    q = rest;
  183|  13.7k|                    break;
  184|  57.6k|                } else if q.is_empty() {
  185|  1.83k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingClosingBracket, 0, 1));
  186|  1.83k|                    break;
  187|       |                } else {
  188|  55.7k|                    syntax_errors.push(SyntaxError::new(SyntaxErrorKind::MissingSelectorSeparator, q.len(), 1))
  189|       |                }
  190|       |            }
  191|       |        }
  192|       |    }
  193|       |
  194|  15.6k|    if syntax_errors.is_empty() {
  195|  1.35k|        Ok((q, Selectors::many(selectors)))
  196|       |    } else {
  197|  14.2k|        Err(Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, q)))
  198|       |    }
  199|  39.2k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB4_7SegmentEB4_:
  143|  39.2k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  144|       |    move |q: &str| {
  145|       |        let rest = skip_one(q)
  146|       |            .trim_start_matches('.')
  147|       |            .trim_start_matches(|x| x != '.' && x != '[');
  148|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  149|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|       |            rest,
  151|       |        )))
  152|       |    }
  153|  39.2k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser13name_selector:
  240|  84.0k|fn name_selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  241|  84.0k|    return map(
  242|  84.0k|        alt((
  243|  84.0k|            preceded(char('\''), string(StringParseMode::SingleQuoted)),
  244|  84.0k|            preceded(char('"'), string(StringParseMode::DoubleQuoted)),
  245|  84.0k|        )),
  246|  84.0k|        Selector::Name,
  247|  84.0k|    )(q);
  248|  84.0k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB4_8SelectorNvB2_14slice_selectorNtNtB4_5error18InternalParseErrorEB4_:
   22|  84.0k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  84.0k|where
   24|  84.0k|    F: nom::Parser<&'a str, T, E>,
   25|  84.0k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  84.0k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser21parse_json_path_query:
   33|  2.47k|pub(crate) fn parse_json_path_query(q: &str, options: &ParserOptions) -> Result<JsonPathQuery> {
   34|  2.47k|    let original_input = q;
   35|  2.47k|    let mut parse_error = ParseErrorBuilder::new();
   36|  2.47k|    let mut segments = vec![];
   37|  2.47k|    let q = skip_whitespace(q);
   38|  2.47k|    let leading_whitespace_len = original_input.len() - q.len();
   39|  2.47k|    if leading_whitespace_len > 0 && !options.is_leading_whitespace_allowed() {
   40|    113|        parse_error.add(SyntaxError::new(
   41|    113|            SyntaxErrorKind::DisallowedLeadingWhitespace,
   42|    113|            original_input.len(),
   43|    113|            leading_whitespace_len,
   44|    113|        ));
   45|  2.36k|    }
   46|  2.47k|    let q = match char::<_, nom::error::Error<_>>('$')(q).finish() {
   47|    143|        Ok((q, _)) => skip_whitespace(q),
   48|  2.33k|        Err(e) => {
   49|  2.33k|            parse_error.add(SyntaxError::new(
   50|  2.33k|                SyntaxErrorKind::MissingRootIdentifier,
   51|  2.33k|                e.input.len(),
   52|  2.33k|                q.chars().next().map_or(1, char::len_utf8),
   53|  2.33k|            ));
   54|  2.33k|            e.input
   55|       |        }
   56|       |    };
   57|       |
   58|  2.47k|    let mut q = q;
   59|  41.6k|    while !q.is_empty() {
   60|  39.2k|        q = match segment(q).finish() {
   61|  9.73k|            Ok((rest, segment)) => {
   62|  9.73k|                segments.push(segment);
   63|  9.73k|                rest
   64|       |            }
   65|  15.2k|            Err(InternalParseError::SyntaxError(err, rest)) => {
   66|  15.2k|                parse_error.add(err);
   67|  15.2k|                rest
   68|       |            }
   69|  14.2k|            Err(InternalParseError::SyntaxErrors(errs, rest)) => {
   70|  14.2k|                parse_error.add_many(errs);
   71|  14.2k|                rest
   72|       |            }
   73|      0|            Err(InternalParseError::NomError(err)) => panic!(
   74|      0|                "unexpected parser error; raw nom errors should never be produced; this is a bug\ncontext:\n{err}"
   75|      0|            ),
   76|       |        };
   77|  39.2k|        q = skip_whitespace(q);
   78|       |    }
   79|       |
   80|       |    // For strict RFC compliance trailing whitespace has to be disallowed.
   81|       |    // This is hard to organically obtain from the parsing above, so we insert this awkward direct check if needed.
   82|  2.47k|    if !options.is_trailing_whitespace_allowed() {
   83|  2.47k|        let trimmed = original_input.trim_end_matches(WHITESPACE);
   84|  2.47k|        let trailing_whitespace_len = original_input.len() - trimmed.len();
   85|  2.47k|        if trailing_whitespace_len > 0 {
   86|    513|            parse_error.add(SyntaxError::new(
   87|    513|                SyntaxErrorKind::DisallowedTrailingWhitespace,
   88|    513|                trailing_whitespace_len,
   89|    513|                trailing_whitespace_len,
   90|    513|            ));
   91|  1.96k|        }
   92|      0|    }
   93|       |
   94|  2.47k|    if parse_error.is_empty() {
   95|     45|        Ok(JsonPathQuery { segments })
   96|       |    } else {
   97|  2.43k|        Err(parse_error.build(original_input.to_owned()))
   98|       |    }
   99|  2.47k|}
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser17wildcard_selector0B5_:
  251|  9.64k|    map(tag("*"), |_| Selector::Wildcard)(q)
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser3int:
  358|   161k|fn int(q: &str) -> IResult<&str, &str, InternalParseError> {
  359|   161k|    let (rest, int) = recognize(alt((preceded(char('-'), digit1), digit1)))(q)?;
  360|       |
  361|  40.4k|    if int != "0" {
  362|  37.0k|        if int == "-0" {
  363|  1.32k|            return Err(Err::Failure(InternalParseError::SyntaxError(
  364|  1.32k|                SyntaxError::new(SyntaxErrorKind::NegativeZeroInteger, q.len(), int.len()),
  365|  1.32k|                rest,
  366|  1.32k|            )));
  367|  35.6k|        }
  368|  35.6k|        let without_minus = int.strip_prefix('-').unwrap_or(int);
  369|  35.6k|        if without_minus.strip_prefix(['0']).is_some() {
  370|  1.89k|            return Err(Err::Failure(InternalParseError::SyntaxError(
  371|  1.89k|                SyntaxError::new(SyntaxErrorKind::LeadingZeros, q.len(), int.len()),
  372|  1.89k|                rest,
  373|  1.89k|            )));
  374|  33.7k|        }
  375|  3.45k|    }
  376|       |
  377|  37.2k|    Ok((rest, int))
  378|   161k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceINtNtCslATUeuPuGvJ_4core6option6OptionReENCINvNtCsijflsOnQTe0_3nom8sequence8precededB1F_cB13_NtNtB8_5error18InternalParseErrorNCINvNtNtB1P_9character8complete4charB1F_B2y_E0NCINvNtB1P_10combinator3optB1F_B1F_B2y_NCIB4_B1F_NvB6_3intB2y_E0E0E0B2y_E00B8_:
   29|  27.3k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand0B5_:
  205|  10.7k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  206|  10.7k|                acc.push(x);
  207|  10.7k|                acc
  208|  10.7k|            }),
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB4_9SelectorsEB4_:
  143|  71.2k|fn failed_segment<T>(kind: SyntaxErrorKind) -> impl FnMut(&str) -> IResult<&str, T, InternalParseError> {
  144|       |    move |q: &str| {
  145|       |        let rest = skip_one(q)
  146|       |            .trim_start_matches('.')
  147|       |            .trim_start_matches(|x| x != '.' && x != '[');
  148|       |        Err(Err::Failure(InternalParseError::SyntaxError(
  149|       |            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|       |            rest,
  151|       |        )))
  152|       |    }
  153|  71.2k|}
_RNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_first0B7_:
  214|  28.8k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
_RNvXs2_NtCsiia64awkvAv_15rsonpath_syntax6parserNtB5_15StringParseModeNtNtCslATUeuPuGvJ_4core3cmp9PartialEq2eqB7_:
  234|  1.51k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser21parse_directional_int:
  345|  26.6k|fn parse_directional_int(int_str: &str) -> DirectionalInt {
  346|  26.6k|    match JsonInt::from_str(int_str) {
  347|  22.0k|        Ok(int) => {
  348|  22.0k|            if let Ok(uint) = JsonUInt::try_from(int) {
  349|  17.0k|                DirectionalInt::Plus(uint)
  350|       |            } else {
  351|  5.00k|                DirectionalInt::Minus(int.abs().try_into().expect("zero would convert to JsonUInt above"))
  352|       |            }
  353|       |        }
  354|  4.58k|        Err(err) => DirectionalInt::Error(err),
  355|       |    }
  356|  26.6k|}
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB6_3intNtNtB8_5error18InternalParseErrorE00B8_:
   29|  10.8k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB2_3intNtNtB4_5error18InternalParseErrorEB4_:
   22|  65.5k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  65.5k|where
   24|  65.5k|    F: nom::Parser<&'a str, T, E>,
   25|  65.5k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  65.5k|}
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser15failed_selector0B5_:
  317|   136k|    let rest = q.trim_start_matches(|x| x != ',' && x != ']');
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB8_7SegmentE00B8_:
  147|  30.8k|            .trim_start_matches(|x| x != '.' && x != '[');
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB6_5error18InternalParseErrorE0B1T_E0B6_:
   26|  66.4k|    move |q: &'a str| {
   27|  66.4k|        inner
   28|  66.4k|            .parse(skip_whitespace(q))
   29|  66.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  66.4k|    }
_RNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char:
  219|  17.5k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  220|  17.5k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  221|  17.5k|    }
_RINvNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string023read_hexadecimal_escapeNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  511|  6.88k|        fn read_hexadecimal_escape<I>(
  512|  6.88k|            q_len: usize,
  513|  6.88k|            c_idx: usize,
  514|  6.88k|            chars: &mut Peekable<I>,
  515|  6.88k|        ) -> std::result::Result<u32, SyntaxError>
  516|  6.88k|        where
  517|  6.88k|            I: Iterator<Item = (usize, char)>,
  518|  6.88k|        {
  519|  6.88k|            let mut x = 0;
  520|  26.4k|            for i in 0..4 {
  521|  22.0k|                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|  22.0k|                    SyntaxErrorKind::InvalidEscapeSequence,
  523|  22.0k|                    q_len - c_idx + 1,
  524|  22.0k|                    2 + i,
  525|  22.0k|                ))?;
  526|  22.0k|                let v = match c {
  527|  21.8k|                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|  8.54k|                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|  3.72k|                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|  2.41k|                        return Err(SyntaxError::new(
  533|  2.41k|                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|  2.41k|                            q_len - c_idx - i - 1,
  535|  2.41k|                            1,
  536|  2.41k|                        ))
  537|       |                    }
  538|       |                };
  539|  19.5k|                x <<= 4;
  540|  19.5k|                x += v;
  541|  19.5k|                chars.next();
  542|       |            }
  543|  4.44k|            Ok(x)
  544|  6.88k|        }
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceReNvB4_3intNtNtB6_5error18InternalParseErrorE0B6_:
   26|  61.4k|    move |q: &'a str| {
   27|  61.4k|        inner
   28|  61.4k|            .parse(skip_whitespace(q))
   29|  61.4k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  61.4k|    }
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespacecNCINvNtNtCsijflsOnQTe0_3nom9character8complete4charReNtNtB4_5error18InternalParseErrorE0B1R_EB4_:
   22|  68.5k|fn ignore_whitespace<'a, T, F, E>(mut inner: F) -> impl FnMut(&'a str) -> IResult<&'a str, T, E>
   23|  68.5k|where
   24|  68.5k|    F: nom::Parser<&'a str, T, E>,
   25|  68.5k|{
   26|       |    move |q: &'a str| {
   27|       |        inner
   28|       |            .parse(skip_whitespace(q))
   29|       |            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|       |    }
   31|  68.5k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser13child_segment:
  125|  32.0k|fn child_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  126|  32.0k|    map(
  127|  32.0k|        alt((
  128|  32.0k|            bracketed_selection,
  129|  32.0k|            // This cut is only correct because we try parsing descendant_segment first.
  130|  32.0k|            preceded(
  131|  32.0k|                char('.'),
  132|  32.0k|                cut(alt((
  133|  32.0k|                    map(wildcard_selector, Selectors::one),
  134|  32.0k|                    member_name_shorthand,
  135|  32.0k|                    failed_segment(SyntaxErrorKind::InvalidNameShorthandAfterOnePeriod),
  136|  32.0k|                ))),
  137|  32.0k|            ),
  138|  32.0k|        )),
  139|  32.0k|        Segment::Child,
  140|  32.0k|    )(q)
  141|  32.0k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser18descendant_segment:
  110|  39.2k|fn descendant_segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  111|  39.2k|    map(
  112|  39.2k|        preceded(
  113|  39.2k|            tag(".."),
  114|  39.2k|            cut(alt((
  115|  39.2k|                bracketed_selection,
  116|  39.2k|                map(wildcard_selector, Selectors::one),
  117|  39.2k|                member_name_shorthand,
  118|  39.2k|                failed_segment(SyntaxErrorKind::InvalidSegmentAfterTwoPeriods),
  119|  39.2k|            ))),
  120|  39.2k|        ),
  121|  39.2k|        Segment::Descendant,
  122|  39.2k|    )(q)
  123|  39.2k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand:
  201|  11.4k|fn member_name_shorthand(q: &str) -> IResult<&str, Selectors, InternalParseError> {
  202|  11.4k|    return map(
  203|  11.4k|        preceded(
  204|  11.4k|            peek(name_first),
  205|  11.4k|            fold_many0(name_char, JsonStringBuilder::new, |mut acc, x| {
  206|       |                acc.push(x);
  207|       |                acc
  208|  11.4k|            }),
  209|  11.4k|        ),
  210|  11.4k|        |x| Selectors::one(Selector::Name(x.into())),
  211|  11.4k|    )(q);
  212|  11.4k|
  213|  11.4k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  214|  11.4k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  215|  11.4k|            q,
  216|  11.4k|        )
  217|  11.4k|    }
  218|  11.4k|
  219|  11.4k|    fn name_char(q: &str) -> IResult<&str, char, InternalParseError> {
  220|  11.4k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
  221|  11.4k|    }
  222|  11.4k|}
_RINvNtCsiia64awkvAv_15rsonpath_syntax6parser4failNtB4_8SelectorEB4_:
  548|  2.70k|fn fail<T>(kind: SyntaxErrorKind, rev_idx: usize, err_len: usize, rest: &str) -> IResult<&str, T, InternalParseError> {
  549|  2.70k|    Err(Err::Failure(InternalParseError::SyntaxError(
  550|  2.70k|        SyntaxError::new(kind, rev_idx, err_len),
  551|  2.70k|        rest,
  552|  2.70k|    )))
  553|  2.70k|}
_RNCNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string00B7_:
  399|  6.85k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_13name_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  84.0k|    move |q: &'a str| {
   27|  84.0k|        inner
   28|  84.0k|            .parse(skip_whitespace(q))
   29|  84.0k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  84.0k|    }
_RNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand10name_first:
  213|  29.0k|    fn name_first(q: &str) -> IResult<&str, char, InternalParseError> {
  214|  29.0k|        satisfy(|x| x.is_ascii_alphabetic() || matches!(x, '_' | '\u{0080}'..='\u{D7FF}' | '\u{E000}'..='\u{10FFFF}'))(
  215|  29.0k|            q,
  216|  29.0k|        )
  217|  29.0k|    }
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser15skip_whitespace:
   12|   689k|fn skip_whitespace(q: &str) -> &str {
   13|   689k|    q.trim_start_matches(WHITESPACE)
   14|   689k|}
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser8skip_one:
   16|  15.2k|fn skip_one(q: &str) -> &str {
   17|  15.2k|    let mut chars = q.chars();
   18|  15.2k|    chars.next();
   19|  15.2k|    chars.as_str()
   20|  15.2k|}
_RNCNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string0s_0B7_:
  407|  12.1k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14index_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  8.68k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser8selector:
  224|  84.0k|fn selector(q: &str) -> IResult<&str, Selector, InternalParseError> {
  225|  84.0k|    alt((
  226|  84.0k|        ignore_whitespace(name_selector),
  227|  84.0k|        ignore_whitespace(wildcard_selector),
  228|  84.0k|        ignore_whitespace(slice_selector),
  229|  84.0k|        ignore_whitespace(index_selector),
  230|  84.0k|        failed_selector,
  231|  84.0k|    ))(q)
  232|  84.0k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB6_8SelectorNvB4_17wildcard_selectorNtNtB6_5error18InternalParseErrorE0B6_:
   26|  76.6k|    move |q: &'a str| {
   27|  76.6k|        inner
   28|  76.6k|            .parse(skip_whitespace(q))
   29|  76.6k|            .map(|(rest, res)| (skip_whitespace(rest), res))
   30|  76.6k|    }
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB6_9SelectorsE0B6_:
  144|  4.61k|    move |q: &str| {
  145|  4.61k|        let rest = skip_one(q)
  146|  4.61k|            .trim_start_matches('.')
  147|  4.61k|            .trim_start_matches(|x| x != '.' && x != '[');
  148|  4.61k|        Err(Err::Failure(InternalParseError::SyntaxError(
  149|  4.61k|            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|  4.61k|            rest,
  151|  4.61k|        )))
  152|  4.61k|    }
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser17ignore_whitespaceNtB8_8SelectorNvB6_14slice_selectorNtNtB8_5error18InternalParseErrorE00B8_:
   29|  30.7k|            .map(|(rest, res)| (skip_whitespace(rest), res))
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser7segment:
  101|  39.2k|fn segment(q: &str) -> IResult<&str, Segment, InternalParseError> {
  102|  39.2k|    // It's important to check descendant first, since we can always cut based on whether the prefix is ".." or not.
  103|  39.2k|    alt((
  104|  39.2k|        descendant_segment,
  105|  39.2k|        child_segment,
  106|  39.2k|        failed_segment(SyntaxErrorKind::InvalidSegmentStart),
  107|  39.2k|    ))(q)
  108|  39.2k|}
_RNCNvNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthand9name_char0B7_:
  220|  7.28k|        alt((name_first, satisfy(|x| x.is_ascii_digit())))(q)
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser21member_name_shorthands_0B5_:
  210|  6.86k|        |x| Selectors::one(Selector::Name(x.into())),
_RNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string0B5_:
  381|  7.38k|    move |q: &'a str| {
  382|  7.38k|        let mut builder = JsonStringBuilder::new();
  383|  7.38k|        let mut syntax_errors = vec![];
  384|  7.38k|        let mut stream = q.char_indices().peekable();
  385|       |
  386|  74.0k|        while let Some((c_idx, c)) = stream.next() {
  387|  73.4k|            match (c, mode) {
  388|       |                ('\\', _) => {
  389|  13.4k|                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  390|  5.59k|                        Ok(r) => {
  391|  5.59k|                            builder.push(r);
  392|  5.59k|                        }
  393|  7.89k|                        Err(err) => {
  394|  7.89k|                            syntax_errors.push(err);
  395|  7.89k|                        }
  396|       |                    };
  397|       |                }
  398|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  399|  6.88k|                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  400|  6.88k|                    return if syntax_errors.is_empty() {
  401|  4.60k|                        Ok((rest, builder.finish()))
  402|       |                    } else {
  403|  2.27k|                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  404|       |                    };
  405|       |                }
  406|  51.7k|                (..='\u{001F}', _) => {
  407|  12.2k|                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  408|  12.2k|                    syntax_errors.push(SyntaxError::new(
  409|  12.2k|                        SyntaxErrorKind::InvalidUnescapedCharacter,
  410|  12.2k|                        rest.len() + 1,
  411|  12.2k|                        1,
  412|  12.2k|                    ))
  413|       |                }
  414|  40.8k|                _ => {
  415|  40.8k|                    builder.push(c);
  416|  40.8k|                }
  417|       |            }
  418|       |        }
  419|       |
  420|    507|        let err_kind = if mode == StringParseMode::SingleQuoted {
  421|    260|            SyntaxErrorKind::MissingClosingSingleQuote
  422|       |        } else {
  423|    247|            SyntaxErrorKind::MissingClosingDoubleQuote
  424|       |        };
  425|    507|        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  426|    507|        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  427|       |
  428|       |        fn read_escape_sequence<I>(
  429|       |            q_len: usize,
  430|       |            c_idx: usize,
  431|       |            chars: &mut Peekable<I>,
  432|       |            mode: StringParseMode,
  433|       |        ) -> std::result::Result<char, SyntaxError>
  434|       |        where
  435|       |            I: Iterator<Item = (usize, char)>,
  436|       |        {
  437|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|       |                q_len - c_idx,
  440|       |                1,
  441|       |            ))?;
  442|       |            match ctrl {
  443|       |                'u' => {
  444|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|       |                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|       |                        0xD800..=0xDBFF => {
  448|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|       |                                q_len - c_idx,
  451|       |                                6,
  452|       |                            ))?;
  453|       |                            if next != '\\' {
  454|       |                                return Err(SyntaxError::new(
  455|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|       |                                    q_len - c_idx,
  457|       |                                    6,
  458|       |                                ));
  459|       |                            }
  460|       |                            chars.next();
  461|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|       |                                q_len - c_idx,
  464|       |                                6,
  465|       |                            ))?;
  466|       |                            if next != 'u' {
  467|       |                                return Err(SyntaxError::new(
  468|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|       |                                    q_len - c_idx,
  470|       |                                    6,
  471|       |                                ));
  472|       |                            }
  473|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|       |                            match low {
  475|       |                                0xDC00..=0xDFFF => {
  476|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|       |                                _ => Err(SyntaxError::new(
  480|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|       |                                    q_len - c_idx,
  482|       |                                    6,
  483|       |                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|       |                            q_len - c_idx,
  490|       |                            6,
  491|       |                        )),
  492|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|       |                'n' => Ok('\n'),       // U+000A LF line feed
  498|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  500|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|       |                _ => Err(SyntaxError::new(
  504|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  505|       |                    q_len - c_idx,
  506|       |                    2,
  507|       |                )), // no other escape sequences are allowed
  508|       |            }
  509|       |        }
  510|       |
  511|       |        fn read_hexadecimal_escape<I>(
  512|       |            q_len: usize,
  513|       |            c_idx: usize,
  514|       |            chars: &mut Peekable<I>,
  515|       |        ) -> std::result::Result<u32, SyntaxError>
  516|       |        where
  517|       |            I: Iterator<Item = (usize, char)>,
  518|       |        {
  519|       |            let mut x = 0;
  520|       |            for i in 0..4 {
  521|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  523|       |                    q_len - c_idx + 1,
  524|       |                    2 + i,
  525|       |                ))?;
  526|       |                let v = match c {
  527|       |                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|       |                        return Err(SyntaxError::new(
  533|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|       |                            q_len - c_idx - i - 1,
  535|       |                            1,
  536|       |                        ))
  537|       |                    }
  538|       |                };
  539|       |                x <<= 4;
  540|       |                x += v;
  541|       |                chars.next();
  542|       |            }
  543|       |            Ok(x)
  544|       |        }
  545|  7.38k|    }
_RNCNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB8_9SelectorsE00B8_:
  147|  11.3k|            .trim_start_matches(|x| x != '.' && x != '[');
_RNvNtCsiia64awkvAv_15rsonpath_syntax6parser6stringB3_:
  380|   168k|fn string<'a>(mode: StringParseMode) -> impl FnMut(&'a str) -> IResult<&'a str, JsonString, InternalParseError> {
  381|       |    move |q: &'a str| {
  382|       |        let mut builder = JsonStringBuilder::new();
  383|       |        let mut syntax_errors = vec![];
  384|       |        let mut stream = q.char_indices().peekable();
  385|       |
  386|       |        while let Some((c_idx, c)) = stream.next() {
  387|       |            match (c, mode) {
  388|       |                ('\\', _) => {
  389|       |                    match read_escape_sequence(q.len(), c_idx, &mut stream, mode) {
  390|       |                        Ok(r) => {
  391|       |                            builder.push(r);
  392|       |                        }
  393|       |                        Err(err) => {
  394|       |                            syntax_errors.push(err);
  395|       |                        }
  396|       |                    };
  397|       |                }
  398|       |                ('"', StringParseMode::DoubleQuoted) | ('\'', StringParseMode::SingleQuoted) => {
  399|       |                    let rest = stream.next().map_or("", |(i, _)| &q[i..]);
  400|       |                    return if syntax_errors.is_empty() {
  401|       |                        Ok((rest, builder.finish()))
  402|       |                    } else {
  403|       |                        Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, rest)))
  404|       |                    };
  405|       |                }
  406|       |                (..='\u{001F}', _) => {
  407|       |                    let rest = stream.peek().map_or("", |(i, _)| &q[*i..]);
  408|       |                    syntax_errors.push(SyntaxError::new(
  409|       |                        SyntaxErrorKind::InvalidUnescapedCharacter,
  410|       |                        rest.len() + 1,
  411|       |                        1,
  412|       |                    ))
  413|       |                }
  414|       |                _ => {
  415|       |                    builder.push(c);
  416|       |                }
  417|       |            }
  418|       |        }
  419|       |
  420|       |        let err_kind = if mode == StringParseMode::SingleQuoted {
  421|       |            SyntaxErrorKind::MissingClosingSingleQuote
  422|       |        } else {
  423|       |            SyntaxErrorKind::MissingClosingDoubleQuote
  424|       |        };
  425|       |        syntax_errors.push(SyntaxError::new(err_kind, 0, 1));
  426|       |        return Err(nom::Err::Failure(InternalParseError::SyntaxErrors(syntax_errors, "")));
  427|       |
  428|       |        fn read_escape_sequence<I>(
  429|       |            q_len: usize,
  430|       |            c_idx: usize,
  431|       |            chars: &mut Peekable<I>,
  432|       |            mode: StringParseMode,
  433|       |        ) -> std::result::Result<char, SyntaxError>
  434|       |        where
  435|       |            I: Iterator<Item = (usize, char)>,
  436|       |        {
  437|       |            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|       |                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|       |                q_len - c_idx,
  440|       |                1,
  441|       |            ))?;
  442|       |            match ctrl {
  443|       |                'u' => {
  444|       |                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|       |                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|       |                        0xD800..=0xDBFF => {
  448|       |                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|       |                                q_len - c_idx,
  451|       |                                6,
  452|       |                            ))?;
  453|       |                            if next != '\\' {
  454|       |                                return Err(SyntaxError::new(
  455|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|       |                                    q_len - c_idx,
  457|       |                                    6,
  458|       |                                ));
  459|       |                            }
  460|       |                            chars.next();
  461|       |                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|       |                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|       |                                q_len - c_idx,
  464|       |                                6,
  465|       |                            ))?;
  466|       |                            if next != 'u' {
  467|       |                                return Err(SyntaxError::new(
  468|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|       |                                    q_len - c_idx,
  470|       |                                    6,
  471|       |                                ));
  472|       |                            }
  473|       |                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|       |                            match low {
  475|       |                                0xDC00..=0xDFFF => {
  476|       |                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|       |                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|       |                                _ => Err(SyntaxError::new(
  480|       |                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|       |                                    q_len - c_idx,
  482|       |                                    6,
  483|       |                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|       |                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|       |                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|       |                            q_len - c_idx,
  490|       |                            6,
  491|       |                        )),
  492|       |                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|       |                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|       |                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|       |                'n' => Ok('\n'),       // U+000A LF line feed
  498|       |                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|       |                'r' => Ok('\r'),       // U+000D CR carriage return
  500|       |                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|       |                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|       |                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|       |                _ => Err(SyntaxError::new(
  504|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  505|       |                    q_len - c_idx,
  506|       |                    2,
  507|       |                )), // no other escape sequences are allowed
  508|       |            }
  509|       |        }
  510|       |
  511|       |        fn read_hexadecimal_escape<I>(
  512|       |            q_len: usize,
  513|       |            c_idx: usize,
  514|       |            chars: &mut Peekable<I>,
  515|       |        ) -> std::result::Result<u32, SyntaxError>
  516|       |        where
  517|       |            I: Iterator<Item = (usize, char)>,
  518|       |        {
  519|       |            let mut x = 0;
  520|       |            for i in 0..4 {
  521|       |                let &(_, c) = chars.peek().ok_or(SyntaxError::new(
  522|       |                    SyntaxErrorKind::InvalidEscapeSequence,
  523|       |                    q_len - c_idx + 1,
  524|       |                    2 + i,
  525|       |                ))?;
  526|       |                let v = match c {
  527|       |                    '0'..='9' => c as u32 - '0' as u32,
  528|       |                    // RFC8259.7-2 The hexadecimal letters A through F can be uppercase or lowercase.
  529|       |                    'a'..='f' => c as u32 - 'a' as u32 + 10,
  530|       |                    'A'..='F' => c as u32 - 'A' as u32 + 10,
  531|       |                    _ => {
  532|       |                        return Err(SyntaxError::new(
  533|       |                            SyntaxErrorKind::InvalidHexDigitInUnicodeEscape,
  534|       |                            q_len - c_idx - i - 1,
  535|       |                            1,
  536|       |                        ))
  537|       |                    }
  538|       |                };
  539|       |                x <<= 4;
  540|       |                x += v;
  541|       |                chars.next();
  542|       |            }
  543|       |            Ok(x)
  544|       |        }
  545|       |    }
  546|   168k|}
_RNCINvNtCsiia64awkvAv_15rsonpath_syntax6parser14failed_segmentNtB6_7SegmentE0B6_:
  144|  10.5k|    move |q: &str| {
  145|  10.5k|        let rest = skip_one(q)
  146|  10.5k|            .trim_start_matches('.')
  147|  10.5k|            .trim_start_matches(|x| x != '.' && x != '[');
  148|  10.5k|        Err(Err::Failure(InternalParseError::SyntaxError(
  149|  10.5k|            SyntaxError::new(kind.clone(), q.len(), q.len() - rest.len()),
  150|  10.5k|            rest,
  151|  10.5k|        )))
  152|  10.5k|    }
_RINvNCNvNtCsiia64awkvAv_15rsonpath_syntax6parser6string020read_escape_sequenceNtNtNtCslATUeuPuGvJ_4core3str4iter11CharIndicesEB8_:
  428|  13.4k|        fn read_escape_sequence<I>(
  429|  13.4k|            q_len: usize,
  430|  13.4k|            c_idx: usize,
  431|  13.4k|            chars: &mut Peekable<I>,
  432|  13.4k|            mode: StringParseMode,
  433|  13.4k|        ) -> std::result::Result<char, SyntaxError>
  434|  13.4k|        where
  435|  13.4k|            I: Iterator<Item = (usize, char)>,
  436|  13.4k|        {
  437|  13.4k|            let (i, ctrl) = chars.next().ok_or(SyntaxError::new(
  438|  13.4k|                SyntaxErrorKind::InvalidUnescapedCharacter,
  439|  13.4k|                q_len - c_idx,
  440|  13.4k|                1,
  441|  13.4k|            ))?;
  442|  1.00k|            match ctrl {
  443|       |                'u' => {
  444|  5.88k|                    let raw_c = read_hexadecimal_escape(q_len, i, chars)?;
  445|  3.73k|                    match raw_c {
  446|       |                        // High surrogate, start of a UTF-16 pair.
  447|  3.14k|                        0xD800..=0xDBFF => {
  448|  2.68k|                            let &(_, next) = chars.peek().ok_or(SyntaxError::new(
  449|  2.68k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  450|  2.68k|                                q_len - c_idx,
  451|  2.68k|                                6,
  452|  2.68k|                            ))?;
  453|  2.68k|                            if next != '\\' {
  454|    646|                                return Err(SyntaxError::new(
  455|    646|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  456|    646|                                    q_len - c_idx,
  457|    646|                                    6,
  458|    646|                                ));
  459|  2.03k|                            }
  460|  2.03k|                            chars.next();
  461|  2.03k|                            let (i, next) = chars.next().ok_or(SyntaxError::new(
  462|  2.03k|                                SyntaxErrorKind::UnpairedHighSurrogate,
  463|  2.03k|                                q_len - c_idx,
  464|  2.03k|                                6,
  465|  2.03k|                            ))?;
  466|  2.03k|                            if next != 'u' {
  467|  1.03k|                                return Err(SyntaxError::new(
  468|  1.03k|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  469|  1.03k|                                    q_len - c_idx,
  470|  1.03k|                                    6,
  471|  1.03k|                                ));
  472|    998|                            }
  473|    998|                            let low = read_hexadecimal_escape(q_len, i, chars)?;
  474|    710|                            match low {
  475|    498|                                0xDC00..=0xDFFF => {
  476|    497|                                    let n = ((raw_c - 0xD800) << 10 | (low - 0xDC00)) + 0x10000;
  477|    497|                                    Ok(char::from_u32(n).expect("high and low surrogate pair is always a valid char"))
  478|       |                                }
  479|    213|                                _ => Err(SyntaxError::new(
  480|    213|                                    SyntaxErrorKind::UnpairedHighSurrogate,
  481|    213|                                    q_len - c_idx,
  482|    213|                                    6,
  483|    213|                                )),
  484|       |                            }
  485|       |                        }
  486|       |                        // Low surrogate, invalid escape sequence.
  487|    462|                        0xDC00..=0xDFFF => Err(SyntaxError::new(
  488|    433|                            SyntaxErrorKind::UnpairedLowSurrogate,
  489|    433|                            q_len - c_idx,
  490|    433|                            6,
  491|    433|                        )),
  492|    615|                        _ => Ok(char::from_u32(raw_c).expect("invalid values are handled above")),
  493|       |                    }
  494|       |                }
  495|    194|                'b' => Ok('\u{0008}'), // U+0008 BS backspace
  496|    963|                't' => Ok('\t'),       // U+0009 HT horizontal tab
  497|    194|                'n' => Ok('\n'),       // U+000A LF line feed
  498|    200|                'f' => Ok('\u{000C}'), // U+000C FF form feed
  499|    196|                'r' => Ok('\r'),       // U+000D CR carriage return
  500|    496|                '"' if mode == StringParseMode::DoubleQuoted => Ok(ctrl),
  501|    508|                '\'' if mode == StringParseMode::SingleQuoted => Ok(ctrl),
  502|  2.32k|                '/' | '\\' => Ok(ctrl), // " ' / \ are passed as is
  503|  3.09k|                _ => Err(SyntaxError::new(
  504|  3.09k|                    SyntaxErrorKind::InvalidEscapeSequence,
  505|  3.09k|                    q_len - c_idx,
  506|  3.09k|                    2,
  507|  3.09k|                )), // no other escape sequences are allowed
  508|       |            }
  509|  13.4k|        }

_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder6finish:
   50|  11.4k|    pub(crate) fn finish(mut self) -> JsonString {
   51|  11.4k|        self.quoted.push('"');
   52|  11.4k|        JsonString { quoted: self.quoted }
   53|  11.4k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder4push:
   45|  57.2k|    pub(crate) fn push(&mut self, char: char) -> &mut Self {
   46|  57.2k|        self.quoted.push(char);
   47|  57.2k|        self
   48|  57.2k|    }
_RNvMs_NtCsiia64awkvAv_15rsonpath_syntax3strNtB4_17JsonStringBuilder3new:
   39|  14.2k|    pub(crate) fn new() -> Self {
   40|  14.2k|        Self {
   41|  14.2k|            quoted: String::from('"'),
   42|  14.2k|        }
   43|  14.2k|    }
_RNvXs0_NtCsiia64awkvAv_15rsonpath_syntax3strNtB5_10JsonStringINtNtCslATUeuPuGvJ_4core7convert4FromNtB5_17JsonStringBuilderE4from:
   58|  6.86k|    fn from(value: JsonStringBuilder) -> Self {
   59|  6.86k|        value.finish()
   60|  6.86k|    }

